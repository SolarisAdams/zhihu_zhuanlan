{
    "title": "tiankonguse", 
    "description": "记录下自己在道路上的所见所闻所做所得。", 
    "followers": [
        "https://www.zhihu.com/people/qi.zhang", 
        "https://www.zhihu.com/people/yourheart-84", 
        "https://www.zhihu.com/people/xiao-zhou-26-76", 
        "https://www.zhihu.com/people/a-bu-527", 
        "https://www.zhihu.com/people/jie-ke-15", 
        "https://www.zhihu.com/people/miao-shi-yi-qie-10-38", 
        "https://www.zhihu.com/people/tu-tu-87-46-24", 
        "https://www.zhihu.com/people/lee-87-75", 
        "https://www.zhihu.com/people/chen-lin-kun-83", 
        "https://www.zhihu.com/people/dong-chong-cao-9-17", 
        "https://www.zhihu.com/people/houjinxin", 
        "https://www.zhihu.com/people/wang-ming-66-71", 
        "https://www.zhihu.com/people/bian-zou-bian-kan-73-99", 
        "https://www.zhihu.com/people/Paraoia_Dre", 
        "https://www.zhihu.com/people/dexin", 
        "https://www.zhihu.com/people/ju-shang-38", 
        "https://www.zhihu.com/people/guanjunxiao", 
        "https://www.zhihu.com/people/xiaopangwei", 
        "https://www.zhihu.com/people/li-yuan-mei", 
        "https://www.zhihu.com/people/sheng-zhu-77", 
        "https://www.zhihu.com/people/wc-chen", 
        "https://www.zhihu.com/people/zhong-jun-lin-33", 
        "https://www.zhihu.com/people/reader2018", 
        "https://www.zhihu.com/people/lin-bei-4", 
        "https://www.zhihu.com/people/ykgarfield", 
        "https://www.zhihu.com/people/yongge-89", 
        "https://www.zhihu.com/people/hai-bao-ju-ji-shou", 
        "https://www.zhihu.com/people/feng-guo-bu-liu-hen", 
        "https://www.zhihu.com/people/cai-wei-30-64", 
        "https://www.zhihu.com/people/yansong-80", 
        "https://www.zhihu.com/people/xiao-si-shi-3", 
        "https://www.zhihu.com/people/lixu-78-90", 
        "https://www.zhihu.com/people/leon-13-3-70", 
        "https://www.zhihu.com/people/li-ming-yang-76", 
        "https://www.zhihu.com/people/li-qing-68-37", 
        "https://www.zhihu.com/people/zheng-yan-61-54", 
        "https://www.zhihu.com/people/adblock123", 
        "https://www.zhihu.com/people/zhu-shen-de-en-chong", 
        "https://www.zhihu.com/people/du-du-46-77-99", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/xiao-wan-zi-de-jia", 
        "https://www.zhihu.com/people/kavin-BXJJ", 
        "https://www.zhihu.com/people/yang-fang-fang-70", 
        "https://www.zhihu.com/people/nan-nan-1-24-66", 
        "https://www.zhihu.com/people/song88", 
        "https://www.zhihu.com/people/lujiangjiang2016", 
        "https://www.zhihu.com/people/z3475", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/maggie-75-34-37", 
        "https://www.zhihu.com/people/chen-ming-hua", 
        "https://www.zhihu.com/people/li-zhen-78-47", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/peng-lei-15-9", 
        "https://www.zhihu.com/people/noark", 
        "https://www.zhihu.com/people/xu-xun-64-24", 
        "https://www.zhihu.com/people/mo-hao-ming", 
        "https://www.zhihu.com/people/YGGY05", 
        "https://www.zhihu.com/people/dogedoge", 
        "https://www.zhihu.com/people/baikaishuo", 
        "https://www.zhihu.com/people/dtyr8nt", 
        "https://www.zhihu.com/people/engineer-lii", 
        "https://www.zhihu.com/people/MengQiDLuFei", 
        "https://www.zhihu.com/people/yourenshi", 
        "https://www.zhihu.com/people/sun-yun-tao", 
        "https://www.zhihu.com/people/fogmoon", 
        "https://www.zhihu.com/people/ling-er-xiang-ding-dang"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/82460667", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "文字与记忆", 
            "content": "<p><b>一、背景</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>今天，我优化了一下我个人博客的图片储存架构，以前不能显示的图片也显示出来了。</p><p>关于图片储存的优化历程，以后找时间分享给大家。</p><p>这里说点其他的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>看着这么多文字，我在想我是如何一步步走到这一步的。</p><p>发现从初三起，我的思想就已经有了雏形，后来的一切都是在这之上生根发芽。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、同桌</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>刚好，前几天马云退休，周围流传一个段子：<b>马云说，他初中老师总是给他安排漂亮女生做同桌，他内心还挺感谢老师的，结果前天教师节和老师说起的时候，老师才告诉他原因，说是那样能防止漂亮女生早恋。。。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>说起同桌，上学的时候同桌安排挺有意思。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我上学那时候，我们那小学只有五年而不是六年。</p><p>小学的前四年我完全没印象了。</p><p>我只记得五年级同桌都是男女作为同桌。</p><p>为什么呢？防止男男打架，女女聊天。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>到了初中，大部分人同桌都是同性。</p><p>为什么呢？男女都发育的差不多了，男女同桌容易谈恋爱。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>而初二我的同桌竟然是女孩，甚至前后左右都是女孩。</p><p>我一直没想明白原因，现在明白了，原来我长得太丑了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>初四，我在班级上排名不错，但是不知道为什么，我被安排在了最后一排，到现在也没想明白。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，初四之前，我没有自己的想法，每天都是上课与学习。</p><p><b>初四，我像是破茧重生，有了自己的思想，而且对未来充满了自信与希望。</b></p><p><b>之后一切都按自己的想法生活着。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三、文字</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>也是初四，我开始写日记来记录自己的生活。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>初四与高中三年一直在写日记，只是由于是纸质的，大部分没来得及保存（应该被当做废纸卖掉了），如今只保留了一本在身边。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大学开始，则是拥抱互联网的时代。</p><p>所有文字记录都转移到网上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大一我在QQ 空间记录文字。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大二使用 PHP 写了一个博客系统。所有网站后台开发教程都记录在这个博客系统上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>大三研究了jQuery源码，采用MVP思想重新写了一个博客系统。大部分前端开发教程都记录在这个网站上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>而大学期间参加了ACM比赛，数据结构和算法的学习记录都记录在博客园上（那时候CSDN还不出名）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>毕业后，没有精力维护自研的博客系统了，就迁移到github静态网站。</p><p>不知不觉就在这里写了五年。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>我常想，写这些文字有啥用。</b></p><p><b>看看博客上自己曾给的理由是：仅仅是记录曾经发生的事，对自己做的任何事情不后悔。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>四、最后</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么，写这些博客到底有啥用呢？</p><p>能提高智商吗？</p><p>能提高情商吗？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>发现对于技术类，还真可以让自己对技术掌握的更透彻。</p><p>而对于情商，也有提高，但是往往有点事后诸葛亮的感觉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>发生一件事，我听之后不能看出任何东西来。</p><p>因为理性得看，也都合理。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>几周之后，我会突然感悟出那件事背后有不一样的含义。</p><p>但是，几周后的感悟已经没有意义。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，这些应该不仅仅与写文章有关，还与最近两年看了大量书籍有关。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还是要多读书哇！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>标准的做法是这里出一个读书的广告，这里我就不贴了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>-EOF-</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"85\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;85&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"85\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上篇文章：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107234%26idx%3D1%26sn%3D8915182a853962f2169b99824d609fc4%26chksm%3Df2b36733c5c4ee25b70f41c0b43d2f1d2166138b5cc67cb3ea8770ee59d4e10eb4af166de587%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">拯救公众号的历史文章</a>》<br/></p><p>推荐：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107228%26idx%3D1%26sn%3Dd73075319eb64457d94f208297f15aee%26chksm%3Df2b3670dc5c4ee1b7265a488062246ba2107143538d82e4bf5f222048dcfce54966180dae256%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Leetcode 第152场比赛回顾</a>》</p><p>本文公众号：天空的代码世界</p><p>个人微信号：tiankonguse</p>", 
            "topic": [
                {
                    "tag": "同桌", 
                    "tagLink": "https://api.zhihu.com/topics/19580208"
                }, 
                {
                    "tag": "读书习惯", 
                    "tagLink": "https://api.zhihu.com/topics/19802998"
                }, 
                {
                    "tag": "写作", 
                    "tagLink": "https://api.zhihu.com/topics/19552516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79635462", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "读《谷歌方法》", 
            "content": "<blockquote>阅读本文大概需要 6.6 分钟。</blockquote><h2><b>一、背景</b></h2><p>最近花了一个月大概 11 个小时陆陆续续的看完了《谷歌方法》这本书。<br/>这里分享一下读这本书的一些想法。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-41b25f3b1f8bad888a5d91de1413ffbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic3.zhimg.com/v2-41b25f3b1f8bad888a5d91de1413ffbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;495&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic3.zhimg.com/v2-41b25f3b1f8bad888a5d91de1413ffbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-41b25f3b1f8bad888a5d91de1413ffbe_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>二、故事</b><br/></h2><p>首先这本书的名字有问题，叫做《谷歌地图传记》更好。<br/>因为这是一本介绍谷歌地图从0到1，再从1到无穷大的故事书。<br/>当然，英文原名是《Never Lost Again》，结合故事内容，其实也不错。</p><p>抛开书名，来看看书的故事，则是一些连贯的传奇故事。</p><p>大概分五个故事。</p><p>第一个是谷歌地图的前身，也就是keyhole的创业故事。</p><p>创业很难，即使一群天才聚在一起，也要为初期缺乏资金而发愁。<br/>而最令人感动的是，创业老板是一个为员工着想的人。在被谷歌收购前，老板对一个要离职员工说的话:“现在别辞职。我不能告诉你为什么，但别辞职。”</p><p>第二个故事是创业公司被收购后，面临的困境。</p><p>大部分公司被收购，原有团队都被被解散，打散分布到公司各个互相独立的部门。<br/>很幸运，keyhole团队没有经历这样的拆解，而是保持独立，原班人马来继续搬砖。</p><p>第三个故事是所有公司都会遇到的事情：权利的斗争。</p><p>现有的地图老板与新开的地图老板存在竞争关系，这就需要进行明确的分工。<br/>对于没有划清边界的事情，就很容易大声争执。</p><p>第四个故事是谷歌地图这款产品的崛起。</p><p>谷歌地图和谷歌地球上线后，用户量指数上升。对于谷歌来说，要做的就是不断完善地图数据，而用户用谷歌地图做了很多有意义的事。<br/>比如飓风灾难面前，很多人都在用谷歌地图来拯救生命。</p><p>后来，谷歌地图增加街景功能，增加公交地铁功能，增加路线规划功能，接着自己发射卫星采集数据，自己做自动驾驶车来拍摄路线数据。<br/>做的这些虽然没有收费，但是这样新的想法为谷歌地图节省几十亿美元的地图数据版权费。</p><p>谷歌地图自此永远的活了下来，被人们广泛使用。</p><p>第五个故事是keyhole老板二次创业。</p><p>你听说过前几年很火的《Pokemon GO》吗？就是这个老板二次创业做的。</p><p>而作者，则始终跟随者这个老板闯天涯。这也是这本书《Never Lost Again》名字的由来吧。</p><p>我们啥时候能遇到这样的老板呢？<br/>不过，遇到了，你敢辞职去冒险吗？</p><h2><b>三、感悟</b></h2><p>看这本书的时候，有几个小情节有一些感悟，写了一些话语，分享给你。</p><p>第一个和产品的付费用户相关。</p><blockquote>由于Keyhole是年度订阅型的业务，客户往往会续订服务。来自这些续订的钱相对来说比较好赚。原文一：关于付费</blockquote><p>对于年度续费或者月度续费的业务，用户只要到达一定数量，续费的钱就可以维持公司活下去。<br/></p><p>当然，要留住老用户就需要能给用户提供对应的价值，这个也是一个公司的竞争力吧。<br/>抖音的个性化推荐技术就极具有竞争力。</p><p>第二个和老板有关。</p><blockquote>在科技收购的世界里，这是闻所未闻的。普遍的情况是：大量的员工被弃用，新公司只给股权，不给工作。<br/>当梅甘·史密斯第一次告诉约翰谷歌的收购意向时，约翰回答道：“那太好了，但我要先说清楚，你们必须承诺雇用我们整个团队。如果不行，那我们就不要浪费彼此的时间了。”<br/>这不是我第一次——也不是最后一次——认识到，约翰·汉克是人们值得期待的最忠诚的老板和朋友了。<br/>当时，Keyhole一共有29名员工，包括想辞职的马克·奥宾。约翰只对他说：“现在别辞职。我不能告诉你为什么，但别辞职。”原文二、关于老板</blockquote><p>最激动人心的时刻莫过于此时，有这样的老板也是如此幸运。<br/></p><p>第三个和产品的命名有关。</p><blockquote>我的立场是基于视觉艺术家、作家温迪·里士满提出的一条规则，我一直认为这个规则道出了一个基本的营销真理，这个规则是这样的：“如果你想教别人一些新东西，那么你应该从他们已经知道的东西教起。”所以，我的思路是：人们知道地图是什么，那么我们就应该从谷歌地图开始，从这里扩展他们的知识。原文三、关于命名</blockquote><p>我也是基于这个原则，简单来说就是名字需要简单熟悉，见其名知其意。<br/>最开始我听说腾讯好莱坞会员这个词时，我以为专门看美国大片的，后来才发现真实含义是视频会员。<br/>最开始我听说腾讯饭团时，我以为是卖吃的产品，后来发现是一个贴吧论坛类产品。<br/>这种名字我一开始就是反对的，因为第一眼看到这个名字，会给人产生误解。与其这样，还不如起一个不知道是什么含义的名字呢，好打造一个新的品牌来。</p><p>第四个和判断与选择有关。</p><blockquote>布莱恩是注册的坚定支持者。<br/><br/>在Keyhole的各种访问量激增和服务器宕机事件中，他一直奋战在最前线。尽管服务器从8台增加到了800台，但服务常常受谷歌主页的促销活动和各种新闻文章的影响而掉线。 <br/><br/>为了让新的谷歌地球服务保持正常运行状态，布莱恩有点提心吊胆：毕竟现在数据量是以前的10倍，打上了谷歌的标签，而且还是完全免费的。<br/><br/>用户注册过程是拦截汹涌的潜在需求的最后一道闸门。现在，我要求他拆除这道闸门。原文四、关于判断</blockquote><p>在产品上，操作路径每多一层，就会流失一部分用户。</p><p>如果一个产品安装无需注册就能使用，那用户的使用量就会非常大。<br/>而要求注册，则可以拦截点大部分人，比如有个转化率: 10～20%。<br/>也就是增加一层，有十分之一到五分之一的人会使用这个产品，其他的都流失了。</p><p>纯粹从用户数量来看，当然是用户越多越好。<br/>但是从公司产品矩阵来看，用户注册后才能关联起来。<br/>从这个产品背后的技术来看，则希望访问量慢慢增长，这样就可以及时优化子系统，防止系统因访问量太大而挂掉。</p><p>所以说，每个人做出的决定与判断对自己都是利益相关的。</p><p>第五个与竞争对手有关。</p><blockquote>谷歌允许并鼓励工程师将自己20%的工作时间用在他们感兴趣的项目上（Gmail就是2002年从一个“20%时间”项目中诞生的）。原文五、竞争对手</blockquote><p>跨领域做的项目，经常会在新的领域闯出一片新天地。</p><p>这就是所谓的：你看的竞争对手并不是将来打败你的人，他们往往来自其他领域。</p><p>第六个和商业盈利有关。</p><blockquote>我仍对谷歌街景项目持怀疑态度。<br/>当约翰或其他人告诉我运营的规模多么巨大，有多少名司机，有几百辆车，走过几百万英里的路的时候，我常常难以置信地摇摇头。尽管用户体验很棒，但我不明白这一切如何在经济上行得通。也许是我又一次问错了问题。将传统的商业逻辑应用在这样一家非传统的公司上可能是错误的。原文六、商业盈利</blockquote><p>作者创业时经历了资金紧张、融资难、公司几乎破产后，心中很明白，对于任何一个项目，盈利很重要，现金流很重要。<br/>而一个项目如果花费巨大，多年都花费几十亿，而盈利收入几乎可以忽略时，资金来源就可能不会太持久。</p><p>因为这样不符合经济学的基本逻辑。<br/>投资就是为了赚钱。<br/>要么是现在赚钱，要么是未来赚钱。<br/>要么是直接赚钱，要么是间接赚钱。</p><p>如果未来十几年都没有赚钱的希望，资本家就不愿意持续投入了。<br/>即使是大公司，也是如此。</p><p>这样就很像沉没成本，但是又不太一样。</p><p>如果可以想办法盈利，那就需要改变来盈利。<br/>如果因为市场上有多家这样的公司在竞争导致没有盈利，那最终需要合并这些公司（大公司需要拆分出这个业务），形成垄断，然后提高收费，才能化亏损为盈利。</p><p>难道长视频行业的命运真的和滴滴合并、去哪合并、美团合并一样吗？</p><p>第七个和工作伙伴有关。</p><blockquote>正如我职业生涯中常常不太理解约翰的一些想法一样，我不能说我完全理解约翰想要创造的这个东西。<br/>不过让我十分高兴的是，在与他合作过的那么多营销人员中，他请我来担任Niantic的营销主管。<br/>曾有人问我为什么彻底离开谷歌，去加入约翰的初创公司，我告诉她：“你看，如果迈克尔·乔丹要求你加入他的球队，那你就加入好了，即使你不知道他们要玩什么体育项目。原文七、工作伙伴</blockquote><p>比如拉里 佩奇与谢尔盖 布林是这样。<br/>吴军在《来自硅谷的信》中也介绍过一个伙伴一直和他一起从谷歌到腾讯，再到谷歌，再创业。<br/>而作者与约翰也是这样一对CP，一起闯天涯。</p><p>在工作中，能遇到这样一位伙伴真是人生之大幸。</p><p>当然，这也需要自己在某方面有足够的实力，这样才能一起闯天涯。</p><h2><b>四、最后</b></h2><p>看完这本书，有点明白为什么叫做《谷歌方法》了。</p><p>中国翻译通过介绍谷歌地图在谷歌的成长的经历，尤其是在很多关键决策上老板给的指示，来透漏谷歌的做事风格：谷歌做一款产品的目标并不是赚钱或者获得用户，目标更大，比如使我们的生活更便利。在向这个目标奋斗的过程中，用户和赚钱也随之而来。</p><p>当然，这本书里面的谷歌做事方法属于艺术，属于玄学，需要我们来悟。</p><p>但是每个人悟的都不一样。<br/>你悟出来什么了呢？可以留言告诉我。</p><p>当然，《谷歌方法》这种翻译命名也是为了蹭流量，很多人就是奔着谷歌成功的方法来看这本书的，这样看来这个命名也是标题党了。</p><p>2019-08-23 小雨<br/>《完》</p><p>-EOF-</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"85\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;85&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"85\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-995ec5706fee8abbe11491a6cec4e7f3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上篇文章：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107183%26idx%3D1%26sn%3Dda6c3e152f7c1683863df10462f7c8c9%26chksm%3Df2b3677ec5c4ee686f4fd7836206e8dd04ff771f50ca2bf0ebc3962e59af9e59baae82d5e0d4%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">临时需求也要写脚本工具</a>》<br/></p><p>相关推荐1：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107176%26idx%3D1%26sn%3Da8cd518e20a31921eeb15b78f2dcfa06%26chksm%3Df2b36779c5c4ee6f97b969addc6eb9bf4016fc96a72f5efab19a3aa36f30c1b4646739015df9%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">根据平均工资推导真实工资</a>》</p><p>相关推荐2：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106367%26idx%3D1%26sn%3D2ed56ca35733adaf9bf1e02c411ce666%26chksm%3Df2b363aec5c4eab8194c442a80d356bd06c449bcee352f89726e74175adf19bbcd08be6cb277%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读『物理学的困惑』</a>》</p><p>本文公众号：天空的代码世界</p><p>个人微信号：tiankonguse</p><p>QQ算法群：165531769（不止算法）</p><p>知识星球：不止算法</p>", 
            "topic": [
                {
                    "tag": "读书笔记", 
                    "tagLink": "https://api.zhihu.com/topics/19590861"
                }, 
                {
                    "tag": "谷歌 (Google)", 
                    "tagLink": "https://api.zhihu.com/topics/19565870"
                }, 
                {
                    "tag": "Google 地图", 
                    "tagLink": "https://api.zhihu.com/topics/19556113"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79359792", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 2, 
            "title": "临时需求也要写脚本工具", 
            "content": "<blockquote>通过分析问题，一步步拆解问题，原先不是很确定的人工处理的方案，通过写工具就变成一个非常可靠的解决方案了。</blockquote><h2><b>一、背景</b></h2><p>前几天，同事突然接到一个紧急需求：将所有的 XXX 文字替换为 YYY 文字。<br/>如果仅仅看着需求，很简单，找到所有的 XXX 替换即可。</p><p>但是这个问题在于，这些 XXX 文字都在图片上。<br/>幸运的是，所有图片地址都已经在数据库里面了。<br/>不幸的是，这些图片地址里面有一些无关的文字，需要提取出图片地址。</p><p>面对这样的临时需求，该如何找到一个方案来解决呢？</p><h2><b>二、手动处理</b></h2><p>分析一：虽然文字在图片上，但是有这个文字的图片应该很少。<br/>方案一：先手动把最容易找到的图片替换了。</p><p>同事采用了最原始的方案一。</p><p>我看到这个方案，问了几个问题。</p><p>问题1：图片在数据库替换修复后，外网全部生效需要多生时间？<br/>回答1：新系统需要清洗全量数据（目前有几亿数据）。</p><p>问题2：如果花费若干小时清洗完数据了，发现漏了怎么办？<br/>回答2：。。。</p><p>问题3：如果人工排查数据库的图片地址，怎么样？<br/>回答3：数据库里图片地址太多，人工不太可行。</p><p><b>对于默认方案，几乎所有人都可以想到。</b><br/><b>但是大部分人没去思考默认方案是否可以 100% 的解决问题。</b><br/><b>如果没有 100% 解决，代价又是什么。</b></p><h2><b>三、脚本处理</b></h2><p>基于手动解决这个问题可能有遗漏，我又问了另外一个问题。</p><p>问题4：图片去重后会很多吗？<br/>回答4：不会很多，可能有几十个或一百多个。</p><p>明确了图片不是很多，我提出一个方案：写个脚本下载所有图片，然后再人工确认。</p><p>同事发出疑问5：文字在图片中，怎么判断图片是否有这个文字？<br/>回答5：图片全部下载下来，人眼看就行了。</p><p>接着同事提出下个问题6：图片地址在数据库中，URL夹杂在其他文本中，怎么办？<br/>回答6：先从数据库导出含图片地址的文本数据，分析一下数据，处理一下数据，提取出图片地址即可。</p><p>同事好像还是不明白的意思，于是我说：我来写这个工具吧。</p><h2><b>四、脚本工具</b></h2><p>问题很明确了，我们需要几步来处理。</p><p>1、导出文本数据<br/>2、处理文本数据，得到所有图片地址并去重<br/>3、下载所有图片地址<br/>4、人工快速找到有对应文字的图片与地址</p><p>第一步：一条 SQL导出数据。<br/>大概如下：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a0721e5de741d73cd24f6cfa989dcff_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"49\" class=\"origin_image zh-lightbox-thumb\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-2a0721e5de741d73cd24f6cfa989dcff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;655&#39; height=&#39;49&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"49\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"655\" data-original=\"https://pic4.zhimg.com/v2-2a0721e5de741d73cd24f6cfa989dcff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a0721e5de741d73cd24f6cfa989dcff_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第二步：分析数据特征。<br/>分析数据后，发现有下面三个特征。</p><p>1、图片地址中没有逗号和空格，数据库中多个图片地址会用逗号或者分隔。<br/>2、对于图片地址，都是都有 http 前缀。<br/>3、部分图片地址，在 http 前有一些其他连续字符，大概格式时 xxx=http，而且 xxx 以数字为前缀。</p><p>第三步：对数据标准化。<br/>我敲了几个命令就得到了想要的图片地址。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3d267d112230831434aea04e0f1fd748_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-3d267d112230831434aea04e0f1fd748_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;144&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-3d267d112230831434aea04e0f1fd748_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3d267d112230831434aea04e0f1fd748_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>由此，就只剩最后一步：下载所有图。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-411c332fdc14c579d41e52da6608b1e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic2.zhimg.com/v2-411c332fdc14c579d41e52da6608b1e9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic2.zhimg.com/v2-411c332fdc14c579d41e52da6608b1e9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-411c332fdc14c579d41e52da6608b1e9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下载后，windows 文件夹调整为 中等图标，就可以预览所有图标了。</p><p><b>PS：同事又问怎么根据数字图片名找到图片地址呢？我只说了两个字：行号。</b></p><p>后来，我发现也可以不下载图片，于是我就生成了一个包含所有图片的 HTML， 浏览器打开就可以看到所有图片了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-011ff8a9729c765a9eaf6db3b391a6d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb\" width=\"549\" data-original=\"https://pic4.zhimg.com/v2-011ff8a9729c765a9eaf6db3b391a6d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;549&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"549\" data-original=\"https://pic4.zhimg.com/v2-011ff8a9729c765a9eaf6db3b391a6d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-011ff8a9729c765a9eaf6db3b391a6d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>五、最后</b></h2><p>当然，下载所有图片后，发现只有一张图片有目标文字。<br/>但是第二个方案却比第一个方案更可靠。</p><p>因为第一个方案具有不确定性，万一没有彻底修复就需要花费很多时间再来一次。<br/>而第二个方案花了我五分钟，就 100% 确保彻底解决了这个问题。</p><p><b>写这篇文档的目的是想告诉大家，很多事情可以通过脚本工具化来解决。</b><br/><b>而写这些脚本工具也并没有想象的那么难（并不需要图片识别），也没有浪费多少时间（5分钟）。</b><br/><b>但是，脚本化可以得到一个靠谱的解决方案。</b></p><p>总的来说，通过分析问题，一步步拆解问题，原先不是很确定的人工处理的方案，通过写工具就变成一个非常可靠的解决方案了。</p><p>2019-08-21 晴天 《完》</p><p>-EOF-</p><p>本文公众号：天空的代码世界</p><p>个人微信号：tiankonguse</p><p>QQ算法群：165531769（不止算法）</p><p>知识星球：不止算法</p>", 
            "topic": [
                {
                    "tag": "shell 脚本", 
                    "tagLink": "https://api.zhihu.com/topics/19617864"
                }, 
                {
                    "tag": "开发工具", 
                    "tagLink": "https://api.zhihu.com/topics/19564417"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73357494", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 19, 
            "title": "谷歌的一致性哈希算法", 
            "content": "<blockquote>这个算法零内存、分布均匀、计算快速，全是优点了。但是。。。</blockquote><h2><b>一、背景</b></h2><p>三年前在《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105069%26idx%3D1%26sn%3Db3094e39fcdc84a21189cf351191302e%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一致性hash基础知识</a>》文章中，曾提到 google 有一个算法简单的计算就做到了一致性哈希需要做到的事情。</p><p>上个月在《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106624%26idx%3D1%26sn%3D7a9ebec455c9dfe74e1e95a9e25dd21a%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一致性HASH技术的困境</a>》文章的留言中，也有小伙伴提到，有一个 Jump consistent hash 算法可以做到一致性哈希的事情。</p><p>其实这两个说的是一个事情，那就是 google 有一个 Jump consistent hash 算法，可以通过数学运算做到和一致性哈希效果一样好的平衡性。</p><p>那今天就来看看这个算法吧。</p><h2><b>二、看代码</b></h2><p>先看代码，下面就是全部的代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b4fbc10c987e9a22cbc423339e621c25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-b4fbc10c987e9a22cbc423339e621c25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;261&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-b4fbc10c987e9a22cbc423339e621c25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b4fbc10c987e9a22cbc423339e621c25_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>是不是感觉不可思议，这个代码的语法全部都懂，但是合在一起我们就看不懂了。<br/>我第一眼看到这个代码的时候，也是一脸懵逼的。<br/></p><p>这个算法是 Google 的 John Lamping 和 Eric Veach 创造的。<br/>他们为这个算法写了一篇论文：《A Fast, Minimal Memory, Consistent Hash Algorithm》。</p><p>看了论文后，我才恍然大悟，原来是这样，果然是合理的。<br/>如果你要阅读原文论文，可以<b>公众号后台回复“谷歌算法”获取论文</b>。</p><h2><b>三、算法原理</b></h2><p>一致性哈希算法有两个目标：</p><ol><li>平衡性。即把数据平均的分布在所有节点中。</li><li>单调性。即节点的数量变化时，只需要把一部分数据从旧节点移动到新节点，不需要做其他的移动。</li></ol><p>我们根据这个单调性可以推算出一些性质来。<br/>这里先令<code>f(key, n)</code>为一致性哈希算法，输出的为<code>[0,n)</code>之间的数字，代表数据在对应的节点上。</p><ol><li><code>n=1</code> 时，对于任意的<code>key</code>，输出应该都是<code>0</code>。</li><li><code>n=2</code> 时，为了保持均匀，应该有<code>1/2</code>的结果保持为<code>0</code>，<code>1/2</code>的结果输出为<code>1</code>。</li><li><code>n=3</code> 时，应该有<code>1/3</code>的结果保持为<code>0</code>，<code>1/3</code>的结果保持为<code>1</code>，<code>1/3</code>的结果保持为<code>2</code>。</li><li>依次递推，节点数由<code>n</code>变为<code>n+1</code>时，<code>f(key, n)</code>里面应该有<code>n/(n+1)</code>的结果不变，有<code>1/(n+1)</code>的结果变为<code>n</code>。</li></ol><p>这个使用概率公式来表示，就是这样的代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b9fe9978c38bc46e353fa82deed46991_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic2.zhimg.com/v2-b9fe9978c38bc46e353fa82deed46991_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;448&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"448\" data-original=\"https://pic2.zhimg.com/v2-b9fe9978c38bc46e353fa82deed46991_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b9fe9978c38bc46e353fa82deed46991_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>关于这个算法直接看可能还是看不懂。<br/>所以需要使用<b>实际数据模拟一下</b>，见下图。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9af0769064b3f1063c40c4174f6a0486_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb\" width=\"780\" data-original=\"https://pic3.zhimg.com/v2-9af0769064b3f1063c40c4174f6a0486_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;780&#39; height=&#39;561&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"561\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"780\" data-original=\"https://pic3.zhimg.com/v2-9af0769064b3f1063c40c4174f6a0486_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9af0769064b3f1063c40c4174f6a0486_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>关键在于<code>n=2</code>到<code>n=3</code>的过程，每个数字的概率从<code>1/2</code>转化到了<code>1/3</code>。<br/></p><p>之后，我们可以得出一个<b>规律</b>：增加一个节点，<b>数据不发生变化的概率</b>是<code>n/(n+1)</code> 再乘以之前每个数字的概率<code>1/n</code>，就可以得出每个数字最新的概率<code>1/(n+1)</code></p><p>由此，可以轻松计算出<code>n=4</code>各数字的概率为<code>1/4</code>。自此，我们可以确定这个算法确实是有效的。</p><p>这个算法唯一的缺点是复杂度太高，是<code>O(n)</code>的。<br/>所以需要进行优化。</p><h2><b>四、算法优化</b></h2><p>在上一小节中，我们了解到<code>f(key, n)</code>算法的正确性。<br/>除了复杂度是<code>O(n)</code>外，我们还可以确定，循环越往后，结果改变的概率会越来越低。</p><p>结果改变指的是，增加一个节点后，一个固定的<code>key</code>输出的结果发生了改变。<br/><b>如果我们能够快速计算出这个固定的<code>key</code>在哪些节点下发生了改变，就可以快速计算出最终答案。</b></p><p>假设某一次结果是<code>b</code>，经过若干次概率测试，下一次改变为<code>a</code>，则从<code>b</code>到<code>a-1</code>这中间，不管节点如何变化，这个<code>key</code>的结果都是不会变化的。<br/>根据上一小节的到的概率变化公式，新增一个节点数字不变化的概率是<code>n/(n+1)</code>。<br/>那从<code>b</code>到<code>i</code>不变化的概率就是<code>b/i</code>（中间的抵消了）。</p><p>如果我们有一个均匀的随机函数<code>r</code>，当<code>r&lt;b/i</code>时，<code>f(i)=f(b)</code>。<br/>那么<code>i</code>的上界就是<code>(b+1)/r</code>。<br/>这个上限也是下一次<code>key</code>发生变化的节点数量，由此可以得出下面的代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3a1815ba516ac1878bf83d4487b7186d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-3a1815ba516ac1878bf83d4487b7186d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-3a1815ba516ac1878bf83d4487b7186d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3a1815ba516ac1878bf83d4487b7186d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>由于<code>r</code>是均匀的，所以期望是<code>1/2</code>。<br/>这样，代码中<code>j</code>就是按照指数级增长的，平均复杂度就是<code>O(log(n))</code>了。<br/></p><p>回头看看第一个代码，就可以看懂代码了。</p><p>第一个<code>key=key*x+1</code>算是一个伪随机生成器。<br/>而<code>j=(b+1)*x/y</code>则是上面的求上界的公式，其中<code>y/x</code>通过浮点数运算来产生<code>(0,1)</code>内的一个随机数。<br/>自此，这个代码就可以看懂了。</p><h2><b>五、最后</b></h2><p>谷歌能够创造这样一个算法确实了不起，但是从实际应用上来，这个算法也没有想象中的好。</p><p>如果你用过一致性哈希的话，会发现有很多问题。</p><p>因为我们实际使用时，节点往往是有权重的。<br/>这里只有一个节点的最大值，那意味着，节点的扩散需要在外层实现。<br/>也就是需要在外层来储存扩散后的节点列表。</p><p>既然外面储存了节点列表，按照 hash 值排序，就可以二分查找出符合要求的节点了。<br/>如果使用 map 储存，也可以在 <code>log</code> 级别找到对应的节点。</p><p>由此，可以发现 谷歌的这个算法自身不需要内存了，但是内存需要业务自己维护，实际上还是需要的。</p><p>当然，<b>如果你没使用过一致性哈希的话，你不知道我在说什么</b>。<br/>或者你可以看看之前我记录的一致性 HASH 文章，然后再回头看看这个小节。</p><p>-EOF-<br/></p><p>上篇文章：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107124%26idx%3D1%26sn%3Df8f797494db4ed953214b348ea2afd21%26chksm%3Df2b366a5c5c4efb346e84e77034c6d2d98f1e10aa59d556ebfa7f8c199d6ccfcb6469d1fa337%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">公有云、私有云、专有云的区别</a>》</p><p>相关推荐：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105069%26idx%3D1%26sn%3Db3094e39fcdc84a21189cf351191302e%26chksm%3Df2b36ebcc5c4e7aa3793ae2470374e33f5b57ad996cfa454083753a97da37384be5009719176%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一致性hash基础知识(二)</a>》</p><p>本文公众号：天空的代码世界</p><p>个人微信号：tiankonguse</p><p>QQ算法群：165531769（不止算法）</p><p>知识星球：不止算法</p>", 
            "topic": [
                {
                    "tag": "分布式一致性", 
                    "tagLink": "https://api.zhihu.com/topics/19773813"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "讲的很好", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/71621782", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 6, 
            "title": "Leetcode 第143场比赛回顾", 
            "content": "<blockquote>这次比赛涉及简单计算、二叉树、动态规划、递归题四种体型，最后一道题是布尔表达式，你可以来试试。</blockquote><p><br/><b>零、背景</b><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-efb38422bdc6c895df2e92823d6b3624_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic1.zhimg.com/v2-efb38422bdc6c895df2e92823d6b3624_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;697&#39; height=&#39;82&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic1.zhimg.com/v2-efb38422bdc6c895df2e92823d6b3624_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-efb38422bdc6c895df2e92823d6b3624_b.jpg\"/></figure><p><br/>这次比赛的题目相对比较简单，我在一个小时左右全部做完了。<br/>赛后看了一下我每道题的耗时，发现一个有意思的现象。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f1732bb17463f6a925cab3b103b86d54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"205\" data-rawheight=\"137\" class=\"content_image\" width=\"205\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;205&#39; height=&#39;137&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"205\" data-rawheight=\"137\" class=\"content_image lazy\" width=\"205\" data-actualsrc=\"https://pic1.zhimg.com/v2-f1732bb17463f6a925cab3b103b86d54_b.jpg\"/></figure><p><br/>比赛的题从前到后是越来越难的，但是前面的题我反而耗时更多，后面的题耗时更少。</p><p><br/>这个说明思考题花费的时间不多，敲代码的时间比较多，时间都花在敲代码上了。</p><p><br/>当然这个也不完全正确，也可能边敲代码边思考，或者最终调试了很长时间。</p><p><br/>还有一种可能是我选择了一种比较复杂的算法，其实有比较简单的方法。</p><p><br/>对于耗时到底浪费在哪里了，这个只能使用一个录屏软件录下整个过程，然后分析一下才能真实的知道时间都花在哪里了吧。</p><p><br/>下面来看看这四道题吧。</p><h2><br/><b>一、分糖果 II</b></h2><p><br/><b>题意：给<code>n</code>个糖果，循环分给<code>m</code>个人，每次分的糖果个数加一个。</b><br/><b>问每个人得到的糖果个数。</b><br/></p><p>思路：由于规则固定，所以每个人得到的糖果也是固定的。<br/>我们可以按规则画出每个人得到的糖果个数。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4922fd9e01057f802467083ac6014909_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"162\" class=\"content_image\" width=\"346\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;346&#39; height=&#39;162&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"162\" class=\"content_image lazy\" width=\"346\" data-actualsrc=\"https://pic2.zhimg.com/v2-4922fd9e01057f802467083ac6014909_b.jpg\"/></figure><p><br/>如上图表。<br/>对于前<code>k</code>行，每个人得到的糖果个数是等差数列，可以计算出来。</p><p><br/>那怎么求出<code>k</code>呢？<br/>第一个方法是解方程。<br/>第二个方法是二分。</p><p><br/>求出<code>k</code>之后，就可以先求出前<code>k</code>行，每个人得到多少糖果。<br/>而剩余的糖果，可以在<code>m</code>人内分完，所以模拟即可。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7a48fbd3693e4aa9f175b3af0e45b35d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"346\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"346\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic2.zhimg.com/v2-7a48fbd3693e4aa9f175b3af0e45b35d_b.jpg\"/></figure><p><br/>赛后，看别人解题报告，发现很多人直接暴力做的。<br/>由于每次分的糖果个数加一，那顶多分<code>sqrt(n)</code>次糖果。<br/>虽然<code>n</code>比较大，但是开房后，就比较小了，所以暴力没有问题的。</p><h2><br/><b>二、二叉树寻路</b><br/></h2><p><b>题意：给一个二叉树，偶数层数字是反转的。</b><br/><b>给一个数字，求输出这个数字到根的路径。</b><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6aab5ffe6b4c032061eb57843b35a8a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6aab5ffe6b4c032061eb57843b35a8a1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6aab5ffe6b4c032061eb57843b35a8a1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6aab5ffe6b4c032061eb57843b35a8a1_b.jpg\"/></figure><p><br/>思路：可以计算出对应层的数字范围，根据当前层数以及第几个，就可以根据奇偶性计算出对应的值。</p><p><br/>如果当前层数是奇数，则正常计算，即数字范围起始值加上偏移量。<br/>如果当前层数是偶数，则逆序计算，即数字范围的结束地址减去偏移量。</p><p><br/>使用这种方法需要注意一点，起始位置<code>label</code>是值，我们需要先计算出在二叉树中的真实位置，然后再模拟计算。</p><p><br/>还有一种方法是假设输入<code>label</code>就是真实位置，每向一层，我们反转一次，这样则不存在上述的特殊边界问题了，代码实现也比较简单。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c3a8449d06b41cda884f8032147feae0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"432\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"432\" data-original=\"https://pic1.zhimg.com/v2-c3a8449d06b41cda884f8032147feae0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;432&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"432\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"432\" data-original=\"https://pic1.zhimg.com/v2-c3a8449d06b41cda884f8032147feae0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c3a8449d06b41cda884f8032147feae0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>三、填充书架</b></h2><p><br/><b>题意：给<code>n</code>本书，每本书有一个厚度和高度，摆在书架上。</b> <br/><b>书架每一层最大宽度是<code>shelf_width</code>，摆不下时可以摆在下一层。</b><br/><b>每层的高度为当前层所有书的最大高度，问书该如何摆才能使得总高度最小</b>。<br/></p><p>思路：经典的动态规划题。<br/></p><p>定义<code>dp[i]</code>为前<code>i</code>本书能够到达的最小高度。<br/>则对于第<code>i+1</code>本书，有若干选择。<br/>如自己单独一层，则状态转移为<code>dp[i+1] = dp[i] + h[i+1</code><br/><br/>如果和前面的书放在一起，则状态转移方程式<code>dp[i+1] = min(dp[j] + max[h[j+1] ~ h[i+1]))</code>。<br/>其中需要满足<code>sum(w[j+1] ~ w[i+1]) &lt;= shelf_width</code><br/>含义是前<code>j</code>本书组成若干层，第<code>j+1</code>到第<code>i+1</code>本书组成一层。<br/>对于这些选择，取最小值。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a1f795d9ecb003f4b6631516b3cc5a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"481\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"481\" data-original=\"https://pic4.zhimg.com/v2-2a1f795d9ecb003f4b6631516b3cc5a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;481&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"481\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"481\" data-original=\"https://pic4.zhimg.com/v2-2a1f795d9ecb003f4b6631516b3cc5a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a1f795d9ecb003f4b6631516b3cc5a7_b.jpg\"/></figure><p><br/>当然，这个思路使用递归实现就是<code>DFS</code>加记忆化搜索了。<br/>所以也有人说自己使用<code>DFS</code>过得，这个背后的逻辑其实是一样的。<br/>只是一种是<code>push down</code>，一种是<code>push up</code>而已。</p><h2><br/><b>四、解析布尔表达式</b><br/></h2><p><b>题意：给一个布尔表达式的规则，求表达式对应的值。</b><br/></p><p>这道题其实和上周比赛《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107008%26idx%3D1%26sn%3D1be44b80b294d78386258ede9c99fb5d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Leetcode 第142场比赛回顾</a>》最后一题非常类似。<br/>布尔表达式有<code>5</code>个规则。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b2e8cf346a5feca0d6742ad1d715fda9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"223\" data-rawheight=\"126\" class=\"content_image\" width=\"223\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;223&#39; height=&#39;126&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"223\" data-rawheight=\"126\" class=\"content_image lazy\" width=\"223\" data-actualsrc=\"https://pic2.zhimg.com/v2-b2e8cf346a5feca0d6742ad1d715fda9_b.jpg\"/></figure><p><br/>我们可以增加另外一个规则，就可以形成递归闭环。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-23ccdcc20cf5be48ff909992e4073d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"47\" class=\"content_image\" width=\"346\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;346&#39; height=&#39;47&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"47\" class=\"content_image lazy\" width=\"346\" data-actualsrc=\"https://pic3.zhimg.com/v2-23ccdcc20cf5be48ff909992e4073d06_b.jpg\"/></figure><p> 有了第<code>6</code>个万能的规则，代码实现就非常简单了。 <br/>看一下求集合的目标后，我们发现并不需要求出整个集合，只需要统计是否有true和是否有false即可。</p><p><br/>当然，实际比赛的时候，我直接计算出括号表达式里面的结果了。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f1e0906bf11c59ed5f9cbcf0065eb8e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-f1e0906bf11c59ed5f9cbcf0065eb8e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;596&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic1.zhimg.com/v2-f1e0906bf11c59ed5f9cbcf0065eb8e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f1e0906bf11c59ed5f9cbcf0065eb8e4_b.jpg\"/></figure><p><br/>赛后，看到一种解决方案：使用简单的替换转化为某种解释性语言的表达式，然后使用<code>eval</code>运算出结果来。<br/>不过对于<code>C++</code>语言就不能这样做了。</p><h2><br/><b>五、最后</b><br/></h2><p>这次比赛涉及简单计算、二叉树、动态规划、递归题四种体型。<br/>其实最后一题在专业比赛中属于模拟题，归属于简单题分类。<br/>毕竟对于代码能力稍微强一点的人来说，递归都是不在话下的。</p><p><br/>-EOF-<br/><br/>上篇文章：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107051%26idx%3D1%26sn%3D2fab6d668a48aae39b928d0974d83069%26chksm%3Df2b366fac5c4efec41582c6e97b12e829a37adf6757687222de5107ef25c6cd25094a43f20a5%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Leetcode 第93场比赛回顾</a>》<br/>相关推荐：《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650107030%26idx%3D1%26sn%3D44e7f973c9e068533244ba63151a73b5%26chksm%3Df2b366c7c5c4efd104e3a9862041de68fe9b33cc6caa7f944cbc08906cd65ffa48efd91f20fe%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法：专业选手与业余人员的差距</a>》<br/>本文公众号：天空的代码世界<br/>个人微信号：tiankonguse<br/>QQ算法群：165531769（不止算法）<br/>知识星球：不止算法</p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "力扣（LeetCode）", 
                    "tagLink": "https://api.zhihu.com/topics/19925162"
                }
            ], 
            "comments": [
                {
                    "userName": "哈哈儿", 
                    "userLink": "https://www.zhihu.com/people/27166ea075dfd2e91525bba180257eaf", 
                    "content": "看到第三题的代码好像在discussion里看到，哈哈，注释写的好，代码风格值得学习", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "tiankonguse", 
                    "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
                    "content": "恩，首发在那里", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60901788", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "什么时候写文章？没人看怎么办", 
            "content": "<blockquote>有人问我每周两篇文章一般什么时候写，我陷入了沉思中。</blockquote><h2><b>一、背景</b></h2><p>其实，关于写文章的这几个问题，我之前曾想过无数次。<br/>比如<b>一周写几篇、什么时候写、写什么话题、要不要蹭热点、要不要标题党、阅读量比较低没动力写怎么办</b>等等。<br/>今天趁着有人询问的时候，记录一下我们交流的一些文字（稍微有修改）。</p><p>PS1：<b>我不是什么大V，关注我公众号的人也没几个，文章阅读量少的可怜，打赏几乎没有，仅仅记录一下个人的想法（目前的想法，明天也许就变了）。</b><br/><b>PS2：也许我只是井底之蛙，没见过大世面。也许孤陋寡闻限制了我的想象力</b>。</p><h2><b>二、什么时候写</b></h2><p>有人问：<br/><b>请教 哥们每周两篇文章 一般什么时候写的呀？我看每篇内容都不少 写一篇时间需要多久呀。</b></p><p>答：<br/>以前是每周两篇，最近其实在<b>尽量每天都写一篇</b>。</p><p>每天都写一篇的话，<b>未来一段时间写什么其实都规划好的</b>。如果临时遇到什么事情，也可以随时插进去。<br/>不过，由于每天一篇，时间有限，就决定了一周内，大多数文章写得内容会比较简单。<br/>比如日常，我会写一些算法比赛、算法教程、读书、电影、或其他日常生活等等。</p><p>这些<b>一般晚上十点之后开始写，尽量在十二点之前写完、校对完，然后发出来（想过周末攒几篇后面发，但是尝试几次后弃疗了）</b>。<br/>例如昨晚（03-28，leetcode 比赛第87场），时间没把握好，就没发出来。</p><p>不过没发出来也有好处。<br/>因为两个小时内没写完，说明写的东西涉及到复杂的内容。<br/><b>没发出来，就不着急了，可以在后半夜慢慢写，对全文展开详细的写</b>。</p><p>另外，<b>每隔段时间，也会尽量写一篇有深度的文章</b>。<br/>比如前天的一致性hash。</p><p>对于有深度的文章，往往在之前的几天思考了很久。<br/>这篇文章本来计划分五个话题写五篇的，后来考虑到时间没那么多，话题之间关联性挺大的，结合着读更有效，就改为一篇了。<br/>不过还是写了好久，写了四（五）个小时。<br/><b>其实不了解一致性hash的人几乎看不懂那篇文章的</b>（即使有经验的人，不耐心细心的读几遍，也可能看不懂）。</p><h2><b>三、写的文章没人看怎么办？</b></h2><p>有人问：<br/><b>请教最后一个： 怎么看待投入产出比？还是纯爱好的坚持写作？还是为了提升自己的软实力 当写篇文章用了4个小时或者更长时间时 发布后 看浏览关注的人很少 怎么看待这个问题的</b></p><p>答：<br/>这个需要看怎么定义产出。<br/>目前<b>我的定位是：记录+总结（多年前，我有一个博客，我把名字称为记录集，也表达了我对文章的态度吧）</b>。</p><p>PS：找到了一篇相关的旧文，写于2015年，名字叫做《<u><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D400115719%26idx%3D1%26sn%3Dfbbad3dc772ab49a00c732c33b24c41f%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">记录集优化</a></u>》，<b>大家可以另外花费一分钟进去看看，一分钟就够了</b>。</p><p>当然，有时候，记录和总结也没有划分的那么清晰。</p><p>比如看一个电影、看一本书、生活上的小事情、做一个算法比赛、写一个技术实践，说是记录也可以，说是总结也可以。<br/>我<b>把自己作为第一读者，尽量认真的写每一篇文章，让每一篇文章尽量有价值</b>。</p><p>写一篇有深度的文章，需要很强大的思维能力和表达能力。<br/>因为需要有逻辑来组织文章，介绍前因后果，通过文字来表达背后复杂的关系。</p><p>另一方面，这个也是<b>锻炼自己的表达能力、思维能力</b>。<br/>还可以因为写的东西，<b>认识一些志同道合的朋友</b>。</p><p>对于阅读量低，确实也很容易使人受挫。</p><p>但是想想人生中本来就没有简单的事情，想成功，除了运气外，前期的卧薪尝胆、十年魔剑还是需要的，这个需要沉得住气（你要相信一般人不会爆发的，一辈子都不会爆发的）。</p><p>突然好鸡汤了。</p><p>阅读量高了，确实会很高兴。<br/><b>这个是人性</b>（但我们写的内容与风格，注定没人看的。那些火爆的文章都有套路的，如果按那些套路写文章，我们就变成了自己讨厌鄙视的那种人，虽然那样会过多更好）。</p><p>就像以前我做网站的时候，接入了广告，天天盯着收益（其实也没多少，一天几分钱，github把百度屏蔽了，来源都是google搜索），这样反而不利于自己的成长了，后来我就把广告下掉了。<br/>PS：专注于广告收入，可能会想办法去提高访问量与点击率。专注于文章阅读量，会想办法蹭热点、标题党等等，写一些虚而不实的东西（<b>比较反人类的是，人们就是爱看虚而不实的东西</b>）。</p><p>好了，说的差不多了，我说的可能都是错的。</p><p>我们刚<b>开始定位不要看阅读量，定位为记录、总结，判断标准是文章的质量，从而来提高自己</b>。<br/>自己读自己评价，任何一个理性的人还是可以很容易区分质量的。</p><h2><b>四、最后</b></h2><p>其实，我写东西有一定年代了。<br/>初中（04~07）、高中（07~10）、大学（10~14）一直有写日记的习惯。<br/>高中、大学一直在QQ空间写东西。<br/>大学、工作后（14~now）一直在更新自己的一个博客。<br/>工作后注册了微信、注册了公众号，<b>公众号的内容其实也都是从博客同步过来的</b>。<br/>要问我为啥写，真的没啥原因，就是记录而已，可能这个原因，我的阅读量才很低吧。</p><p>想起电影《人工智能 》里的一句台词：I am。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5f026f6ad84118053a95546f24108965_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-5f026f6ad84118053a95546f24108965_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;359&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-5f026f6ad84118053a95546f24108965_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5f026f6ad84118053a95546f24108965_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>电影《人工智能》截图</p><p>PS：<b>你什么时候申请的公众号？最近一次更新是多久之前？如果现在还在写，原因是什么呢？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>-EOF-</p><p>本文首发于公众号：天空的代码世界</p><p>个人微信号：tiankonguse</p>", 
            "topic": [
                {
                    "tag": "写作", 
                    "tagLink": "https://api.zhihu.com/topics/19552516"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47410286", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 9, 
            "title": "读《美丽新世界》", 
            "content": "<p><b>一、背景</b></p><p>十一国庆节从重庆回深圳的时候，做得绿皮车，路上看了两本书：李笑来的《韭菜的自我修养》和禁书《美丽新世界》。  </p><p>上篇文章已经分享了 <a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106163%26idx%3D1%26sn%3D51380bf2ca17a4487269c96596e88120%26chksm%3Df2b36362c5c4ea745dbdd275f7739bed1f3d3a11f86b00972f10b4537ecf3a22ef47acd7a452%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读《韭菜的自我修养》</a>，这篇文章来记录一下《美丽新世界》。  </p><p>下面是我微信读书的书评。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c29057f569673a5f56774b9c0e170476_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"3353\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-c29057f569673a5f56774b9c0e170476_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;3353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"3353\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-c29057f569673a5f56774b9c0e170476_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c29057f569673a5f56774b9c0e170476_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、阿道司·赫胥黎 </b></p><p>1931年，欧洲一片混乱。很多工人找不到工作，中产阶级面面临破产，政府摇摇欲坠。为了对抗这种危机，共产主义思想广泛传播，很多人认为共产集权政府有存在的必要性。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>阿道司·赫胥黎对这种现状很担忧。他在当时的福特汽车垄断汽车行业上，感受到一旦集权的政府上台，集权为了保持稳定，会对人做各种限制或改造。</p><p>于是阿道司·赫胥黎写了一本小说，提醒人们关注这种危险，这本小说一经发表，就轰动了世界。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>随着时间的流逝，其中的预言不仅没有过时，反而历久弥新，变得更有现实意义了。</p><p>这本小说就是著名的《美丽新世界》（Brave New World）。 </p><p><b>二、理想的新世界</b></p><p>理想的未来世界里，未来没有国家的概念了。  </p><p>世界的资源是无限的，而且每个人都是理性的、无私的、道德的。  </p><p>每个个体只需要做自己喜欢做的任何事情，无数个个人组成群体后，这个群体就像无数螺丝钉零件组成了机器一样，可以平稳的运行下去。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>这样的新世界就是美丽的，但是有几个小问题。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.人类是哺乳动物，需要通过胎生来产生下一代人类。 胎生存在很多不稳定因素，比如胎生很容易产生先天缺陷的婴儿。  </p><p>2.人不是机器，如果一直做同样一件低级的重复的事情，就会感到无聊、痛苦，不想去做。  </p><p>3.人是个善变的动物，会有不同的喜好，随着成长喜欢也会变化。</p><p>4.人类在生活中会遇到各种烦恼和痛苦，比如性压抑、衰老、亲情、爱情、思考哲学等。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>这几个小问题使得螺丝钉个体不再稳定，从而使得组成的群体机器也不再稳定。  </p><p>为了保持社会的问题，集权者需要对人和社会进行改造，排除这些不稳定因素。  </p><p><b>三、美丽的新世界</b></p><p>面对最重要的四个不稳定因素，分别进行了触目惊心的改造。  </p><p><b>1.胎生</b></p><p>既然胎生的婴儿这么不稳定，那就使用流水线就行批量生产婴儿吧。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们知道一个女孩一个月只会产生一个卵子，考虑到流水线上的各种挑选淘汰，一月产生一个肯定是不够的。  </p><p>幸好，卵子和精子结合生产受精卵后，在某些情况下受精卵会分裂为几个受精卵，然后长成独立的婴儿，也就是我们所说的多胞胎。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>故事中，科技是发达的，通过科技手段挑选出高质量的精子和卵子进行受精，进行干预受精卵，可以使得一个受精卵最高可以分裂成96个，并分别成长为理想的婴儿。  </p><p><b>2.重复的工作</b></p><p>对于一些低级的重复的体力劳动，没人喜欢做这些。</p><p>由于婴儿已经是批量生产了，那就可以根据社会分工，生产出不同体型与智力的人群来，从而可以在每个工作岗位上找到对应的人来做，且不会被排斥。  </p><p>具体的就是胚胎发育过程中，控制婴儿的供氧量，从而精确控制婴儿的发育情况，比如头脑发育不良、骨骼发育不良，这样这些人就可以做那些低级的工作了，他们也不会感觉无聊。  </p><p><b>3.固定的工作</b></p><p>人是善变的，可能会突然喜欢什么工作，或者突然讨厌当前的工作。  </p><p>所以在婴儿成长时期，通过各种催眠、睡眠疗法、洗脑教育、条件反射等科学方法，严格控制各姓人类的喜好，使得每个人只会做两件事，就是自己的工作和尽情消费。</p><p>而对其他任何事情，都会排斥。他们会热爱自己的等级，热爱自己的工作，认为自己的等级与工作时世上最好的，自己是最幸福的。  </p><p><b>4.生活上的事情</b></p><p>生活上的事情是最复杂的。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个男人突然精虫上脑了怎么办？为了使得每个人性欲都得到充分的满足释放，这个世界里提倡杂交，即男女之间不再有夫妻关系，只有性交关系。而且他们从小就学习各种性游戏，电影也全是情色动作片，性已经是一个再普通不过的一个娱乐行为。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个人生病或衰老了怎么办？医学是相当发达的，可以精确监控每个人的健康数据，每天定时给每个人补充各种激素，使得不会有人生病，不会有人衰老（体力与外表），人活到一定岁数，直接回收处理。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个人不高兴怎么办？为了消除情绪，这个世界不再有家庭、亲情，再也接触不到艺术、科学、历史，禁止独立思考。怎么做到呢？非工作状态下，就必须娱乐，而且是团体娱乐，一方面让所有人都保持快乐，另一方面也让人没有时间思考。  </p><p>如果一个人的时候，出现了疲劳、无聊、情绪等，就需要马上吃迷幻药。  这样每个人都不会思考了，每个人都是巨婴。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>可是，看过《黑客帝国》的人都知道，再完美的程序也会有漏洞。</p><p>那面对偏离控制的人该怎么办呢？  隔离，隔离到一个孤岛上去。  </p><p><b>四、美丽的意外</b></p><p>人毕竟不是机器，总会发生意外。</p><p>《美丽新世界》中的故事就是因为一个意外而引起的。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个本来正常发育的高级婴儿（柏纳德·马克斯），因为流水线工作的一个失误，使得身高没有成长发育，比周围的人矮了一截。</p><p>在一个群体里，一旦有个人与其他人不同，他就会被孤立，所以马克斯总是被周围的同伴嘲笑与孤立。</p><p>人一旦独处，就会进行思考。会思考的人真可怕，马克斯竟然看到了社会的阶级与不平等，有了反社会的念头。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在马克斯带着自己的性伴侣去野蛮人保留区旅游时，在野蛮人部落遇到了自己主任曾经失踪的性伴侣，没想到还生了一个娃，叫做约翰。  </p><p>由于约翰母亲的特殊身份，约翰被部落的孩子孤立排挤，自己经常读《莎士比亚》，并孤立思考，有自己的人生态度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>恰巧，主任想把马克斯流放到孤岛去，而马克斯把主任的性伴侣和儿子带回来了，于是主任成了罪人被流放。</p><p>由于约翰比较稀有，现有世界要对其进行研究，所以成了宝贝。而把其带回来的马克斯也称为了名人。</p><p class=\"ztext-empty-paragraph\"><br/></p><p> 当然，后面因为约翰不能接受现有社会的伦理，使得马克思被流放，而约翰也自杀了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>至此，这个世界又可以稳定的运行下去了。  </p><p>即使中间某些因素发生意外，也会被马上干预隔离。</p><p>即使是科技，如果有所突破但与现有规则冲突，新科技也会被封杀隔离。  </p><p>世界自己不再发展，只希望可以平稳的滚动下去，变成一潭死水。  </p><p><b>五、最后</b></p><p>这本书读着没有<u><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《1984》</a></u>震撼，因为<u><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《1984》</a></u>里描述的事情我们的社会真实经历过，显得更接近我们。 </p><p>其实《美丽新世界》里的事情已经在我们身边发生了，比如计划生育、网络封杀、信息封锁、娱乐主义，只是我们生活在其中没有意识到罢了。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>在公众号里回复&#34;美丽新世界&#34;可以获得《美丽新世界》电子书。</p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p>", 
            "topic": [
                {
                    "tag": "乌托邦", 
                    "tagLink": "https://api.zhihu.com/topics/19558871"
                }
            ], 
            "comments": [
                {
                    "userName": "崇森", 
                    "userLink": "https://www.zhihu.com/people/aabc093aaf77713bd2f2b56a06005cf0", 
                    "content": "跟你理解的不一样。<br>我觉着 美丽新世界 反而是资本主义走到极端的乌托邦。这个乌托邦在《黑镜》中也有展示。", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "Tao Vivien", 
                    "userLink": "https://www.zhihu.com/people/2fdc794634eae2017283b5a126941581", 
                    "content": "今天科幻文学里的世界，像是在现实中和我们招了招手", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/47410250", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 2, 
            "title": "读《韭菜的自我修养》", 
            "content": "<p><b>一、背景</b><br/></p><p>十一国庆节的时候，坐高铁回重庆了。  </p><p>当时还在高铁上写了一篇腾讯的文章《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106124%26idx%3D1%26sn%3D53b6c94425d577bc4f3d2f96e34676cb%26chksm%3Df2b3635dc5c4ea4bf85eaf3f2de9ea2f41e374643ce31dfcb6edbfdcf861757c0a81034bd9fb%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">腾讯的竞争力与组织架构</a>》。腾讯这次调整，目前看仅仅时BG进行合并，还没看到实质性的调整，等过几个月再看看会如何深入调整吧。如果仅仅是BG合并，那其实是否调整都没有区别。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>国庆期间把《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106135%26idx%3D1%26sn%3Dd4b24ddda784b223d1087683dfef9fb9%26chksm%3Df2b36346c5c4ea5067263d5586fd124a74da8109fa0b41c5da5434b7664786b2ee139e50ae29%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">简单的逻辑学</a>》看完了，基本的逻辑分析，其实每个人都需要掌握的。很多人分不清谣言、上当受骗都是缺少逻辑的原因。  </p><p>回深圳坐的是慢车，是的，就是传说中的绿皮车。  </p><p>路上看了两本书李笑来的《韭菜的自我修养》和禁书《美丽新世界》。  </p><p>这里简单记录一下李笑来的这本书的笔记，而那本禁书，下一篇文章再写。  </p><p><b>二、李笑来</b></p><p>说这本书之前，我们先来看看李笑来老师吧。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>我第一次听说李笑来是读《把时间当朋友》这本书的时候，这本书是他写的。  </p><p>后来知道他和锤子的老罗是发小，都曾于新东方当英语老师。  </p><p>再后来，听说他在得到出了专栏《通往财富自由之路》，不过由于我买的吴军《来自硅谷的信》还迟迟没怎么看，于是就不再买得到的其他专栏了。  </p><p>至于XX币和天使投资人这两个话题，我们就不谈了。  </p><p><b>三、韭菜的买买买</b></p><p>前几章，着重在介绍什么是韭菜，韭菜有哪些特征，韭菜的命运。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>所谓的“韭菜”，指的是在交易市场中没赚到钱甚至赔钱的势单力薄的散户。</p><p>他们严重缺乏基本的阅读能力。他们是那种买一辈子东西都不读产品说明书的人，他们是那种无论拿到什么，都要问别人怎么用的人。</p><p>韭菜一进场就是“买买买”。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于市场，因为不断的有韭菜进场，才会不断的上涨。  </p><p>而市场规律就是，缺钱的时候，资金从市场撤走，市场就会大跌。</p><p>所以入场资金枯竭时，好的行情也就结束了。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>在《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106130%26idx%3D1%26sn%3D8bd4b64db9b9ed93a9e5a66c811a0ed1%26chksm%3Df2b36343c5c4ea5517c47e2eea44c6c8e8f30dceb0539b29f9b2d048ec8f6c420a99fb399faf%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一出好戏是部好电影</a>》的最后一小节，我曾提到“我们的社会是交换型社会”。  </p><p>我们提起的理财其实都是交换，交换后成理财产品后，我们期望以后升值从而再交换为货币。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>而对于韭菜，往往一进场就把自己的钱交換光了。  </p><p>如果牛市还好，对于熊市，韭菜只能被套了。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果你依旧有很多现金流在手，依然有钱可以慢慢交換。</p><p>于是，在其后漫长的熊市里，依然有机会降低成本建仓。</p><p><b>四、韭菜的认知</b></p><p>韭菜往往比较懒惰，不学习，不研究，鼠目寸光，怨天尤人。 </p><p>他们甚至必须向别人咨询，或者必须“打探小道消息”才能决定交易的方向。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于正常的投资者，交易之前，会认真研究，深入学习；交易过后，无论输赢，都要总结归纳，修正自己的观念和思考，以便完善下一次的决策。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>韭菜的认知：股市是一个“零和游戏”，有人赔钱了，肯定是有人赚钱了。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>其实韭菜之所以亏钱，是因为认知较低导致的。  </p><p>认知这个词比较虚，我们换另一个词，韭菜不会独立思考。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>本质上来看，一切的交易，都是思考不一致的结果。</p><p>在任何一个时间点上，交易参与者的思考、判断、需求、结论如若完全一致的话，是不可能有交易出现的。</p><p>交易参与者必须找到与自己持有不同甚至相反的结论的人才能完成交易。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p>韭菜其实也在学习，不过由于他们学习的方向、方法、方式都天然带着缺陷，所以，学到的都是没用的东西，甚至是有害的东西。</p><p><b>五、韭菜的抄底</b></p><p>冒险，经常被与“勇敢”混为一谈，这种概念混淆在日常生活中可能不会造成过大的风险。然而，在交易市场里，这种混淆常常是直接致命的。</p><p>优秀的、成功的交易者，最终都是风险厌恶者。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>错误的逻辑：市场有风险；所以，想要成功就要冒险；反过来，不冒险就不可能成功。</p><p>正确的观念：获得经验的最直接方法是通过自己的实践获得。然而，在风险这件事儿上，一定要尽早学会观察他人的冒险实践，而不是通过自己的实践。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>风险是可以通过算术算出来的。  </p><p>实际上，在不确定对方信用的情况下，无论回报率是10%还是50%，抑或是200%，风险是一样的：你</p><p>最多可能损失掉的是100%的本金；</p><p><b>五、韭菜的高频交易</b></p><p>频次才是决定一切的根本因素。</p><p>交易频次越高，交易越是接近“零和游戏”。</p><p>“华尔街教父” 本杰明·格雷厄姆曾说：短期来看是投票机，长期来看是称重机。  </p><p>“韭菜”其实常常并不是被别人割，在更多的情况下，他们是被自己割的！</p><p>频繁交易的结果就是交易手续费累积，累积到吞噬你的所有利润和本金。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>所谓的庄家：利用“韭菜”的认知落后、认知缺陷，诱导韭菜“高价接盘”再想办法让他们“挥刀自宫”的，绝</p><p>对是坏人，虽然有时候法律还跟不上，但，他们是确定的坏人。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>所有的韭菜都有幻觉：我要是在那里卖这里买就好了。</p><p>事实上，在任何“最高点”“最低点”的价格上，成交量都很少！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在最高点的价格上，只能卖掉那一点点的量，再接着卖，就要以更低的价格成交了。</p><p>反过来，在最低点的价格上，只能买到那一点点的量，再接着买，就要以更高的价格成交了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为交易市场中的一分子，你不大可能在最高点卖出，也很难在最低点买入。</p><p>最高点和最低点，都是因为一小部分交易者的“冲动”造成的。</p><p><b>五、韭菜的生活</b></p><p>韭菜没有生活甚至没有性生活。</p><p>事实上，在任何领域里，想要把手中的事情做到极致，都要学会独处。</p><p>在交易市场里，这一点非常明显：你必须，也只能为自己的决策负责。</p><p><b>六、最后</b></p><p>《韭菜的自我修养》这本书其实是一本入门的理财书，不过从不一样的角度介绍了哪些行为是不对的，会亏钱的，应该如何避免称为韭菜。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>总的来看，投资是一个长期的过程，甚至是一辈的事情。</p><p>我们需要学会独立思考，永远不要抄底，手上永远留有现金，降低交易次数，其他时间用来学习、工作、生活。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在公众号里回复&#34;韭菜的自我修养&#34;可以获得《韭菜的自我修养》电子书，回复&#34;思维导图&#34;可以获得《韭菜的自我修养》的思维导图。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p>", 
            "topic": [
                {
                    "tag": "金融", 
                    "tagLink": "https://api.zhihu.com/topics/19609455"
                }, 
                {
                    "tag": "股票", 
                    "tagLink": "https://api.zhihu.com/topics/19559840"
                }
            ], 
            "comments": [
                {
                    "userName": "依然不范稀特", 
                    "userLink": "https://www.zhihu.com/people/8f80fee875fcd6fdc176fb9e198a03e5", 
                    "content": "虽然不是太懂，还是要感谢!", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45130894", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "读书(附电子书)|小狗钱钱之白色的拉布拉多", 
            "content": "<blockquote>关注公众号，在公众号中回复“小狗钱钱”可免费获得电子书。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>一、背景</b></h2><p>之前写了一篇文章 <a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106072%26idx%3D1%26sn%3D5302fdd2f03a151c31b2aebbfdba4856%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《小狗钱钱》 理财小白应该读的一本书</a>，那时候我才看那本书，现在看了一大半了，发现这本书确实不错，以故事的形式让我们知道我们平常的很多想法是错误的。</p><p><b>考虑到你不会读这本书，我打算对这本书做一下提炼，对重要的知识点画成思维导图，分享给大家。</b></p><p>点击可放大，如果不清晰，在公众号中回复“白色的拉布拉多”可免费获得原图。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-26b55abe3d8fd5add3a36c8589e94757_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"396\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-26b55abe3d8fd5add3a36c8589e94757_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;396&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"396\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-26b55abe3d8fd5add3a36c8589e94757_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-26b55abe3d8fd5add3a36c8589e94757_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>二、禁止养狗</b><br/></h2><p>儿童的世界是以自我为中心的。<br/>所以在儿童的眼中，当别人的观点与自己的冲突时，错误的是对方，而不是自己。<br/>面对房东禁止养狗，小女孩认为房东没有权利禁止别人养狗。<br/>原来世上就是有那么一些不好商量的人，比如固执的房东。</p><h2><b>三、财务危机</b></h2><p>买了新房要花费不少金钱，恰好这个时候小女孩父母的生意惨淡。<br/>早熟懂事的小女孩将养狗的想法默默埋在心中。<br/>另外，小女孩的父母经常抱怨是因为这样导致家庭遇到财务危机。</p><p>第一抱怨国家局势 <br/>父母一再强调生意受到“经济衰退”的影响。<br/>他们的意思是，国内经济形势是导致他们财务问题的根源。<br/>可是小女孩不明白，<b>为什么在同样的经济形势下，隔壁朋友的爸爸妈妈的财务状况却越来越好呢</b>？</p><p>第二抱怨曾经买房<br/>妈妈偶尔念叨着，要是我们没有买这栋房子就好了。<br/>但是这样的事情已经发生了，<b>这样想纯粹是浪费时间，因为时间是无法逆转的</b>。</p><h2><b>四、剁手之买CD</b></h2><p>小女孩喜欢一张CD唱片，需要花费一个月的零花钱才能刚好买到这张CD。 <br/>小女孩本来是要不犹豫的要下单的，但是狗狗及时占了出来，通过问两个问题阻止了她。</p><p>问题1. 是否买得起</p><blockquote>吉娅，你应该首先考虑一下，你是不是真的买得起这张CD！</blockquote><p>问题2. 买的代价</p><blockquote>吉娅，如果你买了CD，这个月的零用钱就都花光了。</blockquote><p>想到这两个问题，小女孩及时被劝住了。</p><h2><b>五、狗狗的第一堂课</b></h2><p>狗狗对小女孩说了一些大道理。</p><p>1.记忆欺骗了自己<br/>你们人类总是被自己的思想欺骗，所以我建议你，有些时候应该把自己的想法用笔记录下来。</p><p>2.钱的重要性</p><p>我也不认为钱是人一生中最重要的东西。可是假如我们缺钱的话，钱就会变得格外重要。</p><p>3.错误的理财观念<br/>很多人错误的以为现在就学习金钱方面的知识对自己来说似乎有点太早了。而且爸爸妈妈的经历让我觉得，钱不是什么好东西。</p><h2><b>六、十个愿望</b></h2><p>小狗狗对小女孩说：你自己必须真的有‘想要变得富有’这个愿望，所以你必须找到10个‘想要变得富有’的理由。<br/>小女孩写下了十个愿望，感悟到：“富有”是一件很值得去争取的事情——富人可以轻易买到这些东西，也能做许多有趣的事情。</p><h2><b>七、最后</b></h2><p>《小狗钱钱》的第一章就提出很多不一样的观点。<br/>比如<b>金钱管理(理财)越早越好</b>，现在这社会提起金钱，大家就想到贪婪的商人、风流的富二代。<br/>比如<b>钱并不是坏东西</b>，但是金钱和性这两个话题，大家都避之唯恐不及，从来不提，更别说传达对应的观点与方法了。<br/>比如<b>理性消费</b>，买之前先问自己是否买得起、有什么代价。是否有更重要的事情可以做？<br/>当你罗列了自己的愿望后，你会发现你是多么的缺钱，然后你就会好好珍惜手中的每一分钱，<b>现在终于明白为啥别人都说那些富人其实是最抠的</b>，俗称铁公鸡。</p><p>关注公众号，在公众号中回复“小狗钱钱”可以获得pdf电子书。</p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><b>推荐阅读：</b><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106072%26idx%3D1%26sn%3D5302fdd2f03a151c31b2aebbfdba4856%26chksm%3Df2b36289c5c4eb9f8fd31fb5b7992c4c56a7086be097e68c84952d0b22ae072a1f2ea16a2790%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《小狗钱钱》理财小白应该读的一本书</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106047%26idx%3D1%26sn%3D5b10edc6833da765506cad0dea5e918b%26chksm%3Df2b362eec5c4ebf8d0e53a3fd7095313c4f1b0f7a068b5d8060b590af7ff84f98299703ff642%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">台风刮来一个黄段子</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105942%26idx%3D1%26sn%3D30d6d634043e14cf9e2f14b7888e9568%26chksm%3Df2b36207c5c4eb11628e533bb7f7ecc2ee335219adf4167bc19dbe09f503164c58bdae1367b9%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ADR与各国股票</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106022%26idx%3D1%26sn%3D4ffb5667584d67c88145b775cfc39896%26chksm%3Df2b362f7c5c4ebe12293e405b7f8caac1d150d7b1029d1017c2c2af2c39ac551db471f252b0d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最简单的理财：定投与资产配置</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105904%26idx%3D1%26sn%3Dba86f0a4da97b858853299c1b42862db%26chksm%3Df2b36261c5c4eb77bf27a8aebb491ba614fae8bf5a4580a40119be6a19ecaf463f6d88382adb%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从搬砖到ETF</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105948%26idx%3D1%26sn%3D93b8275a412b81afe5ab434db27a0dec%26chksm%3Df2b3620dc5c4eb1b5b8f1a3c01a4edd0de8ba4f1feddb50227f12af01ce9e0c81cba99e3e142%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中小板、创业板是啥？</a><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖</p><p class=\"ztext-empty-paragraph\"><br/></p><p>今天长按识别上面的二维码，在公众号中回复“ACM模板”，你将免费获得我大学耗时四年整理的《ACM算法模板》。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>点击阅读原文加入“tiankonguse的朋友们”，已有三百多个小伙伴加入。</p>", 
            "topic": [
                {
                    "tag": "电子书", 
                    "tagLink": "https://api.zhihu.com/topics/19552449"
                }, 
                {
                    "tag": "个人理财", 
                    "tagLink": "https://api.zhihu.com/topics/19576951"
                }, 
                {
                    "tag": "狗", 
                    "tagLink": "https://api.zhihu.com/topics/19555614"
                }
            ], 
            "comments": [
                {
                    "userName": "不美的平凡", 
                    "userLink": "https://www.zhihu.com/people/e992eae913e8c39e8e732524d17b2cb4", 
                    "content": "小狗钱钱", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45130805", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "《小狗钱钱》理财小白应该读的一本书", 
            "content": "<blockquote>关注公众号，在公众号中回复“小狗钱钱”可以免费获得电子书。</blockquote><p>很早之前就听说过《小狗钱钱》这本理财书，这周开始看这本书了，发现确实不错，推荐给大家。 <br/>这里对摘抄一些作者的想法给大家，一旦提起个人想法，就很容易扯起大道理，然后大家就看不下去了。还是印证了下面的道理：大家只喜欢听故事。</p><h2><b>大家都喜欢听故事</b></h2><p>这本书作者原先想写给孩子们看的，所以采用故事的形式来讲理财了。 <br/>作者想，通过这种方式能够更容易地告诉孩子们如何轻松地获得财富和成功，因为许多家长总是回避这样的话题。</p><p>令作者想不到的是，后来他收到了成千上万封来信——是成年人写的。信的内容大致相同：“这个故事激励我去行动，因为它触动了我的情感。”、“我非常感动。”、“因为这个故事，我第一次接触了钱这个话题。”、“我终于懂得了真正获取财富的秘诀。”。</p><p>这些读者的反馈使作者发现，他原先的估计错了。 如今作者才明白，其实一个能打动人的故事要远比一幅美丽的图画更值得我们花费笔墨去描述。 最容易触动心灵的始终是故事，无论对象是孩子还是成年人。因此我的这本书既是为孩子们、也是为成年人写的。</p><h2><b>忽视是一种认输</b></h2><p>大多数人对自己的财务状况关心得不够。在这方面，他们像一个3岁的孩子，只会闭上眼睛想：反正现在看不见它了。</p><p>财务问题始终存在，如果我们对它不闻不问，它就会变成一种消极力量，降低我们的生活质量。 忽视财务问题，就是放弃成功的机会。<br/>财务自由是今天每个人都可能实现的目标，当然这需要我们拥有追求自己真正想要的生活的勇气。</p><p>正如一句名言所说：“并非困难使我们放弃，而是因为我们放弃，才显得如此困难。”</p><h2><b>一切皆有可能</b></h2><p>只需要一点思想的火花就足以让你走上富裕的道路。</p><p>可是在这里，我还想提醒你注意一个令人惊讶的事实，在某种程度上也作为一个预先的提醒——一旦丰厚的资产开始流动，其速度之快和数量之大都可能让你吃惊：以前它们都藏到哪里去了？</p><p>这个现象还纠正了广为流传的错误观点——人们只能通过多年艰苦的工作才能实现富裕。<br/>财富应该是某种思想观点、某种以富裕为导向的信仰的产品。<br/>只要满足了这些前提条件，那么这一切比大多数人想象的都要简单得多。</p><h2><b>什么都无法阻挡你</b></h2><p>将金钱的规律铭记在心，你就会发现自己的财务状况在日益改善。<br/>没有任何东西能够阻挡一个顺应时势的想法。</p><p>这一点也适用于每一个人的生活。什么都无法阻挡你享受自己与生俱来的权利——富裕。<br/>富有尊严、财务上游刃有余的生活符合我们的自然法则。</p><p>只要你不放弃，那就没有任何东西可以阻碍你达到这个目标。就是现在，马上行动起来吧。</p><p>我们的生活是一次旅行。如果我们掌握了金钱的规律，那么这次旅行就可以为我们开创机遇，并将我们引向那个自己从未想过的方向。</p><h2><b>最后</b></h2><p>你竟然看到了这里，恭喜你，未来必成大事。</p><p>关注公众号，在公众号中回复“小狗钱钱”可以获得pdf电子书。</p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><b>推荐阅读：</b><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106047%26idx%3D1%26sn%3D5b10edc6833da765506cad0dea5e918b%26chksm%3Df2b362eec5c4ebf8d0e53a3fd7095313c4f1b0f7a068b5d8060b590af7ff84f98299703ff642%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">台风刮来一个黄段子</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105942%26idx%3D1%26sn%3D30d6d634043e14cf9e2f14b7888e9568%26chksm%3Df2b36207c5c4eb11628e533bb7f7ecc2ee335219adf4167bc19dbe09f503164c58bdae1367b9%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ADR与各国股票</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106022%26idx%3D1%26sn%3D4ffb5667584d67c88145b775cfc39896%26chksm%3Df2b362f7c5c4ebe12293e405b7f8caac1d150d7b1029d1017c2c2af2c39ac551db471f252b0d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最简单的理财：定投与资产配置</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105904%26idx%3D1%26sn%3Dba86f0a4da97b858853299c1b42862db%26chksm%3Df2b36261c5c4eb77bf27a8aebb491ba614fae8bf5a4580a40119be6a19ecaf463f6d88382adb%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从搬砖到ETF</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105948%26idx%3D1%26sn%3D93b8275a412b81afe5ab434db27a0dec%26chksm%3Df2b3620dc5c4eb1b5b8f1a3c01a4edd0de8ba4f1feddb50227f12af01ce9e0c81cba99e3e142%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中小板、创业板是啥？</a><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖</p><p class=\"ztext-empty-paragraph\"><br/></p><p>今天长按识别上面的二维码，在公众号中回复“ACM模板”，你将免费获得我大学耗时四年整理的《ACM算法模板》。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>点击阅读原文加入“tiankonguse的朋友们”，已有三百多个小伙伴加入。</p>", 
            "topic": [
                {
                    "tag": "理财计划", 
                    "tagLink": "https://api.zhihu.com/topics/19800677"
                }, 
                {
                    "tag": "理财产品", 
                    "tagLink": "https://api.zhihu.com/topics/19577201"
                }, 
                {
                    "tag": "个人理财", 
                    "tagLink": "https://api.zhihu.com/topics/19576951"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/45047441", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "从零开始学算法：5.万能数组", 
            "content": "<p>原创： 袁小康 天空的代码世界 <i>前天</i></p><p>数组是万能的，那是不可能的；因为他万能的时候名字不叫数组了。<br/>这篇文章涉及的源代码可以全部免费获得，在公众号中回复“万能数组”可以获得。<br/><b>一、背景</b><br/>大家好，我是tiankonguse。<br/>由于某些原因，经常有人想学习算法但之前又没有相关经验，不知道从何做起。 我思考了许久，计划写一个系列来分享如何入门学习算法。<br/>之前已经分享了《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105857%26idx%3D1%26sn%3De7a7aed42b65e30d8ec1176678d19012%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">认识算法</a>》、《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105861%26idx%3D1%26sn%3D67594ec3480439ba050642581f128ebf%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">了解套路长啥样</a>》、《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106056%26idx%3D1%26sn%3Dde6fc55c85672fc44443e162f8207508%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">排序算法</a>》、《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106063%26idx%3D1%26sn%3D76766a72c7174f2f2de2577892406fb7%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二分查找</a>》，这是第五篇《万能数组》。<br/>考虑到很多人不是科班出身的，或者当初没好好学习，很多基础知识都忘记了。<br/>还有上次说的交接给我的一个项目，其中的关键逻辑就是使用数组实现的，没想到O(n)复杂度的操作到处都是，真实惨不忍睹。<br/>所以这篇文章来给大家普及下数组上的知识点，大家使用的时候对于复杂度高的操作应该尽量避免，不然后面就是一个瓶颈点。 <br/>以后这些问题即使解决了，性能翻了几倍，也没什么好炫耀的，因为这些本来就是基础，最初实现的时候就应该避免。<br/><b>一、基础知识</b><br/>C语言中的数组，使用的时候被当做一个定长的连续的空间。<br/>我们可以通过下标在O(1)的时间上直接读取或者修改对应位置的值。<br/>所以数组在很多时候是一种最常见高效的数据结构（姑且算数据结构）。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5ab3f4e227d07c61a4a398cf6eca50c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"182\" class=\"content_image\" width=\"384\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;384&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"182\" class=\"content_image lazy\" width=\"384\" data-actualsrc=\"https://pic1.zhimg.com/v2-5ab3f4e227d07c61a4a398cf6eca50c0_b.jpg\"/></figure><p><br/>但是使用数组的时候也会遇到一些问题。<br/>比如数组的空间不管我们有没有使用，长度都是那么多，不知道用了多少。<br/>如果数组满了，想继续加元素，就会数组越界。<br/>如果数组前面想删除，涉及到后面的元素copy到前面，时间复杂度是O(n)。<br/>所以我们希望对数组进行一个封装，名字就叫做万能数组，可以实现任何我们想操作的事情。<br/>为了代码简单点，这里不使用模板，直接以整数为例。<br/><b>二、自动扩展数组</b><br/>使用数据时经常会发现空间不够了，所以能够自动扩大空间是最好了。<br/>自动扩展的基本思想是追加数据的时候，先判断空间是不是用完了，如果用完了，申请一个更大的内存，旧数据copy过去，旧内存释放，新数据赋值即可。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bb452c8f43debff21925a1a520d1ce31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-bb452c8f43debff21925a1a520d1ce31_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;597&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-bb452c8f43debff21925a1a520d1ce31_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bb452c8f43debff21925a1a520d1ce31_b.jpg\"/></figure><p><br/><b>三、栈</b><br/>栈是一种很常用的数据结构，特点就是后进先出。<br/>可以想象你们一排车开进死胡同了，最先进去的在最里面，最后进去的在最外面。<br/>那大家想出来，肯定是最外面的先出来，也就是最后进去的先出来（后进先出）。<br/>栈的使用场景有：序列反选、逆序输出、括号匹配、DFS等。<br/>使用数组可以轻松实现栈这个数据结构。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-88deddb80f65899964c23b422dcd0181_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"510\" data-original=\"https://pic2.zhimg.com/v2-88deddb80f65899964c23b422dcd0181_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;510&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"510\" data-original=\"https://pic2.zhimg.com/v2-88deddb80f65899964c23b422dcd0181_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-88deddb80f65899964c23b422dcd0181_b.jpg\"/></figure><p><br/><b>四、队列</b><br/>队列是一种先进先出的数据结构。<br/>最常见的例子就是排队吃饭，先打饭的肯定是队首的那个人。<br/>由于队列涉及到删除数组前面的元素，这里可以使用一个标记来标记前面删除了多少个元素。。<br/>所以使用数组，也可以实现简单的队列。<br/>内存扩展时，数据实际上需要从头对齐，这里暂时不处理（后面有更好的方案）。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-df0b69aa23a1c810f13bb68e4b704046_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb\" width=\"434\" data-original=\"https://pic3.zhimg.com/v2-df0b69aa23a1c810f13bb68e4b704046_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;434&#39; height=&#39;335&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"335\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"434\" data-original=\"https://pic3.zhimg.com/v2-df0b69aa23a1c810f13bb68e4b704046_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-df0b69aa23a1c810f13bb68e4b704046_b.jpg\"/></figure><p><br/><b>五、双向队列</b><br/>栈大家都听过，队列大家也都听过，那双向队列听过的人就不多了吧。<br/>双向队列，顾名思义，就是两边都可以进也都可以出的队列，也就是栈和队列的合体了。<br/>使用前面的方法实现了双向队列后，可以发现这里会有一个问题：队首也可以插入数据了，有可能前面的空间用完不够用了。<br/>所以，我们到了不得不面对队首空间的问题了，下一小节分享一个比较实用的方法。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4d4e9117b455368db742dd1365a996e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb\" width=\"449\" data-original=\"https://pic2.zhimg.com/v2-4d4e9117b455368db742dd1365a996e9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;449&#39; height=&#39;492&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"449\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"449\" data-original=\"https://pic2.zhimg.com/v2-4d4e9117b455368db742dd1365a996e9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4d4e9117b455368db742dd1365a996e9_b.jpg\"/></figure><p><br/><b>六、循环队列</b><br/>在队列和双向队列小节里，我们发现了两个问题。<br/>问题1：队列的队尾没空间了，队首可能还有空间，我们没办法用起来，只能直接扩大内存。<br/>问题2：双向队列的队首没空间了，队尾可能有空间，我们也没用起来，不但需要扩大内存，还要对数据进行偏移，好给队首预留一些位置来。<br/>我们这里要做的是，在还有空间时，尽量利用已有的空间。<br/>比如队尾的空间用完了，队首还有，那入队就放在队首那一头。<br/>最后确实没有空间了，我们才去扩展空间。<br/>双向循环队列与循环队列的思想是类似的，这里以循环队列为例来看看实现吧。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-75fc8a48a511152899cf20856367af49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"709\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"709\" data-original=\"https://pic2.zhimg.com/v2-75fc8a48a511152899cf20856367af49_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;709&#39; height=&#39;616&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"709\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"709\" data-original=\"https://pic2.zhimg.com/v2-75fc8a48a511152899cf20856367af49_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-75fc8a48a511152899cf20856367af49_b.jpg\"/></figure><p><br/><b>七、其他操作</b><br/>上面对于数组只进行了简单的操作，即首尾增删数据。<br/>实际情况是可能在中间插入数据，也可能删除中间的数据，还需要使用下标定位。<br/>这个时候如果粗暴的实现的话，会发现复杂度是O(n)的。<br/>比如删除数组的第一个元素，那么数组后面所有的元素都需要前移一下（通过循环队列可以不移动）。<br/>而在中间插入或删除一个元素，操作位置后面的空间依旧需要移动，这个时候循环队列就没辙了。<br/>面对这个问题该怎么办呢？<br/>后续的文章慢慢介绍一些方法来。<br/>这篇文章涉及的源代码可以全部免费获得，在公众号中回复“万能数组”可以获得。<br/></p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。<br/><b>推荐阅读：</b><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106047%26idx%3D1%26sn%3D5b10edc6833da765506cad0dea5e918b%26chksm%3Df2b362eec5c4ebf8d0e53a3fd7095313c4f1b0f7a068b5d8060b590af7ff84f98299703ff642%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">台风刮来一个黄段子</a><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106033%26idx%3D1%26sn%3D9cce814d94c2af418b0b22e6143b1cbc%26chksm%3Df2b362e0c5c4ebf66fcc3613e95e4a1ef75482b32aaea7cbc9484ec1518edde65656a7b87607%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">了解zookeeper与阅读api源码</a><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106022%26idx%3D1%26sn%3D4ffb5667584d67c88145b775cfc39896%26chksm%3Df2b362f7c5c4ebe12293e405b7f8caac1d150d7b1029d1017c2c2af2c39ac551db471f252b0d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最简单的理财：定投与资产配置</a><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106043%26idx%3D1%26sn%3Dc71e9aaba3e0de44b5ba5657108ff0f4%26chksm%3Df2b362eac5c4ebfca100e3a94f97470dc77cd3b77c4e36f0622798e9a2d5a497023165bdae29%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">荷塘月色</a><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106028%26idx%3D1%26sn%3D098234227f43e63990b89e2bfb1fe819%26chksm%3Df2b362fdc5c4ebeb9e32f7c782403d999988e80e18d8d7fcfb9a10f365e24817dbfa419047a9%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TCP ACK 延迟40ms</a><br/><br/>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖<br/><br/>今天长按识别上面的二维码，在公众号中回复“ACM模板”，你将免费获得我大学耗时四年整理的《ACM算法模板》。<br/><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p><br/>点击阅读原文加入“tiankonguse的朋友们”，已有三百多个小伙伴加入。</p>", 
            "topic": [
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "数组", 
                    "tagLink": "https://api.zhihu.com/topics/19725906"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44084891", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 7, 
            "title": "TCP ACK 延迟40ms", 
            "content": "<blockquote>不论宣称如何完美的解决方案，都会引入另一个更复杂的问题。</blockquote><h2><br/><b>一、背景</b></h2><p><br/>我负责的缓存系统有一个版本号模块，专门用来对<b>数据生成唯一的版本号seq来保证数据的唯一性</b>，从而做到数据数据实时更新以及<b>避免旧数据覆盖新数据</b>的问题。 </p><p>这个模块是其他人交接给我的，之前服务一直都正常，也就没去细看。</p><p>最近访问量越来越大了，服务出现一些失败，所以需要先梳理整个模块的情况，然后在从整体上来优化这个模块。</p><h2><br/><b>二、高延时</b><br/></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4e5ab62222942439a7552bc5209935cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"957\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb\" width=\"957\" data-original=\"https://pic1.zhimg.com/v2-4e5ab62222942439a7552bc5209935cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;957&#39; height=&#39;247&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"957\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"957\" data-original=\"https://pic1.zhimg.com/v2-4e5ab62222942439a7552bc5209935cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4e5ab62222942439a7552bc5209935cc_b.jpg\"/></figure><p><br/>版本号模块一梳理不要紧，发现一大堆问题，如将来处理数据存在瓶颈、模块不可扩容、存在同步逻辑等等。 <br/>其中一个问题就是拉取版本号时，平均延时比较高。 <br/>看上图，可以发现，测试环境平均耗时只有1毫秒，而正式环境是20多毫秒。这个不应该这么高的。<br/>那版本号服务的延时为什么这么高呢？ <br/>目前我只能说不知道。 <br/>上面那个监控也是那个服务交接过来后，在我给那个服务增加功能时增加的。 <br/>而对于版本号模块交接过来后发现没监控，但是加监控这种优先级最低的事情是不会单独去做的，除非出了问题，比如现在，不得不加了。<br/>现在能做的是先tcpdump抓个包看看，结果发现一个奇怪的现象，是的，就是这篇文章的标题，某些ACK延迟了40ms才发出来（当然，监控的高延时不是这个导致的）。</p><h2><br/><b>三、延迟ACK</b><br/></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dce2b0f568fce2a96b69bab2446cb7f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-dce2b0f568fce2a96b69bab2446cb7f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;597&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-dce2b0f568fce2a96b69bab2446cb7f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dce2b0f568fce2a96b69bab2446cb7f9_b.jpg\"/></figure><p><br/>如上图，可以看到某些时候，服务端回数据包了，但是客户端却迟迟没有回复ACK，直到40毫秒之后才发出ACK。<br/><br/>为什么会这样呢？ <br/>查了TCP相关的资料，了解到TCP的 Nagel算法算法在某些时候，会进入这样一个延迟回复ACK的逻辑，然后等待40毫秒，触发超时逻辑，最终回复了ACK。<br/>这对应了我的其中一个座右铭：<b>不论宣称如何完美的解决方案，都会引入另一个更复杂的问题</b>。<br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><h2><br/><b>四、为什么延迟</b></h2><p><br/>对于后台服务，一般都是长连接，而且是一发一收的模式。<br/>场景就像下面的样子。<br/></p><ol><li><code>CLIENT -&gt; SERVER：发送请求数据</code> </li><li><code>SERVER -&gt; CLIENT：回应收到数据了</code> </li><li><code>SERVER -&gt; CLIENT：返回处理后的数据</code> </li><li><code>CLIENT -&gt; SERVER：回应收到数据了</code> </li></ol><p><br/>是不是发现服务器连续想客户端发了两次数据，一次是会请求数据的ACK，一次是请求数据的结果。<br/>这两次回包如果能够合并为一次，网络上的包是不是一下就少了四分之一。<br/>说干就干，TCP的Nagel加了这样一个功能，先探测通信模型是不是一发一收的，符合条件了收到请求数据包时就先不回ACK，等一会，然后带着处理后的数据一起回ACK，俗称延迟ACK。<br/>那自然就会面临一个问题：如果没有下个请求了，这个ACK就迟迟的发不会去了吗？ <br/>所以这个延迟功能就需要加个兜底时间，超过了兜底时间就补上迟迟没发的ACK。<br/>那怎么手动关闭这个功能呢？<br/>root权限下把/proc/sys/net/ipv4/tcp_no_delay_ack文件的值修改成1即可。 <br/>这样的问题就是每个TCP数据包都会有一个ACK包，增加了网络的包量。<br/></p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><br/><b>推荐阅读：</b><br/><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105997%26idx%3D1%26sn%3Db3cb5478ef590a059b80b7d55bd699f1%26chksm%3Df2b362dcc5c4ebca3c875d8491f55a99077af5b162b03388501b8f4f919d7afc8f2fcd2cfa7c%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">经济危机（一）</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106018%26idx%3D1%26sn%3Df4cbf260502a918c693953fa11656afd%26chksm%3Df2b362f3c5c4ebe5b6e1fa8bdaa5ffc15b29ca0629851f0ff9f775fb144406588e36f8ec8162%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《长尾理论》解释了抖音为啥火了</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105963%26idx%3D1%26sn%3De3502a1968403d82970f854da820a1bb%26chksm%3Df2b3623ac5c4eb2cf17b0b874d33786bf1d210ebf6c7c21232b71edb7e3a2a80649d771573b4%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据脏了怎么办</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读恐怖小说《1984》</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106005%26idx%3D1%26sn%3D2657dfe60fe28e5f5e610b22e866e4fd%26chksm%3Df2b362c4c5c4ebd218e517d111b4234337a02ce200cb58c9b51d5326c5de804e52259bb1ab49%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">静态库遇到静态库</a><br/><br/><br/>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖<br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "TCP", 
                    "tagLink": "https://api.zhihu.com/topics/19614026"
                }, 
                {
                    "tag": "网络协议", 
                    "tagLink": "https://api.zhihu.com/topics/19779985"
                }, 
                {
                    "tag": "网络延迟", 
                    "tagLink": "https://api.zhihu.com/topics/19553903"
                }
            ], 
            "comments": [
                {
                    "userName": "syng", 
                    "userLink": "https://www.zhihu.com/people/b13ee866aa56aa9e97da95031be093b5", 
                    "content": "设置程序tcp_nodelay选项更合适一些吧？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43614519", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "最简单的理财：定投与资产配置", 
            "content": "<blockquote>最近在读一本理财杂志，整本书都在介绍资产配置，这里有一些想法分享给大家。</blockquote><p>当我们不懂投资的时候，能做的就是把钱存在银行卡上，年轻人会把钱存在余额宝里面。 <br/>当我们有点理财意识的时候，会发现银行的利息少的可怜，余额宝也相对其他理财产品比较低。 <br/>当我们去寻找更大的收益，发现有各种理财产品、P2P、基金、股票，甚至是房地产和数字货币。<br/>面对那么多的投资渠道，发现我们需要学的东西也很多，而且学了皮毛也不敢买入，因为发现大部分都是亏钱的。<br/>于是我们一脸懵逼了，该买什么才能收益最大风险最小呢？</p><p>如果你是理科生的话，会发现我们的目标有点问题。 <br/>最大收益与最小风险是两个维度的，在数学上是个矢量，矢量是不能比大小的。<br/>所以经常会有人问怎么样才能收益最大？ 很多理财产品也都在鼓吹收益有多高都是有问题的。 <br/>在这里我郑重其事的说：只谈收益不谈风险的理财都是耍流氓。</p><p>理财是个大学问，大多数人玩不来的。 <br/>所以有人研究了一下理财产品的历史数据，惊奇的发现了三个重大秘密。<br/>第一个秘密是通过资产配置，可以通过对冲来均摊风险，并可以提高收益。 <br/>第二个秘密是通过定投，可以通过时间来降低风险，并且收益还不错。<br/>第三个秘密是定投和资产配置这两个操作竟然都很简单，并且不需要投入很多时间。</p><p>资产配置用大俗话说就是买多个理财产品。 <br/>但是有个前提，这些理财产品需要没有相关性。相关性指的是这些理财产品是相同的行业或关联的行业。 <br/>因为相关的行业，对应的理财产品风险波动是一样的，这样和买一个是没区别的，起不到对冲的效果。 <br/>那具体买那些理财产品呢？</p><p>tiankonguse研究了不少报表挑选了几个，分享给大家。</p><blockquote>500ETF 代码510500<br/>300ETF 代码510300 <br/>国债ETF 代码511010<br/>华夏亚债 代码001021<br/>标普500 代码513500<br/>纳指ETF 代码513100</blockquote><p>这六个分三类：500ETF和300ETF和国内的股票相关、国债ETF和华夏亚债与国债相关、标普500和纳指ETF与国外的股票相关。 <br/>通过这三类股票，我们就可以起到对冲的作用了。 <br/>至于他们的比例，可以简单点，按金额平均分即可。 <br/>然后每年年末的时候，我们需要对这些资产进行调整，使其金额达到平均的状态。</p><p>接下来我们说说定投。 <br/>定投的操作周期和我们的收入周期有关。 <br/>比如我们每月会发一次工资，定投的操作就是发完工资后，把部分钱买入对应的理财产品。<br/>买入的时候不需要关注一时的价格，可以指定一个策略，比如发完工资第二天13::00买入，如遇节加入后延的第一个工作日。 <br/>至于买的比例，也是平均分。</p><p>还有一个问题可能会有人问：应该用多少的钱来投资呢？<br/>这里有个100岁规则，也就是100减去我们的年龄后的数字就是应该投资的比例。<br/>其他钱放在余额宝就行了。</p><p>最后我们再来聊聊怎么买这些理财产品。 <br/>这些在支付宝或微信是买不到的，只能在股票账号里面买。 <br/>为啥不在支付宝或者微信里面买呢？因为那里面买东西收中介费了。</p><p>这个中介费其实比较高的，什么申购费、赎回费、管理费、托管费，合起来会有不少钱。 <br/>在股票账号里，收的费用就特别低了，不过有个最低5块钱的限制。 <br/>不过我发现有个方法，可以节省这个5块钱，使得购买费用达到最低，以后我会找个时间写篇文章分享给大家。</p><p>再来一个总结吧：以我为例，假设我30岁。 <br/>每月发工资后，30%的工资我会存入余额宝，70%的工资分成三分，在发工资的第二天买入三个理财产品。<br/>每年发完年终奖后，先计算各理财产品需要调整的额度，然后使用70%的年终奖进行买入，使的三个理财产品的金钱还是一样的。</p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><b>推荐阅读：</b><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105997%26idx%3D1%26sn%3Db3cb5478ef590a059b80b7d55bd699f1%26chksm%3Df2b362dcc5c4ebca3c875d8491f55a99077af5b162b03388501b8f4f919d7afc8f2fcd2cfa7c%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">经济危机（一）</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106018%26idx%3D1%26sn%3Df4cbf260502a918c693953fa11656afd%26chksm%3Df2b362f3c5c4ebe5b6e1fa8bdaa5ffc15b29ca0629851f0ff9f775fb144406588e36f8ec8162%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《长尾理论》解释了抖音为啥火了</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105963%26idx%3D1%26sn%3De3502a1968403d82970f854da820a1bb%26chksm%3Df2b3623ac5c4eb2cf17b0b874d33786bf1d210ebf6c7c21232b71edb7e3a2a80649d771573b4%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据脏了怎么办</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读恐怖小说《1984》</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650106005%26idx%3D1%26sn%3D2657dfe60fe28e5f5e610b22e866e4fd%26chksm%3Df2b362c4c5c4ebd218e517d111b4234337a02ce200cb58c9b51d5326c5de804e52259bb1ab49%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">静态库遇到静态库</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p>", 
            "topic": [
                {
                    "tag": "理财", 
                    "tagLink": "https://api.zhihu.com/topics/19555939"
                }, 
                {
                    "tag": "资产配置", 
                    "tagLink": "https://api.zhihu.com/topics/19899018"
                }, 
                {
                    "tag": "理财产品", 
                    "tagLink": "https://api.zhihu.com/topics/19577201"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42746884", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "经济危机（一）", 
            "content": "<blockquote>爆发是迟早的事情，但是什么时候爆发没人知道，影响有多严重也没人知道，我们只知道它迟早会来临，以我们想不到的方式来临。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>一、一本小说</b></h2><p>中国有本很出名的科幻小说，是理科生刘慈欣写的《三体》。 <br/>这本小说可以悟出很多道理，其中一个很出名：你永远不知道地球下一次以什么形式被攻击，因为对方是降维打击，而你根本没见过也没听过这个降维。</p><p>背景是这样：</p><p>地球人第一次遭受外星文明的攻击时，来的是三体文明发送的水滴宇航器。<br/>由于水滴到达需要几百年，人们起初恐惧的以为地球要玩完了。时间久了地球文明竟然习惯这个水滴的到来了。到最后经历了地球技术大爆炸式发展，竟然臆想这个水滴是三体文明害怕而送给地球文明的礼物，认为地球文明是无敌的，和平昌盛是永远的，股票每天上涨是不能停的。<br/>结果大家都猜到了，水滴到来，地球的上万舰队以抢功的心态去迎战，结果瞬间全面溃败。<br/>故事当然没有结束，有英雄人物暂时救了地球。</p><p>经历了这次地球危机，地球人在想象下次被攻击时的场景，做了无数的计划与安排。<br/>但是人们怎么也猜想不到下次攻击的形式，竟然是物理规则降维攻击：三维空间转化为二维空间。<br/>自此，整个三维宇宙都玩完了。</p><h2><b>二、宏观调控</b></h2><p>万恶的资本主义的经济已经发展了上百年了，其中发生了很多次经济危机，有两次相当致命，一个是1929年至1933年二战前的经济危机，一次是2007年到2008年的经济危机。<br/>我国的经济学者梳理了世界各国发生经济危机前后的数据，希望制定一些原则或战略，在经济危机即将发生的时候及时进行干预，避免经济危机。</p><p>比如银行利率的加息减息，就是常用的一种调整策略。 <br/>比如最近的去杠杆也是一种策略。<br/>不过这些策略的实施的结果完全无法预测，美国的那些经济危机就是调整策略时引爆的。 <br/>那中国经常执行这些策略为啥没有发生严重的经济危机呢？ <br/>因为所有的经济因子都是人工控制的，比如农作物强制压价；比如房价强制性不能跌。<br/>虽然各行业没有发生连环崩盘，但是整个盘子都显得低迷不振，这样其实隐藏着一个更大的经济危机。 <br/>爆发是迟早的事情，但是什么时候爆发没人知道，影响有多严重也没人知道，我们只知道它迟早会来临，以我们想不到的方式来临。</p><p>既然我们看不懂现在的经济形势，那只好去看看以前发生经济危机时都发生了什么，也就是相同点与不同点，然后尽量避免因为重复的事情引起经济危机。</p><p>《两次全球大危机的比较研究》这本书不是一本书，而是一个课题研究的合集论文。<br/>这个课题就是研究分析之前的两次经济危机到底发生了什么事，为啥地球上有这么多人，竟然没人没政府能够阻止这件事。<br/>这里分享一下该合集的第一篇论文《两次全球大危机的比较》。</p><h2><b>三、曾经危机的不同点</b></h2><p>1.人口的结构不同</p><p>人口结构特别是年龄结构对经济社会发展具有十分重要的影响，对政府制订公共政策也会产生重要的作用。</p><p>以美国为例，1929年65岁以上人口占总人口的5.3%，2007年则占12.6% （数据来源：美国国家统计局）。</p><p>福利化制度和人口年龄因素造成劳动力的市场适应性减弱，人们更乐于维持现状而不是变革。<br/>另外，人口越多，社会会越复杂，经济的稳定性越高，但是发生意外时，影响也越严重。</p><p>2.技术条件不同</p><p>大萧条发生在第二次技术革命之后，而本次危机发生在第三次技术革命之后，在两次技术革命之后，人类技术进步的程度大大提高。</p><p>本次金融危机是在信息化技术高度发达条件下产生的，这会加重风险的扩散和共振，使这次危机有更快更广的传播范围和更明显的同步市场波动。</p><p>3.发达国家的经济和社会制度发生了进化</p><p>本次国际金融危机发生后，基于对上次大萧条的认识，主要发达国家政府都对经济进行了快速的直接干预，在较短时间内改变了经济自由落体的状态。</p><p>4.全球化的程度不同</p><p>1928年全球贸易占世界GDP的16.7%，2007年则占51.6% （数据来源：商务部网站）。</p><p>20世纪80年代以来全球对外直接投资发展迅猛，1980年总额为5190亿美元，2007年达到18330亿美元，年均增长5%，高于同期全球GDP 3.4%的增长率（数据来源：IMF网站，Wind数据库）。</p><p>5.新兴国家崛起和全球经济格局不同</p><p>1929年美、欧、日以外的亚非拉国家GDP合计占世界GDP的23.3%，2010年则占到42.6%，危机期间的2009年金砖四国对全球经济增长的贡献达90% （数据来源：《世界经济千年史》，人民网等）。</p><h2><b>四、曾经危机的相同点</b></h2><p>1.两次危机的共同背景是都在重大的技术革命发生之后。</p><p>长周期理论认为，技术创新引起繁荣，繁荣又是萧条的原因，重大的技术革命引起大繁荣，毫无疑问也会引起大萧条，这是历史周期率的重要表现。</p><p>2.在危机爆发之前，都出现了前所未有的经济繁荣，危机发源地的政府都采取了极其放任自流的经济政策。</p><p>十分明显的是，发达国家已经出现了制造业的衰落，越来越多的劳动者已经无法适应产业结构的快速变化，过度负债的经济模式已经充满风险。</p><p>3.收入分配差距过大是危机的前兆。</p><p>两次危机发生前的另一个共同特点，是较少数的人占有较多的社会财富。<br/>在全球化和互联网全面发展的过程中，世界经济形成了相互依赖的三角形循环，新兴市场国家成为全球制造中心，资源富足国家提供原材料和能源，发达国家通过负债消费，拉动新兴市场国家产能利用。</p><p>4.在公共政策空间被挤压得很小的情况下，发达国家政府所采取的民粹主义政策通常是危机的推手。</p><p>欧盟国家从20世纪90年代末以来，税收占GDP的比重持续下降，但社会福利支出占GDP的比例持续上升，社会福利安排出现过度化倾向，但绝大部分政治家难有决心和胆量压缩福利。</p><p>5.大众的心理都处于极端的投机状态，不断提出使自己相信可以一夜致富的理由。</p><p>改变其社会地位的急切心情，使大众都开始追求一夜暴富，人们宁愿相信各种投机奇迹，人类本性中的贪婪和健忘达到前所未有的程度，没有多少人可以经受泡沫产业的诱惑，社会心态浮躁具有普遍性，在宽松货币环境和以提高杠杆率为实质的金融创新助推下，大量举债进行高风险投机，产生了巨大的资产泡沫，大萧条前主要是股市泡沫，这次危机前是房地产泡沫。</p><p>当经济处于过度繁荣状态的时候，没有人不相信泡沫会继续膨胀，人们不是找出理由使自己理性，而是找出理由使自己相信盲目冒险的正确性。</p><p>由此我们也可以提出一个相关的质疑：经济学关于理性人的假设是否具有永恒性？</p><p>6.两次危机都与货币政策相关联。</p><p>在两次危机之前，最方便的手段是采取更为宽松的货币信贷政策。</p><p>7.危机爆发后，决策者总是面临着民粹主义、民族主义和经济问题政治意识形态化的三大挑战，市场力量不断挑战令人难以信服的政府政策，这使得危机的形势变得更为糟糕。</p><p>8.危机的发展有特定的拓展模式，在它完成自我延伸的逻辑之前，不可轻言经济复苏。</p><p>9.危机只有发展到最困难的阶段，才有可能倒逼出有效的解决方案，这一解决方案往往是重大的理论创新。</p><p>10.危机具有强烈的再分配效应，它将导致大国实力的转移和国际经济秩序的重大变化。</p><h2><b>尾记</b></h2><p>经济学是个奇怪学科，就像天气学科一样。表面上看我们精确的预测了天气，甚至可以人工干预天气（人工降雨），但是可能大洋彼岸的蝴蝶扇下翅膀，地球这边就是一场大海啸，此时人工再怎么干预都无能为力了，好可怕！</p><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><b>推荐阅读：</b><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105993%26idx%3D1%26sn%3Dfb6854b20ce5c87b85139423ecb34fa8%26chksm%3Df2b362d8c5c4ebce4acdbde8006f54fd7a8587cdb01f1d6fefeecd29a132f24f7d0fc7dccd00%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读书《淘宝技术这十年》</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105959%26idx%3D1%26sn%3D7995bcf98e8a7ced38a26808dfaada2a%26chksm%3Df2b36236c5c4eb20fb778924d3ce7c43c37aba5fa4ee6360d3d37e87c4163d2ab2762baf7495%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">那些营销套路（初级版）</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105963%26idx%3D1%26sn%3De3502a1968403d82970f854da820a1bb%26chksm%3Df2b3623ac5c4eb2cf17b0b874d33786bf1d210ebf6c7c21232b71edb7e3a2a80649d771573b4%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据脏了怎么办</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读恐怖小说《1984》</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105971%26idx%3D1%26sn%3Da0165d411429b24dcee6bfe8970cd764%26chksm%3Df2b36222c5c4eb3419a63a05dfc246b552b93adf588d77c231dad1419864e8910fa345a2919e%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">韭菜的理财历程</a><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/6DmBmVfEaAoXrRP692z6\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">weixin.qq.com/r/6DmBmVf</span><span class=\"invisible\">EaAoXrRP692z6</span><span class=\"ellipsis\"></span></a> (二维码自动识别)</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "中国经济", 
                    "tagLink": "https://api.zhihu.com/topics/19565985"
                }, 
                {
                    "tag": "经济危机", 
                    "tagLink": "https://api.zhihu.com/topics/19592475"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42427357", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "读书《淘宝技术这十年》", 
            "content": "<blockquote>书中有很多值得品味思考的内容，这里分享给大家。</blockquote><h2><b>说在前面</b></h2><p>我之前的文章有个抽奖活动，奖品是微信读书的《淘宝技术这十年》，中奖者是air9，请加我微信，书分享给你，另外会拉你进我的微信群。<br/>另外，另一个送书活动还在继续，送的电子书是《阿里巴巴正传》，感兴趣的可以去上篇文章 <a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读恐怖小说《1984》</a> 参与。<br/>也有人提议可以送实体书，目前还没有遇到新的非常好的值得读的实体书，等遇到了会送给大家。</p><p>《淘宝技术这十年》这本书这几天我又读了一遍，读书笔记都发在星球的读书笔记，这里整理一部分汇总为文章分享出来。<br/>这篇文章末尾分享了星球的七天免费体验卡，大家可以免费体验一下，里面没有高大上的长篇道理，但有混迹于互联网世界的一个底层人物的所学所思。</p><h2><b>题记</b></h2><p>四年前也就是2014年的时候我就看过《淘宝技术这十年》这本书，那时候看的是pdf电子书。如今微信读书有这本书了，再看一遍。<br/>书中写了淘宝的发展历程，里面提到的技术值得都去了解一下，并搭建一个实例，实际使用一下，可以学到很多东西的。<br/>另外最后一章的访谈，有些回答还是有借鉴价值的，值得一读。</p><h2><b>关于创业</b></h2><p>子柳：现在有很多人出去创业，作为一个曾经创过业的技术人员，你有什么看法？<br/>小马：很多人创业是因为公司变得越来越大，有很多流程和规章制度的限制，这样自己发挥的空间越来越小。但是真的到社会中创业时会发现限制同样很多，你同样要面临税务局、工商局、商标、公司注册、股东关系、员工管理、同行竞争等问题，这跟你在公司中工作并没有本质的不同。所以说创业其实是一种心态，你用旺盛的精力、饱满的热情和坚定的信念去克服一个又一个的困难，这就是创业。到外面去创业和在一个大公司里创业，我个人觉得并没有本质的区别。<br/>当然，如果你不认可公司整体的方向，或者你不认可这个行业，你有一个理想去打造一个新的天地，公司也应该有这种胸怀鼓励你去创业。</p><h2><b>关于撩妹</b></h2><p>子柳：作为一个技术男，你是怎么吸引到老婆的？<br/>放翁：跟我老婆认识到结婚，也是一件蛮奇怪的事情。怎么奇怪呢？就是在东方通信的时候，有人给我介绍女朋友，是一个女孩子的同学，她帮我张罗，但我不喜欢她的同学，拒绝掉了。后来反倒越来越喜欢帮我张罗这位，然后就……哈哈。我老婆脾气很好，我很喜欢。要说他看中我的应该是我还比较实在一点，感觉比较可靠吧。</p><h2><b>关于学习</b></h2><p>子柳：你每天有多少时间用于编码？多少时间学习？<br/>毕玄：现在如果没有什么特殊情况的话，我会花很多时间看技术方面的文章或者图书，写代码的时间可能每天只有两三个小时。每隔一段时间会去想一想将来干什么比较好，因为写代码时间会过得很快，要经常跳出来想一想。</p><h2><b>公司的风格</b></h2><p>子柳：以上几个企业的技术风格有什么不同？<br/>正祥：就我在职期间的感受——联想要求研发人员要了解市场，跟着一个产品从市场需求到开发，再到小批量生产、真正量产等整个环节。微软的研发模式比较重，流程和审核机制非常严格，每一行代码都要审核很多遍，做事很稳，但很慢，我想这也是它在互联网市场很难施展的一个原因。我觉得百度其实不如淘宝重视技术，KPI导向的文化很重，各部门之间的协作和配合比较难（这一点淘宝要好不少），不同部门、不同项目的开发人员做了不少有差别但其实比较类似的东西，看起来个体效率高，但整体效率未必高，这可能是百度加班很严重的原因之一。</p><h2><b>关于知识</b></h2><p>说到这里，顺便提一个概念——知识管理，我不太认同这个概念，在传统行业，知识或许可以管理，但在互联网企业里，知识的更新迭代非常频繁，等你理出来刚要管的时候，它已经失效了。<br/>我认为互联网行业的知识不是要去管理的，而是要让隐性的知识显性化，在它的生命周期里迅速传播出去。我们不需要等它沉淀，只需要让足够多的知识流动起来，就能创造巨大的价值。</p><h2><b>关于牛人</b></h2><p>当时除了Sun公司的人和淘宝的人，还来了一位标志性的人物@fenng，他是这个项目的DBA，记得他刚来杭州时，家里要装宽带，运营商服务不周到，被他骂了好久。后来（2010年）他在微博上大战中国电信已经相当有经验了。<br/>还记得几个DBA在做数据迁移时候的囧样，数据结构已经面目全非了，@正牌七公、@fenng、多隆、鲁肃搞了三天三夜。</p><blockquote>再牛逼的人，当时都是苦逼的走过来的。</blockquote><h2><b>关于成功</b></h2><p>很多东西，不是你努力就能成功的，也许应了那句话“谋事在人，成事在天”。</p><h2><b>尾记</b></h2><p>同一本书，不同阶段阅读看到的东西都会不同。<br/>四年前我阅读的时候，只看到了前面那些技术术语：从什么技术迁移到什么技术，引入什么框架，实现什么中间件等。对于后面的访谈感觉说的太抽象，全是比较虚而不实用的话题。<br/>四年后，我看到的更多的是后面的访谈，有了项目经验，觉得后面的访谈说的很有道理，很有价值。</p><p>另外，最近朋友圈都在转发美团写的《这个工程师的十天精进原则》，这类文章就和这本书的访谈类似，初入职场的人感觉写很虚，没有干货；职场待了多年的老司机，看了这篇文章会感同身受，称赞写的很好。不过虽然这些道理老司机都懂，但实际场景的时候却发现还是做不到，由此会更加赞同书中或文章中的内容了。</p><p>最后，就说这么多吧。</p><p>下面是星球的免费体验卡。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-982a5758270f9be42112e6c84b2fa66b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"1149\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-982a5758270f9be42112e6c84b2fa66b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;714&#39; height=&#39;1149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"1149\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-982a5758270f9be42112e6c84b2fa66b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-982a5758270f9be42112e6c84b2fa66b_b.jpg\"/></figure><hr/><p>本文首发于公众号：天空的代码世界，微信号：tiankonguse-code。</p><p><b>推荐阅读：</b><br/></p><ul><li><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105959%26idx%3D1%26sn%3D7995bcf98e8a7ced38a26808dfaada2a%26chksm%3Df2b36236c5c4eb20fb778924d3ce7c43c37aba5fa4ee6360d3d37e87c4163d2ab2762baf7495%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">那些营销套路（初级版）</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105963%26idx%3D1%26sn%3De3502a1968403d82970f854da820a1bb%26chksm%3Df2b3623ac5c4eb2cf17b0b874d33786bf1d210ebf6c7c21232b71edb7e3a2a80649d771573b4%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据脏了怎么办</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105989%26idx%3D1%26sn%3D3b9079854abe25f72e8602a1ad9bda1d%26chksm%3Df2b362d4c5c4ebc26c0b5190e811a08b40570ef81e483adcb06f225e824c32ce23422acb9223%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">读恐怖小说《1984》</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105984%26idx%3D1%26sn%3D78c3b70353650a645af9a5ebd7a43eee%26chksm%3Df2b362d1c5c4ebc7033393860f6024b8d3f3c7ac2bdc6a1f54914e09802855dd7feb7b239136%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中年危机笔记与思考</a></li><li><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105971%26idx%3D1%26sn%3Da0165d411429b24dcee6bfe8970cd764%26chksm%3Df2b36222c5c4eb3419a63a05dfc246b552b93adf588d77c231dad1419864e8910fa345a2919e%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">韭菜的理财历程</a><br/></li></ul><p>❖ 欢 迎 分 享 到 朋 友 圈 哦 ❖</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "阅读", 
                    "tagLink": "https://api.zhihu.com/topics/19550564"
                }, 
                {
                    "tag": "读书笔记", 
                    "tagLink": "https://api.zhihu.com/topics/19590861"
                }, 
                {
                    "tag": "程序员修养", 
                    "tagLink": "https://api.zhihu.com/topics/19573884"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25855753", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 8, 
            "title": "字符串hash函数的本质", 
            "content": "<h2>前言</h2><p>以前在《<a href=\"https://link.zhihu.com/?target=http%3A//github.tiankonguse.com/blog/2014/11/07/memcached-string-hash.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">memcached 源码阅读之 字符串 hash 与 搜集的一些 字符串 hash</a>》中已经记录了一些hash函数. <br/>现在看其本质算法.</p><h2>本质</h2><p>如果对算法不感兴趣的人, 只需要看看这个小节就行了, 下面小节的都是经典书籍与人物的算法,都是本质算法穿上了一个马甲. </p><p><br/>hash函数的本质是扫描字符串过程中, 根据之前的结果, 当前位置,当前字符的值使用一个公式计算出当前结果. </p><p><br/>当然稍微复杂的hash算法会考虑之前所有的的结果,位置以及字符, 甚至会迭代多次.</p><blockquote><p>这篇文章提到了一些书籍, 系统和一些人, 如果想要任何书籍的人都可以加公众号要相关书籍.</p></blockquote><br/><p>核心代码如下:</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-32ba83e9bdb938b67063e1ee0a04f27e_b.png\" data-rawwidth=\"344\" data-rawheight=\"115\" class=\"content_image\" width=\"344\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;344&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"344\" data-rawheight=\"115\" class=\"content_image lazy\" width=\"344\" data-actualsrc=\"https://pic3.zhimg.com/v2-32ba83e9bdb938b67063e1ee0a04f27e_b.png\"/></figure><br/><br/><h2>BKDR Hash</h2><p>在<em>Brian Kernighan</em>与<em>Dennis Ritchie</em>的《<em>The C Programming Language</em>》一书被展示而得名，是一种简单快捷的hash算法，也是Java目前采用的字符串的Hash算法。</p><br/><p>有人说将乘法分解为位运算及加减法可以提高效率. <br/>但其实在Intel平台上，CPU内部对二者的处理效率都是差不多的； <br/>在ARM这类RISC系统上由于ARM内部使用<em>Booth’s Algorithm</em>来模拟32位整数乘法运算，它的效率与乘数有关.</p><br/><figure><noscript><img src=\"https://pic3.zhimg.com/v2-4e0e27aec6ee6ded3365f9da4566543a_b.png\" data-rawwidth=\"641\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-4e0e27aec6ee6ded3365f9da4566543a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"641\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-4e0e27aec6ee6ded3365f9da4566543a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4e0e27aec6ee6ded3365f9da4566543a_b.png\"/></figure><h2>SDBM Hash</h2><p>在开源项目<em>SDBM</em>（一种简单的数据库引擎）中被应用而得名，它与BKDRHash思想一致，只是种子不同而已。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-5ed90a77a28cec6e7fedf41993286972_b.png\" data-rawwidth=\"621\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb\" width=\"621\" data-original=\"https://pic3.zhimg.com/v2-5ed90a77a28cec6e7fedf41993286972_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;621&#39; height=&#39;252&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"621\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"621\" data-original=\"https://pic3.zhimg.com/v2-5ed90a77a28cec6e7fedf41993286972_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5ed90a77a28cec6e7fedf41993286972_b.png\"/></figure><br/><h2>RS Hash</h2><p>因<em>Robert Sedgwicks</em>在其《<em>Algorithms in C</em>》一书中展示而得名。</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-9baf1cc19b425a3c50bf923db354c670_b.png\" data-rawwidth=\"442\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb\" width=\"442\" data-original=\"https://pic1.zhimg.com/v2-9baf1cc19b425a3c50bf923db354c670_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;442&#39; height=&#39;282&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"442\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"442\" data-original=\"https://pic1.zhimg.com/v2-9baf1cc19b425a3c50bf923db354c670_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9baf1cc19b425a3c50bf923db354c670_b.png\"/></figure><br/><h2>AP Hash</h2><p>由<em>Arash Partow</em>发明的一种hash算法。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-9e2d76e13311e91ac9604fc11ceff746_b.png\" data-rawwidth=\"615\" data-rawheight=\"367\" class=\"origin_image zh-lightbox-thumb\" width=\"615\" data-original=\"https://pic3.zhimg.com/v2-9e2d76e13311e91ac9604fc11ceff746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;615&#39; height=&#39;367&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"615\" data-rawheight=\"367\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"615\" data-original=\"https://pic3.zhimg.com/v2-9e2d76e13311e91ac9604fc11ceff746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9e2d76e13311e91ac9604fc11ceff746_b.png\"/></figure><br/><h2>JS Hash</h2><p>由<em>Justin Sobel</em>编的一种hash算法。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-bc6b0ad1bc7432b15ed061eb44d8ba72_b.png\" data-rawwidth=\"509\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"509\" data-original=\"https://pic3.zhimg.com/v2-bc6b0ad1bc7432b15ed061eb44d8ba72_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;509&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"509\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"509\" data-original=\"https://pic3.zhimg.com/v2-bc6b0ad1bc7432b15ed061eb44d8ba72_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bc6b0ad1bc7432b15ed061eb44d8ba72_b.png\"/></figure><br/><h2>DEK hash</h2><p>本算法是由于<em>Donald E. Knuth</em>在《<em>Art Of Computer Programming Volume 3</em>》中展示而得名。</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-7b1a975a4626202c21f137fce5c04daa_b.png\" data-rawwidth=\"530\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic3.zhimg.com/v2-7b1a975a4626202c21f137fce5c04daa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;252&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"530\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic3.zhimg.com/v2-7b1a975a4626202c21f137fce5c04daa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7b1a975a4626202c21f137fce5c04daa_b.png\"/></figure><br/><h2>FNV Hash</h2><p><em>Unix system</em>系统中使用的一种著名hash算法，后来微软也在其<em>hash_map</em>中实现。</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-1196f90c27d9914b7db7c95c55879fb5_b.png\" data-rawwidth=\"472\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"472\" data-original=\"https://pic2.zhimg.com/v2-1196f90c27d9914b7db7c95c55879fb5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;472&#39; height=&#39;283&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"472\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"472\" data-original=\"https://pic2.zhimg.com/v2-1196f90c27d9914b7db7c95c55879fb5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1196f90c27d9914b7db7c95c55879fb5_b.png\"/></figure><br/><h2>DJB Hash</h2><p>由Daniel J. Bernstein教授编的一种hash算法。</p><figure><noscript><img src=\"https://pic2.zhimg.com/v2-bda9b18f0a8859e19738be399d81c719_b.png\" data-rawwidth=\"524\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb\" width=\"524\" data-original=\"https://pic2.zhimg.com/v2-bda9b18f0a8859e19738be399d81c719_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;524&#39; height=&#39;496&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"524\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"524\" data-original=\"https://pic2.zhimg.com/v2-bda9b18f0a8859e19738be399d81c719_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bda9b18f0a8859e19738be399d81c719_b.png\"/></figure><br/><h2>PJW Hash</h2><p>本算法是基于AT&amp;T贝尔实验室的<em>Peter J. Weinberger</em>的论文而发明的一种hash算法。</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-914ee75e5aa3e72bc99369ac0c6a70a3_b.jpg\" data-rawwidth=\"725\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-914ee75e5aa3e72bc99369ac0c6a70a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;725&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"725\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"725\" data-original=\"https://pic4.zhimg.com/v2-914ee75e5aa3e72bc99369ac0c6a70a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-914ee75e5aa3e72bc99369ac0c6a70a3_b.jpg\"/></figure><br/><h2>CRC32 hash</h2><p>这个就不需要介绍了.</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-6763efabd91d3e5ebb5348c4f5fa6112_b.png\" data-rawwidth=\"694\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic3.zhimg.com/v2-6763efabd91d3e5ebb5348c4f5fa6112_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;694&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"694\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"694\" data-original=\"https://pic3.zhimg.com/v2-6763efabd91d3e5ebb5348c4f5fa6112_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6763efabd91d3e5ebb5348c4f5fa6112_b.png\"/></figure><br/><h2>参考资料</h2><ul><li><p><a href=\"https://link.zhihu.com/?target=http%3A//www.partow.net/programming/hashfunctions/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">General Purpose Hash Function Algorithms</a></p></li></ul><br/><h2>其他文章</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105156%26idx%3D1%26sn%3D3b59e3339973aab54ed29d2d86d36f9e%26chksm%3Df2b36f15c5c4e603ce3b65570443433077d3058e66348df62572318db9fd4d1b6809c4f3e6ea%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UNION架构篇</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105193%26idx%3D1%26sn%3Da4066b2994b59e78de846137344228c5%26chksm%3Df2b36f38c5c4e62efc91687c2d29e9f8e40368d660de85d6e01018525e7a2f160152a35869c1%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UNION优化篇</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105195%26idx%3D1%26sn%3D7c1d170a93c8015d5a17d932248d1bf3%26chksm%3Df2b36f3ac5c4e62c87f14792abacb96ab2fa996254619ae6785583ef54687eace0eff2db8d18%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UNION诞生篇</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105192%26idx%3D1%26sn%3D3bc4e7f70ba0be17e7db7ed6f0fa29b5%26chksm%3Df2b36f39c5c4e62f2eeca514e1ec7634145e04bc5af266dd1aa9e6eac2df63088f9d42a6f8c5%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">union运营篇</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105090%26idx%3D1%26sn%3D979daee3e20b01a81f396ca80bc89c5b%26chksm%3Df2b36f53c5c4e6457ef2daf2795c6fef6fd6f34882429f5e73f17ac27ad54b26ae32d63125a8%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">谈谈cache</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105161%26idx%3D1%26sn%3D3972fc97bf19a091a43da872022215e4%26chksm%3Df2b36f18c5c4e60ef3af29c0e5c848efa283bd27c153d8507a4f14ecd20545986493719d87f5%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浪潮之巅</a><a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzI2NDA0NDM1MA%3D%3D%26mid%3D2650105174%26idx%3D1%26sn%3D35e1e69fdcea3a0832eaac7e2a299c2e%26chksm%3Df2b36f07c5c4e6115ab5c2d7f4cd9aa59ac6f545b9bb2b5583e6426bae71d4f4056a44243628%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">排名算法</a></p><br/><h2>关于作者</h2><p>曾是一名ACMer, 现在是鹅长视频部门的后台开发</p><p>这里主要记录工作中的技术架构与经验，计算机相关的技术，数学、算法、生活上好玩的东西</p><p>长按二维码关注作者, 了解作者发布的最新好玩的东西</p><p>aHR0cDovL3dlaXhpbi5xcS5jb20vci82RG1CbVZmRWFBb1hyUlA2OTJ6Ng== (二维码自动识别)</p>", 
            "topic": [
                {
                    "tag": "算法与数据结构", 
                    "tagLink": "https://api.zhihu.com/topics/19625716"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "哈希函数", 
                    "tagLink": "https://api.zhihu.com/topics/19631819"
                }
            ], 
            "comments": [
                {
                    "userName": "阁刚广志", 
                    "userLink": "https://www.zhihu.com/people/956e655f3038f1a3737a10d64cd81b8c", 
                    "content": "<p>大佬，能具体讲讲某一个hash算法的原理吗？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19768673", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "【百度之星2014~复赛 解题报告~正解】The Query on the Tree", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D674\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~复赛 解题报告~正解】The Query on the Tree</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a>的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D674\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~复赛 解题报告~正解】The Query on the Tree</a></p><br/><h2>前言</h2><p>昨天写了　<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D673\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Query on the Tree</a>　的解题报告，但是遗留下一个问题，不能算是完美解决这道题．</p><p>因为如果精心构造数据的话，昨天的题解还是会被卡住的．</p><p>今天中午睡觉的时候突然想起一个不会被卡住的方法．</p><p>但是由于早上玩了一会类似与宠物消消的弱智游戏，于是怎么也停不下来了．</p><p>一个下午的时光也浪费在了这个弱智游戏上．</p><p>到了晚上，手机终于没电了，于是来写写这道题的完美解决方法．</p><p>这样无论怎么构造数据，tiankonguse都不用担心程序超时了．</p><br/><h2>正文</h2><br/><h3>题意</h3><br/><div class=\"highlight\"><pre><code class=\"language-text\">　　有一棵树，树的每个点有点权，每次有三种操作：\n　　1. Query x 表示查询以x为根的子树的权值和。\n　　2. Change x y 表示把x点的权值改为y(0&lt;=y&lt;=100)。\n　　3. Root x 表示把x变为根。\n　　现在度度熊想请更聪明的你帮助解决这个问题。</code></pre></div><br/><h3>背景</h3><br/><br/><p>这篇记录和昨天那一篇紧密相连，建议看看那个记录．</p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D673\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">传送门</a>（<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D673\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~复赛）解题报告】The Query on the Tree</a>）</p><br/><br/><h3>背景简述</h3><br/><p>对于这道题，首先需要对树按１为根优先编号．</p><p>编号的时候记录子树的权值和以及子树的编号范围．</p><p>这样设置根的一般复杂度是O(1), 修改的一般复杂度是O( log( n ) ), 查询的一般复杂度也是　O( log( n ) ).</p><p>修改的最坏复杂度是O( n ), 我们可以使用线段树来优化到O( log( n ) ).</p><p>对于查询分了三部分，其中有一部分最坏情况下复杂度也是　O( n ).</p><p>当时往二分优化上想了，但是目前的信息不满足二分的条件，所以二分不了．</p><br/><h3>二分优化查询</h3><br/><p>假设目前查询的是x, root 是根，　y 是x的某个儿子，　root 在　y 的那个子树上．</p><br/><h4>问题１：我们要二分搜索什么？</h4><br/><p>我们要搜索y这个节点．</p><br/><h4>问题２：搜索的序列有递增或递减的特增吗？</h4><br/><p>我们要搜的区间是　left[x]到　left[root], 其中　left[x]　最小，left[y] 不能确定在那个地方，也不知道　left[y] 的值．</p><br/><h4>问题三：有人说可以使用欧拉序列加树状数组做这道题，是吗？</h4><br/><p>欧拉序列是什么呢？</p><p>原来欧拉序列也对树dfs编号了，只不过进入每个儿子的时候都对当前子树根编号，最后结束时再遍一次号，储存的信息貌似很丰富．</p><br/><h4>问题四：如果我们也使用欧拉序列或者欧拉序列的思想，可以二分吗？</h4><br/><p>貌似可以．</p><p>因为这时x的每个儿子前面一定有一个编号是x.</p><p>而我们需要的是　root 前面的第一个　x.</p><p>又由于　x 是区间内最小值，所以通过二分这个最小值就可以搜到　y 了．</p><br/><h4>问题五：最坏复杂度怎么呀？</h4><br/><p>由于需要二分，所以最少是　O( log( n ) ).</p><p>每次都需要判断，所以这个我们需要通过线段树来优化，可以优化到　log( n ).</p><p>这样综合复杂度就是　O( log( n ) ^ 2 )</p><br/><h4>问题六：那你能实现吗？</h4><br/><p>这个当然可以，就是一个二分加线段树．</p><br/><h4>总结</h4><p>针对昨天遗留下的问题，这里简单的总结一下解决方法．</p><p>遗留的问题是查询的时候，如果root是查询节点x的子孙时，我们需要找到x的某个儿子y，这个儿子y还是root的祖先．</p><p>这个查找过程用昨天的方法最坏复杂度是O( n ) 的.</p><br/><p>这里我找到一个方法：对树dfs编号的时候，每次在儿子前面都添加一个根节点，即把用根节点把各个儿子为根的子树分开．</p><p>这样我们就可以使用二分查找x的儿子y了．</p><p>因为root前面第一个编号为x的节点和y前面第一个编号为x的节点是相同的．</p><p>而且第一个编号为x的节点的下一个节点就是y节点．</p><br/><p>由于x还是整个区间的最小值，所以我们就可以通过二分区间最小值来找到root前面的第一个编号为x的节点了．</p><br/><h3>代码</h3><p>二分优化查询(其他的暴力的代码)<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tiankonguse/ACM/blob/master/astar/2014/3/2.3.cpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM/astar/2014/3/2.3.cpp at master · tiankonguse/ACM · GitHub</a></p><p>完整版的代码(两个线段树写为一个了)：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tiankonguse/ACM/blob/master/astar/2014/3/2.4.cpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM/astar/2014/3/2.4.cpp at master · tiankonguse/ACM · GitHub</a></p><br/><p>参考</p><p>无</p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19767275", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "【百度之星2014~复赛）解题报告】The Query on the Tree", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D673\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> 【百度之星2014~复赛）解题报告】The Query on the Tree</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D673\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~复赛）解题报告】The Query on the Tree</a></p><br/><h2>前言</h2><p>这几天把毕业答辩的事弄完了，于是买票出来玩，结果周六是百度之星的复赛，于是我就没有办法来做比赛了，不过看了看题，目测可以过我两三道题．</p><p>今天已经是比赛的第二天了，我还一直没有时间来A掉这些题，今晚抽空先把最简单的线段树那道题A了再说．</p><br/><h2>正文</h2><h3>题意</h3><p>题目说的很清楚了，自己看吧．</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">有一棵树，树的每个点有点权，每次有三种操作：\n　　1. Query x 表示查询以x为根的子树的权值和。\n　　2. Change x y 表示把x点的权值改为y(0&lt;=y&lt;=100)。\n　　3. Root x 表示把x变为根。</code></pre></div><h3>分析</h3><br/><p>这道题的数据起始很弱的．</p><p>我最初的想法就可以把这道题过掉．</p><br/><h4><strong>最初的想法</strong></h4><br/><p>首先对这个树按1为根dfs根优先编号，这个应该没有什么疑问．</p><p>编号的好处是一个子树变为了一个连续的区间．</p><p>编号的时候保存一下这个子树的编号区间，保存在子树的根上．</p><p>编号的时候顺便计算一下子树的权值和．</p><p>编号的时候记录一下一个节点的父节点．</p><br/><p><strong>修改操作</strong></p><br/><p>先说说修改操作，修改某个节点时，就算出这个节点应该增加多少，然后从这个节点开始更新，一直更新到根１．</p><p>平均复杂度　O( log(n) )</p><p>最坏复杂度　O( n )</p><br/><p><strong>设置根</strong></p><br/><p>这里我们需要一个变量来表示目前的根是那个节点，比如使用root变量，默认值是１．</p><p>设置根只需要把根变量更新一下即可．</p><p>平均复杂度　O( 1 )</p><p>最坏复杂度　O( 1 )</p><br/><p><strong>查询操作</strong></p><p>查询的时候分三种情况：</p><p>１．查询的节点是目前的根　</p><p>这个时候答案显然是整个树的权值和，返回　根１的权值和即可．</p><br/><p>２．目前的根不是查询的节点的某个子孙(即根不在查询的子树里面)</p><p>这个时候，答案和根是１的情况相同，及直接返回查询节点的权值和即可．</p><p>怎么判断根是不是查询节点的子孙呢？</p><p>平常的方法是用　LCA 查询，这里我直接使用子树区间来判断即可．</p><br/><p>３．目前的根是查询节点的某个子孙．</p><p>这个时候，我们想象一下，我们拿起根，查询节点的子孙有那些呢？</p><p>即那些会在查询节点的下面呢？</p><p>假设查询节点是　x, 　x的一个儿子是y, 根是y的一个子孙(也可能是y).</p><p>这个时候，我们拿起根，x　应该变成　y 的儿子了吧．</p><p>这时树的权值应该是　x 原先的权值和　－　y 节点的权值和　＋　不在x子树区间的全职和．</p><p>然后，我们可以发现　x 原先的权值和　＋　不在x子树区间的权值和　＝　整个树的权值和．</p><p>故最终答案是　整个树的权值和　－　y节点的权值和．</p><br/><p>问题：怎么找到y节点．</p><p>有两个方法：</p><p>１．枚举x的儿子来判断</p><p>２．从根不断的找父亲来判断．</p><p>由于题意没有说最多儿子有多少个，所以第一个方法最坏情况下为　O( n ) （很多儿子）</p><p>对应的，第二个方法最坏情况下也是　O( n )　(树退化为链表).</p><br/><p>不过我们不用管最坏情况，先这样实现了再说．</p><br/><p><strong>综合操作复杂度</strong>：log(n)</p><br/><h4>线段数优化</h4><p>首先对于修改操作，线段树优化后可以使最坏情况达到　O( log( n ) ).</p><p>对于查询操作，由于需要知道　x 的那个儿子　y, 这个我目前没有想到　O( log( n ) ) 的方法．</p><p>学弟说那只能使用二分了．</p><p>但是怎么二分呢？</p><p>发现二分不了，不过可以使用随机算法来优化找儿子的效率．</p><p>起初我们是遍历x的所有儿子，这里我们随机挑一个儿子来寻找．这也算是一个比较好的优化方法吧．</p><br/><br/><h3>代码</h3><p>暴力版代码　<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tiankonguse/ACM/blob/master/astar/2014/3/2.2.cpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM/astar/2014/3/2.2.cpp at master 路 tiankonguse/ACM 路 GitHub</a>(比较简洁)</p><p>线段树优化版代码　<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tiankonguse/ACM/blob/master/astar/2014/3/2.cpp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM/astar/2014/3/2.cpp at master · tiankonguse/ACM · GitHub</a></p><p>对于上面说的几个方法我只实现了两个，其他的都很简单，有兴趣的朋友可以尝试一下．</p><br/><h2>参考</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/hongrock/article/details/27839237\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://blog.csdn.net/hongrock/article/details/27839237(这个参考主要用于确认暴力不会超时，如果精心构造数据，这个方法会超时的)</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19762921", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "【百度之星2014~初赛解题报告】", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D671\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛解题报告】</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D671\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛解题报告】</a></p><br/><h2>前言</h2><p>最近要毕业了，有半年没做比赛了．<br/>这次参加百度之星的初赛娱乐一下．<br/>现在写一下解题报告．</p><h2>正文</h2><p>这次比赛还是四道题，最后我只做出一道来，不过还是进级了，只可惜复赛那天有事，不能做复赛了．</p><br/><p>还是先看看四道题的类型吧</p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D666\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">1．Scenic Popularity　暴力　复杂度O( 100 * 100 * 10000 ) 或者O( T * K * R)</a><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D672\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">线段树</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D667\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2．Chess　DP 复杂度　O(n^2)</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D670\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">３．　Best Financing　DP 复杂度O(n)</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D668\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">4．JZP Set　数论或DP 复杂度　O(n * log(n))</a></p><br/><h3>第一题　Scenic Popularity</h3><p>第一题过的人最多．</p><p>这道题的正解我还不知道．</p><p>我是预处理有暴力过的，后来和别人讨论起来，有的直接暴力，有的线段树，有的更高级数据结构了．</p><p><strong>题意：</strong>n个点，有些点的值固定，没固定的点的值是离自己较近的固定点的值，刚好在中间则取最大的值．</p><p>然后有一系列操作，这些操作可能会修改某个固定点的值，然后问小于某个值的点的个数．</p><p><strong>方法</strong>：暴力或线段树</p><p><strong>注意事项</strong>：线段树有多种方法，对于这道题怎么写怎么过．</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D666\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Scenic Popularity</a></p><p><strong>线段树版的分析</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D672\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告~线段树版】Scenic Popularity</a></p><br/><h3>第二题　Chess</h3><br/><p>题意：告诉你一个矩阵，以及一个起始坐标．问走k步有多少个不同的路线．</p><p>方法：DP</p><p>注意事项：无</p>具体解题报告：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D667\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Chess</a><br/><h3>第三题　Best Financing</h3><br/><p><strong>题意</strong>：告诉你n个时间点，这些时间点你会得到若干的钱．然后告诉你m个时间段，以及时间段对应的利率(百分比)．问最后最多可以得到多少钱．</p><p><strong>方法</strong>：DP</p><p><strong>注意事项</strong>：钱相互独立就变得简单了</p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D670\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Best Financing</a><br/><br/><h3>第四题　JZP Set</h3><br/><br/><strong>题意</strong>：给你n个数(1到n)，给你一个规则，问用这个规则可以得到多少个合法的集合．<br/><p>一个合法集合里任意挑两个数，如果这两个数之和是偶数，这个偶数除以２得到的数也要在这个合法集合里．</p><p><strong>方法</strong>：DP或数论</p><p><strong>注意事项</strong>：其实就是推公式</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D668\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】JZP Set</a></p><h2>参考</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D666\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Scenic Popularity</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D667\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Chess</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D670\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Best Financing</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D668\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】JZP Set</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D672\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告~线段树版】Scenic Popularity</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19761939", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "【百度之星2014~资格赛解题报告】", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D666\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">标题</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D666\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Scenic Popularity</a></p><br/><h2>前言</h2><p>最近要毕业了，有半年没做比赛了．<br/>这次参加百度之星娱乐一下．<br/>现在写一下解题报告．<br/>这次比赛大牛都不屑于做百度之星了，于是我很幸运达到前百名，百度不知道会不会实现说的那样发一件衣服．</p><h2>正文</h2><p>这次比赛有四道题，起初只是随便做做，所以我是倒着做的．</p><br/><p>先看看四道题的类型：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D662\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Energy Conversion　暴力　复杂度 O(  log(n) )</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D663\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Disk Schedule　DP 复杂度　O( n ^ 2)</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D664\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Xor Sum 字典树　复杂度　O( 32n  )</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D665\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Labyrinth DP 或搜索　复杂度　O(n*m)</a></p><br/><p>第一道过了很多人，于是我干脆不看第一道题了．</p><br/><p>后来发现还是先做第一道题吧．</p><h3>第一题　Energy Conversion</h3><p><strong>题意</strong>：告诉你一个起初值，问能不能经过根据告诉你的公式得到一个大于等于指定值，如果可以输出最小转换次数，不可以输出－１．</p><p><strong>方法</strong>：直接暴力即可．</p><p><strong>注意事项</strong>：</p><p>1. A &lt;＝ V 时特殊判断<br/><br/>２. K &lt; 2 时特殊判断<br/><br/>3. A &gt;= B 特殊判断</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D662\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Energy Conversion</a></p><br/><h3>第二题　Disk Schedule</h3><p><strong>题意</strong>：磁盘有n个磁道，每个磁道需要读取一个扇区的数据．磁头起初在０磁道０扇区，最终还要在０磁道０扇区．磁道之间移动消耗一定时间，扇区之间移动消耗一定时间，读取数据消耗一定的数据．求最少时间．</p><p><strong>方法</strong>：DP．状态转移方程 str[ i ][ j ] 代表　最大磁道位　i 时，　回去选择的磁道是　j 时的最优值．</p><p><strong>注意事项</strong>：无</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D663\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Disk Schedule</a></p><br/><h3>第三题　Xor Sum</h3><p><strong>题意</strong>：告诉你n个数字，求与数字k异或值最大的那个数字．</p><p><strong>方法</strong>：字典树从高位插入．原因是高位与低位不是一个数量级的，所以优先考虑高位．</p><p><strong>注意事项</strong>：无</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D664\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Xor Sum</a></p><br/><h3>第四题　Labyrinth</h3><p><strong>题意</strong>：有一个矩阵，每个位置有一个值．你在左上角，要去右上角．只能向右，向上，向下走．问路线的数字和的最大值．</p><p><strong>方法</strong>：DP．　每个位置分位上面下来的最大值，右面来的最大值和下面来的最大值即可．</p><p><strong>注意事项</strong>：第一行没有上面来的最大值，第一列没有右面来的最优值和下面来的最优值，最后一行没有下面来的最优值．</p><p><strong>具体解题报告</strong>：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D665\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Labyrinth</a></p><br/><h2>参考</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D662\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Energy Conversion</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D663\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Disk Schedule</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D664\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Xor Sum</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D665\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~资格赛解题报告】Labyrinth</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19761922", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "【百度之星2014~初赛（第二轮）解题报告】Chess", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D667\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Chess</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D667\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【百度之星2014~初赛（第二轮）解题报告】Chess</a></p><br/><h2>前言</h2><br/><p>最近要毕业了，有半年没做比赛了．<br/>这次参加百度之星娱乐一下．<br/>现在写一下 Chess 这道题的的解题报告．</p><br/><h2>正文</h2><br/><h3>题意</h3><p>题意很简单，告诉你一个矩阵，以及一个起始坐标．</p><p>问走k步有多少个不同的路线．</p><p>一个路线可以记为上下左右，则k步有k个上下左右，比如　&#34;上上左左下下&#34;　是一个路线．</p><br/><h3>分析</h3><p>矩阵的大小是1000*1000, k ＝　１000, 如果使用搜索肯定不行．</p><p>起始很容易往矩阵幂这个方向上想，但是状态太多了，　1000*1000 个状态，行不通．</p><p>当时我也考虑分行和列来做，但是就差那么一步就不向下想了．</p><p>网上找了一个<a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/kuangbin/p/3751404.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解题报告</a>，这个解题报告的分析很简单，只有一句话：可以很容易发现行和列是独立的。</p><br/><p>好吧！看到这句话我瞬间会做这道题了．</p><br/><p>接下来我就具体写写推算公式给大家．</p><br/><p>如果是暴力的话，答案应该是</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">ans = sum( Count(i, j, k) );</code></pre></div>其中　Count(i, j, k) 代表　从(x, y) 走　k 步到　坐标(i, j) 的路径个数．<br/><p>对于　Count(i, j, k) 我们怎么求出来呢？</p><br/><p>假设从(x, y) 走　k 步到　坐标(i, j)时, 我们有　t 步是上下移动的，　k - t 步是左右移动的，也就是　k 步中有　t 步是上下移动的，及　C(k, t) 吧．</p><p>于是我们可以得带这个公式了．</p><br/><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"p\">)</span></code></pre></div><p>其中　C(k, t) 是组合数</p><p>Count(i, t) 代表从数轴x 只上下移动走　t 步到达　数轴　i 的路线数，当然，由于是上下，有个上界n,最大行数.</p><p>对应这　Count(j, k-t ) 代表从数轴　y 只左右移动走　k - t 步　到达　j 的路线数，　上界是　m, 最大列数．</p><br/><p>我们把这个公式带入暴力公式可以得到</p><br/><div class=\"highlight\"><pre><code class=\"language-cpp-objdump\">ans = sum( C(k, t) * Count(i, t) * Count(j, k- t)  )</code></pre></div>其中　0&lt;=t&lt;=k, 1&lt;=i&lt;=n, 1&lt;=j&lt;=m.<br/><p>然后我们把　i 展开可以得到</p><br/><div class=\"highlight\"><pre><code class=\"language-cpp-objdump\">ans = sum(   \nC(k, t) * Count(1, t) * Count(j, k- t) \n+C(k, t) * Count(2, t) * Count(j, k- t) \n+ ...\n+C(k, t) * Count(n, t) * Count(j, k- t) \n)</code></pre></div>再提取公因式，可以得到<br/><br/><div class=\"highlight\"><pre><code class=\"language-cpp-objdump\">ans = sum( C(k, t) * Count(j, k - t) * sum(Count(i, t)) )</code></pre></div>同理，可以把 j 展开<br/><br/><div class=\"highlight\"><pre><code class=\"language-cpp-objdump\">ans = sum( \nC(k, t) * Count(1, k - t) * sum(Count(i, t))\n＋C(k, t) * Count(2, k - t) * sum(Count(i, t))\n＋．．．\n＋C(k, t) * Count(m, k - t) * sum(Count(i, t))\n )</code></pre></div><br/><p>这个也可以提取公因式</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">ans = sum(C(k, t) * sum( Count(j, k-t ) ) * sum( Count( i, t ) ))</code></pre></div>我们可以看到，对于　C(k, t) 是组合数，可以预处理得到．<br/><p>对于　Count(i, t) 和　Count(j, k-t ) 我们都可以使用　O(n^2) 的预处理得到．</p><p>然后我们再使用O(n) 的预处理可以得到　sum( Count(j, k-t) ) 和　sum( Count(i, t) ).</p><p>最后我们使用　O( k ) 的复杂度得到它们的乘积即可．</p><br/><br/><h3>代码</h3><br/><br/><div class=\"highlight\"><pre><code class=\"language-cpp-objdump\">/*************************************************************************\n  &gt; File Name: 2.2.cpp\n  &gt; Author: tiankonguse\n  &gt; Mail: i@tiankonguse.com\n  &gt; Created Time: Mon 26 May 2014 11:31:15 AM CST\n***********************************************************************/\n#include&lt;cstdio&gt;\n#include&lt;cstdlib&gt;\n#include&lt;cstring&gt;\n#include&lt;cmath&gt;\n#include&lt;stack&gt;\n#include&lt;algorithm&gt;\n#include&lt;functional&gt;\n#include&lt;stdarg.h&gt;\nusing namespace std;\n#ifdef __int64\ntypedef __int64 LL;\n#else\ntypedef long long LL;\n#endif\nconst int N = 1111;\nint map[4]= {-2,-1,1,2};\nLL C[N][N];\nLL mod = 9999991;\nLL str[2][N][N], sum[2][N];\n\nvoid getC() {\n\tmemset(C,0,sizeof(C));\n    C[0][0] = 1;\n    for(int i = 1; i &lt; N; i++) {\n        C[i][0] = C[i][i] = 1;\n        for(int j = 1; j &lt; i; j++) {\n            C[i][j] =( C[i-1][j] + C[i-1][j-1]) % mod;\n        }\n    }\n}\n\nvoid DP(LL str[N][N], LL sum[N], int x, int n, int k) {\n    str[0][x] = 1;\n    sum[0] = 1;\n    for(int t=1; t&lt;=k; t++) {\n        for(int i=2; i&lt;=n; i++) {\n            for(int kk=0; kk&lt;4; kk++) {\n                str[t][i] = (str[t][i] + str[t-1][i+map[kk]]) % mod;\n            }\n            sum[t] = (sum[t] + str[t][i]) % mod;\n        }\n    }\n}\n\nLL get(int k, int i) {\n    return ((C[k][i] * sum[0][i] % mod) * sum[1][k-i] % mod);\n}\n\nint main() {\n    getC();\n    int t,n,m,k,x,y;\n    LL ans;\n    scanf(&#34;%d&#34;,&amp;t);\n    for(int tt=1; tt&lt;=t; tt++) {\n        scanf(&#34;%d%d%d%d%d&#34;,&amp;n,&amp;m,&amp;k,&amp;x,&amp;y);\n        n++,m++,x++,y++;\n\t\tmemset(str,0,sizeof(str));\n\t\tmemset(sum,0,sizeof(sum));\n        DP(str[0], sum[0], x, n, k);\n        DP(str[1], sum[1], y, m, k);\n\n        ans = 0;\n        for(int i = 0; i &lt;= k; i++) {\n            ans = (ans +   get(k, i))%mod;\n        }\n        printf(&#34;Case #%d:\\n%lld\\n&#34;,tt,ans);\n    }\n\n    return 0;\n}\n</code></pre></div><br/><h2>参考</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//acm.hdu.edu.cn/showproblem.php%3Fpid%3D4832\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Problem - 4832</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.cnblogs.com/kuangbin/p/3751404.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HDU 4832 Chess （DP）</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19759428", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "vi 中插入当前时间", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> http://tiankonguse.com/</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tiankonguse.com/</span><span class=\"invisible\"></span></a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D661\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vi 中插入当前时间</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tiankonguse.com/</span><span class=\"invisible\"></span></a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D661\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">tiankonguse.com/record/</span><span class=\"invisible\">record.php?id=661</span><span class=\"ellipsis\"></span></a></p><br/><h2>前言</h2><p>最近在写文档，需要频繁的插入当前的日期与时间。</p><p>所以想让vi 能够方便的插入时间。</p><br/><h2>正文</h2><br/><p>首先我在<a href=\"https://link.zhihu.com/?target=http%3A//bbs.chinaunix.net/thread-1004746-1-1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">论坛</a>上找到了一个方法。</p><p>是使用这个命令</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">:r !date</code></pre></div><br/><p>但是这个只有日期，我想加个时间，不能使用参数。</p><br/><p>后来在<a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/linwhwylb/article/details/6284286\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSDN</a> 上发现可以使用函数，这个函数映射为快捷键就更方便了。</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">:nnoremap &lt;F5&gt; &#34;=strftime(&#34;%F&#34;)&lt;CR&gt;gP</code></pre></div><br/><p>于是我看了看date的说明文档</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">tiankonguse@tiankonguse-PC:~$ date --help</code></pre></div><br/><p>找到 %R 可以输出我想要的时间。</p><p>于是我的最终配置是</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">:nnoremap &lt;F5&gt; &#34;=strftime(&#34;%F %R&#34;)&lt;CR&gt;gP</code></pre></div><br/><h2>参考资料</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.csdn.net/linwhwylb/article/details/6284286\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">blog.csdn.net/linwhwylb</span><span class=\"invisible\">/article/details/6284286</span><span class=\"ellipsis\"></span></a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//bbs.chinaunix.net/thread-1004746-1-1.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">bbs.chinaunix.net/threa</span><span class=\"invisible\">d-1004746-1-1.html</span><span class=\"ellipsis\"></span></a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19758215", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "安装软件时依赖冲突的万能解决方案", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D653\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">安装软件时依赖冲突的万能解决方案</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D653\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">安装软件时依赖冲突的万能解决方案</a></p><br/><h2>前言</h2><p>好吧，可能是个标题党了．</p><p>不过如果你这个方法还不能解决依赖冲突，那就我目前就不知道有什么办法了．</p><p>不过一般情况下，使用这个方法都可以修复问题的．</p><br/><h2>正文</h2><br/><h3>基础的解决方案</h3><br/><p>如果你是刚遇到依赖冲突问题，可以先参考这里基本的解决方案．</p><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D38\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源的问题：下列的软件包有不能满足的依赖关系</a><br/><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D272\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">各种解决方法：软件包没有被完全安装或卸载问题</a></p><br/><h3>进入正题</h3><p>先说说背景吧．</p><p>使用基础解决方案不能解决的，更严重的是，想重装那些软件，却卸载不了，提示依赖冲突．</p><br/><p>这个时候我都想重装系统了，可是我配置了这个多东西，安装了这个多软件等原因，不到最后一步我不想选择重装系统这个方法，毕竟重装系统不一定能解决冲突问题．</p><br/><p>不过，我最终还是找到了解决方案．</p><p>这就分享出来，帮大家多一个选择的解决方案，当然不到万不得已请不要选择这个方法．</p><br/><p>现在我们来看看这个依赖的冲突问题吧．</p><br/><p><strong>安装软件时提示的是什么错误信息呢？</strong></p><p>安装的软件依赖的软件版本过低．</p><br/><p><strong>首先系统怎么知道依赖冲突呢？</strong></p><p>应该是每个软件都写清楚了自己依赖哪些软件以及这些软件的最低版本．</p><br/><p><strong>那我们能不能手动修改这些依赖的软件的版本呢？</strong></p><p>如果知道这些信息在哪里储存，那就可以修改了．</p><br/><p><strong>那这些信息在哪里储存呢？</strong></p><p>貌似在　/var/lib/dpkg/status　这个文件里面．</p><br/><p>比如我的　vim-common　的信息</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">Package: vim-common\nStatus: install ok installed\nPriority: important\nSection: editors\nInstalled-Size: 296\nMaintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt;\nArchitecture: i386\nSource: vim\nVersion: 2:7.3.547-6ubuntu3~blueyed1~precise\nDepends: libc6 (&gt;= 2.3.4)\nRecommends: vim | vim-gnome | vim-gtk | vim-athena | vim-nox | vim-tiny\nConffiles:\n /etc/vim/vimrc 682aa2a07693cc27756eee9751db3903\nDescription: Vi IMproved - Common files\n Vim is an almost compatible version of the UNIX editor Vi.\n .\n Many new features have been added: multi level undo, syntax\n highlighting, command line history, on-line help, filename\n completion, block operations, folding, Unicode support, etc.\n .\n This package contains files shared by all non GUI-enabled vim\n variants (vim and vim-tiny currently) available in Debian.\n Examples of such shared files are: manpages, common executables\n like xxd, and configuration files.\nHomepage: http://www.vim.org/\nOriginal-Maintainer: Debian Vim Maintainers &lt;pkg-vim-maintainers@lists.alioth.debian.org&gt;</code></pre></div><br/><p>可以看到里面的两个对我们来说重要的数据</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">Version: 2:7.3.547-6ubuntu3~blueyed1~precise\nDepends: libc6 (&gt;= 2.3.4)</code></pre></div><br/><p>假设我们的　libc6 的版本是　2.3.2 的话，安装　vim-common　的话机会提示依赖冲突，说需要　libc6 的版本至少是　2.3.4．</p><p>此时我们可以做修改了最低依赖版本会怎么样呢？</p><p>比如</p><br/><div class=\"highlight\"><pre><code class=\"language-text\">Version: 2:7.3.547-6ubuntu3~blueyed1~precise\nDepends: libc6 (&gt;= 2.3.２)</code></pre></div>这是再次修复竟然成功了，也可以卸载了．<br/><br/><p>好吧，解决方案就是这个：把依赖的软件的版本修改为目前安装的版本即可．</p><br/><h2>参考</h2><br/><p><a href=\"https://link.zhihu.com/?target=http%3A//www.91linux.com/html/2014/ubuntu_linux_0117/2837.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">debian/ubuntu软件安装错误的终极解决方案</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19753477", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "关于 double sort 这道题的思考", 
            "content": "<h2>声明</h2><p>   笔者最近意外的发现 笔者的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的很多文章被其它网站转载，但是转载时未声明文章来源或参考自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 网站，因此，笔者添加此条声明。</p><p>    郑重声明：这篇记录《<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D651\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于 double sort 这道题的思考</a>》转载自 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse&#39; record</a> 的这条记录：<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D651\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于 double sort 这道题的思考</a></p><br/><h2>前言</h2><p>前言的前言</p><p>昨天本来写好了这篇记录，可恨中间我出去打了一个电话，回来继续写，写完我想到可能session已经失效，所以我新打开一个页面，登录，然后在这个页面提交。返回了提交成功的标签，但是跳转到那篇文章时提示不存在。这个，我不能再忍受了，于是自己做了一个自动保存的功能。</p><br/><p>首先今天写的内容将会简短，因为昨天写的好久好久，结果自动保存功能还没有实现。不过现在，时刻都在自动保存着，再也不用担心这个问题了。</p><p>首先声明这篇记录不是解题报告，只是一场我的大脑里思路的旅行。</p><br/><p>前几天学弟学妹们有一场比赛，学弟邀请我作为技术支持者去帮忙，在那个过程中我看了几道题。</p><p>其中有两道题正常比赛没有其他人提交，于是我研究了一下。</p><p>研究的第一道就一个暴力dfs就可以过，只是可能正常比赛没人看懂题意，我看了好几个小时才看懂的。</p><p>第二道就是 double sort。</p><br/><h2>正文</h2><h3>题意</h3><br/><p>什么是 double sort 呢？</p><p>就以题目中的讲解例子来说说吧。</p><p>题目说对于一组数 [5; 4; 3; 2; 1]， 如果只可以交换相邻的数字，要使这组数达到升序至少需要 10 步。</p><p>这个很好理解，假设一个数字要和左面的数字交换，那只有一种情况。</p><p>但是对于两组数 [5,5; 4,4; 3,3; 2,2; 1,1] 来说，也是只能交换相邻的数字。这是一个数字和左面的数字交换时就有两种情况了。</p><p>比如对于 4 可以和 第一个5交换，也可以和第二个5交换。</p><p>目标是使这两组数字达到升序。题意还说这个例子的答案是 15 ，不是 20.</p><br/><p>然后，没然后了。</p><br/><h3>错误的题意</h3><p>看完上面的题意，我有一个疑问：难道真的是要排成 [5,5; 4,4; 3,3; 2,2; 1,1] 的样子吗？ 15 步可能吗？</p><p>于是我猜测可能是达到每组升序即可，比如 [4,5; 4,5; 2,3; 2,3; 1,1], 这样第一组是 [4; 4; 2; 2; 1], 第二组书[5; 5; 3; 3; 1].</p><p>于是我写了一个暴力程序，第一组样例还真跑出一个 15 的答案来。</p><p>但是第二组 答案大小比样例少了1。</p><br/><p>既然结果不正确，那就需要把那个正确的答案的路径输出来，看看有什么不同。</p><p>结果发现最终答案应该是上下两个的差不超过2.</p><p>于是我添加了一个 fix 函数，修正这种情况。</p><p>然后三个样例都过了。</p><p>再然后就是 WA 了。</p><br/><h3>正确的题意</h3><p>然后我想还是想弄明白题意再说，于是用 [3,3; 2,2; 1,1] 模拟了一下，发现真的比 [3; 2; 1] 的答案的二倍少。</p><p>这时我意识到可能目标真的是求[1,1; 2,2; 3,3]  这种情况。</p><br/><h3>暴力DFS尝试</h3><p>知道了题意，数据量只是到8，于是写了一个暴力程序。</p><p>使用 &#34;1122334455&#34; 串的形式map 了一下。</p><p>对于5瞬间跑出答案，对于6 跑了好一会。</p><br/><h2>双向DFS搜索</h2><p>直接搜太慢，那就双向搜试试。</p><p>于是写了一个双向 DFS， 结果 6也是瞬间跑出来，但是 7 怎么也出不来了。</p><br/><h3>使用逆序数剪枝双向搜索</h3><p>写的虽然是双向DFS，但是其实还是暴力搜索，还没有加什么剪枝。</p><p>于是使用 逆序数剪枝， 7 十秒多跑出来了。</p><p>于是提交试试，发现 超内存，现在不是时间问题了，是内存不够的问题了。</p><br/><h3>状态压缩</h3><p>内存不够就要想法节省内存，其中 map&lt;string, string&gt;最浪费内存。</p><p>为什么要使用 string 呢？</p><p>为了保存一个状态。</p><p>那能不能使用位数压缩状态么？</p><p>发现还真的可以。</p><p>数字是从1-8，也就是0-7 了。最少需要三位才能表示一个数字，总共需要 24位数字，3字节，long long 类型的可以。</p><p>于是修改成map&lt;LL, LL&gt;.</p><p>为什么要使用 map 呢？</p><p>貌似是为了记录路径，这里不需要记录路径。</p><p>于是修改成为了 set&lt;LL&gt; .</p><p>再次提交还是超内存。</p><br/><h3>A* 算法出世</h3><p>到底是为什么会超内存呢？</p><p>因为状态太多了。</p><p>为什么状态太多了呢？</p><p>因为我们使用的暴力搜索，我们不知道哪个状态是最优解，哪个不是。</p><p>那能不能确认某个状态一定比另一个状态更优呢？</p><p>貌似可以的。</p><p>那就用优先队列吧。</p><p>于是问问学弟小堆是使用大于号还是小于号。最后自己在模板生找到了。</p><br/><h3>A＊搜索的估价函数</h3><p>双向搜索时曾遇到过逆序数，于是使用逆序数作为估价函数吧。</p><p>7 终于跑出来了。</p><p>但是 8 还是跑步出来。</p><br/><h3>A＊搜索的另一个估价函数</h3><p>逆序数这个估价函数行吗？</p><p>貌似误差太大，无效状态太多。</p><p>那能不能换一个估价函数呢？</p><p>貌似还真有一个，每个数字离自己最终的位置的距离也是一个不错的估价汗是。</p><p>那就使用这个估价函数吧。</p><p>于是把估价函数换了换，结果还是只能跑出7来。</p><br/><h3>强强联合</h3><p>怎么还是跑不出 8 呢？</p><p>估价函数太弱，精度太低。</p><p>那能不能加强估价函数呢？</p><p>貌似可以的。</p><p>比如说呢？</p><p>对于逆序数，交换一次最多减少3个逆序数，最少一个。</p><p>对于相对距离，交换一次最多减少两个，最少不变。</p><p>知道了，就这个办呢。</p><p>于是使用两个估计函数，重新了程序，结果7确实跑的快乐，但是还是跑不出8来。</p><br/><h3>总结</h3><p>这道题虽然没有跑出 8 来，但是收获不少。</p><p>首先这一切都是自己独立思考的，再次开发了智力。</p><p>有兴趣的人可以继续思考下去，尽量不要看解题报告。</p><p>所有代码都在这里<a href=\"https://link.zhihu.com/?target=https%3A//github.com/tiankonguse/ACM/tree/master/hust/doublesort\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM/hust/doublesort at master 路 tiankonguse/ACM 路 GitHub</a></p><h2>参考</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/lab/acm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse 的模板</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19749397", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "chrome 下修改 agent 的方法", 
            "content": "<h2>前言</h2><p>这篇文章和 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse</a> 的个人网站里的<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D649\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文章</a>保持同步。</p><p>很早之前，在 chrome 下修改 agent 的方法是使用 chrome 插件。</p><p>后来 chrome 的某一个版本中自带这个功能了。</p><p>在后来 chrome 的版本中又没有这个功能了。</p>所以现在我需要找到一个可以修改当前版本的 chrome 的 agent 的方法了。<br/><br/><br/><h2>正文</h2><br/><h3>自带的修改agent的方法</h3><br/><p>搜索的第一个方法是讲的使用 chrome 自带的修改 agent 的功能。</p>在 <a href=\"https://link.zhihu.com/?target=http%3A//www.guao.hk/posts/changing-the-user-agent-a-new-google-chrome-feature.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在不使用扩展的情况下修改 Chrome 的 User Agent</a> 这篇文章中讲的很清楚，还附带的有图片。<br/>但是这篇文章是2011年12月13日发的，那时候他说只支持Chrome V17版本。而我的浏览器已经是 版本 34.0.1847.131 m 了。<br/>所以这个方法无效了。<br/><br/><h3>命令行修改agent的方法</h3><br/>然后找到使用命令行修改 chrome 的 agent 的方法。<br/>具体是这篇文章 <a href=\"https://link.zhihu.com/?target=http%3A//sypopo.com/pcnet/3022.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Chrome浏览器修改User Agent的方法</a>.<br/><br/>我就试了一下，发现必须先把所有的 chrome 浏览器的窗口都关闭。<br/>然后在命令行执行才有效。<br/><div class=\"highlight\"><pre><code class=\"language-text\">tiankonguse@tiankonguse-PC:~$ google-chrome --user-agent=&#34;tiankonguse agent&#34;</code></pre></div><br/>然后使用 chrome 抓包可以看到<br/><div class=\"highlight\"><pre><code class=\"language-http\"><span class=\"nf\">GET</span> <span class=\"nn\">/record/</span> <span class=\"kr\">HTTP</span><span class=\"o\">/</span><span class=\"m\">1.1</span>\n<span class=\"n\">Host</span><span class=\"o\">:</span> <span class=\"l\">tiankonguse.com</span>\n<span class=\"n\">Connection</span><span class=\"o\">:</span> <span class=\"l\">keep-alive</span>\n<span class=\"n\">Cache-Control</span><span class=\"o\">:</span> <span class=\"l\">max-age=0</span>\n<span class=\"n\">Accept</span><span class=\"o\">:</span> <span class=\"l\">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span>\n<span class=\"n\">User-Agent</span><span class=\"o\">:</span> <span class=\"l\">tiankonguse agent</span>\n<span class=\"n\">Accept-Encoding</span><span class=\"o\">:</span> <span class=\"l\">gzip,deflate,sdch</span>\n<span class=\"n\">Accept-Language</span><span class=\"o\">:</span> <span class=\"l\">zh-CN,zh;q=0.8,zh-TW;q=0.6</span></code></pre></div><br/>确实可以修改，所以这个方法成功的修改了 chrome  的 agent 了。<br/>但是这个方法使用起来颇为不方便。<br/><br/><h3>各种浏览器修改 agent 的方法</h3><br/>然后我有这到一个写的更全的修改 各种浏览器 agent 的方法。<br/>其中对于 chrome 不使用插件 修改 agent 的方法也是上面的两种方法。<br/>推荐看看这篇文章 <a href=\"https://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_b34b733d0101b8kd.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">巧用UserAgent伪装浏览器</a> .<br/><br/><h3>重装 google 修改 agent 的方法</h3><br/>一个好的功能，为什么别人的有，而我的没有呢？<br/>这是我意识到可能是我的浏览器的问题。<br/>难道chrome 浏览器还分为开发版和正常版吗？<br/>我看看我安装的版本是稳定版的。<br/>于是我尝试安装不稳定版看看。<br/><br/><p>网速很慢，我改变搜索关键词，加上 2014年，找到最近的一片文章，<a href=\"https://link.zhihu.com/?target=http%3A//www.technipages.com/google-chrome-change-user-agent-string\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Change User Agent in Google Chrome</a> 是在时间为MARCH 2, 2014 发表的，而这篇文章的评论的最近时间是May 8, 2014 at 4:01 pm。</p><p>也就是前天，所以应该是浏览器版本的原因。</p><br/>终于安装完了， F12， 点击齿轮， 什么没找到？<br/>还是使用刚才看的教程吧。<br/>点击那个 &#34;&gt;三&#34; 的图标，Then select “Emulatio&#34; 是不是看到了？<br/>好了，终于解决 chrome 下不使用 插件 修改 agent 的方法了。<br/><br/><h2>参考资料</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//www.guao.hk/posts/changing-the-user-agent-a-new-google-chrome-feature.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在不使用扩展的情况下修改 Chrome 的 User Agent</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//sypopo.com/pcnet/3022.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Chrome浏览器修改User Agent的方法</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//blog.sina.com.cn/s/blog_b34b733d0101b8kd.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">巧用UserAgent伪装浏览器_IT狂人Season_新浪博客</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.technipages.com/google-chrome-change-user-agent-string\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Google Chrome: Change the User Agent String</a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19696411", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "ubuntu 引导问题记录", 
            "content": "<h2>前言</h2><p>最近遇到两个问题：1.重装 windows 后 ubuntu不见了。2.我还装了 centos系统，我想设置 引导，使centos为默认引导系统。</p><p>于是查了一下资料，记录一下。</p><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D597\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ubuntu 引导问题记录</a>保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></blockquote><h2>进入不见的 ubuntu</h2><p>在windows下，可以安装一个 easyBCD ，添加ubuntu即可。</p><p>添加时首先需要选择引导程序，默认是第一个就可以了，为了保险，第二个也添加一次。</p><p>系统选择ubuntu即可</p><p>分区选择你ubuntu所在的分区，所不确定，每一个都添加，开机一个一个尝试即可。</p><h2>选择默认引导系统</h2>一般引导的系统在 /boot/grub/menu.lst 或 /boot/grub/grub.cfg  里面。<br/>在13行可以看到 set default = &#34;0&#34; 或 default 0 (找不到请搜索).<br/>这个数字就是默认引导那个。你可以修改为你想默认启动的系统。<br/><h2>更新引导列表<br/></h2><p>一般安装完 windows 后，linux的引导不会显示，这样就进不去 linux 了。</p>我们在 windows 下安装某个软件后，可以进去 linux ，进入后，我们需要更新一下引导列表。<br/><br/>使用下面命令即可更新。<br/><div class=\"highlight\"><pre><code class=\"language-text\">sudo grub-install /dev/sda \nsudo update-grub</code></pre></div>", 
            "topic": [], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "安装某个软件，是哪个软件？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19694701", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 2, 
            "title": "vmware ESXI 上安装系统", 
            "content": "<h2>前言</h2><p>最近搬来一个服务器，上面安装的是vmware ESXI  虚拟机。</p><p>我需要在上面安装一个自己的系统。</p><p>于是查阅了一下资料。</p><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D595\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vmware ESXI 上安装系统</a>保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></blockquote><h2>正文</h2><p>在vmware ESXI  里新建系统后，发现系统没有镜像，于是需要先上传系统镜像。<br/></p><br/><h2>上传镜像文件到 vmware ESXI 虚拟机上</h2><br/>首先打开Vsphere,点击左侧的虚拟机。<br/><br/>然后点击建立的清单，选择“摘要”，之后在“存储器”中看到我们的硬盘。<br/><br/>选择存储器中的硬盘，右键单击，选择“浏览数据库存储”，打开我们服务器上的硬盘目录。<br/><br/>之后建立文件夹，传上我们的系统ISO文件。<br/><h2>安装系统</h2>先新建一个虚拟机，选择相应的系统。<br/>点击新建的系统，点击摘要标签，然后点编辑设置。<br/>点击选项标签，可以在高级里看到引导选项。<br/>在强制执行 BIOS 设置里勾选下次引导是进入BISO。<br/>然后点击确定保存。<br/><br/>然后点击入门中的启动虚拟机。<br/>启动后会自动进入BISO。<br/>点击工具栏中的光盘-&gt; CD/DVD驱动器1 -&gt; 连接到数据储存上的ISO映像 -&gt; 选择你上传的系统。<br/>点击摘要的打开控制台，会看到BISO界面。<br/>使用光标，定位到Boot标签中的CD-ROM选项，使用+号使之位于最上面，按F10保存退出。<br/>然后就可以看到安装系统的界面了。<br/>接着装系统即可。", 
            "topic": [], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "请问：<br>①你是裸机上安装esxi还是在OS上安装？<br>②你是单机安装esxi后再当作终端机使用，还是有多台电脑远程连接使用？<br>③我只有一台笔记本电脑（当然，如果仅仅安装配置可以借）做开发用，希望使用esxi在裸机安装后，通过虚拟机安装其它系统做日常工作和开发工作，应该怎么弄？<br><br>谢谢！", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19694403", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "ubuntu 前台程序和后台程序", 
            "content": "<h2>前言</h2><p>以前知道了 &amp; 命令后，经常使用她把程序从前台转换到后台。<br/></p>后来突然想时候那个程序了，我不知所措了。<br/><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D592\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ubuntu 前台程序和后台程序</a>保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></blockquote><h2>前台转后台</h2>一般是命令后加一个 &amp; 命令即可。<br/>比如<br/><div class=\"highlight\"><pre><code class=\"language-text\">tiankonguse@tiankonguse-PC:~/app/pc2-9.2.3/bin$ ./pc2server &amp;\n[1] 31098\ntiankonguse@tiankonguse-PC:~/app/pc2-9.2.3/bin$ ./pc2admin &amp;\n[2] 31570</code></pre></div><h2>后台转前台</h2><p>输入命令 jobs 后，发现我们的那个后台程序了。</p><div class=\"highlight\"><pre><code class=\"language-text\">tiankonguse@tiankonguse-PC:~/app/pc2-9.2.3/bin$ jobs\n[1]-  Running                 ./pc2server &amp;\n[2]+  Running                 ./pc2admin &amp;\n</code></pre></div>如果有多个 后台程序的话，你需要记下后台程序前面的序号number。<br/><p>比如 pc2server 是1， pc2admin 是2.</p><br/>然后执行 fg number 就可以把序号为number的后台程序调到前台了。<br/><div class=\"highlight\"><pre><code class=\"language-text\">tiankonguse@tiankonguse-PC:~/app/pc2-9.2.3/bin$ fg 1\n./pc2server\n</code></pre></div>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19691725", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "无线路由器共享网络", 
            "content": "<h2>前言</h2><p>一年半之前的暑假，我曾住在学长的寝室。他们寝室使用的是无线路由器。当时就是使用无线路由器共享网络的。</p>一年前，我们acm内部比赛也是使用这个无线路由器共享网络的。<br/>所以，无线路由器理论上是可以共享网络的，如果你的无线路由器一直不能共享，那是你没有配置好的原因。<br/><br/><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D583\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">无线路由器共享网络</a>保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></blockquote><h2>正文</h2><br/>最近，acm又要比赛了，而这时候，需要做很多事，这时候，我该做我需要做的事了。<br/>比如说给他们共享网络，这是最基础的。其实能限制访问其他网站更好了。<br/>恰好，我这里有一个无线路由器，所以拿来完成这两件事。<br/><br/>关于无线路由器共享网络的教程很多，但是有个问题，那些教程有个前提，你的网路是插上去就能直接上网或者可以拨号什么简单方法上网。<br/><br/>但是，我们学校是使用 H3C 的 Inode 客户端 认证的，那么使用无线路由器怎么也上不了网了。<br/>后来，发现又有些教程说可以给无线路由器刷机，然后就可以安装 INode 客户端了。<br/><br/>一个简单的路由器，变成这么复杂的东西了，我们还是回归最简单的问题吧。<br/><br/><b>1.给大家共享网络。</b><br/><br/>注意，这句话不完整，完整的话应该是&#34;我的笔记本联网后通过无线路由器给大家共享网络&#34;。<br/><br/>好了，这样就清晰了。<br/><br/>重要事件就是 1.我的笔记本联网，2.笔记本连上无线路由器，3.大家连上路由器，4.大家可以上网。<br/><br/>所以要想用我这个方法让无线路由器共享无线，需要有一个人能够上网。<br/>这里就假设已经有一个人可以上网了吧。<br/><br/><ol><li>可以上网的那个人连上无线路由器，默认情况下会分配一个ip地址，应该是 192.168.1.100。</li><li>打开本地连接，配置，里面有一个共享，点击共享网络，并选择无线的那个网卡(根据无线的名字可以看出是那个网卡)。</li><li>浏览器中输入 192.168.1.1 可以进入无线路由器的管理页面。用户名和密码默认都是admin(不同的路由器可能不同)。</li><li>找到有 192.168.1.1 的配置页面，应该可以看到网关也是 192.168.1.1，这里改成你的ip,比如192.168.1.100。</li><li>重启一下路由器，你也重启一下无线的适配器。</li><li>别人连上无线就可以上网了。</li></ol><br/><b>2.限制访问其他网站</b><br/><p>我猜测这种方法进行安全设置是无线的，安全设置应该是针对wlan端口的。这里我们没有使用wlan端口。<br/></p><p>所以，就不能使用路由器来限制网站了。不过可以在我们那个共享网络的电脑上配置一下以达到这个目的，</p><p>请参考这里(这在编辑中,主要是通过nginx反向代理实现)</p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19689582", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "vi 右键复制无效解决方案", 
            "content": "<h2>前言</h2><br/><p>最近对vim进行了大量的配置，增加了智能提示，折叠等功能。</p><p>但是，配置完后发现选中文本后不能右键复制了。</p><p>查阅资料后找到解决方法了。</p><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D582\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse.com</a>的文章保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>。</blockquote><h2>原因</h2><br/><p>在<a href=\"https://link.zhihu.com/?target=http%3A//forum.ubuntu.org.cn/viewtopic.php%3Ff%3D50%26t%3D117885\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>找到了原因。</p><p>简单的说就是：set mouse=a后，鼠标右键就成了虚拟模式，要想用右键复制文本到其他地方，可以暂时恢复回来 </p><br/><h2>解决方法</h2><br/><p>原因里已经带了一个方法了。</p><p>但是每次复制都这样，挺麻烦的。</p><p>另一个方法就是：在不改变set mouse=a 情况下，可以在Vi里面选择文本，按y，然后要在粘贴的地方点鼠标中健，就OK了！</p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19687778", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "vi命令汇集", 
            "content": "<h2>前言 </h2><p>起初，想着写个全面的vi教程，但是总是由于vi的命令较多较杂而不了而止。<br/>后来，想着即使写出一个全面的vi教程，也未必有用。因为那时教程肯定很长很长，而对于很长的文章，大部分人是没有耐性去把它读完的。<br/>于是，我每次写一些vi的命令汇集，每次重复一些上次提及到的，从而达到温故而知新。</p><blockquote>本文与<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D580\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse</a>的文章保存同步，若想访问最新文章，请访问<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>。</blockquote><br/><h2>（一）vi的基本概念</h2><br/><p>vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode）</p><p><br/>1.命令行模式command mode）<br/></p><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p><p><br/>2. 插入模式（Insert mode）<br/></p><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p><br/>3. 底行模式（last line mode）<br/></p><p>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……</p><br/><h2>（二）基本操作</h2><br/><p>1.命令行模式</p><br/><p>i  进入插入模式，位置在光标处<br/>a 进入插入模式，位置在光标的下一个位置<br/>o 进入插入模式，插入新的一行<br/>h 光标左移 <br/>j 光标下移 <br/>k 光标上移<br/>l 光标右移<br/>[ctrl] + b 屏幕往后移动一页 <br/>[ctrl] + f 屏幕往前移动一页<br/>[ctrl] + u 屏幕往后移动半页<br/>[ctrl] + d 屏幕往前移动半页<br/>g 光标定位在文章最前，显示仍为目前行<br/>gg 光标定位在文章最前，显示为文章最前<br/>G 光标定位在文章最后，显示仍为目前行<br/>GG 光标定位在文章最后，显示为文章最后<br/>g[lineNumber] 跳转到第lineNumber行,例如 g12 ,跳到第12行<br/>G[lineNumber] 同g[lineNumber]<br/>^ 移动到光标所在行的行首<br/>$ 移动到光标所在行的行尾<br/>w 光标跳到下个字的字首<br/>e 光标跳到下个字的字尾<br/>b 光标跳到上个字的字首<br/>x 删除光标所在的字符 <br/>X 删除光标所在字符的前一个字符<br/>d[cmd] 根据命令删除字符,有d^,d$,dw,de,db,dd<br/>dd 删除光标所在的行<br/>y[cmd] 根据命令复制字符，有y^,y$,yw,ye,yb,yy<br/>yy 复制当前行<br/>c[cmd] 根据命令删除字符，并进入插入模式，有c^,c$,cw,ce,cb,cc<br/>cc 删除当前行并进入插入模式<br/>p 在光标所在位置粘贴<br/>u 撤销<br/>[number][cmd] 执行number次cmd命令，例如: 3dd,从光标起删除三行<br/>r 替换光标所在位置的字符，替换后回到命令模式<br/>R 替换光标所在位置的字符，替换后光标移到下一个位置，可以继续替换，按[ESC]结束。 </p><p><br/>2.底行模式(last line mode)</p><p>:w filename 另存为<br/>:q 退出<br/>:wq 保存并退出<br/>:q! 强制退出<br/>:[lineNumber] 跳转到第lineNumber行,例如 :12 ,跳到第12行<br/>:set nu 显示行号<br/>:set nonu 隐藏行号</p><br/><h2>3.插入模式</h2><p><br/>[ESC] 从插入模式切换到命令行模式。</p>", 
            "topic": [], 
            "comments": [
                {
                    "userName": "辰孤风", 
                    "userLink": "https://www.zhihu.com/people/4048503a33b53c3f839593d1a45b09b4", 
                    "content": "写的很详细，很实用，赞", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Eric", 
                    "userLink": "https://www.zhihu.com/people/577681e499cd16ece7716ab5ce7f52d4", 
                    "content": "理解了😀", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19683991", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "html转义字符", 
            "content": "<blockquote>本文与 <a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D578\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">tiankonguse</a> 的博客里同步发表</blockquote><p>今天遇到了 html 字符转义的问题，于是记录一下。</p><br/><h2>问题重现</h2><br/><p>在链接中，可以添加一个 title 字段，功能是对这个链接的描述。</p><p>但是，这个 title 里的字符有严格的限制，不能有引号，空格等字符，于是我就需要进行字符转义了。</p><p>这个 title 是在后台用 php 自动生成的，于是便需要使用 php 对字符串进行转义了。</p><br/><h2>解决方案</h2><br/><p>php 中有个字符串替换函数 str_replace 非常方便。</p><p>可以先看看我的字符转义的代码</p><br/><br/><div class=\"highlight\"><pre><code class=\"language-text\">$_title = str_replace( array(&#34;\\&#34;&#34;,&#34; &#34;,&#34;&lt;&#34;,&#34;&gt;&#34;,&#34;&amp;&#34;), array(&#34;&amp;quot;&#34;,&#34;&amp;nbsp;&#34;,&#34;&amp;lt;&#34;,&#34;&amp;gt;&#34;,&#34;&amp;amp;&#34;),$title);</code></pre></div><br/><br/><p>这行代码进可以达到转义一些字符的目的。</p><p>第一个参数代表搜索的字符，第二个代表替换的字符，第三个是原串。</p><br/><h2>HTML 字符扩展知识</h2><br/><p>转义字符串（Escape Sequence）也称字符实体(Character Entity)。</p><p>在HTML中，定义转义字符串的原因有两个：第一个原因是像“&lt;”和“&gt;”这类符号已经用来表示HTML标签，因此就不能直接当作文本中的符号来使用。为了在HTML文档中使用这些符号，就需要定义它的转义字符串。当解释程序遇到这类字符串时就把它解释为真实的字符。在输入转义字符串时，要严格遵守字母大小写的规则。第二个原因是，有些字符在ASCII字符集中没有定义，因此需要使用转义字符串来表示。</p><br/><h2>转义字符串的组成</h2><br/><p>转义字符串（Escape Sequence），即字符实体（Character Entity）分成三部分：第一部分是一个&amp;符号，英文叫ampersand；第二部分是实体（Entity）名字或者是#加上实体（Entity）编号；第三部分是一个分号。</p><p>比如，要显示小于号（&lt;），就可以写 &amp;lt; 或者 &amp;#60; 。</p><br/><h2>HTML特殊转义字符列表</h2><br/>&lt; 小于 &amp;lt; &amp;#60;<p>&gt; 大于 &amp;gt; &amp;#62;</p><p>&amp; &amp;符号 &amp;amp; &amp;#38;</p><p>&#34; 双引号 &amp;quot; &amp;#34;<br/><br/></p><h2>JavaScript转义符</h2>\\b 退格<p>\\f 走纸换页</p><p>\\n 换行</p><p>\\r 回车</p><p>\\t 横向跳格</p><p>\\&#39; 单引号</p><p>\\&#34; 双引号</p><p>\\\\ 反斜杠</p><h2>参考资料</h2><p><a href=\"https://link.zhihu.com/?target=http%3A//114.xixik.com/character/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">114.xixik.com/character</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span></a></p>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19637369", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 0, 
            "title": "Codeforces Round #219 (Div. 2) 解题报告", 
            "content": "<h2>前言</h2><blockquote>    这次比赛好不容易不在晚上11：30比赛了，结果我没有报名。</blockquote><br/><h2>正文</h2><p>    A题</p><p>    A 题算是统计吧，统计每个数字的个数，找到最多的那个，和2＊k比较即可。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D522\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里 </a></p><br/><br/><p>    B题</p><p>    B题求一个起m开始的区间，是的区间的代价不大于w.求最大区间，算是计算题吧。</p><p>    区间的代价是区间内每一个数字的位数之和乘以k.</p><p>    由于位数相同，代价相同，我们可以按位数来分配代价。</p><p>    假设m的位数是l,则首先算出位数是l的大于等于m的所有的数字的代价之和，如果可以分配，则这些在答案的区间内，然后看l+1位的所有数字，直到某一位不可以，然后我们只需要判断那一位可以分配多少个数字即可。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D523\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><br/><br/><p>    C题</p><p>    C题是贪心吧，cf上有个词叫做双指针题。</p><p>    告诉你n个数字，一个数字k可以和大于等于2*k的数字组队，组过队的不能在组队。<br/>    求最多可以组多少个队。<br/>    这个假设答案是m,则我们去最小的m个数和最大的m个数一定可以组成这个队。</p><p>    所以很多人用的二分，其实可以直接扫描一遍确定。</p><p>    由于m&lt;=n/2,所以我们只需要挑最小的m个数，然后在后n/2个数中挑m个合法的数即可。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D524\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><br/><p>    D题</p><p>    d题是dp题。</p><p>    一个合法矩阵是这个矩阵里所有的元素都是0的矩阵。</p><p>    求一个矩阵中有多少个这样的子矩阵。</p><p>    设这个子矩阵是(a,b)(c,d),(a,b)代表左上角,(c,d)代表右下角,str[a][b][c][d]代表这个子矩阵的答案。<br/>    则可以写出状态转移方程：str[a][b][c][d] = str[a][b][c-1][d] + str[a][b][c][d-1] - str[a][b][c-1][d-1] + f(a,b,c,d);<br/>    f(a,b,c,d)代表在矩阵(a,b)(c,d)中以(c,d)为右下角的合法子矩阵的个数。<br/>    对于f函数，可以从(c,d)向左扫描，求出每列0的告诉，则合法子矩阵的最高高度就是所有列中最低的告诉，假设(c,j)到(c,d)的最低高度是h，则在矩阵(a,b)(c,d)中以(c,j),(c,d)为底边的合法矩阵的个数就是h.<br/>    对于这个f函数，求最小值可以O(1)转移，所以求f函数需要O(n)的复杂度。<br/>    这样综合复杂度就是O(n^5).</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D525\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里 </a></p><br/><p>    E题</p><p>    还是DP.</p><p>    告诉你m个时间，每个时间根据你现在的位置和那个时间制定的位置，你可以得到一定的快乐，这个快乐有一个公式算出来。</p><p>    你是可以移动的，每秒最多可以移动d个单位长度.</p><p>    求可以获得的最大快乐。</p><p>    假设上一个时间内你站在所有位置的最大快乐都算出来了，则这个时间内的每个位置的最大快乐也可以用O(n)的时间算出来。</p><p>    这样你就可以使用O(mn)的时间算出最终每个位置的最大快乐。</p><p>    答案就是所有位置中快乐的最大值。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D526\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><blockquote>这篇文章同时在 tiankonguse 的个人博客<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D527\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">同步</a></blockquote>", 
            "topic": [], 
            "comments": [
                {
                    "userName": "铃儿响叮当", 
                    "userLink": "https://www.zhihu.com/people/44f38256038a85ff7aff87ea17feb2ee", 
                    "content": "竟然在知乎上看到CF的解题报告！！！作为一个退役acmer帮顶。快折叠我。sad", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "tiankonguse", 
                            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
                            "content": "退役照样可以写cf", 
                            "likes": 0, 
                            "replyToAuthor": "铃儿响叮当"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/19610734", 
            "userName": "tiankonguse", 
            "userLink": "https://www.zhihu.com/people/d9d971fb18851bda86c7fd17bb0c056d", 
            "upvote": 1, 
            "title": "Codeforces Round #211 (Div. 2)解题报告", 
            "content": "<h2>前言</h2><blockquote>    这次比赛都是水题，不过自己还是失误了。</blockquote><br/><h2>正文</h2><p>    A题</p><p>    A 题算是模拟题吧，把一个数字按算盘的形式输出。</p><p>    注意边界0即可。</p><p>    建议先把0到9的算盘表示形式存在字符串中，然后直接输出即可。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D444\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里 </a></p><br/><p>    B题</p><p>    B题求长度为m的连续区间和的最值问题。</p><p>    一般的思路是先求出前k个数的和，算是一个答案。然后加一个，前面减一个，这样绝对正确。</p><p>    我的方法：我是先求出0到每个位置的区间和，然后用相减的方法来算的，结果最后多算了一个，悲剧。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D445\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><br/><p>    C题</p><p>    C题是字符串题，属于贪心吧。</p><p>    当有三个是，删掉一个不存在歧义，所以直接删即可。</p><p>    但是存在&#34;aabb&#34;时是删a还是删b呢？</p><p>    由于题意要求删除操作至少，所以删除b最好，因为b后面可能还有cc,但是删除b是就不需要考虑b后面有什么了。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D446\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><br/><p>    D题</p><p>    d题是典型的二分题。</p><p>    如果能买r辆车，那么一定可以买小于r辆的车，大于r辆车的一定买不了。</p><p>    所以我们直接编一个函数判断买r辆车时候可以买。</p><p>    由于要买r辆车，我们显然让最有钱的r个人买最便宜的r辆车了，然后对于这r个人与r辆车也是钱少的买便宜的，钱多的买贵的，是一一对应的，所以我们可以O(r)时间内判断。</p><p>    所以人和车都排序后，二分买的车，复杂度O(n*log(n)).</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D447\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里 </a></p><br/><p>    E题</p><p>    这道题当时过的人不多，主要是没想到暴力可以过。复杂度有O(2*n*m*r)了。</p><p>    简单的说就是先算出某个位置是中心时的面积，以及某个位置右边的中心中，最大面积以及个数。</p><p>    有了这两个信息，我们只需要枚举中心，然后找到其他中心的最大值及个数即可。</p><p>    详见<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D451\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a></p><br/><blockquote>这篇文章同时在 tiankonguse 的个人博客<a href=\"https://link.zhihu.com/?target=http%3A//tiankonguse.com/record/record.php%3Fid%3D452\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">同步</a></blockquote>", 
            "topic": [], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/tiankonguse"
}
