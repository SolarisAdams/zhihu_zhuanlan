{
    "title": "《Linux C/C++ 杂记》", 
    "description": "Linux、C、C++等日常学习记录", 
    "followers": [
        "https://www.zhihu.com/people/233whj", 
        "https://www.zhihu.com/people/wei-98-52", 
        "https://www.zhihu.com/people/gao-chang-chun-36", 
        "https://www.zhihu.com/people/appleleaf", 
        "https://www.zhihu.com/people/zhang-xin-hao-11", 
        "https://www.zhihu.com/people/windybing", 
        "https://www.zhihu.com/people/spongebob-53-24", 
        "https://www.zhihu.com/people/zhao-si-shu-84", 
        "https://www.zhihu.com/people/ji-zhi-shao-nian-14", 
        "https://www.zhihu.com/people/xiao-ke-xue", 
        "https://www.zhihu.com/people/oliver-kahn-60", 
        "https://www.zhihu.com/people/reader2018", 
        "https://www.zhihu.com/people/wang-xu-chao-94", 
        "https://www.zhihu.com/people/xu-cheng-38-81", 
        "https://www.zhihu.com/people/tiei", 
        "https://www.zhihu.com/people/ali-61-67-7", 
        "https://www.zhihu.com/people/young-dennis", 
        "https://www.zhihu.com/people/tian-zhi-dao-99-76", 
        "https://www.zhihu.com/people/liu-hao-chen-18", 
        "https://www.zhihu.com/people/kang-shao-1990", 
        "https://www.zhihu.com/people/zhang-an-yan", 
        "https://www.zhihu.com/people/osra7777", 
        "https://www.zhihu.com/people/spacefan", 
        "https://www.zhihu.com/people/liu-hong-shang-93", 
        "https://www.zhihu.com/people/he-tong-hai-53", 
        "https://www.zhihu.com/people/world-hello-74-14", 
        "https://www.zhihu.com/people/lin-lin-1-78-2", 
        "https://www.zhihu.com/people/san-xie-chong-3", 
        "https://www.zhihu.com/people/liu-yang-yang-68-69", 
        "https://www.zhihu.com/people/freeloopsj", 
        "https://www.zhihu.com/people/gebenxiang", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/liu-kai-jie-11", 
        "https://www.zhihu.com/people/hai-lan-xin", 
        "https://www.zhihu.com/people/tom-pareto", 
        "https://www.zhihu.com/people/worewolf", 
        "https://www.zhihu.com/people/clever-93-11", 
        "https://www.zhihu.com/people/ming-yu-66-56", 
        "https://www.zhihu.com/people/airing-blue", 
        "https://www.zhihu.com/people/exciting-gg", 
        "https://www.zhihu.com/people/jiangyongshui", 
        "https://www.zhihu.com/people/yao-yi-zheng-84", 
        "https://www.zhihu.com/people/dongzhuo", 
        "https://www.zhihu.com/people/noodle-zhang", 
        "https://www.zhihu.com/people/omm-chdn", 
        "https://www.zhihu.com/people/zhuzhu-zhuzhu", 
        "https://www.zhihu.com/people/tianrui007", 
        "https://www.zhihu.com/people/Zou.yu", 
        "https://www.zhihu.com/people/steel-13-83", 
        "https://www.zhihu.com/people/yang-yi-73-93", 
        "https://www.zhihu.com/people/xie-tao-47-50", 
        "https://www.zhihu.com/people/aewgtgwr", 
        "https://www.zhihu.com/people/linuxcpp"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/60761450", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 4, 
            "title": "Shell与子Shell中环境变量传递问题", 
            "content": "<p>在shell编程中为了程序尽可能模块化与简洁，除了可以用函数的方式，另一种常用方法就是将不同的功能单独写在不同的脚本文件中。在父脚本调用子脚本的过程中，往往会涉及将父脚本中的变量传入子脚本中，或者将子脚本的变量传递到父脚本中，这里就会经常出现一些令人困惑的问题。要么父脚本的变量传递不进去子脚本，要么子脚本中的变量父脚本也获取不到。这里对父脚本调用子脚本，及其变量传递问题做一些总结。</p><p>父脚本与子脚本示例代码如下，在父子脚本中分别export一个变量。然后在父脚本中分别尝试三种不同的调用方式，在子脚本中获取父脚本的变量，在父脚本中获取子脚本中的变量。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e921829b5de733a86661571d9f4fadf4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb\" width=\"567\" data-original=\"https://pic1.zhimg.com/v2-e921829b5de733a86661571d9f4fadf4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;567&#39; height=&#39;686&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"567\" data-original=\"https://pic1.zhimg.com/v2-e921829b5de733a86661571d9f4fadf4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e921829b5de733a86661571d9f4fadf4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0155332f43736f0ef05d3c397c03d3ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic2.zhimg.com/v2-0155332f43736f0ef05d3c397c03d3ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic2.zhimg.com/v2-0155332f43736f0ef05d3c397c03d3ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0155332f43736f0ef05d3c397c03d3ed_b.jpg\"/></figure><p>三种不同的调用方式对应结果如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-140324a7f490fcd410f76b280bf2029a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic3.zhimg.com/v2-140324a7f490fcd410f76b280bf2029a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;734&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"734\" data-original=\"https://pic3.zhimg.com/v2-140324a7f490fcd410f76b280bf2029a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-140324a7f490fcd410f76b280bf2029a_b.jpg\"/></figure><p>对这三种方式做个总结：</p><p>1、<b>./子脚本</b>，此时，会fork一个子shell来运行此脚本，会继承来自父shell的环境变量（注意必须用export声明，否则无法传递），但是子shell中的环境变量不会返回到父shell中。【两个进程】</p><p>2、<b>.[空格]./子脚本</b>，此时，相当于函数中的内联函数(inline)的概念，子脚本中的内容会在此处通通展开，此时相当于在一个shell环境中执行所有的脚本内容，所以，此时父子脚本中任何变量都可以共享（注意定义变量的顺序，在使用前声明）。【一个进程】</p><p>3、<b>exec ./子脚本</b>，此时，相当于将接下来要执行的进程下文进行了替换，直接用子脚本中的内容替换了原来的进程内容，同时会继承之前的环境变量，原来的执行内容相当于不存在了，直接执行完此子脚本，整个流程就结束了。【一个进程】</p><p>以上父子脚本调用的执行流程可以用pstree命令加以验证。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a529ff245a38553171039a278658a9ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-a529ff245a38553171039a278658a9ff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-a529ff245a38553171039a278658a9ff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a529ff245a38553171039a278658a9ff_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "shell 脚本", 
                    "tagLink": "https://api.zhihu.com/topics/19617864"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60333157", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 2, 
            "title": "C语言中定义字符串的两种方式及其比较", 
            "content": "<p>先看如下代码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a340f9f59592cda391cf26f3fdaef1ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"1050\" data-original=\"https://pic3.zhimg.com/v2-a340f9f59592cda391cf26f3fdaef1ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1050&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1050\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1050\" data-original=\"https://pic3.zhimg.com/v2-a340f9f59592cda391cf26f3fdaef1ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a340f9f59592cda391cf26f3fdaef1ee_b.jpg\"/></figure><p>以上用两种方式定义一个字符串：</p><p>1、定义一个char * 类型指针，指向字符串首字符首地址。</p><p>2、定义一个数组，数组里存放元素为字符串各个字符+&#39;\\0&#39;,其中&#39;\\0&#39;为码0值，编译器会自动在字符串的末尾添加此值。</p><p>先看这两个&#34;变量&#34;分别是存在内存的哪个区域，（后面可知string1为常量）修改代码如下，打印这两个“变量”的内存地址，查看运行结果：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-28f43694bf2bd0dbfca97ae05fef1df5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1306\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1306\" data-original=\"https://pic2.zhimg.com/v2-28f43694bf2bd0dbfca97ae05fef1df5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1306&#39; height=&#39;794&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1306\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1306\" data-original=\"https://pic2.zhimg.com/v2-28f43694bf2bd0dbfca97ae05fef1df5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-28f43694bf2bd0dbfca97ae05fef1df5_b.jpg\"/></figure><p>查看进程的内存分布情况，（详情请查看：<a href=\"https://zhuanlan.zhihu.com/p/55436216\" class=\"internal\">RobotCode俱乐部：手撕虚拟内存（1）——字符串在虚拟内存中的段位置与/proc虚拟文件系统</a>），string1内存首地址为<b>0x80485a0</b>，string2内存首地址为<b>0bfaebfd8</b>。如下图，可知这两种定义方式，一种位于只读区（<b>0x8048000 &lt; 0x80485a0 &lt; 0x8049000</b>），一种位于Stack区(<b>0xbfacd000 &lt; 0bfaebfd8 &lt; 0xbfaee000</b>)。可知，string1为常量（只读的，权限为r），在编译时就确定了。string2存放在栈上，运行时确定。这也决定了，定义string1的方式适用于定义字符串常量，string2方式适用于字符串变量可能需要被修改的情况。同时需要注意的是，未必定义在函数体里的“变量”都会分布在栈上，如这里的字符串常量，及static修饰的局部变量，他们都是分布在<b>全局静态区</b>，由编译器在编译时决定，而非函数运行时动态分配。另外全局静态区的变量生命期与整个进程的生命期相同，大于等于函数的生命期。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8b1925c1469004774f4013e94e455004_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"273\" class=\"origin_image zh-lightbox-thumb\" width=\"735\" data-original=\"https://pic1.zhimg.com/v2-8b1925c1469004774f4013e94e455004_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;735&#39; height=&#39;273&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"273\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"735\" data-original=\"https://pic1.zhimg.com/v2-8b1925c1469004774f4013e94e455004_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8b1925c1469004774f4013e94e455004_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610306"
                }
            ], 
            "comments": [
                {
                    "userName": "指伤弦断", 
                    "userLink": "https://www.zhihu.com/people/67e84fbb3b893db2648f4486037f2a6d", 
                    "content": "<p>解决了使用strtok一直segment fault的问题，传入的字符串声明只能是char str[]这种。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60329896", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 0, 
            "title": "SecureCRT中只换行不回车的问题", 
            "content": "<p>在SecureCRT中有时会遇到由于Windows的换行和Unix的换行控制字符不同的问题（\\r\\n-\\n），导致显示如下图所示的“阶梯”，又不想到源码中一个个改控制字符，此时可以通过配置SecureCRT的配置选项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f6cd7a07a899af6fbdfe203214b32af7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"937\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb\" width=\"937\" data-original=\"https://pic4.zhimg.com/v2-f6cd7a07a899af6fbdfe203214b32af7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;937&#39; height=&#39;193&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"937\" data-rawheight=\"193\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"937\" data-original=\"https://pic4.zhimg.com/v2-f6cd7a07a899af6fbdfe203214b32af7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f6cd7a07a899af6fbdfe203214b32af7_b.jpg\"/></figure><p>打开“会话选项”，如下图，勾选“新行模式”：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-11b6fa299e36d58a011974b16905ba77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"542\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb\" width=\"542\" data-original=\"https://pic4.zhimg.com/v2-11b6fa299e36d58a011974b16905ba77_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;542&#39; height=&#39;502&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"542\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"542\" data-original=\"https://pic4.zhimg.com/v2-11b6fa299e36d58a011974b16905ba77_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-11b6fa299e36d58a011974b16905ba77_b.jpg\"/></figure><p>上图所示每次重连就会重新不换行。</p><p>改成如下图所示，这样每次重连之后，也能正常换行。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5a176f6c1e1e4542c326d66ee80b9c1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb\" width=\"553\" data-original=\"https://pic1.zhimg.com/v2-5a176f6c1e1e4542c326d66ee80b9c1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;553&#39; height=&#39;511&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"511\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"553\" data-original=\"https://pic1.zhimg.com/v2-5a176f6c1e1e4542c326d66ee80b9c1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5a176f6c1e1e4542c326d66ee80b9c1c_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55436216", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 8, 
            "title": "手撕虚拟内存（1）——字符串在虚拟内存中的段位置与/proc虚拟文件系统", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack The Virtual Memory: C strings &amp; /proc - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><h2><b>介绍</b></h2><p>这是一系列关于虚拟内存的小文章/教程中的第一篇。我们的目标是学习一些计算机基础知识，但是是以一种不同的、更实际的方式。对于第一部分，我们将<b>使用/proc来查找和修改运行进程的虚拟内存中包含的变量</b>(在本例中是ASCII字符串)，并在此过程中学习一些很酷的东西。</p><h2><b>虚拟内存</b></h2><p>在计算中，<b>虚拟内存是一种同时使用硬件和软件实现的内存管理技术</b>。它将程序使用的内存地址(称为虚拟地址)映射到计算机内存中的物理地址。主内存(进程所见)以连续地址空间或连续段的集合的形式出现。操作系统管理虚拟地址空间，并将实际内存分配给虚拟内存。<b>CPU中的地址转换硬件，通常称为内存管理单元或MMU，自动将虚拟地址转换为物理地址。</b>操作系统中的软件可以扩展这些功能，以提供超过实际内存容量的虚拟地址空间，从而可以使用比计算机中实际存在的内存更多的内存。</p><p>虚拟内存的主要好处包括使应用程序不必管理共享内存空间，由于内存隔离而提高了安全性，并且能够使用分页技术使用比物理上可用的更多的内存。</p><p>在第2章中，我们将深入讨论更多细节，并对虚拟内存中的内容和位置进行一些事实检查。现在，这里有一些关键点，你应该知道：</p><ul><li>每个进程都有自己的虚拟内存</li><li>虚拟内存的数量取决于系统的体系结构</li><li>每个操作系统处理虚拟内存的方式不同，但是对于大多数现代操作系统，进程的虚拟内存是这样的：</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_b.jpg\"/></figure><p>如图所示，高内存地址中存放：</p><ul><li>命令行参数和环境变量</li><li>栈，“向下”增长。这可能看起来违反直觉，但这是在虚拟内存中实现堆栈的方式</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>在低内存地址，你可以找到:</p><ul><li>你的可执行文件(比这稍微复杂一些，但这足以理解本文的其余部分)</li><li>堆，“向上”生长。堆是动态分配的内存的一部分(即包含使用malloc分配的内存)。</li></ul><p>另外，请记住虚拟内存与RAM是不同的。</p><h2><b>C程序</b></h2><p>让我们从这个简单的C程序开始，探索字符串到底存在虚拟内存的哪个位置：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - uses strdup to create a new string, and prints the\n</span><span class=\"cm\"> * address of the new duplcated string\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if malloc failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span>\n\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">strdup</span><span class=\"p\">(</span><span class=\"s\">&#34;Holberton&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t allocate mem with malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>在继续之前，花点时间想一想。你认为strdup如何创建字符串“Holberton”的副本?你如何证实?</p><p><b><i>strdup</i></b></p><p>strdup必须创建一个新字符串，因此它首先必须为它预留空间。函数strdup可能正在使用malloc。快速浏览一下手册页就可以确认:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f3971f9d85c091e7dad8498fc2b1ec4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"793\" data-original=\"https://pic1.zhimg.com/v2-f3971f9d85c091e7dad8498fc2b1ec4c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;793&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"793\" data-original=\"https://pic1.zhimg.com/v2-f3971f9d85c091e7dad8498fc2b1ec4c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f3971f9d85c091e7dad8498fc2b1ec4c_b.jpg\"/></figure><p>在继续之前，花点时间想一想。根据我们前面关于虚拟内存的讨论，你认为重复字符串将位于何处?在高或低内存地址?</p><p>可能在较低的地址(堆中)。让我们编译并运行我们的小C程序来测试我们的假设：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b94cb806eebdb2b70269d1fbbb677e61_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-b94cb806eebdb2b70269d1fbbb677e61_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic2.zhimg.com/v2-b94cb806eebdb2b70269d1fbbb677e61_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b94cb806eebdb2b70269d1fbbb677e61_b.png\"/></figure><p>复制的字符串位于地址0x80e5008。太好了。但这是一个低或高地址？</p><h2><b>进程的虚拟内存有多大</b></h2><p>进程的虚拟内存大小取决于你的系统架构。在这个例子中,我使用一个32位的机器,所以理论上每个进程的虚拟内存的大小是2 ^ 32字节。理论上，可能的最高内存地址是0xFFFFFFFF，最低内存地址是0x0。</p><p>0x80e5008与0xFFFFFFFF相比很小，所以重复的字符串可能位于较低的内存地址。在查看proc文件系统时，我们将能够确认这一点)。</p><p><b>proc文件系统</b></p><p>如果您列出/proc目录的内容，您可能会看到很多文件。我们将集中讨论其中两项:</p><p>/proc/[pid]/ mem</p><p>/proc/[pid] /maps</p><p><b><i>mem</i></b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ed8e170ec81647979df8928f4596dad9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"689\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb\" width=\"689\" data-original=\"https://pic2.zhimg.com/v2-ed8e170ec81647979df8928f4596dad9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;689&#39; height=&#39;67&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"689\" data-rawheight=\"67\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"689\" data-original=\"https://pic2.zhimg.com/v2-ed8e170ec81647979df8928f4596dad9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ed8e170ec81647979df8928f4596dad9_b.png\"/></figure><p>太棒了!那么，我们可以访问和修改任何进程的整个虚拟内存吗?</p><p><i><b>maps</b></i></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-176e2f963b8265adb384b1f7e3e3a292_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic3.zhimg.com/v2-176e2f963b8265adb384b1f7e3e3a292_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;727&#39; height=&#39;541&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"727\" data-original=\"https://pic3.zhimg.com/v2-176e2f963b8265adb384b1f7e3e3a292_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-176e2f963b8265adb384b1f7e3e3a292_b.jpg\"/></figure><p>这意味着我们可以查看/proc/[pid]/mem文件来定位正在运行的进程的堆。如果可以从堆中读取，就可以定位要修改的字符串。如果我们可以写堆，我们可以用我们想要的替换这个字符串。</p><p>我们通过cat /proc/[pid]/maps再次确认，字符串属于内存的哪个段中：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-727a884fedc1a0edf3a2b5459b22a2fe_b.png\" data-size=\"normal\" data-rawwidth=\"442\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb\" width=\"442\" data-original=\"https://pic3.zhimg.com/v2-727a884fedc1a0edf3a2b5459b22a2fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;442&#39; height=&#39;52&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"442\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"442\" data-original=\"https://pic3.zhimg.com/v2-727a884fedc1a0edf3a2b5459b22a2fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-727a884fedc1a0edf3a2b5459b22a2fe_b.png\"/><figcaption>程序里加了暂停，让其停在此处，方便我们查看maps</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a8d15272d5cdc08cc6ad10953af38fcd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-a8d15272d5cdc08cc6ad10953af38fcd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;437&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic2.zhimg.com/v2-a8d15272d5cdc08cc6ad10953af38fcd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a8d15272d5cdc08cc6ad10953af38fcd_b.jpg\"/></figure><p>--未完待续，下篇讨论如何修改堆中的数据</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "6666", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "新技能get", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55455350", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 1, 
            "title": "手撕虚拟内存（2）——修改虚拟内存中的堆数据", 
            "content": "<p>使用原文中的python脚本对堆中的数据进行改写，失败，正在找原因。</p><p>后面再更新上，这里先占位，继续虚拟内存其他的讨论。</p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "什么脚本", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55455897", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 1, 
            "title": "手撕虚拟内存（3）——数据在虚拟内存中的分布情况", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack The Virtual Memory: C strings &amp; /proc - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><p>我们之前讨论过在进程的虚拟内存中可以找到什么，以及在哪里可以找到它。今天，我们将尝试“重建”下图，方法是打印程序中各个元素的地址。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-de0da47dd553d1360c9cd205a39a48f0_b.jpg\"/></figure><h2><b>The stack（栈）</b></h2><p>我们要在图中定位的第一个区域就是栈。我们知道在C语言中，局部变量位于栈上。如果我们打印一个局部变量的地址，它应该会告诉我们在虚拟内存中哪里可以找到栈。让我们使用下面的程序来找出各种元素在内存中的分布：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - print locations of various elements\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>（<i>译者注：实际程序被我修改了下，在printf后加了while(1);以方便我们观察maps</i>）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-16552f91249aac31a741a6037525c225_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-16552f91249aac31a741a6037525c225_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;620&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"620\" data-original=\"https://pic2.zhimg.com/v2-16552f91249aac31a741a6037525c225_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-16552f91249aac31a741a6037525c225_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4bf51f85bbbef283208afe98eceb23c6_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"50\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;50&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"50\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic3.zhimg.com/v2-4bf51f85bbbef283208afe98eceb23c6_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fa2f01819f9deccea57ce315d2b609a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic4.zhimg.com/v2-fa2f01819f9deccea57ce315d2b609a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic4.zhimg.com/v2-fa2f01819f9deccea57ce315d2b609a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fa2f01819f9deccea57ce315d2b609a3_b.jpg\"/></figure><p>如上图所示，局部变量显然们于[stack]区。（<i>译者注：<b>但是静态局部变量不是放在stack区，而是放在heap区</b>，后面再讨论</i>）</p><h2><b>The heap（堆）</b></h2><p>当你为变量malloc空间时，将使用堆。让我们添加一行代码来使用malloc，看看malloc返回的内存地址位于哪里(main-1.c)：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - print locations of various elements\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87c007281637f8a8d07163b4055f4cb9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"361\" data-rawheight=\"57\" class=\"content_image\" width=\"361\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;361&#39; height=&#39;57&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"361\" data-rawheight=\"57\" class=\"content_image lazy\" width=\"361\" data-actualsrc=\"https://pic2.zhimg.com/v2-87c007281637f8a8d07163b4055f4cb9_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9353d85edae2ff925790e167dbf25e01_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic2.zhimg.com/v2-9353d85edae2ff925790e167dbf25e01_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic2.zhimg.com/v2-9353d85edae2ff925790e167dbf25e01_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9353d85edae2ff925790e167dbf25e01_b.jpg\"/></figure><p>如上图很显然可以看出堆与栈的分布情况。可以画出如下图所示的图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f1240a3f23a6a1c2953be3fd6e882a77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-f1240a3f23a6a1c2953be3fd6e882a77_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-f1240a3f23a6a1c2953be3fd6e882a77_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f1240a3f23a6a1c2953be3fd6e882a77_b.jpg\"/></figure><h2><b>The executable（可执行文件）</b></h2><p>你的程序也在虚拟内存中。如果我们打印主函数的地址，我们应该知道与栈和堆相比，程序的位置。让我们看看它是否像预期的那样位于堆下面(main-2.c)：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - print locations of various elements\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-135fce11a9d79050763b3b1af4e4c120_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"84\" class=\"content_image\" width=\"406\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;406&#39; height=&#39;84&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"84\" class=\"content_image lazy\" width=\"406\" data-actualsrc=\"https://pic1.zhimg.com/v2-135fce11a9d79050763b3b1af4e4c120_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-542c1b3d39af3465695a9e117256ebc4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic1.zhimg.com/v2-542c1b3d39af3465695a9e117256ebc4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic1.zhimg.com/v2-542c1b3d39af3465695a9e117256ebc4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-542c1b3d39af3465695a9e117256ebc4_b.jpg\"/></figure><p>看起来我们的程序代码的确位于堆之下，这是意料之中的。</p><p>但我们要确保这是程序的实际代码，而不是指向其他位置的指针。让我们用objdump来分析我们的程序2，看看主函数的“内存地址”:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2a995a552b866d458e52f55e91ad368a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"729\" data-original=\"https://pic3.zhimg.com/v2-2a995a552b866d458e52f55e91ad368a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;729&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"729\" data-original=\"https://pic3.zhimg.com/v2-2a995a552b866d458e52f55e91ad368a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2a995a552b866d458e52f55e91ad368a_b.jpg\"/></figure><p>我们找到了完全相同的地址(0x8048464)。如果你仍然有任何疑问，可以打印位于这个地址的第一个字节，以确保它们匹配objdump 的输出，看如下程序：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - print locations of various elements\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;First bytes of the main function:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%02x &#34;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cbb723adf178a1e9c2470cde54cdfc47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic4.zhimg.com/v2-cbb723adf178a1e9c2470cde54cdfc47_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic4.zhimg.com/v2-cbb723adf178a1e9c2470cde54cdfc47_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cbb723adf178a1e9c2470cde54cdfc47_b.jpg\"/></figure><p>如上图所示，完全符合预期。更新下我们通过实验确认后的内存分布图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d9386892b160527f9674d7ffbcc0a1a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-d9386892b160527f9674d7ffbcc0a1a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-d9386892b160527f9674d7ffbcc0a1a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d9386892b160527f9674d7ffbcc0a1a3_b.jpg\"/></figure><p>本篇到此为止，下篇再讨论命令行参数与环境变量在内存中的分布情况</p><p>--未完待续</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55463362", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 1, 
            "title": "手撕虚拟内存（4）——命令行参数和环境变量在内存中的分布", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-c-strings-proc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack The Virtual Memory: C strings &amp; /proc - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><h2><b>Command line arguments and environment variables（命令行参数和环境变量）</b></h2><p>main函数可以带参数:</p><p>1、命令行参数</p><ul><li>main函数的第一个参数(通常称为argc或ac)是命令行参数的数量</li><li>main函数的第二个参数(通常称为argv或av)是指向参数(C字符串)的指针数组</li></ul><p>2、环境变量</p><ul><li>主函数的第三个参数(通常称为env或envp)是指向环境变量(C字符串)的指针数组</li></ul><p>让我们看看这些元素在进程虚拟内存中的位置:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - print locations of various elements\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ac</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">av</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n        <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n                <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;First bytes of the main function:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%02x &#34;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of arguments: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">av</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Addresses of the arguments:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ac</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[%s]:%p &#34;</span><span class=\"p\">,</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of environment variables: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">env</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the first environment variable: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]));</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7da1a2834f38d33d9f77700e6c357923_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-7da1a2834f38d33d9f77700e6c357923_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-7da1a2834f38d33d9f77700e6c357923_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7da1a2834f38d33d9f77700e6c357923_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-56f7d73af8a6babea0142530b74dc394_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"731\" data-original=\"https://pic1.zhimg.com/v2-56f7d73af8a6babea0142530b74dc394_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;731&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"731\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"731\" data-original=\"https://pic1.zhimg.com/v2-56f7d73af8a6babea0142530b74dc394_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-56f7d73af8a6babea0142530b74dc394_b.jpg\"/></figure><p>这些元素在栈之上，但现在我们知道了确切的顺序:</p><p><code>stack</code>(<b>0xbfd14214</b>) &lt;<code>argv</code>(<b>0xbfd142c4</b>) &lt;<code>env</code>(<b>0xbfd142d8</b>) &lt; arguments (from <b>0xbfd16371 </b>to<b> 0xbfd16385</b>+<code>8</code>(<code>8</code>= size of the string<code>&#34;school&#34;</code>+<code>1</code>for the<code>&#39;\\0&#39;</code>char)) &lt; environment variables (starting at <b>0xbfd1638d</b>).</p><p>实际上，我们还可以看到，在内存中，所有的命令行参数都是紧挨着的，也紧挨着环境变量。</p><h2><b>argv和env数组是相邻的吗?</b></h2><p>数组argv有5个元素(命令行中有4个参数+最后的1个NULL元素(argv总是以NULL结束以标记数组的结束))。每个元素都是一个指向char的指针，由于我们是在32位机器上，所以指针是4字节(如果你想确定，可以使用C运算符sizeof()来获取指针的大小)。因此，argv数组的大小为5 * 4 = 20，转16进制为0x14。如果我们将这个值加到数组开头的地址<b>0xbfd142c4</b>，我们得到…<b>0xbfd142d8</b> (恰好是env数组的地址)！<b>所以这两个数组在内存中相邻</b>。</p><h2><b>第一个命令行参数是否存储在env数组之后？</b></h2><p>为了检查这个，我们需要知道env数组的大小。我们知道它以一个空指针结束，所以为了得到它的元素数量，我们只需要遍历它，检查“current”元素是否为空。以下是更新后的C代码(main-5.c):</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**                                                                                                      \n</span><span class=\"cm\"> * main - print locations of various elements                                                            \n</span><span class=\"cm\"> *                                                                                                       \n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ac</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">av</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n     <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;First bytes of the main function:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%02x &#34;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of arguments: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">av</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Addresses of the arguments:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ac</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[%s]:%p &#34;</span><span class=\"p\">,</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of environment variables: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">env</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the first environment variables:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\t</span><span class=\"s\">[%p]:</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"cm\">/* size of the env array */</span>\n     <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"cm\">/* the NULL pointer */</span>\n     <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Size of the array env: %d elements -&gt; %d bytes (0x%x)</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n     <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-39ca814edf422725a0a69d9226eb259c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic1.zhimg.com/v2-39ca814edf422725a0a69d9226eb259c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;737&#39; height=&#39;315&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"315\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"737\" data-original=\"https://pic1.zhimg.com/v2-39ca814edf422725a0a69d9226eb259c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-39ca814edf422725a0a69d9226eb259c_b.jpg\"/></figure><p>0xe0+0xbf9fa918=<b>0xBF9FA9F8 != 0xbf9fc372，所以第一个命令行参数不是存储在env数组之后！</b></p><p>至此，更新虚拟内存数据分布图如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5c959947c915de8d056c69aece2c4bb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-5c959947c915de8d056c69aece2c4bb9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-5c959947c915de8d056c69aece2c4bb9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5c959947c915de8d056c69aece2c4bb9_b.jpg\"/></figure><p>--未完待续</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-494e2eef3c3c09f6dfc94f3443dd47d3_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55511340", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 1, 
            "title": "手撕虚拟内存（5）——栈真的是向下增长吗?", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-drawing-the-vm-diagram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the Virtual Memory: drawing the VM diagram - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><p>让我们调用一个函数并解决这个问题！如果这是真的，那么调用函数的变量在内存中比被调用函数的变量(main-6.c)要高。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**                                                                                                      \n</span><span class=\"cm\"> * f - print locations of various elements                                                               \n</span><span class=\"cm\"> *                                                                                                       \n</span><span class=\"cm\"> * Returns: nothing                                                                                      \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">void</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\n     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n     <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"p\">;</span>\n     <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[f] a = %d, b = %d, c = a * b = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[f] Adresses of a: %p, b = %p, c = %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**                                                                                                      \n</span><span class=\"cm\"> * main - print locations of various elements                                                            \n</span><span class=\"cm\"> *                                                                                                       \n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ac</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">av</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n     <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;First bytes of the main function:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%02x &#34;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of arguments: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">av</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Addresses of the arguments:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ac</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[%s]:%p &#34;</span><span class=\"p\">,</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of environment variables: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">env</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the first environment variables:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\t</span><span class=\"s\">[%p]:</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"cm\">/* size of the env array */</span>\n     <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"cm\">/* the NULL pointer */</span>\n     <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Size of the array env: %d elements -&gt; %d bytes (0x%x)</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n     <span class=\"n\">f</span><span class=\"p\">();</span>\n     <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c01c2ab56cd38a7c3d09ca702cace6b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"687\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"687\" data-original=\"https://pic2.zhimg.com/v2-c01c2ab56cd38a7c3d09ca702cace6b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;687&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"687\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"687\" data-original=\"https://pic2.zhimg.com/v2-c01c2ab56cd38a7c3d09ca702cace6b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c01c2ab56cd38a7c3d09ca702cace6b5_b.jpg\"/></figure><p>如上图所示，main函数中的变量a的地址为<b>0xbfeb4000 &gt; </b>函数f中的变量a的地址为<b>0xbfeb3fd4</b>。所以证实了栈的增长方向的确是向下的。</p><p>更新内存布局图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f8f7cf22fbe1ed5587f0e11d7c59cf70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-f8f7cf22fbe1ed5587f0e11d7c59cf70_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-f8f7cf22fbe1ed5587f0e11d7c59cf70_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f8f7cf22fbe1ed5587f0e11d7c59cf70_b.jpg\"/></figure><h2><b><code>/proc</code> </b></h2><p>让我们仔细检查/proc/[pid]/maps中到目前为止发现的所有内容(如果你不知道proc文件系统是什么，请参阅本系列的第一篇文章了解它)。</p><p>让我们添加一个getchar()到我们的程序，这样我们可以看看它的“/proc”(main-7.c)：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;string.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**                                                                                                      \n</span><span class=\"cm\"> * f - print locations of various elements                                                               \n</span><span class=\"cm\"> *                                                                                                       \n</span><span class=\"cm\"> * Returns: nothing                                                                                      \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">void</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\n     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n     <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span><span class=\"p\">;</span>\n     <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[f] a = %d, b = %d, c = a * b = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[f] Adresses of a: %p, b = %p, c = %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cm\">/**                                                                                                      \n</span><span class=\"cm\"> * main - print locations of various elements                                                            \n</span><span class=\"cm\"> *                                                                                                       \n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ac</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">av</span><span class=\"p\">,</span> <span class=\"kt\">char</span> <span class=\"o\">**</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">;</span>\n\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of a: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">);</span>\n     <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n     <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"s\">&#34;Can&#39;t malloc</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n          <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_FAILURE</span><span class=\"p\">);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Allocated space in the heap: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of function main: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;First bytes of the main function:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">15</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%02x &#34;</span><span class=\"p\">,</span> <span class=\"p\">((</span><span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">main</span><span class=\"p\">)[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of arguments: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">av</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Addresses of the arguments:</span><span class=\"se\">\\n\\t</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">ac</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[%s]:%p &#34;</span><span class=\"p\">,</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">av</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the array of environment variables: %p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">env</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Address of the first environment variables:</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n     <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;</span><span class=\"se\">\\t</span><span class=\"s\">[%p]:</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n     <span class=\"p\">}</span>\n     <span class=\"cm\">/* size of the env array */</span>\n     <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span>\n     <span class=\"p\">{</span>\n          <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n     <span class=\"p\">}</span>\n     <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"cm\">/* the NULL pointer */</span>\n     <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">);</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;Size of the array env: %d elements -&gt; %d bytes (0x%x)</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n     <span class=\"n\">f</span><span class=\"p\">();</span>\n     <span class=\"n\">getchar</span><span class=\"p\">();</span>\n     <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-31c4d320eb855608d7da8bbdf09fce07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-31c4d320eb855608d7da8bbdf09fce07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;322&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"322\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-31c4d320eb855608d7da8bbdf09fce07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-31c4d320eb855608d7da8bbdf09fce07_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b62745af22b94b157e1db7d60ae0d19b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb\" width=\"738\" data-original=\"https://pic4.zhimg.com/v2-b62745af22b94b157e1db7d60ae0d19b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;738&#39; height=&#39;345&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"738\" data-original=\"https://pic4.zhimg.com/v2-b62745af22b94b157e1db7d60ae0d19b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b62745af22b94b157e1db7d60ae0d19b_b.jpg\"/></figure><p>如上图所示，可以再次验证一些事实：</p><ol><li>局部变量位于栈中；</li><li>我们动态申请分配的内存位于堆区；</li><li>可执行文件位于<b>0x8048000-0x8049000</b>（4KB）区域；</li><li>环境变量和main函数参数也位于栈中，不是在栈之外！</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>这也带来了更多的问题：</p><ul><li>为什么我们的可执行文件用<b>不同的权限</b>“划分”成了三个不同的区域？</li><li>这两个区域里面是什么？</li></ul><p><b>08049000-0804a000 r--p 00000000 08:01 4992102    /home/yyctest/7</b></p><p><b>0804a000-0804b000 rw-p 00001000 08:01 4992102    /home/yyctest/7</b></p><ul><li>还有哪些区域呢？</li><li>为什么我们分配的内存不从堆的最开始开始(<b>0x8eea008 vs 0x8eea000</b>)？前8个字节的用途是什么?</li></ul><p>还有一个事实我们没有检查：堆实际上是向上增长的吗？</p><p>我们总有一天会知道的！但是在我们结束这一章之前，让我们用我们所学的知识来更新我们的图:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-84bd6e7fa64f74bb5012c409ec18f651_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-84bd6e7fa64f74bb5012c409ec18f651_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-84bd6e7fa64f74bb5012c409ec18f651_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-84bd6e7fa64f74bb5012c409ec18f651_b.jpg\"/></figure><p>通过简单地从我们的可执行文件中打印信息，我们学到了很多东西!但是我们仍然有一些有待解决的问题，我们将在以后的章节中探讨这些问题，以完成我们的虚拟内存图。同时，你应该试着自己去发现。</p><p>--未完待续</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55520043", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 2, 
            "title": "手撕虚拟内存（6）——malloc、堆和程序中断", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-malloc-the-heap-the-program-break/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the Virtual Memory: malloc, the heap &amp; the program break - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><h2><b>The heap（堆）</b></h2><p>在这一章中，我们将研究堆和malloc，以回答我们在前一章结尾时提出的一些问题:</p><ul><li>为什么我们分配的内存不从堆的最开始(0x2050010 vs 02050000)开始呢?前8个字节的用途是什么?</li><li>堆实际上是向上增长的吗?</li></ul><h2><b>malloc </b></h2><p>malloc是用于动态分配内存的常用函数。这个内存是在“堆”上分配的。</p><p>NOTE:malloc不是一个系统调用。</p><h2><b>No malloc, no [heap]</b></h2><p>让我们看看不调用malloc 的进程的内存区域。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - do nothing\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4fb8c250d270512992cd82ffbf693eb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-4fb8c250d270512992cd82ffbf693eb7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;732&#39; height=&#39;284&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"732\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"732\" data-original=\"https://pic4.zhimg.com/v2-4fb8c250d270512992cd82ffbf693eb7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4fb8c250d270512992cd82ffbf693eb7_b.jpg\"/></figure><p>从上面的映射文件中可以看到，没有分配[heap]区域。</p><h2><code><b>malloc(x)</b></code></h2><p> 让我们用一个调用malloc (1-main.c)的程序来做同样的事情:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - 1 call to malloc\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7d44f54e8caa2223a56a3439a130010e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic3.zhimg.com/v2-7d44f54e8caa2223a56a3439a130010e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic3.zhimg.com/v2-7d44f54e8caa2223a56a3439a130010e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7d44f54e8caa2223a56a3439a130010e_b.jpg\"/></figure><p>让我们检查malloc的返回值，以确保返回的地址位于堆区域(2-main.c):</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - prints the malloc returned address\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e530a1a4e1fa2f0a0e73ca9ed9e5805a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"40\" class=\"content_image\" width=\"379\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;379&#39; height=&#39;40&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"40\" class=\"content_image lazy\" width=\"379\" data-actualsrc=\"https://pic3.zhimg.com/v2-e530a1a4e1fa2f0a0e73ca9ed9e5805a_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-da60ea52aecdd217c84496a83ff6bf5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-da60ea52aecdd217c84496a83ff6bf5c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-da60ea52aecdd217c84496a83ff6bf5c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-da60ea52aecdd217c84496a83ff6bf5c_b.jpg\"/></figure><p>返回的地址在堆区域内。正如我们在前一章中所看到的，返回的地址并不完全从区域的开头开始;我们待会再看原因。</p><h2><b><code>strace</code>, <code>brk</code> and <code>sbrk</code></b></h2><p> malloc是一个“常规”函数(与系统调用相反)，因此它必须调用某种类型的syscall来操作堆。让我们用strace来找出答案。</p><p>strace是一个用于跟踪系统调用和信号的程序。任何程序在执行主函数之前都会使用一些系统调用。为了知道malloc使用哪些系统调用，我们将在调用malloc之前和之后添加一个write系统调用。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - let&#39;s find out which syscall malloc is using\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;BEFORE MALLOC</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;AFTER MALLOC</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ff2d680c98ab36f7962dec9fbcdcd04f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-ff2d680c98ab36f7962dec9fbcdcd04f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-ff2d680c98ab36f7962dec9fbcdcd04f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ff2d680c98ab36f7962dec9fbcdcd04f_b.jpg\"/></figure><p>malloc使用brk系统调用来操作堆。从brk手册页(man brk)，我们可以看到这个系统调用正在做什么:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-56c0f927c73cf47cca6775545fd7700e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic3.zhimg.com/v2-56c0f927c73cf47cca6775545fd7700e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;711&#39; height=&#39;107&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"711\" data-original=\"https://pic3.zhimg.com/v2-56c0f927c73cf47cca6775545fd7700e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-56c0f927c73cf47cca6775545fd7700e_b.png\"/></figure><p>程序中断是虚拟内存中超过程序数据区域当前结束位置的第一个位置的地址，如下图所示：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3a04234abcbe85c51cec4efece1fb84c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-3a04234abcbe85c51cec4efece1fb84c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-3a04234abcbe85c51cec4efece1fb84c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3a04234abcbe85c51cec4efece1fb84c_b.jpg\"/></figure><p>通过增加程序断点的值，通过brk或sbrk, malloc函数创建一个新的空间，然后进程可以使用这个空间来动态分配内存(使用malloc)，如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-76f9b1d676ce27e0bf6f973e46b52410_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-76f9b1d676ce27e0bf6f973e46b52410_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-76f9b1d676ce27e0bf6f973e46b52410_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-76f9b1d676ce27e0bf6f973e46b52410_b.jpg\"/></figure><p>堆实际上是程序数据段的扩展。</p><p>对brk(brk(0))的第一个调用将程序断点的当前地址返回给malloc。第二个调用是通过增加程序断点的值实际创建新内存的调用(从<b>0x8a33000- 0x8a54000</b>)。在上面的示例中，堆现在从<b>0x8a33000</b>开始，结束于<b>0x8a54000</b>。让我们再次检查/proc/[PID]/maps文件:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7693e9c630c055a34ad2d78db3521f9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic3.zhimg.com/v2-7693e9c630c055a34ad2d78db3521f9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;737&#39; height=&#39;343&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"737\" data-original=\"https://pic3.zhimg.com/v2-7693e9c630c055a34ad2d78db3521f9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7693e9c630c055a34ad2d78db3521f9e_b.jpg\"/></figure><p>maps文件里的输出完全匹配brk返回给malloc的指针。</p><p>这很好，但是等等，当我们只要求一个字节时，为什么malloc将堆增加<b>0x8a33000- 0x8a54000=0x21000</b>或135168字节呢?</p><p>这个问题下篇讨论，未完待续。</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55535264", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 7, 
            "title": "手撕虚拟内存（7）——多次调用malloc会发生什么？", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/hack-the-virtual-memory-malloc-the-heap-the-program-break/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the Virtual Memory: malloc, the heap &amp; the program break - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><p>如果我们多次调用malloc会发生什么?</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**\n</span><span class=\"cm\"> * main - many calls to malloc\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS\n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;BEFORE MALLOC #0</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;AFTER MALLOC #0</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;BEFORE MALLOC #1</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;AFTER MALLOC #1</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;BEFORE MALLOC #2</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;AFTER MALLOC #2</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;BEFORE MALLOC #3</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;AFTER MALLOC #3</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;%p</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n\n    <span class=\"n\">getchar</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">EXIT_SUCCESS</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6882ae99e08375fd384db100a25162f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-6882ae99e08375fd384db100a25162f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-6882ae99e08375fd384db100a25162f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6882ae99e08375fd384db100a25162f5_b.jpg\"/></figure><p>如上图可见，malloc不是每次调用时，都使用系统调用 brk。（<i>再一次说明了，封装函数与系统调用是不一样的</i>）</p><p>第一次，malloc为程序创建一个新空间(堆)(通过增加程序中断位置)。接下来的时间，malloc使用相同的空间给我们的程序“新的”内存块。这些“新”内存块是以前使用brk分配的内存的一部分。这样，malloc就不必每次调用时都使用syscalls (brk)，从而使malloc——以及使用malloc的程序——更快。它还允许malloc和free优化内存的使用。（<i>译者注：这就是为什么要对系统调用进行封装的原因，系统调用也是中断，是会产生一定的性能开销的</i>）</p><p>查看maps文件，确定是否只分配了这一个堆：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fbeb2695d1140596d94f225f01f9fd87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"735\" data-original=\"https://pic4.zhimg.com/v2-fbeb2695d1140596d94f225f01f9fd87_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;735&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"735\" data-original=\"https://pic4.zhimg.com/v2-fbeb2695d1140596d94f225f01f9fd87_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fbeb2695d1140596d94f225f01f9fd87_b.jpg\"/></figure><p>完全符合我们上面strace输出的情况。</p><h2><b>改造malloc</b></h2><p>基于以上，现在可以编写自己的malloc函数，不使用C库中的函数，来使得每次调用malloc时都分配个堆：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;unistd.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"cm\">/**                                                                                            \n</span><span class=\"cm\"> * malloc - naive version of malloc: dynamically allocates memory on the heap using sbrk                         \n</span><span class=\"cm\"> * @size: number of bytes to allocate                                                          \n</span><span class=\"cm\"> *                                                                                             \n</span><span class=\"cm\"> * Return: the memory address newly allocated, or NULL on error                                \n</span><span class=\"cm\"> *                                                                                             \n</span><span class=\"cm\"> * Note: don&#39;t do this at home :)                                                              \n</span><span class=\"cm\"> */</span>\n<span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">malloc</span><span class=\"p\">(</span><span class=\"n\">size_t</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">previous_break</span><span class=\"p\">;</span>\n\n    <span class=\"n\">previous_break</span> <span class=\"o\">=</span> <span class=\"n\">sbrk</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">);</span>\n    <span class=\"cm\">/* check for error */</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">previous_break</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"cm\">/* on error malloc returns NULL */</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">NULL</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">previous_break</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>丢失的0x8字节</b></h2><p><b>（译者注：原文中作者是64位系统，跟这里不一样，我测试环境是32位系统，所以数值跟原文有出如，比如64位系统上，这里丢失的是0x10，即16个字节，32位只有8个字节）</b></p><p>如果我们查看前一个程序的输出，我们可以看到malloc返回的第一个内存地址不是从堆的开头开始，而是从后面的0x8字节开始:<b>0x8748008</b> vs <b>0x8748000</b>。另外，当我们第二次调用malloc(1024)时，地址应该是<b>0x8748008</b>(第一次调用malloc的返回值)+ 1024(或者十六进制中的0x400，因为第一次调用malloc需要1024字节)=<b> 0x8748408</b>。但是第二次调用malloc的实际返回值是<b>0x8748410</b>。我们又丢失了0x8字节，即中间好像丢了8个字节，后续调用也是如此。</p><p>那么这些“丢失的”0x8字节是出于什么目的，以及这8个字节的实际内容是什么？</p><p>--未完待续</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "虚拟内存", 
                    "tagLink": "https://api.zhihu.com/topics/19831239"
                }
            ], 
            "comments": [
                {
                    "userName": "RobotCode俱乐部", 
                    "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
                    "content": "<p>原文中还有些部分没有翻译，是关于栈上数据的修改，这里先不更新了。。。想先看看其他方面的文章。。。</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-b789d8e597d920061dcd4efb585cd343.gif\" data-width=\"\" data-height=\"\">[思考]</a>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "xzy", 
                    "userLink": "https://www.zhihu.com/people/2ccc061180616c959bf78a1e3e1ece0c", 
                    "content": "加油", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "RobotCode俱乐部", 
                            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
                            "content": "(✪ω✪)", 
                            "likes": 0, 
                            "replyToAuthor": "xzy"
                        }
                    ]
                }, 
                {
                    "userName": "安佳玮", 
                    "userLink": "https://www.zhihu.com/people/5bc5ff61ef7dc68f9c18dd00eb428e89", 
                    "content": "丢失的字节用于开始标记和结束标记等", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "RobotCode俱乐部", 
                            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
                            "content": "<p>Bingo</p>", 
                            "likes": 0, 
                            "replyToAuthor": "安佳玮"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55896356", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 11, 
            "title": "手撕虚拟内存（8）——函数栈桢原理", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/category/hack-the-virtual-memory/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the virtual memory Archives - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><p>正如我们在之前的文章中看到的，栈驻留在虚拟内存的高地址端，并向下增长。但它究竟是如何工作的呢?如何将其转换为汇编代码?使用什么寄存器?在这一章中，我们将进一步了解栈的工作方式，以及程序如何自动分配及释放本地变量。</p><p>一旦我们理解了这一点，我们就可以对它进行一些操作，从而控制程序的执行流程。</p><p><b>Note：我们将只讨论用户栈，而不是内核栈！</b></p><p>之前其他系列的文章也讨论了函数栈桢原理，可以一起服用，效果更好：</p><p><a href=\"https://zhuanlan.zhihu.com/p/54855274\" class=\"internal\">RobotCode俱乐部：函数调用之堆栈原理（一）</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/54954221\" class=\"internal\">RobotCode俱乐部：函数调用之堆栈原理（二）</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/54984757\" class=\"internal\">RobotCode俱乐部：函数调用之堆栈原理（三）</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/55215029\" class=\"internal\">RobotCode俱乐部：函数调用之堆栈原理（终章）--缓冲区溢出</a></p><h2><b>自动分配变量</b></h2><p>让我们先来看一个非常简单的程序，它只使用一个本地变量：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>让我们编译这个程序并使用objdump对其进行反汇编：（<i>译者注：原作者为64位系统，译者为32位系统机器，但是为了和原文中图片示意保持一致，这里直接贴上原文的结果，不像之前的文章在本地环境实践过</i>）</p><p>main函数输出汇编程序如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mo\">000000000040052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400531</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">83</span> <span class=\"n\">ec</span> <span class=\"mi\">10</span>             <span class=\"n\">sub</span>    <span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"mh\">0x10</span>\n  <span class=\"mi\">400535</span><span class=\"o\">:</span>       <span class=\"n\">c7</span> <span class=\"mi\">45</span> <span class=\"n\">fc</span> <span class=\"n\">cc</span> <span class=\"mo\">03</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">mov</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">],</span><span class=\"mh\">0x3cc</span>\n  <span class=\"mi\">40053</span><span class=\"nl\">c</span><span class=\"p\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">45</span> <span class=\"n\">fc</span>                <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">]</span>\n  <span class=\"mf\">40053f</span><span class=\"o\">:</span>       <span class=\"mi\">89</span> <span class=\"n\">c6</span>                   <span class=\"n\">mov</span>    <span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"n\">eax</span>\n  <span class=\"mi\">400541</span><span class=\"o\">:</span>       <span class=\"n\">bf</span> <span class=\"n\">e4</span> <span class=\"mo\">05</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x4005e4</span>\n  <span class=\"mi\">400546</span><span class=\"o\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">40054</span><span class=\"nl\">b</span><span class=\"p\">:</span>       <span class=\"n\">e8</span> <span class=\"n\">c0</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400410</span> <span class=\"o\">&lt;</span><span class=\"n\">printf</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">400550</span><span class=\"o\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">400555</span><span class=\"o\">:</span>       <span class=\"n\">c9</span>                      <span class=\"n\">leave</span>  \n  <span class=\"mi\">400556</span><span class=\"o\">:</span>       <span class=\"n\">c3</span>                      <span class=\"n\">ret</span>    \n  <span class=\"mi\">400557</span><span class=\"o\">:</span>       <span class=\"mi\">66</span> <span class=\"mf\">0f</span> <span class=\"mf\">1f</span> <span class=\"mi\">84</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">nop</span>    <span class=\"n\">WORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"o\">+</span><span class=\"n\">rax</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mh\">0x0</span><span class=\"p\">]</span>\n  <span class=\"mi\">40055</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mo\">00</span> <span class=\"mo\">00</span> </code></pre></div><p>现在我们先来看看前三行:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mo\">000000000040052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400531</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">83</span> <span class=\"n\">ec</span> <span class=\"mi\">10</span>             <span class=\"n\">sub</span>    <span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"mh\">0x10</span></code></pre></div><p>函数的第一行涉及rbp和rsp;这些是专用寄存器。<b>rbp是指向当前栈桢底部的基指针，rsp是指向当前栈桢顶部的堆栈指针。</b><i>（译者注：在很多翻译过来的书上，有些地方将Stack翻译为栈桢，有的地方叫堆栈，只要知道这里的堆栈是指Stack，Heap没关系就好）</i></p><h2><b>Step1：</b></h2><p>让我们一步一步地分解这里发生的事情。这是我们在进入main函数之前，准备运行其第一条指令时栈的状态:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a40ef5dcced93cf5fc80210825e39d41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-a40ef5dcced93cf5fc80210825e39d41_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-a40ef5dcced93cf5fc80210825e39d41_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a40ef5dcced93cf5fc80210825e39d41_b.jpg\"/></figure><h2><b>Step2: </b></h2><p>push rbp指令将寄存器rbp的值推入堆栈。因为它“push”到堆栈上，所以现在rsp的值是堆栈新顶部的内存地址。堆栈和寄存器现在看起来是这样的:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-41deee5d5db96a6f588785a5d01a1c6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-41deee5d5db96a6f588785a5d01a1c6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-41deee5d5db96a6f588785a5d01a1c6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-41deee5d5db96a6f588785a5d01a1c6d_b.jpg\"/></figure><h2><b>Step3:</b></h2><p>mov rbp, rsp，将堆栈指针rsp的值复制到基指针rbp -&gt;<b> rbp和rsp现在都指向堆栈的顶部。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cc04cee1a3dfbcc5f8fc471df80e1ff0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-cc04cee1a3dfbcc5f8fc471df80e1ff0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-cc04cee1a3dfbcc5f8fc471df80e1ff0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cc04cee1a3dfbcc5f8fc471df80e1ff0_b.jpg\"/></figure><h2><b>Step4:</b></h2><p>sub rsp, 0x10创建一个空间来存储本地变量的值。<b>rbp和rsp之间的空间就是这个空间</b>。注意，这个空间足够大，可以存储类型为integer的变量。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9ace011cd6c4b3c11dcb11a381e5ea2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-9ace011cd6c4b3c11dcb11a381e5ea2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-9ace011cd6c4b3c11dcb11a381e5ea2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9ace011cd6c4b3c11dcb11a381e5ea2b_b.jpg\"/></figure><p>我们刚刚在内存中为本地变量在堆栈上创建了一个空间。这个空间称为栈帧。每个具有局部变量的函数都将使用栈桢来存储这些变量。</p><h2><b>使用局部变量（给局部变量赋值）</b></h2><p>main函数的第4行汇编代码如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"> <span class=\"mi\">400535</span><span class=\"o\">:</span>       <span class=\"n\">c7</span> <span class=\"mi\">45</span> <span class=\"n\">fc</span> <span class=\"n\">cc</span> <span class=\"mo\">03</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">mov</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">],</span><span class=\"mh\">0x3cc</span></code></pre></div><p>0x3cc实际上是十六进制中的值972。这行对应于C代码行:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span></code></pre></div><p>mov DWORD PTR [rbp-0x4]，0x3cc：将<b>内存地址为rbp- 4的</b>内容设置为972。[rbp - 4]是我们的局部变量a。<b>计算机实际上并不知道我们在代码中使用的变量的名称，它只是引用栈上的内存地址。</b></p><p>这是这个操作之后堆栈和寄存器的状态:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a260685f97ddd28a6f2108f17e96e4e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-a260685f97ddd28a6f2108f17e96e4e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-a260685f97ddd28a6f2108f17e96e4e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a260685f97ddd28a6f2108f17e96e4e8_b.jpg\"/></figure><h2><b>leave,自动释放</b></h2><p>如果我们看一下函数的末尾，我们会发现:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mi\">400555</span><span class=\"o\">:</span>       <span class=\"n\">c9</span>                      <span class=\"n\">leave</span>  </code></pre></div><p>指令leave将rsp设置为rbp，然后将堆栈顶部弹出到rbp中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c73727ec02e6d2d04d0cbead9266fb1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-c73727ec02e6d2d04d0cbead9266fb1e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-c73727ec02e6d2d04d0cbead9266fb1e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c73727ec02e6d2d04d0cbead9266fb1e_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5fdfc67183a145f17cbd60a68d670934_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-5fdfc67183a145f17cbd60a68d670934_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-5fdfc67183a145f17cbd60a68d670934_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5fdfc67183a145f17cbd60a68d670934_b.jpg\"/></figure><p>因为我们<b>在进入函数时将rbp的上一个值推入堆栈，所以rbp现在被设置为rbp的上一个值</b>。这就是:</p><ul><li>局部变量释放</li><li>在我们离开当前函数之前，将恢复上一个函数的栈桢。</li></ul><p>堆栈和寄存器rbp和rsp的状态恢复到进入main函数时的状态。</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "堆栈（内存）", 
                    "tagLink": "https://api.zhihu.com/topics/19663455"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55934101", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 0, 
            "title": "手撕虚拟内存（9）——获取栈上任意数据", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/category/hack-the-virtual-memory/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the virtual memory Archives - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><p>接<a href=\"https://zhuanlan.zhihu.com/p/55896356\" class=\"internal\">上文</a>，当变量自动从堆栈中“释放”时，它们不会完全“销毁”。<b>它们的值仍然在内存中，这个空间可能会被其他函数使用！</b></p><p>这就是为什么在<b>编写代码时初始化变量很重要</b>，因为如果不这样做，它们将在程序运行时获取堆栈上的任何值。</p><p>这一篇介绍<b>如何获取函数栈桢上的每一个字节的内容</b>，也可以获取堆栈上任何自己感兴趣的内容，下一篇介绍如何修改栈桢上的值，以控制程序执行流程。</p><p>让我们看下面的C代码：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\n     <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n     <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span>\n     <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n     <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n     <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n\n     <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">func1</span><span class=\"p\">();</span>\n    <span class=\"n\">func2</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>正如你所看到的，func2没有设置它的本地变量 a、b和c的值，但是如果我们编译并运行这个程序，它将输出…</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f9322bfc3d2bb3aae0a235d61cd94e5a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic3.zhimg.com/v2-f9322bfc3d2bb3aae0a235d61cd94e5a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;569&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"569\" data-original=\"https://pic3.zhimg.com/v2-f9322bfc3d2bb3aae0a235d61cd94e5a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f9322bfc3d2bb3aae0a235d61cd94e5a_b.png\"/></figure><p>和func1的变量值相同！这是因为堆栈的工作方式。这两个函数声明的变量数量相同，类型相同，顺序相同。它们的栈帧完全相同。<b>当func1结束时，它的局部变量的值所在的内存不会被清除——只会改变rsp。</b>因此，当我们调用func2时，它的栈帧恰好位于上一个func1栈帧的相同位置，并且func2的局部变量与我们离开func1时func1的局部变量具有相同的值。</p><p>让我们检查一下汇编代码来证明它:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mo\">000000000040052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">func1</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">40052</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400531</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">83</span> <span class=\"n\">ec</span> <span class=\"mi\">10</span>             <span class=\"n\">sub</span>    <span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"mh\">0x10</span>\n  <span class=\"mi\">400535</span><span class=\"o\">:</span>       <span class=\"n\">c7</span> <span class=\"mi\">45</span> <span class=\"n\">f4</span> <span class=\"mi\">62</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">mov</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0xc</span><span class=\"p\">],</span><span class=\"mh\">0x62</span>\n  <span class=\"mi\">40053</span><span class=\"nl\">c</span><span class=\"p\">:</span>       <span class=\"n\">c7</span> <span class=\"mi\">45</span> <span class=\"n\">f8</span> <span class=\"n\">cc</span> <span class=\"mo\">03</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">mov</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x8</span><span class=\"p\">],</span><span class=\"mh\">0x3cc</span>\n  <span class=\"mi\">400543</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">45</span> <span class=\"n\">f8</span>                <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x8</span><span class=\"p\">]</span>\n  <span class=\"mi\">400546</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">55</span> <span class=\"n\">f4</span>                <span class=\"n\">mov</span>    <span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0xc</span><span class=\"p\">]</span>\n  <span class=\"mi\">400549</span><span class=\"o\">:</span>       <span class=\"mo\">01</span> <span class=\"n\">d0</span>                   <span class=\"n\">add</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"n\">edx</span>\n  <span class=\"mi\">40054</span><span class=\"nl\">b</span><span class=\"p\">:</span>       <span class=\"mi\">89</span> <span class=\"mi\">45</span> <span class=\"n\">fc</span>                <span class=\"n\">mov</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">],</span><span class=\"n\">eax</span>\n  <span class=\"mi\">40054</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">4</span><span class=\"n\">d</span> <span class=\"n\">fc</span>                <span class=\"n\">mov</span>    <span class=\"n\">ecx</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">]</span>\n  <span class=\"mi\">400551</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">55</span> <span class=\"n\">f8</span>                <span class=\"n\">mov</span>    <span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x8</span><span class=\"p\">]</span>\n  <span class=\"mi\">400554</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">45</span> <span class=\"n\">f4</span>                <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0xc</span><span class=\"p\">]</span>\n  <span class=\"mi\">400557</span><span class=\"o\">:</span>       <span class=\"mi\">89</span> <span class=\"n\">c6</span>                   <span class=\"n\">mov</span>    <span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"n\">eax</span>\n  <span class=\"mi\">400559</span><span class=\"o\">:</span>       <span class=\"n\">bf</span> <span class=\"mi\">34</span> <span class=\"mo\">06</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x400634</span>\n  <span class=\"mi\">40055</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">400563</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"n\">a8</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400410</span> <span class=\"o\">&lt;</span><span class=\"n\">printf</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">400568</span><span class=\"o\">:</span>       <span class=\"n\">c9</span>                      <span class=\"n\">leave</span>  \n  <span class=\"mi\">400569</span><span class=\"o\">:</span>       <span class=\"n\">c3</span>                      <span class=\"n\">ret</span>    \n\n<span class=\"mo\">000000000040056</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">func2</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">40056</span><span class=\"nl\">a</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">40056</span><span class=\"nl\">b</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">40056</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">83</span> <span class=\"n\">ec</span> <span class=\"mi\">10</span>             <span class=\"n\">sub</span>    <span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"mh\">0x10</span>\n  <span class=\"mi\">400572</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">4</span><span class=\"n\">d</span> <span class=\"n\">fc</span>                <span class=\"n\">mov</span>    <span class=\"n\">ecx</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x4</span><span class=\"p\">]</span>\n  <span class=\"mi\">400575</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">55</span> <span class=\"n\">f8</span>                <span class=\"n\">mov</span>    <span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0x8</span><span class=\"p\">]</span>\n  <span class=\"mi\">400578</span><span class=\"o\">:</span>       <span class=\"mi\">8</span><span class=\"n\">b</span> <span class=\"mi\">45</span> <span class=\"n\">f4</span>                <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rbp</span><span class=\"o\">-</span><span class=\"mh\">0xc</span><span class=\"p\">]</span>\n  <span class=\"mi\">40057</span><span class=\"nl\">b</span><span class=\"p\">:</span>       <span class=\"mi\">89</span> <span class=\"n\">c6</span>                   <span class=\"n\">mov</span>    <span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"n\">eax</span>\n  <span class=\"mi\">40057</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"n\">bf</span> <span class=\"mi\">34</span> <span class=\"mo\">06</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x400634</span>\n  <span class=\"mi\">400582</span><span class=\"o\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">400587</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">84</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400410</span> <span class=\"o\">&lt;</span><span class=\"n\">printf</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">40058</span><span class=\"nl\">c</span><span class=\"p\">:</span>       <span class=\"n\">c9</span>                      <span class=\"n\">leave</span>  \n  <span class=\"mi\">40058</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"n\">c3</span>                      <span class=\"n\">ret</span>  \n\n<span class=\"mo\">00000000004005</span><span class=\"mi\">8</span><span class=\"n\">e</span> <span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">40058</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mf\">40058f</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400592</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">96</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">40052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">func1</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">400597</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"n\">ce</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">40056</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span><span class=\"n\">func2</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">40059</span><span class=\"nl\">c</span><span class=\"p\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">a1</span><span class=\"p\">:</span>       <span class=\"mi\">5</span><span class=\"n\">d</span>                      <span class=\"n\">pop</span>    <span class=\"n\">rbp</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">a2</span><span class=\"p\">:</span>       <span class=\"n\">c3</span>                      <span class=\"n\">ret</span>    \n  <span class=\"mi\">4005</span><span class=\"nl\">a3</span><span class=\"p\">:</span>       <span class=\"mi\">66</span> <span class=\"mi\">2</span><span class=\"n\">e</span> <span class=\"mf\">0f</span> <span class=\"mf\">1f</span> <span class=\"mi\">84</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">nop</span>    <span class=\"n\">WORD</span> <span class=\"n\">PTR</span> <span class=\"nl\">cs</span><span class=\"p\">:[</span><span class=\"n\">rax</span><span class=\"o\">+</span><span class=\"n\">rax</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mh\">0x0</span><span class=\"p\">]</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">aa</span><span class=\"p\">:</span>       <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> \n  <span class=\"mi\">4005</span><span class=\"nl\">ad</span><span class=\"p\">:</span>       <span class=\"mf\">0f</span> <span class=\"mf\">1f</span> <span class=\"mo\">00</span>                <span class=\"n\">nop</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"p\">]</span></code></pre></div><p>如你所见，栈桢的形成方式始终是一致的。在我们的两个函数中，栈帧的大小是相同的，因为本地变量是相同的：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n<span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n<span class=\"n\">sub</span>    <span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"mh\">0x10</span></code></pre></div><p>两个函数都以leave语句结束。</p><p>变量a、b、c在两个函数中的引用方式相同:</p><ul><li>a位于内存地址rbp-0xc</li><li>b位于内存地址rbp-0x8</li><li>c位于内存地址rbp-0x4</li></ul><p><b>注意，堆栈中这些变量的顺序与C代码中这些变量的顺序不同。编译器根据需要对它们进行排序，因此永远不应该假定堆栈中本地变量的顺序。</b>这里存放的顺序是c,b,a这样的顺序，和我们一般认为的a,b,c不同！！(如下图)</p><p>这是我们离开func1之前堆栈和寄存器rbp和rsp的状态:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-029ddb7e81d356d25669ff65fc8e5fb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-029ddb7e81d356d25669ff65fc8e5fb9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic2.zhimg.com/v2-029ddb7e81d356d25669ff65fc8e5fb9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-029ddb7e81d356d25669ff65fc8e5fb9_b.jpg\"/></figure><p>当我们离开函数func1时，我们运行指令leave;如前所述，这是返回函数main之前堆栈、rbp和rsp的状态:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d260ca8b172c54cf51203235a1553baa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-d260ca8b172c54cf51203235a1553baa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic3.zhimg.com/v2-d260ca8b172c54cf51203235a1553baa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d260ca8b172c54cf51203235a1553baa_b.jpg\"/></figure><p>当我们进入func2时，本地变量被设置为堆栈中内存中的任意值，这就是它们的值与func1函数的本地变量相同的原因。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a8a3c46a9cc6c9fea58dda7351ebd273_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-a8a3c46a9cc6c9fea58dda7351ebd273_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-a8a3c46a9cc6c9fea58dda7351ebd273_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a8a3c46a9cc6c9fea58dda7351ebd273_b.jpg\"/></figure><h2><b>ret</b></h2><p>你可能已经注意到，我们所有的示例函数都以指令ret结束。ret从堆栈弹出返回地址并跳转到那里。当函数被调用时，程序在跳到函数的第一条指令之前使用指令call将返回地址压入堆栈。这就是程序如何能够调用一个函数，然后从该函数返回到调用函数继续执行下一条指令。</p><p>这意味着<b>堆栈中不仅有变量，还有指令</b>。让我们回顾一下之前的示例代码：</p><p>当main函数调用func1时，</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mi\">400592</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">96</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">40052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">func1</span><span class=\"o\">&gt;</span></code></pre></div><p>它将下一条指令的内存地址压入堆栈，然后跳到func1。因此，在func1中执行任何指令之前，堆栈的顶部包含这个地址，因此rsp指向这个值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e317d4cc9553c60ded74f8207a93d6e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-e317d4cc9553c60ded74f8207a93d6e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic4.zhimg.com/v2-e317d4cc9553c60ded74f8207a93d6e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e317d4cc9553c60ded74f8207a93d6e3_b.jpg\"/></figure><p>func1的栈帧形成后，堆栈是这样的:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\"/></figure><p>======================================================</p><p>根据我们刚刚学习的内容，我们可以直接使用rbp直接访问所有的本地变量(不使用C变量!)，以及保存在堆栈中的rbp值和函数的返回地址值。</p><p>在C语言中，我们可以使用:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"nf\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n<span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"nf\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span></code></pre></div><p>看以下示例程序：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, a = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0xc</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, b = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x4</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, previous rbp value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, return address value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">func1</span><span class=\"p\">();</span>\n    <span class=\"n\">func2</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><h2><b>获取变量的值</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\"/></figure><p>根据我们之前的发现，我们知道我们的变量是通过rbp - 0xX来引用的:</p><ul><li>a位于内存地址rbp-0xc</li><li>b位于内存地址rbp-0x8</li><li>c位于内存地址rbp-0x4</li></ul><p>为了得到这些变量的值，我们需要引用rbp。对于变量a:</p><ul><li>将变量rbp转换为char *类型:<b>(char *)rbp </b></li><li>减去正确的字节数，得到变量在内存中的地址：<b>(char *)rbp - 0xc </b></li><li>再次将其转换为指向int的指针，因为a是int类型的：<b>(int *)(((char *)rbp) - 0xc)</b></li><li>然后引用它来得到这个地址的值：<b>*(int *)(((char *)rbp) - 0xc)</b></li></ul><h2><b>保存的rbp值</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\"/></figure><p>查看上面的图，当前rbp直接指向保存的rbp，因此我们只需将变量rbp转换为指向无符号长整型的指针并引用它：<b><code>*(unsigned long int *)rbp</code>。</b></p><h2><b> 返回地址值</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c79f6ccd78e4ce33d6a867af5825b1c_b.jpg\"/></figure><p>返回地址值就在堆栈上保存的上一个rbp上面（上图所示）。<b>rbp是8字节长，所以我们只需要在rbp的当前值上添加8就可以得到这个返回值在堆栈上的地址。</b>我们是这样做的:</p><ul><li>将变量rbp转换为char *类型:<b>(char *)rbp</b></li><li>在这个值上加上8：<b>((char *)rbp +8)</b></li><li>将其强制转换为指向无符号长整数：<b>(unsigned long int *)((char *)rbp + 8)</b></li><li>引用它可以得到这个地址的值：<b>*(unsigned long int *)((char *)rbp + 8)</b></li></ul><h2><b>程序的输出</b></h2><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">holberton</span><span class=\"err\">$</span> <span class=\"n\">gcc</span> <span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">c</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">out</span> \n<span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">rpb</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b70</span>\n<span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b70</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1070</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">rpb</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b60</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b50</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1070</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">previous</span> <span class=\"n\">rbp</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b70</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"k\">return</span> <span class=\"n\">address</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">400697</span>\n<span class=\"n\">func2</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1070</span>\n<span class=\"n\">func2</span><span class=\"p\">,</span> <span class=\"n\">rpb</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b60</span>\n<span class=\"n\">func2</span><span class=\"p\">,</span> <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">c78e71b50</span>\n<span class=\"n\">holberton</span><span class=\"err\">$</span></code></pre></div><p>通过以上试验，可以得到如下结论：</p><ul><li>从func1我们可以通过rbp正确地访问所有的变量</li><li>从func1可以得到函数main的rbp</li><li>func1和func2确实具有相同的rbp和rsp值</li><li>rsp和rbp之间的差值是0x10，就像在汇编代码中看到的那样(sub rsp,0x10)</li><li>在主函数中，rsp == rbp因为没有局部变量</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>func1的返回地址是<b>0x400697</b>。让我们反汇编程序来再次验证这个假设。如果我们是正确的，那么这应该是main函数中func1调用之后的指令地址。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mo\">0000000000400664</span> <span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">400664</span><span class=\"o\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">400665</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400668</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e8</span>                <span class=\"n\">mov</span>    <span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"n\">rbp</span>\n  <span class=\"mi\">40066</span><span class=\"nl\">b</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">c6</span>                <span class=\"n\">mov</span>    <span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"n\">rax</span>\n  <span class=\"mi\">40066</span><span class=\"nl\">e</span><span class=\"p\">:</span>       <span class=\"n\">bf</span> <span class=\"mi\">3</span><span class=\"n\">b</span> <span class=\"mi\">08</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x40083b</span>\n  <span class=\"mi\">400673</span><span class=\"o\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">400678</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">93</span> <span class=\"n\">fd</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400410</span> <span class=\"o\">&lt;</span><span class=\"n\">printf</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">40067</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e0</span>                <span class=\"n\">mov</span>    <span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">400680</span><span class=\"o\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">c6</span>                <span class=\"n\">mov</span>    <span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"n\">rax</span>\n  <span class=\"mi\">400683</span><span class=\"o\">:</span>       <span class=\"n\">bf</span> <span class=\"mi\">4</span><span class=\"n\">c</span> <span class=\"mi\">08</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x40084c</span>\n  <span class=\"mi\">400688</span><span class=\"o\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">40068</span><span class=\"nl\">d</span><span class=\"p\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">7</span><span class=\"n\">e</span> <span class=\"n\">fd</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400410</span> <span class=\"o\">&lt;</span><span class=\"n\">printf</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">400692</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">96</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">40052</span><span class=\"n\">d</span> <span class=\"o\">&lt;</span><span class=\"n\">func1</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">400697</span><span class=\"o\">:</span>       <span class=\"n\">e8</span> <span class=\"mi\">7</span><span class=\"n\">a</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400616</span> <span class=\"o\">&lt;</span><span class=\"n\">func2</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">40069</span><span class=\"nl\">c</span><span class=\"p\">:</span>       <span class=\"n\">b8</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x0</span>\n  <span class=\"mi\">4006</span><span class=\"nl\">a1</span><span class=\"p\">:</span>       <span class=\"mi\">5</span><span class=\"n\">d</span>                      <span class=\"n\">pop</span>    <span class=\"n\">rbp</span>\n  <span class=\"mi\">4006</span><span class=\"nl\">a2</span><span class=\"p\">:</span>       <span class=\"n\">c3</span>                      <span class=\"n\">ret</span>    \n  <span class=\"mi\">4006</span><span class=\"nl\">a3</span><span class=\"p\">:</span>       <span class=\"mi\">66</span> <span class=\"mi\">2</span><span class=\"n\">e</span> <span class=\"mf\">0f</span> <span class=\"mf\">1f</span> <span class=\"mi\">84</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>    <span class=\"n\">nop</span>    <span class=\"n\">WORD</span> <span class=\"n\">PTR</span> <span class=\"nl\">cs</span><span class=\"p\">:[</span><span class=\"n\">rax</span><span class=\"o\">+</span><span class=\"n\">rax</span><span class=\"o\">*</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mh\">0x0</span><span class=\"p\">]</span>\n  <span class=\"mi\">4006</span><span class=\"nl\">aa</span><span class=\"p\">:</span>       <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> \n  <span class=\"mi\">4006</span><span class=\"nl\">ad</span><span class=\"p\">:</span>       <span class=\"mf\">0f</span> <span class=\"mf\">1f</span> <span class=\"mo\">00</span>                <span class=\"n\">nop</span>    <span class=\"n\">DWORD</span> <span class=\"n\">PTR</span> <span class=\"p\">[</span><span class=\"n\">rax</span><span class=\"p\">]</span></code></pre></div><p>如上所示：完全符合！</p><p>下一篇介绍如何修改栈桢上的值，以控制程序执行流程。</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "堆栈（内存）", 
                    "tagLink": "https://api.zhihu.com/topics/19663455"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/55944327", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 6, 
            "title": "手撕虚拟内存（10）——修改栈上数据，控制程序流程", 
            "content": "<blockquote>原文：<a href=\"https://link.zhihu.com/?target=https%3A//blog.holbertonschool.com/category/hack-the-virtual-memory/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hack the virtual memory Archives - Holberton</a><br/>翻译：RobotCode俱乐部</blockquote><h2><b>Hack the stack!</b></h2><p>现在我们知道了在堆栈上哪里可以找到返回地址，如果要修改这个值呢?我们能改变程序的流程并使func1返回到其他地方吗?让我们在程序中添加一个名为bye的新函数：（<i>译者注：原作者实验环境为64位系统，译者为32位系统。这里也会给出在译者的32位系统下的实验结果</i>）</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"nf\">bye</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[x] I am in the function bye!</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, a = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0xc</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, b = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x4</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, previous rbp value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, return address value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">func1</span><span class=\"p\">();</span>\n    <span class=\"n\">func2</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>让我们看看这个函数的代码从哪个地址开始:</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"mo\">00000000004005</span><span class=\"n\">bd</span> <span class=\"o\">&lt;</span><span class=\"n\">bye</span><span class=\"o\">&gt;:</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">bd</span><span class=\"p\">:</span>       <span class=\"mi\">55</span>                      <span class=\"n\">push</span>   <span class=\"n\">rbp</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">be</span><span class=\"p\">:</span>       <span class=\"mi\">48</span> <span class=\"mi\">89</span> <span class=\"n\">e5</span>                <span class=\"n\">mov</span>    <span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"n\">rsp</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">c1</span><span class=\"p\">:</span>       <span class=\"n\">bf</span> <span class=\"n\">d8</span> <span class=\"mo\">07</span> <span class=\"mi\">40</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x4007d8</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">c6</span><span class=\"p\">:</span>       <span class=\"n\">e8</span> <span class=\"n\">b5</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">400480</span> <span class=\"o\">&lt;</span><span class=\"n\">puts</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">cb</span><span class=\"p\">:</span>       <span class=\"n\">bf</span> <span class=\"mi\">62</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span> <span class=\"mo\">00</span>          <span class=\"n\">mov</span>    <span class=\"n\">edi</span><span class=\"p\">,</span><span class=\"mh\">0x62</span>\n  <span class=\"mi\">4005</span><span class=\"nl\">d0</span><span class=\"p\">:</span>       <span class=\"n\">e8</span> <span class=\"n\">eb</span> <span class=\"n\">fe</span> <span class=\"n\">ff</span> <span class=\"n\">ff</span>          <span class=\"n\">call</span>   <span class=\"mi\">4004</span><span class=\"n\">c0</span> <span class=\"o\">&lt;</span><span class=\"n\">exit</span><span class=\"err\">@</span><span class=\"n\">plt</span><span class=\"o\">&gt;</span></code></pre></div><p>现在让我们将func1函数在堆栈上的返回地址替换为函数开头的地址<b>bye, 4005bd：</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdlib.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"kt\">void</span> <span class=\"nf\">bye</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;[x] I am in the function bye!</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n    <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">98</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func1</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">;</span>\n    <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">;</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, a = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0xc</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, b = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)(((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mh\">0x4</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, previous rbp value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func1, return address value = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"cm\">/* hack the stack! */</span>\n    <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">)((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">rbp</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mh\">0x4005bd</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">func2</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, a = %d, b = %d, c = %d</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;func2, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rsp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rsp&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">register</span> <span class=\"kt\">long</span> <span class=\"n\">rbp</span> <span class=\"k\">asm</span> <span class=\"p\">(</span><span class=\"s\">&#34;rbp&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rpb = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rbp</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&#34;main, rsp = %lx</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">rsp</span><span class=\"p\">);</span>\n    <span class=\"n\">func1</span><span class=\"p\">();</span>\n    <span class=\"n\">func2</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span></code></pre></div><p>执行输出如下：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">holberton</span><span class=\"err\">$</span> <span class=\"n\">gcc</span> <span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">c</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">out</span>\n<span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">rpb</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">f62ef1b60</span>\n<span class=\"n\">main</span><span class=\"p\">,</span> <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">f62ef1b60</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1070</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">rpb</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">f62ef1b50</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">rsp</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">f62ef1b40</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">98</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">972</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1070</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"n\">previous</span> <span class=\"n\">rbp</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mf\">7ff</span><span class=\"n\">f62ef1b60</span>\n<span class=\"n\">func1</span><span class=\"p\">,</span> <span class=\"k\">return</span> <span class=\"n\">address</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">40074</span><span class=\"n\">d</span>\n<span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"n\">I</span> <span class=\"n\">am</span> <span class=\"n\">in</span> <span class=\"n\">the</span> <span class=\"n\">function</span> <span class=\"n\">bye</span><span class=\"o\">!</span>\n<span class=\"n\">holberton</span><span class=\"err\">$</span> <span class=\"n\">echo</span> <span class=\"err\">$</span><span class=\"o\">?</span>\n<span class=\"mi\">98</span>\n<span class=\"n\">holberton</span><span class=\"err\">$</span> </code></pre></div><p>我们已经成功执行了函数bye，但是并不是通过显式调用它的方式！！</p><p>32位环境下long int 与int 类型都为4个字节，64位环境下，long int 为8个字节，int为4个字节，所以译者的32位测试环境下，程序需要做如下修改：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3fc1338d111137797f51f2f641b7eac0_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-3fc1338d111137797f51f2f641b7eac0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-3fc1338d111137797f51f2f641b7eac0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3fc1338d111137797f51f2f641b7eac0_b.jpg\"/><figcaption>32位测试环境下需要修改的地方</figcaption></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d73c07e129a446285cb83eacf2d55542_b.jpg\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb\" width=\"676\" data-original=\"https://pic3.zhimg.com/v2-d73c07e129a446285cb83eacf2d55542_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;676&#39; height=&#39;158&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"676\" data-original=\"https://pic3.zhimg.com/v2-d73c07e129a446285cb83eacf2d55542_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d73c07e129a446285cb83eacf2d55542_b.jpg\"/><figcaption>bye函数地址</figcaption></figure><p>编译运行结果如下：成功Hack!</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dccb1e4f2ff61f0a94e535b5d2b58215_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb\" width=\"567\" data-original=\"https://pic2.zhimg.com/v2-dccb1e4f2ff61f0a94e535b5d2b58215_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;567&#39; height=&#39;276&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"567\" data-original=\"https://pic2.zhimg.com/v2-dccb1e4f2ff61f0a94e535b5d2b58215_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dccb1e4f2ff61f0a94e535b5d2b58215_b.jpg\"/></figure><p>至此，函数堆栈篇全部更新完了。应该能对虚拟内存中的Heap与Stack区域有个大概的认识。</p><blockquote>由于本人水平有限，翻译必然有很多不妥的地方，欢迎指正。<br/>同时，欢迎关注下方微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }, 
                {
                    "tag": "堆栈（内存）", 
                    "tagLink": "https://api.zhihu.com/topics/19663455"
                }
            ], 
            "comments": [
                {
                    "userName": "爱尔兰KEN", 
                    "userLink": "https://www.zhihu.com/people/2f0d759046cb0ff6d924a328b699cfcd", 
                    "content": "<p>受益匪浅呢! 感谢</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "RobotCode俱乐部", 
                            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
                            "content": "有帮助就好", 
                            "likes": 0, 
                            "replyToAuthor": "爱尔兰KEN"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59729689", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 6, 
            "title": "Linux 0.12上古源码学习（一）-Bochs模拟器的安装与使用", 
            "content": "<p>Bochs是一款精巧的开源X86架构模拟器，我们用来给早期的Linux内核模拟运行环境。</p><p>Ubuntu上主要有两种安装方式，一种是源码编译安装；另一种直接利用包管理器。这里建议用第二种方式，因为省事：），但是有几个依赖模块需要提前安装下，否则后期软件运行的时候会出现下图所示报错。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-161859a155a05739608de57b593d1964_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic1.zhimg.com/v2-161859a155a05739608de57b593d1964_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;604&#39; height=&#39;201&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"604\" data-original=\"https://pic1.zhimg.com/v2-161859a155a05739608de57b593d1964_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-161859a155a05739608de57b593d1964_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42ecba4f86702419ee53634a928fd2f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-42ecba4f86702419ee53634a928fd2f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;204&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-42ecba4f86702419ee53634a928fd2f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-42ecba4f86702419ee53634a928fd2f4_b.jpg\"/></figure><p>安装命令：</p><p><b>apt-get install bochs</b></p><p><b>apt-get install bochs-x</b></p><p><b>apt-get install bochs-sdl</b></p><p>安装完成后，如下图，我们安装的版本为2.4.6。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2de93148703c1c420665c49d69a3d0ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic3.zhimg.com/v2-2de93148703c1c420665c49d69a3d0ae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic3.zhimg.com/v2-2de93148703c1c420665c49d69a3d0ae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2de93148703c1c420665c49d69a3d0ae_b.jpg\"/></figure><p>下面以一个简单的实例来运行下Bochs。</p><p>先准备一个简单的汇编程序 ，显示一串字符串，代码如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-778be52412d1e601f3ba1b6334e61a59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1403\" data-rawheight=\"908\" class=\"origin_image zh-lightbox-thumb\" width=\"1403\" data-original=\"https://pic2.zhimg.com/v2-778be52412d1e601f3ba1b6334e61a59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1403&#39; height=&#39;908&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1403\" data-rawheight=\"908\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1403\" data-original=\"https://pic2.zhimg.com/v2-778be52412d1e601f3ba1b6334e61a59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-778be52412d1e601f3ba1b6334e61a59_b.jpg\"/></figure><p>Makefile文件如下图，即将我们的程序打包进一个磁盘镜像文件a.img。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e9a44b1a8897c29cf10864914213b4fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"923\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"923\" data-original=\"https://pic3.zhimg.com/v2-e9a44b1a8897c29cf10864914213b4fe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;923&#39; height=&#39;472&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"923\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"923\" data-original=\"https://pic3.zhimg.com/v2-e9a44b1a8897c29cf10864914213b4fe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e9a44b1a8897c29cf10864914213b4fe_b.jpg\"/></figure><p>同时，Bochs的启动配置文件bochsrc也需要设置如下，选择我们的磁盘镜像文件作为虚拟软盘，并设置从软盘启动：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-58a777b5953db96dd180ebd1b172d96a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"858\" data-original=\"https://pic3.zhimg.com/v2-58a777b5953db96dd180ebd1b172d96a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;858&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"858\" data-original=\"https://pic3.zhimg.com/v2-58a777b5953db96dd180ebd1b172d96a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-58a777b5953db96dd180ebd1b172d96a_b.jpg\"/></figure><p>输入如下命令:</p><p><i>root@RobotCode俱乐部:/home/yyctest# <b>bochs -f ./bochsrc</b></i></p><p>如下图所示，Bochs模拟器已经成功起来了，是不是被它朴素复古的风格惊艳到了，而且输出了我们想要的字符串。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9fdc9a5d452c1004746e0ab7cc9a76ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-9fdc9a5d452c1004746e0ab7cc9a76ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic2.zhimg.com/v2-9fdc9a5d452c1004746e0ab7cc9a76ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9fdc9a5d452c1004746e0ab7cc9a76ed_b.jpg\"/></figure><p>--未完待续</p><blockquote>欢迎关注下方的微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59785532", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 3, 
            "title": "Linux 0.12上古源码学习（二）-Bochs模拟Linux 0.12内核的启动与运行", 
            "content": "<p>上篇已经初步实现用Bochs仿真了一个X86程序。今天尝试启动早期的Linux 0.12内核。官网上已经有编译好的Linux 0.12启动镜像及根文件系统镜像。我们可以直接下载下来先使用，后面的文章会详细介始如何编译生成这些镜像文件。</p><a href=\"https://link.zhihu.com/?target=http%3A//www.oldlinux.org/Linux.old/bochs-images/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Index of /Linux.old/bochs-images/</a><p>下载下来如下图所示，作者很贴心的已经将所需要用的Bochs模拟软件，和所需要镜像都准备好了，甚至包括Bochs的启动配置文件也配置好了。我们只需要在命令行输入如下命令即可：<b>root@RobotCode俱乐部:/home/yyctest/linux-0.12-080324#</b> <b><i>bochs -f ./bochsrc-0.12-fd.bxrc </i></b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eb4566867c2c8d957344d6576c77d817_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-eb4566867c2c8d957344d6576c77d817_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;591&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"591\" data-original=\"https://pic4.zhimg.com/v2-eb4566867c2c8d957344d6576c77d817_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-eb4566867c2c8d957344d6576c77d817_b.jpg\"/></figure><p>如下图，此时提示需要将启动软盘换与根文件系统软盘，点上方的工具栏软盘图标没反应，此时我们可以通过工具栏的CONFIG进行换盘操作。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bb323ebb6ff3e30a7b7fa2569c593c61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb\" width=\"717\" data-original=\"https://pic2.zhimg.com/v2-bb323ebb6ff3e30a7b7fa2569c593c61_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;717&#39; height=&#39;478&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"717\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"717\" data-original=\"https://pic2.zhimg.com/v2-bb323ebb6ff3e30a7b7fa2569c593c61_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bb323ebb6ff3e30a7b7fa2569c593c61_b.jpg\"/></figure><p>如下图所示，把软盘换成<b>rootimage-0.12-fd</b>根文件系统。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0025ce329cf78f405e4a02ac6264384e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"736\" data-original=\"https://pic3.zhimg.com/v2-0025ce329cf78f405e4a02ac6264384e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;736&#39; height=&#39;449&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"736\" data-original=\"https://pic3.zhimg.com/v2-0025ce329cf78f405e4a02ac6264384e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0025ce329cf78f405e4a02ac6264384e_b.jpg\"/></figure><p>如下图所示，此时Linux 0.12 系统已经完全起来了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-65b0650e3b698d2d8b701efa07e6562b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https://pic4.zhimg.com/v2-65b0650e3b698d2d8b701efa07e6562b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;457&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https://pic4.zhimg.com/v2-65b0650e3b698d2d8b701efa07e6562b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-65b0650e3b698d2d8b701efa07e6562b_b.jpg\"/></figure><p>--未完待续</p><blockquote>欢迎关注下方的微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Linux 内核", 
                    "tagLink": "https://api.zhihu.com/topics/19614193"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59473704", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 0, 
            "title": "程序躺在硬盘里是什么样子的？（1）", 
            "content": "<p>之前的文章中已经讨论了“活的”程序（进程）在内存中是什么样子的：</p><p><a href=\"https://zhuanlan.zhihu.com/p/54475898\" class=\"internal\">RobotCode俱乐部：程序的内存布局（上）</a></p><p><a href=\"https://zhuanlan.zhihu.com/p/54478755\" class=\"internal\">RobotCode俱乐部：程序的内存布局（下）</a></p><p>这一篇，我们来看看“静态”的程序是什么样子的，即没有加载到内存之前，看看程序的各个部分是如何组织的。</p><p>首先，可执行文件里肯定包含了源文件编译生成的可执行指令及数据。在Linux中，二进制可执行文件的标准格式叫做ELF（Executable and Linkable Format），即可执行和可链接文件格式。也说明了动态库及可执行文件格式上是兼容的。</p><p>一个ELF文件由两大部分组成：<b>一个固定长度的文件头（ELF header）</b>和<b>多个可扩展的数据块(Program header table及其指向的段)</b>。这篇先来看可执行文件的ELF文件。如下图所示，Program header table是用来索引只读段与读写段。其中，最后的Section header table索引代码的不同的段（代码区、只读常量区、变量区）。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-eac72847168f06de3e28d6b379c25709_b.jpg\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"886\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-eac72847168f06de3e28d6b379c25709_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;886&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"886\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-eac72847168f06de3e28d6b379c25709_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eac72847168f06de3e28d6b379c25709_b.jpg\"/><figcaption>可执行文件ELF格式 图片来源：维基百科</figcaption></figure><p>上实验，如下图所示代码：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-10c3fe14ff955c50fa67b47ee89ae83a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1212\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb\" width=\"1212\" data-original=\"https://pic3.zhimg.com/v2-10c3fe14ff955c50fa67b47ee89ae83a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1212&#39; height=&#39;770&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1212\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1212\" data-original=\"https://pic3.zhimg.com/v2-10c3fe14ff955c50fa67b47ee89ae83a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-10c3fe14ff955c50fa67b47ee89ae83a_b.jpg\"/></figure><p>编译后，如下图所示，ELF文件大小为7397字节，32位X86架构下代码。</p><p>程序入口地址为0x8048320；ELF头大小为52字节；header大小为52字节；有9个program header， 每个program header大小为32字节，program header存放是从文件头算起的52字节处。</p><p>有30个section header，每个section header大小为40字节，section header存放地址是从文件头算起4556的位置。根据以上信息，就可以定位每个header，再根据header中对于段的描述理解ELF各段的内容。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2449b484a46bf41f6a560520af2de11f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1346\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic4.zhimg.com/v2-2449b484a46bf41f6a560520af2de11f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2048&#39; height=&#39;1346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2048\" data-original=\"https://pic4.zhimg.com/v2-2449b484a46bf41f6a560520af2de11f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2449b484a46bf41f6a560520af2de11f_b.jpg\"/></figure><p>使用readefl命令的-l及-S选项可分别列出程序头（program header）和节区头（section header）的内容。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-926c9943a897833dca09f68df57eba27_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1490\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic4.zhimg.com/v2-926c9943a897833dca09f68df57eba27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2048&#39; height=&#39;1490&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1490\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2048\" data-original=\"https://pic4.zhimg.com/v2-926c9943a897833dca09f68df57eba27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-926c9943a897833dca09f68df57eba27_b.jpg\"/><figcaption>程序头信息</figcaption></figure><p>如上图所示，输出了程序头信息，包含了9个段，每个段在文件中的起始地址（Offset），程序加载后占据的虚拟地址（VirAddr），物理地址（PhyAddr），文件占据大小（FileSize），在内存中占据的空间大小（MemSize），文件权限（Flag）及内存边界对齐方式（Align）。同时，还包含了节区到段的映射关系，即上图所示的Section to Segment mapping。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1c8de8bb813c6c9ccce379ad11135a3a_b.jpg\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"1814\" class=\"origin_image zh-lightbox-thumb\" width=\"1580\" data-original=\"https://pic3.zhimg.com/v2-1c8de8bb813c6c9ccce379ad11135a3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1580&#39; height=&#39;1814&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"1814\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1580\" data-original=\"https://pic3.zhimg.com/v2-1c8de8bb813c6c9ccce379ad11135a3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1c8de8bb813c6c9ccce379ad11135a3a_b.jpg\"/><figcaption>节区头信息</figcaption></figure><p>上图所示输出了各段的具体信息，包括各段在文件中的大小和位置等信息。其中，.text存放的是源程序编译生成的可执行机器指令，.rodata、.data和.bss中存放的是程序数据。</p><p>上面两图所示，即此ELF文件包含9段（segments），其中9段又共包含30个节区（sections）。</p><p>信息量太大，写不下了，下篇再写...</p><p>--未完待续</p><blockquote>欢迎关注下方的微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1810&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1810\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1810\" data-original=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-78280d36a7743d1f01d686b7149e40ef_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "ELF", 
                    "tagLink": "https://api.zhihu.com/topics/20012726"
                }, 
                {
                    "tag": "Linux 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610306"
                }
            ], 
            "comments": [
                {
                    "userName": "RobotCode俱乐部", 
                    "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
                    "content": "<p>参考文献：</p><p>1、《Linux二进制分析》,Ryan O'Neill。</p><p>2、《攻克Linux系统编程》,宇文拓。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56030172", 
            "userName": "RobotCode俱乐部", 
            "userLink": "https://www.zhihu.com/people/cc6327b38c5467aed14de88fba9a97ca", 
            "upvote": 0, 
            "title": "在Visual Studio中安装VisualGDB", 
            "content": "<p>这一系列文章介绍如何在VS中使用VisulaGDB，在官网下载软件（<a href=\"https://link.zhihu.com/?target=https%3A//visualgdb.com/download/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">visualgdb.com/download/</span><span class=\"invisible\"></span></a>）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-35cdbf31f88a541603b6ee473877ed45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-35cdbf31f88a541603b6ee473877ed45_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;821&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"821\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"821\" data-original=\"https://pic2.zhimg.com/v2-35cdbf31f88a541603b6ee473877ed45_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-35cdbf31f88a541603b6ee473877ed45_b.jpg\"/></figure><p>直接安装，安装后，打开VS后如下图，会提示修改环境变量，按他提示操作即可：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4164b1985020e0ba378e750081a0566e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1046\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb\" width=\"1046\" data-original=\"https://pic3.zhimg.com/v2-4164b1985020e0ba378e750081a0566e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1046&#39; height=&#39;717&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1046\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1046\" data-original=\"https://pic3.zhimg.com/v2-4164b1985020e0ba378e750081a0566e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4164b1985020e0ba378e750081a0566e_b.jpg\"/></figure><p>修改完环境变量后，如下图，会提示重启VS。直接重启。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-00b01b325ddf7a64763eea1d5f2ca319_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic2.zhimg.com/v2-00b01b325ddf7a64763eea1d5f2ca319_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https://pic2.zhimg.com/v2-00b01b325ddf7a64763eea1d5f2ca319_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-00b01b325ddf7a64763eea1d5f2ca319_b.jpg\"/></figure><p>重新打开VS后，如下图，可在“已安装的产品”中查看VisualGDB已经安装OK：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2985cfbb46f632cb4d32d1726873432b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"780\" data-original=\"https://pic4.zhimg.com/v2-2985cfbb46f632cb4d32d1726873432b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;780&#39; height=&#39;580&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"780\" data-original=\"https://pic4.zhimg.com/v2-2985cfbb46f632cb4d32d1726873432b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2985cfbb46f632cb4d32d1726873432b_b.jpg\"/></figure><p>如下图，还需要下载试用密钥，可以免费试用30天：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-52443608c02b1e29edf18d52dbd1e234_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"314\" class=\"content_image\" width=\"341\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;341&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"341\" data-rawheight=\"314\" class=\"content_image lazy\" width=\"341\" data-actualsrc=\"https://pic1.zhimg.com/v2-52443608c02b1e29edf18d52dbd1e234_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7e2e1801904bbc76c91f849f2efd4ce1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"753\" data-original=\"https://pic2.zhimg.com/v2-7e2e1801904bbc76c91f849f2efd4ce1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;753&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"753\" data-original=\"https://pic2.zhimg.com/v2-7e2e1801904bbc76c91f849f2efd4ce1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7e2e1801904bbc76c91f849f2efd4ce1_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b8306f11b41ee931b26aa6f46d14ef2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"753\" data-original=\"https://pic4.zhimg.com/v2-b8306f11b41ee931b26aa6f46d14ef2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;753&#39; height=&#39;440&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"753\" data-original=\"https://pic4.zhimg.com/v2-b8306f11b41ee931b26aa6f46d14ef2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b8306f11b41ee931b26aa6f46d14ef2b_b.jpg\"/></figure><p>试用密钥下载后，正式可以试用了。会弹出如下语法检查的配置项：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-413bb16eea450c63d4555ac33a2623bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic1.zhimg.com/v2-413bb16eea450c63d4555ac33a2623bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;588&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"588\" data-original=\"https://pic1.zhimg.com/v2-413bb16eea450c63d4555ac33a2623bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-413bb16eea450c63d4555ac33a2623bc_b.jpg\"/></figure><p>这里默认就好，再次确认VisualGDB安装是否OK，如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9f5aab6753c4bcd712e19046a137cd0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic1.zhimg.com/v2-9f5aab6753c4bcd712e19046a137cd0c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;480&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic1.zhimg.com/v2-9f5aab6753c4bcd712e19046a137cd0c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9f5aab6753c4bcd712e19046a137cd0c_b.jpg\"/></figure><p>如下图，在<b>新建项目</b>中模板已经多了“<b>VisualGDB</b>”项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-17f9714b323afabd9b5e4dca98997f0e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"955\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb\" width=\"955\" data-original=\"https://pic3.zhimg.com/v2-17f9714b323afabd9b5e4dca98997f0e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;955&#39; height=&#39;660&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"955\" data-rawheight=\"660\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"955\" data-original=\"https://pic3.zhimg.com/v2-17f9714b323afabd9b5e4dca98997f0e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-17f9714b323afabd9b5e4dca98997f0e_b.jpg\"/></figure><p>当VisualGDB下载安装好后，会弹出如下的网页，有详细的使用教程，下节再介绍如何基于VisualGDB新建一个工程。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d617ed78f7b65559467c34fb1a60ec2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb\" width=\"1138\" data-original=\"https://pic4.zhimg.com/v2-d617ed78f7b65559467c34fb1a60ec2f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1138&#39; height=&#39;728&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1138\" data-original=\"https://pic4.zhimg.com/v2-d617ed78f7b65559467c34fb1a60ec2f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d617ed78f7b65559467c34fb1a60ec2f_b.jpg\"/></figure><p>--未完待续</p><blockquote>欢迎关注下方的微信公众号，一起交流学习：）</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a49c90838f9e658c5fbb858ffe53e8fc_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Microsoft Visual Studio", 
                    "tagLink": "https://api.zhihu.com/topics/19591907"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/candcpp"
}
