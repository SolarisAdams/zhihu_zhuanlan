{
    "title": "nginx源码分析", 
    "description": "源码https://github.com/theanarkh/read-nginx-0.1.0", 
    "followers": [
        "https://www.zhihu.com/people/qingfengzhiyu001", 
        "https://www.zhihu.com/people/wsjhk", 
        "https://www.zhihu.com/people/thl-18", 
        "https://www.zhihu.com/people/ren-wo-xing-86", 
        "https://www.zhihu.com/people/mel-tor", 
        "https://www.zhihu.com/people/li-wen-peng-15-76", 
        "https://www.zhihu.com/people/xiao-ke-61-2", 
        "https://www.zhihu.com/people/xiao-he-45-88", 
        "https://www.zhihu.com/people/yellow-56-33", 
        "https://www.zhihu.com/people/peng-xiao-zi-57", 
        "https://www.zhihu.com/people/zhi-yu-zi-16", 
        "https://www.zhihu.com/people/wtzhang95", 
        "https://www.zhihu.com/people/WapeYang", 
        "https://www.zhihu.com/people/lyyda-sha-zi", 
        "https://www.zhihu.com/people/ke-nan-77-22", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/huliuxuexi", 
        "https://www.zhihu.com/people/ma-yishu", 
        "https://www.zhihu.com/people/zheng-hua-31-46", 
        "https://www.zhihu.com/people/marklin-55", 
        "https://www.zhihu.com/people/zheng-rong-8-71", 
        "https://www.zhihu.com/people/huang-han-tao-54", 
        "https://www.zhihu.com/people/zheng-wen-kai-52"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/60742246", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 1, 
            "title": "nginx源码分析--内存池", 
            "content": "<p>内存池是nginx很重要的数据结构，结构图大概如下。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7e773114e124315c6e9df1eabec3fef4_b.jpg\" data-rawwidth=\"1141\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1141\" data-original=\"https://pic1.zhimg.com/v2-7e773114e124315c6e9df1eabec3fef4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1141&#39; height=&#39;1000&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1141\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1141\" data-original=\"https://pic1.zhimg.com/v2-7e773114e124315c6e9df1eabec3fef4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7e773114e124315c6e9df1eabec3fef4_b.jpg\"/></figure><p> ngx_palloc.h</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#ifndef _NGX_PALLOC_H_INCLUDED_\n#define _NGX_PALLOC_H_INCLUDED_\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n\n/*\n * NGX_MAX_ALLOC_FROM_POOL should be (ngx_pagesize - 1), i.e. 4095 on x86.\n * On Windows NT it decreases a number of locked pages in a kernel.\n */\n#define NGX_MAX_ALLOC_FROM_POOL  (ngx_pagesize - 1)\n\n#define NGX_DEFAULT_POOL_SIZE    (16 * 1024)\n\n#define NGX_POOL_ALIGNMENT       16\n#define NGX_MIN_POOL_SIZE                                                     \\\n    ngx_align((sizeof(ngx_pool_t) + 2 * sizeof(ngx_pool_large_t)),            \\\n              NGX_POOL_ALIGNMENT)\n\n// 函数指针，返回值为void，参数为void型的指针\ntypedef void (*ngx_pool_cleanup_pt)(void *data);\n\ntypedef struct ngx_pool_cleanup_s  ngx_pool_cleanup_t;\n\n/*\n    nginx在释放pool内存时会一次调用ngx_pool_cleanup_s链上各个节点的handler函数，并且以对应的data作为参数。\n*/\nstruct ngx_pool_cleanup_s {\n    // 回调函数\n    ngx_pool_cleanup_pt   handler;\n    // 执行handler时传入的参数\n    void                 *data;\n    ngx_pool_cleanup_t   *next;\n};\n\n\ntypedef struct ngx_pool_large_s  ngx_pool_large_t;\n\n// 管理大内存的结构体，nginx分配的内存分为大内存和小内存，ngx_pool_large_s管理大内存的操作，多少为大内存下面会说\nstruct ngx_pool_large_s {\n    // 下一个ngx_pool_large_s节点，如果某个ngx_pool_large_t节点内存不够，则向下找\n    ngx_pool_large_t     *next;\n    // 指向可用内存的指针，这些内存在分配大内存时使用\n    void                 *alloc;\n};\n\n// 管理小内存的结构体\ntypedef struct {\n    // 指向可用内存的首地址，表示从这开始的内存是可分配的，last之前的内存是已经被分配出去了的\n    u_char               *last;\n    // 指向可用内存的末地址，end之前，last之后的内存是可用的，超过end的内存是不可被分配的\n    u_char               *end;\n    // 下一个分配内存的节点，同ngx_pool_large_t\n    ngx_pool_t           *next;\n    // 在该节点管理的内存中，分配内存时失败的次数\n    ngx_uint_t            failed;\n} ngx_pool_data_t;\n\n\nstruct ngx_pool_s {\n    ngx_pool_data_t       d;\n    // max的值是大小内存的分界线\n    size_t                max;\n    // 分配小块内存时，从该指针指向的结构体开始查找\n    ngx_pool_t           *current;\n    // 这块还没看，后面补上\n    ngx_chain_t          *chain;\n    ngx_pool_large_t     *large;\n    ngx_pool_cleanup_t   *cleanup;\n    // 这块还没看，后面补上\n    ngx_log_t            *log;\n};\n\n// 处理文件相关，见后面函数\ntypedef struct {\n    ngx_fd_t              fd;\n    u_char               *name;\n    ngx_log_t            *log;\n} ngx_pool_cleanup_file_t;\n\n\nvoid *ngx_alloc(size_t size, ngx_log_t *log);\nvoid *ngx_calloc(size_t size, ngx_log_t *log);\n\nngx_pool_t *ngx_create_pool(size_t size, ngx_log_t *log);\nvoid ngx_destroy_pool(ngx_pool_t *pool);\nvoid ngx_reset_pool(ngx_pool_t *pool);\n\nvoid *ngx_palloc(ngx_pool_t *pool, size_t size);\nvoid *ngx_pnalloc(ngx_pool_t *pool, size_t size);\nvoid *ngx_pcalloc(ngx_pool_t *pool, size_t size);\nvoid *ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment);\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p);\n\n\nngx_pool_cleanup_t *ngx_pool_cleanup_add(ngx_pool_t *p, size_t size);\nvoid ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd);\nvoid ngx_pool_cleanup_file(void *data);\nvoid ngx_pool_delete_file(void *data);\n\n\n#endif /* _NGX_PALLOC_H_INCLUDED_ */</code></pre></div><p>ngx_palloc.c</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n\nstatic void *ngx_palloc_block(ngx_pool_t *pool, size_t size);\nstatic void *ngx_palloc_large(ngx_pool_t *pool, size_t size);\n\n/*\n    创建一个内存池\n    @param size 内存池大小\n    @param log 对应的日志结构体指针\n    @return p 内存池的首地址\n*/\n\nngx_pool_t * ngx_create_pool(size_t size, ngx_log_t *log)\n{\n    ngx_pool_t  *p;\n    // 内存对齐，提高cpu取数据时的性能\n    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);\n    if (p == NULL) {\n        return NULL;\n    }\n    // 内存池已经分配的内存末地址，也是可分配内存的首地址，前面需要存储内存池元数据的结构体ngx_pool_t\n    p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);\n    // 内存池的末地址，也就是能分配的内存最大值\n    p-&gt;d.end = (u_char *) p + size;\n    // 下一块供分配的内存，内存池是一个链表\n    p-&gt;d.next = NULL;\n    // 分配失败次数\n    p-&gt;d.failed = 0;\n    // 可分配的内存大小\n    size = size - sizeof(ngx_pool_t);\n    // 小于max的内存在ngx_pool_data_t管理的内存块分配，大于max的内存在ngx_pool_large_t管理的内存块分配\n    p-&gt;max = (size &lt; NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;\n    p-&gt;current = p;\n    p-&gt;chain = NULL;\n    p-&gt;large = NULL;\n    p-&gt;cleanup = NULL;\n    p-&gt;log = log;\n\n    return p;\n}\n/*\n    销毁内存池函数\n*/\nvoid ngx_destroy_pool(ngx_pool_t *pool)\n{\n    ngx_pool_t          *p, *n;\n    ngx_pool_large_t    *l;\n    ngx_pool_cleanup_t  *c;\n    // 销毁内存池之前逐个调用cleanup链表的节点中的handler函数，并且以data作为参数，见ngx_pool_cleanup_s结构体\n    for (c = pool-&gt;cleanup; c; c = c-&gt;next) {\n        if (c-&gt;handler) {\n            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,\n                           &#34;run cleanup: %p&#34;, c);\n            c-&gt;handler(c-&gt;data);\n        }\n    }\n    // 释放全部大块内存\n    for (l = pool-&gt;large; l; l = l-&gt;next) {\n\n        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0, &#34;free: %p&#34;, l-&gt;alloc);\n\n        if (l-&gt;alloc) {\n            ngx_free(l-&gt;alloc);\n        }\n    }\n// 调试时用\n#if (NGX_DEBUG)\n\n    /*\n     * we could allocate the pool-&gt;log from this pool\n     * so we cannot use this log while free()ing the pool\n     */\n\n    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) {\n        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,\n                       &#34;free: %p, unused: %uz&#34;, p, p-&gt;d.end - p-&gt;d.last);\n        // 到链表结尾，结束循环\n        if (n == NULL) {\n            break;\n        }\n    }\n\n#endif\n    // 释放全部小块内存\n    for (p = pool, n = pool-&gt;d.next; /* void */; p = n, n = n-&gt;d.next) {\n        ngx_free(p);\n\n        if (n == NULL) {\n            break;\n        }\n    }\n}\n\n/*\n    重置内存池状态\n*/\nvoid ngx_reset_pool(ngx_pool_t *pool)\n{\n    ngx_pool_t        *p;\n    ngx_pool_large_t  *l;\n    // 释放全部大块内存\n    for (l = pool-&gt;large; l; l = l-&gt;next) {\n        if (l-&gt;alloc) {\n            ngx_free(l-&gt;alloc);\n        }\n    }\n    // 把管理大块内存的结构体指针置空\n    pool-&gt;large = NULL;\n    // 把之前分配出去的内存回收回来，主要是修改last的值即可，因为分配内存是通过last的值去完成的\n    for (p = pool; p; p = p-&gt;d.next) {\n        p-&gt;d.last = (u_char *) p + sizeof(ngx_pool_t);\n    }\n}\n\n/*\n    在内存池上分配内存\n    @param pool 用来分配内存的内存池\n    @param size 分配的大小\n    @return p 返回分配内存成功后的首地址\n*/\nvoid * ngx_palloc(ngx_pool_t *pool, size_t size)\n{\n    u_char      *m;\n    ngx_pool_t  *p;\n    // 是否小于等于小内存的阈值\n    if (size &lt;= pool-&gt;max) {\n        // 指向当前可用于分配内存节点\n        p = pool-&gt;current;\n\n        do {\n            // 内存对齐处理\n            m = ngx_align_ptr(p-&gt;d.last, NGX_ALIGNMENT);\n            /*\n                该节点上的内存是否能满足所需，也就是所剩内存大小是否大于等于所需的内存size，\n                是的话把last往后移动size大小即可\n            */\n            if ((size_t) (p-&gt;d.end - m) &gt;= size) {\n                p-&gt;d.last = m + size;\n\n                return m;\n            }\n            // 如果当前节点的内存不足，到下一个节点上去找，直到都不能满足\n            p = p-&gt;d.next;\n\n        } while (p);\n        // 内存池上的可用内存都小于size大小，分配一块新的内存，并用ngx_pool_s结构管理，然后追加到ngx_pool_data_t链表中\n        return ngx_palloc_block(pool, size);\n    }\n    // 如果所需的内存是大块内存，就在大块内存中分配\n    return ngx_palloc_large(pool, size);\n}\n\n// 不做对齐处理，参考上面的ngx_palloc函数\nvoid * ngx_pnalloc(ngx_pool_t *pool, size_t size)\n{\n    u_char      *m;\n    ngx_pool_t  *p;\n\n    if (size &lt;= pool-&gt;max) {\n\n        p = pool-&gt;current;\n\n        do {\n            m = p-&gt;d.last;\n\n            if ((size_t) (p-&gt;d.end - m) &gt;= size) {\n                p-&gt;d.last = m + size;\n\n                return m;\n            }\n\n            p = p-&gt;d.next;\n\n        } while (p);\n\n        return ngx_palloc_block(pool, size);\n    }\n\n    return ngx_palloc_large(pool, size);\n}\n\n/*\n    重新分配一块内存，并由ngx_pool_t结构体管理，\n    然后链到ngx_pool_t结构体链表中，最后在该内存中分配size大小的内存\n    @return 返回分配了size大小的内存后，分配出去的内存的首地址    \n*/\nstatic void * ngx_palloc_block(ngx_pool_t *pool, size_t size)\n{\n    u_char      *m;\n    size_t       psize;\n    ngx_pool_t  *p, *new, *current;\n    // 分配一块和之前节点内存大小一样的内存，这个值是创建内存池时就决定了\n    psize = (size_t) (pool-&gt;d.end - (u_char *) pool);\n\n    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool-&gt;log);\n    if (m == NULL) {\n        return NULL;\n    }\n\n    new = (ngx_pool_t *) m;\n    // 初始化相关数据\n    new-&gt;d.end = m + psize;\n    new-&gt;d.next = NULL;\n    new-&gt;d.failed = 0;\n\n    // 可用内存等于end-ngx_pool_data_t结构体的大小，ngx_pool_data_t是描述这块内存的元数据\n    m += sizeof(ngx_pool_data_t);\n    m = ngx_align_ptr(m, NGX_ALIGNMENT);\n    // 分配size大小的内存出去，并修改last指针\n    new-&gt;d.last = m + size;\n\n    current = pool-&gt;current;\n    /*  \n        这里把cuurent指针指向最后一个分配内存失败次数大于4的节点的后面一个节点。这里认为，\n        分配失败次数大于4的内存块，以后分配失败的概率也更大，所以这里做了优化。\n        修改current指针，该指针是分配内存时，查找的起点。这样会优化查找的性能，\n        因为这是新开辟的内存，大部分情况下可以满足后面的内存分配，提高查找速度。\n        但是之所以会新开辟新的一块内存，并不是说之前节点上的内存就被分配完了，\n        可能只是不能满足这次的内存分配而已，比如前面节点还有1M，但是这次需要2M的内存，那么\n        就需要创建一个新的内存节点完成分配，那么下次需要分配1M内存的时候，也会从新开辟的节\n        点上去找，而不会再去旧节点上查找，这样就会导致那块内存的浪费。这里是空间换时间。\n    */\n    for (p = current; p-&gt;d.next; p = p-&gt;d.next) {\n        if (p-&gt;d.failed++ &gt; 4) {\n            current = p-&gt;d.next;\n        }\n    }\n    // 把新开辟的内存追加到原来的ngx_pool_data_t链表上\n    p-&gt;d.next = new;\n\n    pool-&gt;current = current ? current : new;\n\n    return m;\n}\n\n/*\n    分配大块内存，不做对齐处理\n    @return 返回size大小的内存的首地址\n*/\nstatic void * ngx_palloc_large(ngx_pool_t *pool, size_t size)\n{\n    void              *p;\n    ngx_uint_t         n;\n    ngx_pool_large_t  *large;\n    // 分配一块大内存\n    p = ngx_alloc(size, pool-&gt;log);\n    if (p == NULL) {\n        return NULL;\n    }\n\n    n = 0;\n\n    for (large = pool-&gt;large; large; large = large-&gt;next) {\n        // 找到一个alloc为空的ngx_pool_large_s结构体，然后把p对应的内存给他管理\n        if (large-&gt;alloc == NULL) {\n            large-&gt;alloc = p;\n            return p;\n        }\n        // 查找三次后都没有找到，则新建一个ngx_pool_large_s结构体来对p对应的内存进行管理\n        if (n++ &gt; 3) {\n            break;\n        }\n    }\n    // 申请一个ngx_pool_large_s结构体大小的内存\n    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));\n    if (large == NULL) {\n        // 申请失败的话要把p对应的内存释放掉\n        ngx_free(p);\n        return NULL;\n    }\n    // 头插法 把larger结构体查到最前面\n    large-&gt;alloc = p;\n    large-&gt;next = pool-&gt;large;\n    pool-&gt;large = large;\n\n    return p;\n}\n\n/*\n    分配大块内存，做对齐处理，直接插入到ngx_pool_large_t链表中\n    @return 返回size大小的内存的首地址\n*/\nvoid *ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment)\n{\n    void              *p;\n    ngx_pool_large_t  *large;\n\n    p = ngx_memalign(alignment, size, pool-&gt;log);\n    if (p == NULL) {\n        return NULL;\n    }\n\n    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));\n    if (large == NULL) {\n        ngx_free(p);\n        return NULL;\n    }\n\n    large-&gt;alloc = p;\n    large-&gt;next = pool-&gt;large;\n    pool-&gt;large = large;\n\n    return p;\n}\n\n/*\n    释放全部大块内存，把alloc指针置空\n*/\nngx_int_t ngx_pfree(ngx_pool_t *pool, void *p)\n{\n    ngx_pool_large_t  *l;\n\n    for (l = pool-&gt;large; l; l = l-&gt;next) {\n        if (p == l-&gt;alloc) {\n            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool-&gt;log, 0,\n                           &#34;free: %p&#34;, l-&gt;alloc);\n            ngx_free(l-&gt;alloc);\n            l-&gt;alloc = NULL;\n\n            return NGX_OK;\n        }\n    }\n\n    return NGX_DECLINED;\n}\n\n/*\n    分配size大小的内存，并且用0初始化\n*/\nvoid * ngx_pcalloc(ngx_pool_t *pool, size_t size)\n{\n    void *p;\n\n    p = ngx_palloc(pool, size);\n    if (p) {\n        ngx_memzero(p, size);\n    }\n\n    return p;\n}\n\n/*\n    分配一个ngx_pool_cleanup_t结构体和size大小的空间，然后在ngx_pool_cleanup_t链用头插法插入该节点\n    @return 返回ngx_pool_cleanup_t节点指针\n*/\nngx_pool_cleanup_t * ngx_pool_cleanup_add(ngx_pool_t *p, size_t size)\n{\n    ngx_pool_cleanup_t  *c;\n    // 分配一个ngx_pool_cleanup_t结构体空间\n    c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t));\n    if (c == NULL) {\n        return NULL;\n    }\n    // 如果有size则分配size大小的空间供存储数据，否则把data指针置空\n    if (size) {\n        c-&gt;data = ngx_palloc(p, size);\n        if (c-&gt;data == NULL) {\n            return NULL;\n        }\n\n    } else {\n        c-&gt;data = NULL;\n    }\n    // 初始化handler\n    c-&gt;handler = NULL;\n    /*\n        用头插法插入该节点，因为释放内存池时会逐个调用ngx_pool_cleanup_t节点，而ngx_pool_cleanup_t节点\n        的位置是无关紧要的，所以这里用头插法插入该节点，提高性能，没必要查到链表最后。\n    */\n\n    c-&gt;next = p-&gt;cleanup;\n\n    p-&gt;cleanup = c;\n\n    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p-&gt;log, 0, &#34;add cleanup: %p&#34;, c);\n\n    return c;\n}\n\n/*\n    关闭某个fd对应的文件\n    @param fd 文件描述符相关的\n*/\nvoid ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd)\n{\n    ngx_pool_cleanup_t       *c;\n    ngx_pool_cleanup_file_t  *cf;\n    // 遍历ngx_pool_cleanup_t链表，找到handler等于ngx_pool_cleanup_file函数并且data中的fd等于传入的fd的节点。然后执行handler\n    for (c = p-&gt;cleanup; c; c = c-&gt;next) {\n        if (c-&gt;handler == ngx_pool_cleanup_file) {\n\n            cf = c-&gt;data;\n\n            if (cf-&gt;fd == fd) {\n                c-&gt;handler(cf);\n                c-&gt;handler = NULL;\n                return;\n            }\n        }\n    }\n}\n\n/*\n    关闭某个文件\n*/\nvoid ngx_pool_cleanup_file(void *data)\n{\n    ngx_pool_cleanup_file_t  *c = data;\n\n    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &#34;file cleanup: fd:%d&#34;,\n                   c-&gt;fd);\n\n    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) {\n        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,\n                      ngx_close_file_n &#34; \\&#34;%s\\&#34; failed&#34;, c-&gt;name);\n    }\n}\n\n/*\n    删除和关闭某个文件\n*/\nvoid ngx_pool_delete_file(void *data)\n{\n    ngx_pool_cleanup_file_t  *c = data;\n\n    ngx_err_t  err;\n\n    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c-&gt;log, 0, &#34;file cleanup: fd:%d %s&#34;,\n                   c-&gt;fd, c-&gt;name);\n\n    if (ngx_delete_file(c-&gt;name) == NGX_FILE_ERROR) {\n        err = ngx_errno;\n\n        if (err != NGX_ENOENT) {\n            ngx_log_error(NGX_LOG_CRIT, c-&gt;log, err,\n                          ngx_delete_file_n &#34; \\&#34;%s\\&#34; failed&#34;, c-&gt;name);\n        }\n    }\n\n    if (ngx_close_file(c-&gt;fd) == NGX_FILE_ERROR) {\n        ngx_log_error(NGX_LOG_ALERT, c-&gt;log, ngx_errno,\n                      ngx_close_file_n &#34; \\&#34;%s\\&#34; failed&#34;, c-&gt;name);\n    }\n}</code></pre></div>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60742262", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx源码分析--数组链表", 
            "content": "<p>数组和链表的优缺点我们都知道，nginx的数组链表结合了这两种数据结构的优点，表面是链表，链表里每个节点是一个固定大小的数组。结构如下图。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-218c11cc78bc899fd710c4323abf764d_b.jpg\" data-rawwidth=\"1026\" data-rawheight=\"729\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1026\" data-original=\"https://pic2.zhimg.com/v2-218c11cc78bc899fd710c4323abf764d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1026&#39; height=&#39;729&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1026\" data-rawheight=\"729\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1026\" data-original=\"https://pic2.zhimg.com/v2-218c11cc78bc899fd710c4323abf764d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-218c11cc78bc899fd710c4323abf764d_b.jpg\"/></figure><p> ngx_list.h</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#ifndef _NGX_LIST_H_INCLUDED_\n#define _NGX_LIST_H_INCLUDED_\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n\ntypedef struct ngx_list_part_s  ngx_list_part_t;\n\n/*\n    ngx_list是一个数组链表，表面是一个链表，然后链表里的每一个节点都是一个固定大小的数组，\n    ngx_list_t是整个结构的领导者，他指向ngx_list_part_s，ngx_list_part_s指向数组的存储空间，\n    因为链表中每个节点，对应的数组可以存储多少个元素，每个元素的大小是固定的，所以这些元数据是存在ngx_list_s中，\n    没必要每个节点都存一份。ngx_list_part_s就是这个链表中的节点结构体，\n*/\nstruct ngx_list_part_s {\n    void             *elts; // 数组首地址\n    ngx_uint_t        nelts; // 数组已经存储了多少个元素\n    ngx_list_part_t  *next; // 指向下一个节点的指针\n};\n\n\ntypedef struct {\n    /*\n        最后一个数组节点的结构体指针，这个指针指向的节点是当前也是唯一一个可以用来存储数据的节点,\n        每次需要存储数据的时候，都是从last指针指向的节点开始找的，如果存满了就继续增加节点，此时last指向新的\n        节点，last一直指向当前可以存储数据的数据节点。\n    */\n    ngx_list_part_t  *last; \n    ngx_list_part_t   part; // 第一个数组节点的结构体\n    size_t            size; // 数组中，每个元素的大小\n    ngx_uint_t        nalloc; // 每个数组节点可以存储多少个元素\n    ngx_pool_t       *pool; // 用来分配内存的pool\n} ngx_list_t;\n\n\nngx_list_t *ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size);\n\n\n/*\n    初始化数组链表函数\n    @param list需要初始化的链表结构体\n    @param pool 用于分配内存的pool\n    @param n 该数组分配共可以存储几个元素\n    @param size 该数组中每个元素的大小\n    @return NGX_OK | NGX_ERROR\n*/\n\nstatic ngx_inline ngx_int_t ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size)\n{\n    // 分配一个n*size大小的数组。并用赋值给第一个链表节点的list-&gt;part.elts，指向数组的首地址\n    list-&gt;part.elts = ngx_palloc(pool, n * size);\n    if (list-&gt;part.elts == NULL) {\n        return NGX_ERROR;\n    }\n    // 数组已存0个元素\n    list-&gt;part.nelts = 0;\n    // 下一个链表节点\n    list-&gt;part.next = NULL;\n    // 此时，第一个节点是最后一个节点，需要取地址\n    list-&gt;last = &amp;list-&gt;part;\n    // 每个链表节点中，每个数组元素的大小\n    list-&gt;size = size;\n     // 每个链表节点中，数组最多可以存储多少个元素\n    list-&gt;nalloc = n;\n    list-&gt;pool = pool;\n\n    return NGX_OK;\n}\n\n\n/*\n *\n *  the iteration through the list:\n *\n *  part = &amp;list.part;\n *  data = part-&gt;elts;\n *\n *  for (i = 0 ;; i++) {\n *\n *      if (i &gt;= part-&gt;nelts) {\n *          if (part-&gt;next == NULL) {\n *              break;\n *          }\n *\n *          part = part-&gt;next;\n *          data = part-&gt;elts;\n *          i = 0;\n *      }\n *\n *      ...  data[i] ...\n *\n *  }\n */\n\n\nvoid *ngx_list_push(ngx_list_t *list);\n\n\n#endif /* _NGX_LIST_H_INCLUDED_ */</code></pre></div><p>ngx_list.c</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n/*\n    创建数组链表函数\n    @param pool 用于分配内存的pool\n    @param n 该数组分配共可以存储几个元素\n    @param size 该数组中每个元素的大小\n    @return 指向数组链表的结构体指针 ngx_list_t\n*/\nngx_list_t * ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size)\n{\n    ngx_list_t  *list;\n    // 分配一个ngx_list_t结构体大小的空间，用来存储数组链表的一些信息\n    list = ngx_palloc(pool, sizeof(ngx_list_t));\n    if (list == NULL) {\n        return NULL;\n    }\n    // 分配n * size大小的数组，并初始化第一个数组节点，使得第一个数组节点的指针指向分配的内存\n    list-&gt;part.elts = ngx_palloc(pool, n * size);\n    if (list-&gt;part.elts == NULL) {\n        return NULL;\n    }\n    // 同ngx_list_init函数\n    list-&gt;part.nelts = 0;\n    list-&gt;part.next = NULL;\n    list-&gt;last = &amp;list-&gt;part;\n    list-&gt;size = size;\n    list-&gt;nalloc = n;\n    list-&gt;pool = pool;\n\n    return list;\n}\n\n/*\n    返回可以用来存储数据的首地址，如果第一个数组节点没有空间就往后面的节点找，如果都没有空间就动态增加数组节点\n    @param l 存储数据的链表\n    @return 可以用来存储数据的首地址\n*/\nvoid * ngx_list_push(ngx_list_t *l)\n{\n    void             *elt;\n    ngx_list_part_t  *last;\n\n    last = l-&gt;last;\n    // 最后一个数组节点都已经存满了，需要增加新的数组节点\n    if (last-&gt;nelts == l-&gt;nalloc) {\n\n        /* the last part is full, allocate a new list part */\n        // 先开辟一个新的数组节点结构体，用来存储数组节点的相关信息\n        last = ngx_palloc(l-&gt;pool, sizeof(ngx_list_part_t));\n        if (last == NULL) {\n            return NULL;\n        }\n        // 开辟一块存储数据的内存，并交给last管理\n        last-&gt;elts = ngx_palloc(l-&gt;pool, l-&gt;nalloc * l-&gt;size);\n        if (last-&gt;elts == NULL) {\n            return NULL;\n        }\n        // 新开辟的数组存储了0个元素\n        last-&gt;nelts = 0;\n        // 该数组节点是最后一个数组节点，next为NULL\n        last-&gt;next = NULL;\n        // 把新开辟的数组节点插入到链表的最后面\n        l-&gt;last-&gt;next = last;\n        // 此时新开辟的数组节点是最后一个节点，也是唯一一个可用节点，可用的意思是还可以用来存储元素\n        l-&gt;last = last;\n    }\n    // 不管需不需要新增数组节点，last-&gt;elts + l-&gt;size * last-&gt;nelts此时都指向第一个可用的地址\n    elt = (char *) last-&gt;elts + l-&gt;size * last-&gt;nelts;\n    // 存储的元素个数加1\n    last-&gt;nelts++;\n    // 返回可存储数据的首地址，nginx里都是返回一个地址，然后在push函数外进行数据存储，而不是在push函数里操作\n    return elt;\n}</code></pre></div>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60742255", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx源码分析--数组", 
            "content": "<p>ngx_array.h</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#ifndef _NGX_ARRAY_H_INCLUDED_\n#define _NGX_ARRAY_H_INCLUDED_\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n\nstruct ngx_array_s {\n    void        *elts; // 指向数组始地址\n    ngx_uint_t   nelts; // 数组里已经存储了几个元素\n    size_t       size; // 数组中每个元素的大小\n    ngx_uint_t   nalloc; // 数组总共可以储存多少个元素\n    ngx_pool_t  *pool; // 数组的内存是由哪个pool分配的\n};\n\n\nngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size);\nvoid ngx_array_destroy(ngx_array_t *a);\nvoid *ngx_array_push(ngx_array_t *a);\nvoid *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n);\n\n/*\n    数组初始化函数\n    @param array 储存数组元数据的结构体指针\n    @param pool 用于分配内存的pool\n    @param n 该数组分配共可以存储几个元素\n    @param size 该数组中每个元素的大小\n    @return NGX_OK | NGX_ERROR\n*/\nstatic ngx_inline ngx_int_t ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size)\n{\n    /*\n     * set &#34;array-&gt;nelts&#34; before &#34;array-&gt;elts&#34;, otherwise MSVC thinks\n     * that &#34;array-&gt;nelts&#34; may be used without having been initialized\n     */\n    // 初始化中数组没有存储元素\n    array-&gt;nelts = 0; \n    // 初始化数组中每个元素的大小\n    array-&gt;size = size;\n    // 数组可以储存n个size大小的元素\n    array-&gt;nalloc = n;\n    array-&gt;pool = pool;\n    // 给数组分配n*size大小的内存\n    array-&gt;elts = ngx_palloc(pool, n * size);\n    if (array-&gt;elts == NULL) {\n        return NGX_ERROR;\n    }\n\n    return NGX_OK;\n}\n\n\n#endif /* _NGX_ARRAY_H_INCLUDED_ */</code></pre></div><hr/><p>ngx_array.c</p><div class=\"highlight\"><pre><code class=\"language-text\">/*\n * Copyright (C) Igor Sysoev\n * Copyright (C) Nginx, Inc.\n */\n\n\n#include &lt;ngx_config.h&gt;\n#include &lt;ngx_core.h&gt;\n\n/*\n    创建数组函数\n    @param pool 用于分配内存的pool\n    @param n 该数组分配共可以存储几个元素\n    @param size 该数组中每个元素的大小\n    @return 存储数组元数据的ngx_array_t结构体\n*/\nngx_array_t * ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size)\n{\n    ngx_array_t *a;\n    // 在pool里给存储元数据的结构体分配内存\n    a = ngx_palloc(p, sizeof(ngx_array_t));\n    if (a == NULL) {\n        return NULL;\n    }\n    // 在pool里给数组分配内存，并用a-&gt;elts指向始地址\n    a-&gt;elts = ngx_palloc(p, n * size);\n    if (a-&gt;elts == NULL) {\n        return NULL;\n    }\n    // 初始化结构体的成员\n    a-&gt;nelts = 0;\n    a-&gt;size = size;\n    a-&gt;nalloc = n;\n    a-&gt;pool = p;\n\n    return a;\n}\n\n/*\n    销毁数组函数 这个函数在nginx中并没有用到\n    @param a 储存数组元数据的结构体指针\n*/\nvoid ngx_array_destroy(ngx_array_t *a)\n{\n    ngx_pool_t  *p;\n\n    p = a-&gt;pool;\n    // 判断是否p-&gt;last指针的值是否恰好等于数组的末地址，否则会”释放“数组和p-&gt;last之间的数据\n    if ((u_char *) a-&gt;elts + a-&gt;size * a-&gt;nalloc == p-&gt;d.last) {\n        p-&gt;d.last -= a-&gt;size * a-&gt;nalloc;\n    }\n\n    if ((u_char *) a + sizeof(ngx_array_t) == p-&gt;d.last) {\n        p-&gt;d.last = (u_char *) a;\n    }\n}\n\n/*\n    在原数组基础增加一个元素空间，如果原数组空间不够需要重新开辟内存\n    @param a 储存数组元数据的结构体指针\n    @return elt 新增内存的首地址\n*/\nvoid * ngx_array_push(ngx_array_t *a)\n{\n    void        *elt, *new;\n    size_t       size;\n    ngx_pool_t  *p;\n    // 数组已存满了\n    if (a-&gt;nelts == a-&gt;nalloc) {\n\n        /* the array is full */\n        // 数组的总大小\n        size = a-&gt;size * a-&gt;nalloc;\n\n        p = a-&gt;pool;\n        // 如果数组的末地址和p-&gt;last指针相等并且追加size大小的空间后不会超过p-&gt;end，才能追加分配内存\n        if ((u_char *) a-&gt;elts + size == p-&gt;d.last &amp;&amp; p-&gt;d.last + a-&gt;size &lt;= p-&gt;d.end)\n        {\n            /*\n             * the array allocation is the last in the pool\n             * and there is space for new allocation\n             */\n            // 在数组末地址处追加size大小的内存，并且nalloc+1表示数组可以数组可以储存的元素个数加1 \n            p-&gt;d.last += a-&gt;size;\n            a-&gt;nalloc++;\n\n        } \n        // 如果数组满，并且无法追加内存时\n        else {\n            /* allocate a new array */\n            // 需要重新开辟大小为原来两倍的内存\n            new = ngx_palloc(p, 2 * size);\n            if (new == NULL) {\n                return NULL;\n            }\n            // 把原来的数据复制过去\n            ngx_memcpy(new, a-&gt;elts, size);\n            // 数组首地址指针指向新的内存地址\n            a-&gt;elts = new;\n            // 数组容量变为原来的两倍\n            a-&gt;nalloc *= 2;\n        }\n    }\n    /*\n        数组原来就有空间，或者数组已经存满并且追加内存分配成功，或者数组存满并重新开辟了内存，\n        a-&gt;elts + a-&gt;size * a-&gt;nelts都等于此时数组的第一个可用地址，也就是下一个数据可以由\n        这个地址开始存储，elt只需要指向此时的数组末地址就行，\n    */\n    elt = (u_char *) a-&gt;elts + a-&gt;size * a-&gt;nelts;\n    // 数组已存储的元素个数加一\n    a-&gt;nelts++;\n    // 返回数组第一个可用的内存地址，也就是下一个数据可以由这个地址开始存储\n    return elt;\n}\n\n/*\n    在原数组基础增加n个元素空间，如果原数组空间不够需要重新开辟内存\n    @param a 储存数组元数据的结构体指针\n    @return elt 新增内存的首地址\n*/\nvoid * ngx_array_push_n(ngx_array_t *a, ngx_uint_t n)\n{\n    void        *elt, *new;\n    size_t       size;\n    ngx_uint_t   nalloc;\n    ngx_pool_t  *p;\n\n    size = n * a-&gt;size;\n    // 数组增加n个元素后超过可存储元素的个数\n    if (a-&gt;nelts + n &gt; a-&gt;nalloc) {\n\n        /* the array is full */\n\n        p = a-&gt;pool;\n        // 同ngx_array_push函数\n        if ((u_char *) a-&gt;elts + a-&gt;size * a-&gt;nalloc == p-&gt;d.last\n            &amp;&amp; p-&gt;d.last + size &lt;= p-&gt;d.end)\n        {\n            /*\n             * the array allocation is the last in the pool\n             * and there is space for new allocation\n             */\n\n            p-&gt;d.last += size;\n            a-&gt;nalloc += n;\n\n        } else {\n            /* allocate a new array */\n            /*\n                如果追加的元素个数n比原来可存储的元素个数a-&gt;nalloc还大，否则开辟2*a-&gt;nalloc个空间可能还是比n小，\n                例如之前最大能存储5个，已经存储了2个，现在需要多存储12个，那么5*2&lt;12，\n                ,所以需要重新开辟2*n个空间，保证能多存储n个元素，其他的同ngx_array_push函数。\n            */\n            nalloc = 2 * ((n &gt;= a-&gt;nalloc) ? n : a-&gt;nalloc);\n\n            new = ngx_palloc(p, nalloc * a-&gt;size);\n            if (new == NULL) {\n                return NULL;\n            }\n\n            ngx_memcpy(new, a-&gt;elts, a-&gt;nelts * a-&gt;size);\n            a-&gt;elts = new;\n            a-&gt;nalloc = nalloc;\n        }\n    }\n\n    elt = (u_char *) a-&gt;elts + a-&gt;size * a-&gt;nelts;\n    a-&gt;nelts += n;\n\n    return elt;\n}</code></pre></div>", 
            "topic": [], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60552719", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之http模块初始化源码分析", 
            "content": "<p>http模块的初始化类似event模块，初始化的起点在解析到http指令的时候。对应的处理函数是ngx_http_block，因为该函数比较长，所以我们分段解析。第一部分先解析http模块的pre_conf、create_main_conf函数的实现。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_block</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>                        <span class=\"o\">*</span><span class=\"n\">rv</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>                   <span class=\"n\">mi</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>                   <span class=\"n\">port_found</span><span class=\"p\">,</span> <span class=\"n\">addr_found</span><span class=\"p\">,</span> <span class=\"n\">virtual_names</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_t</span>                   <span class=\"n\">pcf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_array_t</span>                  <span class=\"n\">in_ports</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_listening_t</span>             <span class=\"o\">*</span><span class=\"n\">ls</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_listen_t</span>           <span class=\"o\">*</span><span class=\"n\">lscf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_module_t</span>           <span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_handler_pt</span>         <span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_conf_ctx_t</span>         <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_in_port_t</span>          <span class=\"o\">*</span><span class=\"n\">in_port</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">inport</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_in_addr_t</span>          <span class=\"o\">*</span><span class=\"n\">in_addr</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">inaddr</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_server_name_t</span>      <span class=\"o\">*</span><span class=\"n\">s_name</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_srv_conf_t</span>   <span class=\"o\">**</span><span class=\"n\">cscfp</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">cscf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_loc_conf_t</span>    <span class=\"o\">*</span><span class=\"n\">clcf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_main_conf_t</span>   <span class=\"o\">*</span><span class=\"n\">cmcf</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>    <span class=\"n\">ngx_iocp_conf_t</span>             <span class=\"o\">*</span><span class=\"n\">iocpcf</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"cm\">/* the main http context */</span>\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_conf_ctx_t</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 创建一个ngx_http_conf_ctx_t结构体挂载到cycle的ctx中\n</span><span class=\"c1\"></span>    <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">ngx_http_conf_ctx_t</span> <span class=\"o\">**</span><span class=\"p\">)</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* count the number of the http modules and set up their indices */</span>\n\n    <span class=\"n\">ngx_http_max_module</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 遍历所有的nginx模块，筛选出http模块\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 标记该模块在http中的索引，位置\n</span><span class=\"c1\"></span>        <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_max_module</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 根据http的模块数，分配一个数组，分别由下面三个字段指向\n</span><span class=\"c1\"></span>    <span class=\"cm\">/* the main http main_conf, it&#39;s the same in the all http contexts */</span>\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">main_conf</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ngx_http_max_module</span><span class=\"p\">),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* the http null srv_conf, it&#39;s used to merge the server{}s&#39; srv_conf&#39;s */</span>\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">srv_conf</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ngx_http_max_module</span><span class=\"p\">),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* the http null loc_conf, it&#39;s used to merge the server{}s&#39; loc_conf&#39;s */</span>\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ngx_http_max_module</span><span class=\"p\">),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n\n    <span class=\"cm\">/* create the main_conf, srv_conf and loc_conf in all http modules */</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// http模块的上下文，是ngx_http_module_t结构体\n</span><span class=\"c1\"></span>        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"n\">mi</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 解析http配置前执行的钩子\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">pre_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">pre_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 创建一个ngx_http_core_main_conf_t结构体，挂到main_conf数组相应的位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_main_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">main_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">],</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_main_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 创建一个ngx_http_core_srv_conf_t结构体，挂到srv_conf数组相应的位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_srv_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">srv_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">],</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_srv_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">),</span> \n                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 创建一个ngx_http_core_loc_conf_s 结构体，挂到loc_conf数组相应的位置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_loc_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">],</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_loc_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"p\">...</span>\n<span class=\"p\">}</span></code></pre></div><p>下面我们看一下各个http模块的这些钩子函数都做了些什么。</p><h2>1 pre_conf钩子</h2><p><b>log模块</b> 其他模块都是基于log模块的ngx_http_log_fmt_ops变量进行的。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">ngx_http_log_op_name_t</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;addr&#34;</span><span class=\"p\">),</span> <span class=\"n\">INET_ADDRSTRLEN</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_addr</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;conn&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_INT32_LEN</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_connection</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;pipe&#34;</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_pipe</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;time&#34;</span><span class=\"p\">),</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;28/Sep/1970:12:00:00&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                          <span class=\"n\">ngx_http_log_time</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;msec&#34;</span><span class=\"p\">),</span> <span class=\"n\">TIME_T_LEN</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_msec</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;request&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_request</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;status&#34;</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_status</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;length&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_OFF_T_LEN</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_length</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;apache_length&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_OFF_T_LEN</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_apache_length</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;i&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_LOG_ARG</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_header_in</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;o&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_LOG_ARG</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_log_header_out</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_null_string</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_log_pre_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_log_op_name_t</span>  <span class=\"o\">*</span><span class=\"n\">op</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* void */</span> <span class=\"p\">}</span>\n    <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>gzip模块</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"n\">ngx_http_log_op_name_t</span> <span class=\"n\">ngx_http_gzip_log_fmt_ops</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;gzip_ratio&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_INT32_LEN</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_gzip_log_ratio</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_null_string</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_gzip_pre_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_log_op_name_t</span>  <span class=\"o\">*</span><span class=\"n\">op</span><span class=\"p\">;</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        找到第一个没有名字的项，即最后一项，然后把op置空，\n</span><span class=\"cm\">        为了防止下面一个for循环的时候op-&gt;op为空，不会导致死循环,\n</span><span class=\"cm\">        因为执行完该函数后，op-&gt;op是下一个pre_conf函数执行时，\n</span><span class=\"cm\">        ngx_http_log_fmt_ops数组的最后一个被判断的op-&gt;op\n</span><span class=\"cm\">    */</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_gzip_log_fmt_ops</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* void */</span> <span class=\"p\">}</span>\n    <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">;</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        找到最后一个op有值但是没有名字的项，这里其实是一个巧妙的设计，\n</span><span class=\"cm\">        因为op有值但是没有名字的项，op-&gt;op指向的是一个ngx_http_log_op_name_t数组，\n</span><span class=\"cm\">        然后op继续指向该数组第一个元素，继续迭代\n</span><span class=\"cm\">    */</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_log_op_name_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        每个模块中的ngx_http_log_op_name_t数组最后一个元素都是空的，\n</span><span class=\"cm\">        然后在这给op-&gt;op赋值，op-&gt;op指向的数组的最后一个元素也是空项，以此类推\n</span><span class=\"cm\">    */</span>\n    <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_log_op_pt</span><span class=\"p\">)</span> <span class=\"n\">ngx_http_gzip_log_fmt_ops</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>userid模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"n\">ngx_http_log_op_name_t</span> <span class=\"n\">ngx_http_userid_log_fmt_ops</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;uid_got&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_userid_log_uid_got</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;uid_set&#34;</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_userid_log_uid_set</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_null_string</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_userid_pre_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_log_op_name_t</span>  <span class=\"o\">*</span><span class=\"n\">op</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_userid_log_fmt_ops</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"cm\">/* void */</span> <span class=\"p\">}</span>\n    <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n\n    <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_fmt_ops</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span><span class=\"p\">;</span> <span class=\"n\">op</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_log_op_name_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">op</span><span class=\"o\">-&gt;</span><span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_log_op_pt</span><span class=\"p\">)</span> <span class=\"n\">ngx_http_userid_log_fmt_ops</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>各模块不一一列举，各模块的pre_conf函数执行完后内存视图是如下。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0a327ed2631de6b3c08977942beb570f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"739\" class=\"origin_image zh-lightbox-thumb\" width=\"804\" data-original=\"https://pic4.zhimg.com/v2-0a327ed2631de6b3c08977942beb570f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;804&#39; height=&#39;739&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"739\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"804\" data-original=\"https://pic4.zhimg.com/v2-0a327ed2631de6b3c08977942beb570f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0a327ed2631de6b3c08977942beb570f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>2 create_main_conf钩子</h2><p><b>1 http_core模块</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_core_create_main_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_core_main_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cmcf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_core_main_conf_t</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span>\n                   <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_core_srv_conf_t</span> <span class=\"o\">*</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cmcf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>2 charset_filter模块</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_charset_create_main_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_charset_main_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">mcf</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">mcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_charset_main_conf_t</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_charset_t</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">tables</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_charset_tables_t</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">mcf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>3 log模块</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_log_create_main_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_log_main_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">char</span>       <span class=\"o\">*</span><span class=\"n\">rc</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>  <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_log_main_conf_t</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">formats</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_log_fmt_t</span><span class=\"p\">),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">nelts</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 设置参数，在ngx_http_log_set_format里使用\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;combined&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">value</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;combined&#34;</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">*</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_combined_fmt</span><span class=\"p\">;</span>\n\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_log_set_format</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">,</span> <span class=\"n\">conf</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>执行完create_main_conf后的内存视图如下。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-16e73bd4f6cfef7de098681e26a2846f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1430\" data-rawheight=\"1042\" class=\"origin_image zh-lightbox-thumb\" width=\"1430\" data-original=\"https://pic4.zhimg.com/v2-16e73bd4f6cfef7de098681e26a2846f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1430&#39; height=&#39;1042&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1430\" data-rawheight=\"1042\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1430\" data-original=\"https://pic4.zhimg.com/v2-16e73bd4f6cfef7de098681e26a2846f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-16e73bd4f6cfef7de098681e26a2846f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\"/></figure><p>欢迎关注公众号</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60552607", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之http模块初始化源码分析（4）", 
            "content": "<p>我们继续分析ngx_http_block函数剩余的代码，剩下的代码就是处理phases和监听的端口、地址、servername的。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 恢复上下文\n</span><span class=\"c1\"></span>    <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* init lists of the handlers */</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_REWRITE_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">,</span>\n                   <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_handler_pt</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_REWRITE_PHASE</span><span class=\"p\">].</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n\n\n    <span class=\"cm\">/* the special find config phase for single handler */</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_FIND_CONFIG_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">,</span>\n                   <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_handler_pt</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_FIND_CONFIG_PHASE</span><span class=\"p\">].</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span>\n                           <span class=\"o\">&amp;</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_FIND_CONFIG_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"o\">*</span><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_find_location_config</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_ACCESS_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">,</span>\n                   <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_handler_pt</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_ACCESS_PHASE</span><span class=\"p\">].</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_DECLINED</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_CONTENT_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">,</span>\n                   <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_handler_pt</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_CONTENT_PHASE</span><span class=\"p\">].</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n\n\n    <span class=\"cm\">/*\n</span><span class=\"cm\">     * create the lists of the ports, the addresses and the server names\n</span><span class=\"cm\">     * to allow quickly find the server core module configuration at run-time\n</span><span class=\"cm\">     */</span>\n\n    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">in_ports</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_in_port_t</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* &#34;server&#34; directives */</span>\n    <span class=\"n\">cscfp</span> <span class=\"o\">=</span> <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 遍历每个server下的每个listen结构的每个端口，构造端口-&gt;地址-&gt;servername的多级结构\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">s</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"cm\">/* &#34;listen&#34; directives */</span>\n        <span class=\"c1\">// 在解析listen指令的时候写入\n</span><span class=\"c1\"></span>        <span class=\"n\">lscf</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">listen</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">listen</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"n\">port_found</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n            <span class=\"cm\">/* AF_INET only */</span>\n\n            <span class=\"n\">in_port</span> <span class=\"o\">=</span> <span class=\"n\">in_ports</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_ports</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">port</span> <span class=\"o\">==</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">port</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"c1\">// 端口已经在监听\n</span><span class=\"c1\"></span>                    <span class=\"cm\">/* the port is already in the port list */</span>\n\n                    <span class=\"n\">port_found</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">addr_found</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                    <span class=\"c1\">// 监听了这个端口的地址列表\n</span><span class=\"c1\"></span>                    <span class=\"n\">in_addr</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n                    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">a</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"c1\">// 监听的端口相等，判断地址是否也相等\n</span><span class=\"c1\"></span>                        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">addr</span> <span class=\"o\">==</span> <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                            <span class=\"cm\">/* the address is already bound to this port */</span>\n\n                            <span class=\"cm\">/* &#34;server_name&#34; directives */</span>\n                            <span class=\"c1\">// server对应的servername列表\n</span><span class=\"c1\"></span>                            <span class=\"n\">s_name</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">server_names</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n                            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">server_names</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                                <span class=\"cm\">/*\n</span><span class=\"cm\">                                 * add the server name and server core module\n</span><span class=\"cm\">                                 * configuration to the address:port\n</span><span class=\"cm\">                                 */</span>\n\n                                <span class=\"cm\">/* TODO: duplicate names can be checked here */</span>\n\n                                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                                              <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">names</span><span class=\"p\">),</span>\n                                              <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                                <span class=\"n\">name</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">s_name</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">;</span>\n                                <span class=\"n\">name</span><span class=\"o\">-&gt;</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">s_name</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span><span class=\"p\">;</span>\n                            <span class=\"p\">}</span>\n\n                            <span class=\"cm\">/*\n</span><span class=\"cm\">                             * check duplicate &#34;default&#34; server that\n</span><span class=\"cm\">                             * serves this address:port\n</span><span class=\"cm\">                             */</span>\n                            <span class=\"c1\">// 同一个server配置里只能有一个default_server\n</span><span class=\"c1\"></span>                            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">default_server</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">default_server</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                    <span class=\"n\">ngx_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_ERR</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                                           <span class=\"s\">&#34;duplicate default server in %s:%d&#34;</span><span class=\"p\">,</span>\n                                           <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">file_name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                           <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">line</span><span class=\"p\">);</span>\n\n                                    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n                                <span class=\"p\">}</span>\n\n                                <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">];</span>\n                                <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">default_server</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"p\">}</span>\n\n                            <span class=\"n\">addr_found</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n                            <span class=\"k\">break</span><span class=\"p\">;</span>\n\n                        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">addr</span> <span class=\"o\">==</span> <span class=\"n\">INADDR_ANY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                            <span class=\"cm\">/*\n</span><span class=\"cm\">                             * &#34;*:port&#34; must be the last resort so move it\n</span><span class=\"cm\">                             * to the end of the address list and add\n</span><span class=\"cm\">                             * the new address at its place\n</span><span class=\"cm\">                             */</span>\n                            <span class=\"cm\">/*\n</span><span class=\"cm\">                                如果监听的地址是any，则把any的项放到地址列表的最后，\n</span><span class=\"cm\">                                原来的位置填充当前的listen配置的信息,遍历到any项说明\n</span><span class=\"cm\">                                已经是地址列表的最后一项\n</span><span class=\"cm\">                            */</span>\n                            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"p\">,</span>\n                                          <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">),</span>\n                                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                            <span class=\"n\">ngx_memcpy</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">],</span>\n                                       <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_in_addr_t</span><span class=\"p\">));</span>\n\n                            <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n                            <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">default_server</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">default_server</span><span class=\"p\">;</span>\n                            <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">];</span>\n\n                            <span class=\"cm\">/*\n</span><span class=\"cm\">                             * create the empty list of the server names that\n</span><span class=\"cm\">                             * can be served on this address:port\n</span><span class=\"cm\">                             */</span>\n\n                            <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                                           <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_server_name_t</span><span class=\"p\">),</span>\n                                           <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n                            <span class=\"c1\">// 置1，下面不需要再新增一个项\n</span><span class=\"c1\"></span>                            <span class=\"n\">addr_found</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                            <span class=\"c1\">// 跳出循环，因为已经遍历到了any项了，说明是最后一项了\n</span><span class=\"c1\"></span>                            <span class=\"k\">break</span><span class=\"p\">;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"c1\">// 还没有该地址的项，新增一个\n</span><span class=\"c1\"></span>                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">addr_found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                        <span class=\"cm\">/*\n</span><span class=\"cm\">                         * add the address to the addresses list that\n</span><span class=\"cm\">                         * bound to this port\n</span><span class=\"cm\">                         */</span>\n\n                        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"p\">,</span>\n                                      <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">),</span>\n                                      <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                        <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n                        <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">default_server</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">default_server</span><span class=\"p\">;</span>\n                        <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">];</span>\n\n                        <span class=\"cm\">/*\n</span><span class=\"cm\">                         * create the empty list of the server names that\n</span><span class=\"cm\">                         * can be served on this address:port\n</span><span class=\"cm\">                         */</span>\n\n                        <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                                       <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_server_name_t</span><span class=\"p\">),</span>\n                                       <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 在已监听端口里没有找到当前端口\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">port_found</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"cm\">/* add the port to the in_port list */</span>\n                <span class=\"c1\">// 记录该端口\n</span><span class=\"c1\"></span>                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">in_port</span><span class=\"p\">,</span>\n                              <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in_ports</span><span class=\"p\">),</span>\n                              <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                <span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">port</span><span class=\"p\">;</span>\n\n                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">port_text</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span>\n                              <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n                <span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">port_text</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n                                                      <span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">port_text</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                                      <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s\">&#34;:%d&#34;</span><span class=\"p\">,</span>\n                                                      <span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">port</span><span class=\"p\">);</span>\n\n                <span class=\"cm\">/* create list of the addresses that bound to this port ... */</span>\n                <span class=\"c1\">// 监听了这个端口的地址列表\n</span><span class=\"c1\"></span>                <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">addrs</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                               <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_in_addr_t</span><span class=\"p\">),</span>\n                               <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in_port</span><span class=\"o\">-&gt;</span><span class=\"n\">addrs</span><span class=\"p\">),</span>\n                              <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                <span class=\"cm\">/* ... and add the address to this list */</span>\n\n                <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n                <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">default_server</span> <span class=\"o\">=</span> <span class=\"n\">lscf</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">].</span><span class=\"n\">default_server</span><span class=\"p\">;</span>\n                <span class=\"c1\">// 记录server配置，方便后续快速查找\n</span><span class=\"c1\"></span>                <span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">];</span>\n\n                <span class=\"cm\">/*\n</span><span class=\"cm\">                 * create the empty list of the server names that\n</span><span class=\"cm\">                 * can be served on this address:port\n</span><span class=\"cm\">                 */</span>\n\n                <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">inaddr</span><span class=\"o\">-&gt;</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n                               <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_server_name_t</span><span class=\"p\">),</span>\n                               <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 代码执行到这，内存视图对应下图的图一（圆圈里是1）。\n</span><span class=\"c1\"></span>    <span class=\"cm\">/* optimize the lists of the ports, the addresses and the server names */</span>\n\n    <span class=\"cm\">/* AF_INET only */</span>\n    <span class=\"c1\">// 优化，如果不存在虚拟主机则不需要保存servername，因为servername是用来匹配虚拟主机的\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 监听的端口列表\n</span><span class=\"c1\"></span>    <span class=\"n\">in_port</span> <span class=\"o\">=</span> <span class=\"n\">in_ports</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_ports</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"cm\">/* check whether the all server names point to the same server */</span>\n        <span class=\"c1\">// 地址列表\n</span><span class=\"c1\"></span>        <span class=\"n\">in_addr</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">a</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"n\">virtual_names</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"c1\">// servername列表\n</span><span class=\"c1\"></span>            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"cm\">/*\n</span><span class=\"cm\">                    比较当前的地址和该地址下所有的servername，如果指向的server配置\n</span><span class=\"cm\">                    是一样的，说明当前的地址收到连接或者请求的时候，直接给server里配置的服务\n</span><span class=\"cm\">                    就行，如果有一个servername指向的server配置和当前地址的不一样，说明当一个请求或\n</span><span class=\"cm\">                    连接到来时，nginx无法通过地址决定该请求转发给哪个服务，还需要servername信息，即\n</span><span class=\"cm\">                    虚拟主机名\n</span><span class=\"cm\">                */</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">!=</span> <span class=\"n\">name</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">virtual_names</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"cm\">/*\n</span><span class=\"cm\">             * if the all server names point to the same server\n</span><span class=\"cm\">             * then we do not need to check them at run-time\n</span><span class=\"cm\">             */</span>\n            <span class=\"c1\">// 没有配置虚拟主机则不需要保存servername信息\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">virtual_names</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">names</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"cm\">/*\n</span><span class=\"cm\">         * if there&#39;s the binding to &#34;*:port&#34; then we need to bind()\n</span><span class=\"cm\">         * to &#34;*:port&#34; only and ignore the other bindings\n</span><span class=\"cm\">         */</span>\n        <span class=\"c1\">// 地址列表的最后一项是不是any，如果绑定的地址中有any，则绑定该地址即可，其他的地址不需要绑定了\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">addr</span> <span class=\"o\">==</span> <span class=\"n\">INADDR_ANY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">a</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">in_addr</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// push到cycle-&gt;listening中，并填充某些字段\n</span><span class=\"c1\"></span>            <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">ngx_listening_inet_stream_socket</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">,</span>\n                                                  <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">port</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ls</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">backlog</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"cp\">#if 0\n</span><span class=\"cp\">#if 0\n</span><span class=\"cp\"></span><span class=\"c\">            ls-&gt;nonblocking = 1;\n</span><span class=\"c\"></span><span class=\"cp\">#else\n</span><span class=\"cp\"></span><span class=\"c\">            ls-&gt;nonblocking = 0;\n</span><span class=\"c\"></span><span class=\"cp\">#endif\n</span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_ntop</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_init_connection</span><span class=\"p\">;</span>\n            <span class=\"c1\">// 地址对应的server配置\n</span><span class=\"c1\"></span>            <span class=\"n\">cscf</span> <span class=\"o\">=</span> <span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">core_srv_conf</span><span class=\"p\">;</span>\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">pool_size</span> <span class=\"o\">=</span> <span class=\"n\">cscf</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_pool_size</span><span class=\"p\">;</span>\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">post_accept_timeout</span> <span class=\"o\">=</span> <span class=\"n\">cscf</span><span class=\"o\">-&gt;</span><span class=\"n\">post_accept_timeout</span><span class=\"p\">;</span>\n\n            <span class=\"n\">clcf</span> <span class=\"o\">=</span> <span class=\"n\">cscf</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">ngx_http_core_module</span><span class=\"p\">.</span><span class=\"n\">ctx_index</span><span class=\"p\">];</span>\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">clcf</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>            <span class=\"n\">iocpcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_event_get_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_iocp_module</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">iocpcf</span><span class=\"o\">-&gt;</span><span class=\"n\">acceptex_read</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">post_accept_buffer_size</span> <span class=\"o\">=</span> <span class=\"n\">cscf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_header_buffer_size</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">;</span>\n            <span class=\"c1\">// 有多个地址并且没有监听any地址\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"n\">in_addr</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n                <span class=\"c1\">// 没有绑定any的配置\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in_addr</span><span class=\"p\">[</span><span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">addr</span> <span class=\"o\">!=</span> <span class=\"n\">INADDR_ANY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                    <span class=\"cm\">/*\n</span><span class=\"cm\">                     * if this port has not the &#34;*:port&#34; binding then create\n</span><span class=\"cm\">                     * the separate ngx_http_in_port_t for the all bindings\n</span><span class=\"cm\">                     */</span>\n                    <span class=\"cm\">/*\n</span><span class=\"cm\">                        分配一个新的端口和地址结构，形成一个端口对应一个地址的结构，\n</span><span class=\"cm\">                        但是servername是共享的，比如端口1*地址数+端口2*地址数个结构体\n</span><span class=\"cm\">                    */</span>\n                    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">inport</span><span class=\"p\">,</span>\n                                  <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span>\n                                             <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_in_port_t</span><span class=\"p\">)),</span>\n                                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n                    <span class=\"c1\">// 复制\n</span><span class=\"c1\"></span>                    <span class=\"n\">inport</span><span class=\"o\">-&gt;</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">port</span><span class=\"p\">;</span>\n                    <span class=\"n\">inport</span><span class=\"o\">-&gt;</span><span class=\"n\">port_text</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">port_text</span><span class=\"p\">;</span>\n\n                    <span class=\"cm\">/* init list of the addresses ... */</span>\n\n                    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">inport</span><span class=\"o\">-&gt;</span><span class=\"n\">addrs</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                                   <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_in_addr_t</span><span class=\"p\">),</span>\n                                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n                    <span class=\"cm\">/* ... and set up it with the first address */</span>\n                    <span class=\"c1\">// 地址等于当前循环的地址\n</span><span class=\"c1\"></span>                    <span class=\"n\">inport</span><span class=\"o\">-&gt;</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n                    <span class=\"n\">inport</span><span class=\"o\">-&gt;</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span> <span class=\"o\">=</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n\n                    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span> <span class=\"o\">=</span> <span class=\"n\">inport</span><span class=\"p\">;</span>\n\n                    <span class=\"cm\">/* prepare for the next cycle */</span>\n                    <span class=\"c1\">// 指向地址列表中下一个地址\n</span><span class=\"c1\"></span>                    <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span>\n                                                       <span class=\"o\">+</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">;</span>\n                    <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"o\">--</span><span class=\"p\">;</span>\n\n                    <span class=\"n\">in_addr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_http_in_addr_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">addrs</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n                    <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n                    <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">in_port</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">];</span>\n            <span class=\"n\">a</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"c1\">// 初始化listening结构体中ip地址和端口相关的字段\n</span><span class=\"c1\"></span><span class=\"n\">ngx_listening_t</span> <span class=\"o\">*</span><span class=\"n\">ngx_listening_inet_stream_socket</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">in_addr_t</span> <span class=\"n\">addr</span><span class=\"p\">,</span>\n                                                 <span class=\"n\">in_port_t</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">size_t</span>               <span class=\"n\">len</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_listening_t</span>     <span class=\"o\">*</span><span class=\"n\">ls</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>  <span class=\"o\">*</span><span class=\"n\">addr_in</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">ngx_array_push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">listening</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_memzero</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_listening_t</span><span class=\"p\">));</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">addr_in</span> <span class=\"o\">=</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"cp\">#if (HAVE_SIN_LEN)\n</span><span class=\"cp\"></span>    <span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">=</span> <span class=\"n\">addr</span><span class=\"p\">;</span>\n    <span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_port</span> <span class=\"o\">=</span> <span class=\"n\">htons</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_text</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">INET_ADDRSTRLEN</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">ngx_inet_ntop</span><span class=\"p\">(</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_text</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">INET_ADDRSTRLEN</span><span class=\"p\">);</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_text</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_text</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"n\">len</span><span class=\"p\">,</span>\n                                     <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s\">&#34;:%d&#34;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_socket_t</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">SOCK_STREAM</span><span class=\"p\">;</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"n\">IPPROTO_IP</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">flags</span> <span class=\"o\">=</span> <span class=\"n\">WSA_FLAG_OVERLAPPED</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">sockaddr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">addr_in</span><span class=\"p\">;</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">socklen</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"p\">);</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">offsetof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"p\">,</span> <span class=\"n\">sin_addr</span><span class=\"p\">);</span>\n    <span class=\"n\">ls</span><span class=\"o\">-&gt;</span><span class=\"n\">addr_text_max_len</span> <span class=\"o\">=</span> <span class=\"n\">INET_ADDRSTRLEN</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ls</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>端口、地址、servername处理完后的内存视图如下。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-19b6936c68c85e39b4b5f5f858a51584_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1301\" data-rawheight=\"1113\" class=\"origin_image zh-lightbox-thumb\" width=\"1301\" data-original=\"https://pic1.zhimg.com/v2-19b6936c68c85e39b4b5f5f858a51584_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1301&#39; height=&#39;1113&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1301\" data-rawheight=\"1113\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1301\" data-original=\"https://pic1.zhimg.com/v2-19b6936c68c85e39b4b5f5f858a51584_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-19b6936c68c85e39b4b5f5f858a51584_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\"/></figure><p>欢迎关注公众号</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60552538", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之http模块初始化源码分析（3）", 
            "content": "<p>我们继续分析ngx_http_block函数的代码，指令解析完，继续执行各子模块的钩子函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/*\n</span><span class=\"cm\">     * init http{} main_conf&#39;s, merge the server{}s&#39; srv_conf&#39;s\n</span><span class=\"cm\">     * and its location{}s&#39; loc_conf&#39;s\n</span><span class=\"cm\">     */</span>\n    <span class=\"c1\">// 取出ngx_http_core_module在http上下文的main配置 \n</span><span class=\"c1\"></span>    <span class=\"n\">cmcf</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">main_conf</span><span class=\"p\">[</span><span class=\"n\">ngx_http_core_module</span><span class=\"p\">.</span><span class=\"n\">ctx_index</span><span class=\"p\">];</span>\n    <span class=\"c1\">// server指令的管理结构\n</span><span class=\"c1\"></span>    <span class=\"n\">cscfp</span> <span class=\"o\">=</span> <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"n\">mi</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/* init http{} main_conf&#39;s */</span>\n        <span class=\"c1\">// ngx_conf_parse没有赋值的字段在这进行初始化\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_main_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_main_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">main_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">]);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n                <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// http上下文下所有的server指令对应的结构体数组\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">s</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"cm\">/* merge the server{}s&#39; srv_conf&#39;s */</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">merge_srv_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 合并http层和server层配置\n</span><span class=\"c1\"></span>                <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">merge_srv_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                            <span class=\"c1\">// 子模块在http上下文的srv_conf配置，内容由子模块创建\n</span><span class=\"c1\"></span>                                            <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">srv_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">],</span>\n                                            <span class=\"cm\">/*\n</span><span class=\"cm\">                                                cscfp[s]指向server上下文中的ngx_http_core_srv_conf_t结构体，\n</span><span class=\"cm\">                                                通过反向指针找到server指令创建的上下文，再找出某个模块的的srv_conf\n</span><span class=\"cm\">                                            */</span>\n                                            <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">srv_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">]);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n                    <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">merge_loc_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"cm\">/* merge the server{}&#39;s loc_conf */</span>\n                <span class=\"c1\">// 合并http层和非嵌套的location层的配置\n</span><span class=\"c1\"></span>                <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                            <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">],</span>\n                                            <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">mi</span><span class=\"p\">]);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n                    <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"cm\">/* merge the locations{}&#39; loc_conf&#39;s */</span>\n                <span class=\"cm\">/*\n</span><span class=\"cm\">                    合并server和非嵌套location的配置、非嵌套location和嵌套location的配置,\n</span><span class=\"cm\">                    &amp;cscfp[s]-&gt;locations：server下的所有非嵌套location\n</span><span class=\"cm\">                    cscfp[s]-&gt;ctx-&gt;loc_conf，server层各模块关于location的配置 \n</span><span class=\"cm\">                */</span>\n                <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_merge_locations</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">locations</span><span class=\"p\">,</span>\n                                              <span class=\"n\">cscfp</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">,</span>\n                                              <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">mi</span><span class=\"p\">);</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n                    <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span></code></pre></div><p><b>1 init_main_conf</b> 只有charset模块实现了init_main_conf函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_charset_init_main_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_charset_main_conf_t</span> <span class=\"o\">*</span><span class=\"n\">mcf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_uint_t</span>                  <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_charset_t</span>         <span class=\"o\">*</span><span class=\"n\">charset</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_charset_tables_t</span>  <span class=\"o\">*</span><span class=\"n\">tables</span><span class=\"p\">;</span>\n\n    <span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"n\">charset</span> <span class=\"o\">=</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 遍历charset数组\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">server</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span>\n                                        <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">tables</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">tables</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">ngx_int_t</span><span class=\"p\">)</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">src</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">dst</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">src2dst</span><span class=\"p\">;</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">ngx_int_t</span><span class=\"p\">)</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">dst</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">src</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">dst2src</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">//校验\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">server</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">n</span> <span class=\"o\">&lt;</span> <span class=\"n\">mcf</span><span class=\"o\">-&gt;</span><span class=\"n\">charsets</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">n</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">tables</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">])</span> <span class=\"p\">{</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">ngx_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                          <span class=\"s\">&#34; no </span><span class=\"se\">\\&#34;</span><span class=\"s\">charset_map</span><span class=\"se\">\\&#34;</span><span class=\"s\"> between the charsets &#34;</span>\n                          <span class=\"s\">&#34;</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> and </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n                          <span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b8ec99244aaf777fb625b8ac5ffd1e7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-b8ec99244aaf777fb625b8ac5ffd1e7f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;428&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-b8ec99244aaf777fb625b8ac5ffd1e7f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b8ec99244aaf777fb625b8ac5ffd1e7f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2 merge_srv_conf</b> 我们继续看一下各个模块的merge_srv_conf函数。 http_core模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_core_merge_srv_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                          <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_core_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_http_listen_t</span>          <span class=\"o\">*</span><span class=\"n\">l</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_server_name_t</span>     <span class=\"o\">*</span><span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_main_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">cmcf</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* TODO: it does not merge, it inits only */</span>\n    <span class=\"c1\">// 如果该server没有配置listen指令，则设置默认值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">listen</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">listen</span><span class=\"p\">),</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 任何地址进来的连接都可以\n</span><span class=\"c1\"></span>        <span class=\"n\">l</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">INADDR_ANY</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>        <span class=\"n\">l</span><span class=\"o\">-&gt;</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">80</span><span class=\"p\">;</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>        <span class=\"cm\">/* STUB: getuid() should be cached */</span>\n        <span class=\"c1\">// 等于0说明是root\n</span><span class=\"c1\"></span>        <span class=\"n\">l</span><span class=\"o\">-&gt;</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">getuid</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">80</span> <span class=\"o\">:</span> <span class=\"mi\">8000</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>        <span class=\"n\">l</span><span class=\"o\">-&gt;</span><span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">AF_INET</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 没有配置servername，则取本机主机名\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">server_names</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">server_names</span><span class=\"p\">),</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">NGX_MAXHOSTNAMELEN</span><span class=\"p\">),</span>\n                      <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 获取主机名 \n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gethostname</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">NGX_MAXHOSTNAMELEN</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_errno</span><span class=\"p\">,</span>\n                               <span class=\"s\">&#34;gethostname() failed&#34;</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">ngx_strlen</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 该servername对应的server配置\n</span><span class=\"c1\"></span>        <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">core_srv_conf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#if 0</span><span class=\"c\">\n</span><span class=\"c\">        ctx = (ngx_http_conf_ctx_t *)\n</span><span class=\"c\">                                    cf-&gt;cycle-&gt;conf_ctx[ngx_http_module.index];\n</span><span class=\"c\">        cmcf = ctx-&gt;main_conf[ngx_http_core_module.ctx_index];\n</span><span class=\"c\"></span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>        <span class=\"n\">cmcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_conf_get_module_main_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_core_module</span><span class=\"p\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">max_server_name_len</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">max_server_name_len</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        如果第一个参数没有值，则取第二个参数的，如果第二个参数也没有值，\n</span><span class=\"cm\">        则取第三个参数的，即子类没有值，则取父类的，父类也没有值，则取默认的\n</span><span class=\"cm\">    */</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_pool_size</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_pool_size</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">post_accept_timeout</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">post_accept_timeout</span><span class=\"p\">,</span> <span class=\"mi\">60000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">request_pool_size</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">request_pool_size</span><span class=\"p\">,</span> <span class=\"mi\">4096</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_header_timeout</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">client_header_timeout</span><span class=\"p\">,</span> <span class=\"mi\">60000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_header_buffer_size</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">client_header_buffer_size</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_bufs_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">large_client_header_buffers</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">large_client_header_buffers</span><span class=\"p\">,</span>\n                              <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">ngx_pagesize</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">large_client_header_buffers</span><span class=\"p\">.</span><span class=\"n\">size</span> <span class=\"o\">&lt;</span> <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_pool_size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                           <span class=\"s\">&#34;the </span><span class=\"se\">\\&#34;</span><span class=\"s\">large_client_header_buffers</span><span class=\"se\">\\&#34;</span><span class=\"s\"> size must be &#34;</span>\n                           <span class=\"s\">&#34;equal to or bigger than </span><span class=\"se\">\\&#34;</span><span class=\"s\">connection_pool_size</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_merge_unsigned_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">restrict_host_names</span><span class=\"p\">,</span>\n                                  <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">restrict_host_names</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>rewrite模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_rewrite_merge_srv_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                             <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_rewrite_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_rewrite_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>ssl模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_ssl_merge_srv_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                         <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_ssl_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_ssl_srv_conf_t</span> <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">enable</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">enable</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">enable</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// server上下文里没有配置证书和私钥则取http上下文的\n</span><span class=\"c1\"></span>    <span class=\"n\">ngx_conf_merge_str_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate</span><span class=\"p\">,</span>\n                             <span class=\"n\">NGX_DEFLAUT_CERTIFICATE</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_conf_merge_str_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate_key</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate_key</span><span class=\"p\">,</span>\n                             <span class=\"n\">NGX_DEFLAUT_CERTIFICATE_KEY</span><span class=\"p\">);</span>\n\n    <span class=\"cm\">/* TODO: configure methods */</span>\n\n    <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">ssl_ctx</span> <span class=\"o\">=</span> <span class=\"n\">SSL_CTX_new</span><span class=\"p\">(</span><span class=\"n\">SSLv23_server_method</span><span class=\"p\">());</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">ssl_ctx</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_ssl_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&#34;SSL_CTX_new() failed&#34;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 加载用户证书\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">SSL_CTX_use_certificate_file</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">ssl_ctx</span><span class=\"p\">,</span>\n                                     <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                     <span class=\"n\">SSL_FILETYPE_PEM</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_ssl_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                      <span class=\"s\">&#34;SSL_CTX_use_certificate_file(</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">) failed&#34;</span><span class=\"p\">,</span>\n                      <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 加载用户私钥\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">SSL_CTX_use_PrivateKey_file</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">ssl_ctx</span><span class=\"p\">,</span>\n                                    <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate_key</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                    <span class=\"n\">SSL_FILETYPE_PEM</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_ssl_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                      <span class=\"s\">&#34;SSL_CTX_use_PrivateKey_file(</span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">) failed&#34;</span><span class=\"p\">,</span>\n                      <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">certificate_key</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>3 merge_loc_conf</b> access模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                            <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 如果location里的配置为空，则取父级的配置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>charset模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_charset_merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                             <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_charset_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_charset_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">enable</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">enable</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">autodetect</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">autodetect</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">source_charset</span> <span class=\"o\">==</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">source_charset</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">source_charset</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">default_charset</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">default_charset</span><span class=\"p\">,</span>\n                         <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">source_charset</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>http_core模块</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_core_merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                          <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_core_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span>               <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_type_t</span>  <span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_conf_merge_str_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"s\">&#34;html&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_conf_full_name</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">root</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 子层没有配置types\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 父层也没有配置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 取默认的\n</span><span class=\"c1\"></span>            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span><span class=\"p\">,</span>\n                          <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">NGX_HTTP_TYPES_HASH_PRIME</span>\n                                                        <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_array_t</span><span class=\"p\">)),</span>\n                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n            <span class=\"c1\">// 初始化分配的数组\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">NGX_HTTP_TYPES_HASH_PRIME</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span>\n                               <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_type_t</span><span class=\"p\">),</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 遍历默认配置\n</span><span class=\"c1\"></span>            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">exten</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"cm\">/*\n</span><span class=\"cm\">                    #define ngx_http_types_hash_key(key, ext)                                   \\\n</span><span class=\"cm\">                    {                                                                   \\\n</span><span class=\"cm\">                        u_int n;                                                        \\\n</span><span class=\"cm\">                        for (key = 0, n = 0; n &lt; ext.len; n++) {                        \\\n</span><span class=\"cm\">                            key += ext.data[n];                                         \\\n</span><span class=\"cm\">                        }                                                               \\\n</span><span class=\"cm\">                        key %= NGX_HTTP_TYPES_HASH_PRIME;                               \\\n</span><span class=\"cm\">                    }\n</span><span class=\"cm\">                */</span>\n                <span class=\"c1\">// 用宏算出数组索引，如果索引一样说明extern一样，则覆盖，这里假设了不会存在html和lmth这样type\n</span><span class=\"c1\"></span>                <span class=\"n\">ngx_http_types_hash_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">exten</span><span class=\"p\">);</span>\n\n                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]),</span>\n                              <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n                <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">exten</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">exten</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">exten</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">exten</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">type</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n                <span class=\"n\">t</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">default_types</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">type</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">err_log</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">new_log</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">error_pages</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">error_pages</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">error_pages</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">error_pages</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_merge_str_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">default_type</span><span class=\"p\">,</span>\n                             <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">default_type</span><span class=\"p\">,</span> <span class=\"s\">&#34;text/plain&#34;</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_max_body_size</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">client_max_body_size</span><span class=\"p\">,</span> <span class=\"mi\">1</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_body_buffer_size</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">client_body_buffer_size</span><span class=\"p\">,</span>\n                              <span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"p\">)</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">ngx_pagesize</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">client_body_timeout</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">client_body_timeout</span><span class=\"p\">,</span> <span class=\"mi\">60000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">sendfile</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">sendfile</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">tcp_nopush</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">tcp_nopush</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">send_timeout</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">send_timeout</span><span class=\"p\">,</span> <span class=\"mi\">60000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">send_lowat</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">send_lowat</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">postpone_output</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">postpone_output</span><span class=\"p\">,</span>\n                              <span class=\"mi\">1460</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_size_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">limit_rate</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">limit_rate</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">keepalive_timeout</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">keepalive_timeout</span><span class=\"p\">,</span> <span class=\"mi\">75000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_sec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">keepalive_header</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">keepalive_header</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">lingering_time</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">lingering_time</span><span class=\"p\">,</span> <span class=\"mi\">30000</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_msec_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">lingering_timeout</span><span class=\"p\">,</span>\n                              <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">lingering_timeout</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">reset_timedout_connection</span><span class=\"p\">,</span>\n                         <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">reset_timedout_connection</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_conf_merge_value</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">msie_padding</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">msie_padding</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">open_files</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">open_files</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">open_files</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>其余模块就不一一列举，大致的逻辑都是一样的，就是子层的配置没有值则取父层的，父层也没有值则取默认的。</p><p><b>4 ngx_http_merge_locations</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_merge_locations</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                      <span class=\"n\">ngx_array_t</span> <span class=\"o\">*</span><span class=\"n\">locations</span><span class=\"p\">,</span>\n                                      <span class=\"kt\">void</span> <span class=\"o\">**</span><span class=\"n\">loc_conf</span><span class=\"p\">,</span>\n                                      <span class=\"n\">ngx_http_module_t</span> <span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">,</span>\n                                      <span class=\"n\">ngx_uint_t</span> <span class=\"n\">ctx_index</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>                       <span class=\"o\">*</span><span class=\"n\">rv</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>                  <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_loc_conf_t</span>  <span class=\"o\">**</span><span class=\"n\">clcfp</span><span class=\"p\">;</span>\n\n    <span class=\"n\">clcfp</span> <span class=\"o\">=</span> <span class=\"cm\">/* (ngx_http_core_loc_conf_t **) */</span> <span class=\"n\">locations</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 遍历父层的location\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">locations</span><span class=\"o\">-&gt;</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* \n</span><span class=\"cm\">            先合并server和非嵌套location层的配置\n</span><span class=\"cm\">            loc_conf[ctx_index]:server层的location配置,\n</span><span class=\"cm\">            clcfp[i]-&gt;loc_conf[ctx_index]:location层各模块的配置\n</span><span class=\"cm\">        */</span>\n        <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">ctx_index</span><span class=\"p\">],</span>\n                                    <span class=\"n\">clcfp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">[</span><span class=\"n\">ctx_index</span><span class=\"p\">]);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">          再合并嵌套location和非嵌套location的配置, \n</span><span class=\"cm\">          &amp;clcfp[i]-&gt;locations：各模块关于嵌套的lcaotion，\n</span><span class=\"cm\">          clcfp[i]-&gt;loc_conf：各模块和关于非嵌套location的配置\n</span><span class=\"cm\">        */</span>\n        <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_merge_locations</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">clcfp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">locations</span><span class=\"p\">,</span>\n                                      <span class=\"n\">clcfp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">loc_conf</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">ctx_index</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>http模块初始化到这，内存视图差不多是下图所示。http、server、location都有类似的结构，一个配置最后存储在哪个位置取决于他在哪个上下文中。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b853fe9b6230ecf02533cf87525b57a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"4096\" class=\"origin_image zh-lightbox-thumb\" width=\"907\" data-original=\"https://pic2.zhimg.com/v2-b853fe9b6230ecf02533cf87525b57a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;907&#39; height=&#39;4096&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"4096\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"907\" data-original=\"https://pic2.zhimg.com/v2-b853fe9b6230ecf02533cf87525b57a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b853fe9b6230ecf02533cf87525b57a9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\"/></figure><p>欢迎关注公众号nginx0.1.0之http模块初始化源码分析（3）</p>", 
            "topic": [
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }, 
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60552386", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之http模块初始化源码分析（2）", 
            "content": "<p>本文讲解http各个模块create_srv_conf和create_loc_conf钩子，还有指令的解析。 各模块的create_srv_conf和create_loc_conf函数逻辑都类似，不一一列举，执行完后内存视图是。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-84ad51185217c902b9d5add68c6f1a10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3971\" data-rawheight=\"1338\" class=\"origin_image zh-lightbox-thumb\" width=\"3971\" data-original=\"https://pic1.zhimg.com/v2-84ad51185217c902b9d5add68c6f1a10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;3971&#39; height=&#39;1338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3971\" data-rawheight=\"1338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"3971\" data-original=\"https://pic1.zhimg.com/v2-84ad51185217c902b9d5add68c6f1a10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-84ad51185217c902b9d5add68c6f1a10_b.jpg\"/></figure><p> 下面是指令的解析。</p><h2>1 access模块</h2><p>1 allow、deny指令</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 每次遇到allow或者deny命令的时候执行的回调\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_rule</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">alcf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_str_t</span>               <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_inet_cidr_t</span>          <span class=\"n\">in_cidr</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_rule_t</span>  <span class=\"o\">*</span><span class=\"n\">rule</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 存储配置的结构体\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">ngx_create_array</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n                                       <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_access_rule_t</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">rule</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 第一个字符是d说明是deny，否则是allow\n</span><span class=\"c1\"></span>    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">deny</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;d&#39;</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// all\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;all&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 配置了具体的值，转成二进制形式的ip\n</span><span class=\"c1\"></span>    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"c1\">// ip有效\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">!=</span> <span class=\"n\">INADDR_NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 无效则判断值的格式为cidr\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_ptocidr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">in_cidr</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&#34;invalid paramter </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n                           <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">in_cidr</span><span class=\"p\">.</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">in_cidr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2><b>2 gzip</b></h2><p><b>1 enable指令</b> gzip模块的配置对应的结构体是</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_flag_t</span>           <span class=\"n\">enable</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_flag_t</span>           <span class=\"n\">no_buffer</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_bufs_t</span>           <span class=\"n\">bufs</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_uint_t</span>           <span class=\"n\">http_version</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>           <span class=\"n\">proxied</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span>                  <span class=\"n\">level</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span>               <span class=\"n\">wbits</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span>               <span class=\"n\">memlevel</span><span class=\"p\">;</span>\n    <span class=\"n\">ssize_t</span>              <span class=\"n\">min_length</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_http_gzip_conf_t</span></code></pre></div><p>使用ngx_conf_set_flag_slot设置enable为0或1。</p><p><b>2 gzip_buffers</b> 设置bufs的num和size字段。即分配num个size大小的buffer用于压缩响应。默认是一页内存的size。</p><p><b>3 gzip_comp_level</b> 设置level字段为压缩等级。并配置了</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">ngx_conf_num_bounds_t</span>  <span class=\"n\">ngx_http_gzip_comp_level_bounds</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_conf_check_num_bounds</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span>\n<span class=\"p\">};</span></code></pre></div><p>ngx_conf_check_num_bounds函数用于检查设置的值是否合法。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_check_num_bounds</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_conf_num_bounds_t</span>  <span class=\"o\">*</span><span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_int_t</span>  <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 如果设置了hign是-1则只需要校验值是否大于low\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">high</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">&gt;=</span> <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">low</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                           <span class=\"s\">&#34;value must be equal or more than %d&#34;</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">low</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 校验值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">&gt;=</span> <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">low</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">&lt;=</span> <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">high</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"s\">&#34;value must be between %d and %d&#34;</span><span class=\"p\">,</span>\n                       <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">low</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"o\">-&gt;</span><span class=\"n\">high</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>4 gzip_window</b> 设置wbits字段大小。并配置了校验函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_gzip_set_window</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span>  <span class=\"n\">wbits</span><span class=\"p\">,</span> <span class=\"n\">wsize</span><span class=\"p\">;</span>\n\n    <span class=\"n\">wbits</span> <span class=\"o\">=</span> <span class=\"mi\">15</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 32 * 1024 = 2的15次方，256等于2的8次方\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">wsize</span> <span class=\"o\">=</span> <span class=\"mi\">32</span> <span class=\"o\">*</span> <span class=\"mi\">1024</span><span class=\"p\">;</span> <span class=\"n\">wsize</span> <span class=\"o\">&gt;</span> <span class=\"mi\">256</span><span class=\"p\">;</span> <span class=\"n\">wsize</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 如果用户传的和当前的大小一样，把绝对大小转成2的次方数存储\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">wsize</span> <span class=\"o\">==</span> <span class=\"o\">*</span><span class=\"n\">np</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 用户传的是1k，2k，nginx存的是2的几次方\n</span><span class=\"c1\"></span>            <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"n\">wbits</span><span class=\"p\">;</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 减一即除以2，右移一位\n</span><span class=\"c1\"></span>        <span class=\"n\">wbits</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">&#34;must be 512, 1k, 2k, 4k, 8k, 16k, or 32k&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>5 gzip_hash</b> 设置memlevel字段的值，设置了ngx_http_gzip_set_hash_p函数进行校验。类似ngx_http_gzip_set_window_p函数。</p><p><b>6 gzip_no_buffer</b> 设置no_buffer字段</p><p><b>7 gzip_http_version</b> 设置http_version字段。设置校验函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_set_enum_slot</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_uint_t</span>       <span class=\"o\">*</span><span class=\"n\">np</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>        <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_enum_t</span>  <span class=\"o\">*</span><span class=\"n\">e</span><span class=\"p\">;</span>\n\n    <span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_uint_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">offset</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET_UINT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        数组，每个元素一个值有效值\n</span><span class=\"cm\">        ngx_conf_enum_t  ngx_http_gzip_http_version[] = {\n</span><span class=\"cm\">            { ngx_string(&#34;1.0&#34;), NGX_HTTP_VERSION_10 },\n</span><span class=\"cm\">            { ngx_string(&#34;1.1&#34;), NGX_HTTP_VERSION_11 },\n</span><span class=\"cm\">            { ngx_null_string, 0 }\n</span><span class=\"cm\">        };\n</span><span class=\"cm\">    */</span>\n    <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 长度不一样或不相等\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">len</span>\n            <span class=\"o\">||</span> <span class=\"n\">ngx_strcasecmp</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 转成内部表示的数值\n</span><span class=\"c1\"></span>        <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_WARN</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"s\">&#34;invalid value </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>8 gzip_proxied</b> 设置proxied字段。nginx作为中间代理的时候，哪些条件下需要会对响应进行压缩。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">ngx_conf_bitmask_t</span>  <span class=\"n\">ngx_http_gzip_proxied_mask</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;off&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_OFF</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;expired&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_EXPIRED</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;no-cache&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_NO_CACHE</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;no-store&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_NO_STORE</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;private&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_PRIVATE</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;no_last_modified&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_NO_LM</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;no_etag&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_NO_ETAG</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;auth&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_AUTH</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;any&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_GZIP_PROXIED_ANY</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_null_string</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_set_bitmask_slot</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_uint_t</span>          <span class=\"o\">*</span><span class=\"n\">np</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>           <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_bitmask_t</span>  <span class=\"o\">*</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">np</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_uint_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">offset</span><span class=\"p\">);</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 比较字符串，不一样则跳过，一样则判断是否已经存在，否则获取对应的mask设置对应的位\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">!=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">len</span>\n                <span class=\"o\">||</span> <span class=\"n\">ngx_strcasecmp</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 为true说明np已经存在该mask对应的值\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">&amp;</span> <span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">mask</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_WARN</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                                   <span class=\"s\">&#34;duplicate value </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 设置对应的位\n</span><span class=\"c1\"></span>                <span class=\"o\">*</span><span class=\"n\">np</span> <span class=\"o\">|=</span> <span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">].</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_WARN</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                               <span class=\"s\">&#34;invalid value </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>9 gzip_min_length</b> 设置min_length字段，代表响应的包多大时才进行压缩。响应包根据centent-length进行判断。</p><h2>3 index模块</h2><p><b>1 index</b> 处理请求路径以/结尾的的url</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 把配置的路径放到indices字段。\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_index_set_index</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                      <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_index_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">ilcf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_uint_t</span>  <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>  <span class=\"o\">*</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 第一个值不能是绝对路径\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;/&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ilcf</span><span class=\"o\">-&gt;</span><span class=\"n\">indices</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                           <span class=\"s\">&#34;first index </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> in </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> directive &#34;</span>\n                           <span class=\"s\">&#34;must not be absolute&#34;</span><span class=\"p\">,</span>\n                           <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                               <span class=\"s\">&#34;index </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> in </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> directive is invalid&#34;</span><span class=\"p\">,</span>\n                               <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// push一个字符串到indices数组里\n</span><span class=\"c1\"></span>        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ilcf</span><span class=\"o\">-&gt;</span><span class=\"n\">indices</span><span class=\"p\">),</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"n\">index</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">len</span><span class=\"p\">;</span>\n        <span class=\"n\">index</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 更新值index指令后面的路径最大字符数\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ilcf</span><span class=\"o\">-&gt;</span><span class=\"n\">max_index_len</span> <span class=\"o\">&lt;</span> <span class=\"n\">index</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ilcf</span><span class=\"o\">-&gt;</span><span class=\"n\">max_index_len</span> <span class=\"o\">=</span> <span class=\"n\">index</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><h2>4 ssl模块</h2><p>ssl模块主要是设置该结构体的值。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_flag_t</span>      <span class=\"n\">enable</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>       <span class=\"n\">certificate</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>       <span class=\"n\">certificate_key</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_ssl_ctx_t</span>  <span class=\"o\">*</span><span class=\"n\">ssl_ctx</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_http_ssl_srv_conf_t</span></code></pre></div><h2>5 static_handler模块</h2><p><b>1 redirect_cache</b>  ```c  char <i>ngx_http_set_cache_slot(ngx_conf_t </i>cf, ngx_command_t <i>cmd, void </i>conf) {     char  *p = conf;</p><div class=\"highlight\"><pre><code class=\"language-text\">ngx_int_t              i, j, dup, invalid;\nngx_str_t              *value, line;\nngx_http_cache_t       *c;\nngx_http_cache_hash_t  *ch, **chp;\n\nchp = (ngx_http_cache_hash_t **) (p + cmd-&gt;offset);\nif (*chp) {\n    return &#34;is duplicate&#34;;\n}\n// ch指向ngx_http_cache_hash_t结构体\nif (!(ch = ngx_pcalloc(cf-&gt;pool, sizeof(ngx_http_cache_hash_t)))) {\n    return NGX_CONF_ERROR;\n}\n// 挂载\n*chp = ch;\n\ndup = 0;\ninvalid = 0;\n\nvalue = cf-&gt;args-&gt;elts;\n// 格式 value[i] =&gt; a=1\nfor (i = 1; i &lt; cf-&gt;args-&gt;nelts; i++) {\n    // 第二个字符是=\n    if (value[i].data[1] != &#39;=&#39;) {\n        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,\n                       &#34;invalid value \\&#34;%s\\&#34;&#34;, value[i].data);\n        return NGX_CONF_ERROR;\n    }\n\n    switch (value[i].data[0]) {\n\n    case &#39;h&#39;:\n        // 已经赋值过\n        if (ch-&gt;hash) {\n            dup = 1;\n            break;\n        }\n        // 把等号后面的值转成数字\n        ch-&gt;hash = ngx_atoi(value[i].data + 2, value[i].len - 2);\n        if (ch-&gt;hash == (size_t)  NGX_ERROR || ch-&gt;hash == 0) {\n            invalid = 1;\n            break;\n        }\n\n        continue;\n\n    case &#39;n&#39;:\n        if (ch-&gt;nelts) {\n            dup = 1;\n            break;\n        }\n\n        ch-&gt;nelts = ngx_atoi(value[i].data + 2, value[i].len - 2);\n        if (ch-&gt;nelts == (size_t) NGX_ERROR || ch-&gt;nelts == 0) {\n            invalid = 1;\n            break;\n        }\n\n        continue;\n\n    case &#39;l&#39;:\n        if (ch-&gt;life) {\n            dup = 1;\n            break;\n        }\n\n        line.len = value[i].len - 2;\n        line.data = value[i].data + 2;\n\n        ch-&gt;life = ngx_parse_time(&amp;line, 1);\n        if (ch-&gt;life == NGX_ERROR || ch-&gt;life == 0) {\n            invalid = 1;\n            break;\n        }\n\n        continue;\n\n    case &#39;u&#39;:\n        if (ch-&gt;update) {\n            dup = 1;\n            break;\n        }\n\n        line.len = value[i].len - 2;\n        line.data = value[i].data + 2;\n\n        ch-&gt;update = ngx_parse_time(&amp;line, 1);\n        if (ch-&gt;update == NGX_ERROR || ch-&gt;update == 0) {\n            invalid = 1;\n            break;\n        }\n\n        continue;\n\n    default:\n        invalid = 1;\n    }\n\n    if (dup) {\n        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,\n                           &#34;duplicate value \\&#34;%s\\&#34;&#34;, value[i].data);\n        return NGX_CONF_ERROR;\n    }\n\n    if (invalid) {\n        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,\n                           &#34;invalid value \\&#34;%s\\&#34;&#34;, value[i].data);\n        return NGX_CONF_ERROR;\n    }\n}\n// 分配一个元素是ngx_http_cache_t的二维数组\nch-&gt;elts = ngx_pcalloc(cf-&gt;pool,\n                       ch-&gt;hash * ch-&gt;nelts * sizeof(ngx_http_cache_t));\nif (ch-&gt;elts == NULL) {\n    return NGX_CONF_ERROR;\n}\n// 初始化二维数组的字段\nfor (i = 0; i &lt; (ngx_int_t) ch-&gt;hash; i++) {\n    // ch-&gt;elts是一个二维数组，元素是ngx_http_cache_t，c等于每个一维数组的首地址 \n    c = ch-&gt;elts + i * ch-&gt;nelts;\n    // 初始化该一维数组的fd字段，长度是ch-&gt;nelts\n    for (j = 0; j &lt; (ngx_int_t) ch-&gt;nelts; j++) {\n        c[j].fd = NGX_INVALID_FILE;\n    }\n}\n\nreturn NGX_CONF_OK;</code></pre></div><p>}  ```</p><h2>6 user_id模块</h2><p>user_id模块是跟设置cookie相关的</p><p><b>1 userid</b> 是否开启设置cookie的功能。处理函数是ngx_conf_set_enum_slot，可用值是</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"n\">ngx_http_userid_state</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;off&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_USERID_OFF</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;log&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_USERID_LOG</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;v1&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_USERID_V1</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;on&#34;</span><span class=\"p\">),</span> <span class=\"n\">NGX_HTTP_USERID_ON</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"n\">ngx_null_string</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span></code></pre></div><p><b>2 userid_service</b> 处理函数是ngx_conf_set_num_slot</p><p><b>3 userid_name，userid_domain，userid_path</b> 这三个是cookie相关的，名字，域名。路径。处理函数是ngx_conf_set_str_slot。其中域名指令配置了校验函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_check_domain</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_str_t</span>  <span class=\"o\">*</span><span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">4</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;none&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">domain</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">domain</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;.&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>4 userid_expires</b> 该指令设置cookie的过期时间。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_userid_expires</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_userid_conf_t</span> <span class=\"o\">*</span><span class=\"n\">ucf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_str_t</span>   <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 值是max代表cookie永不过期\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;max&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_USERID_MAX_EXPIRES</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// off代表会话cookie\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;off&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 设置一个固定的时间\n</span><span class=\"c1\"></span>    <span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"n\">ngx_parse_time</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;invalid value&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ucf</span><span class=\"o\">-&gt;</span><span class=\"n\">expires</span> <span class=\"o\">==</span> <span class=\"n\">NGX_PARSE_LARGE_TIME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;value must be less than 68 years&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>因为http子模块很多，就先分析到这。后面再继续分析其他的子模块。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;430&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"430\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"430\" data-original=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cb41262fcbbd8262bfed4c294d87e526_b.jpg\"/></figure><p>欢迎关注公众号nginx0.1.0之http模块初始化源码分析（2）</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "Web 服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19629184"
                }
            ], 
            "comments": [
                {
                    "userName": "huliuxuexi", 
                    "userLink": "https://www.zhihu.com/people/25cad973ee3b25f7eeae3ae8e9cacc32", 
                    "content": "<p>请教 nginx http2.0 源码使用问题，如何联系您</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "theanarkh", 
                            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
                            "content": "还没看到这块哈，不懂", 
                            "likes": 0, 
                            "replyToAuthor": "huliuxuexi"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60516761", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之event模块初始化源码分析(4)", 
            "content": "<p>event的配置解析相关的代码已经分析完毕。下面分析一下另一个流程中event模块的实现。即在nginx创建进程，并且开始执行进程里的代码的时候。入口函数是ngx_worker_process_cycle。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">init_process</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">init_process</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n               <span class=\"cm\">/* fatal */</span>\n               <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n           <span class=\"p\">}</span>\n       <span class=\"p\">}</span>\n   <span class=\"p\">}</span></code></pre></div><p>event模块的子模块ngx_event_core_module实现了该函数。该函数初始化connection结构体，把监听的fd加到事件驱动模块，注册读事件回调函数等。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// worker进程初始化时执行的函数，首先初始化选择的事件驱动模块，然后往里面增加监听套接字可读事件\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_event_process_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_uint_t</span>           <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_socket_t</span>         <span class=\"n\">fd</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_t</span>         <span class=\"o\">*</span><span class=\"n\">rev</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">wev</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_listening_t</span>     <span class=\"o\">*</span><span class=\"n\">s</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_connection_t</span>    <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_core_conf_t</span>     <span class=\"o\">*</span><span class=\"n\">ccf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_conf_t</span>    <span class=\"o\">*</span><span class=\"n\">ecf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_module_t</span>  <span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>    <span class=\"n\">ngx_iocp_conf_t</span>     <span class=\"o\">*</span><span class=\"n\">iocpcf</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"n\">ccf</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_core_conf_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">ngx_get_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_core_module</span><span class=\"p\">);</span>\n    <span class=\"n\">ecf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_event_get_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_event_core_module</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_accept_mutex_ptr</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ccf</span><span class=\"o\">-&gt;</span><span class=\"n\">worker_processes</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">accept_mutex</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">ngx_accept_mutex</span> <span class=\"o\">=</span> <span class=\"n\">ngx_accept_mutex_ptr</span><span class=\"p\">;</span>\n        <span class=\"n\">ngx_accept_mutex_held</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">ngx_accept_mutex_delay</span> <span class=\"o\">=</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">accept_mutex_delay</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n<span class=\"cp\">#if (NGX_THREADS)\n</span><span class=\"cp\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ngx_posted_events_mutex</span> <span class=\"o\">=</span> <span class=\"n\">ngx_mutex_init</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"c1\">// 初始化时间红黑树\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_event_timer_init</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_n</span> <span class=\"o\">=</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 根据配置使用相应的模块，use在处理use配置时赋值\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span> <span class=\"o\">==</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n            <span class=\"c1\">// 初始化选择的模块,比如执行epoll的init函数\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">actions</span><span class=\"p\">.</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"cm\">/* fatal */</span>\n                <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 根据配置分配大小为connections的数组\n</span><span class=\"c1\"></span>    <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"n\">ngx_alloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_connection_t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">,</span>\n                                   <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 初始化字段\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_socket_t</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (NGX_THREADS)\n</span><span class=\"cp\"></span>        <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n    <span class=\"c1\">// 分配大小为connections的读写事件数组\n</span><span class=\"c1\"></span>    <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">read_events</span> <span class=\"o\">=</span> <span class=\"n\">ngx_alloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">,</span>\n                                   <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">read_events</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">read_events</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (NGX_THREADS)\n</span><span class=\"cp\"></span>        <span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span><span class=\"p\">;</span>\n        <span class=\"n\">rev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">own_lock</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">write_events</span> <span class=\"o\">=</span> <span class=\"n\">ngx_alloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">,</span>\n                                   <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">write_events</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">wev</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">write_events</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">wev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (NGX_THREADS)\n</span><span class=\"cp\"></span>        <span class=\"n\">wev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span><span class=\"p\">;</span>\n        <span class=\"n\">wev</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">own_lock</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">lock</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/* for each listening socket */</span>\n    <span class=\"c1\">// 初始化connection结构体，注册监听的fd到事件驱动模块，比如epoll\n</span><span class=\"c1\"></span>    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">listening</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">listening</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>        <span class=\"cm\">/*\n</span><span class=\"cm\">         * Winsock assignes a socket number divisible by 4\n</span><span class=\"cm\">         * so to find a connection we divide a socket number by 4.\n</span><span class=\"cm\">         */</span>\n\n        <span class=\"n\">fd</span> <span class=\"o\">/=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">];</span>\n        <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">read_events</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">];</span>\n        <span class=\"n\">wev</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">write_events</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">];</span>\n\n        <span class=\"n\">ngx_memzero</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_connection_t</span><span class=\"p\">));</span>\n        <span class=\"n\">ngx_memzero</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_t</span><span class=\"p\">));</span>\n        <span class=\"c1\">// 把监听的fd和listening结构体挂载到connection结构体中\n</span><span class=\"c1\"></span>        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">fd</span><span class=\"p\">;</span>\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">listening</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">servers</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">servers</span><span class=\"p\">;</span>\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">log</span><span class=\"p\">;</span>\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">read</span> <span class=\"o\">=</span> <span class=\"n\">rev</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/* required by iocp in &#34;c-&gt;write-&gt;active = 1&#34; */</span>\n        <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">write</span> <span class=\"o\">=</span> <span class=\"n\">wev</span><span class=\"p\">;</span>\n\n        <span class=\"cm\">/* required by poll */</span>\n        <span class=\"n\">wev</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">NGX_INVALID_INDEX</span><span class=\"p\">;</span>\n\n        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">;</span>\n        <span class=\"c1\">// connection结构体\n</span><span class=\"c1\"></span>        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">NGX_INVALID_INDEX</span><span class=\"p\">;</span>\n\n        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">available</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">accept</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#if (HAVE_DEFERRED_ACCEPT)\n</span><span class=\"cp\"></span>        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">deferred_accept</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">deferred_accept</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>        <span class=\"c1\">// \n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ngx_event_flags</span> <span class=\"o\">&amp;</span> <span class=\"n\">NGX_USE_IOCP_EVENT</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">remain</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n                <span class=\"cm\">/*\n</span><span class=\"cm\">                 * delete the old accept events that were bound to\n</span><span class=\"cm\">                 * the old cycle read events array\n</span><span class=\"cm\">                 */</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_del_event</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">old_cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">read_events</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">],</span>\n                                 <span class=\"n\">NGX_READ_EVENT</span><span class=\"p\">,</span> <span class=\"n\">NGX_CLOSE_EVENT</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">old_cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">fd</span><span class=\"p\">].</span><span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_socket_t</span><span class=\"p\">)</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n<span class=\"c1\">// 忽略\n</span><span class=\"c1\"></span><span class=\"cp\">#if (WIN32)\n</span><span class=\"cp\"></span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_event_flags</span> <span class=\"o\">&amp;</span> <span class=\"n\">NGX_USE_IOCP_EVENT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">event_handler</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ngx_event_acceptex</span><span class=\"p\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_add_event</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">NGX_IOCP_ACCEPT</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">iocpcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_event_get_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_iocp_module</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_event_post_acceptex</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">iocpcf</span><span class=\"o\">-&gt;</span><span class=\"n\">post_acceptex</span><span class=\"p\">)</span>\n                                                                  <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">event_handler</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ngx_event_accept</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_add_event</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">,</span> <span class=\"n\">NGX_READ_EVENT</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>        <span class=\"c1\">// 设置监听套接字的可读事件回调，即监听有连接到来\n</span><span class=\"c1\"></span>        <span class=\"n\">rev</span><span class=\"o\">-&gt;</span><span class=\"n\">event_handler</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">ngx_event_accept</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_accept_mutex</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 使用的是ngx_rtsig_module事件驱动模块\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_event_flags</span> <span class=\"o\">&amp;</span> <span class=\"n\">NGX_USE_RTSIG_EVENT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_add_conn</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 加入读事件，等待事件到来执行刚才注册的ngx_event_accept函数\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_add_event</span><span class=\"p\">(</span><span class=\"n\">rev</span><span class=\"p\">,</span> <span class=\"n\">NGX_READ_EVENT</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">ngx_epoll_add_event</span><span class=\"p\">(</span><span class=\"n\">ngx_event_t</span> <span class=\"o\">*</span><span class=\"n\">ev</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">u_int</span> <span class=\"n\">flags</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                  <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_t</span>         <span class=\"o\">*</span><span class=\"n\">e</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_connection_t</span>    <span class=\"o\">*</span><span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">epoll_event</span>   <span class=\"n\">ee</span><span class=\"p\">;</span>\n    <span class=\"c1\">// connection结构体\n</span><span class=\"c1\"></span>    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">ev</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 读事件或者写事件\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">event</span> <span class=\"o\">==</span> <span class=\"n\">NGX_READ_EVENT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 指向写事件结构\n</span><span class=\"c1\"></span>        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">write</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 保存之前的事件类型，如果e是active的话，见下面分析\n</span><span class=\"c1\"></span>        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLOUT</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (NGX_READ_EVENT != EPOLLIN)\n</span><span class=\"cp\"></span>        <span class=\"c1\">// 本次是读事件\n</span><span class=\"c1\"></span>        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLIN</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">read</span><span class=\"p\">;</span>\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLIN</span><span class=\"p\">;</span>\n<span class=\"cp\">#if (NGX_WRITE_EVENT != EPOLLOUT)\n</span><span class=\"cp\"></span>        <span class=\"n\">event</span> <span class=\"o\">=</span> <span class=\"n\">EPOLLOUT</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"p\">}</span>\n    <span class=\"c1\">// 反事件是活跃的，即当前设置的是读，则判断写事件当前是不是已经在epoll里，是的话修改而不是插入节点\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">-&gt;</span><span class=\"n\">active</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">EPOLL_CTL_MOD</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 累加事件类型，需要设置的事件是读写\n</span><span class=\"c1\"></span>        <span class=\"n\">event</span> <span class=\"o\">|=</span> <span class=\"n\">prev</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">op</span> <span class=\"o\">=</span> <span class=\"n\">EPOLL_CTL_ADD</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ee</span><span class=\"p\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">event</span> <span class=\"o\">|</span> <span class=\"n\">flags</span><span class=\"p\">;</span><span class=\"c1\">// flags用户自定义标记位，events = 读 + 写 + 自定义\n</span><span class=\"c1\"></span>    <span class=\"n\">ee</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">ptr</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">((</span><span class=\"n\">uintptr_t</span><span class=\"p\">)</span> <span class=\"n\">c</span> <span class=\"o\">|</span> <span class=\"n\">ev</span><span class=\"o\">-&gt;</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ngx_log_debug3</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_DEBUG_EVENT</span><span class=\"p\">,</span> <span class=\"n\">ev</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                   <span class=\"s\">&#34;epoll add event: fd:%d op:%d ev:%08X&#34;</span><span class=\"p\">,</span>\n                   <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">ee</span><span class=\"p\">.</span><span class=\"n\">events</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">epoll_ctl</span><span class=\"p\">(</span><span class=\"n\">ep</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">ee</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_ALERT</span><span class=\"p\">,</span> <span class=\"n\">ev</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"n\">ngx_errno</span><span class=\"p\">,</span>\n                      <span class=\"s\">&#34;epoll_ctl(%d, %d) failed&#34;</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">-&gt;</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 置位表示已经加入epoll事件红黑树\n</span><span class=\"c1\"></span>    <span class=\"n\">ev</span><span class=\"o\">-&gt;</span><span class=\"n\">active</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"cp\">#if 0</span><span class=\"c\">\n</span><span class=\"c\">    ev-&gt;oneshot = (flags &amp; NGX_ONESHOT_EVENT) ? 1 : 0;\n</span><span class=\"c\"></span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>至此nginx把所有需要监听的socket注册到epoll，然后就是等待事件的到来。下一步就是执行ngx_process_events函数，该函数取决于选用的事件驱动模块，比如epoll模块。下一节再分析。</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60508935", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之event模块初始化源码分析(3)", 
            "content": "<p>前面已经分析了event初始化的整体流程和第一步create_conf，接下来看一下第二步ngx_conf_parse。这里不分析该函数的代码，该函数主要是遍历配置文件的内容，然后读取命令和参数。最后匹配nginx所有模块的配置，找到处理该指令的函数。我们首先看一下event模块中ngx_event_core_module模块的指令配置。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"n\">ngx_command_t</span>  <span class=\"n\">ngx_event_core_commands</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;connections&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_event_connections</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;use&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_event_use</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;multi_accept&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_conf_set_flag_slot</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"n\">offsetof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_conf_t</span><span class=\"p\">,</span> <span class=\"n\">multi_accept</span><span class=\"p\">),</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;accept_mutex&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_conf_set_flag_slot</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"n\">offsetof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_conf_t</span><span class=\"p\">,</span> <span class=\"n\">accept_mutex</span><span class=\"p\">),</span>\n      <span class=\"o\">&amp;</span><span class=\"n\">ngx_accept_mutex_post</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;accept_mutex_delay&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_conf_set_msec_slot</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"n\">offsetof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_conf_t</span><span class=\"p\">,</span> <span class=\"n\">accept_mutex_delay</span><span class=\"p\">),</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;debug_connection&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_EVENT_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_event_debug_connection</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n      <span class=\"n\">ngx_null_command</span>\n<span class=\"p\">}</span></code></pre></div><p>然后在看一下每个指令处理函数的代码。</p><p><b>connections指令</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">//把连接数记录在结构体中\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_event_connections</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                   <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_event_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">ecf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_str_t</span>  <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 已经初始化过了\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET_UINT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span> <span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 从配置文件中解析出来的配置\n</span><span class=\"c1\"></span>    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 字符串转成整形\n</span><span class=\"c1\"></span>    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"n\">ngx_atoi</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">len</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">ngx_uint_t</span><span class=\"p\">)</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                           <span class=\"s\">&#34;invalid number </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">connection_n</span> <span class=\"o\">=</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>use指令</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 记录use和name的值\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_event_use</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_event_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">ecf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_int_t</span>             <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>            <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_conf_t</span>     <span class=\"o\">*</span><span class=\"n\">old_ecf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_module_t</span>   <span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET_UINT</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span> <span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">old_cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">old_ecf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_event_get_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">old_cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">,</span>\n                                     <span class=\"n\">ngx_event_core_module</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">old_ecf</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 判断使用哪个事件驱动模块，比如use epoll，则使用epoll\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"o\">-&gt;</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// 存储事件模块的下标,而不是字符串\n</span><span class=\"c1\"></span>                <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span><span class=\"p\">;</span>\n                <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">;</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_process</span> <span class=\"o\">==</span> <span class=\"n\">NGX_PROCESS_SINGLE</span>\n                    <span class=\"o\">&amp;&amp;</span> <span class=\"n\">old_ecf</span>\n                    <span class=\"o\">&amp;&amp;</span> <span class=\"n\">old_ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span> <span class=\"o\">!=</span> <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                        <span class=\"s\">&#34;when the server runs without a master process &#34;</span>\n                        <span class=\"s\">&#34;the </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> event type must be the same as &#34;</span>\n                        <span class=\"s\">&#34;in previous configuration - </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> &#34;</span>\n                        <span class=\"s\">&#34;and it can not be changed on the fly, &#34;</span>\n                        <span class=\"s\">&#34;to change it you need to stop server &#34;</span>\n                        <span class=\"s\">&#34;and start it again&#34;</span><span class=\"p\">,</span>\n                        <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">old_ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">);</span>\n\n                    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"s\">&#34;invalid event type </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>multi_accept指令</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_set_flag_slot</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_str_t</span>        <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_flag_t</span>       <span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_post_t</span>  <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">;</span>\n\n    <span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_flag_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">offset</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">fp</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// on代表开启\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_strcasecmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;on&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"o\">*</span><span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_strcasecmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;off&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"o\">*</span><span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                     <span class=\"s\">&#34;invalid value </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> in </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\"> directive, &#34;</span>\n                     <span class=\"s\">&#34;it must be </span><span class=\"se\">\\&#34;</span><span class=\"s\">on</span><span class=\"se\">\\&#34;</span><span class=\"s\"> or </span><span class=\"se\">\\&#34;</span><span class=\"s\">off</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n                     <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 设置完值后执行后置函数，一般是参数检查\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">post</span><span class=\"o\">-&gt;</span><span class=\"n\">post_handler</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"n\">fp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>accept_mutex指令</b>（见上面的ngx_conf_set_flag_slot函数）</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"err\">该指令配置了</span><span class=\"n\">handle函数</span>\n<span class=\"n\">ngx_conf_post_t</span>  <span class=\"n\">ngx_accept_mutex_post</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">ngx_accept_mutex_check</span> <span class=\"p\">}</span> \n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">ngx_accept_mutex_check</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"c1\">// 不支持该功能，重置字段\n</span><span class=\"c1\"></span><span class=\"cp\">#if !(NGX_HAVE_ATOMIC_OPS)\n</span><span class=\"cp\"></span>\n    <span class=\"n\">ngx_flag_t</span> <span class=\"o\">*</span><span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n\n    <span class=\"o\">*</span><span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_WARN</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"s\">&#34;</span><span class=\"se\">\\&#34;</span><span class=\"s\">accept_mutex</span><span class=\"se\">\\&#34;</span><span class=\"s\"> is not supported, ignored&#34;</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>accept_mutex_delay指令</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_conf_set_msec_slot</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span>  <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_msec_t</span>       <span class=\"o\">*</span><span class=\"n\">msp</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>        <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_post_t</span>  <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">msp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ngx_msec_t</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">offset</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">msp</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_UNSET_MSEC</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;is duplicate&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 把字符串解析成时间\n</span><span class=\"c1\"></span>    <span class=\"o\">*</span><span class=\"n\">msp</span> <span class=\"o\">=</span> <span class=\"n\">ngx_parse_time</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">msp</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">ngx_msec_t</span><span class=\"p\">)</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;invalid value&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">msp</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">ngx_msec_t</span><span class=\"p\">)</span> <span class=\"n\">NGX_PARSE_LARGE_TIME</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">&#34;value must be less than 597 hours&#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">post</span> <span class=\"o\">=</span> <span class=\"n\">cmd</span><span class=\"o\">-&gt;</span><span class=\"n\">post</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">post</span><span class=\"o\">-&gt;</span><span class=\"n\">post_handler</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"n\">msp</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p><b>debug_connection指令</b></p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_event_debug_connection</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                        <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"c1\">// 配置后需要开启debug参数\n</span><span class=\"c1\"></span><span class=\"cp\">#if (NGX_DEBUG)\n</span><span class=\"cp\"></span>    <span class=\"n\">ngx_event_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">ecf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">in_addr_t</span>       <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_str_t</span>       <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">hostent</span>  <span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">;</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* AF_INET only */</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">debug_connection</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 将ip转成长整型\n</span><span class=\"c1\"></span>    <span class=\"o\">*</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 转成功则返回\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">addr</span> <span class=\"o\">!=</span> <span class=\"n\">INADDR_NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 没转成功可能是一个主机字符串，获取该主机对应的ip信息\n</span><span class=\"c1\"></span>    <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyname</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span> <span class=\"o\">||</span> <span class=\"n\">h</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addr_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                           <span class=\"s\">&#34;host %s not found&#34;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n    <span class=\"o\">*</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">in_addr_t</span> <span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">h</span><span class=\"o\">-&gt;</span><span class=\"n\">h_addr_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span>\n\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>\n    <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_WARN</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                       <span class=\"s\">&#34;</span><span class=\"se\">\\&#34;</span><span class=\"s\">debug_connection</span><span class=\"se\">\\&#34;</span><span class=\"s\"> is ignored, you need to rebuild &#34;</span>\n                       <span class=\"s\">&#34;nginx using --with-debug option to enable it&#34;</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>还有事件驱动模块的一些配置，比如epoll模块的epoll_events指令，几乎都是简单地对相应模块的配置结构体的某个字段进行赋值。</p><p>到这里，event模块关于配置文件解析的部分就结束了。主要就是对下图中最右边的那个数组里的结构体进行赋值。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2fc87db209d7b886b341ba88e2da4dcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb\" width=\"918\" data-original=\"https://pic1.zhimg.com/v2-2fc87db209d7b886b341ba88e2da4dcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;918&#39; height=&#39;305&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"918\" data-original=\"https://pic1.zhimg.com/v2-2fc87db209d7b886b341ba88e2da4dcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2fc87db209d7b886b341ba88e2da4dcc_b.jpg\"/></figure><p>nginx0.1.0之event模块初始化源码分析(3)</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60508923", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之event模块初始化源码分析(2)", 
            "content": "<p>本文分析nginx的event在初始化时的第一个步骤，就是执行每个类型为NGX_EVENT_MODULE的模块的create_conf函数。该版本一共有8个这样的模块。下面我们看一下各个模块create_conf函数的代码。 这是ngx_event_core_module模块的create_conf函数。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 创建存储事件模块配置的结构体\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_event_create_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_event_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">ecf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ecf</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_event_conf_t</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET_UINT</span><span class=\"p\">;</span>\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">use</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET_UINT</span><span class=\"p\">;</span>\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">multi_accept</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">accept_mutex</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">accept_mutex_delay</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET_MSEC</span><span class=\"p\">;</span>\n    <span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#if (NGX_DEBUG)\n</span><span class=\"cp\"></span>    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">ecf</span><span class=\"o\">-&gt;</span><span class=\"n\">debug_connection</span><span class=\"p\">,</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">in_addr_t</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>\n    <span class=\"k\">return</span> <span class=\"n\">ecf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>剩下的几个event子模块都是事件驱动相关的，epoll的create_conf函数如下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_epoll_create_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_epoll_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">epcf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">epcf</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_epoll_conf_t</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">epcf</span><span class=\"o\">-&gt;</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">epcf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>kqueue的如下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_kqueue_create_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_kqueue_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">kcf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">kcf</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_kqueue_conf_t</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">kcf</span><span class=\"o\">-&gt;</span><span class=\"n\">changes</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n    <span class=\"n\">kcf</span><span class=\"o\">-&gt;</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CONF_UNSET</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">kcf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>有些子模块没有实现create_conf函数，所有模块的create_conf函数执行完后。内存视图如下。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c860cd76a092b213d00f98c9676aec0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb\" width=\"814\" data-original=\"https://pic4.zhimg.com/v2-c860cd76a092b213d00f98c9676aec0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;814&#39; height=&#39;303&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"814\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"814\" data-original=\"https://pic4.zhimg.com/v2-c860cd76a092b213d00f98c9676aec0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c860cd76a092b213d00f98c9676aec0f_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60508917", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0之event模块初始化源码分析(1)", 
            "content": "<p>下面是nginx中几个重要的数据结构。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">struct</span> <span class=\"n\">ngx_command_s</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_str_t</span>     <span class=\"n\">name</span><span class=\"p\">;</span> <span class=\"c1\">// 命令名字\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span>           <span class=\"n\">type</span><span class=\"p\">;</span> <span class=\"c1\">// 命令的属性，参数个数、上下文等\n</span><span class=\"c1\"></span>    <span class=\"kt\">char</span>       <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">set</span><span class=\"p\">)(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">);</span> <span class=\"c1\">// 处理该命令的函数\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span>           <span class=\"n\">conf</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span>           <span class=\"n\">offset</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>         <span class=\"o\">*</span><span class=\"n\">post</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_str_t</span>       <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>         <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">create_conf</span><span class=\"p\">)(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n    <span class=\"kt\">char</span>         <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">init_conf</span><span class=\"p\">)(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_core_module_t</span><span class=\"p\">;</span> \n\n<span class=\"k\">struct</span> <span class=\"n\">ngx_module_s</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_uint_t</span>       <span class=\"n\">ctx_index</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>       <span class=\"n\">index</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>            <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_command_t</span>   <span class=\"o\">*</span><span class=\"n\">commands</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>       <span class=\"n\">type</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_int_t</span>      <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">init_module</span><span class=\"p\">)(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n    <span class=\"n\">ngx_int_t</span>      <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">init_process</span><span class=\"p\">)(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n<span class=\"cp\">#if 0</span><span class=\"c\">\n</span><span class=\"c\">    ngx_int_t      (*init_thread)(ngx_cycle_t *cycle);\n</span><span class=\"c\"></span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span><span class=\"p\">};</span></code></pre></div><p>下面是event模块的配置</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"n\">ngx_command_t</span>  <span class=\"n\">ngx_events_commands</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;events&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_MAIN_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_BLOCK</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_NOARGS</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_events_block</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n      <span class=\"n\">ngx_null_command</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_core_module_t</span>  <span class=\"n\">ngx_events_module_ctx</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;events&#34;</span><span class=\"p\">),</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>\n    <span class=\"nb\">NULL</span>\n<span class=\"p\">};</span>  \n\n\n<span class=\"n\">ngx_module_t</span>  <span class=\"n\">ngx_events_module</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">NGX_MODULE</span><span class=\"p\">,</span>\n    <span class=\"o\">&amp;</span><span class=\"n\">ngx_events_module_ctx</span><span class=\"p\">,</span>                <span class=\"cm\">/* module context */</span>\n    <span class=\"n\">ngx_events_commands</span><span class=\"p\">,</span>                   <span class=\"cm\">/* module directives */</span>\n    <span class=\"n\">NGX_CORE_MODULE</span><span class=\"p\">,</span>                       <span class=\"cm\">/* module type */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* init module */</span>\n    <span class=\"nb\">NULL</span>                                   <span class=\"cm\">/* init process */</span>\n<span class=\"p\">};</span></code></pre></div><p>nginx模块初始化的流程在下面的代码中，核心模块的初始化，各核心模块首先在create_conf中创建保存配置的数据结构，然后在ngx_conf_parse中，通过解析命令，执行对应的命令处理函数，完成赋值和各核心模块的子模块初始化。最后，如果在ngx_conf_parse时，没有设置值，则执行init_conf函数进行默认初始化。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"c1\">// 执行核心模块的钩子函数，该版本只有ngx_core_module模块定义了这个钩子\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CORE_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 用于存储各类型模块下子模块的配置\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 分配一块内存存储子模块的数据结构，如ngx_core_module_create_conf函数\n</span><span class=\"c1\"></span>            <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">==</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ngx_destroy_pool</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">[</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 初始化保存指令信息的结构体\n</span><span class=\"c1\"></span>    <span class=\"n\">ngx_memzero</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span><span class=\"p\">));</span>\n    <span class=\"cm\">/* STUB: init array ? */</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">ngx_create_array</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_str_t</span><span class=\"p\">));</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">args</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_destroy_pool</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 指向所有模块的上下文\n</span><span class=\"c1\"></span>    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">cycle</span> <span class=\"o\">=</span> <span class=\"n\">cycle</span><span class=\"p\">;</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"p\">;</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">log</span><span class=\"p\">;</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">module_type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_CORE_MODULE</span><span class=\"p\">;</span>\n    <span class=\"n\">conf</span><span class=\"p\">.</span><span class=\"n\">cmd_type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_MAIN_CONF</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 解析配置文件，把结果写入conf\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_conf_parse</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">conf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_file</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_destroy_pool</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CORE_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 如ngx_core_module_init_conf函数\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// cycle-&gt;conf_ctx[ngx_modules[i]-&gt;index]由crete_init函数创建\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">,</span> <span class=\"n\">cycle</span><span class=\"o\">-&gt;</span><span class=\"n\">conf_ctx</span><span class=\"p\">[</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">index</span><span class=\"p\">])</span>\n                                                              <span class=\"o\">==</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"n\">ngx_destroy_pool</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"p\">);</span>\n                <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span></code></pre></div><p>从上面的代码中我们知道event模块没有实现create_conf和init_conf函数，那么event模块初始化的时机是什么时候？答案是在解析到event命令的时候。由event模块对应的配置可知，当解析到event命令的时候，会执行ngx_events_block函数。代码如下。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_events_block</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span>                    <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span>                  <span class=\"o\">*</span><span class=\"n\">rv</span><span class=\"p\">;</span>\n    <span class=\"kt\">void</span>               <span class=\"o\">***</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_conf_t</span>            <span class=\"n\">pcf</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_event_module_t</span>   <span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">;</span>\n\n    <span class=\"cm\">/* count the number of the event modules and set up their indices */</span>\n\n    <span class=\"n\">ngx_event_max_module</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 初始化每个子模块的序号\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span> <span class=\"o\">=</span> <span class=\"n\">ngx_event_max_module</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// ctx指向一个指针\n</span><span class=\"c1\"></span>    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)),</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"c1\">// ctx指向的指针再指向一个指针数组\n</span><span class=\"c1\"></span>    <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n                  <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">ngx_event_max_module</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">)),</span>\n                  <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n    <span class=\"c1\">// event是NGX_MAIN_CONF类型的模块，conf为四级指针\n</span><span class=\"c1\"></span>    <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"kt\">void</span> <span class=\"o\">**</span><span class=\"p\">)</span> <span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// event类型的模块的ctx\n</span><span class=\"c1\"></span>        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 把create_conf返回的数据结构存储在上面开辟的数组里\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">)[</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span><span class=\"p\">],</span>\n                          <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">create_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">pcf</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 修改当前的上下文和作用域信息\n</span><span class=\"c1\"></span>    <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">module_type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">;</span>\n    <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cmd_type</span> <span class=\"o\">=</span> <span class=\"n\">NGX_EVENT_CONF</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 继续解析，对event模块的子模块的字段进行赋值\n</span><span class=\"c1\"></span>    <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">ngx_conf_parse</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"nb\">NULL</span><span class=\"p\">);</span>\n    <span class=\"o\">*</span><span class=\"n\">cf</span> <span class=\"o\">=</span> <span class=\"n\">pcf</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 如果ngx_conf_parse没有进行赋值，则执行init_conf函数时进行默认初始化\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">];</span> <span class=\"n\">m</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">type</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_EVENT_MODULE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">continue</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 初始化create_conf创建的结构体\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_conf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 如果在ngx_conf_parse里没有对模块的配置进行初始化则这里进行默认初始化，一般是在cmd的set函数进行初始化\n</span><span class=\"c1\"></span>            <span class=\"n\">rv</span> <span class=\"o\">=</span> <span class=\"n\">module</span><span class=\"o\">-&gt;</span><span class=\"n\">init_conf</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">cycle</span><span class=\"p\">,</span>\n                                   <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">)[</span><span class=\"n\">ngx_modules</span><span class=\"p\">[</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">ctx_index</span><span class=\"p\">]);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rv</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">rv</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60508914", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "nginx0.1.0 access_handler模块源码分析", 
            "content": "<p>access模块主要是对连接到nginx中的客户端进行权限管理，nginx会根据access模块注册的命令，在解析命令的时候，遇到对应的命令的时候，会调用access注册的处理函数，access模块的处理函数会解析并记录这些配置，然后在每个连接到来时，判断ip是否在封禁的池子了。nginx只判断deny的规则，即同一个ip命中多条规则的时候，只要有一条是deny则结果就是deny。即deny优先。</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/*\n</span><span class=\"cm\"> * Copyright (C) Igor Sysoev\n</span><span class=\"cm\"> */</span>\n\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_config.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_core.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_http.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n\n<span class=\"cm\">/* AF_INET only */</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">in_addr_t</span>     <span class=\"n\">mask</span><span class=\"p\">;</span>\n    <span class=\"n\">in_addr_t</span>     <span class=\"n\">addr</span><span class=\"p\">;</span>\n    <span class=\"kt\">unsigned</span>      <span class=\"n\">deny</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_http_access_rule_t</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_array_t</span>  <span class=\"o\">*</span><span class=\"n\">rules</span><span class=\"p\">;</span>     <span class=\"cm\">/* array of ngx_http_access_rule_t */</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_http_access_loc_conf_t</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_access_handler</span><span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_rule</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_create_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                            <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_access_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 配置感兴趣的命令，nginx解析到这个命令就会执行对应的处理函数\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"n\">ngx_command_t</span>  <span class=\"n\">ngx_http_access_commands</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;allow&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_HTTP_MAIN_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_HTTP_SRV_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_HTTP_LOC_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_http_access_rule</span><span class=\"p\">,</span>\n      <span class=\"n\">NGX_HTTP_LOC_CONF_OFFSET</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n    <span class=\"p\">{</span> <span class=\"n\">ngx_string</span><span class=\"p\">(</span><span class=\"s\">&#34;deny&#34;</span><span class=\"p\">),</span>\n      <span class=\"n\">NGX_HTTP_MAIN_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_HTTP_SRV_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_HTTP_LOC_CONF</span><span class=\"o\">|</span><span class=\"n\">NGX_CONF_TAKE1</span><span class=\"p\">,</span>\n      <span class=\"n\">ngx_http_access_rule</span><span class=\"p\">,</span>\n      <span class=\"n\">NGX_HTTP_LOC_CONF_OFFSET</span><span class=\"p\">,</span>\n      <span class=\"mi\">0</span><span class=\"p\">,</span>\n      <span class=\"nb\">NULL</span> <span class=\"p\">},</span>\n\n      <span class=\"n\">ngx_null_command</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"c1\">// nginx初始化时执行的钩子\n</span><span class=\"c1\"></span><span class=\"n\">ngx_http_module_t</span>  <span class=\"n\">ngx_http_access_module_ctx</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* pre conf */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create main configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* init main configuration */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create server configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* merge server configuration */</span>\n\n    <span class=\"n\">ngx_http_access_create_loc_conf</span><span class=\"p\">,</span>       <span class=\"cm\">/* create location configuration */</span>\n    <span class=\"n\">ngx_http_access_merge_loc_conf</span>         <span class=\"cm\">/* merge location configuration */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"n\">ngx_module_t</span>  <span class=\"n\">ngx_http_access_module</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">NGX_MODULE</span><span class=\"p\">,</span>\n    <span class=\"o\">&amp;</span><span class=\"n\">ngx_http_access_module_ctx</span><span class=\"p\">,</span>           <span class=\"cm\">/* module context */</span>\n    <span class=\"n\">ngx_http_access_commands</span><span class=\"p\">,</span>              <span class=\"cm\">/* module directives */</span>\n    <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">,</span>                       <span class=\"cm\">/* module type */</span>\n    <span class=\"n\">ngx_http_access_init</span><span class=\"p\">,</span>                  <span class=\"cm\">/* init module */</span>\n    <span class=\"nb\">NULL</span>                                   <span class=\"cm\">/* init process */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_access_handler</span><span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_uint_t</span>                   <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span>          <span class=\"o\">*</span><span class=\"n\">addr_in</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_rule_t</span>      <span class=\"o\">*</span><span class=\"n\">rule</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">alcf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">alcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_get_module_loc_conf</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_access_module</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 没有配置rule则返回通过\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/* AF_INET only */</span>\n    <span class=\"c1\">// 获取连接中的ip\n</span><span class=\"c1\"></span>    <span class=\"n\">addr_in</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">sockaddr_in</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">connection</span><span class=\"o\">-&gt;</span><span class=\"n\">sockaddr</span><span class=\"p\">;</span>\n\n    <span class=\"n\">rule</span> <span class=\"o\">=</span> <span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"o\">-&gt;</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n<span class=\"n\">ngx_log_debug3</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_DEBUG_HTTP</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">connection</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&#34;%08X %08X %08X&#34;</span><span class=\"p\">,</span>\n               <span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span><span class=\"p\">,</span> <span class=\"n\">rule</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">mask</span><span class=\"p\">,</span> <span class=\"n\">rule</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">);</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">            分为以下几种格式\n</span><span class=\"cm\">            1 all =&gt; ip：0 mask：0\n</span><span class=\"cm\">            2 合法ip值，则掩码是32位的1 =&gt; ip:ip mask:32个1，等于这个ip的会命中规则\n</span><span class=\"cm\">            3 cidr，解析出网络地址和网络掩码。 ip:配置的ip mask:配置的mask，在这个网络的都会命中规则\n</span><span class=\"cm\">        */</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">addr_in</span><span class=\"o\">-&gt;</span><span class=\"n\">sin_addr</span><span class=\"p\">.</span><span class=\"n\">s_addr</span> <span class=\"o\">&amp;</span> <span class=\"n\">rule</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">mask</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">rule</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">addr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 命中并且是deny的时候，返回403\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">deny</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ngx_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_ERR</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">connection</span><span class=\"o\">-&gt;</span><span class=\"n\">log</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n                              <span class=\"s\">&#34;access forbidden by rule&#34;</span><span class=\"p\">);</span>\n\n                <span class=\"k\">return</span> <span class=\"n\">NGX_HTTP_FORBIDDEN</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 每次遇到allow或者deny命令的时候执行的回调\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_rule</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"n\">ngx_command_t</span> <span class=\"o\">*</span><span class=\"n\">cmd</span><span class=\"p\">,</span>\n                                  <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span> <span class=\"o\">*</span><span class=\"n\">alcf</span> <span class=\"o\">=</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ngx_str_t</span>               <span class=\"o\">*</span><span class=\"n\">value</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_inet_cidr_t</span>          <span class=\"n\">in_cidr</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_rule_t</span>  <span class=\"o\">*</span><span class=\"n\">rule</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 存储配置的结构体\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">ngx_create_array</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n                                       <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_access_rule_t</span><span class=\"p\">));</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">rule</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"n\">alcf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"p\">)))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">args</span><span class=\"o\">-&gt;</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n    <span class=\"cm\">/*\n</span><span class=\"cm\">        分为以下几种格式\n</span><span class=\"cm\">        1 all =&gt; ip：0 mask：0\n</span><span class=\"cm\">        2 合法ip值，则掩码是32位的1 =&gt; ip:ip mask:32个1\n</span><span class=\"cm\">        3 cidr，解析出网络地址和网络掩码。 ip:配置的ip mask:配置的mask\n</span><span class=\"cm\">    */</span>\n    <span class=\"c1\">// 第一个字符是d说明是deny，否则是allow\n</span><span class=\"c1\"></span>    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">deny</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;d&#39;</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// all\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">len</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">ngx_strcmp</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;all&#34;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 配置了具体的值，转成二进制形式的ip\n</span><span class=\"c1\"></span>    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 32位的合法ip值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">!=</span> <span class=\"n\">INADDR_NONE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"mh\">0xffffffff</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 不是32位的合法ip值，则可能是cidr，或者就是无效的值\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ngx_ptocidr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"o\">&amp;</span><span class=\"n\">in_cidr</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">ngx_conf_log_error</span><span class=\"p\">(</span><span class=\"n\">NGX_LOG_EMERG</span><span class=\"p\">,</span> <span class=\"n\">cf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s\">&#34;invalid paramter </span><span class=\"se\">\\&#34;</span><span class=\"s\">%s</span><span class=\"se\">\\&#34;</span><span class=\"s\">&#34;</span><span class=\"p\">,</span>\n                           <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"n\">data</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">in_cidr</span><span class=\"p\">.</span><span class=\"n\">mask</span><span class=\"p\">;</span>\n    <span class=\"n\">rule</span><span class=\"o\">-&gt;</span><span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">in_cidr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_create_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">conf</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_pcalloc</span><span class=\"p\">(</span><span class=\"n\">cf</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_access_loc_conf_t</span><span class=\"p\">))))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">conf</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// merge配置\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"nf\">ngx_http_access_merge_loc_conf</span><span class=\"p\">(</span><span class=\"n\">ngx_conf_t</span> <span class=\"o\">*</span><span class=\"n\">cf</span><span class=\"p\">,</span>\n                                            <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">child</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_access_loc_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">child</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 如果location里的配置为空，则取父级的配置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">conf</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span> <span class=\"o\">=</span> <span class=\"n\">prev</span><span class=\"o\">-&gt;</span><span class=\"n\">rules</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_CONF_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_access_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_handler_pt</span>        <span class=\"o\">*</span><span class=\"n\">h</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_core_main_conf_t</span>  <span class=\"o\">*</span><span class=\"n\">cmcf</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 取出http_core_module的配置结构体\n</span><span class=\"c1\"></span>    <span class=\"n\">cmcf</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_cycle_get_module_main_conf</span><span class=\"p\">(</span><span class=\"n\">cycle</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_core_module</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 设置在NGX_HTTP_ACCESS_PHASE阶段的回调\n</span><span class=\"c1\"></span>    <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cmcf</span><span class=\"o\">-&gt;</span><span class=\"n\">phases</span><span class=\"p\">[</span><span class=\"n\">NGX_HTTP_ACCESS_PHASE</span><span class=\"p\">].</span><span class=\"n\">handlers</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">h</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">*</span><span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_access_handler</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60508908", 
            "userName": "theanarkh", 
            "userLink": "https://www.zhihu.com/people/316522515b9766d33526e0d84630f8ee", 
            "upvote": 0, 
            "title": "ngin0.1.0之range_filter模块源码解析", 
            "content": "<div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cm\">/*\n</span><span class=\"cm\"> * Copyright (C) Igor Sysoev\n</span><span class=\"cm\"> */</span>\n\n\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_config.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_core.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ngx_http.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n\n<span class=\"cm\">/*\n</span><span class=\"cm\"> * the single part format:\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * &#34;HTTP/1.0 206 Partial Content&#34; CRLF\n</span><span class=\"cm\"> * ... header ...\n</span><span class=\"cm\"> * &#34;Content-Type: image/jpeg&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Length: SIZE&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Range: bytes START-END/SIZE&#34; CRLF\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * ... data ...\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * the mutlipart format:\n</span><span class=\"cm\"> *\n</span><span class=\"cm\"> * &#34;HTTP/1.0 206 Partial Content&#34; CRLF\n</span><span class=\"cm\"> * ... header ...\n</span><span class=\"cm\"> * &#34;Content-Type: multipart/byteranges; boundary=0123456789&#34; CRLF\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * &#34;--0123456789&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Type: image/jpeg&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Range: bytes START0-END0/SIZE&#34; CRLF\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * ... data ...\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * &#34;--0123456789&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Type: image/jpeg&#34; CRLF\n</span><span class=\"cm\"> * &#34;Content-Range: bytes START1-END1/SIZE&#34; CRLF\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * ... data ...\n</span><span class=\"cm\"> * CRLF\n</span><span class=\"cm\"> * &#34;--0123456789--&#34; CRLF\n</span><span class=\"cm\"> */</span>\n\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">ngx_str_t</span>  <span class=\"n\">boundary_header</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">ngx_http_range_filter_ctx_t</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_header_filter_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_body_filter_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">);</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_http_module_t</span>  <span class=\"n\">ngx_http_range_header_filter_module_ctx</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* pre conf */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create main configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* init main configuration */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create server configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* merge server configuration */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create location configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* merge location configuration */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"n\">ngx_module_t</span>  <span class=\"n\">ngx_http_range_header_filter_module</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">NGX_MODULE</span><span class=\"p\">,</span>\n    <span class=\"o\">&amp;</span><span class=\"n\">ngx_http_range_header_filter_module_ctx</span><span class=\"p\">,</span> <span class=\"cm\">/* module context */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* module directives */</span>\n    <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">,</span>                       <span class=\"cm\">/* module type */</span>\n    <span class=\"n\">ngx_http_range_header_filter_init</span><span class=\"p\">,</span>     <span class=\"cm\">/* init module */</span>\n    <span class=\"nb\">NULL</span>                                   <span class=\"cm\">/* init child */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_http_module_t</span>  <span class=\"n\">ngx_http_range_body_filter_module_ctx</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* pre conf */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create main configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* init main configuration */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create server configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* merge server configuration */</span>\n\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* create location configuration */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* merge location configuration */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"n\">ngx_module_t</span>  <span class=\"n\">ngx_http_range_body_filter_module</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">NGX_MODULE</span><span class=\"p\">,</span>\n    <span class=\"o\">&amp;</span><span class=\"n\">ngx_http_range_body_filter_module_ctx</span><span class=\"p\">,</span> <span class=\"cm\">/* module context */</span>\n    <span class=\"nb\">NULL</span><span class=\"p\">,</span>                                  <span class=\"cm\">/* module directives */</span>\n    <span class=\"n\">NGX_HTTP_MODULE</span><span class=\"p\">,</span>                       <span class=\"cm\">/* module type */</span>\n    <span class=\"n\">ngx_http_range_body_filter_init</span><span class=\"p\">,</span>       <span class=\"cm\">/* init module */</span>\n    <span class=\"nb\">NULL</span>                                   <span class=\"cm\">/* init child */</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_http_output_header_filter_pt</span>  <span class=\"n\">ngx_http_next_header_filter</span><span class=\"p\">;</span>\n<span class=\"k\">static</span> <span class=\"n\">ngx_http_output_body_filter_pt</span>    <span class=\"n\">ngx_http_next_body_filter</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_header_filter</span><span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_int_t</span>                     <span class=\"n\">rc</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_uint_t</span>                    <span class=\"n\">boundary</span><span class=\"p\">,</span> <span class=\"n\">suffix</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">u_char</span>                       <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span>                        <span class=\"n\">len</span><span class=\"p\">;</span>\n    <span class=\"n\">off_t</span>                         <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_range_t</span>             <span class=\"o\">*</span><span class=\"n\">range</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_range_filter_ctx_t</span>  <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">http_version</span> <span class=\"o\">&lt;</span> <span class=\"n\">NGX_HTTP_VERSION_10</span>\n        <span class=\"o\">||</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"n\">NGX_HTTP_OK</span>\n        <span class=\"o\">||</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">filter_allow_ranges</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_header_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_in</span><span class=\"p\">.</span><span class=\"n\">range</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span>\n        <span class=\"o\">||</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_in</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">&lt;</span> <span class=\"mi\">7</span>\n        <span class=\"o\">||</span> <span class=\"n\">ngx_strncasecmp</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_in</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s\">&#34;bytes=&#34;</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span> <span class=\"o\">=</span> <span class=\"n\">ngx_list_push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;Accept-Ranges&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;Accept-Ranges&#34;</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;bytes&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">accept_ranges</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;bytes&#34;</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_header_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 申请5个range\n</span><span class=\"c1\"></span>    <span class=\"n\">ngx_init_array</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_range_t</span><span class=\"p\">),</span>\n                   <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 拿到客户端请求的range范围\n</span><span class=\"c1\"></span>    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_in</span><span class=\"p\">.</span><span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 每一个循环解析一个range\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span> <span class=\"p\">(</span> <span class=\"p\">;;</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 容错，跳过空格\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">            格式：\n</span><span class=\"cm\">                a-b\n</span><span class=\"cm\">                -b\n</span><span class=\"cm\">                a-\n</span><span class=\"cm\">                a-b,c-\n</span><span class=\"cm\">                -a\n</span><span class=\"cm\">                不写开头则说明是从倒数abs(-a)字节开始，不写结尾则说明是到最后一个字节，\n</span><span class=\"cm\">                内容可能是多个以上的组合\n</span><span class=\"cm\">        */</span>\n        <span class=\"c1\">// 第一个有效字符不是-，则说明是属于a-[b]格式,b可能没有\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 不是数字则报错\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 整数化a，直到遇到第一个非数字\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 容错，过滤空格\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"c1\">// 第一个数字后面不是-则报错\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 请求的范围大于返回内容的大小范围，则报错\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 容错，过滤-后面的空格\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"c1\">// 如果a-后面是逗号或者\\0则说明是最后一个range\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;,&#39;</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">),</span>\n                              <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n                <span class=\"c1\">// 记录该range的范围，从start到最后一个字节\n</span><span class=\"c1\"></span>                <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n                <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">;</span>\n                <span class=\"c1\">// 如果当前字符是\\0则直接break退出循环，解析结束\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;,&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"k\">break</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"c1\">// 否则继续解析下一个range\n</span><span class=\"c1\"></span>                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// range的第一个字节是-说明是-a格式，不是代表从第一个字节开始，而是到倒数第几个算起\n</span><span class=\"c1\"></span>            <span class=\"n\">suffix</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 走到这说明是需要解析end的，即不是a-(,|\\0)这种格式,但是可能是a-b或者-b格式\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&lt;</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">||</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 不管是哪种格式，首先计算end\n</span><span class=\"c1\"></span>        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&gt;=</span> <span class=\"sc\">&#39;0&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">&lt;=</span> <span class=\"sc\">&#39;9&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">-</span> <span class=\"sc\">&#39;0&#39;</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"sc\">&#39; &#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">p</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"c1\">// end的后面不是或\\0则格式错误\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;,&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;\\0&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"cm\">/*\n</span><span class=\"cm\">            计算完end再计算start，没有写range的开始字节，\n</span><span class=\"cm\">            则说明start是倒数第几个字节，end这时候代表是一直到最后，而不是结束字节的位置\n</span><span class=\"cm\">        */</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">suffix</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">-</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n           <span class=\"c1\">// 为了统一处理-b和a-b两种格式，下面统一进行了end+1处理，所以这里需要先减一\n</span><span class=\"c1\"></span>           <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 范围不合法\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">&gt;</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_RANGE_NOT_SATISFIABLE</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 记录到一个range结构体中\n</span><span class=\"c1\"></span>        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">,</span> <span class=\"n\">ngx_push_array</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n        <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 取最小值\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">end</span> <span class=\"o\">&gt;=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"cm\">/*\n</span><span class=\"cm\">             * Download Accelerator sends the last byte position\n</span><span class=\"cm\">             * that equals to the file length\n</span><span class=\"cm\">             */</span>\n            <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 不等于逗号说明等于\\0，解析结束        \n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">p</span><span class=\"o\">++</span> <span class=\"o\">!=</span> <span class=\"sc\">&#39;,&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"c1\">// 解析出错\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"cm\">/* rc == NGX_HTTP_RANGE_NOT_SATISFIABLE */</span>\n        <span class=\"c1\">// 状态是416，说明请求的范围不合法，返回合法的范围给客户端\n</span><span class=\"c1\"></span>        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span> <span class=\"o\">=</span> <span class=\"n\">ngx_list_push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;Content-Range&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;Content-Range&#34;</span><span class=\"p\">;</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span>\n                                               <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">8</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                             <span class=\"mi\">8</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">&#34;bytes */&#34;</span> <span class=\"n\">OFF_T_FMT</span><span class=\"p\">,</span>\n                             <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 不返回数据，清空content-length\n</span><span class=\"c1\"></span>        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">rc</span><span class=\"p\">;</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 206\n</span><span class=\"c1\"></span>        <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">NGX_HTTP_PARTIAL_CONTENT</span><span class=\"p\">;</span>\n        <span class=\"c1\">// 只有一个range，设置range相关的响应头\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span> <span class=\"o\">=</span>\n                                        <span class=\"n\">ngx_list_push</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">headers</span><span class=\"p\">);</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span> <span class=\"o\">==</span> <span class=\"nb\">NULL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"s\">&#34;Content-Range&#34;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">key</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">u_char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"s\">&#34;Content-Range&#34;</span><span class=\"p\">;</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                          <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n            <span class=\"cm\">/* &#34;Content-Range: bytes SSSS-EEEE/TTTT&#34; header */</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                   <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n                                <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_range</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                                <span class=\"s\">&#34;bytes &#34;</span> <span class=\"n\">OFF_T_FMT</span> <span class=\"s\">&#34;-&#34;</span> <span class=\"n\">OFF_T_FMT</span> <span class=\"s\">&#34;/&#34;</span> <span class=\"n\">OFF_T_FMT</span><span class=\"p\">,</span>\n                                <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                                <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">);</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">;</span>\n\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n<span class=\"cp\">#if 0</span><span class=\"c\">\n</span><span class=\"c\">            /* TODO: what if no content_type ?? */\n</span><span class=\"c\">\n</span><span class=\"c\">            if (!(r-&gt;headers_out.content_type =\n</span><span class=\"c\">                   ngx_http_add_header(&amp;r-&gt;headers_out, ngx_http_headers_out)))\n</span><span class=\"c\">            {\n</span><span class=\"c\">                return NGX_ERROR;\n</span><span class=\"c\">            }\n</span><span class=\"c\"></span><span class=\"cp\">#endif\n</span><span class=\"cp\"></span>            <span class=\"c1\">// 多个range返回的格式不一样\n</span><span class=\"c1\"></span>            <span class=\"n\">ngx_http_create_ctx</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_range_body_filter_module</span><span class=\"p\">,</span>\n                                <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">ngx_http_range_filter_ctx_t</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n            <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">14</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span>\n                                  <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">21</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">charset</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">charset</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"c1\">// 获取一个分隔多个range内容的字符串\n</span><span class=\"c1\"></span>            <span class=\"n\">boundary</span> <span class=\"o\">=</span> <span class=\"n\">ngx_next_temp_number</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n            <span class=\"cm\">/*\n</span><span class=\"cm\">             * The boundary header of the range:\n</span><span class=\"cm\">             * CRLF\n</span><span class=\"cm\">             * &#34;--0123456789&#34; CRLF\n</span><span class=\"cm\">             * &#34;Content-Type: image/jpeg&#34; CRLF\n</span><span class=\"cm\">             * &#34;Content-Range: bytes &#34;\n</span><span class=\"cm\">             */</span>\n            <span class=\"c1\">// 设置响应头\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">charset</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                         <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span>\n                                      <span class=\"n\">CRLF</span> <span class=\"s\">&#34;--%010&#34;</span> <span class=\"n\">NGX_UINT_T_FMT</span> <span class=\"n\">CRLF</span>\n                                      <span class=\"s\">&#34;Content-Type: %s; charset=%s&#34;</span> <span class=\"n\">CRLF</span>\n                                      <span class=\"s\">&#34;Content-Range: bytes &#34;</span><span class=\"p\">,</span>\n                                      <span class=\"n\">boundary</span><span class=\"p\">,</span>\n                                      <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                      <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">charset</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n\n                <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">charset</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                         <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span>\n                                      <span class=\"n\">CRLF</span> <span class=\"s\">&#34;--%010&#34;</span> <span class=\"n\">NGX_UINT_T_FMT</span> <span class=\"n\">CRLF</span>\n                                      <span class=\"s\">&#34;Content-Type: %s&#34;</span> <span class=\"n\">CRLF</span>\n                                      <span class=\"s\">&#34;Content-Range: bytes &#34;</span><span class=\"p\">,</span>\n                                      <span class=\"n\">boundary</span><span class=\"p\">,</span>\n                                      <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 更新content-type为multipart/byteranges; boundary=&#34;xxx&#34;\n</span><span class=\"c1\"></span>            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                          <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">31</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                          <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n            <span class=\"cm\">/* &#34;Content-Type: multipart/byteranges; boundary=0123456789&#34; */</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                      <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n                                   <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_type</span><span class=\"o\">-&gt;</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                   <span class=\"mi\">31</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                                   <span class=\"s\">&#34;multipart/byteranges; boundary=%010&#34;</span>\n                                   <span class=\"n\">NGX_UINT_T_FMT</span><span class=\"p\">,</span>\n                                   <span class=\"n\">boundary</span><span class=\"p\">);</span>\n\n            <span class=\"cm\">/* the size of the last boundary CRLF &#34;--0123456789--&#34; CRLF */</span>\n            <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n            <span class=\"cm\">/*  \n</span><span class=\"cm\">                设置响应头\n</span><span class=\"cm\">                xxxx\n</span><span class=\"cm\">                Content-Type: image/png\n</span><span class=\"cm\">                Content-Range: bytes a-b/content-length\n</span><span class=\"cm\">                内容\n</span><span class=\"cm\">                xxxx\n</span><span class=\"cm\">                Content-Type: image/png\n</span><span class=\"cm\">                Content-Range: bytes c-d/content-length\n</span><span class=\"cm\">                内容\n</span><span class=\"cm\">                xxxx\n</span><span class=\"cm\">                // 这里貌似没有设置每个range里的content-type\n</span><span class=\"cm\">            */</span>\n            <span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// content_range记录了一个range的信息， Content-Range: bytes a-b/content-length\n</span><span class=\"c1\"></span>                <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                              <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">),</span>\n                              <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n                <span class=\"cm\">/* the size of the range: &#34;SSSS-EEEE/TTTT&#34; CRLF CRLF */</span>\n                <span class=\"c1\">// 这里的content_length_n是有效数据的长度\n</span><span class=\"c1\"></span>                <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">=</span>\n                  <span class=\"n\">ngx_snprintf</span><span class=\"p\">((</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                               <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n                               <span class=\"n\">OFF_T_FMT</span> <span class=\"s\">&#34;-&#34;</span> <span class=\"n\">OFF_T_FMT</span> <span class=\"s\">&#34;/&#34;</span> <span class=\"n\">OFF_T_FMT</span> <span class=\"n\">CRLF</span> <span class=\"n\">CRLF</span><span class=\"p\">,</span>\n                               <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n                               <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span><span class=\"p\">);</span>\n                <span class=\"c1\">// 这里len是最后返回的数据的长度\n</span><span class=\"c1\"></span>                <span class=\"n\">len</span> <span class=\"o\">+=</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">len</span>\n                                    <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">start</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length_n</span> <span class=\"o\">=</span> <span class=\"n\">len</span><span class=\"p\">;</span>\n            <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">content_length</span> <span class=\"o\">=</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_header_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_body_filter</span><span class=\"p\">(</span><span class=\"n\">ngx_http_request_t</span> <span class=\"o\">*</span><span class=\"n\">r</span><span class=\"p\">,</span>\n                                            <span class=\"n\">ngx_chain_t</span> <span class=\"o\">*</span><span class=\"n\">in</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_uint_t</span>                    <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_buf_t</span>                    <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_chain_t</span>                  <span class=\"o\">*</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">hcl</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">rcl</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">dcl</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">ll</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_range_t</span>             <span class=\"o\">*</span><span class=\"n\">range</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_range_filter_ctx_t</span>  <span class=\"o\">*</span><span class=\"n\">ctx</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 没有则跳过，在header filter里设置\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_body_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">in</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/*\n</span><span class=\"cm\">     * the optimized version for the static files only\n</span><span class=\"cm\">     * that are passed in the single file buf\n</span><span class=\"cm\">     */</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">in</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">in_file</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">in</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">last_buf</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">range</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">elts</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">in</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">file_pos</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">start</span><span class=\"p\">;</span>\n            <span class=\"n\">in</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">file_last</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"o\">-&gt;</span><span class=\"n\">end</span><span class=\"p\">;</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_body_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">in</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// 获取boundary内容\n</span><span class=\"c1\"></span>        <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_get_module_ctx</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">ngx_http_range_body_filter_module</span><span class=\"p\">);</span>\n        <span class=\"n\">ll</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">out</span><span class=\"p\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">headers_out</span><span class=\"p\">.</span><span class=\"n\">ranges</span><span class=\"p\">.</span><span class=\"n\">nelts</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n            <span class=\"cm\">/*\n</span><span class=\"cm\">             * The boundary header of the range:\n</span><span class=\"cm\">             * CRLF\n</span><span class=\"cm\">             * &#34;--0123456789&#34; CRLF\n</span><span class=\"cm\">             * &#34;Content-Type: image/jpeg&#34; CRLF\n</span><span class=\"cm\">             * &#34;Content-Range: bytes &#34;\n</span><span class=\"cm\">             */</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">ngx_calloc_buf</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">hcl</span><span class=\"p\">,</span> <span class=\"n\">ngx_alloc_chain_link</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"n\">hcl</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n\n            <span class=\"cm\">/* &#34;SSSS-EEEE/TTTT&#34; CRLF CRLF */</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">ngx_calloc_buf</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">temporary</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">pos</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">data</span> <span class=\"o\">+</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">content_range</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">;</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">rcl</span><span class=\"p\">,</span> <span class=\"n\">ngx_alloc_chain_link</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"n\">rcl</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n\n            <span class=\"cm\">/* the range data */</span>\n\n            <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">ngx_calloc_buf</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">in_file</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">file_pos</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">start</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">file_last</span> <span class=\"o\">=</span> <span class=\"n\">range</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">end</span><span class=\"p\">;</span>\n            <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">-&gt;</span><span class=\"n\">buf</span><span class=\"o\">-&gt;</span><span class=\"n\">file</span><span class=\"p\">;</span>\n\n            <span class=\"n\">ngx_alloc_link_and_set_buf</span><span class=\"p\">(</span><span class=\"n\">dcl</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n\n            <span class=\"o\">*</span><span class=\"n\">ll</span> <span class=\"o\">=</span> <span class=\"n\">hcl</span><span class=\"p\">;</span>\n            <span class=\"n\">hcl</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">rcl</span><span class=\"p\">;</span>\n            <span class=\"n\">rcl</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">dcl</span><span class=\"p\">;</span>\n            <span class=\"n\">ll</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">dcl</span><span class=\"o\">-&gt;</span><span class=\"n\">next</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"cm\">/* the last boundary CRLF &#34;--0123456789--&#34; CRLF  */</span>\n\n        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">ngx_calloc_buf</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n        <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">temporary</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last_buf</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">ngx_test_null</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">ngx_palloc</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n        <span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">ngx_cpymem</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">ctx</span><span class=\"o\">-&gt;</span><span class=\"n\">boundary_header</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mi\">4</span> <span class=\"o\">+</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n        <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"sc\">&#39;-&#39;</span><span class=\"p\">;</span>\n        <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">CR</span><span class=\"p\">;</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"o\">-&gt;</span><span class=\"n\">last</span><span class=\"o\">++</span> <span class=\"o\">=</span> <span class=\"n\">LF</span><span class=\"p\">;</span>\n\n        <span class=\"n\">ngx_alloc_link_and_set_buf</span><span class=\"p\">(</span><span class=\"n\">hcl</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">-&gt;</span><span class=\"n\">pool</span><span class=\"p\">,</span> <span class=\"n\">NGX_ERROR</span><span class=\"p\">);</span>\n        <span class=\"o\">*</span><span class=\"n\">ll</span> <span class=\"o\">=</span> <span class=\"n\">hcl</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_body_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/* TODO: alert */</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">ngx_http_next_body_filter</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">in</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 挂载到header和body的filter链表上\n</span><span class=\"c1\"></span><span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_header_filter_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_next_header_filter</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_top_header_filter</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_top_header_filter</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_range_header_filter</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">static</span> <span class=\"n\">ngx_int_t</span> <span class=\"nf\">ngx_http_range_body_filter_init</span><span class=\"p\">(</span><span class=\"n\">ngx_cycle_t</span> <span class=\"o\">*</span><span class=\"n\">cycle</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">ngx_http_next_body_filter</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_top_body_filter</span><span class=\"p\">;</span>\n    <span class=\"n\">ngx_http_top_body_filter</span> <span class=\"o\">=</span> <span class=\"n\">ngx_http_range_body_filter</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">NGX_OK</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-44e544bd14ae630befe954afcd7e5964_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1843\" data-rawheight=\"1998\" class=\"origin_image zh-lightbox-thumb\" width=\"1843\" data-original=\"https://pic1.zhimg.com/v2-44e544bd14ae630befe954afcd7e5964_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1843&#39; height=&#39;1998&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1843\" data-rawheight=\"1998\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1843\" data-original=\"https://pic1.zhimg.com/v2-44e544bd14ae630befe954afcd7e5964_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-44e544bd14ae630befe954afcd7e5964_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "服务器", 
                    "tagLink": "https://api.zhihu.com/topics/19554575"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1094284126466699264"
}
