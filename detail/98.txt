{
    "title": "以架构赢天下", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/xue-itde-gou-mao-mao", 
        "https://www.zhihu.com/people/xu-bosy", 
        "https://www.zhihu.com/people/yyun", 
        "https://www.zhihu.com/people/lao-cheng-35", 
        "https://www.zhihu.com/people/kimmking", 
        "https://www.zhihu.com/people/g_mlo", 
        "https://www.zhihu.com/people/zhou-ya-sen-52", 
        "https://www.zhihu.com/people/alan066", 
        "https://www.zhihu.com/people/zhao-xiao-5", 
        "https://www.zhihu.com/people/yu-li-5-90", 
        "https://www.zhihu.com/people/di-diao-de-itnan", 
        "https://www.zhihu.com/people/hufeng-35", 
        "https://www.zhihu.com/people/matata-60", 
        "https://www.zhihu.com/people/xiang-chi-man-tou", 
        "https://www.zhihu.com/people/you-yu-you-you-yu-de-you-yu", 
        "https://www.zhihu.com/people/javashi-yi", 
        "https://www.zhihu.com/people/dong-mian-97-96-55", 
        "https://www.zhihu.com/people/len-50-24", 
        "https://www.zhihu.com/people/zhang-jian-49-58-47", 
        "https://www.zhihu.com/people/xiao-jie-78-81", 
        "https://www.zhihu.com/people/xiao-li-mao-5", 
        "https://www.zhihu.com/people/dou-dou-wa-48-88", 
        "https://www.zhihu.com/people/liu-jia-57-62-46", 
        "https://www.zhihu.com/people/po-wang-69", 
        "https://www.zhihu.com/people/dong-yan-ming-25", 
        "https://www.zhihu.com/people/zhang-yu-liang-16-64", 
        "https://www.zhihu.com/people/han-yan-xiao-yue", 
        "https://www.zhihu.com/people/sinoxutong", 
        "https://www.zhihu.com/people/qin-shi-jiang-1-20", 
        "https://www.zhihu.com/people/qian-long-0606", 
        "https://www.zhihu.com/people/zhang-bo-23-15", 
        "https://www.zhihu.com/people/sun-da-lei-51", 
        "https://www.zhihu.com/people/chen-yi-liang-64-71", 
        "https://www.zhihu.com/people/penven", 
        "https://www.zhihu.com/people/yu-yue-88-73", 
        "https://www.zhihu.com/people/cybercall", 
        "https://www.zhihu.com/people/hong-hui-wei-de-nan-ren", 
        "https://www.zhihu.com/people/wilson22-22", 
        "https://www.zhihu.com/people/fu-ge-37-52", 
        "https://www.zhihu.com/people/chen-zhi-xiang-10-73", 
        "https://www.zhihu.com/people/boyi0001", 
        "https://www.zhihu.com/people/ju-shang-38", 
        "https://www.zhihu.com/people/andyWu.amoy", 
        "https://www.zhihu.com/people/wanglar-47", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/noyi-shi"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/90123947", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 4, 
            "title": "最新饿了么、美团、大众点评技术面面试难点整理，看完长点心", 
            "content": "<h2><b>目录</b></h2><ul><li>Java基础</li><li>Spring</li><li>MySQL</li><li>JVM</li><li>Linux命令</li><li>Linux常问题</li><li>Redis</li><li>经验分享</li><li>福利彩蛋</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a0e2d52e7f2369712246391fc88f665f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-a0e2d52e7f2369712246391fc88f665f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;409&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-a0e2d52e7f2369712246391fc88f665f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a0e2d52e7f2369712246391fc88f665f_b.jpg\"/></figure><h2><b>Java</b></h2><ol><li>多个线程同时读写，读线程的数量远远大于写线程，你认为应该如何解决并发的问题？你会选择加什么样的锁？</li><li>JAVA的AQS是否了解，它是干嘛的？</li><li>除了synchronized关键字之外，你是怎么来保障线程安全的？</li><li>什么时候需要加volatile关键字？它能保证线程安全吗？</li><li>线程池内的线程如果全部忙，提交一个新的任务，会发生什么？队列全部塞满了之后，还是忙，再提交会发生什么？</li><li>Tomcat本身的参数你一般会怎么调整？</li><li>synchronized关键字锁住的是什么东西？在字节码中是怎么表示的？在内存中的对象上表现为什么？</li><li>wait/notify/notifyAll方法需不需要被包含在synchronized块中？这是为什么？</li><li>ExecutorService你一般是怎么用的？是每个service放一个还是一个项目里面放一个？有什么好处？</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6ca185fc4eb6d66a9c654bf943b26078_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"453\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-6ca185fc4eb6d66a9c654bf943b26078_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;453&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"453\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-6ca185fc4eb6d66a9c654bf943b26078_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6ca185fc4eb6d66a9c654bf943b26078_b.jpg\"/></figure><h2><b>Spring</b></h2><ol><li>你有没有用过Spring的AOP? 是用来干嘛的? 大概会怎么使用？</li><li>如果一个接口有2个不同的实现, 那么怎么来Autowire一个指定的实现？</li><li>Spring的声明式事务 @Transaction注解一般写在什么位置? 抛出了异常会⾃动回滚吗？有没有办法控制不触发回滚?</li><li>如果想在某个Bean生成并装配完毕后执行自己的逻辑，可以什么方式实现？</li><li>SpringBoot没有放到web容器里为什么能跑HTTP服务？</li><li>SpringBoot中如果你想使用自定义的配置文件而不仅仅是application.properties，应该怎么弄？</li><li>SpringMVC中RequestMapping可以指定GET, POST方法么？怎么指定？</li><li>SpringMVC如果希望把输出的Object(例如XXResult或者XXResponse)这种包装为JSON输出, 应该怎么处理?</li><li>怎样拦截SpringMVC的异常，然后做自定义的处理，比如打日志或者包装成JSON</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-90797a8687a7c1f1e705c44a31faab68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-90797a8687a7c1f1e705c44a31faab68_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;512&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-90797a8687a7c1f1e705c44a31faab68_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-90797a8687a7c1f1e705c44a31faab68_b.jpg\"/></figure><h2><b>MySQL</b></h2><ol><li>如果有很多数据插入MYSQL 你会选择什么方式?</li><li>如果查询很慢，你会想到的第一个方式是什么？索引是干嘛的?</li><li>如果建了一个单列索引，查询的时候查出2列，会用到这个单列索引吗？</li><li>如果建了一个包含多个列的索引，查询的时候只用了第一列，能不能用上这个索引？查三列呢？</li><li>接上题，如果where条件后面带有一个 i + 5 &lt; 100 会使用到这个索引吗？</li><li>怎么看是否用到了某个索引？</li><li>like %aaa%会使用索引吗? like aaa%呢?</li><li>drop、truncate、delete的区别？</li><li>平时你们是怎么监控数据库的? 慢SQL是怎么排查的？</li><li>你们数据库是否支持emoji表情，如果不支持，如何操作?</li><li>你们的数据库单表数据量是多少？一般多大的时候开始出现查询性能急剧下降？</li><li>查询死掉了，想要找出执行的查询进程用什么命令？找出来之后一般你会干嘛？</li><li>读写分离是怎么做的？你认为中间件会怎么来操作？这样操作跟事务有什么关系？</li><li>分库分表有没有做过？线上的迁移过程是怎么样的？如何确定数据是正确的？</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8863b2998ccf95c53abea7029501d04d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-8863b2998ccf95c53abea7029501d04d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;481&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-8863b2998ccf95c53abea7029501d04d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8863b2998ccf95c53abea7029501d04d_b.jpg\"/></figure><h2><b>JVM</b></h2><ol><li>你知道哪些或者你们线上使用什么GC策略? 它有什么优势，适用于什么场景？</li><li>JAVA类加载器包括几种？它们之间的父子关系是怎么样的？双亲委派机制是什么意思？有什么好处？</li><li>如何自定义一个类加载器？你使用过哪些或者你在什么场景下需要一个自定义的类加载器吗？</li><li>堆内存设置的参数是什么？</li><li>Perm Space中保存什么数据? 会引起OutOfMemory吗？</li><li>做gc时，一个对象在内存各个Space中被移动的顺序是什么？</li><li>你有没有遇到过OutOfMemory问题？你是怎么来处理这个问题的？处理过程中有哪些收获？</li><li>1.8之后Perm Space有哪些变动? MetaSpace大小默认是无限的么? 还是你们会通过什么方式来指定大小?</li><li>Jstack是干什么的? Jstat呢? 如果线上程序周期性地出现卡顿，你怀疑可能是gc导致的，你会怎么来排查这个问题？线程日志一般你会看其中的什么部分？</li><li>StackOverFlow异常有没有遇到过？一般你猜测会在什么情况下被触发？如何指定一个线程的堆栈大小？一般你们写多少？</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f4ffc670db6011ca3f4e0221ed4cf455_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f4ffc670db6011ca3f4e0221ed4cf455_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;640&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f4ffc670db6011ca3f4e0221ed4cf455_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f4ffc670db6011ca3f4e0221ed4cf455_b.jpg\"/></figure><h2><b>Linux命令</b></h2><ol><li>日志特别大只想看最后100行怎么弄? 如果想一直看日志的持续输出，用什么命令?</li><li>如果日志一边输出，一边想实时看到有没有某个关键字应该怎么弄？</li><li>grep如果忽略大小写应该怎么弄? 正则表达式呢？</li><li>vim往下一行是什么键？往下30行呢? 跳到文件末尾一行是什么? 跳回来是什么? 向后搜索是什么?</li><li>如果有个文本文件，按空格作为列的分隔符，如果想统计第三列里面的每个单词的出现次数应该怎么弄？</li><li>如果把上面的出现次数排个序应该怎么弄? 想按照数字本身的顺序而不是字符串的顺序排列怎么弄？</li><li>Linux环境变量是以什么作为分隔符的？环境变量通过什么命令设置？</li><li>给某个文件权设置限比如设置为644 是用什么命令？这个6是什么意思？</li><li>Linux下面如果想看某个进程的资源占用情况是怎么看的？系统load大概指的什么意思？你们线上系统load一般多少？如果一个4核机器，你认为多少load是比较正常的？top命令里面按一下1会发生什么?</li><li>top命令里面，有时候所有进程的CPU使用率加起来超过100%是怎么回事？</li><li>还有哪些查看系统性能或者供你发现问题的命令？你一般是看哪个参数？</li><li>想看某个进程打开了哪些网络连接是什么命令？里面连接的状态你比较关心哪几种？</li></ol><p><b>Linux常问题</b></p><ol><li>有没有做过Linux系统参数方面的优化，大概优化过什么？</li><li>系统参数里面有个叫做backlog的可以用来干什么？</li><li>查看网络连接发现好多TIME_WAIT 可能是什么原因？对你的应用会有什么影响？你会选择什么样的方式来减少这些TIME_WAIT</li><li>可否介绍一下TCP三次握手的过程，如果现在有个网络程序，你用第三方的library来发送数据，你怀疑这个library发送的数据有问题，那么怎么来验证？tcpdump导出的文件你一般是怎么分析的？</li><li>KeepAlive是用来干什么的？这样的好处是什么？</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fd9847556261c346feeb9c25cbc2a860_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-fd9847556261c346feeb9c25cbc2a860_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;640&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-fd9847556261c346feeb9c25cbc2a860_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fd9847556261c346feeb9c25cbc2a860_b.jpg\"/></figure><h2><b>Redis</b></h2><p><b>开发</b></p><ol><li>缓存穿透可以介绍一下么？你认为应该如何解决这个问题</li><li>你是怎么触发缓存更新的？(比如设置超时时间(被动方式), 比如更新的时候主动update)？如果是被动的方式如何控制多个入口同时触发某个缓存更新？</li><li>你们用Redis来做什么？为什么不用其他的KV存储例如Memcached,Cassandra等?</li><li>你们用什么Redis客户端? Redis高性能的原因大概可以讲一些?</li><li>你熟悉哪些Redis的数据结构? zset是干什么的? 和set有什么区别?</li><li>Redis的hash, 存储和获取的具体命令叫什么名字?</li><li>LPOP和BLPOP的区别?</li><li>Redis的有一些包含SCAN关键字的命令是干嘛的? SCAN返回的数据量是固定的吗?</li><li>Redis中的Lua有没有使用过? 可以用来做什么? 为什么可以这么用?</li><li>Redis的Pipeline是用来干什么的?</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-760f627483633b5245c6f6a95c95a970_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-760f627483633b5245c6f6a95c95a970_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-760f627483633b5245c6f6a95c95a970_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-760f627483633b5245c6f6a95c95a970_b.jpg\"/></figure><h2><b>经验分享</b></h2><p>如果你的技术扎实没问题，接下来的面试也决定你是否能得到认可拿到offer，列出以下几点经验，面试前提前准备好答案。</p><ol><li>最好准备好1-2两个问题来应对“你有什么想问的吗？”之类的问题。</li><li>离职原因，不要抱怨现在和以前的雇主。</li><li>保持谈话的时间安排节奏顺利进行, 但不要就某个问题说过多，通过一个问题引入到下一个问题。</li><li>面谈的过程中面试官的问题可能会比较细，比较犀利，那是正常环节，不必紧张。</li><li>如果遇到不太了解问题，最好不要说模棱两可的答案。</li><li>沟通过程中最好保持高度的愿意性。</li></ol><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>读者福利、完整面试题【含答案】Java核心笔记，Java架构面试专题整合千道（pdf文档）</b></h2><p><b>我这里也整理出了一套Java后端进阶笔记文档和学习资料免费分享给大家！</b></p><h2><b>因篇幅问题，我就不全部展示出来了，有需要的各位程序员（媛）们可以私信我【资料】获取！</b></h2><p><b>JVM相关</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-df2605216f028843548c4e9d03a3b017_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"819\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-df2605216f028843548c4e9d03a3b017_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;819&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"819\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-df2605216f028843548c4e9d03a3b017_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-df2605216f028843548c4e9d03a3b017_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1bd88f6a6fbaebcd228e55487b8c2d78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-1bd88f6a6fbaebcd228e55487b8c2d78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;610&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-1bd88f6a6fbaebcd228e55487b8c2d78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1bd88f6a6fbaebcd228e55487b8c2d78_b.jpg\"/></figure><p><b>多线程并发相关</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-894c2a5806396645ca1910a33329776d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"823\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-894c2a5806396645ca1910a33329776d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;823&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"823\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-894c2a5806396645ca1910a33329776d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-894c2a5806396645ca1910a33329776d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8b4156862a8d0a278ec9a1245a2fe6de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"916\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-8b4156862a8d0a278ec9a1245a2fe6de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;916&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"916\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-8b4156862a8d0a278ec9a1245a2fe6de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8b4156862a8d0a278ec9a1245a2fe6de_b.jpg\"/></figure><p><b>Spring相关</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0fa38e56ef996994f16f80e095ab0801_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-0fa38e56ef996994f16f80e095ab0801_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;939&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-0fa38e56ef996994f16f80e095ab0801_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0fa38e56ef996994f16f80e095ab0801_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-990de4b8e4f373ceabb9c51813b2578e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-990de4b8e4f373ceabb9c51813b2578e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-990de4b8e4f373ceabb9c51813b2578e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-990de4b8e4f373ceabb9c51813b2578e_b.jpg\"/></figure><p><b>微服务相关</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ba623b50efa3f2e148518a5aca7f45c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-ba623b50efa3f2e148518a5aca7f45c4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;363&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-ba623b50efa3f2e148518a5aca7f45c4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ba623b50efa3f2e148518a5aca7f45c4_b.jpg\"/></figure><p><b>数据库相关</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-edb7125fd72029c359ced5dca3855aa6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-edb7125fd72029c359ced5dca3855aa6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;378&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"378\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-edb7125fd72029c359ced5dca3855aa6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-edb7125fd72029c359ced5dca3855aa6_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aeca2a4bd6f6b20094ebd40fc3286031_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-aeca2a4bd6f6b20094ebd40fc3286031_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;653&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-aeca2a4bd6f6b20094ebd40fc3286031_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aeca2a4bd6f6b20094ebd40fc3286031_b.jpg\"/></figure><p><br/><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ae66a2c4a242da5aab6237da84578316_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic3.zhimg.com/v2-ae66a2c4a242da5aab6237da84578316_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic3.zhimg.com/v2-ae66a2c4a242da5aab6237da84578316_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ae66a2c4a242da5aab6237da84578316_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;775&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_b.jpg\"/></figure><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "程序员面试", 
                    "tagLink": "https://api.zhihu.com/topics/19579066"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/90029676", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 4, 
            "title": "我所经历的一次Dubbo服务雪崩，这是一个漫长的故事", 
            "content": "<p>在一个处理用户点击广告的高并发服务上找到了问题。看到服务打印的日记后我完全蒙了，全是jedis读超时，Read time out！一直用的是亚马逊的Redis服务，很难想象Jedis会读超时。</p><p>看了服务的负载均衡统计，发现并发增长了一倍，从每分钟3到4万的请求数，增长到8.6万，很显然，是并发翻倍导致的服务雪崩。</p><p>服务的部署：</p><p>处理广告点击的服务：2台2核8g的实例，每台部署一个节点(服务)。下文统称服务A</p><p>规则匹配服务(Rpc远程调用服务提供者)：2个节点，2台2核4g实例。下文统称服务B</p><p>还有其它的服务提供者，但不是影响本次服务雪崩的凶手，这里就不列举了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-17e9d0b42dccf03024271278e09f802e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-17e9d0b42dccf03024271278e09f802e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;660&#39; height=&#39;330&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"330\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"660\" data-original=\"https://pic3.zhimg.com/v2-17e9d0b42dccf03024271278e09f802e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-17e9d0b42dccf03024271278e09f802e_b.jpg\"/></figure><p>从日记可以看出的问题：</p><p>一是远程rpc调用大量超时，我配置的dubbo参数是，每个接口的超时时间都是3秒。服务提供者接口的实现都是缓存级别的操作，3秒的超时理论上除了网络问题，调用不应该会超过这个值。在服务消费端，我配置每个接口与服务端保持10个长连接，避免共享一个长连接导致应用层数据包排队发送和处理接收。</p><p>二是刚说的Jedis读操作超时，Jedis我配置每个服务节点200个最小连接数的连接池，这是根据netty工作线程数配置的，即读写操作就算200个线程并发执行，也能为每个线程分配一个连接。这是我设置Jedis连接池连接数的依据。</p><p>三是文件句柄数达到上线。SocketChannel套接字会占用一个文件句柄，有多少个客户端连接就占用多少个文件句柄。我在服务的启动脚本上为每个进程配置102400的最大文件打开数，理论上目前不会达到这个值。服务A底层用的是基于Netty实现的http服务引擎，没有限制最大连接数。</p><p>所以，解决服务雪崩问题就是要围绕这三个问题出发。</p><p>第一次是怀疑redis服务扛不住这么大的并发请求。估算广告的一次点击需要执行20次get操作从redis获取数据，那么每分钟8w并发，就需要执行160w次get请求，而redis除了本文提到的服务A和服务B用到外，还有其它两个并发量高的服务在用，保守估计，redis每分钟需要承受300w的读写请求。转为每秒就是5w的请求，与理论值redis每秒可以处理超过 10万次读写操作已经过半。</p><p>由于历史原因，redis使用的还是2.x版本的，用的一主一从，jedis配置连接池是读写分离的连接池，也就是写请求打到主节点，读请求打到从节点，每秒接近5w读请求只有一个redis从节点处理，非常的吃力。所以我们将redis升级到4.x版本，并由主从集群改为分布式集群，两主无从。别问两主无从是怎么做到的，我也不懂，只有亚马逊清楚。</p><p>Redis升级后，理论上，两个主节点，分槽位后请求会平摊到两个节点上，性能会好很多。但好景不长，服务重新上线一个小时不到，并发又突增到了六七万每分钟，这次是大量的RPC远程调用超时，已经没有jedis的读超时Read time out了，相比之前好了点，至少不用再给Redis加节点。</p><p>这次的事故是并发量超过临界值，超过redis的实际最大qps（跟存储的数据结构和数量有关），虽然升级后没有Read time out! 但Jedis的Get读操作还是很耗时，这才是罪魁祸首。Redis的命令耗时与Jedis的读操作Read time out不同。</p><p>redis执行一条命令的过程是：</p><ol><li>接收客户端请求</li><li>进入队列等待执行</li><li>执行命令</li><li>响应结果给客户端</li></ol><p>由于redis执行命令是单线程的，所以命令到达服务端后不是立即执行，而是进入队列等待。redis慢查询日记记录slowlog get的是执行命令的耗时，对应步骤3，执行命令耗时是根据key去找到数据所在的内存地址这段时间的耗时，所以这对于key-value字符串类型的命令而言，并不会因为value的大小而导致命令耗时长。</p><p>为验证这个观点，我进行了简单的测试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-10c5fd4a153f0298c6d3ee140cbc15ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-10c5fd4a153f0298c6d3ee140cbc15ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;710&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-10c5fd4a153f0298c6d3ee140cbc15ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-10c5fd4a153f0298c6d3ee140cbc15ce_b.jpg\"/></figure><p>分别写入四个key，每个key对应的value长度都不等，一个比一个长。再来看下两组查询日记。先通过CONFIG SET slowlog-log-slower-than 0命令，让每条命令都记录耗时。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-868ceeb2183fd930f1fe28fadbed5af5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"401\" class=\"content_image\" width=\"300\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;300&#39; height=&#39;401&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"401\" class=\"content_image lazy\" width=\"300\" data-actualsrc=\"https://pic2.zhimg.com/v2-868ceeb2183fd930f1fe28fadbed5af5_b.jpg\"/></figure><p>key_4的value长度比key_3的长两倍，但get耗时比key_3少，而key_1的value长度比key_2短，但耗时比key_2长。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-58f4388cb7dfb508f2f99e5d0d5739c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"271\" data-rawheight=\"410\" class=\"content_image\" width=\"271\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;271&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"271\" data-rawheight=\"410\" class=\"content_image lazy\" width=\"271\" data-actualsrc=\"https://pic1.zhimg.com/v2-58f4388cb7dfb508f2f99e5d0d5739c4_b.jpg\"/></figure><p>第二组数据也是一样的，跟value的值大小无关。所以可以排除项目中因value长度过长导致的slowlog记录到慢查询问题。慢操作应该是set、hset、hmset、hget、hgetall等命令耗时比较长导致。</p><p>而Jedis的Read time out则是包括1、2、3、4步骤，从命令的发出到接收完成Redis服务端的响应结果，超时原因有两大原因：</p><ul><li>redis的并发量增加，导致命令等待队列过长，等待时间长</li><li>get请求读取的数据量大，数据传输时间长</li></ul><p>所以将Redis从一主一从改为两主之后，导致Jedis的Read time out的原因一有所缓解，分摊了部分压力。但是原因2还是存在，耗时依然是问题。</p><p>Jedis的get耗时长导致服务B接口执行耗时超过设置的3s。由于dubbo消费端超时放弃请求，但是请求已经发出，就算消费端取消，提供者无法感知服务端超时放弃了，还是要执行完一次调用的业务逻辑，就像说出去的话收不回来一样。</p><p>由于dubbo有重试机制，默认会重试两次，所以并发8w对于服务b而言，就变成了并发24w。最后导致业务线程池一直被占用状态，RPC远程调用又多出了一个异常，就是远程服务线程池已满，直接响应失败。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-30931616b24cf9cc4ce71110de2cd93d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic2.zhimg.com/v2-30931616b24cf9cc4ce71110de2cd93d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;727&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"727\" data-original=\"https://pic2.zhimg.com/v2-30931616b24cf9cc4ce71110de2cd93d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-30931616b24cf9cc4ce71110de2cd93d_b.jpg\"/></figure><p>问题最终还是要回到Redis上，就是key对应的value太大，传输耗时，最终业务代码拿到value后将value分割成数组，判断请求参数是否在数组中，非常耗时，就会导致服务B接口耗时超过3s，从而拖垮整个服务。</p><p>模拟服务B接口做的事情，业务代码（1）。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"cm\">/**\n</span><span class=\"cm\"> * @author wujiuye\n</span><span class=\"cm\"> * @version 1.0 on 2019/10/20 {描述：}\n</span><span class=\"cm\"> */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Match</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Task</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n        <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">public</span> <span class=\"nf\">Task</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"o\">;</span> <span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 模拟jedis get耗时\n</span><span class=\"c1\"></span>                <span class=\"k\">try</span> <span class=\"o\">{</span>\n                    <span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n                <span class=\"c1\">// =====&gt; 实际业务代码\n</span><span class=\"c1\"></span>                <span class=\"kt\">long</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">();</span>\n                <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">&#34;,&#34;</span><span class=\"o\">)).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"n\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n                <span class=\"kt\">boolean</span> <span class=\"n\">exist</span> <span class=\"o\">=</span> <span class=\"n\">ids</span><span class=\"o\">.</span><span class=\"na\">contains</span><span class=\"o\">(</span><span class=\"s\">&#34;4029000&#34;</span><span class=\"o\">);</span>\n                <span class=\"c1\">// ====&gt; 输出结果，耗时171ms .\n</span><span class=\"c1\"></span>                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;exist:&#34;</span> <span class=\"o\">+</span> <span class=\"n\">exist</span> <span class=\"o\">+</span> <span class=\"s\">&#34;,time:&#34;</span> <span class=\"o\">+</span> <span class=\"o\">(</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// ====&gt; 模拟业务场景，从缓存中获取到的字符串\n</span><span class=\"c1\"></span>        <span class=\"n\">StringBuilder</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">4000000</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">4029000</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)).</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">&#34;,&#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">String</span> <span class=\"n\">strValue</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">strValue</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">());</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">200</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Task</span><span class=\"o\">(</span><span class=\"n\">strValue</span><span class=\"o\">)).</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>这段代码很简单，就是模拟高并发，把200个业务线程全部耗尽的场景下，一个简单的判断元素是否存在的业务逻辑执行需要多长时间。把这段代码跑一遍，你会发现很多执行耗时超过1500ms，再加上Jedis读取到数据的耗时，直接导致接口执行耗时超过3000ms。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-70da85768c49305d4bc181896c8bb4d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"307\" class=\"content_image\" width=\"277\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;277&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"307\" class=\"content_image lazy\" width=\"277\" data-actualsrc=\"https://pic1.zhimg.com/v2-70da85768c49305d4bc181896c8bb4d4_b.jpg\"/></figure><p>这段代码不仅耗时，还很耗内存，没错，就是这个Bug了。改进就是将id拼接成字符串的存储方式改为hash存储，直接hget方式判断一个元素是否存在，不需要将这么大的数据读取到本地，即避免了网络传输消耗，也优化了接口的执行速度。</p><p>由于并发量的增长，导致redis读并发上升，Jedis的get耗时长，加上业务代码的缺陷，导致服务B接口耗时长，从而导致服务A远程RPC调用超时，导致dubbo超时重试，导致服务B并发乘3，再导致服务B业务线程池全是工作状态以及Redis并发又增加，导致服务A调用异常。正是这种连环效应导致服务雪崩。</p><p>最后优化分三步</p><p>一是优化数据的redis缓存的结构，刚也提到，由大量id拼接成字符串的key-value改成hash结构缓存，请求判断某个id是否在缓存中用hget，除了能降低redis的大value传输耗时，也能将判断一个元素是否存在的时间复杂度从O(n)变为O(1)，接口耗时降低，消除RPC远程调用超时。</p><p>二是业务逻辑优化，降低Redis并发。将服务B由一个服务拆分成两个服务。这里就不多说了。</p><p>三是Dubbo调优，将Dubbo的重试次数改为0，失败直接放弃当前的广告点击请求。为避免突发性的并发量上升，导致服务雪崩，为服务提供者加入熔断器，估算服务所能承受的最大QPS，当服务达到临界值时，放弃处理远程RPC调用。</p><p>（我用的是Sentinel，官方文档传送门：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alibaba/Sentinel/wiki/%25E6%258E%25A7%25E5%2588%25B6%25E5%258F%25B0\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/alibaba/Sent</span><span class=\"invisible\">inel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0</span><span class=\"ellipsis\"></span></a>）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-50a2861a9539d76fc02a5d26a9706599_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-50a2861a9539d76fc02a5d26a9706599_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;541&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-50a2861a9539d76fc02a5d26a9706599_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-50a2861a9539d76fc02a5d26a9706599_b.jpg\"/></figure><p>所以，缓存并不是简单的Get，Set就行了，Redis提供这么多的数据结构的支持要用好，结合业务逻辑优化缓存结构。避免高并发接口读取的缓存value过长，导致数据传输耗时。同时，Redis的特性也要清楚，分布式集群相比单一主从集群的优点。反省img。</p><p>经过两次的项目重构，项目已经是分布式微服务架构，同时业务的合理划分让各个服务之间完美解耦，每个服务内部的实现合理利用设计模式，完成业务的高内聚低耦合，这是一次非常大的改进，但还是有还多历史遗留的问题不能很好的解决。同时，分布式也带来了很多问题，总之，有利必有弊。</p><p>有时候就需要这样，被项目推着往前走。在未发生该事故之前，我花一个月时间也没想出困扰我的两大难题，是这次的事故，让我从一个短暂的夜晚找出答案，一个通宵让我想通很多问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>最后也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }, 
                {
                    "tag": "dubbo", 
                    "tagLink": "https://api.zhihu.com/topics/20032385"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89912718", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 2, 
            "title": "超详细的Java 生产者消费者模式分析", 
            "content": "<p>生产者消费者模式是多线程中最为常见的模式：生产者线程(一个或多个)生成面包放进篮子里(集合或数组)，同时，消费者线程(一个或多个)从篮子里(集合或数组)取出面包消耗。虽然它们任务不同，但处理的资源是相同的，这体现的是一种线程间通信方式。</p><p>本文将先说明单生产者单消费者的情况，之后再说明多生产者多消费者模式的情况。还会分别使用wait()/nofity()/nofityAll()机制、lock()/unlock()机制实现这两种模式。</p><p>在开始介绍模式之前，先解释下wait()、notify()和notifyAll()方法的用法细节以及改进的lock()/unlock()、await()/signal()/signalAll()的用法。</p><h2><b>1.等待、唤醒机制的原理</b></h2><p>wait()、notify()和notifyAll()分别表示让线程进入睡眠、唤醒睡眠线程以及唤醒所有睡眠的线程。但是，对象是哪个线程呢？另外，在API文档中描述这三个方法都必须在有效监视器(可理解为持有锁)的前提下使用。这三个方法和锁有什么关系呢？</p><p>以同步代码块synchronized(obj){}或同步函数为例，在它们的代码结构中可以使用wait()、notify()以及notifyAll()，因为它们都持有锁。</p><p>对于下面的两个同步代码块来说，分别使用的是锁obj1和锁obj2，其中线程1、线程2执行的是obj1对应的同步代码，线程3、线程4执行的是obj2对应的同步代码。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">MyLock</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"n\">Object</span> <span class=\"n\">obj1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Object</span><span class=\"o\">();</span>\n    <span class=\"n\">Object</span> <span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Object</span><span class=\"o\">();</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">flag</span><span class=\"o\">%</span><span class=\"n\">2</span><span class=\"o\">=</span><span class=\"n\">0</span><span class=\"o\">){</span>\n                <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">obj1</span><span class=\"o\">){</span>     <span class=\"c1\">//线程t1和t2执行此同步任务\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//try{obj1.wait();}catch(InterruptedException i){}\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//obj1.notify()\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//obj1.notifyAll()\n</span><span class=\"c1\"></span>                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">obj2</span><span class=\"o\">){</span>   <span class=\"c1\">//线程t3和t4执行此同步任务\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//try{obj2.wait();}catch(InterruptedException i){}\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//obj2.notify()\n</span><span class=\"c1\"></span>                    <span class=\"c1\">//obj2.notifyAll()\n</span><span class=\"c1\"></span>                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Demo</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">){</span>\n        <span class=\"n\">MyLock</span> <span class=\"n\">ml</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MyLock</span><span class=\"o\">();</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">ml</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">ml</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">ml</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">t4</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">ml</span><span class=\"o\">);</span>\n        <span class=\"n\">t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">1</span><span class=\"o\">)}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){};</span>\n        <span class=\"n\">ml</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">++;</span>\n        <span class=\"n\">t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">t4</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>当t1开始执行到wait()时，它将进入睡眠状态，但却不是一般的睡眠，而是在一个被obj1标识的线程池中睡眠(实际上是监视器对应线程池，只不过此时的监视器和锁是绑定在一起的)。当t2开始执行，它发现锁obj1被其他线程持有，它将进入睡眠态，这次睡眠是因为锁资源等待而非wait()进入的睡眠。因为t2已经判断过它要申请的是obj1锁，因此它也会进入obj1这个线程池睡眠，而不是普通的睡眠。同理t3和t4，这两个线程会进入obj2线程池睡眠。</p><p>当某个线程执行到notify()时，这个notify()将 随机 唤醒它 所属锁对应线程池 中的 任意一个 线程。例如，obj1.notify()将唤醒obj1线程池中任意一个睡眠的线程(当然，如果没有睡眠线程则什么也不做)。同理notifyAll()则是唤醒所属锁对应线程池中所有睡眠的线程。</p><p>必须要搞清楚的是&#34;对应锁&#34;，因为在调用wait()、notify()和notifyAll()时都必须明确指定锁。例如，obj1.wait()。如果省略了所属锁，则表示的是this这个对象，也就是说，只有在非静态的同步函数中才能省略这三个方法的前缀。</p><p>简而言之，当使用了同步，就使用了锁，线程也就有了归属，它的所有依据都由所属锁来决定。例如，线程同步时，判断锁是否空闲以决定是否执行后面的代码，亦决定是否去特定的线程池中睡眠，当唤醒时也只会唤醒所属锁对应线程池中的线程。</p><p>这几个方法在应用上，一般在一次任务中，wait()和notify()/notifyAll()是成对出现且择一执行的。换句话说，就是这一轮原子性同步执行过程中，要么执行wait()进入睡眠，要么执行notify()唤醒线程池中的睡眠线程。要如何实现择一执行，可以考虑使用标记的方式来作为判断依据。参考后文的例子。</p><h2><b>2.Lock和Condition</b></h2><p>wait()系列的三个方法局限性很大，因为无论是睡眠还是唤醒的动作，都完全和锁耦合在一起了。例如，锁obj1关联的线程只能唤醒obj1线程池中的线程，而无法唤醒锁obj2关联的线程；再例如，在原来synchronized同步时，锁是在开始同步时隐式地自动获取的，且是在执行完一整个任务后，又隐式地自动释放锁，也就是说获取锁和释放锁的动作无法人为控制。</p><p>从JDK 1.5开始，java提供了java.util.concurrent.locks包，这个包中提供了Lock接口、Condition接口和ReadWriteLock接口，前两个接口将锁和监视器方法(睡眠、唤醒操作)解耦了。其中Lock接口只提供锁，通过锁方法newConditon()可以生成一个或多个与该锁关联的监视器，每个监视器都有自己的睡眠、唤醒方法。也就是说Lock替代了synchronized方法和同步代码块的使用，Condition替代了Object监视器方法的使用。</p><p>如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-12d300b5e946f3cf7ec13f1df8684ff5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-12d300b5e946f3cf7ec13f1df8684ff5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;303&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-12d300b5e946f3cf7ec13f1df8684ff5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-12d300b5e946f3cf7ec13f1df8684ff5_b.jpg\"/></figure><p>当某线程执行condition1.await()时，该线程将进入condition1监视器对应的线程池睡眠，当执行condition1.signal()时，将随机唤醒condition1线程池中的任意一个线程，当执行condition1.signalAll()时，将唤醒condition1线程池中的所有线程。同理，对于condition2监视器也是一样的。</p><p>即使有多个监视器，但只要它们关联的是同一个锁对象，就可以跨监视器操作对方线程。例如condition1中的线程可以执行condition2.signal()来唤醒condition2线程池中的某个线程。</p><p>要使用这种锁、监视器的关联方式，参考如下步骤：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.locks.*</span><span class=\"o\">;</span>\n<span class=\"n\">Lock</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ReentrantLock</span><span class=\"o\">();</span>\n<span class=\"n\">Condition</span> <span class=\"n\">con1</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n<span class=\"n\">condition</span> <span class=\"n\">con2</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n<span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n<span class=\"k\">try</span><span class=\"o\">{</span>\n    <span class=\"c1\">//包含await()、signal()或signalAll()的代码段...\n</span><span class=\"c1\"></span><span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n    <span class=\"n\">l</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>    <span class=\"c1\">//由于代码段可能异常，但unlock()是必须执行的，所以必须使用try，且将unlock()放进finally段\n</span></code></pre></div><p>具体用法见后文关于Lock、condition的示例代码。</p><h2><b>3.单生产者单消费者模式</b></h2><p>一个生产者线程，一个消费者线程，生产者每生产一个面包放进盘子里，消费者从盘子里取出面包进行消费。其中生产者判断是否继续生产的依据是盘子里没有面包，而消费者判断是否消费的依据是盘子里有面包。由于这个模式中，盘子一直只放一个面包，因此可以把盘子省略掉，生产者和消费者直接手把手地交递面包即可。</p><p>首先需要描述这三个类，一是多线程共同操作的资源(此处即面包)，二是生产者，三是消费者。在下面的例子中，我把生产面包和消费面包的方法分别封装到了生产者和消费者类中，如果把它们封装在面包类中则更容易理解。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//描述资源：面包的名称和编号，由编号决定面包的号码\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Bread</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>   <span class=\"c1\">//该标记为wait()和notify()提供判断标记\n</span><span class=\"c1\"></span><span class=\"o\">}</span>\n<span class=\"c1\">//生产者和消费者先后处理的面包资源是同一个，要确保这一点，\n</span><span class=\"c1\">//可以按单例模式来设计面包类，也可以将同一个面包对象通过构造方法传递给生产者和消费者，此处使用后一种方式。\n</span><span class=\"c1\">//描述生产者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Producer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>   <span class=\"c1\">//生产者的成员：它要处理的资源\n</span><span class=\"c1\"></span>    <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//提供生产面包的方法\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">produce</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">;</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>   <span class=\"c1\">//使用Bread.class作为锁标识，使得生产者和消费者的同步代码块可以使用同一个锁\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>              <span class=\"c1\">//wait()必须在同步代码块内部，不仅因为必须持有锁才能睡眠，而且对锁这个资源的判断会出现混乱\n</span><span class=\"c1\"></span>                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"s\">&#34;面包&#34;</span><span class=\"o\">);</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----生产者------&#34;</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>             <span class=\"c1\">//标记的切换也必须在保持同步\n</span><span class=\"c1\"></span>                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notify</span><span class=\"o\">();</span>      <span class=\"c1\">//notify()也必须同步，否则锁都已经释放了，就无法做唤醒动作\n</span><span class=\"c1\"></span>                <span class=\"c1\">//ps:一次同步任务中，wait()和notify()应当只能其中一个执行，否则对方线程会混乱\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//描述消费者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Consumer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>   <span class=\"c1\">//消费者的成员：它要处理的资源\n</span><span class=\"c1\"></span>    <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//提供消费面包的方法\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">consume</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>\n                <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notify</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProduceConsume_1</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//1.创建资源对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Bread</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">();</span>\n        <span class=\"c1\">//2.创建生产者和消费者对象，将同一个面包对象传递给生产者和消费者\n</span><span class=\"c1\"></span>        <span class=\"n\">Producer</span> <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Consumer</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"c1\">//3.创建线程对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">pro_t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">pro_t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>最后的执行结果应当生产一个、消费一个，如此不断循环。如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包1</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包1</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包2</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包2</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包3</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包3</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包4</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包4</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包5</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包5</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">0</span><span class=\"o\">----</span><span class=\"n\">生产者</span><span class=\"o\">------</span><span class=\"n\">面包6</span>\n<span class=\"n\">Thread</span><span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">----</span><span class=\"n\">消费者</span><span class=\"o\">-------------</span><span class=\"n\">面包6</span>\n</code></pre></div><h2><b>4.使用Lock和Condition实现单生产单消费模式</b></h2><p>代码如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.locks.*</span><span class=\"o\">;</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Bread</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"c1\">//为生产者和消费者提供同一个锁对象以及同一个Condition对象\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Lock</span> <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ReentrantLock</span><span class=\"o\">();</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Condition</span> <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Producer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">produce</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">;</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"c1\">//使用Bread.lock来锁住资源\n</span><span class=\"c1\"></span>            <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>   \n            <span class=\"k\">try</span><span class=\"o\">{</span>\n                <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">condition</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"s\">&#34;面包&#34;</span><span class=\"o\">);</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----生产者------&#34;</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>  \n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">condition</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span> \n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Consumer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>   \n    <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">consume</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"c1\">//使用Bread.lock来锁住资源\n</span><span class=\"c1\"></span>            <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span>\n                <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">condition</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">condition</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProduceConsume_1</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//1.创建资源对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Bread</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">();</span>\n        <span class=\"c1\">//2.创建生产者和消费者对象，将同一个面包对象传递给生产者和消费者\n</span><span class=\"c1\"></span>        <span class=\"n\">Producer</span> <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Consumer</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"c1\">//3.创建线程对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">pro_t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">pro_t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><h2><b>5.多生产多消费模式(单面包)</b></h2><p>这里先说明多生产者多消费者，但同一个时刻最多只能有一个面包的模式，这个模式在实际中可能是不理想的，但为了引出后面真实的多生产多消费模式，我觉得有必要在这里解释这种模式，并且分析这种模式以及如何从单生产单消费的代码演变而来。</p><p>如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1d5970fc0c5f6e22936d375d85802fe3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"304\" class=\"content_image\" width=\"274\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;274&#39; height=&#39;304&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"304\" class=\"content_image lazy\" width=\"274\" data-actualsrc=\"https://pic4.zhimg.com/v2-1d5970fc0c5f6e22936d375d85802fe3_b.jpg\"/></figure><p>从单生产单消费到多生产多消费，因为多线程安全问题和死锁问题，所以有两个方面的问题需要考虑：</p><p>对于某一方来说，如何让多线程达到和单线程同样的生产或消费能力？也就是说，如何让多线程看上去就是单线程。多线程和单线程最大的区别在于多线程安全问题，因此，只要保证多线程执行的任务能够同步即可。</p><p>第1个问题考虑的是某一方多线程的问题，第2个问题考虑的是两方如何能和谐配合完成生产消费问题。也就是如何保证生产方和消费方一方活动的同时另一方睡眠。只需在某一方执行完同步任务时，唤醒另一方即可。</p><p>其实从单线程到多线程，就两个问题需要考虑：不同步和死锁。(1)当生产方和消费方都出现了多线程，可以将生产方的多线程看成一个线程整体、消费方的多线程也看成一个整体，这解决的是线程安全问题。(2)再将生产方整体和消费方整体两方结合起来看成多线程，来解决死锁问题，而java中解决死锁的方式就是唤醒对方或唤醒所有。</p><p>问题是如何保证某一方的多线程之间同步？以多线程执行单消费方的代码为例进行分析。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n    <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>\n        <span class=\"k\">if</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notify</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>假设消费线程1消费完一个面包后唤醒了消费线程2，并继续循环，判断if(!flag)，它将wait，于是锁被释放。假设CPU正好选中了消费线程2，那么消费线程2也将进入wait。当生产方生产了一个面包后，假设唤醒了消费线程1，它将从wait语句处继续向下消费刚生产完的面包，假设正好再次唤醒了消费线程2，当消费线程2被CPU选中后，消费线程2也将从wait语句处向下消费，消费的也是刚才生产的面包，问题再此出现了，连续唤醒的消费线程1和2消费的是同一个面包，也就是说面包被重复消费了。这又是多线程不同步问题。</p><p>说了一大段，其实将视线放大后分析就很简单了，只要某一方的2个或多个线程都因为判断b.flag而wait，那么这两个或多个线程有可能会被连续唤醒而继续向下生产或消费。这造成了多线程不同步问题。</p><p>不安全的问题就出在同一方的多个线程在连续唤醒后继续向下生产或消费。这是if语句引起的，如果能够让wait的线程在唤醒后还回头判断b.flag是否为true，就能让其决定是否继续wait还是向下生产或消费。</p><p>可以将if语句替换为while语句来满足要求。这样一来，无论某一方的多个线程是否被连续唤醒，它们都将回头判断b.flag。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n    <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>\n        <span class=\"k\">while</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notify</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>解决了第一个多线程安全的问题，但会出现死锁问题。这很容易分析，将生产方看作一个整体，将消费方也看作一个整体，当生产方线程都wait了(生产方的线程被连续唤醒时会出现该方线程全部wait)，消费方也都wait了，死锁就出现了。其实放大了看，将生产方、消费方分别看作一个线程，这两个线程组成多线程，当某一方wait后无法唤醒另一方，另一方也一定会wait，于是就死锁了。</p><p>对于双方死锁的问题，只要保证能唤醒对方，而非本方连续唤醒就能解决。使用notifyAll()或signalAll()即可，也可以通过signal()唤醒对方线程解决，见下面的第二段代码。</p><p>根据上面的分析，将单生产、单消费模式的代码改进一下，就可以变为多生产多消费单面包模式。、</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//代码段1\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Bread</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>   \n<span class=\"o\">}</span>\n<span class=\"c1\">//描述生产者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Producer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>   \n    <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">produce</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">;</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n                <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>\n                    <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span> \n                        <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"s\">&#34;面包&#34;</span><span class=\"o\">);</span>\n                    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----生产者------&#34;</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span> \n                    <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notifyAll</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//描述消费者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Consumer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">consume</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n                <span class=\"kd\">synchronized</span><span class=\"o\">(</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">){</span>\n                    <span class=\"k\">while</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                        <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">wait</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                    <span class=\"o\">}</span>\n                    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                    <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                    <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">notifyAll</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProduceConsume_5</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//1.创建资源对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Bread</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">();</span>\n        <span class=\"c1\">//2.创建生产者和消费者对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Producer</span> <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Consumer</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"c1\">//3.创建线程对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">pro_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>  <span class=\"c1\">//生产线程1\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">pro_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>  <span class=\"c1\">//生产线程2\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">con_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>  <span class=\"c1\">//消费线程1\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">con_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>  <span class=\"c1\">//消费线程2\n</span><span class=\"c1\"></span>        <span class=\"n\">pro_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">pro_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>以下是采用Lock和Conditon重构后的代码，使用的是signal()唤醒对方线程的方法。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"c1\">//代码段2\n</span><span class=\"c1\"></span><span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.locks.*</span><span class=\"o\">;</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Bread</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Lock</span> <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ReentrantLock</span><span class=\"o\">();</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Condition</span> <span class=\"n\">pro_con</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Condition</span> <span class=\"n\">con_con</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//描述生产者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Producer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">produce</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">){</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">;</span>\n        <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">count</span><span class=\"o\">++;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span>\n                <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">pro_con</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">produce</span><span class=\"o\">(</span><span class=\"s\">&#34;面包&#34;</span><span class=\"o\">);</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----生产者------&#34;</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">);</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">con_con</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span>   <span class=\"c1\">//唤醒的是consumer线程\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">//描述消费者\n</span><span class=\"c1\"></span><span class=\"kd\">class</span> <span class=\"nc\">Consumer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">Bread</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">consume</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span>\n                <span class=\"k\">while</span><span class=\"o\">(!</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span><span class=\"o\">){</span>\n                    <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">con_con</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">().</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;----消费者-------------&#34;</span><span class=\"o\">+</span><span class=\"n\">consume</span><span class=\"o\">());</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n                <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">flag</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">pro_con</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span>     <span class=\"c1\">//唤醒的是producer线程\n</span><span class=\"c1\"></span>            <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n                <span class=\"n\">Bread</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProduceConsume_6</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">//1.创建资源对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Bread</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">();</span>\n        <span class=\"c1\">//2.创建生产者和消费者对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Producer</span> <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Consumer</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"c1\">//3.创建线程对象\n</span><span class=\"c1\"></span>        <span class=\"n\">Thread</span> <span class=\"n\">pro_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">pro_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">pro_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">pro_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>关于多生产、多消费问题做个总结：</p><p>(1).解决某一方多线程不同步的方案是使用while(flag)来判断是否wait;</p><p>(2).解决双方死锁问题的方案是唤醒对方，可以使用notifyAll()，signalAll()或对方监视器的signal()方法。</p><h2><b>6.多生产多消费模式</b></h2><p>有多个生产者线程，多个消费者线程，生产者将生产的面包放进篮子(集合或数组)里，消费者从篮子里取出面包。生产者判断继续生产的依据是篮子已经满了，消费者判断继续消费的依据是篮子是否空了。此外，当消费者取出面包后，对应的位置又空了，生产者可以回头从篮子的起始位置继续生产，这可以通过重置篮子的指针来实现。</p><p>在这个模式里，除了描述生产者、消费者、面包，还需要描述篮子这个容器。假设使用数组作为容器，生产者每生产一个，生产指针向后移位，消费者每消费一个，消费指针向后移位。</p><p>代码如下：可参考API--&gt;Condition类中给出的示例代码</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kn\">import</span> <span class=\"nn\">java.util.concurrent.locks.*</span><span class=\"o\">;</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Basket</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span><span class=\"o\">[]</span> <span class=\"n\">arr</span><span class=\"o\">;</span>\n    <span class=\"c1\">//the size of basket\n</span><span class=\"c1\"></span>    <span class=\"n\">Basket</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"o\">){</span>\n        <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">[</span><span class=\"n\">size</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//the pointer of in and out\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">in_ptr</span><span class=\"o\">,</span><span class=\"n\">out_ptr</span><span class=\"o\">;</span>\n    <span class=\"c1\">//how many breads left in basket\n</span><span class=\"c1\"></span>    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Lock</span> <span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ReentrantLock</span><span class=\"o\">();</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Condition</span> <span class=\"n\">full</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Condition</span> <span class=\"n\">empty</span> <span class=\"o\">=</span> <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">newCondition</span><span class=\"o\">();</span>\n    <span class=\"c1\">//bread into basket\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">in</span><span class=\"o\">(){</span>\n        <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span>\n            <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">full</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">in_ptr</span><span class=\"o\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Bread</span><span class=\"o\">(</span><span class=\"s\">&#34;MianBao&#34;</span><span class=\"o\">,</span><span class=\"n\">Producer</span><span class=\"o\">.</span><span class=\"na\">num</span><span class=\"o\">++);</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;Put the bread: &#34;</span><span class=\"o\">+</span><span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">in_ptr</span><span class=\"o\">].</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;------into basket[&#34;</span><span class=\"o\">+</span><span class=\"n\">in_ptr</span><span class=\"o\">+</span><span class=\"s\">&#34;]&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">left</span><span class=\"o\">++;</span>\n            <span class=\"k\">if</span><span class=\"o\">(++</span><span class=\"n\">in_ptr</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span><span class=\"n\">in_ptr</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;}</span>\n            <span class=\"n\">empty</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n    <span class=\"c1\">//bread out from basket\n</span><span class=\"c1\"></span>    <span class=\"kd\">public</span> <span class=\"n\">Bread</span> <span class=\"nf\">out</span><span class=\"o\">(){</span>\n        <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">lock</span><span class=\"o\">();</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span>\n            <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">left</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">){</span>\n                <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">empty</span><span class=\"o\">.</span><span class=\"na\">await</span><span class=\"o\">();}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">Bread</span> <span class=\"n\">out_bread</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"n\">out_ptr</span><span class=\"o\">];</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;Get the bread: &#34;</span><span class=\"o\">+</span><span class=\"n\">out_bread</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">()+</span><span class=\"s\">&#34;-----------from basket[&#34;</span><span class=\"o\">+</span><span class=\"n\">out_ptr</span><span class=\"o\">+</span><span class=\"s\">&#34;]&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">left</span><span class=\"o\">--;</span>\n            <span class=\"k\">if</span><span class=\"o\">(++</span><span class=\"n\">out_ptr</span> <span class=\"o\">==</span> <span class=\"n\">arr</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">){</span><span class=\"n\">out_ptr</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;}</span>\n            <span class=\"n\">full</span><span class=\"o\">.</span><span class=\"na\">signal</span><span class=\"o\">();</span>\n            <span class=\"k\">return</span> <span class=\"n\">out_bread</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"n\">lock</span><span class=\"o\">.</span><span class=\"na\">unlock</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Bread</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"n\">Bread</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span><span class=\"kt\">int</span> <span class=\"n\">num</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"n\">num</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Producer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Basket</span> <span class=\"n\">basket</span><span class=\"o\">;</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">1</span><span class=\"o\">;</span>  <span class=\"c1\">//the first number for Bread&#39;s name\n</span><span class=\"c1\"></span>    <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">Basket</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">basket</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">basket</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Consumer</span> <span class=\"kd\">implements</span> <span class=\"n\">Runnable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Basket</span> <span class=\"n\">basket</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Bread</span> <span class=\"n\">i_get</span><span class=\"o\">;</span>\n    <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">Basket</span> <span class=\"n\">b</span><span class=\"o\">){</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">basket</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(){</span>\n        <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n            <span class=\"n\">i_get</span> <span class=\"o\">=</span> <span class=\"n\">basket</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">();</span>\n            <span class=\"k\">try</span><span class=\"o\">{</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"n\">10</span><span class=\"o\">);}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">InterruptedException</span> <span class=\"n\">i</span><span class=\"o\">){}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProduceConsume_7</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Basket</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Basket</span><span class=\"o\">(</span><span class=\"n\">20</span><span class=\"o\">);</span>  <span class=\"c1\">// the basket size = 20\n</span><span class=\"c1\"></span>        <span class=\"n\">Producer</span> <span class=\"n\">pro</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Producer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Consumer</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Consumer</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">pro_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">pro_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">pro</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t1</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t2</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">Thread</span> <span class=\"n\">con_t3</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Thread</span><span class=\"o\">(</span><span class=\"n\">con</span><span class=\"o\">);</span>\n        <span class=\"n\">pro_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">pro_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t1</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t2</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n        <span class=\"n\">con_t3</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div><p>这里涉及了消费者、生产者、面包和篮子，其中面包和篮子是多线程共同操作的资源，生产者线程生产面包放进篮子，消费者线程从篮子中取出面包。理想的代码是将生产任务和消费任务都封装在资源类中，因为面包是篮子容器的元素，所以不适合封装到面包类中，而且封装到篮子中，能更方便地操作容器。</p><p>注意，一定要将所有涉及资源操作的代码都放进锁的内部，否则会产生多线程不同步问题。例如，在Producer类中定义了生产面包的方法produce()，然后将其作为放进篮子的方法<a href=\"https://link.zhihu.com/?target=http%3A//basket.in%28%29\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">basket.in()</span><span class=\"invisible\"></span></a>的参数，即<a href=\"https://link.zhihu.com/?target=http%3A//basket.in\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">basket.in</span><span class=\"invisible\"></span></a>(producer())，这是错误的行为，因为produce()是在锁的外部执行后才传递给in()方法的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>如果觉得不错，有帮助的就点赞关注一下吧</b></p><p><b>也欢迎大家关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0b6a2bb0020c118a1215c7a74904d533_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"255\" data-rawheight=\"255\" class=\"content_image\" width=\"255\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;255&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"255\" data-rawheight=\"255\" class=\"content_image lazy\" width=\"255\" data-actualsrc=\"https://pic4.zhimg.com/v2-0b6a2bb0020c118a1215c7a74904d533_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89364688", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 8, 
            "title": "一个非科班出生Java程序员的阿里之路：JVM+分布式+Spring+数据库", 
            "content": "<p>拿到 阿里实习offer，经历了5次面试，其中4轮技术面，1轮HR面试。在这里分享一下自己的面试经验和学习总结。希望能够帮助更多的小伙伴。</p><p>我本科毕业于中南大学信管专业，真正开始学习Java是在大三下学期，研究生就读北航的移动云计算专业。刚开始也是小白，也是一步步成长起来的。需要提的一点是，你将来是需要靠这个吃饭的，所以请对找工作保持十二分的热情，而且越早准备越好。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6944a17d952e45690b95344934b658d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"769\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-6944a17d952e45690b95344934b658d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;769&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"769\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-6944a17d952e45690b95344934b658d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6944a17d952e45690b95344934b658d8_b.jpg\"/></figure><h2><b>阿里一面</b></h2><p>一面是在上午9点多接到支付宝的面试电话的，因为很期望能够尽快接到阿里的电话，所以非常兴奋。电话接通之后还是非常紧张的，毕竟是第一次这样的面试。</p><p>中间面的问题有些记不清了，下面列出了一面问到的问题：</p><p>1、自我介绍下自己，不超过3分钟（实际上我的自我介绍不到一分钟）</p><p>2、你感觉比本科阶段自己进步了多少，有哪些进步</p><p>3、研究生期间最大的进步是什么</p><p>4、你觉得你适合从事哪个方向的开发</p><p>5、synchronized与lock的区别，使用场景。看过synchronized的源码没</p><p>6、JVM自动内存管理，Minor GC与Full GC的触发机制</p><p>7、了解过JVM调优没，基本思路是什么</p><p>8、如何设计存储海量数据的存储系统</p><p>9、缓存的实现原理，设计缓存要注意</p><p>10、淘宝热门商品信息在JVM哪个内存区域</p><p>11、操作系统的页式存储</p><p>12、volatile关键字的如何保证内存可见性</p><p>13、happen-before原则</p><p>14、Lucene全文搜索的原理</p><p>15、你觉得自己适合哪方面的开发，为什么</p><p>16、想去哪里实习，杭州？</p><p><b>反问面试官的问题：</b></p><p>1、评价一下我的这次面试表现<br/>2、应该在我的技术栈中增加什么<br/>3、有机会下次面试吗</p><h3><b>一面总结</b></h3><p>一面大概面了50多分钟，从面试官口中得知他是一个老员工，比我大不了多少，总体上还是聊得蛮投机的。最后的三个问题是我问面试官的，在回答我是否还有机会下次面试的时候说：竞争很激烈，不过机会还是有的。</p><p>可以看出一面的问题不是很难，但是要得到面试官比较高的评价，还是需要一定的表达能力和对技术比较本质的认识的，如果在回答问题的时候能够做一些适当的扩展，自然会让面试官对你有不一样的评价。</p><p>我回答问题的遵循一定的步骤：先回答问题本质，在回答具体细节，最后做一些平时编程中的扩展。这样，会让面试官觉得你确实是在这个技术上面下过功夫的。</p><h2><b>阿里二面</b></h2><p>等了将近6天（还以为被刷了呢）终于在第二周的周四接到阿里面试电话，那叫一个激动啊。赶紧找了一个安静的地方，准备好后开始正式面试。二面的面试官是一个部门主管，自然还是有点小紧张的。这次面试官上来就直接问，没有一面的面试官那么好说话。</p><p>下面是面试过程中的问题：</p><p>1、自我介绍下自己，不超过3分钟（我的自我介绍仍然不超过1分钟）</p><p>2、你说你熟悉并发编程，那么你说说Java锁有哪些种类，以及区别（果然深度不一样）</p><p>3、如何保证内存可见性</p><p>4、Http请求的过程与原理</p><p>5、TCP连接的特点</p><p>6、TCP连接如何保证安全可靠的</p><p>7、为什么TCP连接需要三次握手，两次不可以吗，为什么</p><p>8、AOP的</p><p>9、动态代理与cglib实现的区别（这个，醉得很厉害）</p><p>10、那么你说说代理的实现原理呗</p><p>11、看过Spring源码没，说说Ioc容器的加载过程吧</p><p>12、了解过字节码的编译过程吗（这个还真不知道）</p><p><b>反问面试官的问题：</b></p><p>1、可以来杭州实习吗<br/>2、评价一下我的面试表现<br/>3、有机会下次面试吗<br/>4、您觉得我的技术栈应该补充什么，有哪些方面还需要提高</p><h3><b>二面总结</b></h3><p>二面面试官问的问题都比较直接，答案也是知道就知道，不知道就不知道。这些问题一部分是基础，一部分是根据你的专业技能的来提问的。</p><p>面完后面试官对我的评价是：中规中矩，有机会下次面试。虽说是中规中矩，但听到面试官说有机会下次面试就感觉这次面试应该过了。</p><p>虽说这次面试过了，但是我在思考的是为什么面试官对我的表现是中规中矩。后面我知道我的回答虽然答到了点子上，但是扩展程度不够，对一些问题的理解缺乏足够的实践经验。面试官告诉我，有时间可以去研究字节码的编译过程，以及JVM调优方面的知识（特别强调这个很重要）。</p><p>针对自己的不足，面完后又投入疯狂的看书写代码的生活中。虽然在面试中有一些回答不出来很正常，但是如果能够做到出乎面试官的意料，也是面试官对你很重要的加分项。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4a4a0f0cf2b7cf6c328d3eb396f80c03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic4.zhimg.com/v2-4a4a0f0cf2b7cf6c328d3eb396f80c03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1200&#39; height=&#39;900&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1200\" data-original=\"https://pic4.zhimg.com/v2-4a4a0f0cf2b7cf6c328d3eb396f80c03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4a4a0f0cf2b7cf6c328d3eb396f80c03_b.jpg\"/></figure><h2><b>阿里三面（总监面）</b></h2><p>三面与二面隔了5天，找了一个安静的地方开始电话面试。据说总监面会问项目多一点，所以在等待的这几天中给项目增加了几个比较肉的点。总监刚上来非常不客气，最尴尬的是总监那边老感觉有回声，因为不好意思提就忍了。</p><p>下面是三面遇到的问题：</p><p>1、自我介绍，不超过3分钟（这次好像时间更久了，也就2分钟多点）</p><p>2、说一下你对哪个项目比较熟悉</p><p>3、为什么做这个项目</p><p>4、项目采用了什么架构，数据库如何设计的</p><p>5、数据库由哪些表，为什么有这些表</p><p>6、主要有哪些核心模块，模块之间如何通信的</p><p>7、session放在哪里</p><p>8、如何保存会话状态，有哪些方式、区别如何</p><p>9、分布式session如何管理，你有哪些方案</p><p>10、学过数据结构和算法吗（当然），你说说二分搜索的过程</p><p>11、说一下快排的过程，写一下伪代码</p><p>12、了解哪设计模式，举例说说在jdk源码哪些用到了你说的设计模式</p><p>你有什么问我吗（仍然上面三个问题）</p><h3><b>三面总结</b></h3><p>本以为三面是交叉面，没想到是阿里的总监面试。由于具体的技术问题在前两轮面试中已经问过了，所以三面后不会有具体的技术问题，总结来看，对自己做过的项目一定要深入，包括使用使用到的技术原理、为什么要使用这些技术。</p><p><b>针对项目，面试官关注的无非以下几点：</b></p><ol><li>项目中某个比较重要的点是如何实现的（需要深入技术的原理）</li><li>遇到的最大困难是什么（有哪些），你怎么解决的？</li><li>如果需要扩展某个功能，如何降低系统的耦合度</li><li>如果针对某个功能进行优化，你会怎么设计和优化</li></ol><p>对于写在简历上面的项目，自己对照上面四个问题进行思考，才会在面试中游刃有余。因为任何在简历中作假的行为，面试官只要详细问你就露馅了。在听到面试官说有机会下次面试的时候，心中自然是非常高兴的。</p><h2><b>阿里四面（总监）</b></h2><p>果然，在第二天下午四点多接到了部门总监的电话，简单沟通后开始了面试。这次面试感觉是最放松的，没有什么高深的技术问题，感觉就像和朋友聊天的感觉，真的很感谢这位面试官。</p><p>下面是面试中的问到的问题：</p><p>1、来个自我介绍呗，不超过3分钟</p><p>2、介绍下你最熟悉的项目</p><p>3、项目使用了什么架构，亮点是什么</p><p>4、平时主要学习什么课程</p><p>5、你目前的研究方向是什么</p><p>6、家是哪的</p><p>7、喜欢看什么书</p><p>8、大概什么时候能来实习呢</p><h3><b>四面总结</b></h3><p>虽然这面比较轻松，也没有什么具体的技术问题，但对项目仍然是面试官关注的，后面了解到总监面除了看你的基础，主要看你的潜力（就是有没有培养的价值），这个东西看起来挺虚的，但是从你平时的学习中仍然是可以看得出来的。所以，作为一名开发人员，平时对技术的研究也是很重要的。在听到面试官说让我好好等HR通知的时候可开心了，感觉饭都吃得更香了。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-342f03a2d8e22da68cc62711de1108de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"251\" class=\"content_image\" width=\"385\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;385&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"251\" class=\"content_image lazy\" width=\"385\" data-actualsrc=\"https://pic3.zhimg.com/v2-342f03a2d8e22da68cc62711de1108de_b.jpg\"/></figure><h2><b>阿里五面（HR面）</b></h2><p>在隔了4天左右，终于接到了HR的电话，那叫一个激动啊。感觉离阿里offer已经不远了，于是振奋精神，聊得还不错。</p><p>下面是HR问我的问题：</p><p>1、自我介绍下吧</p><p>2、做了哪些项目</p><p>3、看你在问题中说你在杭州看到很多商贩使用付款二维码，你对支付宝怎么看</p><p>4、每天有那么多人使用支付宝，这些数据如果给你存储，你会怎么设计呢（不是说HR不问技术问题吗？不愧是阿里的HR）</p><p>5、为什么想来支付宝实习呢</p><p>6、你身边同学如何评价你、老师呢</p><p>7、如果与同事发生了意见的不一致，你会如何解决呢</p><h3><b>关于HR面试</b></h3><p>其实早就听说HR面试的最终的录取结果具有一票否决权，在面完前面的技术面试之后，还是很担心的。所以咨询了师兄以及网上找了阿里HR面试的资料，大概得到以下结论：</p><ol><li>诚信至上，所以在简历中不要存在任何虚假信息，企图通过虚假信息得到面试机会的后果得不偿失</li><li>HR更关注你的表达能力、与同事相处的能力以及对工作的态度</li><li>对自己的是否一个明确的职业规划（前提是首先得对自己有一个清晰的定位）</li><li>关于待遇的问题（由于面的实习岗位，所以这个没有提，但是就我而言，能力才是最重要的，能力上来了待遇自然就水涨船高）</li></ol><h3><b>关于面试的心态</b></h3><p>在自己拿到阿里offer之前，一直都在想一个问题：我到底该如何做才能离阿里更近？一年的成长与思考让我认清了这点，虽然中间也遇到过很多坑，但却真正让我对自己有了一个清晰的定位，也有了比较明确的目标。</p><p>正因为如此，我每天所学习的都给我莫大的动力，让我不断进步，并最终实现自己的目标。所以迷茫才是最可怕的，只有摆正心态，对找工作保持十二分的热情，勤奋努力，才能离目标更近一步。</p><p>但是有了目标和努力外，不一定就能实现目标，说到底还有一个运气的成分在里面，只能说你找到心仪的工作概率更大而已。遇到一个好的面试官绝对赚了。这四位阿里的面试官我感觉都挺好的，没有因为他们资历深就为难我，所以还是非常感谢这四位技术面试官的。</p><h2><b>总结</b></h2><p>由于本科是非科班出身，也仅仅是接触过Java而已，在大三的时候对自己的未来的发展道路很迷茫，不知道何去何从，感觉自己就是一个loser。那会考完研后有幸进入了金蝶实习，也就是那段时间让我认清了自己的短板，自己欠缺的是什么，那段时间也是我确立自己目标的过程。</p><p>读研后疯狂看书、写代码、写博客、做项目，每天都在对自己进行总结和反思，正是这样一个不断的自我反思与努力的过程中，我得到了真正的成长与进步。也是这段经历让我能够面对阿里技术面试官的提问应答自如，从而顺利拿到阿里的offer。</p><h2><b>读者福利</b></h2><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p><b>资料免费领取方式：点赞+点赞+点赞关注后，私信关键词【666】即可获取免费领取方式！</b></p><p><b>重要的事说三遍，点赞+点赞+点赞！</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;596&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\"/></figure><p><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89353881", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 0, 
            "title": "Maven的这三个用法你一定要会！", 
            "content": "<p>本文中将介绍maven的自定义插件(入门实战)自定义archeType模板(实战)按环境打包(实战)三个在私服中常常需用的操作。</p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><p><b>话不多说进入正文</b></p><h2><b>1、自定义archeType模板</b></h2><h3><b>1.1、什么是archeType</b></h3><p>我们在创建maven项目的时候，你会发现有这么多的apache提供的模板。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-11a474ad7e1b3596ce49020b8bcb2200_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-11a474ad7e1b3596ce49020b8bcb2200_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;531&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-11a474ad7e1b3596ce49020b8bcb2200_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-11a474ad7e1b3596ce49020b8bcb2200_b.jpg\"/></figure><p>或者使用mvn archetype:generate命令来快速创建maven项目，也会有很多个选项，让你选择模板序号。那每个模板之间有什么区别呢？</p><p>每个模板里其实就是附带不同的依赖和插件。一般在公司私服里都会有属于本公司的一套archeType模板，里面有着调试好的项目用到的依赖包和版本号。</p><p><b>1.2、创建archetype</b></p><p>假如自己已经有了一个maven项目，想给该项目创建一个archeType模板。</p><p>cd 到项目根目录下执行(pom.xml同级目录)。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0b46a1cbeedddcfe3d90de5acee3f9c4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"39\" class=\"content_image\" width=\"294\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;294&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"39\" class=\"content_image lazy\" width=\"294\" data-actualsrc=\"https://pic1.zhimg.com/v2-0b46a1cbeedddcfe3d90de5acee3f9c4_b.png\"/></figure><p>此时会在项目target下生成这些文件：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-161e032c17891b628a2ee5861ab7edc6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-161e032c17891b628a2ee5861ab7edc6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-161e032c17891b628a2ee5861ab7edc6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-161e032c17891b628a2ee5861ab7edc6_b.jpg\"/></figure><p><b>1.3、生成archetype模板</b></p><p>先 cdtarget/generated-sources/archetype/</p><p>然后执行 mvn install</p><p>执行成功后，执行crawl命令，在本地仓库的根目录生成archetype-catalog.xml骨架配置文件:</p><p>mvnarchetype:crawl</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d133f70f71d7d1c3ba6375f0df37ae14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-d133f70f71d7d1c3ba6375f0df37ae14_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;118&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-d133f70f71d7d1c3ba6375f0df37ae14_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d133f70f71d7d1c3ba6375f0df37ae14_b.jpg\"/></figure><p>来看一看它里面的内容:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-95ef84fb61b78943000814e30d4b60bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-95ef84fb61b78943000814e30d4b60bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;818&#39; height=&#39;351&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"818\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"818\" data-original=\"https://pic2.zhimg.com/v2-95ef84fb61b78943000814e30d4b60bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-95ef84fb61b78943000814e30d4b60bd_b.jpg\"/></figure><p><b>1.4、使用archetype模板</b></p><p>执行mvn archetype:generate -DarchetypeCatalog=local从本地archeType模板中创建项目。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-05b284cbd6f1878ec01979abe7c73316_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"43\" class=\"content_image\" width=\"391\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;391&#39; height=&#39;43&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"43\" class=\"content_image lazy\" width=\"391\" data-actualsrc=\"https://pic3.zhimg.com/v2-05b284cbd6f1878ec01979abe7c73316_b.png\"/></figure><p>然后会让你选择模板序号和groupId artifactId version和package信息：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cd4e69544aef24561a92e089797d76df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb\" width=\"877\" data-original=\"https://pic4.zhimg.com/v2-cd4e69544aef24561a92e089797d76df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;877&#39; height=&#39;693&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"877\" data-original=\"https://pic4.zhimg.com/v2-cd4e69544aef24561a92e089797d76df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cd4e69544aef24561a92e089797d76df_b.jpg\"/></figure><p>项目创建成功!</p><p><b>当然，也可以使用IDEA来帮我们用图形界面使用archeType模板创建项目：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-965992f50bf4ba383ff3f209053790a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-965992f50bf4ba383ff3f209053790a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;247&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-965992f50bf4ba383ff3f209053790a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-965992f50bf4ba383ff3f209053790a7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4cb81c1da9a0b551f54b5fe4e0f5f9cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-4cb81c1da9a0b551f54b5fe4e0f5f9cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;542&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-4cb81c1da9a0b551f54b5fe4e0f5f9cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4cb81c1da9a0b551f54b5fe4e0f5f9cc_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3518efe50330583f44c8416058e9ce15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-3518efe50330583f44c8416058e9ce15_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-3518efe50330583f44c8416058e9ce15_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3518efe50330583f44c8416058e9ce15_b.jpg\"/></figure><p>后面的就与创建普通项目相同了，不做演示。</p><h2><b>2、自定义插件</b></h2><p>在这里我只是做了简单的示例，更复杂的功能开发请参考mojo的API:</p><p><a href=\"https://link.zhihu.com/?target=https%3A//maven.apache.org/developers/mojo-api-specification.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">maven.apache.org/develo</span><span class=\"invisible\">pers/mojo-api-specification.html</span><span class=\"ellipsis\"></span></a></p><p><b>2.1、插件提供者</b></p><p>插件提供者项目结构：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-50c72b5a47ae59054469d0e942c390d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"324\" class=\"content_image\" width=\"375\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;375&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"375\" data-rawheight=\"324\" class=\"content_image lazy\" width=\"375\" data-actualsrc=\"https://pic2.zhimg.com/v2-50c72b5a47ae59054469d0e942c390d9_b.jpg\"/></figure><p><b>2.1.1、修改packaging</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3920fdb9058fd2f15dc8761ea6159da5_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"39\" class=\"content_image\" width=\"319\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;319&#39; height=&#39;39&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"319\" data-rawheight=\"39\" class=\"content_image lazy\" width=\"319\" data-actualsrc=\"https://pic2.zhimg.com/v2-3920fdb9058fd2f15dc8761ea6159da5_b.png\"/></figure><p><b>2.1.2、修改pom</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-65d1fd4b2ab3edb9d99e65350a23ad32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb\" width=\"436\" data-original=\"https://pic3.zhimg.com/v2-65d1fd4b2ab3edb9d99e65350a23ad32_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;436&#39; height=&#39;247&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"436\" data-rawheight=\"247\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"436\" data-original=\"https://pic3.zhimg.com/v2-65d1fd4b2ab3edb9d99e65350a23ad32_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-65d1fd4b2ab3edb9d99e65350a23ad32_b.jpg\"/></figure><p>这两个依赖是自定义插件必须的依赖，代表了它是一个Mojo工程，里面包含了一些Mojo的接口和抽象类以及注解。</p><p><b>2.1.3、coding业务逻辑</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd4ff5be6caf8a8da8128db411dc1dec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb\" width=\"617\" data-original=\"https://pic1.zhimg.com/v2-bd4ff5be6caf8a8da8128db411dc1dec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;617&#39; height=&#39;311&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"617\" data-original=\"https://pic1.zhimg.com/v2-bd4ff5be6caf8a8da8128db411dc1dec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd4ff5be6caf8a8da8128db411dc1dec_b.jpg\"/></figure><p>注意这里面的@Parameter @Mojo LifecyclePhase.PACKAGE都是org.apache.maven.plugins.annotations包下的：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d238b17d6845d1612d261ab5a32edf6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-d238b17d6845d1612d261ab5a32edf6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;82&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"82\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-d238b17d6845d1612d261ab5a32edf6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d238b17d6845d1612d261ab5a32edf6d_b.jpg\"/></figure><p>@Parameter注解会获取消费者配置文件中的变量值并赋值。</p><p>defaultPhase =LifecyclePhase.PACKAGE声明了该插件触发的生命周期。</p><p>@Mojo定义插件的goal名字。</p><p><b>2.1.4、clean and install</b></p><p>执行mvn clean install，在target目录下会生成这样一个jar包，这就是插件包。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2c4fe847628b007c44d9a849b2d8aa65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-2c4fe847628b007c44d9a849b2d8aa65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic2.zhimg.com/v2-2c4fe847628b007c44d9a849b2d8aa65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2c4fe847628b007c44d9a849b2d8aa65_b.jpg\"/></figure><p><b>2.2、插件消费者</b></p><p>插件消费者 : 项目结构</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cd61d5b1ca3a55578af498f96697d569_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"242\" data-rawheight=\"231\" class=\"content_image\" width=\"242\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;242&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"242\" data-rawheight=\"231\" class=\"content_image lazy\" width=\"242\" data-actualsrc=\"https://pic2.zhimg.com/v2-cd61d5b1ca3a55578af498f96697d569_b.jpg\"/></figure><p><b>2.2.1、修改pom</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-09137c9f4d1d40309ee67fc3571ba3ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"806\" data-rawheight=\"856\" class=\"origin_image zh-lightbox-thumb\" width=\"806\" data-original=\"https://pic3.zhimg.com/v2-09137c9f4d1d40309ee67fc3571ba3ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;806&#39; height=&#39;856&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"806\" data-rawheight=\"856\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"806\" data-original=\"https://pic3.zhimg.com/v2-09137c9f4d1d40309ee67fc3571ba3ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-09137c9f4d1d40309ee67fc3571ba3ca_b.jpg\"/></figure><p>如果不加,我们只能通过执行插件或者执行命令的方式来执行，如果想让它在执行package的时候自动执行，就需要设置该属性,可以把它理解成hook。</p><p><b>2.2.2、如何传递参数给plugin</b></p><p>在插件提供者中，有个MyMojo的类，有这样一段代码:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8b01ca13d95c7e9520059453b4073773_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"131\" class=\"content_image\" width=\"316\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;316&#39; height=&#39;131&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"131\" class=\"content_image lazy\" width=\"316\" data-actualsrc=\"https://pic4.zhimg.com/v2-8b01ca13d95c7e9520059453b4073773_b.jpg\"/></figure><p>它和你用过的spring注解一样，也是用来以注解的形式获取参数的值。</p><p>相对应的，在插件消费者的配置中我们就应该相应的给出参数的定义:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9ade9964710bacf77c123c0f5a037f58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"172\" class=\"content_image\" width=\"403\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;403&#39; height=&#39;172&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"172\" class=\"content_image lazy\" width=\"403\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ade9964710bacf77c123c0f5a037f58_b.jpg\"/></figure><p>上面的配置与变量名一一对应即可。这时候你会发现maven插件中自动会添加一个plugins选项:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f415f93b039c889c927134b1f066e680_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-f415f93b039c889c927134b1f066e680_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic1.zhimg.com/v2-f415f93b039c889c927134b1f066e680_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f415f93b039c889c927134b1f066e680_b.jpg\"/></figure><p>执行该插件：mvnmyprovide:fantj 或者直接点击：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-32a4942cd9518bad7967efeb6a390df2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"690\" data-original=\"https://pic3.zhimg.com/v2-32a4942cd9518bad7967efeb6a390df2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;690&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"690\" data-original=\"https://pic3.zhimg.com/v2-32a4942cd9518bad7967efeb6a390df2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-32a4942cd9518bad7967efeb6a390df2_b.jpg\"/></figure><h2><b>3、Profile按环境打包</b></h2><p>在日常开发中，我们项目的开发环境和生产环境以及测试环境往往是不同的，比如:数据库的url等。在项目上生产环境时，就需要修改这些参数，给开发造成不便。为了解决该问题，Maven 2.0引入了构建配置文件的概念(build profiles)。</p><p><b>它能干什么呢?</b></p><p>假如你的生产环境和开发环境所需环境配置不同,生产环境配置文件是pro.properties,开发环境配置文件是dev.properties,那么用maven profile ，你可以实现打包开发环境jar包的时候只将dev.properties打包并使用，生产环境打包同理。</p><p><b>在哪里声明呢?</b></p><p>它可以在每个项目的pom.xml文件中声明，也可以在maven的用户setting.xml下声明，也可以在maven全局环境下设置setting.xml，详情如下。</p><p><b>1.Per Project</b><br/>Defined in the POM itself (pom.xml).</p><p><b>2.Per User</b><br/>Defined in the Maven-settings(%USER_HOME%/.m2/settings.xml)</p><p><b>3.Global</b><br/>Defined in the globalMaven-settings (${maven.home}/conf/settings.xml)</p><p><b>4.Profile descriptor</b><br/>不支持3.0,详情请看：</p><p><a href=\"https://link.zhihu.com/?target=https%3A//cwiki.apache.org/MAVEN/maven-3x-compatibility-notes.html%23Maven3.xCompatibilityNotes-profiles.xml\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cwiki.apache.org/MAVEN/</span><span class=\"invisible\">maven-3x-compatibility-notes.html#Maven3.xCompatibilityNotes-profiles.xml</span><span class=\"ellipsis\"></span></a></p><p>虽然有这么多define的方式，但是我们一般使用的是第一种defined in the pom，因为不见得每个项目的生产环境都一模一样，当然这个也是因个人情况而异。</p><h2><b>实战</b></h2><p><b>3.1、项目结构</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-33ef2bcf2ee445a2229fca9dfb59cc48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"391\" class=\"content_image\" width=\"314\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;314&#39; height=&#39;391&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"391\" class=\"content_image lazy\" width=\"314\" data-actualsrc=\"https://pic1.zhimg.com/v2-33ef2bcf2ee445a2229fca9dfb59cc48_b.jpg\"/></figure><p><b>3.2、pom.xml</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6bd50506ca0951deae94de261fc6e539_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic2.zhimg.com/v2-6bd50506ca0951deae94de261fc6e539_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;858&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic2.zhimg.com/v2-6bd50506ca0951deae94de261fc6e539_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6bd50506ca0951deae94de261fc6e539_b.jpg\"/></figure><p><b>3.3、三个application.properties</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7135980abc4213ba416e18d35ad3c81d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"468\" class=\"content_image\" width=\"338\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;338&#39; height=&#39;468&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"338\" data-rawheight=\"468\" class=\"content_image lazy\" width=\"338\" data-actualsrc=\"https://pic2.zhimg.com/v2-7135980abc4213ba416e18d35ad3c81d_b.jpg\"/></figure><p><b>3.4、打包</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f28fafe19ffaecb5e75f3b5535151afd_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"43\" class=\"content_image\" width=\"305\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;305&#39; height=&#39;43&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"305\" data-rawheight=\"43\" class=\"content_image lazy\" width=\"305\" data-actualsrc=\"https://pic2.zhimg.com/v2-f28fafe19ffaecb5e75f3b5535151afd_b.png\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-56aa032f53ca250984a29b74da4f724e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-56aa032f53ca250984a29b74da4f724e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic3.zhimg.com/v2-56aa032f53ca250984a29b74da4f724e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-56aa032f53ca250984a29b74da4f724e_b.jpg\"/></figure><p>可以看到只将pro/application.properties进行了编译。</p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Maven", 
                    "tagLink": "https://api.zhihu.com/topics/19629084"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89264311", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 8, 
            "title": "三年经验Java女程序员横扫国内大厂：阿里，美团，京东已拿offer", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-367672e98d0a2efbc3d4d59809797d30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"218\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;218&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"218\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic1.zhimg.com/v2-367672e98d0a2efbc3d4d59809797d30_b.jpg\"/></figure><h2><b>自序</b></h2><p>这次面试的公司有一点点多，主要是因为毕业后前两份工作找的都很草率，这次换工作就想着，emm，毕业三年了，该找个工作好好沉淀几年了。</p><p>先说下这次面试的结果吧：<br/><b>到HR面的：</b><br/>阿里、美团、滴滴、金山云、每日一淘、火币、宜信、旺店通、黄包车、linkedMe</p><p><b>其他：</b><br/>小米（四轮技术面，大概4个小时的样子，大数据部门，不知道是不是四面的负责人嫌弃我木有大数据的经验，我确实木有哈）</p><p>京东（电话面试一轮+现场两轮，面试完快中午一点了，说是让我先回家，后面让hr 电话联系我，一周后一面的面试官问我还考虑京东不，如果考虑的话，就进行后续，对不起，我已经不考虑了，希望以后有机会再合作，所以没有后续了）</p><p>头条（二面完gg，我的算法确实菜哈，然后leetcode又只刷过10道题，去面头条，确实有些作死的节奏，实在是对不起帮我内推的石冲大佬）</p><p>爱奇艺（电话面试一轮+现场两轮，到技术终面了，这个怪我，面试官也一直很忙，然后我俩就互相一直改面试时间，最后定的那个面试时间我还迟到了一个小时，还是时间到了才给hr 打电话说一个小时后才能到，虽然我知道这样做非常不好，但是当时情况比较复杂，自己根本忙不过来，一直在面试，也没有办法中途给hr 打电话说一下。一天面两家，两家离的还比较远的小伙伴吸取一下教训。我本来是想约第二天下午的，hr 就想当天，结果就晚上7:40开始二面了，面到9点，然后木有然后了）</p><p>有赞（电话面试一轮+现场两轮，到技术终面了，面试官“base考虑杭州吗”，我“啊，你们北京不是也需要人吗，最好北京哈，杭州暂时不考虑”，然后木有然后了，哈哈。后面面阿里的时候我就自己打脸了，面试官“base杭州考虑吗”，我“面过阿里我就去杭州，面不过我就在北京”。爱，就要大胆的说出来。）</p><p>这次面试基本都是三~四轮技术面，很多都是每一轮都有至少一道算法题，所以准备换工作的小伙伴，算法可以搞起来了哈，leetcode easy和medium 难度的就ok了，当然如果你也要刷hard 难度的题，是更好的哈。我作为一名只刷过10道leetcode的渣渣，表示以后要好好刷leetcode了，拯救一下自己的智商。准备面头条的小伙伴，那就medium 和 hard难度的搞起来吧。你们加油，我就不想了。</p><p>很多小伙伴怀疑我是985、211或者研究生毕业，都不是的哈，渣本（但是我还是很爱我的母校的），16年毕业，我一个妹子都可以做到的，你们更可以做到，所以相信自己，去努力就好了。这篇文章主要是记录一下自己的面试经历，分享一些小伙伴们都很关注的面试题，然后文章末尾我会推荐一些书，完全免费推荐的哈，我个人感觉不错的，可以提升技术的，当然面试中也会对你有特别大的帮助。阿里的面试题不会分享哈，这次主要分享tmdj、以及其他公司的一些面试题，把我分享的这些面试题都掌握了，对想去面阿里的小伙伴的帮助也是非常非常大的。当然，<b>面试题只是起一个查漏补缺的作用，并不是让你直接去整理答案，去背答案的哈。一个合格的面试官，是会针对你的简历去问的，即每个人的面试题都是不一样的。</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><h2><b>头条</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e7ce3331060b64c0ae302bbda6755ef6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-e7ce3331060b64c0ae302bbda6755ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;650&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-e7ce3331060b64c0ae302bbda6755ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e7ce3331060b64c0ae302bbda6755ef6_b.jpg\"/></figure><p><b>二轮技术面，17：00~20：25，晚饭时间hr 小姐姐还特贴心的带我体验了一把传说中的头条餐厅，不超过半小时</b></p><p>1、聊项目，画项目架构图，画一个用户从发起请求 到接收到响应 中间经过哪些服务 每个服务做什么事情 的流程图<br/>2、讲项目中的难点、挑战，你是如何解决的<br/>3、redis 中有几种类型 &amp; 各自底层怎么实现的 &amp; 项目中哪个地方用了什么类型，怎么使用的<br/>4、redis如何实现分布式锁，zk如何实现分布式锁，两者的区别。如果service还没执行完，分布式锁在redis中已经过期了，怎么解决这种问题<br/>5、synchronized底层实现，加在方法上和加在同步代码块中编译后的区别、类锁、对象锁<br/>6、锁升级的过程<br/>7、java运行时区域 及 各个区域的作用、对GC的了解、java内存模型 及 为什么要这么设计<br/>8、对索引的理解，组合索引，索引的最佳实践<br/>9、countDownLatch用过没有，在项目中如何使用的，对aqs 的了解<br/>10、写生产者消费者问题，考虑高并发的情况，可以使用Java 类库，白纸写代码<br/>11、如下图所示</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7de04e7e38d5d9c4b4aaf56f6fa77f49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"377\" data-rawheight=\"364\" class=\"content_image\" width=\"377\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;377&#39; height=&#39;364&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"377\" data-rawheight=\"364\" class=\"content_image lazy\" width=\"377\" data-actualsrc=\"https://pic2.zhimg.com/v2-7de04e7e38d5d9c4b4aaf56f6fa77f49_b.jpg\"/></figure><p>12、设计一个发号器，考虑集群和高并发的情况，要求发号器生成的id是递增趋势，通过id可以区分出来是今天生成的id还是昨天生成的id，但是生成的id中不能直接带有日期，要具有一定的混淆功能，白纸写代码<br/>13、一个二位数组，每个元素都可以往上下左右四个方向走，寻找最长递增路径。如下图所示，最长递增径即红色字体路径。白纸写代码。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d6388384b836b8f33089c43296c58cfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"143\" class=\"content_image\" width=\"291\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;291&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"143\" class=\"content_image lazy\" width=\"291\" data-actualsrc=\"https://pic3.zhimg.com/v2-d6388384b836b8f33089c43296c58cfe_b.jpg\"/></figure><h2><b>美团</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b05b00bd552cb8b3d8e7c16e16246eb6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic3.zhimg.com/v2-b05b00bd552cb8b3d8e7c16e16246eb6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;497&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic3.zhimg.com/v2-b05b00bd552cb8b3d8e7c16e16246eb6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b05b00bd552cb8b3d8e7c16e16246eb6_b.jpg\"/></figure><p><b>电话面试（40分钟）+现场三轮技术面试（3.5小时）+hrbp面试（30分钟）</b></p><p>1、数据库和缓存的一致性问题。先更新数据库，再更新缓存，若更新完数据库了，还没有更新缓存，此时有请求过来了，访问到了缓存中的数据，怎么办？<br/>2、聚簇索引/非聚簇索引，mysql索引底层实现，为什么不用B-tree，为什么不用hash，叶子结点存放的是数据还是指向数据的内存地址，使用索引需要注意的几个地方<br/>3、mysql默认的事务隔离级别，mvcc，rr怎么实现的，rc如何实现的<br/>4、mysql间隙锁有没有了解，死锁有没有了解，写一段会造成死锁的sql语句，死锁发生了如何解决，mysql有没有提供什么机制去解决死锁<br/>5、谈下对GC的了解，何为垃圾，有哪些GC算法，有哪些垃圾回收器，cms和g1的区别，emm，还有一个直击灵魂的问题，看过cms的源码吗，笑cry<br/>6、有没有排查过线上oom的问题，如何排查的<br/>7、有没有使用过jvm自带的工具，如何使用的<br/>8、假设有下图所示的一个full gc 的图，纵向是内存使用情况，横向是时间，你如何排查这个full gc的问题，怎么去解决你说出来的这些问题</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e8bcb86308a907baebeb02ede659b35f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic4.zhimg.com/v2-e8bcb86308a907baebeb02ede659b35f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;359&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic4.zhimg.com/v2-e8bcb86308a907baebeb02ede659b35f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e8bcb86308a907baebeb02ede659b35f_b.jpg\"/></figure><p>9、说说对java中集合类的理解，项目中用过哪些，哪个地方用的，如何使用的<br/>10、对CAS的理解，CAS带来的问题，如何解决这些问题<br/>11、volatile底层、synchronized底层、锁升级的过程、MESI<br/>12、ehcache支持哪些缓存<br/>13、juc有研究没有，讲一讲<br/>14、聊项目，画项目架构图，画一个用户从发起请求 到接收到响应 中间经过哪些服务 每个服务做什么事情 的流程图<br/>15、讲项目中的难点、挑战，如何解决的，项目这一块会问的特别细<br/>16、如何保证RocketMQ 消息的顺序性，如何解决重复消费问题<br/>17、项目中如何保证接口的幂等操作<br/>18、讲一讲对redis 的了解，项目中如何使用的，哪个地方使用的，为什么要使用<br/>19、哨兵机制、redis两种备份方式的区别，项目中用的哪种，为什么<br/>20、讲一讲对分布式锁的了解<br/>21、项目中系统监控怎么做的<br/>22、如何理解Spring中的AOP 和 IOC，以及DI，读过Spring源码没有<br/>23、读过MyBatis源码没有<br/>24、说一个你了解最多的框架，说出你的理解<br/>25、如何理解分布式事务，为什么会出现这个问题，如何去解决，了解哪些分布式事务中间件<br/>26、聊一聊对分库分表的理解<br/>27、hystrix功能 &amp; 在项目中怎么使用的 &amp; hystrix 怎么检测断路器是否要开启/关闭 &amp; hystrix 实现原理，除hystrix之外的其他熔断限流中间件有了解没有，了解多少说多少<br/>28、dubbo有了解没有<br/>29、怎么理解java 中和 mysql 中的乐观锁、悲观锁<br/>30、一致性hash</p><h2><b>滴滴</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ba93f21dc7298ea2078c49ba789b6dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-ba93f21dc7298ea2078c49ba789b6dfc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;525&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-ba93f21dc7298ea2078c49ba789b6dfc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ba93f21dc7298ea2078c49ba789b6dfc_b.jpg\"/></figure><p><b>现场三轮技术面试+一轮hrbp面（4小时5分钟）</b></p><p>1、聊项目，画项目架构图，画一个用户从发起请求 到接收到响应 中间经过哪些服务 每个服务做什么事情 的流程图，讲数据库设计<br/>2、处理过线上oom问题没有，如何处理的<br/>3、遇到过线上服务器cpu飙高的情况没有，如何处理的<br/>4、线上有没有遇到其他问题，如何处理的<br/>5、对线程池的理解，项目中哪个地方使用了，如何使用的，用的Excutor框架中的哪个实现类，为什么用这个<br/>6、对CAS的理解，CAS带来的问题，如何解决这些问题<br/>7、volatile底层、synchronized底层、锁升级的过程、MESI<br/>8、对mysql索引的理解、对组合索引的理解、索引的最佳实践<br/>9、分布式锁的实现、对比redis分布式锁 &amp; zk分布式锁<br/>10、唯一id如何实现的，snowflake实现原理，snowflake有哪些问题，如何避免根据订单号可以推算出今天的订单量<br/>11、如果线上一个功能是用栈结构实现的，使用过程中要注意哪些问题，为什么<br/>12、怎么理解线程安全<br/>13、怎么理解接口幂等，项目中如何保证的接口幂等<br/>14、怎么理解微服务，服务如何划分，可以从哪几个方面去划分，为什么这样划分，微服务带来了哪些好处，哪些坏处，如何看待这个问题<br/>15、如何理解网关，网关带来的好处和坏处，如何解决<br/>16、hystrix功能 &amp; 在项目中怎么使用的 &amp; hystrix 怎么检测断路器是否要开启/关闭 &amp; hystrix 实现原理/<br/>17、怎么理解命令模式和观察者模式，手写一个观察者模式或者命令模式的代码，策略模式也行<br/>18、掌握哪些设计模式，常用哪些，项目中如何使用的，为什么用这个，不用那个，手写一个线程安全的单例模式<br/>19、如何设计一个秒杀系统<br/>20、如果我现在就是要实现每秒10w请求，不能熔断限流，如何去设计<br/>21、假设现在双十一零点，大量下单请求，如何对这些订单进行分库分表，为什么<br/>22、服务A调用服务B中一个接口，服务B调用服务C中一个接口，如何实现若服务B响应服务A成功，则服务C一定响应服务B成功，需要考虑系统性能问题<br/>23、递归使用中有什么需要注意的地方，递归写法一般可以用什么去替换<br/>24、有两个表，table a，table b，写sql查询出仅在table a中的数据、仅在table b中的数据、既在table a 又在table b 中的数据<br/>25、spring 源码有了解没有<br/>26、myBatis源码有了解没有<br/>27、mysql事务隔离级别、mvcc</p><p><b>我：</b>既然现在很多业务线都是Go了，有没有考虑把剩余的业务线也转成Go呀？<br/><b>面试官：</b>我认为，语言只是工具，语言不应该是影响开发的一个因素吧。<br/>面试官说的很有道理。</p><h2><b>京东</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8ae5153f8bf49db03dcfbe1bc645eb10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-8ae5153f8bf49db03dcfbe1bc645eb10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-8ae5153f8bf49db03dcfbe1bc645eb10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8ae5153f8bf49db03dcfbe1bc645eb10_b.jpg\"/></figure><p><b>电话面试（30分钟）+现场两轮技术面试（1小时40分钟），面完12:50，说让我先回来，后续hr 电话和我联系，一周后一面的面试官问我还考虑京东吗，对不起，已经不考虑了，希望以后有机会再合作</b></p><p>1、一个final修饰的属性，定义的时候没有初始化，在无参构造函数中初始化，可以吗，为什么<br/>2、说说对java中集合类的理解，项目中用过哪些，哪个地方用的，如何使用的，为什么不用其他的集合类<br/>3、hashMap，concurrentHashMap底层实现，<br/>4、list删除是怎么实现的，遍历的时候可以删除吗，为什么<br/>5、redis中有哪些数据结构，了解过其底层怎么实现的吗，和java中相似的数据结构的对比<br/>6、redis是单线程的还是多线程的，为什么这么快<br/>7、redis hash中某个key过大，变为String类型的大key，怎么处理，使用中如何避免出现这种问题<br/>8、设计模式在项目中哪个地方用到了，怎么使用的，能不能画一个你熟悉的设计模式的UML图，手写单例模式，手写静态内部类实现的单例模式<br/>9、讲一讲mysql索引，实际工作中，哪些场景用了b+tree索引，哪些场景用了hash索引<br/>10、explain 可以看到哪些信息，什么信息说明什么，explain的结果列讲一下<br/>11、Spring源码看过没有，会多少讲多少<br/>12、MyBatis源码看过没有，会多少讲多少<br/>13、cas，cas的缺点，如何解决<br/>14、aqs，countDownLatch如何实现<br/>15、线程池如何实现，核心线程数和最大线程数设置成多少，为什么这么设置，项目中哪个地方使用了线程池，使用时需要注意什么<br/>16、mysql事务隔离级别，幻读，脏读，项目中用什么事务隔离级别，为什么<br/>17、volatile底层原理、synchronized实现机制，<br/>18、对XA、TCC的理解，了解哪些分布式事务框架，有什么缺点<br/>19、feign 和 dubbo，了解多少说多少<br/>20、eureka 和 zookeeper，了解多少说多少<br/>21、hystrix 和 sentinel，了解多少说多少<br/>22、Spring cloud alibaba，了解多少说多少<br/>23、对分库分表、读写分离的了解，了解多少说多少<br/>24、画一下java 线程几个状态 及 状态之间互相转换的图<br/>25、聊项目，画项目架构图，画一个用户从发起请求 到接收到响应 中间经过哪些服务 每个服务做什么事情 的流程图，讲数据库设计 具体到部分表中有哪些字段<br/>26、我们部门体量比较大，可能需要加班，到凌晨两三点的那种，也可能通宵，通宵是大促期间，你能接受吗<br/>27、也会加班到十点，这个不是大促期间，但也不是每天，非常态情况，你能接受吗，你在哪里住，过来要多久，有男朋友吗</p><p>一起去吃午饭吧，我们这边有员工餐厅，不了不了，我回家吃饭吧</p><p><b>下面是面试TMDJ之外的公司中遇到的一些问题哈，TMDJ中已经被问到的就不再重复写了，只写一下个别公司中我还记得的面试题</b></p><h2><b>others</b></h2><p><b>火币：</b><br/>四轮技术面试+一轮hr 面试（4小时），后来hr 小姐姐和我说，她们正常是两轮技术面试，因为技术面试完面试官一直没有找到她，然后，emm，就又来了一轮技术面试，又来了一轮技术面试，笑cry</p><p>1、kafka 如何保证消息顺序消费、在consumer group 中新增一个consumer 会提高消费消息的速度吗、那如果我想提高消息消费的速度，我要怎么办<br/>2、redis几种数据结构 及 底层，项目中如何使用的redis<br/>3、哨兵机制、选举算法<br/>4、一致性hash<br/>5、redis是单线程的还是多线程的，为什么速度这么快<br/>6、多路复用的几种方式以及区别<br/>7、对线程池的理解，在项目中如何使用的，多个线程之间如何共享数据，多个进程之间如何共享数据<br/>8、hashMap、concurrentHashMap的区别 及 底层实现、hashMap和hashTable 的区别<br/>9、什么是红黑树，什么是b-tree，为什么hashMap中用红黑树不用其他树<br/>10、对mysql 索引的理解，为什么mysql索引中用b+tree，不用b-tree 或者其他树，为什么不用hash 索引<br/>11、数据库和缓存的双写一致性问题</p><p><b>每日一淘：</b><br/>三轮技术面试+一轮hrbp 面</p><p>1、用过哪些Object类的方法，如何使用的<br/>2、java如何实现序列化的，Serialization底层如何实现的<br/>3、countDownLatch如何实现的<br/>4、项目中监控报警机制如何做的，说说你的了解<br/>5、线上服务器cpu飙高，如何处理这个问题<br/>6、服务A调用服务B，用户请求服务A，发现返回较慢，如何定位这个问题<br/>7、TIME_WAIT是什么状态还记得吗，什么情况下网络会出现这个状态</p><p><b>linkedMe：</b><br/>二轮技术面试+一轮hr面试</p><p>1、内核态 和 用户态、cas 和 sout 哪个用到了内核态和用户态的切换<br/>2、哪些典型的应用用的是udp<br/>3、线程池有了解吗，项目中如何使用的<br/>4、计算密集型/IO密集型 任务 分别如何设置线程池的核心线程数和最大线程数，为什么这么设置<br/>5、假如我下午5点要和5个人一起开会，但是这5个人现在都出去了，不在公司，但是今天会回来，问，我如何开这场会，用java 并发方面的知识回答</p><p><b>旺店通：</b><br/>5小时+，中午我还木有吃饭，下午面试时候真是饿的要死，而且下午脑细胞死了好多好多</p><p>1、先机试（50分钟时间，三选二，不联网，明确告知机试不通过没有后续）<br/>2、一面给面试官讲一下自己机试题的思路，面试官运行看结果，然后问了几个问题（什么是B-tree，什么是B+tree之类的）<br/>3、笔试（10道选择题+2道数据库+2道算法题，30分钟）<br/>4、二面给面试官讲自己的机试题的思路，面试官运行看结果，然后给面试官讲笔试题，一道一道讲为什么这么写，过程中面试官可能会改题，然后问你怎么解决修改后的题，然后又问了几个题<br/>5、三面开始正常面试，但不是看简历问，一部分是简历上的，一部分是看面试官心情<br/>6、hr面</p><p>当场给了offer，但是啊，从他家出来的时候的想法就是，早知道下午这个样子，不如中午吃个午饭，回家好好睡一觉<br/>想去他家的小伙伴就好好写代码吧，多看java 中一些方法的实现，因为机试的题目都要求不能用java 中提供的方法，要自己写，然后还要好好准备算法</p><h2><b>算法题</b></h2><p>1、[1,1,2,2,3,4,4,5,5,5] 找出不重复的元素（黄包车）<br/>2、反转链表，要求时间复杂度O(N)，空间复杂度O(1) （火币）<br/>3、非递归实现斐波那契数列 （爱奇艺）<br/>4、这一周股市价格为[2,6,1,4,8]，求哪一天买入哪一天卖出，可获得最大收益，最大收益为多少 （爱奇艺）<br/>5、按照箭头方向查找二叉树 （金山云）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a2c8658b2ac5dc647e7b4aa650de9529_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"574\" data-original=\"https://pic2.zhimg.com/v2-a2c8658b2ac5dc647e7b4aa650de9529_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;574&#39; height=&#39;528&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"574\" data-original=\"https://pic2.zhimg.com/v2-a2c8658b2ac5dc647e7b4aa650de9529_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a2c8658b2ac5dc647e7b4aa650de9529_b.jpg\"/></figure><p>6、表a b c之间用id关联，求阴影部分的数据 （金山云）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7747f26080776196272de7655445be07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"624\" data-original=\"https://pic4.zhimg.com/v2-7747f26080776196272de7655445be07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;624&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"624\" data-original=\"https://pic4.zhimg.com/v2-7747f26080776196272de7655445be07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7747f26080776196272de7655445be07_b.jpg\"/></figure><p><br/>7、一个整形无序数组，里面三个数只和等于一个目标值，求这三个数 （小米）<br/>8、链表问题 （小米）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-55f45405a75bb95198af8d965836f630_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"263\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-55f45405a75bb95198af8d965836f630_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;263&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"263\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-55f45405a75bb95198af8d965836f630_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-55f45405a75bb95198af8d965836f630_b.jpg\"/></figure><p>9、扑克牌问题 （小米）<br/>有十张扑克牌，从上面开始抽，抽出一张放桌子上，然后再抽出一张放扑克牌的最下面，这样循环往复的操作，直到手里的牌都没有了。这时，桌子上牌的顺序正好是1 2 3 4 5 6 7 8 9 10。要求写代码求出原顺序<br/>10、手写大顶堆 （linkedMe）<br/>11、手写LRU 算法 （火币）<br/>12、字符串相加 （滴滴）<br/>两个数字类型的字符串，直接转int或者double肯定都放不下，然后求这两个数的和，返回值还是字符串，15分钟时间，要求无bug<br/>13、寻找目标值位置 （滴滴）<br/>有一个二维数组，数组横向有序，纵向有序，求目标值的位置，10分钟时间<br/>14、求字符串“efabcbaefehiabcba”中最长的回文数，不去重（美团）<br/>15、反转int类型的值x，不要借用String，只用int 即可。&amp;&amp; 针对该程序，写出其应有的测试用例 （美团）<br/>16、top K 问题（每日一淘）</p><h2><b>HR面</b></h2><p>真诚待人，以真心换真心，不要弄虚作假，HR 问什么问题，如实回答即可。在回拒offer 时候，也请好好说话。</p><h2><b>tips</b></h2><p>其实面试过程中，你是可以感受到哪些面试官是真的很欣赏你，哪些只是想找一个可以干活的人的，最后一定要去一个欣赏你的面试官那里，因为待遇真的会不一样（假装我体验过只是想找我干活的leader哈，很感激以前遇到的每一位leader 都很欣赏我，给我我想要的空间去做自己想做的事情，真的非常感谢你们）。</p><p><b>嗯，免费安利环节到了，学不了吃亏学不了上当哈</b></p><blockquote>《深入理解Java虚拟机》《Java并发编程的艺术》《Java并发编程实战》《MySQL技术内幕 InnoDB存储引擎》《Redis设计与实现》《JVM G1源码分析和调优》《重新定义Spring Cloud实战》《Redis深度历险：核心原理与应用实践》《Spring技术内幕》《myBatis技术内幕》《深入拆解Java虚拟机》等等等等</blockquote><h2><b>读者福利</b></h2><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p><b>资料免费领取方式：点赞+点赞+点赞关注后，私信关键词【666】即可获取免费领取方式！</b></p><p><b>重要的事说三遍，点赞+点赞+点赞！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;596&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\"/></figure><p><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "程序员面试", 
                    "tagLink": "https://api.zhihu.com/topics/19579066"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": [
                {
                    "userName": "咸鱼还是奋斗", 
                    "userLink": "https://www.zhihu.com/people/51a32b656073cfb181b028b4953e6b23", 
                    "content": "<p>厉害</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89150022", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 9, 
            "title": "“金九银十”已过，总结我的天猫、蚂蚁、头条面试经历（Java岗）", 
            "content": "<p>跳槽时时刻刻都在发生，但是我建议大家跳槽之前，先想清楚为什么要跳槽。切不可跟风，看到同事一个个都走了，自己也盲目的开始面试起来（期间也没有准备充分），到底是因为技术原因（影响自己的发展，偏移自己规划的轨迹），还是钱给少了，不受重视。</p><p>准备不充分的面试，完全是浪费时间，更是对自己的不负责（如果title很高，当我没说）。</p><p>今天给大家分享我在这次“金九银十”期间跳槽面试的几个大厂经历，总结了这次跳槽中整理的Java面试合集，其中大部分都是这次面试过程中的面试题，可以对照这查漏补缺。</p><h2><b>天猫</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-72963af38e9225d88a259488dcddee09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"694\" class=\"origin_image zh-lightbox-thumb\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-72963af38e9225d88a259488dcddee09_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;807&#39; height=&#39;694&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"694\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"807\" data-original=\"https://pic2.zhimg.com/v2-72963af38e9225d88a259488dcddee09_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-72963af38e9225d88a259488dcddee09_b.jpg\"/></figure><h2><b>天猫一面（55分钟）</b></h2><ol><li>自我介绍</li><li>HashMap实现原理，ConcurrentHashMap实现原理</li><li>红黑树，为什么允许局部不平衡</li><li>TCP，UDP区别，为什么可靠和不可靠</li><li>一次HTTP请求的全过程，包括域名解析、定位主机等</li><li>TCP三次握手</li><li>MySQL事务是什么？四大特性，四大隔离级别</li><li>ConcurrentHashMap和Hashtable区别</li><li>spring IOC和AOP，以及各有什么优点</li><li>有哪几种常用的线程池</li><li>什么情况下使用Runnable和Thread创建线程，Runnable和Callable的区别</li><li>线程方法中的异常如何处理，副线程可以捕获到吗</li><li>synchronized和锁的区别，什么情况下使用synchronized和ReentrantLock</li><li>JVM的对象分配在哪个区，Class对象分配在哪个区</li></ol><h3><b>天猫二面（50分钟）</b></h3><ol><li>常用的设计模式介绍：单例模式、装饰者模式等</li><li>Java会出现内存溢出吗？什么情况下会出现？</li><li>双亲委派模型，为什么这样做？</li><li>对象什么情况下进入老年代？</li><li>快速排序说一下过程</li><li>AOP实现原理：动态代理</li><li>BIO、NIO（如何实现的）、AIO</li><li>消息中间件有哪些？他们之间的优劣势？</li><li>Redis，持久化框架</li><li>栈和队列</li><li>垃圾回收算法</li><li>MySQL的索引</li><li>Tomcat 类加载器</li><li>OOM内存泄漏，什么情况下会出现，如何排查</li></ol><h3><b>天猫三面（40分钟）</b></h3><ol><li>介绍你实践的性能优化案例，以及你的优化思路</li><li>微服务和SOA的区别，优劣势</li><li>SQL慢查询的优化方案，索引和表的优化方案。</li><li>MySQL与MongoDB的区别，海量数据的存储</li><li>缓存框架，例如Redis、Memcached之间的区别，优劣势比较</li><li>请描述一致hash算法</li><li>分布式session的共享方案有哪些，有什么优劣势</li><li>高并发情况，系统的优化方案有哪些，以及优先级排序。</li></ol><h2><b>蚂蚁金服</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b6cc8ff707a6abca0a4e144bcb473791_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"761\" data-original=\"https://pic2.zhimg.com/v2-b6cc8ff707a6abca0a4e144bcb473791_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;761&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"761\" data-original=\"https://pic2.zhimg.com/v2-b6cc8ff707a6abca0a4e144bcb473791_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b6cc8ff707a6abca0a4e144bcb473791_b.jpg\"/></figure><h2><b>蚂蚁一面（50分钟）</b></h2><ol><li>自我介绍和项目</li><li>Java的内存分区</li><li>Java对象的回收方式，回收算法。</li><li>CMS和G1了解么，CMS解决什么问题，说一下回收的过程。</li><li>CMS回收停顿了几次，为什么要停顿两次。</li><li>Java栈什么时候会发生内存溢出，Java堆呢，说一种场景，我说集合类持有对象。</li><li>那集合类如何解决这个问题呢，我说用软引用和弱引用，那你讲一下这两个引用的区别吧。</li><li>Java里的锁了解哪些，说了Lock和synchronized</li><li>它们的使用方式和实现原理有什么区别呢？</li><li>synchronized锁升级的过程，说了偏向锁到轻量级锁再到重量级锁，然后问我它们分别是怎么实现的，解决的是哪些问题，什么时候会发生锁升级。</li><li>Tomcat了解么，说一下类加载器结构吧。</li><li>说了Spring，问我Spring中如何让A和B两个bean按顺序加载？</li><li>10亿个数去重，我说用hash分片做，他说可能不均匀，然后我说了bitmap，他说那数字量更多怎么办，我说那就两个bitmap把。他说下一题吧。</li></ol><h3><b>蚂蚁二面（40分钟）</b></h3><ol><li>讲一下项目</li><li>做的主要是Java对吧，讲一下多线程把，用到哪些写一下</li><li>写了thread和runnable，然后写了线程池，又问了线程池由哪些组件组成，有哪些线程池，分别怎么使用，以及拒绝策略有哪些。</li><li>什么时候多线程会发生死锁，写一个例子吧，然后我写了一个两个线程，两个锁，分别持有一个，请求另一个的死锁实例。</li><li>集合类熟悉吧，写一个题目，一个字符串集合，找出pdd并且删除。</li><li>然后说一下Redis吧，是单线程还是多线程，Redis的分布式怎么做？</li><li>RPC了解么，我说了主要是协议栈+数据格式+序列化方式，然后需要有服务注册中心管理生产者和消费者。</li><li>TCP三次握手的过程，如果没有第三次握手有什么问题。</li></ol><h3><b>蚂蚁三面 技术面（60分钟）</b></h3><ol><li>自我介绍</li><li>cap了解么，分别指什么，base呢，强一致性和弱一致性有什么方法来做，2pc了解么，说一下大概过程。</li><li>负载均衡怎么做的呢，为什么这么做？</li><li>了解过集群雪崩么？</li><li>MySQL的主从复制怎么做的，具体原理是什么，有什么优缺点。</li><li>Redis有哪些集群模式，各自的区别？</li><li>项目用到了多线程，如果线程数很多会怎么样？</li><li>分布式了解哪些东西，消息队列了解么，用在什么场景，说了削峰，限流和异步。说了kafka，问我怎么保证数据不丢失，以及确保消息不会被重复消费。还问了消息送达确认是怎么做的。</li><li>讲一下项目的主要架构，你在里面做了什么</li><li>有什么比较复杂的业务逻辑讲一下。</li><li>最大的难点是什么，收获是什么。</li></ol><h3><b>面试小总结</b></h3><p><b>阿里的面试特别喜欢面试技术原理，特别是：</b></p><ol><li>多线程</li><li>NIO</li><li>异步消息框架</li><li>分布式相关的缓存算法等</li><li>JVM的加载过程和原理</li><li>回收算法</li><li>以及具体使用过的框架，会问部分参数检验你是否熟用</li></ol><p>第一面被通过，后续被录用的可能性就会很大了，第一轮非常重要，建议系统的学习面试题</p><h2><b>字节跳动</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b83a45f6d71e3c91fed7d34fdc4b7a9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-b83a45f6d71e3c91fed7d34fdc4b7a9a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-b83a45f6d71e3c91fed7d34fdc4b7a9a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b83a45f6d71e3c91fed7d34fdc4b7a9a_b.jpg\"/></figure><h2><b>字节跳动一面（30分钟）</b></h2><ol><li>hashmap，怎么扩容，怎么处理数据冲突？怎么高效率的实现数据迁移？</li><li>Linux的共享内存如何实现，大概说了一下。</li><li>socket网络编程，说一下TCP的三次握手和四次挥手</li><li>同步IO和异步IO的区别？</li><li>Java GC机制？GC Roots有哪些？</li><li>红黑树讲一下，五个特性，插入删除操作,时间复杂度？</li><li>快排的时间复杂度，最坏情况呢，最好情况呢，堆排序的时间复杂度呢，建堆的复杂度是多少</li></ol><h3><b>字节跳动二面（30分钟）</b></h3><ol><li>自我介绍，主要讲讲做了什么和擅长什么</li><li>设计模式了解哪些？</li><li>AtomicInteger怎么实现原子修改的？</li><li>ConcurrentHashMap 在Java7和Java8中的区别？</li><li>为什么Java8并发效率更好？</li><li>什么情况下用HashMap，什么情况用ConcurrentHashMap？</li><li>redis数据结构？</li><li>redis数据淘汰机制？</li></ol><h3><b>字节跳动三面（50分钟）</b></h3><ol><li>mysql实现事务的原理(MVCC)</li><li>MySQL数据主从同步是如何实现的？</li><li>MySQL索引的实现，innodb的索引，b+树索引是怎么实现的，为什么用b+树做索引节点，一个节点存了多少数据，怎么规定大小，与磁盘页对应。</li><li>如果Redis有1亿个key，使用keys命令是否会影响线上服务？</li><li>Redis的持久化方式，aod和rdb，具体怎么实现，追加日志和备份文件，底层实现原理的话知道么?</li><li>遇到最大困难是什么？怎么克服？</li><li>未来的规划是什么？</li><li>你想问我什么？</li></ol><h3><b>总结一下所有HR都爱问的几个问题</b></h3><ol><li>问经历</li><li>工作中遇到的最大挑战是什么，你如何克服的？</li><li>你最大的优点和最大的缺点，各自说一个？</li><li>看机会的时候，主要考虑的是待遇、平台、人员还是什么其他因素？</li><li>未来的职业发展，短期和长期的规划是什么？</li></ol><h2><b>读者福利</b></h2><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p>文档里的详解资料太全面，<b>所以只把小部分知识点截图出来粗略介绍，每个小节点里面都有更细化的内容。</b></p><p><b>资料免费领取方式：点赞+点赞+点赞关注后，私信关键词【资料】即可获取免费领取方式！</b></p><p><b>重要的事说三遍，点赞+点赞+点赞！</b></p><blockquote><b>“做程序员，圈子和学习最重要”因为有了圈子可以让你少走弯路，扩宽人脉，扩展思路，学习他人的一些经验及学习方法！</b></blockquote><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-167c1de54a61fd864cbf97b87a23cf32_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;596&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4883f05799675e6b27eec10716165607_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "跳槽", 
                    "tagLink": "https://api.zhihu.com/topics/19551769"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89120925", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 1, 
            "title": "一文让你轻松了解全文检索", 
            "content": "<p>全文检索技术被广泛的应用于搜索引擎，查询检索等领域。我们在网络上的大部分搜索服务都用到了全文检索技术。</p><p>对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google等搜索引擎、论坛站内搜索、电商网站站内搜索等。</p><p>什么是全文检索呢？先看一下百度百科的专业定义。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8bb8779c9462de88f64ccf6995b903ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-8bb8779c9462de88f64ccf6995b903ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-8bb8779c9462de88f64ccf6995b903ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8bb8779c9462de88f64ccf6995b903ce_b.jpg\"/></figure><p>为了能更好的理解，我们先看一个简单的例子。</p><h2><b>案例</b></h2><p>实现一个文件的搜索功能，通过关键字搜索文件，凡是文件名或文件内容包括关键字的文件都需要找出来。还可以根据中文词语进行查询，并且需要支持多个条件查询。</p><p>本案例中的原始内容就是磁盘上的一些示例文件，如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_b.jpg\"/></figure><p>如果用数据库实现的话，数据库中的搜索很容易实现，通常都是使用sql语句进行查询，而且能很快的得到查询结果。</p><p>为什么数据库搜索很容易？</p><p>因为数据库中的数据存储是有规律的，有行有列而且数据格式、数据长度都是固定的。</p><p>但是，我们生活中的数据总体是分为两种的：结构化数据和非结构化数据。</p><p>结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。</p><p>非结构化数据：指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件</p><p>结构化数据的查询我们可以通过sql搞定，那么非结构化的呢？</p><h2><b>非结构化数据的查询方法</b></h2><p>非结构化数据查询有两种办法：<br/><b>（1）顺序扫描法(Serial Scanning)</b></p><p>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是相当的慢。</p><p><b>（2）全文检索(Full-text Search)</b></p><p>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。</p><p>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。</p><p><b>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</b></p><p>虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处理的是查询，所以耗时间创建索引是值得的。</p><p>那么如何实现全文检索呢？</p><h2><b>Lucene</b></h2><p>提到全文检索，不得不提到的一个技术就是Lucene，Lucene是apache下的一个开放源代码的全文检索引擎工具包。提供了完整的查询引擎和索引引擎，部分文本分析引擎。我们所熟知的全文检索引擎Solr和ES都是基于Lucene的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ba11448afce4b1bf7cf1756634d94397_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-ba11448afce4b1bf7cf1756634d94397_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;271&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-ba11448afce4b1bf7cf1756634d94397_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ba11448afce4b1bf7cf1756634d94397_b.jpg\"/></figure><ul><li>绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：</li></ul><p>确定原始内容即要搜索的内容-&gt;采集文档-&gt;创建文档-&gt;分析文档-&gt;索引文档</p><ul><li>红色表示搜索过程，从索引库中搜索内容，搜索过程包括：</li></ul><p>用户通过搜索界面-&gt;创建查询-&gt;执行搜索，从索引库搜索-&gt;渲染搜索结果</p><h2><b>创建索引</b></h2><p>也就是对文档索引的过程，将用户要搜索的文档内容进行索引，索引存储在索引库（index）中。</p><p>比如刚才的这些文档：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;296&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-92ff32bf1817b0d5ed3d843d2a7d2f25_b.jpg\"/></figure><p>我们要分析其中所有的单词，将单词、文档名建立映射关系。</p><p>（对于单词的切分包括了对原始文档提取单词、去除停用词等过程，这个过程被称为分词）</p><p>我们分析其中的一篇文档Lucene.txt：</p><p>原文档内容：</p><p>Lucene is a Java full-text search engine. Lucene is not a complete</p><p>application, but rather a code library and API that can easily be used</p><p>to add search capabilities to applications.</p><p>我们可以分析后得到语汇单元：</p><p>lucene、java、full、search、engine。。。。</p><p>另一个文档flink.txt加入几个单词：</p><p>java flink kakfa</p><p>我们也可以得到语汇单元：</p><p>java flink kakfa</p><p>这样我们就建立了映射关系，lucene、java、full、search在Lucene.txt中，而flink不在Lucene.txt中，但是在flink.txt中。java即在Lucene.txt中，也在flink.txt中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dae1e9893d3b79d7fed2da8dfca58d4f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"552\" data-original=\"https://pic4.zhimg.com/v2-dae1e9893d3b79d7fed2da8dfca58d4f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;552&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"552\" data-original=\"https://pic4.zhimg.com/v2-dae1e9893d3b79d7fed2da8dfca58d4f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dae1e9893d3b79d7fed2da8dfca58d4f_b.jpg\"/></figure><p>那当我们查找lucene这个词，就在Lucene.txt中，但是查找java时可以获悉其在这两个文件中。</p><p>创建索引是对语汇单元索引，通过词语找文档，这种索引的结构就叫做叫倒排索引结构。</p><p>传统方法是根据文件找到该文件的内容，在文件内容中匹配搜索关键字，这种方法是顺序扫描方法，数据量大、搜索慢。</p><p><b>倒排索引结构</b>是根据内容（词语）找文档，如下图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a4b9d232cac2d98a4e5f37332d4ad9e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-a4b9d232cac2d98a4e5f37332d4ad9e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;221&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-a4b9d232cac2d98a4e5f37332d4ad9e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a4b9d232cac2d98a4e5f37332d4ad9e3_b.jpg\"/></figure><p><b>倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。</b></p><p>有倒排索引，对应肯定，有正向索引。正向索引其实就是顺序扫描所有文件，这样本身效率是极低的。</p><h2><b>查询索引</b></h2><p>查询索引也是搜索的过程。搜索就是用户输入关键字，从索引（index）中进行搜索的过程。根据关键字搜索索引，根据索引找到对应的文档，从而找到要搜索的内容（这里指磁盘上的文件）。</p><p>我们这里就是通过查询索引表，找到文档所在的位置，就完成了查询，但其他的场景可以灵活的把查询出来的结果展示出去，比如我们的百度搜索时，为我们展示的是相关网页。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-049087b62154298e1541d36b4c757b95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"483\" class=\"origin_image zh-lightbox-thumb\" width=\"784\" data-original=\"https://pic2.zhimg.com/v2-049087b62154298e1541d36b4c757b95_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;784&#39; height=&#39;483&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"483\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"784\" data-original=\"https://pic2.zhimg.com/v2-049087b62154298e1541d36b4c757b95_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-049087b62154298e1541d36b4c757b95_b.jpg\"/></figure><h2><b>开发一个自己的全文检索</b></h2><p>手动去开发建立索引和查询索引的功能需要大量的工作，好在lucene已经帮我们完成了大量的工作，只需要调用java api就可以完成相关工作。</p><p>但是Lucene的API过于底层，并不简单易用，而且缺乏企业级的管理工具对其进行监控管理，于是企业级的全文检索引擎就应运而生了，目前最流行的两个就是：Solr和ES。他们都是建立在Lucene之上的。</p><h2><b>Solr</b></h2><p>Solr是Apache Lucene项目的开源企业搜索平台。Solr是高度可扩展的，并提供了分布式搜索和索引复制。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fe32321b81bbb90f0a1555edd17227c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"238\" data-rawheight=\"90\" class=\"content_image\" width=\"238\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;238&#39; height=&#39;90&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"238\" data-rawheight=\"90\" class=\"content_image lazy\" width=\"238\" data-actualsrc=\"https://pic1.zhimg.com/v2-fe32321b81bbb90f0a1555edd17227c8_b.jpg\"/></figure><p>Solr由Java开发，运行在Servlet容器中，是一个独立的全文搜索服务器。并具有强大的API和外部配置功能，使得无需编码，便可对其调整以适应多种类型应用。</p><p>2010年Apache Lucene与Apache Solr项目合并，所以Lucene/Solr成为了Apache一个项目。</p><p>由此可见，Solr的<b>优势</b>就是：</p><p>有一个成熟的开发者社区;本省比较稳定;支持多种格式的索引。</p><p>但是由于底层机制的限制，Solr的缺点也很明显：</p><p>建立索引时，搜索效率下降；实时索引搜索效率不高。</p><h2><b>ES</b></h2><p>ES也就是Elasticsearch，是一个实时的分布式搜索和分析引擎，它可以用于全文搜索，结构化搜索以及分析。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-830ca7168ba200db6434b8b57b912b87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"203\" class=\"content_image\" width=\"395\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;395&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"395\" data-rawheight=\"203\" class=\"content_image lazy\" width=\"395\" data-actualsrc=\"https://pic4.zhimg.com/v2-830ca7168ba200db6434b8b57b912b87_b.jpg\"/></figure><p>由于Lucene过于复杂，不方便使用。Elasticsearch使用Lucene作为内部引擎，但是Elasticsearch做搜索引擎时，只需要使用同一的API就可以，而不需要了解复杂的Lucene原理。</p><p>而且Elasticsearch不仅仅可以做全文搜索功能，在企业中可以作为：</p><ul><li>分布式实时文件存储；</li><li>实时分析的分布式搜索引擎；</li></ul><p>Elasticsearch的Restful API友好而且简单，特别容易上手。</p><p>目前包括维基百科、Stackoverflow、Github等都是用Elasticsearch作为其搜索引擎。</p><h2><b>ES简单体验</b></h2><p>这里我们简单使用一个ES完成一个全文检索功能。</p><p><b>1、下载</b></p><p>首先在官网下载 ，官网地址：<a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/products/elasticsearch\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">elastic.co/products/ela</span><span class=\"invisible\">sticsearch</span><span class=\"ellipsis\"></span></a></p><p>下载地址如下：<a href=\"https://link.zhihu.com/?target=https%3A//www.elastic.co/cn/downloads/elasticsearch\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">elastic.co/cn/downloads</span><span class=\"invisible\">/elasticsearch</span><span class=\"ellipsis\"></span></a></p><p>选择自己系统的我们这选择WIndows版本。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-408a49827bcacce7eee238a665687732_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"421\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-408a49827bcacce7eee238a665687732_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;421&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"421\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-408a49827bcacce7eee238a665687732_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-408a49827bcacce7eee238a665687732_b.jpg\"/></figure><p>同时我们可以下载kibana，kibana是配合ES的一个可视化工具。</p><p><b>2、安装部署</b></p><p>解压 放在d盘</p><p>随后我们在命令行启动：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">C:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">JN</span><span class=\"o\">&gt;</span><span class=\"nl\">d:\n</span><span class=\"nl\">D:</span><span class=\"o\">&gt;</span><span class=\"n\">cd</span> <span class=\"nl\">\n</span><span class=\"nl\">D:</span><span class=\"err\">\\</span><span class=\"n\">elasticsearch</span><span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">&gt;</span><span class=\"n\">cd</span> <span class=\"n\">bin</span><span class=\"nl\">\n</span><span class=\"nl\">D:</span><span class=\"err\">\\</span><span class=\"n\">elasticsearch</span><span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"o\">&gt;</span><span class=\"n\">elasticsearch</span><span class=\"o\">.</span><span class=\"na\">bat</span></code></pre></div><p>kibana也是</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">C:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">JN</span><span class=\"o\">&gt;</span><span class=\"nl\">d:\n</span><span class=\"nl\">D:</span><span class=\"o\">&gt;</span><span class=\"n\">cd</span> <span class=\"n\">kibana</span><span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">-</span><span class=\"n\">windows</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"nl\">\n</span><span class=\"nl\">D:</span><span class=\"err\">\\</span><span class=\"n\">kibana</span><span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">-</span><span class=\"n\">windows</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">&gt;</span><span class=\"n\">cd</span> <span class=\"n\">bin</span><span class=\"nl\">\n</span><span class=\"nl\">D:</span><span class=\"err\">\\</span><span class=\"n\">kibana</span><span class=\"o\">-</span><span class=\"n\">6</span><span class=\"o\">.</span><span class=\"na\">4</span><span class=\"o\">.</span><span class=\"na\">0</span><span class=\"o\">-</span><span class=\"n\">windows</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"o\">&gt;</span><span class=\"n\">kibana</span><span class=\"o\">.</span><span class=\"na\">bat</span></code></pre></div><p>部署成功：可以通过localhost:9200访问es</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-405299eebbbc99c8bcec8a68fa12c328_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-405299eebbbc99c8bcec8a68fa12c328_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;374&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic1.zhimg.com/v2-405299eebbbc99c8bcec8a68fa12c328_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-405299eebbbc99c8bcec8a68fa12c328_b.jpg\"/></figure><p>localhost:5601访问kibana</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c4cbb01ade1f15e623dde763e366fabf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-c4cbb01ade1f15e623dde763e366fabf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-c4cbb01ade1f15e623dde763e366fabf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c4cbb01ade1f15e623dde763e366fabf_b.jpg\"/></figure><p><b>3、简单使用</b></p><p>我们简单体验一下ES，打开kibana的DevTools工具。</p><p>分别插入两条数据，并进行搜索。</p><p>使用编程语言调用ES也与这个类似，简单易用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e454dc65a7b6788a7f69ecabe2642022_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-e454dc65a7b6788a7f69ecabe2642022_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;462&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-e454dc65a7b6788a7f69ecabe2642022_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e454dc65a7b6788a7f69ecabe2642022_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "信息检索", 
                    "tagLink": "https://api.zhihu.com/topics/19580199"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89060426", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 7, 
            "title": "我掏空了整个搜索引擎总结出了这套Java面试大纲，既来之则安之！", 
            "content": "<p>今天给大家分享下大咖们在跳槽中整理的Java面试大纲，其中大部分都是面试过程中的面试题，可以对照这查漏补缺，当然了，这里所列的肯定不可能覆盖全部。</p><p>跳槽时时刻刻都在发生，但是我建议大家跳槽之前，先想清楚为什么要跳槽，切记不可跟风，看到同事一个个都走了，自己也盲目的面试起来（期间也没有准备充分），到底是因为技术原因（影响自己的发展，偏移自己规划的轨迹），还是钱给少了，不受重视，准备不充分的面试，完全是浪费时间，更是对自己的不负责（如果titie很高，当我没说）。</p><p><b>好了，话不多说进入正文：</b></p><h3><b>项目介绍</b></h3><p>大部分情况，这是一场面试的开门题，面试官问这个问题，主要是考察你的概述能力和全局视野。有的人经常抱怨自己每天在堆业务，但没有成长。事实上，很多情况下确实在堆业务，但并不是没有成长。并非做中间件或者技术架构才是成长，例如我们的需求分析能力，沟通协作能力，产品思维能力，抽象建模能力等都是非常重要的硬实力。</p><p>1、明确项目是做什么？<br/>2、明确项目的价值。（为什么做这个项目，它解决了用户什么痛点，它带来什么价值？）<br/>3、明确项目的功能。（这个项目涉及那些功能？）<br/>4、明确项目的技术。（这个项目用到哪些技术？）<br/>5、明确个人在项目中的位置和作用。（你在这个项目的承担角色？）<br/>6、明确项目的整体架构。<br/>7、明确项目的优缺点，如果重新设计你会如何设计。<br/>8、明确项目的亮点。（这个项目有什么亮点？）<br/>9、明确技术成长。（你通过这个项目有哪些技术成长？）</p><h3><b>Java基础</b></h3><p>1、List和Set的区别、<br/>2、HashSet是如何保证不重复的<br/>3、HashMap是线程安全的吗？为什么不是线程安全的（最好画图说明多线程环境下不安全）？<br/>4、HashMap的扩容过程<br/>5、HashMap1.7与1.8的区别，说明1.8做了哪些优化，如何优化的？<br/>6、final finally finalize<br/>7、强引用、软引用、弱引用、虚引用<br/>8、Java反射<br/>9、Arrays.sort实现原理和Collection实现原理<br/>10、LinkedHashMap的应用<br/>11、cloneable接口实现原理<br/>12、异常分类以及处理机制<br/>13、wait和sleep的区别<br/>14、数组在内存中如何分配</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3b05b96fd4d1242e7a6af2cd3cea3f8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-3b05b96fd4d1242e7a6af2cd3cea3f8e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;698&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"698\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-3b05b96fd4d1242e7a6af2cd3cea3f8e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3b05b96fd4d1242e7a6af2cd3cea3f8e_b.jpg\"/></figure><h3><b>Java并发</b></h3><p>1、synchronized的实现原理以及锁优化？<br/>2、volatile的实现原理？<br/>3、Java的信号灯？<br/>4、synchronized在静态方法和普通方法的区别?<br/>5、怎么实现所有线程在等待某个事件的发生才会执行？<br/>6、CAS?CAS有什么缺陷，如何解决？<br/>7、synchronized和lock有什么区别？<br/>8、Hashtable是如何加锁的？<br/>9、HashMap的并发问题？<br/>10、ConcurrenHashMap介绍？<br/>11、AQS<br/>12、如何检测死锁？怎么预防死锁？<br/>13、Java内存模型？<br/>14、如何保证多线程下 i++ 结果正确？<br/>15、线程池的种类，区别和使用场景？<br/>16、分析线程池的实现原理和线程的调度过程？<br/>17、线程池如何调优，最大数目如何确认？<br/>18、ThreadLocal原理，用的时候需要注意什么？<br/>19、CountDowLatch和CyclicBarrier的用法，以及相互之间的差别？<br/>20、LockSupport工具<br/>21、Condition接口及其实现原理<br/>22、For/Join框架的理解<br/>23、分段锁的原理，锁力度减小的思考<br/>24、八种阻塞队列以及各种阻塞队列的特性</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-28582304184954196f3ec525476fc54c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-28582304184954196f3ec525476fc54c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;700&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-28582304184954196f3ec525476fc54c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-28582304184954196f3ec525476fc54c_b.jpg\"/></figure><h3><b>Spring</b></h3><p>1、BeanFactory和 FactoryBean？<br/>2、Spring IOC 的理解，其初始化过程？<br/>3、BeanFactory和 ApplicationContext?<br/>4、Spring Bean 的生命周期，如何被管理的？<br/>5、Spring Bean 的加载过程的怎样的？<br/>6、如果要你实现 Spring AOP，请问怎样实现？<br/>7、如果要你实现 Spring IOC，你会注意哪些问题？<br/>8、Spring 是如何管理事务的，事务管理机制？<br/>9、Spring 的不同事务传播行为有哪些，干什么用？<br/>10、Spring 中用到了哪些设计模式？<br/>11、Spring MVC 的工作原理？<br/>12、Spring 循环注入的原理？<br/>13、Spring AOP 的理解，各有术语，他们是怎么相互工作的？<br/>14、Spring 如何保证 Controller 并发的安全？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b049962f58b1868f759de58da8682eba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b049962f58b1868f759de58da8682eba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;677&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b049962f58b1868f759de58da8682eba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b049962f58b1868f759de58da8682eba_b.jpg\"/></figure><h3><b>Netty</b></h3><p>1、BIO,NIO和AIO<br/>2、Netty 的各大组件<br/>3、Netty 的线程模型<br/>4、TCP 粘包/拆包的原理及解决方法<br/>5、了解哪几种序列化协议？包括使用场景和如何去选择<br/>6、Netty 的零拷贝实现<br/>7、Netty 的高性能表现在哪些方面</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-402460285624b7ccd4bee57645cbae81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"680\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-402460285624b7ccd4bee57645cbae81_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;680&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"680\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-402460285624b7ccd4bee57645cbae81_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-402460285624b7ccd4bee57645cbae81_b.jpg\"/></figure><h3><b>分布式相关</b></h3><p>1、Dubbo 的底层实现原理和机制<br/>2、描述一个服务从发布到被消费的详细过程<br/>3、分布式系统怎么做服务治理<br/>4、接口的幂等性的概念<br/>5、消息中间件如何解决消息丢失问题<br/>6、Dubbo 的服务请求失败怎么处理<br/>7、重连机制会不会造成错误<br/>8、对分布式事务的理解<br/>9、如何实现负载均衡，有哪些算法可以实现？<br/>10、Zookeeper 的用途，选举的原理是什么？<br/>11、数据的垂直拆分水平拆分。<br/>12、Zookeeper 原理和适用场景<br/>13、Zookeeper watch机制<br/>14、redis/zk节点宏机如何处理<br/>15、分布式集群下如何做到唯一序列号<br/>16、如何做一个分布式锁<br/>17、用过哪些MQ，怎么用的，和其他MQ比较有什么优缺点，MQ的连接是线程安全的吗<br/>18、MQ系统的数据如何保证不丢失<br/>19、列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题<br/>20、Zookeeper 的选举策略<br/>21、全局ID</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b2490481c068dc56d41397415057c186_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b2490481c068dc56d41397415057c186_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;658&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b2490481c068dc56d41397415057c186_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b2490481c068dc56d41397415057c186_b.jpg\"/></figure><h3><b>数据库</b></h3><p>1、mysql 分页有什么优化<br/>2、悲观锁，乐观锁<br/>3、组合索引，最左原则<br/>4、mysql 的表锁，行锁<br/>5、mysql 性能优化<br/>6、mysql 的索引分类：B+，hash；什么情况用什么索引<br/>7、事务的特性和隔离级别</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7d7509bb87dae6229325bf579e437894_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-7d7509bb87dae6229325bf579e437894_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;678&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-7d7509bb87dae6229325bf579e437894_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7d7509bb87dae6229325bf579e437894_b.jpg\"/></figure><h3><b>缓存</b></h3><p>1、Redis用过哪些数据，以及Redis底层怎么实现<br/>2、Redis 缓存穿透，缓存雪崩<br/>3、如何使用Redis 来实现分布式锁<br/>4、Redis 的并发竞争问题如何解决<br/>5、Redis持久化的几种方式，优缺点是什么，怎么实现<br/>6、Redis的缓存失效策略<br/>7、Redis集群，高可用，原理<br/>8、Redis缓存分片<br/>9、Redis 的数据淘汰策略</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fde687679d3a50e750a7e779063b1ee8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-fde687679d3a50e750a7e779063b1ee8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;653&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-fde687679d3a50e750a7e779063b1ee8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fde687679d3a50e750a7e779063b1ee8_b.jpg\"/></figure><h3><b>JVM</b></h3><p>1、详细jvm内存模型<br/>2、讲讲什么情况下回出现内存溢出，内存泄漏？<br/>3、说说Java线程栈<br/>4、jvm新生代到老年代的晋升过程的判断条件是什么呢？<br/>5、jvm出现fullGC很频繁，怎么去线上排查问题？<br/>6、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？<br/>7、类的实例化顺序<br/>8、jvm垃圾回收机制，何时触发MinorGC等操作<br/>9、jvm中一次完整的GC流程（从yqc到fgc）是怎样的<br/>10、各种回收器，各种优缺点，重点CMS、G1<br/>11、各种回收算法<br/>12、OOM错误，stackoverflow错误，permgenspace的错误</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5ee7c7cd4913507b9f06449adf2bde47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-5ee7c7cd4913507b9f06449adf2bde47_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;651&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-5ee7c7cd4913507b9f06449adf2bde47_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5ee7c7cd4913507b9f06449adf2bde47_b.jpg\"/></figure><p>由于篇幅原因，在这就不做全部展示了，这些题我已经整理成pdf文档免费分享给那些有需要的朋友，同时整理也花费了蛮多时间，<b>有需要的朋友可以点赞关注下然后私信关键词【面试】即可获取免费领取方式！</b></p><h2><b>读者福利</b></h2><p>读到这的朋友还可以私信我免费领取一份收集的Java进阶知识笔记和视频资料。</p><p><b>资料免费领取方式：点赞+点赞+点赞关注后，私信关键词【资料】即可获取免费领取方式！</b></p><p><b>重要的事说三遍，点赞+点赞+点赞！</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><blockquote><b>“做程序员，圈子和学习最重要”因为有了圈子可以让你少走弯路，扩宽人脉，扩展思路，学习他人的一些经验及学习方法！</b></blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_b.jpg\"/></figure><p><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-315094411b44fb01146fc9d0e5d824f4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88866208", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 6, 
            "title": "一文彻底搞懂MySQL索引", 
            "content": "<h2><b>前言</b></h2><p>MyISAM和InnoDB是MySQL最常用的两个存储引擎，本文将进行详尽的介绍和对比。对于MySQL其余几种存储引擎，请读者自行搜索学习。</p><p>本文会图解两种引擎的索引结构区别，然后讲解索引的原理，理解本文内容，就能够理解索引优化的各种原则的背后原因。</p><p>限于篇幅，本篇没有介绍的知识，会在后续博客将逐一讲解。例如：MySQL引擎的锁机制、多列索引的生效规则、索引优化等主题。</p><p>下面SQL在本篇介绍引擎的结构区别时使用的表结构，便于读者更好理解。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">CREATE</span> <span class=\"n\">TABLE</span> <span class=\"err\">`</span><span class=\"n\">user</span><span class=\"err\">`</span> <span class=\"o\">(</span>\n  <span class=\"err\">`</span><span class=\"n\">id</span><span class=\"err\">`</span> <span class=\"kt\">int</span><span class=\"o\">(</span><span class=\"n\">11</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">AUTO_INCREMENT</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">唯一码</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n  <span class=\"err\">`</span><span class=\"n\">age</span><span class=\"err\">`</span> <span class=\"kt\">int</span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">年龄</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n  <span class=\"err\">`</span><span class=\"n\">name</span><span class=\"err\">`</span> <span class=\"n\">varchar</span><span class=\"o\">(</span><span class=\"n\">5</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">名字</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">PRIMARY</span> <span class=\"nf\">KEY</span> <span class=\"o\">(</span><span class=\"err\">`</span><span class=\"n\">id</span><span class=\"err\">`</span><span class=\"o\">),</span>\n  <span class=\"n\">KEY</span> <span class=\"err\">`</span><span class=\"n\">name</span><span class=\"err\">`</span> <span class=\"o\">(</span><span class=\"err\">`</span><span class=\"n\">name</span><span class=\"err\">`</span><span class=\"o\">)</span>\n<span class=\"o\">)</span> <span class=\"n\">ENGINE</span><span class=\"o\">=</span><span class=\"n\">InnoDB</span> <span class=\"n\">AUTO_INCREMENT</span><span class=\"o\">=</span><span class=\"n\">92</span> <span class=\"n\">DEFAULT</span> <span class=\"n\">CHARSET</span><span class=\"o\">=</span><span class=\"n\">utf8mb4</span><span class=\"o\">;</span></code></pre></div><blockquote>B-树、B树和B-tree是同一个数据结构，只不过英语翻译过来之后，有些人误解了以为是多种树。所以好多讲解树的数据结构的博客完全是误导初学者。。。请读者认真分辨。</blockquote><p>MyISAM和InnoDB的索引均采用B+树数据结构，所以接下来先介绍一下B树与B+树。</p><h2><b>B树与B+树</b></h2><p><b>B树</b></p><p><b>B树是一种多路搜索树。</b></p><ol><li>定义任意非叶子结点最多只有M个儿子，且M&gt;2。</li><li>根结点的儿子数为[2, M]。</li><li>除根结点以外的非叶子结点的儿子数为[M/2, M]。</li><li>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）。</li><li>非叶子结点的关键字个数=指向儿子的指针个数-1。</li><li>非叶子结点的关键字：K[1], K[2], …, K[M-1]，且K[i] &lt;= K[i+1]。</li><li>非叶子结点的指针：P[1], P[2], …,P[M]（其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树）。</li><li>所有叶子结点位于同一层。</li></ol><p>下图是一个M=4阶的B树。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-652da92bab8be95ce041811a6e411a26_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"894\" data-original=\"https://pic3.zhimg.com/v2-652da92bab8be95ce041811a6e411a26_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;894&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"894\" data-original=\"https://pic3.zhimg.com/v2-652da92bab8be95ce041811a6e411a26_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-652da92bab8be95ce041811a6e411a26_b.jpg\"/></figure><p>B树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的是叶子结点。</p><p><b>查找文件29的过程：</b></p><ol><li>根据根结点指针找到文件目录的根磁盘块1，将其中的信息导入内存。（磁盘IO操作1次）</li><li>此时内存中有两个文件名17，35和三个存储其他磁盘页面地址的数据。根据算法我们发现17&lt;29&lt;35，因此我们找到指针p2。</li><li>根据p2指针，我们定位到磁盘块3，并将其中的信息导入内存。（磁盘IO操作2次）</li><li>此时内存中有两个文件名26，30和三个存储其他磁盘页面地址的数据。根据算法我们发现26&lt;29&lt;30，因此我们找到指针p2。</li><li>根据p2指针，我们定位到磁盘块8，并将其中的信息导入内存。（磁盘IO操作3次）</li><li>此时内存中有两个文件名28，29。根据算法我们查找到文件29，并定位了该文件内存的磁盘地址。</li></ol><h2><b>下面的动画是4阶B树插入的过程。</b></h2><p><b>B树的特性：</b></p><ol><li>关键字分布在整颗树的所有节点。</li><li>任何一个关键字出现且只出现在一个结点中。</li><li>搜索有可能在非叶子结点结束。</li><li>其搜索性能等价于在关键字全集内做一次二分查找。</li></ol><h3><b>B+树</b></h3><p>下图是一个M=3阶的B+树。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-03d02c75475cec7d472b50a30c02a6a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-03d02c75475cec7d472b50a30c02a6a9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-03d02c75475cec7d472b50a30c02a6a9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-03d02c75475cec7d472b50a30c02a6a9_b.jpg\"/></figure><p><br/>一般在数据库系统或文件系统中使用的B+Tree结构都在经典B+Tree的基础上进行了优化，增加了顺序访问指针。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8383049b48b3d9738dd193628cd51a15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-8383049b48b3d9738dd193628cd51a15_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-8383049b48b3d9738dd193628cd51a15_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8383049b48b3d9738dd193628cd51a15_b.jpg\"/></figure><p>B+树是B树的一种变形树，总结起来，数据库索引的B+树与B树的差异在于：</p><ol><li>非叶子结点的子树指针与关键字个数相同。</li><li>非叶子结点的子树指针P[i]，指向关键字值属于[K[i],K[i+1])的子树（注意，区间是前闭后开）。</li><li>为所有叶子结点增加一个链指针。</li><li>所有关键字都在叶子结点出现。</li></ol><p><b>B+树的特性：</b></p><ol><li>所有关键字都出现在叶子结点的链表中，且链表中的关键字是有序的。</li><li>搜索只在叶子结点命中。</li><li>非叶子结点相当于是叶子结点的索引，叶子结点是存储关键字数据的数据层。</li></ol><h3><b>B-/+树做索引的原因</b></h3><p>解释这个问题之前，需要了解一些基础知识。</p><h3><b>局部性原理与磁盘预读</b></h3><p>由于存储介质的特性，磁盘本身存取就比主存慢很多，再加上机械运动耗费，磁盘的存取速度往往是主存的几百分之一，因此为了提高效率，要尽量减少磁盘I/O。为了达到这个目的，磁盘往往不是严格按需读取，而是每次都会预读，即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的局部性原理：</p><blockquote>当一个数据被用到时，其附近的数据也通常会马上被使用——程序运行期间所需要的数据通常比较集中。</blockquote><p>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此对于具有局部性的程序来说，预读可以提高I/O效率。</p><p>预读的长度一般为页的整倍数。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页（在许多操作系统中，页得大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行。</p><h3><b>B-/+树做索引的原因分析</b></h3><p>一般来说，磁盘I/O次数可以用于评价索引结构的优劣。在B-Tree中查找，可知检索一次最多需要访问h个节点（上文举例查找文件29的过程）。数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。</p><p>为了达到这个目的，在实际实现中，B树还使用如下技巧：</p><ol><li>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个节点只需一次I/O。</li><li>B树中一次检索最多需要h-1次I/O（根节点常驻内存）。一般实际应用中，出度d（树的分叉数）是非常大的数字，通常超过100；h非常小，通常不超过3。</li></ol><p>综上所述，用B树作为索引结构效率是非常高的。</p><p><b>红黑树或者平衡二叉树的其他树结构，</b></p><ol><li>h明显要深的多，执行效率低。</li><li>逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，</li><li>每个节点存储的数据量太小了，对磁盘空间造成浪费，带来频繁的IO操作。</li></ol><p>所以其他树结构的效率明显比B树差很多。</p><h3><b>相对B树，B+树做索引的优势</b></h3><ol><li>B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。</li><li>B+树的查询效率更加稳定：由于所有数据都存于叶子节点。所有关键字查询的路径长度相同，每一个数据的查询效率相当。</li><li>B树在提高了IO性能的同时并没有解决元素遍历的我效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。</li></ol><blockquote>笔者认为第三条原因才是MySQL使用B+树而不是B树做索引的主要原因，毕竟MongoDB的索引是B树，所以两种数据结构并没有绝对的好坏，要看实际的业务需求。</blockquote><h2><b>MyISAM</b></h2><h3><b>磁盘存储</b></h3><p>MyISAM在磁盘存储上有三个文件，每个文件名以表名开头，扩展名指出文件类型。</p><ol><li>.frm：用于存储表的定义。</li><li>.MYD：用于存放数据。</li><li>.MYI：用于存放表索引。</li></ol><h2><b>索引</b></h2><h3><b>主键索引</b></h3><p>MyISAM引擎使用B+树作为索引结果，叶节点的data域存放的是数据记录的地址。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5094f94cd876c866b7b50481956ced6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic4.zhimg.com/v2-5094f94cd876c866b7b50481956ced6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;534&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic4.zhimg.com/v2-5094f94cd876c866b7b50481956ced6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5094f94cd876c866b7b50481956ced6f_b.jpg\"/></figure><p>MyISAM索引文件和数据文件是分离的，索引文件仅保存记录所在页的指针（物理位置），通过这些地址来读取页，进而读取被索引的行。</p><p>树中叶子保存的是对应行的物理位置。通过该值，存储引擎能顺利地进行回表查询，得到一行完整记录。同时，每个叶子页也保存了指向下一个叶子页的指针。从而方便叶子节点的范围遍历。</p><h3><b>辅助索引</b></h3><p>在MyISAM中，主键索引和辅助索引在结构上没有任何区别，只是主键索引要求key是唯一的，而辅助索引的key可以重复。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b3413d8464610320696b80a004ce6516_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-b3413d8464610320696b80a004ce6516_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;534&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-b3413d8464610320696b80a004ce6516_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b3413d8464610320696b80a004ce6516_b.jpg\"/></figure><h2><b>Innodb</b></h2><p>MySQL5.5开始支持InnoDB引擎，并将其作为默认数据库引擎。</p><h3><b>磁盘存储</b></h3><p>Innodb有两种存储方式，共享表空间存储和多表空间存储。</p><p>Innodb只有表结构文件和数据文件。</p><p>表结构文件和MyISAM一样，以表名开头，扩展名是.frm。</p><p>数据文件与存储方式有关：</p><ul><li>如果使用共享表空间，那么所有表的数据文件和索引文件都保存在一个表空间里，一个表空间可以有多个文件，通过innodb_data_file_path和innodb_data_home_dir参数设置共享表空间的位置和名字，一般共享表空间的名字叫ibdata1-n。</li><li>如果使用多表空间，那么每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开头，以.ibd为扩展名。</li></ul><h2><b>索引</b></h2><h3><b>主键索引</b></h3><p>Innodb主键索引中，既存储了主键值，又存储了行数据。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d2a18d459c6b021e3fd708725e454971_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-d2a18d459c6b021e3fd708725e454971_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic2.zhimg.com/v2-d2a18d459c6b021e3fd708725e454971_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d2a18d459c6b021e3fd708725e454971_b.jpg\"/></figure><p><b>辅助索引</b></p><p>对于辅助索引，InnoDB采用的方式是在叶子页中保存主键值，通过这个主键值来回表（上图）查询到一条完整记录，因此按辅助索引检索实际上进行了二次查询，效率肯定是没有按照主键检索高的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8374a6b105dcf8868ff97d20d3e8f2cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic4.zhimg.com/v2-8374a6b105dcf8868ff97d20d3e8f2cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic4.zhimg.com/v2-8374a6b105dcf8868ff97d20d3e8f2cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8374a6b105dcf8868ff97d20d3e8f2cf_b.jpg\"/></figure><h2><b>Innodb与MyISAM的区别</b></h2><h3><b>1. 存储结构</b></h3><p>MyISAM存储表分为三个文件frm（表结构）、MYD（表数据）、MYI（表索引），而Innodb如上文所说，根据存储方式不同，存储结构不同。</p><h3><b>2. 事务支持</b></h3><p>MyISAM不支持事务，而Innodb支持事务，具有事务、回滚和恢复的事务安全。</p><h3><b>3. 外键和主键</b></h3><p>MyISAM不支持外键，而Innodb支持外键。MyISAM允许没有主键，但是Innodb必须有主键，若未指定主键，会自动生成长度为6字节的主键。</p><h3><b>4. 锁</b></h3><p>MyISAM只支持表级锁，而Innodb支持行级锁，具有比较好的并发性能，但是行级锁只有在where子句是对主键筛选才生效，非主键where会锁全表</p><h3><b>5. 索引</b></h3><p>MyISAM使用B+树作为索引结构，叶节点保存的是存储数据的地址，主键索引key值唯一，辅助索引key可以重复，二者在结构上相同。Innodb也是用B+树作为索引结构，数据表本身就是按照b+树组织，叶节点key值为数据记录的主键，data域为完整的数据记录，辅助索引data域保存的是数据记录的主键。</p><h2><b>FAQ</b></h2><h3><b>MongoDB的索引为什么选择B树，而Mysql的索引是B+树</b></h3><p>MongoDB不是传统的关系性数据库，而是以Json格式作为存储的nosql，目的就是高性能，高可用，易扩展。首先它摆脱了关系模型，所以范围查询和遍历查询的需求就没那么强烈了，其次Mysql由于使用B+树，数据都在叶节点上，每次查询都需要访问到叶节点，而MongoDB使用B-树，所有节点都有Data域，只要找到指定索引就可以进行访问。</p><p>总体来说，Mysql选用B+树和MongoDB选用B-树还是以自己的需求来选择的。</p><h2><b>索引有关的名词解释</b></h2><h3><b>普通索引</b></h3><p>用表中的普通列构建的索引，没有任何限制</p><h3><b>唯一索引</b></h3><p>唯一索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</p><h3><b>主键索引</b></h3><p>根据主键建立索引，不允许重复，不允许空值；</p><h3><b>全文索引</b></h3><p>仅可用于MyISAM表，针对较大的数据，生成全文索引非常的消耗时间和空间（在生成FULLTEXT索引时，会为文本生成一份单词的清单，在索引时及根据这个单词的清单来索引）。</p><h3><b>组合索引</b></h3><p>又叫联合索引。用多个列组合构建的索引，这多个列中的值不允许有空值。可以在创建表的时候指定，也可以修改表结构。</p><p>ALTER TABLE &#39;table_name&#39; ADD INDEX index_name(&#39;col1&#39;,&#39;col2&#39;,&#39;col3&#39;)；</p><p>为了更多的提高mysql效率可建立组合索引，遵循”最左前缀“原则。创建复合索引时应该将最常用（频率）作限制条件的列放在最左边，依次递减。示例的组合索引相当于建立了col1,col1col2,col1col2col3三个索引，而col2或者col3是不能使用索引的。</p><h3><b>最左前缀规则</b></h3><p>假设联合索引由列(a,b,c)组成，则一下顺序满足最左前缀规则：a、ab、abc；selece、where、order by 、group by都可以匹配最左前缀。其它情况都不满足最左前缀规则就不会用到联合索引。</p><h3><b>聚集索引</b></h3><p>定义：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。</p><p>如果定义了主键，Innodb会选择主键作为聚集索引；如果没有定义主键，Innodb会选择不包含NULL值的唯一索引作为聚集索引；如果也没有这样的唯一索引列，Innodb会选择内置6字节长的rowID作为隐含的聚集索引，这里的RowId会随着记录的写入而主键自增，但是它是不可引用和查看的，是数据库引擎内部的使用。</p><p>如果我们使用自增主键，那么每次插入的新纪录都在原先记录的尾部按照顺序，添加到当前节点的索引后面，当一页快写满的时候，就会开辟一个新的页。数据记录本身就存与主索引的叶子节点上，B+tree的树。这就要求每一个叶子节点内的各条数据记录按主键顺序存放，因此每当有一条新的记录插入的时候，MYSQL会根据其主键将其插入到合适的节点和位置上，如果页面达到装载因子（INNODB默认为15/16），则开辟新的页面（节点）</p><p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置，此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p><h3><b>非聚集索引</b></h3><p>定义：该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引。</p><p>除了InnoDB的主键索引，在mysql中的其他索引形式都是非聚集索引。</p><h3><b>覆盖索引</b></h3><p>指从辅助索引中就能获取到需要的记录，而不需要查找主键索引中的记录。使用覆盖索引的一个好处是因为辅助索引不包括一条记录的整行信息，所以数据量较聚集索引要少，可以减少大量io操作。</p><h3><b>覆盖查询失效</b></h3><ol><li>select选择的字段中含有不在索引中的字段 ，即索引没有覆盖全部的列。</li><li>where条件中不能含有对索引进行like的操作。</li></ol><p><b>最后也欢迎各位程序员（媛）关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }, 
                {
                    "tag": "MySQL", 
                    "tagLink": "https://api.zhihu.com/topics/19554128"
                }, 
                {
                    "tag": "MySQL 同步", 
                    "tagLink": "https://api.zhihu.com/topics/19639298"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88763939", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 3, 
            "title": "走进互联网高速发展背后的那群人，一个透支生命的职业：程序员！", 
            "content": "<p>北京的西北角是个特别的区域，这里汇集了众多互联网及IT企业，实力雄厚的上市公司将自家logo悬挂在大厦的顶端，而刚起步的创业公司也会选择在这里租下一亩三分地。</p><p>中关村、上地、西二旗、后厂村……它们成为了一个个地标，而在这里工作的年轻人，总是第一时间被打上“码农”“程序员”的标签。在大家眼中，他们往往身着格子衬衫，头戴耳机身背双肩包，披星戴月地上下班，每天十几个小时面对着电脑屏幕。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-917bfc579616334d29da27c2793e2136_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-917bfc579616334d29da27c2793e2136_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-917bfc579616334d29da27c2793e2136_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-917bfc579616334d29da27c2793e2136_b.jpg\"/></figure><p>我们习惯把他们看作一个整体，从性格、着装到消费水平都大致定型。然而，他们也许曾在某个地铁站多次擦肩而过，但每个人心中的目标、理想和焦虑，都各不相同。</p><h3><b>我把家从三环里搬到了六环外</b></h3><p>老田今年28岁，北京生北京长，是个标准的“土著”。10年前的他大概没有想过，自己会来到当时名不见经传的后厂村工作。</p><p>2013年夏天，老田本科毕业，专业是当年正吃香的计算机与科学技术。他顺利地找到了一份某大型电信公司的内勤工作，但入职后发现，工作的内容与所学的专业知识并无相关。</p><p>“就是天天处理人际关系，没别的。”他回忆道。</p><p>不是没有考虑过换行，老田曾经要求过调岗，但却在面试的时候受了挫。“对方本来要问我一个专业问题，后来突然看了看我简历说：‘你是13年毕业的啊，那这个你可能没学过。’后来我就没怎么想着调岗的事了，想看看其他机会吧。”</p><p>不过这份工作也有极大的优势：工作量少，离家近。老田每天可以8点起床，溜达15分钟到单位，下午5点半之前到家，琢磨晚上给爱人做点什么吃。老田最大的爱好就是做饭，人生理想是拥有属于自己的饭馆，不过这个目标现在看来还远得很。</p><p>今年年初，也是老田结婚的第二年，他们摇号中了一套共有产权房，这意味着两人从无贷一身轻的状态，变成了每个月需还款7000多元。这突然的改变，也让他不得不再次审视自己的收入情况。“必须要多攒点钱了。”他对自己说。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a841076f8daa088f7cd97095c9d0d30b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"208\" class=\"content_image\" width=\"313\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;313&#39; height=&#39;208&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"208\" class=\"content_image lazy\" width=\"313\" data-actualsrc=\"https://pic4.zhimg.com/v2-a841076f8daa088f7cd97095c9d0d30b_b.jpg\"/></figure><p>经过熟人介绍，他来到了“大名鼎鼎”的后厂村，在一家央企做工程师。还没开始体会到工作的高强度，通勤的问题就先来了：家住在东三环内，公司在北五环外，高峰期堵得严严实实，咋办？</p><p>与爱人商量之后，老田决定工作日住到六环外的亲戚家。“往北走高速，开20多分钟就到了，回家直接睡觉。”就这样，从公司到住处，从工作到睡觉的循环开始了。</p><p>由于已经4年没上手专业技能，突如其来的高强工作量让他发懵。他坦言，工作以来，这是头回一想到上班就开始焦虑。三个月过去，好不容易熟悉了基本操作，但工作压力依然压得他喘不过气。喝不惯咖啡的他，每天中午和其他同事一样，需要在躺椅上休息近一小时，否则整个下午都会浑浑噩噩。</p><p>一日下班后，老田随手抓了抓脑袋，却惊讶地发现掉了满桌的头发。“我觉得这份工作就是在拿命换钱。”他说。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-16489019a4675bd0c7d1c067fb2ff0c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"1200\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic2.zhimg.com/v2-16489019a4675bd0c7d1c067fb2ff0c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;900&#39; height=&#39;1200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"1200\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https://pic2.zhimg.com/v2-16489019a4675bd0c7d1c067fb2ff0c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-16489019a4675bd0c7d1c067fb2ff0c9_b.jpg\"/></figure><p>其实，老田从来没放弃过开饭馆的梦。他自己也明白，目前的积蓄还无法支撑起这个目标，同时后厂村的高强度作业也不是长久之计。“先干两年，等把知识学到手，也算是留了个后路，以后就算创业失败了，也能养家糊口。”眼看“奔三”了，下一代的计划也渐渐提上日程，他便愈发不敢放松对自己的要求。</p><p>晚上9点，老田揉了揉发涩的眼睛，发动汽车，开往六环外的住所。高速走得很顺，车里放着《北京土著》，顺便想想周末该做什么新菜。他突然觉得，要是这段路再长一点，也挺好的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b81bbe38f782126b9ee8bd6a915c9deb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-b81bbe38f782126b9ee8bd6a915c9deb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;930&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-b81bbe38f782126b9ee8bd6a915c9deb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b81bbe38f782126b9ee8bd6a915c9deb_b.jpg\"/></figure><h2><b>“程序媛”和你们想象得不太一样</b></h2><p>小徐在中关村上班，是个程序员，性别女。</p><p>她知道女性程序员在大众眼里的模样：要么，就是从不化妆，戴着厚厚的眼镜，穿着上也从不在意，在人群里是最不起眼的存在；要么，就是只顾打扮不顾业务，利用着与生俱来的“性别优势”，自然地索求同事们的帮助。</p><p>她认为自己与两者均无相似之处。</p><p>在求职时，小徐的同学们或多或少地抱怨过用人单位的不公平待遇，即同样条件下，招收女性程序员的可能性较小。在这份需脑力与体力兼备的工作中，女性似乎确实不占优势，但幸运的是，许多大型公司在招聘时注重性别的均衡，她也未曾遭受异样的审视。“我就职的这家外企比较重视员工的diversity(差异性)，因此团队里的女性不少，很多还是女博士。”她回忆道。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-55f9b666086496fc2185e05fa761cc61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-55f9b666086496fc2185e05fa761cc61_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-55f9b666086496fc2185e05fa761cc61_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-55f9b666086496fc2185e05fa761cc61_b.jpg\"/></figure><p>小徐去年研究生毕业，从香港来到北京求职的她，选择中关村并非为了高薪，而是希望能继续积累知识。“希望我的工作能兼顾我的专业和兴趣，同时能给我不断提升自我的机会。”经过筛选，最终她就职于某外企的研究机构，与云技术、人工智能等尖端科技打交道。</p><p>太多年轻人初入职场时也怀着学习的心态，但不久后便与繁忙的节奏和升职加薪的烦恼妥协，开始得过且过。小徐却认为，自己所在团队的氛围起到了带头作用，大家在头脑风暴中不断思考、沉淀的过程，是她在工作中最欣赏的部分。“我不喜欢那种领导让做什么就做什么的节奏，太死板，久而久之脑袋都麻木了。”</p><p>虽然目前的工作尽如人意，但小徐还面临着大部分“程序媛”都避不开的问题：来自亲人朋友的无形压力。随着IT圈“赚5万花5千”“过度劳动”“脱发”等吐槽越来越深入人心，身边的人自然会产生担忧：身体状况怎么样？平时有自己的时间吗？非要做这行不可吗？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e83293d725120b53b5d69fb9bd0a238f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1198\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb\" width=\"1198\" data-original=\"https://pic4.zhimg.com/v2-e83293d725120b53b5d69fb9bd0a238f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1198&#39; height=&#39;900&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1198\" data-rawheight=\"900\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1198\" data-original=\"https://pic4.zhimg.com/v2-e83293d725120b53b5d69fb9bd0a238f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e83293d725120b53b5d69fb9bd0a238f_b.jpg\"/></figure><p>小徐多次与母亲提及这个话题，但都以她的坚持而结束。但她潜意识里也存在着焦虑。虽然入职只有一年光景，但她已经从周围同事的身上看到了自己可能的未来，并不时怀疑：我可以做到那么优秀吗？</p><p>“刚入职的时候抱有热情和冲劲很正常，但眼看着同事和领导资历越高，节奏越快，我也会担心自己以后能否平衡工作和生活，会遇到什么样的瓶颈。总之我不希望工作侵吞我所有的生活，如果有合适机会的话，我或许会考虑跳槽，但目前的职业方向还是不会变的。”小徐说。</p><p>然而，尽管有着迷茫和顾虑，但小徐仍坚持着自己对事物的新鲜感。给自己报的成人钢琴班已经小有成效，最近正练习着《小步舞曲》。</p><p>她是职场新人，是“程序媛”，也是“北漂”，但最重要的，她是她自己。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>最后也欢迎各位程序员（媛）关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "互联网", 
                    "tagLink": "https://api.zhihu.com/topics/19550517"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "职场", 
                    "tagLink": "https://api.zhihu.com/topics/19557876"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88712227", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 7, 
            "title": "精选27道Mybatis常见面试题总结及答案", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-35f7561d344fa11a3a1b2fee02bfbcb4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb\" width=\"529\" data-original=\"https://pic1.zhimg.com/v2-35f7561d344fa11a3a1b2fee02bfbcb4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;529&#39; height=&#39;233&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"529\" data-rawheight=\"233\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"529\" data-original=\"https://pic1.zhimg.com/v2-35f7561d344fa11a3a1b2fee02bfbcb4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-35f7561d344fa11a3a1b2fee02bfbcb4_b.jpg\"/></figure><h2><b>一、什么是Mybatis？</b></h2><ul><li>Mybatis是一个半ORM（对象关系映射）框架，它内部封装了JDBC，开发时只需要关注SQL语句本身，不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。程序员直接编写原生态sql，可以严格控制sql执行性能，灵活度高。</li><li>MyBatis 可以使用 XML 或注解来配置和映射原生信息，将 POJO映射成数据库中的记录，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>通过xml 文件或注解的方式将要执行的各种 statement 配置起来，并通过java对象和 statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。（从执行sql到返回result的过程）。</li></ul><h3><b>二、Mybaits的优点：</b></h3><ul><li>基于SQL语句编程，相当灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在XML里，解除sql与程序代码的耦合，便于统一管理；提供XML标签，支持编写动态SQL语句，并可重用。</li><li>与JDBC相比，减少了50%以上的代码量，消除了JDBC大量冗余的代码，不需要手动开关连接；</li><li>很好的与各种数据库兼容（因为MyBatis使用JDBC来连接数据库，所以只要JDBC支持的数据库MyBatis都支持）。</li><li>能够与Spring很好的集成；</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</li></ul><h3><b>三、MyBatis框架的缺点：</b></h3><ul><li>SQL语句的编写工作量较大，尤其当字段多、关联表多时，对开发人员编写SQL语句的功底有一定要求。</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。</li></ul><h3><b>四、MyBatis框架适用场合：</b></h3><ul><li>MyBatis专注于SQL本身，是一个足够灵活的DAO层解决方案。</li><li>对性能的要求很高，或者需求变化较多的项目，如互联网项目，MyBatis将是不错的选择。</li></ul><h3><b>五、MyBatis与Hibernate有哪些不同？</b></h3><ul><li>Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</li><li>Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。</li><li>Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。</li></ul><h3><b>六、#{}和${}的区别是什么？</b></h3><ul><li>{}是预编译处理，${}是字符串替换。</li><li>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋- 值；</li><li>Mybatis在处理时，就是把{}替换成变量的值。</li><li>使用#{}可以有效的防止SQL注入，提高系统安全性。</li></ul><h3><b>七、当实体类中的属性名和表中的字段名不一样 ，怎么办 ？</b></h3><ul><li>第1种：通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致。</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">selectorder</span><span class=\"err\">”</span> <span class=\"n\">parametertype</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"kt\">int</span><span class=\"err\">”</span> <span class=\"n\">resultetype</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">me</span><span class=\"o\">.</span><span class=\"na\">gacl</span><span class=\"o\">.</span><span class=\"na\">domain</span><span class=\"o\">.</span><span class=\"na\">order</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n       <span class=\"n\">select</span> <span class=\"n\">order_id</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">order_no</span> <span class=\"n\">orderno</span> <span class=\"o\">,</span><span class=\"n\">order_price</span> <span class=\"n\">price</span> <span class=\"n\">form</span> <span class=\"n\">orders</span> <span class=\"n\">where</span> <span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">};</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span></code></pre></div><ul><li>第2种：通过 &lt;resultMap&gt;来映射字段名和实体类属性名的一一对应的关系。</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;getOrder&#34;</span> <span class=\"n\">parameterType</span><span class=\"o\">=</span><span class=\"s\">&#34;int&#34;</span> <span class=\"n\">resultMap</span><span class=\"o\">=</span><span class=\"s\">&#34;orderresultmap&#34;</span><span class=\"o\">&gt;</span>\n<span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"n\">orders</span> <span class=\"n\">where</span> <span class=\"n\">order_id</span><span class=\"o\">=</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">resultMap</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">me</span><span class=\"o\">.</span><span class=\"na\">gacl</span><span class=\"o\">.</span><span class=\"na\">domain</span><span class=\"o\">.</span><span class=\"na\">order</span><span class=\"err\">”</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">orderresultmap</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;!</span><span class=\"err\">–</span><span class=\"n\">用id属性来映射主键字段</span><span class=\"err\">–</span><span class=\"o\">&gt;</span> \n    <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">id</span><span class=\"err\">”</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">order_id</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n\n    <span class=\"o\">&lt;!</span><span class=\"err\">–</span><span class=\"n\">用result属性来映射非主键字段</span><span class=\"err\">，</span><span class=\"n\">property为实体类属性名</span><span class=\"err\">，</span><span class=\"n\">column为数据表中的属性</span><span class=\"err\">–</span><span class=\"o\">&gt;</span>    \n    <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span> <span class=\"o\">=</span> <span class=\"err\">“</span><span class=\"n\">orderno</span><span class=\"err\">”</span> <span class=\"n\">column</span> <span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">order_no</span><span class=\"err\">”</span><span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">price</span><span class=\"err\">”</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">order_price</span><span class=\"err\">”</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">reslutMap</span><span class=\"o\">&gt;</span></code></pre></div><h3><b>八、 模糊查询like语句该怎么写?</b></h3><ul><li>第1种：在Java代码中添加sql通配符。</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">string</span> <span class=\"n\">wildcardname</span> <span class=\"o\">=</span> <span class=\"err\">“</span><span class=\"o\">%</span><span class=\"n\">smi</span><span class=\"o\">%</span><span class=\"err\">”</span><span class=\"o\">;</span>\n<span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">selectlike</span><span class=\"o\">(</span><span class=\"n\">wildcardname</span><span class=\"o\">);</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">selectlike</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n<span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"n\">bar</span> <span class=\"n\">like</span> <span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">value</span><span class=\"o\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span></code></pre></div><ul><li>第2种：在sql语句中拼接通配符，会引起sql注入</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">string</span> <span class=\"n\">wildcardname</span> <span class=\"o\">=</span> <span class=\"err\">“</span><span class=\"n\">smi</span><span class=\"err\">”</span><span class=\"o\">;</span>\n<span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">selectlike</span><span class=\"o\">(</span><span class=\"n\">wildcardname</span><span class=\"o\">);</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">selectlike</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n<span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"n\">foo</span> <span class=\"n\">where</span> <span class=\"n\">bar</span> <span class=\"n\">like</span> <span class=\"s\">&#34;%&#34;</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">value</span><span class=\"o\">}</span><span class=\"s\">&#34;%&#34;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span></code></pre></div><h3><b>九、通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？</b></h3><p>Dao接口即Mapper接口。接口的全限名，就是映射文件中的namespace的值；接口的方法名，就是映射文件中Mapper的Statement的id值；接口方法内的参数，就是传递给sql的参数。</p><p>Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MapperStatement。在Mybatis中，每一个 <b>&lt;select&gt;、&lt;insert&gt;、&lt;update&gt;、&lt;delete&gt;</b>标签，都会被解析为一个MapperStatement对象。</p><p>举例：<b>com.mybatis3.mappers.StudentDao.findStudentById</b>，可以唯一找到namespace为 <b>com.mybatis3.mappers.StudentDao</b>下面 id 为 findStudentById 的 MapperStatement。</p><p>Mapper接口里的方法，是不能重载的，因为是使用 全限名+方法名 的保存和寻找策略。Mapper 接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Mapper接口生成代理对象proxy，代理对象会拦截接口方法，转而执行MapperStatement所代表的sql，然后将sql执行结果返回。</p><h3><b>十、Mybatis是如何进行分页的？分页插件的原理是什么？</b></h3><p>Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页。可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><h3><b>十一、Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？</b></h3><ul><li>第一种是使用 &lt;resultMap&gt;标签，逐一定义数据库列名和对象属性名之间的映射关系。</li><li>第二种是使用sql列的别名功能，将列的别名书写为对象属性名。</li></ul><p>有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。</p><h3><b>十二、如何执行批量插入?</b></h3><p>首先,创建一个简单的insert语句:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">insert</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">insertname</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n<span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"nf\">names</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">value</span><span class=\"o\">})</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">insert</span><span class=\"o\">&gt;</span></code></pre></div><p>然后在java代码中像下面这样执行批处理插入:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"o\">&gt;</span> <span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">arraylist</span><span class=\"o\">();</span>\n    <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">fred</span><span class=\"err\">”</span><span class=\"o\">);</span>\n    <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">barney</span><span class=\"err\">”</span><span class=\"o\">);</span>\n    <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">betty</span><span class=\"err\">”</span><span class=\"o\">);</span>\n    <span class=\"n\">names</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">wilma</span><span class=\"err\">”</span><span class=\"o\">);</span>\n \n    <span class=\"c1\">// 注意这里 executortype.batch\n</span><span class=\"c1\"></span>    <span class=\"n\">sqlsession</span> <span class=\"n\">sqlsession</span> <span class=\"o\">=</span> <span class=\"n\">sqlsessionfactory</span><span class=\"o\">.</span><span class=\"na\">opensession</span><span class=\"o\">(</span><span class=\"n\">executortype</span><span class=\"o\">.</span><span class=\"na\">batch</span><span class=\"o\">);</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n     <span class=\"n\">namemapper</span> <span class=\"n\">mapper</span> <span class=\"o\">=</span> <span class=\"n\">sqlsession</span><span class=\"o\">.</span><span class=\"na\">getmapper</span><span class=\"o\">(</span><span class=\"n\">namemapper</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n     <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">string</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">names</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n         <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">insertname</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n     <span class=\"o\">}</span>\n     <span class=\"n\">sqlsession</span><span class=\"o\">.</span><span class=\"na\">commit</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n     <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n     <span class=\"n\">sqlSession</span><span class=\"o\">.</span><span class=\"na\">rollback</span><span class=\"o\">();</span> \n     <span class=\"k\">throw</span> <span class=\"n\">e</span><span class=\"o\">;</span> \n    <span class=\"o\">}</span>\n     <span class=\"k\">finally</span> <span class=\"o\">{</span>\n         <span class=\"n\">sqlsession</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span></code></pre></div><h3><b>十三、如何获取自动生成的(主)键值?</b></h3><p>insert 方法总是返回一个int值 ，这个值代表的是插入的行数。</p><p>如果采用自增长策略，自动生成的键值在 insert 方法执行完后可以被设置到传入的参数对象中。</p><p>示例：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">insert</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">insertname</span><span class=\"err\">”</span> <span class=\"n\">usegeneratedkeys</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"kc\">true</span><span class=\"err\">”</span> <span class=\"n\">keyproperty</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">id</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n     <span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"nf\">names</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">name</span><span class=\"o\">})</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">insert</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">name</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">name</span><span class=\"o\">();</span>\n    <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">setname</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">fred</span><span class=\"err\">”</span><span class=\"o\">);</span>\n \n    <span class=\"kt\">int</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">mapper</span><span class=\"o\">.</span><span class=\"na\">insertname</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n    <span class=\"c1\">// 完成后,id已经被设置到对象中\n</span><span class=\"c1\"></span>    <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">rows</span> <span class=\"n\">inserted</span> <span class=\"o\">=</span> <span class=\"err\">”</span> <span class=\"o\">+</span> <span class=\"n\">rows</span><span class=\"o\">);</span>\n    <span class=\"n\">system</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">generated</span> <span class=\"n\">key</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"err\">”</span> <span class=\"o\">+</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"na\">getid</span><span class=\"o\">());</span></code></pre></div><h3><b>十四、在mapper中如何传递多个参数?</b></h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"err\">（</span><span class=\"n\">1</span><span class=\"err\">）</span><span class=\"n\">第一种</span><span class=\"err\">：</span>\n<span class=\"c1\">//DAO层的函数\n</span><span class=\"c1\"></span><span class=\"n\">Public</span> <span class=\"nf\">UserselectUser</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span><span class=\"n\">String</span> <span class=\"n\">area</span><span class=\"o\">);</span>  \n<span class=\"c1\">//对应的xml,#{0}代表接收的是dao层中的第一个参数，#{1}代表dao层中第二参数，更多参数一致往后加即可。\n</span><span class=\"c1\"></span><span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;selectUser&#34;</span><span class=\"n\">resultMap</span><span class=\"o\">=</span><span class=\"s\">&#34;BaseResultMap&#34;</span><span class=\"o\">&gt;</span>  \n    <span class=\"n\">select</span> <span class=\"o\">*</span>  <span class=\"n\">fromuser_user_t</span>   <span class=\"n\">whereuser_name</span> <span class=\"o\">=</span> <span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">0</span><span class=\"o\">}</span> <span class=\"n\">anduser_area</span><span class=\"o\">=</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">1</span><span class=\"o\">}</span>  \n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span>  \n \n<span class=\"err\">（</span><span class=\"n\">2</span><span class=\"err\">）</span><span class=\"n\">第二种</span><span class=\"err\">：</span> <span class=\"n\">使用</span> <span class=\"nd\">@param</span> <span class=\"nl\">注解:</span>\n<span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">usermapper</span> <span class=\"o\">{</span>\n   <span class=\"n\">user</span> <span class=\"nf\">selectuser</span><span class=\"o\">(</span><span class=\"nd\">@param</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">username</span><span class=\"err\">”</span><span class=\"o\">)</span> <span class=\"n\">string</span> <span class=\"n\">username</span><span class=\"o\">,</span><span class=\"nd\">@param</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">hashedpassword</span><span class=\"err\">”</span><span class=\"o\">)</span> <span class=\"n\">string</span> <span class=\"n\">hashedpassword</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"n\">然后</span><span class=\"o\">,</span><span class=\"n\">就可以在xml像下面这样使用</span><span class=\"o\">(</span><span class=\"n\">推荐封装为一个map</span><span class=\"o\">,</span><span class=\"n\">作为单个参数传递给mapper</span><span class=\"o\">):</span>\n<span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">selectuser</span><span class=\"err\">”</span> <span class=\"n\">resulttype</span><span class=\"o\">=</span><span class=\"err\">”</span><span class=\"n\">user</span><span class=\"err\">”</span><span class=\"o\">&gt;</span>\n         <span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">username</span><span class=\"o\">,</span> <span class=\"n\">hashedpassword</span>\n         <span class=\"n\">from</span> <span class=\"n\">some_table</span>\n         <span class=\"n\">where</span> <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">username</span><span class=\"o\">}</span>\n         <span class=\"n\">and</span> <span class=\"n\">hashedpassword</span> <span class=\"o\">=</span> <span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">hashedpassword</span><span class=\"o\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span>\n \n<span class=\"err\">（</span><span class=\"n\">3</span><span class=\"err\">）</span><span class=\"n\">第三种</span><span class=\"err\">：</span><span class=\"n\">多个参数封装成map</span>\n<span class=\"k\">try</span><span class=\"o\">{</span>\n<span class=\"c1\">//映射文件的命名空间.SQL片段的ID，就可以调用对应的映射文件中的SQL\n</span><span class=\"c1\">//由于我们的参数超过了两个，而方法中只有一个Object参数收集，因此我们使用Map集合来装载我们的参数\n</span><span class=\"c1\"></span><span class=\"n\">Map</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">Object</span><span class=\"o\">&gt;</span> <span class=\"n\">map</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">HashMap</span><span class=\"o\">();</span>\n     <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;start&#34;</span><span class=\"o\">,</span> <span class=\"n\">start</span><span class=\"o\">);</span>\n     <span class=\"n\">map</span><span class=\"o\">.</span><span class=\"na\">put</span><span class=\"o\">(</span><span class=\"s\">&#34;end&#34;</span><span class=\"o\">,</span> <span class=\"n\">end</span><span class=\"o\">);</span>\n     <span class=\"k\">return</span> <span class=\"n\">sqlSession</span><span class=\"o\">.</span><span class=\"na\">selectList</span><span class=\"o\">(</span><span class=\"s\">&#34;StudentID.pagination&#34;</span><span class=\"o\">,</span> <span class=\"n\">map</span><span class=\"o\">);</span>\n <span class=\"o\">}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n     <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n     <span class=\"n\">sqlSession</span><span class=\"o\">.</span><span class=\"na\">rollback</span><span class=\"o\">();</span>\n    <span class=\"k\">throw</span> <span class=\"n\">e</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"k\">finally</span><span class=\"o\">{</span>\n <span class=\"n\">MybatisUtil</span><span class=\"o\">.</span><span class=\"na\">closeSqlSession</span><span class=\"o\">();</span>\n <span class=\"o\">}</span></code></pre></div><h3><b>十五、Mybatis动态sql有什么用？执行原理？有哪些动态sql？</b></h3><p>Mybatis动态sql可以在Xml映射文件内，以标签的形式编写动态sql，执行原理是根据表达式的值 完成逻辑判断并动态拼接sql的功能。</p><p>Mybatis提供了9种动态sql标签：<b>trim|where|set|foreach|if|choose|when|otherwise|bind</b>。</p><h3><b>十六、Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？</b></h3><p>答：<b>&lt;resultMap&gt;、&lt;parameterMap&gt;、&lt;sql&gt;、&lt;include&gt;、&lt;selectKey&gt;</b>，加上动态sql的9个标签，其中<b>&lt;sql&gt;</b>为sql片段标签，通过 <b>&lt;include&gt;</b>标签引入sql片段， <b>&lt;selectKey&gt;</b>为不支持自增的主键生成策略标签。</p><h3><b>十七、Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？</b></h3><p>不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；</p><p>原因就是namespace+id是作为Map <b>&lt;String,MapperStatement&gt;</b>的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。</p><h3><b>十八、为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？</b></h3><p>Hibernate属于全自动ORM映射工具，使用Hibernate查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而Mybatis在查询关联对象或关联集合对象时，需要手动编写sql来完成，所以，称之为半自动ORM映射工具。</p><h3><b>十九、 一对一、一对多的关联查询 ？</b></h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">mapper</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.mapping.userMapper&#34;</span><span class=\"o\">&gt;</span>  \n    <span class=\"o\">&lt;!--</span><span class=\"n\">association</span>  <span class=\"n\">一对一关联查询</span> <span class=\"o\">--&gt;</span>  \n    <span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;getClass&#34;</span> <span class=\"n\">parameterType</span><span class=\"o\">=</span><span class=\"s\">&#34;int&#34;</span> <span class=\"n\">resultMap</span><span class=\"o\">=</span><span class=\"s\">&#34;ClassesResultMap&#34;</span><span class=\"o\">&gt;</span>  \n        <span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"kd\">class</span> <span class=\"nc\">c</span><span class=\"o\">,</span><span class=\"n\">teacher</span> <span class=\"n\">t</span> <span class=\"n\">where</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">teacher_id</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">t_id</span> <span class=\"n\">and</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">c_id</span><span class=\"o\">=</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}</span>  \n    <span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span>  \n \n    <span class=\"o\">&lt;</span><span class=\"n\">resultMap</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.user.Classes&#34;</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;ClassesResultMap&#34;</span><span class=\"o\">&gt;</span>  \n        <span class=\"o\">&lt;!--</span> <span class=\"n\">实体类的字段名和数据表的字段名映射</span> <span class=\"o\">--&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;c_id&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;c_name&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">association</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;teacher&#34;</span> <span class=\"n\">javaType</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.user.Teacher&#34;</span><span class=\"o\">&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;t_id&#34;</span><span class=\"o\">/&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;t_name&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;/</span><span class=\"n\">association</span><span class=\"o\">&gt;</span>  \n    <span class=\"o\">&lt;/</span><span class=\"n\">resultMap</span><span class=\"o\">&gt;</span>  \n \n \n    <span class=\"o\">&lt;!--</span><span class=\"n\">collection</span>  <span class=\"n\">一对多关联查询</span> <span class=\"o\">--&gt;</span>  \n    <span class=\"o\">&lt;</span><span class=\"n\">select</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;getClass2&#34;</span> <span class=\"n\">parameterType</span><span class=\"o\">=</span><span class=\"s\">&#34;int&#34;</span> <span class=\"n\">resultMap</span><span class=\"o\">=</span><span class=\"s\">&#34;ClassesResultMap2&#34;</span><span class=\"o\">&gt;</span>  \n        <span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"kd\">class</span> <span class=\"nc\">c</span><span class=\"o\">,</span><span class=\"n\">teacher</span> <span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">student</span> <span class=\"n\">s</span> <span class=\"n\">where</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">teacher_id</span><span class=\"o\">=</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"na\">t_id</span> <span class=\"n\">and</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">c_id</span><span class=\"o\">=</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"na\">class_id</span> <span class=\"n\">and</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">c_id</span><span class=\"o\">=</span><span class=\"err\">#</span><span class=\"o\">{</span><span class=\"n\">id</span><span class=\"o\">}</span>  \n    <span class=\"o\">&lt;/</span><span class=\"n\">select</span><span class=\"o\">&gt;</span>  \n \n    <span class=\"o\">&lt;</span><span class=\"n\">resultMap</span> <span class=\"n\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.user.Classes&#34;</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;ClassesResultMap2&#34;</span><span class=\"o\">&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;c_id&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;c_name&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;</span><span class=\"n\">association</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;teacher&#34;</span> <span class=\"n\">javaType</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.user.Teacher&#34;</span><span class=\"o\">&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;t_id&#34;</span><span class=\"o\">/&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;t_name&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;/</span><span class=\"n\">association</span><span class=\"o\">&gt;</span>  \n \n        <span class=\"o\">&lt;</span><span class=\"n\">collection</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;student&#34;</span> <span class=\"n\">ofType</span><span class=\"o\">=</span><span class=\"s\">&#34;com.lcb.user.Student&#34;</span><span class=\"o\">&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">id</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;id&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;s_id&#34;</span><span class=\"o\">/&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"n\">result</span> <span class=\"n\">property</span><span class=\"o\">=</span><span class=\"s\">&#34;name&#34;</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"s\">&#34;s_name&#34;</span><span class=\"o\">/&gt;</span>  \n        <span class=\"o\">&lt;/</span><span class=\"n\">collection</span><span class=\"o\">&gt;</span>  \n    <span class=\"o\">&lt;/</span><span class=\"n\">resultMap</span><span class=\"o\">&gt;</span>  \n<span class=\"o\">&lt;/</span><span class=\"n\">mapper</span><span class=\"o\">&gt;</span></code></pre></div><h3><b>二十、MyBatis实现一对一有几种方式?具体怎么操作的？</b></h3><p>有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次, 通过在resultMap里面配置association节点配置一对一的类就可以完成；</p><p>嵌套查询是先查一个表，根据这个表里面的结果的 外键id，去再另外一个表里面查询数据,也是通过association配置，但另外一个表的查询通过select属性配置。</p><h3><b>二十一、MyBatis实现一对多有几种方式,怎么操作的？</b></h3><p>有联合查询和嵌套查询。联合查询是几个表联合查询,只查询一次,通过在resultMap里面的collection节点配置一对多的类就可以完成；嵌套查询是先查一个表,根据这个表里面的 结果的外键id,去再另外一个表里面查询数据,也是通过配置collection,但另外一个表的查询通过select节点配置。</p><h3><b>二十二、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？</b></h3><p>答：Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><h3><b>二十三、Mybatis的一级、二级缓存:</b></h3><p>1）一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p><p>2）二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置 &lt;cache/&gt; ；</p><p>3）对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><h3><b>二十四、什么是MyBatis的接口绑定？有哪些实现方式？</b></h3><p>接口绑定，就是在MyBatis中任意定义接口,然后把接口里面的方法和SQL语句绑定, 我们直接调用接口方法就可以,这样比起原来了SqlSession提供的方法我们可以有更加灵活的选择和设置。</p><p>接口绑定有两种实现方式,一种是通过注解绑定，就是在接口的方法上面加上 @Select、@Update等注解，里面包含Sql语句来绑定；另外一种就是通过xml里面写SQL来绑定, 在这种情况下,要指定xml映射文件里面的namespace必须为接口的全路径名。当Sql语句比较简单时候,用注解绑定, 当SQL语句比较复杂时候,用xml绑定,一般用xml绑定的比较多。</p><h3><b>二十五、使用MyBatis的mapper接口调用时有哪些要求？</b></h3><ol><li>Mapper接口方法名和mapper.xml中定义的每个sql的id相同；</li><li>Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同；</li><li>Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同；</li><li>Mapper.xml文件中的namespace即是mapper接口的类路径。</li></ol><h3><b>二十六、Mapper编写有哪几种方式？</b></h3><p><b>第一种：</b>接口实现类继承SqlSessionDaoSupport：使用此种方法需要编写mapper接口，mapper接口实现类、mapper.xml文件。</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">mappers</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">mapper</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper.xml文件的地址&#34;</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">mapper</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper.xml文件的地址&#34;</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">mappers</span><span class=\"o\">&gt;</span></code></pre></div><p>2、定义mapper接口<br/>3、实现类集成SqlSessionDaoSupport mapper方法中可以this.getSqlSession()进行数据增删改查。<br/>4、spring 配置</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">bean</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34; &#34;</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper接口的实现&#34;</span><span class=\"o\">&gt;</span>    \n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactory&#34;</span> <span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactory&#34;</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">property</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">bean</span><span class=\"o\">&gt;</span></code></pre></div><p><b>第二种：</b>使用 org.mybatis.spring.mapper.MapperFactoryBean：</p><p>1、在sqlMapConfig.xml中配置mapper.xml的位置，如果mapper.xml和mappre接口的名称相同且在同一个目录，这里可以不用配置</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">mappers</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">mapper</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper.xml文件的地址&#34;</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">mapper</span> <span class=\"n\">resource</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper.xml文件的地址&#34;</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"n\">mappers</span><span class=\"o\">&gt;</span></code></pre></div><p>2、定义mapper接口：</p><ol><li>mapper.xml中的namespace为mapper接口的地址</li><li>mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致</li><li>Spring中定义</li></ol><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">bean</span> <span class=\"n\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;org.mybatis.spring.mapper.MapperFactoryBean&#34;</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;mapperInterface&#34;</span>   <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper接口地址&#34;</span> <span class=\"o\">/&gt;</span>     \n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactory&#34;</span> <span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactory&#34;</span> <span class=\"o\">/&gt;</span> \n<span class=\"o\">&lt;/</span><span class=\"n\">bean</span><span class=\"o\">&gt;</span>\n</code></pre></div><p><b>第三种：</b>使用mapper扫描器：</p><p>1、mapper.xml文件编写：<br/>mapper.xml中的namespace为mapper接口的地址；mapper接口中的方法名和mapper.xml中的定义的statement的id保持一致；如果将mapper.xml和mapper接口的名称保持一致则不用在sqlMapConfig.xml中进行配置。</p><p>2、定义mapper接口：<br/>注意mapper.xml的文件名和mapper的接口名称保持一致，且放在同一个目录 3、配置mapper扫描器：</p><p>3、配置mapper扫描器：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"o\">&lt;</span><span class=\"n\">bean</span> <span class=\"n\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;org.mybatis.spring.mapper.MapperScannerConfigurer&#34;</span><span class=\"o\">&gt;</span>    \n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;basePackage&#34;</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;mapper接口包地址&#34;</span><span class=\"o\">&gt;&lt;/</span><span class=\"n\">property</span><span class=\"o\">&gt;</span>    \n    <span class=\"o\">&lt;</span><span class=\"n\">property</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactoryBeanName&#34;</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s\">&#34;sqlSessionFactory&#34;</span><span class=\"o\">/&gt;</span> \n<span class=\"o\">&lt;/</span><span class=\"n\">bean</span><span class=\"o\">&gt;</span></code></pre></div><p>4、使用扫描器后从spring容器中获取mapper的实现对象。</p><h3><b>二十七、简述Mybatis的插件运行原理，以及如何编写一个插件。</b></h3><p>答：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。</p><p><b>编写插件：</b>实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。</p><h3><b>读者福利</b></h3><p><b>“做程序员，圈子和学习最重要”</b>因为有了圈子可以让你少走弯路，扩宽人脉，扩展思路，学习他人的一些经验及学习方法！</p><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p>文档里的详解资料太全面，所有只把小部分知识点截图出来粗略介绍，每个小节点里面都有更细化的内容，<b>有需要的可以点赞+转发私信我【面试】获取资料领取方式！</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><p><b>微服务</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;717&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_b.jpg\"/></figure><p><b>kafka</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;711&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_b.jpg\"/></figure><p><b>部分视频资料</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "Spring MVC", 
                    "tagLink": "https://api.zhihu.com/topics/20033636"
                }, 
                {
                    "tag": "MyBatis", 
                    "tagLink": "https://api.zhihu.com/topics/19680218"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88489282", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 0, 
            "title": "员工被拼多多录取，晒出收入后网友：2倍年薪也不要去", 
            "content": "<p>这几天拼多多应该是风光无限了，目前以464亿美元超越京东市值，成为中国互联网市值第4的企业。企业有钱了，对公司和员工都是好的，公司也能够拿出更多的薪水来招聘更加优秀的人才，甚至还会出现溢价的情况。</p><p>最近在职场论坛上看到这样一个帖子：员工在北京年薪75万，被上海拼多多以150万年薪录取，纠结要不要去呢？这是怎么回事呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5ae8b195091d915e29e3ee7ae9081fca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-5ae8b195091d915e29e3ee7ae9081fca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;470&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-5ae8b195091d915e29e3ee7ae9081fca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5ae8b195091d915e29e3ee7ae9081fca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>原来该员工目前在北京上班，老婆和孩子都在北京。因为前段时间去拼多多面试了，最近也拿到了对方给出的offer，答应给出年薪150万，但条件是要去上海工作。</p><p>员工其实是有点想去拼多多的，毕竟年薪涨了快1倍了，但是又要背井离乡去上海，自己老婆和孩子又不太可能跟着去上海，现在也很纠结要去要去拼多多。另外一点，因为拼多多上班时间挺长的，也不知道能不能每半个月左右请假一次回北京看家人。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-72fd9db19cba8bfad99b628bdc89a1bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"563\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-72fd9db19cba8bfad99b628bdc89a1bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;563&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"563\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-72fd9db19cba8bfad99b628bdc89a1bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-72fd9db19cba8bfad99b628bdc89a1bb_b.jpg\"/></figure><p>不得不说拼多多还是豪气啊，一下子就给涨薪55万，至少看起来还是相当不错的。但实际上，如果是税后收入的话，其实每年也就增加了30多万吧，没有我们想象的那么高。那么，网友是怎么评价的呢？</p><p>有网友说你在北京已经可以了，工资也不错，而且肯定是买了房子，如果你去上海的话，又要重新租房子，一年估计也要10来万吧。另外，来回机票钱等都去掉的话，实际上到手的钱可能比在北京多不了多少。关键是你不在孩子身边，也不能陪伴家人，失去的也有很多。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7bfe6bf84801f814ae3b0128488f36d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic2.zhimg.com/v2-7bfe6bf84801f814ae3b0128488f36d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;522&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic2.zhimg.com/v2-7bfe6bf84801f814ae3b0128488f36d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7bfe6bf84801f814ae3b0128488f36d1_b.jpg\"/></figure><p>还有网友说出自己的亲身经历：当时从北京去杭州，每个星期回家里一次，但是每次离开家人的时候，都无法面对孩子那种眼神，最后还是放弃高薪回了北京，所以说没必要去拼多多。</p><p>还有网友说要看你自己家里情况，如果不差钱的话，当然不用去。如果家里条件紧张，肯定要去啊，毕竟你过了年薪百万，对下一份工作也有好处。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-723d874f6b41444491c02f1733ebd48b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-723d874f6b41444491c02f1733ebd48b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;616&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-723d874f6b41444491c02f1733ebd48b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-723d874f6b41444491c02f1733ebd48b_b.jpg\"/></figure><p>结语：个人认为从长远来看，去拼多多肯定利大于弊，只是短时间内可能会面临很多困难，比如说一家人不能团聚。另外一点，你完全可以在拼多多干上3年，然后再回北京找工作，那样的话，级别和薪水肯定会更高。</p><p>对此，你怎么看呢？欢迎写在评论中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b3f1274ba37b6cd1e1b2831238944e48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic1.zhimg.com/v2-b3f1274ba37b6cd1e1b2831238944e48_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;641&#39; height=&#39;556&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"641\" data-original=\"https://pic1.zhimg.com/v2-b3f1274ba37b6cd1e1b2831238944e48_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b3f1274ba37b6cd1e1b2831238944e48_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "薪酬待遇", 
                    "tagLink": "https://api.zhihu.com/topics/19605446"
                }, 
                {
                    "tag": "拼多多售假", 
                    "tagLink": "https://api.zhihu.com/topics/20223722"
                }, 
                {
                    "tag": "拼多多", 
                    "tagLink": "https://api.zhihu.com/topics/20087817"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88454774", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 3, 
            "title": "古有程咬金“三板斧”威震隋唐，现有我“三板斧”大破分布式", 
            "content": "<p>在分布式系统的很多场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。</p><p>有的时候，我们需要保证一个方法在同一时间内只能被同一个线程执行。在单机环境中，Java中其实提供了很多并发处理相关的API，但是这些API在分布式场景中就无能为力了。也就是说单纯的Java Api并不能提供分布式锁的能力。</p><p><b>目前针对分布式锁的实现目前有多种方案：</b></p><ol><li>基于数据库实现分布式锁</li><li>基于缓存（redis，memcached）实现分布式锁</li><li>基于Zookeeper实现分布式锁</li></ol><p>在分析这几种实现方案之前我们先来想一下，我们需要的分布式锁应该是怎么样的？（这里以方法锁为例，资源锁同理）</p><p>可以保证在分布式部署的应用集群中，同一个方法在同一时间只能被一台机器上的一个线程执行。</p><ul><li>这把锁要是一把可重入锁（避免死锁）</li><li>这把锁最好是一把阻塞锁（根据业务需求考虑要不要这条）</li><li>有高可用的获取锁和释放锁功能</li><li>获取锁和释放锁的性能要好</li></ul><h2><b>一. 基于数据库实现分布式锁</b></h2><h3>1.1 基于数据库表</h3><p>要实现分布式锁，最简单的方式可能就是直接创建一张锁表，然后通过操作该表中的数据来实现了。</p><p>当我们要锁住某个方法或资源时，我们就在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p><p>创建这样一张数据库表：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">CREATE</span> <span class=\"n\">TABLE</span> <span class=\"err\">`</span><span class=\"n\">methodLock</span><span class=\"err\">`</span> <span class=\"o\">(</span>\n    <span class=\"err\">`</span><span class=\"n\">id</span><span class=\"err\">`</span> <span class=\"kt\">int</span><span class=\"o\">(</span><span class=\"n\">11</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">AUTO_INCREMENT</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">主键</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n    <span class=\"err\">`</span><span class=\"n\">method_name</span><span class=\"err\">`</span> <span class=\"n\">varchar</span><span class=\"o\">(</span><span class=\"n\">64</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">DEFAULT</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">锁定的方法名</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n    <span class=\"err\">`</span><span class=\"n\">desc</span><span class=\"err\">`</span> <span class=\"n\">varchar</span><span class=\"o\">(</span><span class=\"n\">1024</span><span class=\"o\">)</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">DEFAULT</span> <span class=\"err\">&#39;</span><span class=\"n\">备注信息</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n    <span class=\"err\">`</span><span class=\"n\">update_time</span><span class=\"err\">`</span> <span class=\"n\">timestamp</span> <span class=\"n\">NOT</span> <span class=\"n\">NULL</span> <span class=\"n\">DEFAULT</span> <span class=\"n\">CURRENT_TIMESTAMP</span> <span class=\"n\">ON</span> \n    <span class=\"n\">UPDATE</span> <span class=\"n\">CURRENT_TIMESTAMP</span> <span class=\"n\">COMMENT</span> <span class=\"err\">&#39;</span><span class=\"n\">保存数据时间</span><span class=\"err\">，</span><span class=\"n\">自动生成</span><span class=\"err\">&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">PRIMARY</span> <span class=\"nf\">KEY</span> <span class=\"o\">(</span><span class=\"err\">`</span><span class=\"n\">id</span><span class=\"err\">`</span><span class=\"o\">),</span>\n    <span class=\"n\">UNIQUE</span> <span class=\"n\">KEY</span> <span class=\"err\">`</span><span class=\"n\">uidx_method_name</span><span class=\"err\">`</span> <span class=\"o\">(</span><span class=\"err\">`</span><span class=\"n\">method_name</span> <span class=\"err\">`</span><span class=\"o\">)</span> <span class=\"n\">USING</span> <span class=\"n\">BTREE</span>\n<span class=\"o\">)</span> <span class=\"n\">ENGINE</span><span class=\"o\">=</span><span class=\"n\">InnoDB</span> <span class=\"n\">DEFAULT</span> <span class=\"n\">CHARSET</span><span class=\"o\">=</span><span class=\"n\">utf8</span> <span class=\"n\">COMMENT</span><span class=\"o\">=</span><span class=\"err\">&#39;</span><span class=\"n\">锁定中的方法</span><span class=\"err\">&#39;</span><span class=\"o\">;</span></code></pre></div><p>当我们想要锁住某个方法时，执行以下SQL：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"nf\">methodLock</span><span class=\"o\">(</span><span class=\"n\">method_name</span><span class=\"o\">,</span><span class=\"n\">desc</span><span class=\"o\">)</span> <span class=\"n\">values</span> <span class=\"o\">(</span><span class=\"err\">‘</span><span class=\"n\">method_name</span><span class=\"err\">’</span><span class=\"o\">,</span><span class=\"err\">‘</span><span class=\"n\">desc</span><span class=\"err\">’</span><span class=\"o\">)</span></code></pre></div><p>因为我们对method_name做了唯一性约束，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p>当方法执行完毕之后，想要释放锁的话，需要执行以下Sql:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">delete</span> <span class=\"n\">from</span> <span class=\"n\">methodLock</span> <span class=\"n\">where</span> <span class=\"n\">method_name</span> <span class=\"o\">=</span><span class=\"err\">&#39;</span><span class=\"n\">method_name</span><span class=\"err\">&#39;</span></code></pre></div><p><b>上面这种简单的实现有以下几个问题：</b></p><ul><li>这把锁强依赖数据库的可用性，数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</li><li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</li><li>这把锁只能是非阻塞的，因为数据的insert操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。</li><li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。</li></ul><p><b>当然，我们也可以有其他方式解决上面的问题。</b></p><p>针对 <b>数据库是单点</b>问题搞两个数据库，数据之前双向同步。一旦挂掉快速切换到备库上。</p><p>针对 <b>没有失效时间</b>？只要做一个定时任务，每隔一定时间把数据库中的超时数据清理一遍。</p><p>针对 <b>非阻塞</b>的？搞一个while循环，直到insert成功再返回成功。</p><p>针对 <b>非重入</b>的？在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了。</p><h3><b>1.2 基于数据库排他锁</b></h3><p>除了可以通过增删操作数据表中的记录以外，其实还可以借助数据中自带的锁来实现分布式的锁。</p><p>我们还用刚刚创建的那张数据库表。可以通过数据库的排他锁来实现分布式锁。 基于MySql的InnoDB引擎，可以使用以下方法来实现加锁操作：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">lock</span><span class=\"o\">(){</span>\n    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"na\">setAutoCommit</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">)</span>\n    <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">){</span>\n        <span class=\"k\">try</span><span class=\"o\">{</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">select</span> <span class=\"o\">*</span> <span class=\"n\">from</span> <span class=\"n\">methodLock</span> <span class=\"n\">where</span> <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"n\">xxx</span> \n            <span class=\"k\">for</span> <span class=\"n\">update</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">==</span><span class=\"kc\">null</span><span class=\"o\">){</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span><span class=\"k\">catch</span><span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n\n        <span class=\"o\">}</span>\n        <span class=\"n\">sleep</span><span class=\"o\">(</span><span class=\"n\">1000</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p>在查询语句后面增加for update，数据库会在查询过程中给数据库表增加排他锁。当某条记录被加上排他锁之后，其他线程无法再在该行记录上增加排他锁。</p><p>我们可以认为获得排它锁的线程即可获得分布式锁，当获取到锁之后，可以执行方法的业务逻辑，执行完方法之后，再通过以下方法解锁：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">unlock</span><span class=\"o\">(){</span>\n    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"na\">commit</span><span class=\"o\">();</span>\n<span class=\"o\">}</span></code></pre></div><p>通过connection.commit()操作来释放锁。</p><p>这种方法可以有效的解决上面提到的无法释放锁和阻塞锁的问题。</p><p><b>阻塞锁</b>？ for update语句会在执行成功后立即返回，在执行失败时一直处于阻塞状态，直到成功。</p><p>锁定之后 <b>服务宕机</b>，无法释放？使用这种方式，服务宕机之后数据库会自己把锁释放掉。<br/>但是还是无法直接解决数据库单点和可重入问题。</p><h3><b>1.3 总结</b></h3><p>总结一下使用数据库来实现分布式锁的方式，这两种方式都是依赖数据库的一张表，一种是通过表中的记录的存在情况确定当前是否有锁存在，另外一种是通过数据库的排他锁来实现分布式锁。</p><p>数据库实现分布式锁的 <b>优点</b>: 直接借助数据库，容易理解。</p><p>数据库实现分布式锁的 <b>缺点</b>: 会有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。</p><p>操作数据库需要一定的开销，性能问题需要考虑。</p><h2><b>二.基于缓存实现分布式锁</b></h2><p>相比较于基于数据库实现分布式锁的方案来说，基于缓存来实现在性能方面会表现的更好一点。而且很多缓存是可以集群部署的，可以解决单点问题。</p><p>目前有很多成熟的缓存产品，包括Redis，memcached等。</p><p><b>在实现的时候要注意的几个关键点：</b></p><ol><li>锁信息必须是会过期超时的，不能让一个线程长期占有一个锁而导致死锁；</li><li>同一时刻只能有一个线程获取到锁。</li></ol><p>几个要用到的redis命令：</p><p><b>setnx(key, value)</b>：“set if not exits”，若该key-value不存在，则成功加入缓存并且返回1，否则返回0。</p><p><b>get(key)</b>：获得key对应的value值，若不存在则返回nil。</p><p><b>getset(key, value)</b>：先获取key对应的value值，若不存在则返回nil，然后将旧的value更新为新的value。</p><p><b>expire(key, seconds)</b>：设置key-value的有效期为seconds秒。</p><p>看一下流程图：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-884c1a9ccc0f5e7d53c1392930463674_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"984\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"984\" data-original=\"https://pic1.zhimg.com/v2-884c1a9ccc0f5e7d53c1392930463674_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;984&#39; height=&#39;580&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"984\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"984\" data-original=\"https://pic1.zhimg.com/v2-884c1a9ccc0f5e7d53c1392930463674_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-884c1a9ccc0f5e7d53c1392930463674_b.jpg\"/></figure><p>在这个流程下，不会导致死锁。</p><p>我采用Jedis作为Redis客户端的api，下面来看一下具体实现的代码。</p><h3><b>（1）首先要创建一个Redis连接池。</b></h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RedisPool</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">JedisPool</span> <span class=\"n\">pool</span><span class=\"o\">;</span><span class=\"c1\">//jedis连接池\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">maxTotal</span> <span class=\"o\">=</span> <span class=\"n\">20</span><span class=\"o\">;</span><span class=\"c1\">//最大连接数\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">maxIdle</span> <span class=\"o\">=</span> <span class=\"n\">10</span><span class=\"o\">;</span><span class=\"c1\">//最大空闲连接数\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"n\">minIdle</span> <span class=\"o\">=</span> <span class=\"n\">5</span><span class=\"o\">;</span><span class=\"c1\">//最小空闲连接数\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"n\">testOnBorrow</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"o\">;</span><span class=\"c1\">//在取连接时测试连接的可用性\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"n\">testOnReturn</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"o\">;</span><span class=\"c1\">//再还连接时不测试连接的可用性\n</span><span class=\"c1\"></span>\n    <span class=\"kd\">static</span> <span class=\"o\">{</span>\n        <span class=\"n\">initPool</span><span class=\"o\">();</span><span class=\"c1\">//初始化连接池\n</span><span class=\"c1\"></span>    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Jedis</span> <span class=\"nf\">getJedis</span><span class=\"o\">(){</span>\n        <span class=\"k\">return</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"na\">getResource</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">close</span><span class=\"o\">(</span><span class=\"n\">Jedis</span> <span class=\"n\">jedis</span><span class=\"o\">){</span>\n        <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">initPool</span><span class=\"o\">(){</span>\n        <span class=\"n\">JedisPoolConfig</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JedisPoolConfig</span><span class=\"o\">();</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setMaxTotal</span><span class=\"o\">(</span><span class=\"n\">maxTotal</span><span class=\"o\">);</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setMaxIdle</span><span class=\"o\">(</span><span class=\"n\">maxIdle</span><span class=\"o\">);</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setMinIdle</span><span class=\"o\">(</span><span class=\"n\">minIdle</span><span class=\"o\">);</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setTestOnBorrow</span><span class=\"o\">(</span><span class=\"n\">testOnBorrow</span><span class=\"o\">);</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setTestOnReturn</span><span class=\"o\">(</span><span class=\"n\">testOnReturn</span><span class=\"o\">);</span>\n        <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">setBlockWhenExhausted</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n        <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">JedisPool</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">,</span> <span class=\"s\">&#34;127.0.0.1&#34;</span><span class=\"o\">,</span> <span class=\"n\">6379</span><span class=\"o\">,</span> <span class=\"n\">5000</span><span class=\"o\">,</span> <span class=\"s\">&#34;liqiyao&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3><b>（2）对Jedis的api进行封装，封装一些实现分布式锁需要用到的操作。</b></h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RedisPoolUtil</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"nf\">RedisPoolUtil</span><span class=\"o\">(){}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"n\">RedisPool</span> <span class=\"n\">redisPool</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">get</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">){</span>\n        <span class=\"n\">Jedis</span> <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"o\">.</span><span class=\"na\">getJedis</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">jedis</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Long</span> <span class=\"nf\">setnx</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">){</span>\n        <span class=\"n\">Jedis</span> <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">Long</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"o\">.</span><span class=\"na\">getJedis</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">setnx</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">jedis</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">getSet</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">value</span><span class=\"o\">){</span>\n        <span class=\"n\">Jedis</span> <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"o\">.</span><span class=\"na\">getJedis</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">getSet</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">jedis</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Long</span> <span class=\"nf\">expire</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">seconds</span><span class=\"o\">){</span>\n        <span class=\"n\">Jedis</span> <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">Long</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"o\">.</span><span class=\"na\">getJedis</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">expire</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">seconds</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">jedis</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Long</span> <span class=\"nf\">del</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">key</span><span class=\"o\">){</span>\n        <span class=\"n\">Jedis</span> <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"n\">Long</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"n\">jedis</span> <span class=\"o\">=</span> <span class=\"n\">RedisPool</span><span class=\"o\">.</span><span class=\"na\">getJedis</span><span class=\"o\">();</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">del</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">){</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">jedis</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">jedis</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h3><b>（3）分布式锁工具类</b></h3><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DistributedLockUtil</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"nf\">DistributedLockUtil</span><span class=\"o\">(){</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">lock</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">lockName</span><span class=\"o\">){</span><span class=\"c1\">//lockName可以为共享变量\n</span><span class=\"c1\"></span>    <span class=\"n\">名</span><span class=\"err\">，</span><span class=\"n\">也可以为方法名</span><span class=\"err\">，</span><span class=\"n\">主要是用于模拟锁信息</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;开始尝试加锁！&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">Long</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">setnx</span>\n        <span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">,</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">5000</span><span class=\"o\">));</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">intValue</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">1</span><span class=\"o\">){</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;加锁成功！&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">expire</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">);</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;执行业务逻辑！&#34;</span><span class=\"o\">);</span>\n            <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">del</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">String</span> <span class=\"n\">lockValueA</span> <span class=\"o\">=</span> <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lockValueA</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">Long</span><span class=\"o\">.</span><span class=\"na\">parseLong</span><span class=\"o\">(</span><span class=\"n\">lockValueA</span><span class=\"o\">)</span> <span class=\"o\">&gt;=</span> \n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">()){</span>\n                <span class=\"n\">String</span> <span class=\"n\">lockValueB</span> <span class=\"o\">=</span> <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">getSet</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">,</span> \n                <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">currentTimeMillis</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"n\">5000</span><span class=\"o\">));</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">lockValueB</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">lockValueB</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">lockValueA</span><span class=\"o\">)){</span>\n                    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;加锁成功！&#34;</span><span class=\"o\">);</span>\n                    <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">expire</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">,</span> <span class=\"n\">5</span><span class=\"o\">);</span>\n                    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">Thread</span><span class=\"o\">.</span><span class=\"na\">currentThread</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">&#34;执行业务逻辑！&#34;</span><span class=\"o\">);</span>\n                    <span class=\"n\">RedisPoolUtil</span><span class=\"o\">.</span><span class=\"na\">del</span><span class=\"o\">(</span><span class=\"n\">lockName</span><span class=\"o\">);</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><h2><b>三. 基于Zookeeper实现分布式锁</b></h2><p>基于zookeeper临时有序节点可以实现的分布式锁。大致思想即为：每个客户端对某个方法加锁时，在zookeeper上的与该方法对应的指定节点的目录下，生成一个唯一的</p><p>瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。</p><h3><b>来看下Zookeeper能不能解决前面提到的问题。</b></h3><p><b>锁无法释放？</b><br/>使用Zookeeper可以有效的解决锁无法释放的问题，因为在创建锁的时候，客户端会在ZK中创建一个临时节点，一旦客户端获取到锁之后突然挂掉（Session连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</p><p><b>非阻塞锁？</b><br/>使用Zookeeper可以实现阻塞的锁，客户端可以通过在ZK中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁，便可以执行业务逻辑了。</p><p><b>不可重入</b>？<br/>使用Zookeeper也可以有效的解决不可重入的问题，客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</p><p><b>单点问题</b>？<br/>使用Zookeeper可以有效的解决单点问题，ZK是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。<br/>可以直接使用zookeeper第三方库Curator客户端，这个客户端中封装了一个可重入的锁服务。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">tryLock</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">timeout</span><span class=\"o\">,</span> <span class=\"n\">TimeUnit</span> <span class=\"n\">unit</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> \n<span class=\"n\">InterruptedException</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">interProcessMutex</span><span class=\"o\">.</span><span class=\"na\">acquire</span><span class=\"o\">(</span><span class=\"n\">timeout</span><span class=\"o\">,</span> <span class=\"n\">unit</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">unlock</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"n\">interProcessMutex</span><span class=\"o\">.</span><span class=\"na\">release</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Throwable</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">error</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n        <span class=\"n\">executorService</span><span class=\"o\">.</span><span class=\"na\">schedule</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">Cleaner</span><span class=\"o\">(</span><span class=\"n\">client</span><span class=\"o\">,</span> <span class=\"n\">path</span><span class=\"o\">),</span> \n        <span class=\"n\">delayTimeForClean</span><span class=\"o\">,</span> <span class=\"n\">TimeUnit</span><span class=\"o\">.</span><span class=\"na\">MILLISECONDS</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p>Curator提供的InterProcessMutex是分布式锁的实现。acquire方法用户获取锁，release方法用于释放锁。</p><p>使用ZK实现的分布式锁好像完全符合了本文开头我们对一个分布式锁的所有期望。但是，其实并不是，Zookeeper实现的分布式锁其实存在一个缺点，那就是性能上可能并没有缓存服务<br/>那么高。因为每次在创建锁和释放锁的过程中，都要动态创建、销毁瞬时节点来实现锁功能。ZK中创建和删除节点只能通过Leader服务器来执行，然后将数据同不到所有的Follower机器上。</p><h2><b>总结</b></h2><p>使用Zookeeper实现分布式锁的优点: 有效的解决单点问题，不可重入问题，非阻塞问题以及锁无法释放的问题。实现起来较为简单。</p><p>使用Zookeeper实现分布式锁的缺点 : 性能上不如使用缓存实现分布式锁。 需要对ZK的原理有所了解。</p><h2><b>四.三种方案的比较</b></h2><p>从理解的难易程度角度（从低到高）: 数据库 &gt; 缓存 &gt; Zookeeper</p><p>从实现的复杂性角度（从低到高）: Zookeeper &gt;= 缓存 &gt; 数据库</p><p>从性能角度（从高到低）: 缓存 &gt; Zookeeper &gt;= 数据库</p><p>从可靠性角度（从高到低）: Zookeeper &gt; 缓存 &gt; 数据库</p><p>因此我个人更加倾向于使用缓存来实现，后续的文章中会基于Redis封装一个我们自己的分布式锁实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>同时欢迎各位程序员们关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "并发并行与分布式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19827601"
                }, 
                {
                    "tag": "分布式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19570823"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88281487", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 8, 
            "title": "别再杀他们祭天了！1024程序员日那些不得不吐槽的点", 
            "content": "<p>在计算机技术中，1G=1024MB，1024是程序员们最为敏感的数字！<br/>1024还是2的十次方，是程序员最熟悉的语言。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cc96cd26e6f007cbe3d94c9280f1b2c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb\" width=\"1004\" data-original=\"https://pic4.zhimg.com/v2-cc96cd26e6f007cbe3d94c9280f1b2c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1004&#39; height=&#39;373&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1004\" data-original=\"https://pic4.zhimg.com/v2-cc96cd26e6f007cbe3d94c9280f1b2c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cc96cd26e6f007cbe3d94c9280f1b2c3_b.jpg\"/></figure><p>在这个特殊的日子里，先向各位程序员们扔出一条百度百科，再祝愿<br/>像是一个个1024，以最低调、踏实、核心的功能模块搭建起这个科技世界的程序员们</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-157c76d1f103ce0a5d325502ae4dbe6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"715\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic4.zhimg.com/v2-157c76d1f103ce0a5d325502ae4dbe6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1200&#39; height=&#39;715&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"715\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1200\" data-original=\"https://pic4.zhimg.com/v2-157c76d1f103ce0a5d325502ae4dbe6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-157c76d1f103ce0a5d325502ae4dbe6f_b.jpg\"/></figure><p>说到程序员…<br/>你们会联想到一些什么呢？<br/><b>“码农”“脱发”“奇葩”“单身狗”“修电脑的”？</b></p><p>一盘点才知道<br/>程序员们的自嘲式标签还是真的多。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1fb5f3af3105706e871811be3ff606e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-1fb5f3af3105706e871811be3ff606e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;538&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-1fb5f3af3105706e871811be3ff606e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1fb5f3af3105706e871811be3ff606e4_b.jpg\"/></figure><p>最能代表程序员的始终是<b>格子衫</b>。</p><p>前些天，各地天气全面转凉。<br/>在这个乱穿衣的四季任性切换时节里。<br/>我们在程序员那里，<br/>看到了着装统一的希望 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f5e0db75dcff71f2097093737459264b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"894\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-f5e0db75dcff71f2097093737459264b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;894&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"894\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-f5e0db75dcff71f2097093737459264b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f5e0db75dcff71f2097093737459264b_b.jpg\"/></figure><p>这和谐的场面，<br/>透露着一丝惹人怜爱的尴尬。</p><p>程序员的审美在格子衫那里得到了升华。<br/>请不要怀疑，这是公司统一着装。<br/>因为换一家公司也是如此 ……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f38913d27686d24ddef8bdc101f9e1bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1628\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-f38913d27686d24ddef8bdc101f9e1bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;692&#39; height=&#39;1628&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1628\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"692\" data-original=\"https://pic1.zhimg.com/v2-f38913d27686d24ddef8bdc101f9e1bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f38913d27686d24ddef8bdc101f9e1bc_b.jpg\"/></figure><h2><b>事实证明：码农迷恋格子衫</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0806808efbcd2ec14d7437c345f276ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic3.zhimg.com/v2-0806808efbcd2ec14d7437c345f276ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic3.zhimg.com/v2-0806808efbcd2ec14d7437c345f276ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0806808efbcd2ec14d7437c345f276ce_b.jpg\"/></figure><p>程序员小哥以碾压“全员恶人”的气势，<br/>得到了沙雕网友们的全面认可 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-07ea0c1a1c28ae4f1003d6be652a8d1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1136\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-07ea0c1a1c28ae4f1003d6be652a8d1d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;1136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-07ea0c1a1c28ae4f1003d6be652a8d1d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-07ea0c1a1c28ae4f1003d6be652a8d1d_b.jpg\"/></figure><p>而码农忠爱格子衫的理由<b>“耐脏且好洗”</b>，并追求品质的表示<b>“只要纯棉、不要涤纶”</b>，这些充满“经济适用气息”的回答，真是让小编忍不住想为他们拍起小手。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-963c4c5df00d7659eb99a94bf1ea4777_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-963c4c5df00d7659eb99a94bf1ea4777_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;438&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-963c4c5df00d7659eb99a94bf1ea4777_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-963c4c5df00d7659eb99a94bf1ea4777_b.jpg\"/></figure><p>除了“格子衫”，码农们当然还有很多其他特（<b>biāo</b>）质（<b>qiān</b>），但小编认为，这些只是在程序员们在高强度、高压力的工作下对一些生活调剂罢了。也希望广大的网友可以更加全面的认识程序员们的其他优质特点~</p><p>让我们一起赞美他们的「<b>性格单纯、待人以诚、高智商、对技术有追求、孜孜不倦学习、工作认真负责，任劳任怨、拙于表现自己、生活简单，对家庭负责</b>」吧！</p><h3><b>工作：痛并快乐着</b></h3><p>程序员去面试，面试官问：<b>“你毕业才两年，这三年工作经验是怎么来的？</b>！”<br/>程序员答：“加班。”</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e18a4e7fa70450821bd6e62def2b94d8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-e18a4e7fa70450821bd6e62def2b94d8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;665&#39; height=&#39;283&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"665\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"665\" data-original=\"https://pic1.zhimg.com/v2-e18a4e7fa70450821bd6e62def2b94d8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e18a4e7fa70450821bd6e62def2b94d8_b.jpg\"/></figure><p>这个段子真实反映了，日常工作中的程序员真的面临着巨大的压力。</p><blockquote>加班是互联网从业人员群体，特别是程序员群体的生活常态，45%程序员每日工作10小时以上，5%程序员每天工作14小时以上。</blockquote><h3><b>下面就带大家认识一下</b></h3><p><b>程序员们工作中的九种言不由衷</b></p><p><b>1.上班........下班</b><br/>做程序员的我，日常就是：<br/><b>上班</b>，</p><blockquote>晚上要加班，周末要加班，<br/>节假日还要加班，服务器崩溃要加班，<br/>服务器不崩溃也要写bug让它崩溃加班，</blockquote><p><b>下班</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cbd11842b271b4d594179e00728ea4c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"311\" data-rawheight=\"313\" class=\"content_image\" width=\"311\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;311&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"311\" data-rawheight=\"313\" class=\"content_image lazy\" width=\"311\" data-actualsrc=\"https://pic4.zhimg.com/v2-cbd11842b271b4d594179e00728ea4c7_b.jpg\"/></figure><p><b>2.老板/小姐姐又叫我修电脑时</b><br/><b>.......</b><br/><b>我秒回：好的，马上</b><br/><b>真相是：</b></p><blockquote>老板/小姐姐又叫我修电脑时<br/>我在心里面把他们骂了个遍<br/>在内心OS咆哮一万遍：<br/>我不是修电脑的！<br/>也不是杀毒的！<br/>更不是盗号的！</blockquote><p><b>我秒回：好的，马上</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5e89bc56852c2f4323b1b993fe921a9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"344\" class=\"content_image\" width=\"390\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;390&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"344\" class=\"content_image lazy\" width=\"390\" data-actualsrc=\"https://pic3.zhimg.com/v2-5e89bc56852c2f4323b1b993fe921a9e_b.jpg\"/></figure><p><b>3.肥仔产品经理过来提需求时</b><br/><b>......</b><br/><b>我说：这个功能可以啊</b><br/><b>真相是：</b></p><blockquote>肥仔产品经理过来提需求时<br/>我觉得他自己都不知道要什么<br/>等我做出来之后<br/>他就知道这也不要那也不要了</blockquote><p><b>我说：这个功能可以啊</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ee66b58c2a3e69bd76e948a32fd4255d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"205\" class=\"content_image\" width=\"198\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;198&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"205\" class=\"content_image lazy\" width=\"198\" data-actualsrc=\"https://pic2.zhimg.com/v2-ee66b58c2a3e69bd76e948a32fd4255d_b.jpg\"/></figure><p><b>4.几天后肥仔过来改需求时</b><br/><b>......</b><br/><b>我说：没问题</b><br/><b>真相是：</b></p><blockquote>肥仔产品经理又过来改需求<br/>说从用户角度来看balabalaba.....<br/>最烦你这句话了<br/>md产品都没上线什么叫“从用户的角度看？”<br/>用户呢？用户说啥了？！<br/>都是你说的！！！！！</blockquote><p><b>我说：没问题</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e28e712417042bbc1425cb62e50bb904_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"814\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic1.zhimg.com/v2-e28e712417042bbc1425cb62e50bb904_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;663&#39; height=&#39;814&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"814\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"663\" data-original=\"https://pic1.zhimg.com/v2-e28e712417042bbc1425cb62e50bb904_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e28e712417042bbc1425cb62e50bb904_b.jpg\"/></figure><p><b>5.当有人和我提 bug 时</b><br/><b>......</b><br/><b>我高兴地开始找 bug</b><br/><b>真相是：</b></p><blockquote>当有人和我提 bug 时<br/>怎么可能，在我这是好的，你会不会用啊<br/>不能先清一下缓存吗，重启电脑就行了<br/>也不知道这傻X用的什么版本的类库(jdk)<br/>尼玛怎么还在用360安全浏览器<br/>这不是bug，用户不会像你那样操作的</blockquote><p><b>我高兴地开始找 bug</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c0cdd072910ccbd5a34a1150b1a8d45c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"212\" class=\"content_image\" width=\"237\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;237&#39; height=&#39;212&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"237\" data-rawheight=\"212\" class=\"content_image lazy\" width=\"237\" data-actualsrc=\"https://pic1.zhimg.com/v2-c0cdd072910ccbd5a34a1150b1a8d45c_b.jpg\"/></figure><p><b>6.有人和我聊世界上最好的语言时</b><br/><b>......</b><br/><b>我说，每种语言都有自己的优点</b><br/><b>真相是：</b></p><blockquote>当有人和我聊世界上最好的语言时<br/>这么简单的问题还用问<br/>java是世界第一编程语言，它拥有<br/>简单性、面向对象、分布式、解释型、<br/>可靠、安全、平台无关、可移植、<br/>高性能、多线程、动态性等。<br/>它还是使用率最高的，<br/>程序员最钟爱的语言。<br/>java是世界上最好的语言！</blockquote><p><b>我说，每种语言都有自己的优点</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1941660ee69ad5538ae7544bc0897442_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"364\" class=\"content_image\" width=\"401\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;401&#39; height=&#39;364&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"364\" class=\"content_image lazy\" width=\"401\" data-actualsrc=\"https://pic3.zhimg.com/v2-1941660ee69ad5538ae7544bc0897442_b.jpg\"/></figure><p><b>7.当又有人叫我帮下小电影时</b><br/><b>......</b><br/><b>我 10 分钟，下载完成上传分享搞定</b><br/><b>真相是：</b></p><blockquote>当又有人叫我下电影时<br/>下到了7次葫芦娃<br/>3次熊出没<br/>翻遍了国内国外的论坛<br/>终于找到资源</blockquote><p><b>我 10 分钟下载完毕并开始上传分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-732e887b500e70a166e04c7c4c54b662_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb\" width=\"1008\" data-original=\"https://pic3.zhimg.com/v2-732e887b500e70a166e04c7c4c54b662_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1008&#39; height=&#39;921&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1008\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1008\" data-original=\"https://pic3.zhimg.com/v2-732e887b500e70a166e04c7c4c54b662_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-732e887b500e70a166e04c7c4c54b662_b.jpg\"/></figure><p><b>8.当有人问我我去年写的这段代码是什么意思时</b><br/><b>......</b><br/><b>我立刻就告诉了他</b><br/><b>真相是：</b></p><blockquote>当有人问我我去年写的这段代码是什么意思时<br/>我不知道<br/>这段代码是我写的吗<br/>这段代码怎么写得这么丑<br/>我看了半天，终于承认这是我写的</blockquote><p><b>我立刻就告诉了他</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-58471d3ba2b22bb3e2f34ba0c347e458_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic1.zhimg.com/v2-58471d3ba2b22bb3e2f34ba0c347e458_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic1.zhimg.com/v2-58471d3ba2b22bb3e2f34ba0c347e458_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-58471d3ba2b22bb3e2f34ba0c347e458_b.jpg\"/></figure><p><b>9.APP更新后</b><br/><b>......</b><br/><b>我清楚地告诉用户我修复了什么bug</b><br/><b>真相是：</b></p><blockquote>APP更新后<br/>我只想写：<br/>修复了一些说了你们也不懂的bug<br/>有可能是写了一些新bug<br/>让你们手机变得更卡</blockquote><p><b>我清楚地告诉用户我修复了什么bug</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8f3deee1203c148d105b33dd4c170be5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"296\" data-rawheight=\"258\" class=\"content_image\" width=\"296\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;296&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"296\" data-rawheight=\"258\" class=\"content_image lazy\" width=\"296\" data-actualsrc=\"https://pic2.zhimg.com/v2-8f3deee1203c148d105b33dd4c170be5_b.jpg\"/></figure><h2><b>脱离工作，关注娱乐</b></h2><p>根据极光大数据统计发布的《2019年中国程序员研究报告》表示，程序员上网更加关注网络<b>科技方面的内容</b>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7fa33d7120dffd038d70033ca69fde09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1115\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-7fa33d7120dffd038d70033ca69fde09_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-7fa33d7120dffd038d70033ca69fde09_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7fa33d7120dffd038d70033ca69fde09_b.jpg\"/></figure><p>他们紧跟科技潮流，走在技术前端，77.2%的程序员上网关注网络科技内容；<br/>相对整体受访者，受访程序员更为关注网络科技、游戏电竞等内容。</p><p><b>而如果程序员晚上对你说看看手机</b><br/><b>……</b><br/><b>就睡了</b></p><p><b>真相是：</b></p><blockquote>程序员晚上看看手机<br/>来两局狼人杀<br/>3 局王者荣耀<br/>逛逛zF前线买两块键盘、键帽<br/>然后 Steam 喜+1<br/>把钱花完</blockquote><p><b>就睡了</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a0022af6b1f35455eab4fdde6e052d1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1139\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a0022af6b1f35455eab4fdde6e052d1d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1139&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1139\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-a0022af6b1f35455eab4fdde6e052d1d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a0022af6b1f35455eab4fdde6e052d1d_b.jpg\"/></figure><p><b>补充工作知识和玩游戏是程序员群体在业余生活安排上区别于其他群体的特征</b>；时刻为工作做准备型，42.5%的程序员选择在业余时间补充工作知识。</p><p>身体和灵魂，总有一个在路上，<br/>在长时间工作之余，<br/>47.7%的程序员选择在家睡觉追剧等，<br/>40.7%的程序员选择玩游戏，<br/>也有部分程序员选择与朋友聚会、健身运动、外出游玩等</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d00de28b83584ee31e5d7b6a93c2a953_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d00de28b83584ee31e5d7b6a93c2a953_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;548&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d00de28b83584ee31e5d7b6a93c2a953_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d00de28b83584ee31e5d7b6a93c2a953_b.jpg\"/></figure><h2><b>“猿”命要紧，追赶健康</b></h2><p>程序员的读书历程：某语言入门 —&gt; 某语言应用实践 —&gt; 某语言高阶编程 —&gt; 某语言的科学与艺术 —&gt; 编程之美 —&gt; 编程之道 —&gt; 编程之禅—&gt; <b>亚健康恢复指南</b>。</p><p>虽是一个段子，却真实反应了程序员的工作辛劳程度。</p><p>程序员的健康一直是个不可回避的问题，经常的加班加点，给程序员们带来的不止是高薪，还有各种疾病。高薪不是没有代价的。<b>有调查显示，程序员是“十大猝死职业”之一。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1b3c2d866ed2517ecd93a07b3cc4002c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"404\" data-rawheight=\"298\" class=\"content_image\" width=\"404\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;404&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"404\" data-rawheight=\"298\" class=\"content_image lazy\" width=\"404\" data-actualsrc=\"https://pic1.zhimg.com/v2-1b3c2d866ed2517ecd93a07b3cc4002c_b.jpg\"/></figure><p>数据显示，中国程序员健康程度不高，感觉很虚弱亚健康的接近七成。<b>神经衰弱、视力下降、容易肥胖、生殖力下降甚至不育等都是程序员们经常容易得的疾病。</b>如果你看到一个男生，身体消瘦，面无血色，双眼一阵有神一阵无神，着装时好时坏，那不是犀利哥，那是程序员！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-01048844b9319118c9b7a1df321c6dcc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1134\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-01048844b9319118c9b7a1df321c6dcc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1134\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-01048844b9319118c9b7a1df321c6dcc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-01048844b9319118c9b7a1df321c6dcc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>数据报告显示，相比其他职业群体，程序员的身体健康状况并不乐观，</p><p><b>63.3%的受访程序员目前存在部分亚健康症状，仅35.1%程序员认为自己身体健康无任何疾病困扰，</b>相比其他职业，程序员可谓是不折不扣的“健康难民”。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bf26b9d3afd694c04aa88420365dc5a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1123\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bf26b9d3afd694c04aa88420365dc5a1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bf26b9d3afd694c04aa88420365dc5a1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bf26b9d3afd694c04aa88420365dc5a1_b.jpg\"/></figure><p>数据报告显示，经常性疲倦为程序员最为普遍的健康问题，</p><p><b>经常性疲倦、颈椎病、体重超标是困扰程序员群体的重要健康问题，</b></p><p><b>超过10%的受访程序员有失眠、脱发等问题****。</b></p><p>不看不知道，一看吓一跳。</p><p>小编被这些数据惊到了，相对程序员朋友们唠叨两句：</p><p>你们还那么年轻，为了更好的一种生活，为了健康、帅或美，希望大家多多运动、注重健康~</p><p><b>否则未来折磨你的并非是来自产品经理随时变化的需求以及改不完的Bug，而是身体的Bug！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-04342184103ba653de14e1a3f4b561fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"440\" data-original=\"https://pic2.zhimg.com/v2-04342184103ba653de14e1a3f4b561fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;440&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"440\" data-original=\"https://pic2.zhimg.com/v2-04342184103ba653de14e1a3f4b561fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-04342184103ba653de14e1a3f4b561fd_b.jpg\"/></figure><p><b>为了健康，冲鸭！！！</b></p><p>最后，在这里代由衷的感谢每一位程序猿，让我们现在的生活更加简单方便！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ba0d43561edf2b8f31a44a0ea97733b9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"670\" data-original=\"https://pic2.zhimg.com/v2-ba0d43561edf2b8f31a44a0ea97733b9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;670&#39; height=&#39;1192&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"670\" data-original=\"https://pic2.zhimg.com/v2-ba0d43561edf2b8f31a44a0ea97733b9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ba0d43561edf2b8f31a44a0ea97733b9_b.jpg\"/></figure><blockquote><b>10.24这个节日，我们只是以一种特有庆祝方式来向世界表达我们对他们的感谢，****向通过代码改变世界，也以实际行动在浮躁的世界里，固执地坚持自己对于知识、技术和创新追求****的程序员们表示致敬</b></blockquote><p><b>转载至公众号：网易科技</b></p><p><b>同时欢迎各位程序员们关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><p></p>", 
            "topic": [
                {
                    "tag": "1024", 
                    "tagLink": "https://api.zhihu.com/topics/19775153"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "程序猿生存必备", 
                    "tagLink": "https://api.zhihu.com/topics/19963617"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88181644", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 1, 
            "title": "你真的会用Java自定义注解吗？", 
            "content": "<p><b>注解：</b><br/>注解为我们在代码中添加信息提供一种形式化的方法，使我们可以在源码、编译时、运行时非常方便的使用这些数据。</p><p>注解是在JAVA SE5中引入的，注解让代码更干净易读并且可以实现编译期类型检查等。当创建描述性质的类或接口时，如果有重复性的工作，就可以考虑使用注解来简化或自动化该过程。我们可以让注解保存在源代码中，并且利用Annotation API处理注解，得到我们想要的数据并加以处理，注解的使用比较简单，JAVA SE5内置了3种：</p><ul><li>@Override 表示当前类中的方法将覆盖父类中的方法，如果不写也不会有错，但是@Override可以起到检查作用，如方法名拼写错误，编译器就会报警告信息。</li><li>@Deprecated 表示被标注的方法已经被废弃了，如果使用编译器会发出警告信息。</li><li>@SuppressWarnings 关闭不当的编译器警告信息。除非你确定编译器的警告信息是错误的，否则最好不要使用这个注解。</li></ul><h3><b>定义注解</b></h3><p>先来看内置注解@Override是怎么被定义的，它位于package java.lang之下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">SOURCE</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">Override</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span></code></pre></div><p>@Target、@Retention称为元注解：元注解负责注解其他的注释，如：<br/>@Target定义声明的注解的作用域（作用在类上还是方法上）<br/>@Retention定义注解在哪个级别可用，在源代码中（SOURCE）、类文件中（CLASS）、还是运行时（RUNTIME）。<br/>除了@Target、@Retention还有@Documented及@Inherited，下面用一个表格来分别列出他们各自的作用：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-015ae52e0e08289dc2c07b1fd33ef90f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"965\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb\" width=\"965\" data-original=\"https://pic4.zhimg.com/v2-015ae52e0e08289dc2c07b1fd33ef90f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;965&#39; height=&#39;242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"965\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"965\" data-original=\"https://pic4.zhimg.com/v2-015ae52e0e08289dc2c07b1fd33ef90f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-015ae52e0e08289dc2c07b1fd33ef90f_b.jpg\"/></figure><h2><b>@Retention作用范围如下图所示：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a2a3e33aae32152664a82892e2628b65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"902\" class=\"origin_image zh-lightbox-thumb\" width=\"854\" data-original=\"https://pic2.zhimg.com/v2-a2a3e33aae32152664a82892e2628b65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;854&#39; height=&#39;902&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"902\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"854\" data-original=\"https://pic2.zhimg.com/v2-a2a3e33aae32152664a82892e2628b65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a2a3e33aae32152664a82892e2628b65_b.jpg\"/></figure><h2><b>注解处理器</b></h2><p>首先来自定义一个注解：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nd\">@Target</span><span class=\"o\">(</span><span class=\"n\">ElementType</span><span class=\"o\">.</span><span class=\"na\">METHOD</span><span class=\"o\">)</span>\n<span class=\"nd\">@Retention</span><span class=\"o\">(</span><span class=\"n\">RetentionPolicy</span><span class=\"o\">.</span><span class=\"na\">RUNTIME</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">AnnotationInfo</span> <span class=\"o\">{</span>\n\n<span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"nf\">value</span><span class=\"o\">();</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">requestCode</span><span class=\"o\">()</span> <span class=\"k\">default</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>注解中定义的方法没有参数，且返回类型仅限于原始类型，字符串，枚举，注解或以上类型的集合</li><li>注解中定义的方法可以有默认值</li></ul><h3><b>运行时解析注解</b></h3><p>@Target(ElementType.METHOD)指明了我们的注解是作用在方法上的<br/>@Retention(RetentionPolicy.RUNTIME)表示注解在程序运行时期也会存在，即注解信息也会加载到虚拟机VM中，所以可以通过反射来获取注解的相关信息：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AnnotationExample</span> <span class=\"o\">{</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\">* 注解模拟请求权限\n</span><span class=\"cm\">*/</span>\n<span class=\"nd\">@AnnotationInfo</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">&#34;android.permission.CALL_PHONE&#34;</span><span class=\"o\">,</span> <span class=\"s\">&#34;android.permission.CAMERA&#34;</span><span class=\"o\">},</span> <span class=\"n\">requestCode</span> <span class=\"o\">=</span> <span class=\"n\">10</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">requestPermission</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"c1\">//其他逻辑\n</span><span class=\"c1\"></span><span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>接着来编写一个运行时解析注解的Java类：AnnotationRuntimeProcessor.java</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AnnotationRuntimeProcessor</span> <span class=\"o\">{</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"k\">try</span> <span class=\"o\">{</span>\n<span class=\"c1\">//获取AnnotationExample的Class对象\n</span><span class=\"c1\"></span><span class=\"n\">Class</span><span class=\"o\">&lt;?&gt;</span> <span class=\"n\">cls</span> <span class=\"o\">=</span> <span class=\"n\">Class</span><span class=\"o\">.</span><span class=\"na\">forName</span><span class=\"o\">(</span><span class=\"s\">&#34;com.javastudy.Annotation.AnnotationExample&#34;</span><span class=\"o\">);</span>\n<span class=\"c1\">//获取AnnotationExample类中的方法\n</span><span class=\"c1\"></span><span class=\"n\">Method</span><span class=\"o\">[]</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"n\">cls</span><span class=\"o\">.</span><span class=\"na\">getDeclaredMethods</span><span class=\"o\">();</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">Method</span> <span class=\"n\">method</span> <span class=\"o\">:</span> <span class=\"n\">methods</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//过滤不含自定义注解AnnotationInfo的方法\n</span><span class=\"c1\"></span><span class=\"kt\">boolean</span> <span class=\"n\">isHasAnnotation</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">isAnnotationPresent</span><span class=\"o\">(</span><span class=\"n\">AnnotationInfo</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isHasAnnotation</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">setAccessible</span><span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">);</span>\n<span class=\"c1\">//获取方法上的注解\n</span><span class=\"c1\"></span><span class=\"n\">AnnotationInfo</span> <span class=\"n\">aInfo</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">getAnnotation</span><span class=\"o\">(</span><span class=\"n\">AnnotationInfo</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">aInfo</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"k\">return</span><span class=\"o\">;</span>\n<span class=\"c1\">//解析注解上对应的信息\n</span><span class=\"c1\"></span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"n\">aInfo</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">();</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;value: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">permissions</span><span class=\"o\">));</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">requestCode</span> <span class=\"o\">=</span> <span class=\"n\">aInfo</span><span class=\"o\">.</span><span class=\"na\">requestCode</span><span class=\"o\">();</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;requestCode: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">requestCode</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>上面的逻辑很简单，反射拿到有注解对应类的Class对象，筛选含有注解的方法，最后获取方法上的注解并解析，运行结果如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"nl\">value:</span> <span class=\"o\">[</span><span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">permission</span><span class=\"o\">.</span><span class=\"na\">CALL_PHONE</span><span class=\"o\">,</span> <span class=\"n\">android</span><span class=\"o\">.</span><span class=\"na\">permission</span><span class=\"o\">.</span><span class=\"na\">CAMERA</span><span class=\"o\">]</span><span class=\"nl\">\n</span><span class=\"nl\">requestCode:</span> <span class=\"n\">10</span></code></pre></div><h3><b>编译时解析注解</b></h3><p>AbstractProcessor是javax下的API，java和javax都是Java的API(Application Programming Interface)包，java是核心包，javax的x是extension的意思，也就是扩展包。一般继承AbstractProcessor需要实现下面的几个方法：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ProcessorExample</span> <span class=\"kd\">extends</span> <span class=\"n\">AbstractProcessor</span> <span class=\"o\">{</span>\n\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kd\">synchronized</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(</span><span class=\"n\">ProcessingEnvironment</span> <span class=\"n\">processingEnvironment</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"c1\">//processingEnvironment提供各种工具类 如Elements Filer Types SourceVersion等\n</span><span class=\"c1\"></span><span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">init</span><span class=\"o\">(</span><span class=\"n\">processingEnvironment</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"cm\">/**\n</span><span class=\"cm\">* 扫描 评估和处理注解代码 生成Java代码\n</span><span class=\"cm\">*\n</span><span class=\"cm\">* @param set 注解类型\n</span><span class=\"cm\">* @param roundEnvironment 有关当前和以前的信息环境 查询出包含特定注解的被注解元素\n</span><span class=\"cm\">* @return 返回true 表示注解已声明 后续Processor不会再处理 false表示后续Processor会处理他们\n</span><span class=\"cm\">*/</span>\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">process</span><span class=\"o\">(</span><span class=\"n\">Set</span><span class=\"o\">&lt;?</span> <span class=\"kd\">extends</span> <span class=\"n\">TypeElement</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span><span class=\"o\">,</span> <span class=\"n\">RoundEnvironment</span> <span class=\"n\">roundEnvironment</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n<span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"n\">SourceVersion</span> <span class=\"nf\">getSupportedSourceVersion</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"k\">return</span> <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">getSupportedSourceVersion</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"nd\">@Override</span>\n<span class=\"kd\">public</span> <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"nf\">getSupportedAnnotationTypes</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"k\">return</span> <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">getSupportedAnnotationTypes</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li>init(ProcessingEnvironment env): 每一个注解处理器类都必须有一个空的构造函数。然而，这里有一个特殊的init()方法，它会被注解处理工具调用，并输入ProcessingEnviroment参数。ProcessingEnviroment提供很多有用的工具类Elements, Types和Filer。后面我们将看到详细的内容。</li><li>process(Set (? extends TypeElement) annotations, RoundEnvironment env): 这相当于每个处理器的主函数main()。你在这里写你的扫描、评估和处理注解的代码，以及生成Java文件。输入参数RoundEnviroment，可以让你查询出包含特定注解的被注解元素。后面我们将看到详细的内容。</li><li>getSupportedAnnotationTypes(): 这里你必须指定，这个注解处理器是注册给哪个注解的。注意，它的返回值是一个字符串的集合，包含本处理器想要处理的注解类型的合法全称。换句话说，你在这里定义你的注解处理器注册到哪些注解上。</li><li>getSupportedSourceVersion(): 用来指定你使用的Java版本。通常这里返回SourceVersion.latestSupported()。然而，如果你有足够的理由只支持Java 6的话，你也可以返回SourceVersion.RELEASE_6。推荐使用前者。</li></ul><p><b>也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88118109", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 5, 
            "title": "BAT面试常问的30道核心消息中间件题：RabbitMQ+ActiveMQ+Kafka", 
            "content": "<h3><b>什么是中间件？</b></h3><p>非底层操作系统软件，非业务应用软件，不是直接给最终用户使用的，不能直接给客户带来价值的软件统称为中间件。</p><h3><b>什么是消息中间件？</b></h3><p>是关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统</p><p><b>图示：</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a99ad3019e55ffbbd08c9f37ff366b64_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb\" width=\"477\" data-original=\"https://pic1.zhimg.com/v2-a99ad3019e55ffbbd08c9f37ff366b64_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;477&#39; height=&#39;374&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"374\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"477\" data-original=\"https://pic1.zhimg.com/v2-a99ad3019e55ffbbd08c9f37ff366b64_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a99ad3019e55ffbbd08c9f37ff366b64_b.jpg\"/></figure><h2><b>消息中间件RabbitMQ+ActiveMQ+Kafka的对比</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8083fef9151d697b67bcdeac870a3c52_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-8083fef9151d697b67bcdeac870a3c52_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-8083fef9151d697b67bcdeac870a3c52_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8083fef9151d697b67bcdeac870a3c52_b.jpg\"/></figure><h2><b>RabbitMQ消息中间件系列</b></h2><p><b>1：RabbitMQ 中的 broker 是指什么？cluster 又是指什么？</b></p><p>答：broker 是指一个或多个 erlang node 的逻辑分组，且 node 上运行着 RabbitMQ 应用程序。cluster 是在 broker 的基础之上，增加了 node 之间共享元数据的约束。</p><p><b>2：什么是元数据？元数据分为哪些类型？包括哪些内容？与 cluster 相关的元数据有哪些？元数据是如何保存的？元数据在 cluster 中是如何分布的？</b></p><p>答：在非 cluster 模式下，元数据主要分为 Queue 元数据（queue 名字和属性等）、Exchange 元数据（exchange 名字、类型和属性等）、Binding 元数据（存放路由关系的查找表）、Vhost 元数据（vhost 范围内针对前三者的名字空间约束和安全属性设置）。在cluster 模式下，还包括 cluster 中 node 位置信息和 node 关系信息。元数据按照 erlang node 的类型确定是仅保存于 RAM 中，还是同时保存在 RAM 和 disk 上。元数据在cluster 中是全 node 分布的。</p><p><b>3：RAM node 和 disk node 的区别？</b></p><p>答：RAM node 仅将 fabric（即 queue、exchange 和 binding 等 RabbitMQ 基础构件）相关元数据保存到内存中，但 disk node 会在内存和磁盘中均进行存储。RAM node 上唯一会存储到磁盘上的元数据是 cluster 中使用的 disk node 的地址。要求在 RabbitMQ cluster 中至少存在一个 disk node 。</p><p><b>4：RabbitMQ 上的一个 queue 中存放的 message 是否有数量限制？</b></p><p>答：可以认为是无限制，因为限制取决于机器的内存，但是消息过多会导致处理效率的下降。</p><p><b>5：RabbitMQ 概念里的 channel、exchange 和 queue 这些东东是逻辑概念，还是对应着进程实体？这些东东分别起什么作用？</b></p><p>答：queue 具有自己的 erlang 进程；exchange 内部实现为保存 binding 关系的查找表； channel 是实际进行路由工作的实体，即负责按照 routing_key 将 message 投递给queue 。由 AMQP 协议描述可知，channel 是真实 TCP 连接之上的虚拟连接，所有AMQP 命令都是通过 channel 发送的，且每一个 channel 有唯一的 ID。一个 channel 只能被单独一个操作系统线程使用，故投递到特定 channel 上的 message 是有顺序的。但一个操作系统线程上允许使用多个 channel 。channel 号为 0 的 channel 用于处理所有对于当前 connection 全局有效的帧，而 1-65535 号 channel 用于处理和特定 channel 相关的帧。</p><p>其中每一个 channel 运行在一个独立的线程上，多线程共享同一个 socket。</p><p><b>6：vhost 是什么？起什么作用？</b></p><p>答：vhost 可以理解为虚拟 broker ，即 mini-RabbitMQ server。其内部均含有独立的</p><p>queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。</p><p><b>7：为什么 heavy RPC 的使用场景下不建议采用 disk node ？</b></p><p>答：heavy RPC 是指在业务逻辑中高频调用 RabbitMQ 提供的 RPC 机制，导致不断创建、销毁 reply queue ，进而造成 disk node 的性能问题（因为会针对元数据不断写盘）。所以在使用 RPC 机制时需要考虑自身的业务场景。</p><p><b>8：向不存在的 exchange 发 publish 消息会发生什么？向不存在的 queue 执行consume 动作会发生什么？</b></p><p>答：都会收到 Channel.Close 信令告之不存在（内含原因 404 NOT_FOUND）。</p><p><b>9：routing_key 和 binding_key 的最大长度是多少？</b></p><p>答：255 字节。</p><p><b>10：RabbitMQ 允许发送的 message 最大可达多大？</b></p><p>答：根据 AMQP 协议规定，消息体的大小由 64-bit 的值来指定，所以你就可以知道到底能发多大的数据了。</p><p><b>11：什么情况下 producer 不主动创建 queue 是安全的？</b></p><p>答：1.message是允许丢失的；2.实现了针对未处理消息的republish功能（例如采用Publisher Confirm 机制）。</p><p><b>12：“dead letter”queue 的用途？</b></p><p>答：当消息被 RabbitMQ server 投递到 consumer 后，但 consumer 却通过 Basic.Reject 进行了拒绝时（同时设置 requeue=false），那么该消息会被放入“dead letter”queue 中。该 queue 可用于排查 message 被 reject 或 undeliver 的原因。</p><p><b>13：为什么说保证 message 被可靠持久化的条件是 queue 和 exchange 具有durable 属性，同时 message 具有 persistent 属性才行？</b></p><p>答：binding 关系可以表示为 exchange – binding – queue 。从文档中我们知道，若要求投递的 message 能够不丢失，要求 message 本身设置 persistent 属性，要求 exchange 和 queue 都设置 durable 属性。其实这问题可以这么想，若 exchange 或 queue 未设置durable 属性，则在其 crash 之后就会无法恢复，那么即使 message 设置了 persistent 属性，仍然存在 message 虽然能恢复但却无处容身的问题；同理，若 message 本身未设置persistent 属性，则 message 的持久化更无从谈起。</p><p><b>14：什么情况下会出现 blackholed 问题？</b></p><p>答：blackholed 问题是指，向 exchange 投递了 message ，而由于各种原因导致该message 丢失，但发送者却不知道。可导致 blackholed 的情况：1.向未绑定 queue 的exchange 发送 message；2.exchange 以 binding_key key_A 绑定了 queue queue_A，但向该 exchange 发送 message 使用的 routing_key 却是 key_B。</p><p><b>15：如何防止出现 blackholed 问题？</b></p><p>答：没有特别好的办法，只能在具体实践中通过各种方式保证相关 fabric 的存在。另外， 如果在执行 Basic.Publish 时设置 mandatory=true ，则在遇到可能出现 blackholed 情况时，服务器会通过返回 Basic.Return 告之当前 message 无法被正确投递（内含原因 312 NO_ROUTE）。</p><p><b>16：Consumer Cancellation Notification 机制用于什么场景？</b></p><p>答：用于保证当镜像 queue 中 master 挂掉时，连接到 slave 上的 consumer 可以收到自身 consume 被取消的通知，进而可以重新执行 consume 动作从新选出的 master 出获得消息。若不采用该机制，连接到 slave 上的 consumer 将不会感知 master 挂掉这个事情，导致后续无法再收到新 master 广播出来的 message 。另外，因为在镜像 queue 模式下，存在将 message 进行 requeue 的可能，所以实现 consumer 的逻辑时需要能够正确处理出现重复 message 的情况。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d8b8aa3a12ab2bf40a63f55e2e1e2205_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-d8b8aa3a12ab2bf40a63f55e2e1e2205_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-d8b8aa3a12ab2bf40a63f55e2e1e2205_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d8b8aa3a12ab2bf40a63f55e2e1e2205_b.jpg\"/></figure><h2><b>ActiveMQ消息中间件系列</b></h2><p><b>1.什么是 ActiveMQ?</b></p><p>答：activeMQ 是一种开源的，实现了 JMS1.1 规范的，面向消息(MOM)的中间件，为应用程序提供高效的、可扩展的、稳定的和安全的企业级消息通信</p><p><b>2.ActiveMQ 服务器宕机怎么办？</b></p><p>答：这得从 ActiveMQ 的储存机制说起。在通常的情况下，非持久化消息是存储在内存中的，持久化消息是存储在文件中的，它们的最大限制在配置文件的节点中配置。但是，在非持久化消息堆积到一定程度，内存告急的时候，ActiveMQ 会将内存中的非持久化消息写入临时文件中，以腾出内存。虽然都保存到了文件里，但它和持久化消息的区别是，重启后持久化消息会从文件中恢复，非持久化的临时文件会直接删除。</p><p>那如果文件增大到达了配置中的最大限制的时候会发生什么？我做了以下实验：</p><p>设置 2G 左右的持久化文件限制，大量生产持久化消息直到文件达到最大限制，此时生产者阻塞，但消费者可正常连接并消费消息，等消息消费掉一部分，文件删除又腾出空间之后，生产者又可继续发送消息， 服务自动恢复正常。</p><p>设置 2G 左右的临时文件限制，大量生产非持久化消息并写入临时文件，在达到最大限制时，生产者阻塞，消费者可正常连接但不能消费消息，或者原本慢速消费的消费者，消费突然停止。整个系统可连接， 但是无法提供服务，就这样挂了。</p><p>具体原因不详，解决方案：尽量不要用非持久化消息，非要用的话，将临时文件限制尽可能的调大。</p><p><b>3.丢消息怎么办？</b></p><p>答：这得从 java 的 java.net.SocketException 异常说起。简单点说就是当网络发送方发送一堆数据，然后调用 close 关闭连接之后。这些发送的数据都在接收者的缓存里，接收者如果调用 read 方法仍旧能从缓存中读取这些数据，尽管对方已经关闭了连接。但是当接收者尝试发送数据时，由于此时连接已关闭，所以会发生异常，这个很好理解。不过需要注意的是，当发生 SocketException 后，原本缓存区中数据也作废了，此时接收者再次调用 read 方法去读取缓存中的数据，就会报 Software caused connection abort: recv failed 错误。</p><p>通过抓包得知，ActiveMQ 会每隔 10 秒发送一个心跳包，这个心跳包是服务器发送给客户端的，用来判断客户端死没死。如果你看过上面第一条，就会知道非持久化消息堆积到一定程度会写到文件里，这个写的过程会阻塞所有动作，而且会持续 20 到 30 秒，并且随着内存的增大而增大。当客户端发完消息调用connection.close()时，会期待服务器对于关闭连接的回答，如果超过 15 秒没回答就直接调用 socket 层的 close 关闭 tcp 连接了。这时客户端发出的消息其实还在服务器的缓存里等待处理，不过由于服务器心跳包的设置，导致发生了 java.net.SocketException 异常，把缓存里的数据作废了，没处理的消息全部丢失。</p><p>解决方案：用持久化消息，或者非持久化消息及时处理不要堆积，或者启动事务，启动事务后，</p><p>commit()方法会负责任的等待服务器的返回，也就不会关闭连接导致消息丢失了。</p><p><b>4.持久化消息非常慢。</b></p><p>答：默认的情况下，非持久化的消息是异步发送的，持久化的消息是同步发送的，遇到慢一点的硬盘，发送消息的速度是无法忍受的。但是在开启事务的情况下，消息都是异步发送的，效率会有 2 个数量级的提升。所以在发送持久化消息时，请务必开启事务模式。其实发送非持久化消息时也建议开启事务，因为根本不会影响性能。</p><p><b>5.消息的不均匀消费。</b></p><p>答：有时在发送一些消息之后，开启 2 个消费者去处理消息。会发现一个消费者处理了所有的消息，另一个消费者根本没收到消息。原因在于 ActiveMQ 的 prefetch 机制。当消费者去获取消息时，不会一条一条去获取，而是一次性获取一批，默认是 1000 条。这些预获取的消息，在还没确认消费之前，在管理控制台还是可以看见这些消息的，但是不会再分配给其他消费者，此时这些消息的状态应该算作“已分配未消 费”，如果消息最后被消费，则会在服务器端被删除，如果消费者崩溃，则这些消息会被重新分配给新的消费者。但是如果消费者既不消费确认，又不崩溃，那这些消息就永远躺在消费者的缓存区里无法处理。更通常的情况是，消费这些消息非常耗时，你开了 10 个消费者去处理，结果发现只有一台机器吭哧吭哧</p><p>处理，另外 9 台啥事不干。</p><p>解决方案：将 prefetch 设为 1，每次处理 1 条消息，处理完再去取，这样也慢不了多少。</p><p><b>6.死信队列。</b></p><p>答：如果你想在消息处理失败后，不被服务器删除，还能被其他消费者处理或重试，可以关闭AUTO_ACKNOWLEDGE，将 ack 交由程序自己处理。那如果使用了 AUTO_ACKNOWLEDGE，消息是什么时候被确认的，还有没有阻止消息确认的方法？有！</p><p>消费消息有 2 种方法：</p><ul><li>一种是调用 consumer.receive()方法，该方法将阻塞直到获得并返回一条消息。这种情况下，消息返回给方法调用者之后就自动被确认了。</li><li>一种方法是采用 listener 回调函数，在有消息到达时，会调用 listener 接口的 onMessage 方法。在这种情况下，在 onMessage 方法执行完毕后， 消息才会被确认，此时只要在方法中抛出异常，该消息就不会被确认。</li></ul><p>那么问题来了，如果一条消息不能被处理，会被退回服务器重新分配，如果只有一个消费者，该消息又会重新被获取，重新抛异常。就算有多个消费者，往往在一个服务器上不能处理的消息，在另外的服务器上依然不能被处理。难道就这么退回–获取–报错死循环了吗？</p><p>在重试 6 次后，ActiveMQ 认为这条消息是“有毒”的，将会把消息丢到死信队列里。如果你的消息不见了，去 ActiveMQ.DLQ 里找找，说不定就躺在那里。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-33f4c18d7a3a9eb81fb1fd6c86601ba3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-33f4c18d7a3a9eb81fb1fd6c86601ba3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-33f4c18d7a3a9eb81fb1fd6c86601ba3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-33f4c18d7a3a9eb81fb1fd6c86601ba3_b.jpg\"/></figure><h2><b>Kafka消息中间件系列</b></h2><p><b>1.Kafka 的设计时什么样的呢？</b></p><p>Kafka 将消息以 topic 为单位进行归纳</p><p>将向 Kafka topic 发布消息的程序成为 producers.</p><p>将预订 topics 并消费消息的程序成为 consumer.</p><p>Kafka 以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个 broker. producers 通过网络将消息发送到 Kafka 集群，集群向消费者提供消息</p><p><b>2.数据传输的事物定义有哪三种？</b></p><p>答：数据传输的事务定义通常有以下三种级别：</p><p>（1）最多一次: 消息不会被重复发送，最多被传输一次，但也有可能一次不传输</p><p>（2）最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输.</p><p>（3）精确的一次（Exactly once）:不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的</p><p><b>3.Kafka 判断一个节点是否还活着有那两个条件？</b></p><p>答：<br/>（1）节点必须可以维护和 ZooKeeper 的连接，Zookeeper 通过心跳机制检查每个节点的连接</p><p>（2）如果节点是个 follower,他必须能及时的同步 leader 的写操作，延时不能太久</p><p><b>4.producer 是否直接将数据发送到 broker 的 leader(主节点)？</b></p><p>答：producer 直接将数据发送到 broker 的 leader(主节点)，不需要在多个节点进行分发，为了帮助 producer 做到这点，所有的 Kafka 节点都可以及时的告知:哪些节点是活动的，目标topic 目标分区的 leader 在哪。这样 producer 就可以直接将消息发送到目的地了</p><p><b>5、Kafa consumer 是否可以消费指定分区消息？</b></p><p>答：Kafaconsumer 消费消息时，向 broker 发出&#34;fetch&#34;请求去消费特定分区的消息，consumer 指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息，customer 拥有了 offset 的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的</p><p><b>6、Kafka 消息是采用 Pull 模式，还是 Push 模式？</b></p><p>答：Kafka 最初考虑的问题是，customer 应该从 brokes 拉取消息还是 brokers 将消息推送到consumer，也就是 pull 还 push。在这方面，Kafka 遵循了一种大部分消息系统共同的传统的设计：producer 将消息推送到 broker，consumer 从 broker 拉取消息</p><p>一些消息系统比如 Scribe 和 ApacheFlume 采用了 push 模式，将消息推送到下游的consumer。这样做有好处也有坏处：由 broker 决定消息推送的速率，对于不同消费速率的consumer 就不太好处理了。消息系统都致力于让 consumer 以最大的速率最快速的消费消息，但不幸的是，push 模式下，当 broker 推送的速率远大于 consumer 消费的速率时， consumer 恐怕就要崩溃了。最终 Kafka 还是选取了传统的 pull 模式</p><p>Pull 模式的另外一个好处是 consumer 可以自主决定是否批量的从 broker 拉取数据。Push 模式必须在不知道下游 consumer 消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免 consumer 崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull 模式下，consumer 就可以根据自己的消费能力去决</p><p>定这些策略</p><p>Pull 有个缺点是，如果 broker 没有可供消费的消息，将导致 consumer 不断在循环中轮询， 直到新消息到 t 达。为了避免这点，Kafka 有个参数可以让 consumer 阻塞知道新消息到达(当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发</p><p><b>7.Kafka 的消费者如何消费数据</b></p><p>答：消费者每次消费数据的时候，消费者都会记录消费的物理偏移量（offset）的位置等到下次消费时，他会接着上次位置继续消费</p><p><b>8.消费者负载均衡策略</b></p><p>答：一个消费者组中的一个分片对应一个消费者成员，他能保证每个消费者成员都能访问，如果组中成员太多会有空闲的成员</p><p><b>9数据有序</b></p><p>答：一个消费者组里它的内部是有序的消费者组与消费者组之间是无序的</p><p><b>10.kafaka 生产数据时数据的分组策略</b></p><p>答：生产者决定数据产生到集群的哪个 partition 中每一条消息都是以（key，value）格式</p><p>Key 是由生产者发送数据传入</p><p>所以生产者（key）决定了数据产生到集群的哪个 partition</p><h2><b>读者福利</b></h2><p><b>“做程序员，圈子和学习最重要”因为有了圈子可以让你少走弯路，扩宽人脉，扩展思路，学习他人的一些经验及学习方法！</b></p><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p>文档里的详解资料太全面，所有只把小部分知识点截图出来粗略介绍，每个小节点里面都有更细化的内容，<b>有需要的可以点赞+转发私信我【面试】获取资料领取方式！</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><p><b>微服务</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;717&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"717\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cfba41a505d4db6b17d7f432e3e6cf6e_b.jpg\"/></figure><p><b>kafka</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;711&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-265ef556842210b2f2ee32be2578f95f_b.jpg\"/></figure><p><br/><b>部分视频资料</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "消息队列", 
                    "tagLink": "https://api.zhihu.com/topics/19708788"
                }, 
                {
                    "tag": "中间件", 
                    "tagLink": "https://api.zhihu.com/topics/19599657"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87970615", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 8, 
            "title": "Java程序员面试必备十大内功核心要点，锋芒九州，剑指大厂！", 
            "content": "<h2><b>前言</b></h2><p>这一年，网络上频繁爆出各大知名的互联网企业，进行裁员的事件，很多人都心生担忧，互联网是否真的进入了寒冬？不管是裁员还是降薪，都是企业提高盈利的手段，这非常真实。如果怕被裁员，就永远别找工作了，哪里都存在裁员的风险。对于在职几年的人，需要迅速梳理自己的亮点，看看自己能在哪个方向做得更好，看看怎样把自己的价值展示出来，让领导意识到你的重要性，对于技术人来说，更要努力提高自己的专业技能，适应环境，利器必先修内功。<br/><b>下面是我总结的一些互联网公司Java程序员面试所要储备的技术知识及面试专题和答案，希望能帮助到那些想要跳槽换工作的朋友找到一个自己满意的工作。</b></p><blockquote>（由于篇幅限制，以下面试专题答案全部整理在一个PDF文档了，文档里的详解资料太全面，所有只把部分知识点截图出来粗略介绍，每个小节点里面都有更细化的内容，<b>有需要的可以私信我【面试】获取资料领取方式！</b></blockquote><h2><b>需要准备的技术知识</b></h2><p>以下为这些面试中常问的面试问题，不过这些问题只是冰山一角，就算都会了也不能怎么样，最最重要的，还是坚实的基础，清醒的头脑。</p><h3><b>Java基础必备</b></h3><ol><li>HashMap，HashTable，ConcurrentHashMap的区别。</li><li>ArrayList 和 Vector 的区别。</li><li>说说 ArrayList,Vector, LinkedList 的存储性能和特性。</li><li>快速失败 (fail-­fast) 和安全失败 (fail-­safe) 的区别是什么？</li><li>hashmap 的数据结构。</li><li>HashMap 的工作原理是什么?</li><li>Hashmap 什么时候进行扩容呢？</li><li>DK8中对HashMap做了怎样的优化。</li><li>List、Map、Set 三个接口，存取元素时，各有什么特点？</li><li>动态代理的两种方式，以及区别。</li><li>@transactional注解在什么情况下会失效，为什么。</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2505552574c50602f119fe22036f7dbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"695\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-2505552574c50602f119fe22036f7dbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;695&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"695\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-2505552574c50602f119fe22036f7dbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2505552574c50602f119fe22036f7dbe_b.jpg\"/></figure><h2><b>算法与数据结构</b></h2><ol><li>B+树</li><li>快速排序，堆排序，插入排序（其实八大排序算法都应该了解</li><li>一致性Hash算法，一致性Hash算法的应用</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a0c658eb46126550ac90a40878b372a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-a0c658eb46126550ac90a40878b372a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;727&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-a0c658eb46126550ac90a40878b372a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a0c658eb46126550ac90a40878b372a2_b.jpg\"/></figure><h2><b>JVM性能优化</b></h2><ol><li>xJava 内存分配？</li><li>GC 是什么? 为什么要有 GC？</li><li>简述 Java 垃圾回收机制。垃圾回收器的基本原理是什么？</li><li>什么是分布式垃圾回收（DGC）？</li><li>Java类加载的过程？双亲委派机制？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5fbee70246d39eeae4e58ae4185ef5f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"756\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-5fbee70246d39eeae4e58ae4185ef5f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;756&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"756\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-5fbee70246d39eeae4e58ae4185ef5f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5fbee70246d39eeae4e58ae4185ef5f5_b.jpg\"/></figure><h2><b>多线程与并发</b></h2><ol><li>什么是多线程并发和并行？什么是线程安全问题？</li><li>什么是可重入锁、乐观锁、悲观锁、公平锁、非公平锁、独占锁、共享锁？</li><li>讲讲ThreadLocal 的实现原理？ThreadLocal 作为变量的线程隔离方式，其内部是如何做的？</li><li>独占锁 ReentrantLock 原理？读写锁 ReentrantReadWriteLock 原理？</li><li>基于链表的非阻塞无界队列 ConcurrentLinkedQueue 原理？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-906781d64b7e75ab7cbf4409a86371c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"718\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-906781d64b7e75ab7cbf4409a86371c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;718&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"718\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-906781d64b7e75ab7cbf4409a86371c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-906781d64b7e75ab7cbf4409a86371c7_b.jpg\"/></figure><h2><b>数据库相关</b></h2><ol><li>请简洁描述 MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</li><li>MySQL 中使用什么存储引擎？MySQL 中有哪几种锁？</li><li>什么是 MongoDB？MongoDB 特点？MongoDB 的功能？MongoDB 的适用场景？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f47eb50918b47ac8fa0257ed92e3d9d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"709\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-f47eb50918b47ac8fa0257ed92e3d9d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;709&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"709\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-f47eb50918b47ac8fa0257ed92e3d9d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f47eb50918b47ac8fa0257ed92e3d9d0_b.jpg\"/></figure><h2><b>网络协议</b></h2><ol><li>谈谈TCP与UDP区别？</li><li>三次握手，四次挥手？为什么要四次挥手？</li><li>什么是粘包与半包问题?粘包与半包为何会出现?如何避免粘包与半包问题？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-42499d88da942263d8d959af65d05549_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"734\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-42499d88da942263d8d959af65d05549_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;734&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"734\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-42499d88da942263d8d959af65d05549_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-42499d88da942263d8d959af65d05549_b.jpg\"/></figure><h2><b>设计模式</b></h2><ol><li>J2EE 常用的设计模式？说明工厂模式？</li><li>开发中都用到了那些设计模式?用在什么场合？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7ed3c227c4ba5de2af1489fb64881f6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"737\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-7ed3c227c4ba5de2af1489fb64881f6a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;737&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"737\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-7ed3c227c4ba5de2af1489fb64881f6a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7ed3c227c4ba5de2af1489fb64881f6a_b.jpg\"/></figure><h2><b>分布式与中间件</b></h2><ol><li>zookeeper的负载均衡算法有哪些?</li><li>业务中使用分布式的场景？Session 分布式方案?</li><li>分布式锁的场景?分布是锁的实现方案?</li><li>分布式事务?集群与负载均衡的算法与实现?</li><li>分库与分表设计?分库与分表带来的分布式困境与应对之策?</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fd3b46ee708f5816de7e126612057843_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"715\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-fd3b46ee708f5816de7e126612057843_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;715&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"715\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-fd3b46ee708f5816de7e126612057843_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fd3b46ee708f5816de7e126612057843_b.jpg\"/></figure><h2><b>缓存相关</b></h2><ol><li>Redis和memcached的区别？Redis支持哪些数据结构？</li><li>Redis是单线程的么，所有的工作都是单线程么？</li><li>Redis如何存储一个String的？Redis的部署方式，主从，集群？</li><li>Redis的哨兵模式，一个key值如何在Redis集群中找到存储在哪里？Redis持久化策略？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b589758f7b4a315606100f2b4780ffde_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b589758f7b4a315606100f2b4780ffde_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;711&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-b589758f7b4a315606100f2b4780ffde_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b589758f7b4a315606100f2b4780ffde_b.jpg\"/></figure><h2><b>源码框架相关</b></h2><ol><li>什么是 Spring 框架？Spring 框架有哪些主要模块？什么是控制反转 (IOC)？什么是依赖注入？</li><li>BeanFactory 和 ApplicationContext 有什么区别？</li><li>简单的谈一下 Spring MVC 的工作流程。</li><li>@ModelAttribute 如何使用？说说你对自定义数据类型转换器的理解。</li><li>什么是 MyBatis 的接口绑定，有什么好处？</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-203b231b6e106291c5e626a9684a8825_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-203b231b6e106291c5e626a9684a8825_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;711&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-203b231b6e106291c5e626a9684a8825_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-203b231b6e106291c5e626a9684a8825_b.jpg\"/></figure><h2><b>总结</b></h2><p>无论是哪家公司，都很重视高并发高可用的技术，重视基础，重视JVM。面试是一个双向选择的过程，不要抱着畏惧的心态去面试，不利于自己的发挥。同时看中的应该不止薪资，还要看你是不是真的喜欢这家公司，是不是能真的得到锻炼。其实写了这么多，并不一定适用于所有人，相信经过一些面试，大家都会有这些感触。如果这些能够帮到你，那就最好了！</p><h2><b>读者福利</b></h2><p><b>“做程序员，圈子和学习最重要”因为有了圈子可以让你少走弯路，扩宽人脉，扩展思路，学习他人的一些经验及学习方法！</b></p><p>同时在这里分享一下一直以来整理的Java后端进阶笔记文档和学习资料免费分享给大家！</p><p>由于篇幅限制，以上面试专题答案全部整理在一个PDF文档了，文档里的详解资料太全面，所有只把部分知识点截图出来粗略介绍，每个小节点里面都有更细化的内容，<b>有需要的可以私信我【面试】获取资料领取方式！</b></p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-19e5a8395607e13aabb9a60bb6d1791b_b.jpg\"/></figure><p><b>更多笔记分享</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f4005dc6739807ee3b694500e7c17d02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic3.zhimg.com/v2-f4005dc6739807ee3b694500e7c17d02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic3.zhimg.com/v2-f4005dc6739807ee3b694500e7c17d02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f4005dc6739807ee3b694500e7c17d02_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;702&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"702\" data-original=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fe05b5db505cddc4f32d408c07c2ec05_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87910491", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 5, 
            "title": "MySQL 索引B+树原理，以及建索引的几大原则", 
            "content": "<p>MySQL事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2><b>一、存储引擎的比较</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aec015396270cfff1cdd4b0897e5ad3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"423\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"423\" data-original=\"https://pic2.zhimg.com/v2-aec015396270cfff1cdd4b0897e5ad3d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;423&#39; height=&#39;500&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"423\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"423\" data-original=\"https://pic2.zhimg.com/v2-aec015396270cfff1cdd4b0897e5ad3d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aec015396270cfff1cdd4b0897e5ad3d_b.jpg\"/></figure><p><b>注</b>：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2><b>二、B-树、B+树概念</b></h2><h3><b>B树</b></h3><p><b>即二叉搜索树</b>：</p><ol><li>所有非叶子结点至多拥有两个儿子（Left和Right）；</li><li>所有结点存储一个关键字；</li><li>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</li></ol><p>如：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a605dde43824d9e17cac0865e34dae00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"252\" class=\"content_image\" width=\"247\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;247&#39; height=&#39;252&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"252\" class=\"content_image lazy\" width=\"247\" data-actualsrc=\"https://pic1.zhimg.com/v2-a605dde43824d9e17cac0865e34dae00_b.jpg\"/></figure><p><b>B-树</b></p><p><b>是一种多路搜索树（并不是二叉的）</b>：</p><ol><li>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</li><li>根结点的儿子数为[2, M]；</li><li>除根结点以外的非叶子结点的儿子数为[M/2, M]；</li><li>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</li><li>非叶子结点的关键字个数=指向儿子的指针个数-1；</li><li>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</li><li>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</li><li>所有叶子结点位于同一层；</li></ol><p>如：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a3c9bf06572cc21d75f179293e08c133_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-a3c9bf06572cc21d75f179293e08c133_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-a3c9bf06572cc21d75f179293e08c133_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a3c9bf06572cc21d75f179293e08c133_b.jpg\"/></figure><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><b>B-树的特性</b>：</p><ol><li>关键字集合分布在整颗树中；</li><li>任何一个关键字出现且只出现在一个结点中；</li><li>搜索有可能在非叶子结点结束；</li><li>其搜索性能等价于在关键字全集内做一次二分查找；</li><li>自动层次控制；</li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率。所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p><p><b>B+树</b></p><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li>其定义基本与B-树同，除了：</li><li>非叶子结点的子树指针与关键字个数相同；</li><li>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</li><li>为所有叶子结点增加一个链指针；</li><li>所有关键字都在叶子结点出现；</li></ol><p>如：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-83483fe11a476bcad215a6e5542d1868_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic1.zhimg.com/v2-83483fe11a476bcad215a6e5542d1868_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;569&#39; height=&#39;345&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"569\" data-original=\"https://pic1.zhimg.com/v2-83483fe11a476bcad215a6e5542d1868_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-83483fe11a476bcad215a6e5542d1868_b.jpg\"/></figure><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在</p><p>非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><b>B+的特性</b>：</p><ol><li>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</li><li>不可能在非叶子结点命中；</li><li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</li><li>更适合文件索引系统；</li></ol><p>了解B-/B+树的概念之后，我们继续分析B+树提高效率的原理。</p><h2><b>三、B+树索引原理</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9cd809d2d4436919f4c02318e8f0c075_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"519\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-9cd809d2d4436919f4c02318e8f0c075_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;519&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"519\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-9cd809d2d4436919f4c02318e8f0c075_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9cd809d2d4436919f4c02318e8f0c075_b.jpg\"/></figure><p>如上图，是一颗b+树，关于b+树的定义可以参见B+树，这里只说一些重点，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><h3><b>b+树的查找过程</b></h3><p>如图所示，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</p><h3><b>b+树性质</b></h3><p>1、通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p><p>2、当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p><h3><b>慢查询优化</b></h3><p>关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则。</p><h2><b>四、建索引的几大原则</b></h2><p>1、最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2、=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3、尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4、索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><p>5、尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "MySQL", 
                    "tagLink": "https://api.zhihu.com/topics/19554128"
                }, 
                {
                    "tag": "索引", 
                    "tagLink": "https://api.zhihu.com/topics/19621412"
                }, 
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87744630", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 4, 
            "title": "放手一搏：社招Java岗面试经历(三年经验): PingCAP、蚂蚁", 
            "content": "<h2><b>前言</b></h2><p>今年想出来看看机会，最后很幸运地拿到了 PingCAP，今日头条的 offer 以及蚂蚁金服的口头 offer。想着可以总结一下经验，分享一下自己这一段&#34;骑驴找马&#34;过的心路历程。当然，一家之言，难免粗浅，如有不妥，敬请指正。</p><p>全文有点长，假如只对一家公司感兴趣的话可以直接跳过去：<b>如需要面试真题汇总的可以私信我【面试】即可获取！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6fbd4426499bba2f9bb39ea3e9ee18f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1057\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb\" width=\"1057\" data-original=\"https://pic1.zhimg.com/v2-6fbd4426499bba2f9bb39ea3e9ee18f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1057&#39; height=&#39;706&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1057\" data-rawheight=\"706\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1057\" data-original=\"https://pic1.zhimg.com/v2-6fbd4426499bba2f9bb39ea3e9ee18f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6fbd4426499bba2f9bb39ea3e9ee18f4_b.jpg\"/></figure><h2><b>准备过程</b></h2><p>我自己是本科毕业后在老东家干了三年多，老东家算是一家&#34;小公司&#34;(毕竟这年头没有 BAT 或 TMD 的 title 都不好意思报出身)，毕业这两年多我也没有在大厂待过，因此找坑的时候是非常非常虚的。迫于心慌，我好好思考了一阵来给自己打气，当时真正找坑和准备面试的过程大概分为这几个阶段：</p><p><b>反思</b>：自己是不是真的要离职，假如不离职，在老东家接下来应该做什么才能继续提升？</p><p><b>定位</b>：我在硬性技能（编码、架构）上的长处在哪？我在软技能（沟通，团队）上的长处在哪？这步顺带写了简历</p><p><b>寻找平台</b>：哪些平台能同时满足：1、有挑战有上升空间；2、符合我的定位方向；3、团队氛围和老东家一样好（或更好）</p><p><b>找人内推</b>：基本都是在 v2 上找的（诚挚感谢各位帮助我内推的大佬）</p><h2><b>面试谈 offer</b></h2><p>定位这一步其实花了好几天时间，我先是梳理了自己的项目经历和工作内容的专长，把 Java + Golang，做过的面比较广（业务，中间件，基础架构都做过）以及对 k8s 云原生有专长和兴趣作为自己的&#34;硬招牌&#34;。然后把学习能力强，喜欢沟通合作，渴望挑战作为我的&#34;软招牌&#34;，最后把自己定位成一个&#34;在过往经历中展现出了过人学习能力和钻研能力，同时渴望挑战，不愿意呆在舒适区&#34;的形象（妈呀打这段话的时候太羞耻了！！！）。</p><p>这个过程中，我的方法论是&#34;换位思考&#34;。自己过去也面试过不少人（所以平时公司让我去面试，虽然累点苦点，但也都是积累呀），并且也和 HR 以及放出 HC 的业务方聊过我们希望放什么样的人进来。因此全程都在以面试官的心态来考察自己：</p><p><b>假如我是面试官，我会招怎样的人进来做我的同事？</b><br/>举几个例子，下面都是我在这个过程中考虑过的问题（当然只是我自己的喜好）：</p><p><b>对于一个毕业三年多的人，我最希望他有什么特质？</b><br/>这个阶段的人其实还是&#34;空杯&#34;，我希望他有很强的学习能力和进取心，给自己部门培养出一个超级生产力；</p><p><b>什么样的行为会让我‘’讨厌一份简历‘’</b><br/>把每个项目都大写特写，尤其是陈述细节没有重点；罗列框架当能力，用过了一类场景的框架就觉得能解决一类业务诸如此类；</p><p><b>面试的时候我会偏向于问哪些问题</b>？</p><ul><li>一是简历上写了&#34;理解&#34;或&#34;精通&#34;的语言与中间件；</li><li>二是简历上写得比较有趣，又没有完全交代清楚的项目；</li></ul><p>定位之后，我要找的下一个位置基本锁定在了 PaaS、云原生、中间件方向。那接下来就是找坑了，这段时间&#34;寒冬论&#34;炒的火热，好坑确实挺难找，最后兜兜转转找了四家的内推：Shopee（新加坡）、PingCAP、头条、蚂蚁。</p><p>这几家的简历投递出去之后，我着重把简历里&#34;埋的几个坑&#34;，也就是自己写了&#34;理解并掌握&#34;的语言与中间件以及专门用来勾引面试官问的项目好好复习了一遍。事后发现这一步还挺关键的，很多知识性的内容要是不复习一下真就全忘了，这也算临阵磨枪，不快也光了吧。</p><h2><b>接下来就进入正题，逐家讲一下自己的面试体验：</b></h2><h2><b>PingCAP</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fec6c7cccf1474774fe37b56487001a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-fec6c7cccf1474774fe37b56487001a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-fec6c7cccf1474774fe37b56487001a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fec6c7cccf1474774fe37b56487001a2_b.jpg\"/></figure><h2><b>面试前</b></h2><p>PingCAP 的简历响应是最快的，内推之后第二天 HR 小姐姐就联系了我。电话接通之后先是简单聊了一下人生，然后就是社招三问</p><ul><li><b>为啥离职啊?</b></li><li><b>现在待遇咋样啊?</b></li><li><b>期望待遇咋样啊?</b></li></ul><p>天知道这通电话是我开始投简历之后的第一通电话面试，之前还完全没有准备过类似的问题，只能稀里哗啦用<br/><b>现在自己的技术成长有点碰到瓶颈，加上一直对您公司钦慕有加、我现在待遇是xxx但我司除了base之外还有xxx以及我马上要提薪了、其实比起待遇我更看重平台和挑战(狗头)，但是基本的薪资需求我还是希望能xxx</b>，这样和稀泥应付过去。内心稍稍平静之后小姐姐跟我讲了讲我意向部门的结构和主体业务，然后交代了一下接下来的面试流程，约了<b>&#34;一面&#34;</b>并且加了微信。</p><p><b>&#34;一面&#34;</b>加了引号，这是因为<b>&#34;一面&#34;</b>其实是在微信上布置了一个小项目，然后约定好时间验收。</p><p>这里要特别感谢一下 PingCAP 的 HR 小姐姐，加了微信之后全程帮助我协调面试时间并不厌其烦地回答我各种奇奇怪怪的问题，最后谈 offer 的时候还给我准备了一个惊喜。面试体验直接满星。</p><h2><b>PingCAP一面</b></h2><p>早就听说 PingCAP 一面要写小项目，我自己心里其实是跃跃欲试的。面试官给的项目要求大体是这样：</p><p>K8S 容器化之后应用容器里几乎没有什么可用的调试工具，可以利用容器 Namespace 共享的思路，启动一个包含各种调试工具（比如 netstat, gdb）的容器，加入到 pod 的 pid、net 等 namespace 中， 实现对任意 pod 的 debug 功能。现在希望利用 kubectl plugin 机制实现一个插件，用于 debug 任意一个 pod 里的容器，达到 kubectl exec 的使用体验.</p><p>当时因为工作日抽不出时间，就隔了几天到周五晚上开始写，周六晚上写完并且把 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/aylei/kubectl-debug\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目地址</a> 分享到了 <a href=\"https://link.zhihu.com/?target=https%3A//www.reddit.com/r/devops/comments/a8vnt5/i_wrote_a_tool_to_debug_kubernetes_pods_more/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Reddit 上</a>。没想到运气不错收了 100 多个 star，这下我就觉得&#34;哦豁，这轮应该稳了吧！&#34;（结果后来发现这几乎是我唯一一把觉得自己&#34;稳了的&#34;面试...)</p><h2><b>PingCAP二面</b></h2><p>二面是一位 Cloud 方向的前辈面我，全程大概微信语音聊了50多分钟：</p><ul><li>问项目经历，聊了两个项目</li><li>对 Kubernetes 了解怎么样，看过源码吗？</li></ul><blockquote>k8s 的代码我以前其实只看过 kubelet，临阵磨枪的时候把 apiserver、scheduler、controller-manager 都看了一遍，笑容渐渐出现。</blockquote><ul><li>Kubernetes 的 Service 是什么概念，怎么实现的？</li><li>你刚说到 Informer，Informer 是怎么实现的，有什么作用？</li><li>StatefulSet 用过吗？有什么特点？</li><li>StatefulSet 的滚动升级是如何实现的？</li><li>现在我们希望只升级 StatefulSet 中的任意个节点进行测试, 可以怎么做?</li></ul><blockquote>这题没有思路，只好强答用&#34;两个 StatefulSet&#34;，后来一想起一个新的 StatefulSet 那 PV 里的数据就丢了，其实正确办法是利用 partition 机制，笑容渐渐消失。</blockquote><ul><li>Kubernetes 的所有资源约定了版本号, 为什么要这么做?</li></ul><blockquote>第二个拿不准的问题，我面试前就反复告诉自己<b>&#34;不要强答&#34;</b>以及<b>&#34;不知道的题就讲思路&#34;</b>，于是就说这块代码确实没看过，但是根据微服务 API 的设计理念，版本号的作用有巴拉巴拉。答完似乎面试官还算满意，于是又往下挖了一句：</blockquote><ul><li>假如有多几个版本号并存, 那么 K8S 服务端需要维护几套代码?</li></ul><blockquote>这题完全不知道，内心逐渐焦灼，立马走老套路&#34;这我没看过 k8s 代码怎么写的无法确定（想表达自己真正看过代码才会确认，凸显自己严谨...我的妈呀），但假如由我来写这份代码（装作非常自信），我会只会维护一份最新的 Model，然后设计对应一个版本段的 Adpater 将老版本的 Model 转化过来巴拉巴拉&#34;。到这里我已经虚的不行了</blockquote><p>OK，那接下来我们聊聊 Golang （我：长舒一口气)</p><ul><li>看一下这段代码有没有问题(一段 golang for-range 里 goroutine 闭包捕获的代码)，为什么?</li><li>goroutine 是怎么调度的？</li><li>goroutine 和 kernel thread 之间是什么关系？</li><li>有什么想问我的？</li></ul><p>面完之后感觉答得一般，心里有点忐忑。结果第二天 HR 小姐姐就来安排三面了，长舒了一口气。</p><h2><b>PingCAP三面</b></h2><p>三面是和整个大部门的 Leader 聊，面试官很能聊（声音还很好听！）而且技术非常全面，全程大概微信语音聊了80多分钟：</p><ol><li>给我介绍 PingCAP 相关团队的职责与挑战</li><li>聊为什么出来看机会，以及未来的职业规划</li><li>聊我之前做的一个数据同步的项目，大概内容是订阅 MySQL Binlog，sink 到搜索索引、分库分表以及业务事件订阅流中</li><li>为什么数据同步里选择了 xxxx 开源项目，优势在哪？</li><li>订阅分库分表的 Binlog 怎么订阅？</li><li>分库分表的数据源中假如存在主键冲突要怎么解决？</li><li>怎么保证下游对 Binlog 的消费顺序？</li><li>如何在下游保证消费时的事务原子性？</li><li>描述了一下 tidb 的 binlog 架构，问这种场景下怎么保证 Binlog 顺序</li><li>聊一个上了 Kubernetes 的项目，问了一些细节和坑</li><li>用 Kubernetes 之后，解决了哪些问题？</li><li>聊我之前做的监控警报项目，问背景和产出</li><li>Prometheus 单实例数据量级 hold 不住了，有什么解决方案？</li><li>有什么想问我的？</li></ol><p>简历里的&#34;数据同步&#34;这个项目我是好好复习过自己当年写的调研文档和架构文档的，也做了被问的准备（换位思考，是我我也问。这个其实就是我专门希望面试官来挖细节的项目）。最后确实被问最多的就是这个项目，运气真的不错。</p><h2><b>PingCAP四面</b></h2><p>四面到了现场面，有两位面试官一起跟我聊，大约聊了 40 多分钟：</p><ul><li>聊&#34;配置中心&#34;项目的细节</li><li>为什么不用 ZK，要自己再写一个&#34;配置中心&#34;</li></ul><blockquote>这个问题让我措手不及，我只好坦白：当时年轻，想刷经验，事后才领悟到不要重复造轮子，当然最后系统的产出也不错（后面这两句是我临时加的，不能让面试官觉得我是一个不看全局只顾自己刷经验的人）</blockquote><ul><li>配置中心怎么做服务发现的？怎么做 failover 的？</li><li>用 Kubernetes 碰到过哪些坑？</li><li>对 Prometheus 做了哪些改动？</li><li>对 Alertmanager 做了哪些改动？</li><li>监控系统怎么做&#34;自监控&#34;？</li><li>跨机房的网络问题怎么监控？</li><li>有什么想问我们的？</li></ul><p>四面是纯项目，里面的经验就不太通用了。但这里面有个细节，就是到中途的时候两个面试官互相对了一下&#34;还有什么想问的吗？&#34;我意识到面试官们想问的问题不多了，可时间大约才过了20分钟（<b>面试时间过短是一个 bad smell</b>）。于是之后几个监控的问题我都尽量说得很细，同时顺便提一下&#34;还有一个方面我们当时也做了挺多工作&#34;，暗示面试官往下挖的线索。不知道这招有没有奏效，反正这一面算是有惊无险过啦。</p><h2><b>PingCAP五面</b></h2><p>技术面到四面就结束了，五面是创始人面（有幸和崔秋大佬聊了20多分钟人生），面完之后就是 offer call 了。</p><ul><li><b>面试难度：正常</b></li><li><b>面试体验：我给满分</b></li><li><b>问题偏向：项目经历、工程能力</b></li></ul><p>这里真的想夸一下 PingCAP（因为面试体验超棒呀！）。投 PingCAP 的初衷是觉得这个团队的工程师文化非常浓，大牛云集，同时 TiDB 够牛逼，项目开源的模式我内心也很认可。只是挂羊头卖狗肉的公司也不少，好多 JD 上写着工程师文化浓郁，其实很多根本不是那么回事儿。但是经过 PingCAP 的五轮面试之后，我实打实地感受到了工程师文化：面试里没有任何一个&#34;刁难人的问题&#34;，每一位面试官感兴趣的是我的工程思维、学习能力、技术见解，同时还非常热衷于与我讨论和深挖一些坑与技术决策。这种感觉就很爽：<b>面试官是懂我的，我作为工程师的思维能力与技术见解得到了认可与尊重。</b> 这种氛围是口号喊不出来的，因为它的硬性指标就是这其中的每一个人要热爱技术并且工程经验丰富。</p><p><b>需要面试题汇总（可私信我免费领取答案）私信【面试】即可领取！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-04b25e4ccc5b793fa3660aabd9053f5a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"265\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;265&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"265\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic3.zhimg.com/v2-04b25e4ccc5b793fa3660aabd9053f5a_b.jpg\"/></figure><h2><b>蚂蚁</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b2b782a94c2f9056039ae39141d6ddad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-b2b782a94c2f9056039ae39141d6ddad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-b2b782a94c2f9056039ae39141d6ddad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b2b782a94c2f9056039ae39141d6ddad_b.jpg\"/></figure><h2><b>面试前</b></h2><p>蚂蚁的面试挺独特，每轮面试都没有 HR 约时间，一般是晚上 8 点左右面试官来一个电话，问是否能面试，能的话开始面，不能就约一个其它时间。</p><p>全程 6 面，前五面技术面，电话面试，最后一面是 HR 面，现场面。</p><h2><b>蚂蚁一面</b></h2><ul><li>介绍一下自己</li><li>问项目经历, 聊&#34;数据同步&#34;</li><li>接着聊上了 K8S 的项目</li><li>有没有什么钻研得比较深得技术？</li></ul><blockquote>我：kubernetes, golang, prometheus, java）</blockquote><ul><li>kubernetes 的架构是怎么样的?</li></ul><blockquote>这个问题很大，拆成 apiserver、controller、kubelet、scheduler 讲了一下</blockquote><ul><li>golang 与 java 的比较</li></ul><blockquote>这个问题又很大，当时主要对比了 vm、协程支持、面向对象和泛型的区别、以及自己对各自使用场景的一些理解</blockquote><ul><li>golang 的 gc 算法</li><li>怎么扩展 kubernetes scheduler, 让它能 handle 大规模的节点调度</li></ul><blockquote>单节点提速：优选阶段随机取部分节点进行优选；水平扩展 scheduler 节点，pod 做一致性 hash 来决定由哪个 scheduler 调度</blockquote><ul><li>你有什么想问我的?</li></ul><p>一面其实有点僵，我自己完全没放开，面试官对我的回答没有什么反馈和深入，都是&#34;哦好的&#34;然后就过了。所以我当时面完觉得自己其实已经挂了（我自己要是对候选人不感兴趣，有时候也就问完问题走个过场溜了），后来收到二面电话着实吃惊了一下。</p><h2><b>蚂蚁二面</b></h2><ul><li>先聊了聊项目</li><li>给 Prometheus 做了哪些改动？</li><li>自研配置中心, 具体做了哪些内容？</li><li>有用过 MySQL 的什么高级特性吗?</li></ul><blockquote>这里不太理解，我问什么算高级特性，面试官就切换到了下一个问题</blockquote><ul><li>配置中心的核心数据表是怎么设计的?</li><li>为什么在业务里用 Redis, Redis 有什么优点?</li></ul><blockquote>单线程：并发安全；高性能；原语与数据结构丰富；采用广泛，踩坑成本低</blockquote><ul><li>对 Redis 里数据结构的实现熟悉吗?</li></ul><blockquote>说了一个 zset 跳表</blockquote><ul><li>用过 Redis 的哪些数据结构, 分别用在什么场景?</li><li>Java 初始化一个线程池有哪些参数可以配置, 分别是什么作用?</li><li>自己写的 Java 应用调优过哪些 JVM 参数, 为什么这么调优?</li></ul><blockquote>这个问住了，我只知道最大堆最小堆，开 G1，开 GC 日志以及 OOM dumper 这些基本的</blockquote><ul><li>用 Jetty 的时候有没有配什么参数, 为什么这么配?</li><li>Jetty QTP 等待队列配置成无限的话, 你觉得好吗? 会有什么问题吗?</li><li>用过 Linux Bash 里的哪些命令, 分别用它们干嘛?</li><li><b>一道笔试题:</b> 需要在给的链接中作答, 不能 google, 不能跳出, 不能用 IDE:</li></ul><p>题目是这样的：</p><p><b>启动两个线程, 一个输出 1,3,5,7…99, 另一个输出 2,4,6,8…100 最后 STDOUT 中按序输出 1,2,3,4,5…100</b></p><blockquote><b>我</b>: 我用 Go 实现吧<br/><b>面试官</b>: 不可以，用 Java 的 notify 机制实现<br/><b>我</b>: (还没意识到问题的严峻) 那我用 Java BlockingQueue<br/><b>面试官</b>：说不可以, 要求用 Java 的 wait + notify 机制来实现<br/>我完全没写过 wait + notify，只能表示不会（菜鸡本鸡了）, 面试官说那行吧你可以用 go 写<br/>最后用 go channel 实现了一版, 不过给的网页上不能运行代码，也不知道写得对不对，然后面试结束。</blockquote><p>这一轮面试官延续了一面的风格，问完一题就赶忙下一题了，似乎没有表现出对我的回答有兴趣或认可。因此这轮面完，我又觉得自己挂了...</p><h2><b>蚂蚁三面</b></h2><ul><li>依然先聊项目</li></ul><blockquote>对监控警报的项目很感兴趣, 问了挺多细节, 最后问了一个问题: 现在要你实现一个语义不弱于 PromQL 的查询语言, 你能实现吗?<br/>这里虽然看过一些 Prometheus 的代码，但其实对 PromQL 的 lexer 和 parser 部分没有细看，还好之前因为数据同步项目里想写声明式 Stream SQL 研究过一点 ANTLR，用 ANTLR 写语法 + AST 遍历塞查询逻辑给糊弄过去了。</blockquote><ul><li>问我觉得做得最深入的项目是什么</li></ul><blockquote>当然是数据同步（狗头）</blockquote><ul><li>聊数据同步项目（这个很符合我的预期，哈哈哈哈）</li><li>问 Linux 掌握得怎么样？</li></ul><blockquote>没有系统学习过，基本上是自己运维踩坑积累的</blockquote><ul><li>问 Golang 掌握得怎么样？</li></ul><blockquote>用了半年, 看过 effective go</blockquote><ul><li>问算法掌握得怎么样？</li></ul><blockquote>到图为止都可以</blockquote><ul><li>问最短路算法</li></ul><blockquote>只记得 dijkstra 了，描述了代码流程</blockquote><ul><li>k8s 掌握得怎么样?</li></ul><blockquote>不怎么样，没有自己写过 controller 和 scheduler，但是对概念都很熟悉，看过 xxx 这几部分的源码</blockquote><ul><li>k8s 的 exec 是怎么实现的?</li></ul><blockquote>这个问题正中下怀，之前写了 PingCAP 的小作业正好对这块特别熟悉</blockquote><p>这轮聊得顺畅多了。同时发现蚂蚁的面试官似乎挺喜欢让你自己评价自己的：<b>&#34;你觉得自己 xxx 掌握得怎么样？&#34;</b>（只有五位面试官，样本不够大，不能作数哦），这类问题其实我慌得要死，怕自己吹过头了答不上来，面试挂了事小，丢了面子事大。早知道就预习一下怎么吹嘘自己了。</p><h2><b>蚂蚁四面</b></h2><ol><li>介绍一下自己</li><li>觉得自己基础知识掌握怎么样？</li><li>平时一般会用到哪些数据结构？</li><li>链表和数组相比, 有什么优劣？</li><li>如何判断两个无环单链表有没有交叉点</li><li>如何判断两个有环单链表有没有交叉点</li><li>如何判断一个单链表有没有环, 并找出入环点</li><li>TCP 和 UDP 有什么区别?</li><li>描述一下 TCP 四次挥手的过程中</li><li>TCP 有哪些状态？</li><li>TCP 的 LISTEN 状态是什么？</li><li>TCP 的 CLOSE_WAIT 状态是什么？</li><li>建立一个 socket 连接要经过哪些步骤？</li><li>常见的 HTTP 状态码有哪些？</li><li>301和302有什么区别？</li><li>504和500有什么区别？</li><li>HTTPS 和 HTTP 有什么区别？</li><li>写一个算法题: 手写快排</li></ol><p>这一轮全程问的基础知识，基础扎实的话就没问题了，不过个人感觉有一点像校招的问法。</p><h2><b>蚂蚁五面</b></h2><ul><li>介绍一下自己</li><li>在 k8s 上做过哪些二次开发?</li><li>自己用 Helm 构建过 chart 吗？有哪些？</li><li>有没有考虑过自己封装一个面向研发的 PaaS 平台？</li><li>配置中心做了什么？</li><li>为什么不用 zookeeper？</li><li>配置中心如何保证一致性？</li><li>Spring 里用了单例 Bean, 怎么保证访问 Bean 字段时的并发安全？</li></ul><blockquote>用并发安全的数据结构，比如 ConcurrentHashMap；或者加互斥锁</blockquote><ul><li>假如我还想隔离两个线程的数据, 怎么办？</li></ul><blockquote>ThreadLocal，然后举了个例子</blockquote><ul><li>Golang 里的逃逸分析是什么？怎么避免内存逃逸？</li><li>对比一下 Golang 和 Java 的 GC</li></ul><blockquote>答了一下 CMS、G1和三色标记，我对比的点是 JVM 有分代回收，Go 的 Runtime 没有，没能深入地讲</blockquote><ul><li>Golang 的 GC 触发时机是什么</li></ul><blockquote>阈值触发；主动触发；两分钟定时触发；</blockquote><ul><li>有没有写过 k8s 的 Operator 或 Controller？</li><li>谈一谈你对微服务架构的理解</li></ul><blockquote>大体思路&#34;微服务本质是人员组织架构演进与关注点分离&#34;</blockquote><ul><li>谈一谈你对 Serveless 的理解</li></ul><blockquote>大体思路&#34;Serveless 是继 docker 与容器编排之后的又一次应用开发与基础设施提供方之间的边界划分&#34;</blockquote><ul><li>你认为 Serveless 是未来吗? 为什么?</li></ul><blockquote>大体思路&#34;是云服务的未来，把蛋糕从企业的IT、运维与中间件部门切走，形成规模效应，做得越多赚得越多；公司内的话 servless 能够帮助加速前台业务迭代，但对中后台的收益还看不到，未来可能会有比 servless 更适合中后台的架构&#34;</blockquote><ul><li>最后你有什么要问我的？</li></ul><blockquote><b>我</b>：为什么足足安排了五轮技术面，而且其中有两轮似乎和 k8s 没有关系啊？<br/><b>面试官</b>：我们觉得你做过的东西挺多的，各个方向都想让你尝试一下 (我的内心：......)<br/><b>我</b>：那这轮是最后一轮技术面吗？<br/><b>面试官</b>：不一定（我的内心：......)<br/>后续还问了面试官一些业务相关的问题，就不赘述了</blockquote><p>五面最后的三个吹水问题我还挺感兴趣，可惜面试官只是听我讲，没有跟我讨论。还有就是问了面试官才知道，二面四面的面试官是 PaaS 平台那边的，因此主要问 Java 没有涉及到 k8s 和 go。</p><h2><b>蚂蚁六面</b></h2><p>HR 面，之前就<b>听说</b>过阿里系的 HR 是来&#34;闻味道的&#34;（看你是否适合阿里的风格），而且有一票否决权。所以还是挺有压力的。</p><ul><li>问经历</li><li>为什么要考虑出来看看呢？</li></ul><blockquote>金句：<b>&#34;现在自己的技术成长有点碰到瓶颈，加上一直对您公司钦慕有加&#34;</b></blockquote><ul><li>现在公司的主营业务是什么？</li></ul><blockquote>这块往技术上问了很多，感觉是想考察我解释复杂问题的能力</blockquote><ul><li>现在带人吗？report 层级是怎样的？</li><li>对自己这几年的经历满意吗？</li><li>觉得自己有什么缺点？</li><li>碰到过什么很挫败的事情吗？</li><li>未来的职业规划是怎样的？</li><li>看机会的时候，主要考虑的是待遇、平台、人员还是什么其他因素？</li><li>现在的待遇如何</li><li>有什么想问我的</li></ul><p>整体聊了 40 多分钟，话题挺广的，面试官也说了系统部这边压力挺大的，优秀的人才才能留下来。个人觉得 HR 面里除了谈薪酬的部分没有什么可准备的，想说什么直说就行。因为到了 HR 面至少证明你的技术没什么问题，直说出来方便 HR 判断两边的价值观是否合拍，假如真的不合拍，<b>那其实在 HR 这一面挂了比起进去之后再后悔又跳槽要好很多</b>，毕竟大家都不喜欢频繁跳槽的简历。</p><h3><b>小结</b></h3><ul><li><b>面试难度：正常</b></li><li><b>面试体验：正常</b></li><li><b>问题偏向：基础知识，开发常识，技术见解</b></li></ul><p>蚂蚁的面试风格比较<b>&#34;高冷&#34;</b>，面试官给我的一致感受就是很强，卧虎藏龙。面试内容上在基础知识部分相对考察得多一些，没有偏门和猎奇的问题，基础知识扎实的同学可以大胆投投看蚂蚁。</p><h2><b>最后</b></h2><p>针对于上面的面试问到的知识点我总结出了互联网公司java程序员面试涉及到的绝大部分面试题及答案做成了文档和架构视频资料免费分享给大家（包括Dubbo、Redis、Netty、zookeeper、Spring cloud、分布式、高并发等架构技术资料），希望能帮助到您面试前的复习且找到一个好的工作，也节省大家在网上搜索资料的时间来学习，也可以关注我一下以后会有更多干货分享。</p><p><b>资料领取方式：点赞+关注后后台私信【面试】获取资料领取方式！</b></p><p><b>重点：点赞+点赞+点赞！</b></p><p><b>同时也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d444a0911c3ae9e3c8ec0a0288dd3e59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-d444a0911c3ae9e3c8ec0a0288dd3e59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic2.zhimg.com/v2-d444a0911c3ae9e3c8ec0a0288dd3e59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d444a0911c3ae9e3c8ec0a0288dd3e59_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2c1ef4e79678a784fa9f34bb93671c77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-2c1ef4e79678a784fa9f34bb93671c77_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;327&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-2c1ef4e79678a784fa9f34bb93671c77_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2c1ef4e79678a784fa9f34bb93671c77_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-79713ff2996bc79e208e95a2cf53c422_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"885\" data-original=\"https://pic3.zhimg.com/v2-79713ff2996bc79e208e95a2cf53c422_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;885&#39; height=&#39;449&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"885\" data-original=\"https://pic3.zhimg.com/v2-79713ff2996bc79e208e95a2cf53c422_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-79713ff2996bc79e208e95a2cf53c422_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "面试经历", 
                    "tagLink": "https://api.zhihu.com/topics/19760061"
                }, 
                {
                    "tag": "校园招聘", 
                    "tagLink": "https://api.zhihu.com/topics/19563240"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87579731", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 8, 
            "title": "精选19年面试常问49道Kafka面试真题（附答案），你能回答多少？", 
            "content": "<h2><b>前言</b></h2><p>Apache Kafka的受欢迎程度很高，Kafka拥有充足的就业机会和职业前景。此外，在这个时代拥有kafka知识是一条快速增长的道路。所以，在这篇文章中，我们收集了Apache Kafka面试中常见的问题，并提供了答案。因此，如果您希望参加Apache Kafka面试，这是一份不错的指南。这将有助于您成功参加Kafka面试。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9b012361183ba8099379e6388bbc0771_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"250\" data-rawheight=\"250\" class=\"content_image\" width=\"250\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;250&#39; height=&#39;250&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"250\" data-rawheight=\"250\" class=\"content_image lazy\" width=\"250\" data-actualsrc=\"https://pic2.zhimg.com/v2-9b012361183ba8099379e6388bbc0771_b.jpg\"/></figure><p>这是Kafka最受欢迎的面试问题清单，以及任何面试官都可能问到的答案。所以，继续学习直到本文的结尾，希望对你有帮助！</p><h2><b>一、最佳Apache Kafka面试问题和解答</b></h2><p><b>1）、什么是Apache Kafka？</b></p><p><b>答</b>：Apache Kafka是一个发布 - 订阅开源消息代理应用程序。这个消息传递应用程序是用“scala”编码的。基本上，这个项目是由Apache软件启动的。Kafka的设计模式主要基于事务日志设计。</p><p><b>2）、Kafka中有哪几个组件？</b></p><p><b>答</b>：Kafka最重要的元素是：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-651409aa7d77799c9662bf5fdb77fe1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-651409aa7d77799c9662bf5fdb77fe1a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;455&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"455\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-651409aa7d77799c9662bf5fdb77fe1a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-651409aa7d77799c9662bf5fdb77fe1a_b.jpg\"/></figure><ul><li>主题：Kafka主题是一堆或一组消息。</li><li>生产者：在Kafka，生产者发布通信以及向Kafka主题发布消息。</li><li>消费者：Kafka消费者订阅了一个主题，并且还从主题中读取和处理消息。</li><li>经纪人：在管理主题中的消息存储时，我们使用Kafka Brokers。</li></ul><p><b>3）、解释偏移的作用。</b></p><p><b>答</b>：给分区中的消息提供了一个顺序ID号，我们称之为偏移量。因此，为了唯一地识别分区中的每条消息，我们使用这些偏移量。</p><p><b>4）、什么是消费者组？</b></p><p><b>答</b>：消费者组的概念是Apache Kafka独有的。基本上，每个Kafka消费群体都由一个或多个共同消费一组订阅主题的消费者组成。</p><p><b>5）、ZooKeeper在Kafka中的作用是什么？</b></p><p><b>答</b>：Apache Kafka是一个使用Zookeeper构建的分布式系统。虽然，Zookeeper的主要作用是在集群中的不同节点之间建立协调。但是，如果任何节点失败，我们还使用Zookeeper从先前提交的偏移量中恢复，因为它做周期性提交偏移量工作。</p><p><b>6）、没有ZooKeeper可以使用Kafka吗？</b></p><p><b>答</b>：绕过Zookeeper并直接连接到Kafka服务器是不可能的，所以答案是否定的。如果以某种方式，使ZooKeeper关闭，则无法为任何客户端请求提供服务。</p><p><b>7）、为什么Kafka技术很重要？</b></p><p><b>答</b>：Kafka有一些优点，因此使用起来很重要：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a331338917a70265ab36d08f069614bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a331338917a70265ab36d08f069614bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a331338917a70265ab36d08f069614bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a331338917a70265ab36d08f069614bb_b.jpg\"/></figure><ul><li>高吞吐量：我们在Kafka中不需要任何大型硬件，因为它能够处理高速和大容量数据。此外，它还可以支持每秒数千条消息的消息吞吐量。</li><li>低延迟：Kafka可以轻松处理这些消息，具有毫秒级的极低延迟，这是大多数新用例所要求的。</li><li>容错：Kafka能够抵抗集群中的节点/机器故障。</li><li>耐久性：由于Kafka支持消息复制，因此消息永远不会丢失。这是耐久性背后的原因之一。</li><li>可扩展性：卡夫卡可以扩展，而不需要通过添加额外的节点而在运行中造成任何停机。</li></ul><p><b>8）、Kafka的主要API有哪些？</b></p><p><b>答</b>：Apache Kafka有4个主要API：</p><ul><li>生产者API</li><li>消费者API</li><li>流 API</li><li>连接器API</li></ul><p><b>9）、什么是消费者或用户？</b></p><p><b>答</b>：Kafka消费者订阅一个主题，并读取和处理来自该主题的消息。此外，有了消费者组的名字，消费者就给自己贴上了标签。换句话说，在每个订阅使用者组中，发布到主题的每个记录都传递到一个使用者实例。确保使用者实例可能位于单独的进程或单独的计算机上。</p><h2><b>二、比较棘手的Kafka面试问题和答案</b></h2><p><b>10）、解释领导者和追随者的概念。</b></p><p><b>答</b>：在Kafka的每个分区中，都有一个服务器充当领导者，0到多个服务器充当追随者的角色。</p><p><b>11）、是什么确保了Kafka中服务器的负载平衡？</b></p><p><b>答</b>：由于领导者的主要角色是执行分区的所有读写请求的任务，而追随者被动地复制领导者。因此，在领导者失败时，其中一个追随者接管了领导者的角色。基本上，整个过程可确保服务器的负载平衡。</p><p><b>12）、副本和ISR扮演什么角色？</b></p><p><b>答</b>：基本上，复制日志的节点列表就是副本。特别是对于特定的分区。但是，无论他们是否扮演领导者的角色，他们都是如此。</p><p>此外，ISR指的是同步副本。在定义ISR时，它是一组与领导者同步的消息副本。</p><p><b>13）、为什么Kafka的复制至关重要？</b></p><p><b>答</b>：由于复制，我们可以确保发布的消息不会丢失，并且可以在发生任何机器错误、程序错误或频繁的软件升级时使用。</p><p><b>14）、如果副本长时间不在ISR中，这意味着什么？</b></p><p><b>答</b>：简单地说，这意味着跟随者不能像领导者收集数据那样快速地获取数据。</p><p><b>15）、启动Kafka服务器的过程是什么？</b></p><p><b>答</b>：初始化ZooKeeper服务器是非常重要的一步，因为Kafka使用ZooKeeper，所以启动Kafka服务器的过程是：</p><p>要启动ZooKeeper服务器：&gt;bin/zooKeeper-server-start.sh config/zooKeeper.properties</p><p>接下来，启动Kafka服务器：&gt;bin/kafka-server-start.sh config/server.properties</p><p><b>16）、在生产者中，何时发生QueueFullException？</b></p><p><b>答</b>：每当Kafka生产者试图以代理的身份在当时无法处理的速度发送消息时，通常都会发生QueueFullException。但是，为了协作处理增加的负载，用户需要添加足够的代理，因为生产者不会阻止。</p><p><b>17）、解释Kafka Producer API的作用。</b></p><p><b>答</b>：允许应用程序将记录流发布到一个或多个Kafka主题的API就是我们所说的Producer API。</p><p><b>18）、Kafka和Flume之间的主要区别是什么？</b></p><p><b>答</b>：Kafka和Flume之间的主要区别是：</p><p><b>工具类型</b></p><p>Apache Kafka——Kafka是面向多个生产商和消费者的通用工具。</p><p>Apache Flume——Flume被认为是特定应用程序的专用工具。</p><p><b>复制功能</b></p><p>Apache Kafka——Kafka可以复制事件。</p><p>Apache Flume——Flume不复制事件。</p><p><b>19）、Apache Kafka是分布式流处理平台吗？如果是，你能用它做什么？</b></p><p><b>答</b>：毫无疑问，Kafka是一个流处理平台。它可以帮助：</p><ol><li>轻松推送记录</li><li>可以存储大量记录，而不会出现任何存储问题</li><li>它还可以在记录进入时对其进行处理。</li></ol><h2><b>三、高级Kafka面试问题</b></h2><p><b>20）、你能用Kafka做什么？</b></p><p><b>答</b>：它可以以多种方式执行，例如：</p><ul><li>为了在两个系统之间传输数据，我们可以用它构建实时的数据流管道。</li><li>另外，我们可以用Kafka构建一个实时流处理平台，它可以对数据快速做出反应。</li></ul><p><b>21）、在Kafka集群中保留期的目的是什么？</b></p><p><b>答</b>：保留期限保留了Kafka群集中的所有已发布记录。它不会检查它们是否已被消耗。此外，可以通过使用保留期的配置设置来丢弃记录。而且，它可以释放一些空间。</p><p><b>22）、解释Kafka可以接收的消息最大为多少？</b></p><p><b>答</b>：Kafka可以接收的最大消息大小约为1000000字节。</p><p><b>23）、传统的消息传递方法有哪些类型？</b></p><p><b>答</b>：基本上，传统的消息传递方法有两种，如：</p><ul><li>排队：这是一种消费者池可以从服务器读取消息并且每条消息转到其中一个消息的方法。</li><li>发布-订阅：在发布-订阅中，消息被广播给所有消费者。</li></ul><p><b>24）、ISR在Kafka环境中代表什么？</b></p><p><b>答</b>：ISR指的是同步副本。这些通常被分类为一组消息副本，它们被同步为领导者。</p><p><b>25）、什么是Kafka中的地域复制？</b></p><p><b>答</b>：对于我们的集群，Kafka MirrorMaker提供地理复制。基本上，消息是通过MirrorMaker跨多个数据中心或云区域复制的。因此，它可以在主动/被动场景中用于备份和恢复；也可以将数据放在离用户更近的位置，或者支持数据位置要求。</p><p><b>26）、解释多租户是什么？</b></p><p><b>答</b>：我们可以轻松地将Kafka部署为多租户解决方案。但是，通过配置主题可以生成或使用数据，可以启用多租户。此外，它还为配额提供操作支持。</p><p><b>27）、消费者API的作用是什么？</b></p><p><b>答</b>：允许应用程序订阅一个或多个主题并处理生成给它们的记录流的API，我们称之为消费者API。</p><p><b>28）、解释流API的作用？</b></p><p><b>答</b>：一种允许应用程序充当流处理器的API，它还使用一个或多个主题的输入流，并生成一个输出流到一个或多个输出主题，此外，有效地将输入流转换为输出流，我们称之为流API。</p><p><b>29）、连接器API的作用是什么？</b></p><p><b>答</b>：一个允许运行和构建可重用的生产者或消费者的API，将Kafka主题连接到现有的应用程序或数据系统，我们称之为连接器API。</p><p><b>30）、解释生产者是什么？</b></p><p><b>答</b>：生产者的主要作用是将数据发布到他们选择的主题上。基本上，它的职责是选择要分配给主题内分区的记录。</p><p><b>31）、比较RabbitMQ与Apache Kafka</b></p><p><b>答</b>：Apache Kafka的另一个选择是RabbitMQ。那么，让我们比较两者：</p><p><b>功能</b></p><p>Apache Kafka– Kafka是分布式的、持久的和高度可用的，这里共享和复制数据</p><p>RabbitMQ中没有此类功能</p><p><b>性能速度</b></p><p>Apache Kafka–达到每秒100000条消息。</p><p>RabbitMQ–每秒20000条消息。</p><p><b>32）、比较传统队列系统与Apache Kafka</b></p><p><b>答</b>：让我们比较一下传统队列系统与Apache Kafka的功能：</p><p><b>消息保留</b></p><p>传统的队列系统 - 它通常从队列末尾处理完成后删除消息。</p><p>Apache Kafka中，消息即使在处理后仍然存在。这意味着Kafka中的消息不会因消费者收到消息而被删除。</p><p><b>基于逻辑的处理</b></p><p>传统队列系统不允许基于类似消息或事件处理逻辑。</p><p>Apache Kafka允许基于类似消息或事件处理逻辑。</p><p><b>33）、为什么要使用Apache Kafka集群？</b></p><p><b>答</b>：为了克服收集大量数据和分析收集数据的挑战，我们需要一个消息队列系统。因此Apache Kafka应运而生。其好处是：</p><ul><li>只需存储/发送事件以进行实时处理，就可以跟踪Web活动。</li><li>通过这一点，我们可以发出警报并报告操作指标。</li><li>此外，我们可以将数据转换为标准格式。</li><li>此外，它允许对主题的流数据进行连续处理。</li></ul><p>由于它的广泛使用，它秒杀了竞品，如ActiveMQ，RabbitMQ等。</p><p><b>34）、解释术语“Log Anatomy”</b></p><p><b>答</b>：我们将日志视为分区。基本上，数据源将消息写入日志。其优点之一是，在任何时候，都有一个或多个消费者从他们选择的日志中读取数据。下面的图表显示，数据源正在写入一个日志，而用户正在以不同的偏移量读取该日志。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e02bdc339757975f9fe87fc9400f419a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"364\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-e02bdc339757975f9fe87fc9400f419a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;364&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"364\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-e02bdc339757975f9fe87fc9400f419a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e02bdc339757975f9fe87fc9400f419a_b.jpg\"/></figure><p><b>35）、Kafka中的数据日志是什么？</b></p><p><b>答</b>：我们知道，在Kafka中，消息会保留相当长的时间。此外，消费者还可以根据自己的方便进行阅读。尽管如此，有一种可能的情况是，如果将Kafka配置为将消息保留24小时，并且消费者可能停机超过24小时，则消费者可能会丢失这些消息。但是，我们仍然可以从上次已知的偏移中读取这些消息，但仅限于消费者的部分停机时间仅为60分钟的情况。此外，关于消费者从一个话题中读到什么，Kafka不会保持状态。</p><p><b>36）、解释如何调整Kafka以获得最佳性能。</b></p><p><b>答</b>：因此，调优Apache Kafka的方法是调优它的几个组件：</p><ul><li>调整Kafka生产者</li><li>Kafka代理调优</li><li>调整Kafka消费者</li></ul><p><b>37）、Apache Kafka的缺陷</b></p><p><b>答</b>：Kafka的局限性是：</p><ul><li>没有完整的监控工具集</li><li>消息调整的问题</li><li>不支持通配符主题选择</li><li>速度问题</li></ul><p><b>38）、列出所有Apache Kafka业务</b></p><p><b>答</b>：Apache Kafka的业务包括：</p><ul><li>添加和删除Kafka主题</li><li>如何修改Kafka主题</li><li>如何关机</li><li>在Kafka集群之间镜像数据</li><li>找到消费者的位置</li><li>扩展您的Kafka群集</li><li>自动迁移数据</li><li>退出服务器</li><li>数据中心</li></ul><p><b>39）、解释Apache Kafka用例？</b></p><p><b>答</b>：Apache Kafka有很多用例，例如：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a621c26c78495b133313bf4705b71ecb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a621c26c78495b133313bf4705b71ecb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a621c26c78495b133313bf4705b71ecb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a621c26c78495b133313bf4705b71ecb_b.jpg\"/></figure><ul><li>Kafka指标</li><li>可以使用Kafka进行操作监测数据。此外，为了生成操作数据的集中提要，它涉及到从分布式应用程序聚合统计信息。</li><li>Kafka日志聚合</li></ul><p>从组织中的多个服务收集日志。</p><ul><li>流处理</li><li>在流处理过程中，Kafka的强耐久性非常有用。</li></ul><h2><b>四、基于特征的Kafka面试问题</b></h2><p><b>40）、Kafka的一些最显著的应用。</b></p><p><b>答</b>：Netflix，Mozilla，Oracle</p><p><b>41）、Kafka流的特点。</b></p><p><b>答</b>：Kafka流的一些最佳功能是</p><ul><li>Kafka Streams具有高度可扩展性和容错性。</li><li>Kafka部署到容器，VM，裸机，云。</li><li>我们可以说，Kafka流对于小型，中型和大型用例同样可行。</li><li>此外，它完全与Kafka安全集成。</li><li>编写标准Java应用程序。</li><li>完全一次处理语义。</li><li>而且，不需要单独的处理集群。</li></ul><p><b>42）、Kafka的流处理是什么意思？</b></p><p><b>答</b>：连续、实时、并发和以逐记录方式处理数据的类型，我们称之为Kafka流处理。</p><p><b>43）、系统工具有哪些类型？</b></p><p><b>答</b>：系统工具有三种类型：</p><p>Kafka迁移工具：它有助于将代理从一个版本迁移到另一个版本。</p><p>Mirror Maker：Mirror Maker工具有助于将一个Kafka集群的镜像提供给另一个。</p><p>消费者检查:对于指定的主题集和消费者组，它显示主题，分区，所有者。</p><p><b>44）、什么是复制工具及其类型？</b></p><p><b>答</b>：为了增强持久性和更高的可用性，这里提供了复制工具。其类型为</p><ul><li>创建主题工具</li><li>列表主题工具</li><li>添加分区工具</li></ul><p><b>45）、Java在Apache Kafka中的重要性是什么？</b></p><p><b>答</b>：为了满足Kafka标准的高处理速率需求，我们可以使用java语言。此外，对于Kafka的消费者客户，Java也提供了良好的社区支持。所以，我们可以说在Java中实现Kafka是一个正确的选择。</p><p><b>46）、说明Kafka的一个最佳特征。</b></p><p><b>答</b>：Kafka的最佳特性是“各种各样的用例”。</p><p>这意味着Kafka能够管理各种各样的用例，这些用例对于数据湖来说非常常见。例如日志聚合、Web活动跟踪等。</p><p><b>47）、解释术语“主题复制因子”。</b></p><p><b>答</b>：在设计Kafka系统时，考虑主题复制是非常重要的。</p><p><b>48）、解释一些Kafka流实时用例。</b></p><p><b>答</b>：《纽约时报》：该公司使用它来实时存储和分发已发布的内容到各种应用程序和系统，使其可供读者使用。基本上，它使用Apache Kafka和Kafka流。</p><ul><li>Zalando：作为ESB（企业服务总线）作为欧洲领先的在线时尚零售商，Zalando使用Kafka。</li><li>LINE：基本上，为了相互通信，LINE应用程序使用Apache Kafka作为其服务的中心数据中心。</li></ul><p><b>49）、Kafka提供的保证是什么？</b></p><p><b>答</b>：他们是</p><ul><li>生产者向特定主题分区发送的消息的顺序相同。</li><li>此外，消费者实例按照它们存储在日志中的顺序查看记录。</li><li>此外，即使不丢失任何提交给日志的记录，我们也可以容忍最多N-1个服务器故障。</li></ul><h2><b>最后</b></h2><p><b>针对于上面的面试问到的知识点我总结出了互联网公司java程序员面试涉及到的绝大部分面试题及答案做成了文档和架构视频资料免费分享给大家（包括Dubbo、Redis、Netty、zookeeper、Spring cloud、分布式、高并发等架构技术资料），希望能帮助到您面试前的复习且找到一个好的工作，也节省大家在网上搜索资料的时间来学习，也可以关注我一下以后会有更多干货分享</b>。</p><p><b>资料免费领取方式：点赞+点赞+点赞关注后，私信关键词【资料】即可获取免费领取方式！</b></p><p><b>重要的事说三遍，点赞+点赞+点赞！</b></p><p><b>同时也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4a7d2f0adc7adefab22c45382ac000eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-4a7d2f0adc7adefab22c45382ac000eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-4a7d2f0adc7adefab22c45382ac000eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4a7d2f0adc7adefab22c45382ac000eb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6ee79d4419aa5042773adfa2adba99f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-6ee79d4419aa5042773adfa2adba99f7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;327&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-6ee79d4419aa5042773adfa2adba99f7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6ee79d4419aa5042773adfa2adba99f7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-17ad11d9ec8000bdbef46016153cc166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-17ad11d9ec8000bdbef46016153cc166_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;325&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"325\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-17ad11d9ec8000bdbef46016153cc166_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-17ad11d9ec8000bdbef46016153cc166_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Kafka", 
                    "tagLink": "https://api.zhihu.com/topics/20012159"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87392691", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 6, 
            "title": "33岁Java程序员突然被裁员，重新求职却总被HR拒绝，感慨没出路！", 
            "content": "<p>对于程序员来说，一旦超过30岁，就可能成家立业，只能求稳，而导致他们不敢闯，再也没有那种可以毫无畏惧的心态。</p><p>网上有一位33岁的程序员月薪2万，在裁员后重新求职却屡次碰壁，很多公司都觉得大龄程序员掌握的技术不是最新的，已经成家，无法全身心投入工作，容易分心。</p><p>这位程序员工作了9年，积累了很多的经验，但最终找到的工作，却比之前的工资直线下降5K，只能委屈自己做比之前工资少还更累的工作。虽然无奈，却也毫无办法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dc58232f7782800fe623e8c068bb621c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-dc58232f7782800fe623e8c068bb621c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic1.zhimg.com/v2-dc58232f7782800fe623e8c068bb621c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dc58232f7782800fe623e8c068bb621c_b.jpg\"/></figure><p>大龄程序员比起年轻人，肯定会有更多的经验，不管是成功的还是失败的经验，这都让你在工作中更得心应手，处理的更得当。</p><p>但是，大龄程序员缺乏灵活性，他们比较禁锢在之前的工作模式里，不会学习新的工作方式。技术、精力方面，无法与年轻人竞争。</p><p>大龄程序员的年龄问题，所谓的年龄歧视其实是自己给自己设定的心理障碍，你所需要担心的不是你的年龄，而是你是否有职业规划，是否朝职业目标努力，你的年龄是否达到了相应的能力及经验。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-641fd4012fb2c7657bfb85a62bc9bf5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"329\" class=\"content_image\" width=\"309\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;309&#39; height=&#39;329&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"329\" class=\"content_image lazy\" width=\"309\" data-actualsrc=\"https://pic1.zhimg.com/v2-641fd4012fb2c7657bfb85a62bc9bf5c_b.jpg\"/></figure><p>做程序员并不是一种保险，总有人会被淘汰掉的。请记住，只有自身竞争力是你去寻找工作永远的核心点。那么，肯定很多人应该会很疑惑，作为一名大龄程序员要怎么做，才能在找工作的过程中消除雇主对你年龄的顾虑呢？</p><p><b>看完以上这位大龄程序员的经历，我们可能会疑惑这一类的人该何去何从？30岁之后还适合从事开发吗？管理岗位比研发岗位少，那么很多大龄程序员就需要下岗吗？</b></p><p><b>以上这一系列问题都围绕着这几点因素：自身竞争力，身体因素，家庭因素，学习能力。这些都是随着年龄增长会有相应的涨幅或回落。</b></p><h2><b>对这种现象的看法</b></h2><p>如果到了30多岁，知识和经验没有系统化，代码重构和架构不会，不能让写出的程序更优雅、性能更好，不知道各种框架的适用场景和优缺点、不知道一些解决方案背后的原理，技术水平也跟工作二三年的人水平差不多。做技术的同时试着关心一下外面的世界，培养其它一些能力，比如学会人际交往，学会演讲，了解产品和项目管理知识等。年龄大了，自然而然的记忆力没有20来岁的时候那么好，这是事实。而且绝大多数这个年龄段的人，都不愿意去接受新事物，不愿意去尝试新技术，守着自己前几年工作学到的东西一直用。</p><p><b>有效的提升方式（方向+方法+时间）</b></p><p>一天天想着努力奋斗，又有几个有着有效的学习晋升方向和方法。如果你有我相信你也不会进来看到这了吧。</p><p><b>推荐一个工作1到5年的java程序员进阶的学习路线方向</b></p><h2><b>一：常见模式与工具</b></h2><p><b>学习Java技术体系，设计模式，流行的框架与组件是必不可少的：</b></p><ul><li><b>常见的设计模式</b>，编码必备</li><li><b>Spring5</b>，做应用必不可少的最新框架</li><li><b>MyBatis</b>，玩数据库必不可少的组件</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-38b9920df3bd2689e218765a9ac66f19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"577\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-38b9920df3bd2689e218765a9ac66f19_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;577&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"577\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-38b9920df3bd2689e218765a9ac66f19_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-38b9920df3bd2689e218765a9ac66f19_b.jpg\"/></figure><h2><b>二：工程化与工具</b></h2><p><b>工欲善其事必先利其器，不管是小白，还是资深开发，玩Java技术体系，选择好的工具，提升开发效率和团队协作效率，是必不可少的：</b></p><ul><li><b>Maven</b>，项目管理</li><li><b>Jenkins</b>，持续集成</li><li><b>Sonar</b>，代码质量管理</li><li><b>Git</b>，版本管理</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cc1e4dad5a9d811eddb332424f4408a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"575\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-cc1e4dad5a9d811eddb332424f4408a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;575&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"575\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-cc1e4dad5a9d811eddb332424f4408a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cc1e4dad5a9d811eddb332424f4408a4_b.jpg\"/></figure><h2><b>三：分布式架构</b></h2><p><b>高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的：</b></p><ul><li><b>分布式架构原理</b></li><li><b>分布式架构策略</b></li><li><b>分布式中间件</b></li><li><b>分布式架构实战</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0fba376bb4eabf11f478ba1725b519da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"853\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-0fba376bb4eabf11f478ba1725b519da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;853&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"853\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-0fba376bb4eabf11f478ba1725b519da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0fba376bb4eabf11f478ba1725b519da_b.jpg\"/></figure><h2><b>四：微服务架构</b></h2><p><b>业务越来越复杂，服务分层，微服务架构是架构升级的必由之路，Java技术体系，和微服务相关的技术有哪些呢？</b></p><ul><li><b>微服务框架</b></li><li><b>Spring Cloud</b></li><li><b>Docker与虚拟化</b></li><li><b>微服务架构</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4baff690f69964a4f13c0319eeca4a16_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-4baff690f69964a4f13c0319eeca4a16_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;645&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-4baff690f69964a4f13c0319eeca4a16_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4baff690f69964a4f13c0319eeca4a16_b.jpg\"/></figure><h2><b>五：性能优化</b></h2><p><b>任何脱离细节的ppt架构师都是耍流氓，向上能运筹帷幄，向下能解决一线性能问题，Java技术体系，需要了解：</b></p><ul><li><b>性能指标体系</b></li><li><b>JVM调优</b></li><li><b>Web调优</b></li><li><b>DB调优</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3ac93f995cab5177f34e3235e6d836d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"505\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-3ac93f995cab5177f34e3235e6d836d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;505&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"505\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-3ac93f995cab5177f34e3235e6d836d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3ac93f995cab5177f34e3235e6d836d9_b.jpg\"/></figure><h2><b>Java架构资料分享</b></h2><p>架构图是我找的阿里大牛画出来的，里面有很多东西，想要把这些技术都掌握，确实不简单。所以我把这些技术都整理好了，还特意找了几位朋友录制了一些架构技术视频，这几位朋友在圈内都有一定知名度，曾经都在一线互联网公司任职架构师。</p><p>这些技术里面包含了Java高并发、源码分析、性能优化、微服务跟分布式等技术资料，相关资料我一并分享在我的Java架构技术群内，欢迎大家来下载。</p><p><b>点赞+关注我后私信回复我【资料】获取架构学习资料！</b></p><p><b>同时也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-01a8c87ad15909638f8e803a1684e33c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-01a8c87ad15909638f8e803a1684e33c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;775&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-01a8c87ad15909638f8e803a1684e33c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-01a8c87ad15909638f8e803a1684e33c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-662f1180e4a0d6e1bfdf58d411a6e4cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-662f1180e4a0d6e1bfdf58d411a6e4cf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;327&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic4.zhimg.com/v2-662f1180e4a0d6e1bfdf58d411a6e4cf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-662f1180e4a0d6e1bfdf58d411a6e4cf_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-009e7eeee84b340ea8aa18b5690bc109_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-009e7eeee84b340ea8aa18b5690bc109_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;566&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-009e7eeee84b340ea8aa18b5690bc109_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-009e7eeee84b340ea8aa18b5690bc109_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "中年危机", 
                    "tagLink": "https://api.zhihu.com/topics/19649531"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87313602", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 0, 
            "title": "工作了几年还不知道Java虚拟机？(图文详解JVM)", 
            "content": "<blockquote>转载自CSDN：<br/><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/carson_ho/article/details/101667672\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/carson_ho</span><span class=\"invisible\">/article/details/101667672</span><span class=\"ellipsis\"></span></a></blockquote><h2><b>前言：</b></h2><ul><li>了解<code>Java</code>中的对象、变量等存放的内存区域十分重要</li><li>本文将全面讲解<code>Java</code>虚拟机中的内存模型 &amp; 分区，希望你们会喜欢</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cdb38c00ca8119bd861f856bd0491939_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"842\" data-rawheight=\"934\" class=\"origin_image zh-lightbox-thumb\" width=\"842\" data-original=\"https://pic2.zhimg.com/v2-cdb38c00ca8119bd861f856bd0491939_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;842&#39; height=&#39;934&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"842\" data-rawheight=\"934\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"842\" data-original=\"https://pic2.zhimg.com/v2-cdb38c00ca8119bd861f856bd0491939_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cdb38c00ca8119bd861f856bd0491939_b.jpg\"/></figure><h2><b>目录：</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f1dbba2ad737e51b97aa88e1744e9de7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"992\" class=\"origin_image zh-lightbox-thumb\" width=\"772\" data-original=\"https://pic4.zhimg.com/v2-f1dbba2ad737e51b97aa88e1744e9de7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;772&#39; height=&#39;992&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"992\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"772\" data-original=\"https://pic4.zhimg.com/v2-f1dbba2ad737e51b97aa88e1744e9de7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f1dbba2ad737e51b97aa88e1744e9de7_b.jpg\"/></figure><h2><b>1. 内存模型 &amp; 分区</b></h2><ul><li><code>Java</code>虚拟机在运行<code>Java</code>程序时，会管理着一块内存区域：<br/>运行时数据区</li><li>在运行时数据区里，会根据用途进行划分：</li></ul><ol><li><code>Java</code>虚拟机栈（栈区）</li><li>本地方法栈</li><li><code>Java</code>堆（堆区）</li><li>方法区</li><li>程序计数器</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c4e43996e0855c9bb90440bccdb6efdc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic1.zhimg.com/v2-c4e43996e0855c9bb90440bccdb6efdc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic1.zhimg.com/v2-c4e43996e0855c9bb90440bccdb6efdc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c4e43996e0855c9bb90440bccdb6efdc_b.jpg\"/></figure><ul><li>下面，我将详细介绍每个内存模型分区</li></ul><h2><b>2. Java堆：</b></h2><ul><li><b>示意图</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7c02701dbbc967dfc1eaa3ffea061ac0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic1.zhimg.com/v2-7c02701dbbc967dfc1eaa3ffea061ac0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;420&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic1.zhimg.com/v2-7c02701dbbc967dfc1eaa3ffea061ac0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7c02701dbbc967dfc1eaa3ffea061ac0_b.jpg\"/></figure><ul><li><b>简介</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-daee4b5b303de37668b66b79dfe635e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-daee4b5b303de37668b66b79dfe635e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;671&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-daee4b5b303de37668b66b79dfe635e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-daee4b5b303de37668b66b79dfe635e7_b.jpg\"/></figure><h2><b>3.Java虚拟机栈</b></h2><ul><li><b>示意图</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-50097bd04a66d837bfa412bcf8561cee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic3.zhimg.com/v2-50097bd04a66d837bfa412bcf8561cee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic3.zhimg.com/v2-50097bd04a66d837bfa412bcf8561cee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-50097bd04a66d837bfa412bcf8561cee_b.jpg\"/></figure><ul><li><b>简介</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c71a8ccdcf283af6dd4b783065ae439f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-c71a8ccdcf283af6dd4b783065ae439f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;794&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-c71a8ccdcf283af6dd4b783065ae439f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c71a8ccdcf283af6dd4b783065ae439f_b.jpg\"/></figure><h2><b>4. 本地方法栈</b></h2><ul><li><b>示意图</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bf568ce65dca379fde3f25eebcfa955b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic4.zhimg.com/v2-bf568ce65dca379fde3f25eebcfa955b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;420&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic4.zhimg.com/v2-bf568ce65dca379fde3f25eebcfa955b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-bf568ce65dca379fde3f25eebcfa955b_b.jpg\"/></figure><ul><li><b>简介</b><br/>十分类似<code>Java</code>虚拟机栈，与Java虚拟机区别在于：服务对象，即Java虚拟机栈为执行 <code>Java</code> 方法服务；本地方法栈为执行 <code>Native</code>方法服务</li></ul><h2><b>5. 方法区</b></h2><ul><li><b>示意图</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-178214d442185a7adc7555286828cb29_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-178214d442185a7adc7555286828cb29_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;420&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-178214d442185a7adc7555286828cb29_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-178214d442185a7adc7555286828cb29_b.jpg\"/></figure><ul><li><b>简介</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ca3b63c33bf60fe10b5d78ae585845e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-ca3b63c33bf60fe10b5d78ae585845e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;711&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"711\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-ca3b63c33bf60fe10b5d78ae585845e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ca3b63c33bf60fe10b5d78ae585845e2_b.jpg\"/></figure><ul><li><b>注</b></li></ul><blockquote>其内部包含一个运行时常量池，具体介绍如下：</blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-569e6bce0d128d5319cfd812a79faadb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"652\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-569e6bce0d128d5319cfd812a79faadb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;652&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"652\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-569e6bce0d128d5319cfd812a79faadb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-569e6bce0d128d5319cfd812a79faadb_b.jpg\"/></figure><h2><b>6. 程序计数器</b></h2><ul><li><b>示意图</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ebaad7666416493faa181b612489d95e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic3.zhimg.com/v2-ebaad7666416493faa181b612489d95e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;420&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic3.zhimg.com/v2-ebaad7666416493faa181b612489d95e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ebaad7666416493faa181b612489d95e_b.jpg\"/></figure><ul><li><b>简介</b></li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d0d82a9aeb177291cad9ae064bf08c96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"821\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d0d82a9aeb177291cad9ae064bf08c96_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;821&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"821\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d0d82a9aeb177291cad9ae064bf08c96_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d0d82a9aeb177291cad9ae064bf08c96_b.jpg\"/></figure><h2><b>7. 额外知识：****直接内存</b></h2><ul><li>定义：<code>NIO</code>类（<code>JDK</code>1.4引入）中基于通道和缓冲区的<code>I/O</code>方式 通过使用<code>Native</code>函数库 直接分配 的堆外内存</li><li>特点：不受堆大小限制</li><li>应用场景：适用于频繁调用的场景</li></ul><blockquote>通过一个 存储在<code>Java</code>堆中的<code>DirectByteBuffer</code>对象 作为这块内存的引用 进行操作，从而避免在 <code>Java</code> 堆和 <code>Native</code>堆之间来回复制数据，提高使用性能</blockquote><ul><li>抛出的异常：<code>OutOfMemoryError</code>，即与其他内存区域的总和 大于 物理内存限制</li><li>本文全面讲解JVM中的内存模型 &amp; 分区，总结如下</li></ul><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4ca407d126a5367753a84107b568e6e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-4ca407d126a5367753a84107b568e6e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-4ca407d126a5367753a84107b568e6e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4ca407d126a5367753a84107b568e6e2_b.jpg\"/></figure><p><b>最后也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }, 
                {
                    "tag": "Java 虚拟机（JVM）", 
                    "tagLink": "https://api.zhihu.com/topics/19566470"
                }, 
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86864367", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 0, 
            "title": "头发掉得厉害,是为什么呢？", 
            "content": "<h2><b>因为你太久没对象</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>                                        你的头自认为你出家了</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>                                           所以开始自动脱落</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8be027dd672d0e32d1ea517fccf370fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic2.zhimg.com/v2-8be027dd672d0e32d1ea517fccf370fd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-46780e5304dfe74dee2a918fd8e80d49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"223\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;223&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"223\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic2.zhimg.com/v2-46780e5304dfe74dee2a918fd8e80d49_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e512c5e51d58fa7665dd94ca3ca4c21b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic4.zhimg.com/v2-e512c5e51d58fa7665dd94ca3ca4c21b_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "头发", 
                    "tagLink": "https://api.zhihu.com/topics/19577399"
                }, 
                {
                    "tag": "佛教", 
                    "tagLink": "https://api.zhihu.com/topics/19557041"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86788598", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 5, 
            "title": "淘宝商城四面（附架构面试专题）及B2C商城架构项目实战分享！", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9ad4146c54bf08a55b2f7259a1b40140_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic1.zhimg.com/v2-9ad4146c54bf08a55b2f7259a1b40140_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1200&#39; height=&#39;690&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"690\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1200\" data-original=\"https://pic1.zhimg.com/v2-9ad4146c54bf08a55b2f7259a1b40140_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9ad4146c54bf08a55b2f7259a1b40140_b.jpg\"/></figure><h2><b>一面主要问题如下（主要注重基础，问得很深很广，压力面试）：</b></h2><ul><li>首先自我介绍</li><li>数据结构算法的基本问题，如排序算法，二叉树遍历，后序遍历非递归，图的最短路径问题</li><li>对一个数组进行绝对值排序的算法</li><li>java中hashmap的底层实现</li><li>java中垃圾回收机制GC原理等</li><li>介绍自己的项目，数据库中用到的数据结构数据模型，死锁的概念（问的应该是数据库的死锁），如何避免死锁?</li><li>乐观锁和悲观锁?</li><li>一致性hash算法</li><li>项目中业务对象的关联关系/关联方式，谈谈左外连接及如何实现多对多关系模型</li><li>spring的IOC和AOP</li><li>sping如何实现（保证）事务一致性完整性，spring中事务传播机制类型</li><li>谈谈WEB的架构（应该指的是j2ee开发架构模型）、项目中的用户场景使用场景</li><li>对分布式架构的了解，如分布式存储 分布式缓存 分布式计算</li><li>谈谈对阿里的哪些开源项目有所了解？</li><li>对淘宝技术是否有了解？</li><li>对其杭州信息平台事业部其主要业务是否了解（其主要是java方面的开发，另可以重点关注看看工作流引擎）</li></ul><h2><b>二面主要问题如下（主要是遇到问题时的解决方案考察）：</b></h2><ul><li>负载均衡算法有哪些？了解Nginx的分流？</li><li>如何解决高并发？</li><li>Mybatis怎么使用事务？</li><li>mysql的myisam和innodb区别，以及为什么要这样使用？</li><li>手写数据库连接池</li><li>问了redis、分布式缓存、中间件，项目的使用场景里的细节。</li><li>实际工作的JVM调优经验，举例说明</li><li>乐观锁和悲观锁（Java和数据库）</li><li>怎么优化大数据量，对应的技术解决方案？你认为的优先级排序？</li></ul><h2><b>三面主要问题如下（注重于项目）：</b></h2><ul><li>工作种有遇见过服务器雪崩吗？你知道雪崩的场景一般是由什么情况引起的？</li><li>谈谈你熟知的并发编程，将会涉及到哪些技术，对应的技术应用到哪里？</li><li>谈谈分布式session的存储方式，比较和区别，哪种你认为比较好？</li><li>接触过分布式全局唯一ID吗？有哪几类生成方式？各自的优劣势？</li><li>分布式架构设计包含哪些，你工作中应用到的技术有哪些？</li><li>你主导的有技术挑战的项目，挑战在哪里，怎么设计来解决？</li><li>双11秒杀，整体的设计思路？</li></ul><p><b>总体上来看，还是比较注重基础的尤其是java的多线程和并发安全性及数据库相关，另外对有关开源框架的具体底层实现需要多阅读源码并进行总结。</b></p><p><b>再给大家总结一下面试要注意的地方</b>：面试前，提前准备面试问题的回答，回顾好简历中的工作经历；面试的时候，自我介绍要表现出自己的热情、与岗位的匹配、以及自己的亮点及有趣的地方，牢记 WWHC，STAR 原则，从岗位、部门、企业层面提问面试官；心态平稳，不要在技术面试时因为有一个知识点的不清楚而在后面的问题也回答不好！</p><h2><b>四面聊人生</b></h2><p>leader人very nice，给了一些建议，可能是觉得技术差不多，这面基本没怎么问技术，主要是职业发展、IBM的实习内容之类，我想大家可能也都有自己的想法，18分钟。</p><p>hr面聊成长经历:聊了一下对B2B的认识和自己的技术成长历程。</p><h2><b>分享</b></h2><blockquote><b>在这我总结出了一些架构视频资料和互联网公司java程序员面试涉及到的绝大部分面试题及答案做成了文档和架构视频资料还有完整高清的java进阶架构学习思维导图免费分享给大家（包括Dubbo、Redis、Netty、zookeeper、Spring cloud、分布式、高并发等架构技术资料），希望能帮助到您面试前的复习且找到一个好的工作，也节省大家在网上搜索资料的时间来学习。</b></blockquote><p><b>资料领取方式：点赞+关注后后台私信【面试】领取资料！（诚信满满）</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aa0c8df0e41e6b552a9731675a7f8619_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-aa0c8df0e41e6b552a9731675a7f8619_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;590&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"590\" data-original=\"https://pic2.zhimg.com/v2-aa0c8df0e41e6b552a9731675a7f8619_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aa0c8df0e41e6b552a9731675a7f8619_b.jpg\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//shimo.im/docs/eS3OHM0QBDgqkkGd\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-32c5483eade1297834054eb7abfc3356_180x120.jpg\" data-image-width=\"1686\" data-image-height=\"407\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">免费获取Java学习笔记，面试，文档以及视频</a><h2><br/><b>B2B电商商城实战经历</b></h2><p>电商项目目的是把所学的分布式，微服务，性能调优等知识运用起来，只有在项目中你才能巩固知识，提升自己。实践电商项目会利用云服务器搭建真实的开发和部署环境，让你从零到项目实战，当你有着熟知和综合运用B2B电商商城的所需用到的知识和架构设计时会让你在面试中信心增长，在这也分享一个商城项目所有的内容和架构知识的运用！</p><p><b>系统设计</b></p><ol><li>架构设计</li><li>数据库设计</li><li>部署设计</li><li>基础开发框架</li></ol><p><b>用户管理子系统</b></p><ol><li>用户注册登录（二维码技术）</li><li>权限控制（shiro）</li><li>单点登录（session统一缓存，sso）</li></ol><p><b>商品管理子系统</b></p><ol><li>商品管理（mongodb）</li><li>商品分类（mongodb）</li><li>商品分布（nosql与mysql数据同步）</li><li>热卖商品排行（redis）</li></ol><p><b>搜索子系统</b></p><ol><li>基于ElasticSearch的全文搜索</li><li>检索需求分析</li><li>检索策略</li><li>索引设置</li><li>分词算法</li><li>命中率优化</li><li>订单实时统计</li></ol><p><b>订单子系统</b></p><ol><li>分布式环境生成唯一编号（zookeeper）</li><li>下单业务流程（消息中间件）</li><li>订单可靠性</li><li>秒杀功能（redis）</li><li>订单管理</li><li>订单功能（mongodb）</li></ol><p><b>支付系统</b></p><ol><li>微信支付对接</li><li>支付宝对接</li><li>银联对接开发</li><li>分布式调度系统</li><li>数据统计</li><li>数据同步</li><li>任务调度配置</li></ol><p><b>后台系统</b></p><ol><li>日常管理</li><li>在线IM系统（websockedNIO）</li><li>用户行为分析（日志系统设计）</li><li>报表大数据查询优化（mysql查询优化）</li></ol><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e4668e426bfc134a106aa1141d074528_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-e4668e426bfc134a106aa1141d074528_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-e4668e426bfc134a106aa1141d074528_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e4668e426bfc134a106aa1141d074528_b.jpg\"/></figure><p></p><p></p>", 
            "topic": [
                {
                    "tag": "B2C 商城", 
                    "tagLink": "https://api.zhihu.com/topics/19640596"
                }, 
                {
                    "tag": "天猫", 
                    "tagLink": "https://api.zhihu.com/topics/19672739"
                }, 
                {
                    "tag": "电子商务", 
                    "tagLink": "https://api.zhihu.com/topics/19550780"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86765433", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 5, 
            "title": "程序员搞笑段子锦集，内容太过真实，默默留下了感慨的泪水！", 
            "content": "<p><b>1.编程降低犯罪率。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a4e696f2c2972ff36bf3c68cb2b28fa9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-a4e696f2c2972ff36bf3c68cb2b28fa9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;840&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-a4e696f2c2972ff36bf3c68cb2b28fa9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a4e696f2c2972ff36bf3c68cb2b28fa9_b.jpg\"/></figure><p><br/><br/><b>2.程序员的好只有阿姨懂。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5d708f8f096bf4bfd5b51e46a88633ac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-5d708f8f096bf4bfd5b51e46a88633ac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;349&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"349\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-5d708f8f096bf4bfd5b51e46a88633ac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5d708f8f096bf4bfd5b51e46a88633ac_b.jpg\"/></figure><p><br/><br/><b>3.租房只租程序员。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3b4ce325c1706c993e8eb6abc2a6b888_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-3b4ce325c1706c993e8eb6abc2a6b888_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;526&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-3b4ce325c1706c993e8eb6abc2a6b888_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3b4ce325c1706c993e8eb6abc2a6b888_b.jpg\"/></figure><p><br/><br/><b>4.程序员工作写照。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ee1c91e404d1efd3c43f345cf3a1f4d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ee1c91e404d1efd3c43f345cf3a1f4d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;710&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"710\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-ee1c91e404d1efd3c43f345cf3a1f4d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ee1c91e404d1efd3c43f345cf3a1f4d9_b.jpg\"/></figure><p><br/><b>5.我还没下班呢！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cbd4884263a6b7400c00077b55b4a17f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"382\" class=\"content_image\" width=\"299\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;299&#39; height=&#39;382&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"382\" class=\"content_image lazy\" width=\"299\" data-actualsrc=\"https://pic4.zhimg.com/v2-cbd4884263a6b7400c00077b55b4a17f_b.jpg\"/></figure><p><br/><br/><b>6.世界上最好的语言PHP=拍黄片？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1a5819e6222acc766c16453893309599_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"1067\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-1a5819e6222acc766c16453893309599_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;1067&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"1067\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-1a5819e6222acc766c16453893309599_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1a5819e6222acc766c16453893309599_b.jpg\"/></figure><p><br/><br/><b>7.那个男的是谁？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-457405f0b07bbbc8e8fea2a82d0d7e02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic3.zhimg.com/v2-457405f0b07bbbc8e8fea2a82d0d7e02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;501&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"501\" data-original=\"https://pic3.zhimg.com/v2-457405f0b07bbbc8e8fea2a82d0d7e02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-457405f0b07bbbc8e8fea2a82d0d7e02_b.jpg\"/></figure><p><br/><br/><b>8.程序员压力没那么大。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-40f77b14f46b730a2ef9e75512d01243_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"261\" class=\"content_image\" width=\"408\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;408&#39; height=&#39;261&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"261\" class=\"content_image lazy\" width=\"408\" data-actualsrc=\"https://pic4.zhimg.com/v2-40f77b14f46b730a2ef9e75512d01243_b.jpg\"/></figure><p><br/><br/><b>9.从删库到跑路。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-889917fc34d757e52b8a4e96436e5ad7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"425\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"425\" data-original=\"https://pic4.zhimg.com/v2-889917fc34d757e52b8a4e96436e5ad7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;425&#39; height=&#39;439&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"425\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"425\" data-original=\"https://pic4.zhimg.com/v2-889917fc34d757e52b8a4e96436e5ad7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-889917fc34d757e52b8a4e96436e5ad7_b.jpg\"/></figure><p><br/><br/><b>10.面对经常变更需求的产品经理，我想说：我的刀呢？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2a7b763fc839e83e9143d1314cc3b51b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic4.zhimg.com/v2-2a7b763fc839e83e9143d1314cc3b51b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;676&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic4.zhimg.com/v2-2a7b763fc839e83e9143d1314cc3b51b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2a7b763fc839e83e9143d1314cc3b51b_b.jpg\"/></figure><p><br/><br/><b>11.一程序员去面试，面试官看了简历问道：“你毕业才两年，这三年工作经验是怎么来的？”程序员答：“加班。”</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bf51d45259798112bcd152d651c2b61a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb\" width=\"599\" data-original=\"https://pic3.zhimg.com/v2-bf51d45259798112bcd152d651c2b61a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;599&#39; height=&#39;398&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"599\" data-original=\"https://pic3.zhimg.com/v2-bf51d45259798112bcd152d651c2b61a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bf51d45259798112bcd152d651c2b61a_b.jpg\"/></figure><p><br/><br/><b>12.没点真材实料怎么当好外卖小哥？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0d3cba2681670c520009c59a1f9c9723_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-0d3cba2681670c520009c59a1f9c9723_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;619&#39; height=&#39;799&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"619\" data-original=\"https://pic4.zhimg.com/v2-0d3cba2681670c520009c59a1f9c9723_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0d3cba2681670c520009c59a1f9c9723_b.jpg\"/></figure><p><br/><br/><b>13.程序员和黑客的区别。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b244ed441c2e9b7df5d52cd204fd7dfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"169\" class=\"content_image\" width=\"299\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;299&#39; height=&#39;169&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"169\" class=\"content_image lazy\" width=\"299\" data-actualsrc=\"https://pic3.zhimg.com/v2-b244ed441c2e9b7df5d52cd204fd7dfe_b.jpg\"/></figure><p><br/><br/><b>14.程序员和女朋友争吵是一种什么样的体验？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-656aa4621ecc4fccac592fe42722f840_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-656aa4621ecc4fccac592fe42722f840_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;730&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"730\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-656aa4621ecc4fccac592fe42722f840_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-656aa4621ecc4fccac592fe42722f840_b.jpg\"/></figure><p><br/><b>欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><p></p><p></p>", 
            "topic": [
                {
                    "tag": "搞笑段子", 
                    "tagLink": "https://api.zhihu.com/topics/20327002"
                }, 
                {
                    "tag": "程序猿生存必备", 
                    "tagLink": "https://api.zhihu.com/topics/19963617"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86591018", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 1, 
            "title": "一线名企面试都爱问的高频44道Redis真题，你能答对多少？", 
            "content": "<h2><b>前言</b></h2><p>在大数据时代，频繁地在应用和数据库之间进行读写操作在性能、速度、体验上已经远远不能满足用户、客户、开发人员的要求了，于是一种基于内存操作的数据库便应运而生。Redis 是一种基于内存的数据库，如何轻松理解并熟练操作 Redis 是一个有责任心、进取心程序员应该了解和掌握的技术。Redis在互联网技术存储方面使用如此广泛，几乎所有的后端技术面试官都要在Redis的使用和原理方面对小伙伴们进行各种刁难。作为一名在互联网技术行业打击过成百上千名【请允许我夸张一下】的资深技术面试官，看过了无数落寞的身影失望的离开，略感愧疚，故献上此文，希望各位朋友以后面试势如破竹，永无失败！</p><p><b>同时欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-09b3f3cdd8bca904d9544bb489943222_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-09b3f3cdd8bca904d9544bb489943222_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-09b3f3cdd8bca904d9544bb489943222_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-09b3f3cdd8bca904d9544bb489943222_b.jpg\"/></figure><h2><b>Redis基础相关问题</b></h2><ol><li>Redis 是什么？说说它的优点和缺点？</li><li>Redis与memcached相比有哪些优势？</li><li>Redis支持哪几种数据类型？</li><li>Redis主要消耗什么物理资源？</li><li>Redis有哪几种数据淘汰策略？</li><li>Redis官方为什么不提供Windows版本？</li><li>一个字符串类型的值能存储最大容量是多少？</li><li>如何将 Redis 放到应用程序中？</li><li>使用 Redis 的时候应用程序是如何进行读写的？</li><li>为什么Redis需要把所有数据放到内存中？</li><li>什么是CAP理论？</li></ol><h2><b>Redis集群相关问题</b></h2><ol><li>Redis集群方案应该怎么做？都有哪些方案？</li><li>Redis集群方案什么情况下会导致整个集群不可用？</li><li>MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据？</li><li>Redis有哪些适合的场景？</li><li>Redis支持的Java客户端都有哪些？官方推荐用哪个？</li><li>Redis和Redisson有什么关系？</li><li>Jedis与Redisson对比有什么优缺点？</li><li>说说Redis哈希槽的概念？</li><li>Redis集群的主从复制模型是怎样的？</li><li>Redis集群会有写操作丢失吗？为什么？</li><li>Redis集群之间是如何复制的？</li><li>Redis集群最大节点个数是多少？</li><li>Redis集群如何选择数据库？</li><li>Redis中的管道有什么用？</li></ol><h2><b>Redis分布式锁等相关问题</b></h2><ol><li>使用过Redis分布式锁么，它是怎么实现的？</li><li>简述Redis分布式锁的缺陷？</li><li>讲讲对Redisson实现Redis分布式锁的底层原理的理解？</li><li>加锁机制，锁互斥机制，watch dog自动延期机制，可重入加锁机制，锁释放机制是什么？</li><li>Redis 的 Setnx 命令是如何实现分布式锁的？</li><li>说说对Setnx 的实现锁的原理的理解？</li><li>如何避免死锁的出现？</li><li>怎么理解Redis事务？</li><li>Redis事务相关的命令有哪几个？</li><li>Redis key的过期时间和永久有效分别怎么设置？</li><li>Redis如何做内存优化？</li><li>Redis回收进程如何工作的？</li><li>使用过Redis做异步队列么，你是怎么用的？有什么缺点？</li><li>什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？</li></ol><h2><b>Redis结合MySQL 的相关问题</b></h2><ol><li>Redis 如何与 MySQL 数据库结合起来？</li><li>应用通过 Redis 客户端进行读取并展示，是所有的数据都是这么做吗？</li><li>在修改数据的时候是修改到 Redis 吗？还是直接修改 MySQL?</li><li>如果修改 Redis 中数据，那什么时候同步到 MySQL，是被迫的，还是开发人员可控的？</li><li>如果直接修改 MySQL 中数据，那 Redis 中数据会被同步吗，如何做到的？</li></ol><h2><b>如何正确系统的学习Redis高性能缓存数据库</b></h2><p>为什么要学习 Redis？16 年以来，互联网泡沫破裂，大量互联网公司倒闭，导致开发人员一下子变得不那么稀缺抢手，各个公司面试时也是慎之又慎，整体就业环境较之前变差。这就要求我们得有更多技能来增强我们的竞争力，现在大部分互联网企业中都要求要熟悉 Redis 的使用。所以学会使用 Redis 可以使你更具竞争力，Java、PHP、Python等主流编程语言开发的项目中 Redis 都有普遍应用，学习 Redis 可以在企业眼中具吸引力。<b>在这给有需要的朋友的朋友提供一套系统Redis的学习思维导图</b>！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bbf4869ae6957b51e14ed1e38c6e4be0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"575\" class=\"content_image\" width=\"383\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;383&#39; height=&#39;575&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"383\" data-rawheight=\"575\" class=\"content_image lazy\" width=\"383\" data-actualsrc=\"https://pic1.zhimg.com/v2-bbf4869ae6957b51e14ed1e38c6e4be0_b.jpg\"/></figure><p><br/>最后针对思维导图，小编根据多年的经验也整理了一套视频资料和面试题资料</p><p>（包括Kafka、Mysql、Tomcat、Docker、MyBatis、Nginx、Netty、Dubbo、Redis、Spring cloud、分布式、高并发、性能调优、微服务）</p><p><b>资料领取方式：点赞+关注后后台私信【学习】获取资料领取方式！</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-60aa9540fd98eb0e162d580583025d6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-60aa9540fd98eb0e162d580583025d6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;566&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-60aa9540fd98eb0e162d580583025d6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-60aa9540fd98eb0e162d580583025d6f_b.jpg\"/></figure><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "Redis", 
                    "tagLink": "https://api.zhihu.com/topics/19557280"
                }, 
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86578960", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 2, 
            "title": "详解Java集合框架，让你全面掌握！", 
            "content": "<h2><b>一、Java集合框架概述</b></h2><p>集合可以看作是一种容器，用来存储对象信息。所有集合类都位于java.util包下，但支持多线程的集合类位于<b>java.util.concurrent</b>包下。</p><p><b>数组与集合的区别如下</b>：</p><p>1）数组长度不可变化而且无法保存具有映射关系的数据；集合类用于保存数量不确定的数据，以及保存具有映射关系的数据。</p><p>2）数组元素既可以是基本类型的值，也可以是对象；集合只能保存对象。</p><p>Java集合类主要由两个根接口<b>Collection</b>和<b>Map</b>派生出来的，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系，（<b>注意：Map不是Collection的子接口</b>）。</p><p>Java集合框架图如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5e75c0bc291f1e013f36da86430eabfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-5e75c0bc291f1e013f36da86430eabfc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;766&#39; height=&#39;355&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"766\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"766\" data-original=\"https://pic1.zhimg.com/v2-5e75c0bc291f1e013f36da86430eabfc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5e75c0bc291f1e013f36da86430eabfc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-63575c6a584f782cb9f3bf044d8f88b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"582\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb\" width=\"582\" data-original=\"https://pic2.zhimg.com/v2-63575c6a584f782cb9f3bf044d8f88b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;582&#39; height=&#39;243&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"582\" data-rawheight=\"243\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"582\" data-original=\"https://pic2.zhimg.com/v2-63575c6a584f782cb9f3bf044d8f88b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-63575c6a584f782cb9f3bf044d8f88b1_b.jpg\"/></figure><p><br/>其中List代表了有序可重复集合，可直接根据元素的索引来访问；Set代表无序不可重复集合，只能根据元素本身来访问；Queue是队列集合；Map代表的是存储key-value对的集合，可根据元素的key来访问value。</p><p>上图中淡绿色背景覆盖的是集合体系中常用的实现类，分别是ArrayList、LinkedList、ArrayQueue、HashSet、TreeSet、HashMap、TreeMap等实现类。</p><h2><b>二、Java集合常见接口及实现类</b></h2><p><b>1. Collection接口常见方法（来源于Java API）</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-983b5917422b7af1555bdb13fa3a362e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"997\" data-rawheight=\"793\" class=\"origin_image zh-lightbox-thumb\" width=\"997\" data-original=\"https://pic3.zhimg.com/v2-983b5917422b7af1555bdb13fa3a362e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;997&#39; height=&#39;793&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"997\" data-rawheight=\"793\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"997\" data-original=\"https://pic3.zhimg.com/v2-983b5917422b7af1555bdb13fa3a362e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-983b5917422b7af1555bdb13fa3a362e_b.jpg\"/></figure><p><b>2. Set集合</b></p><p>Set集合与Collection的方法相同，由于Set集合不允许存储相同的元素，所以如果把两个相同元素添加到同一个Set集合，则添加操作失败，新元素不会被加入，add()方法返回false。为了帮助理解，请看下面代码示例：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n   <span class=\"n\">Set</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">set</span><span class=\"o\">=</span><span class=\"k\">new</span> <span class=\"n\">HashSet</span><span class=\"o\">();</span>\n   <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;hello world&#34;</span><span class=\"o\">);</span>\n   <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;hello 冰湖一角&#34;</span><span class=\"o\">);</span>\n   <span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">&#34;hello 冰湖一角&#34;</span><span class=\"o\">);</span>\n   <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;集合中元素个数：&#34;</span>\n        <span class=\"o\">+</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">());</span>\n   <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;集合中元素为：&#34;</span>\n       <span class=\"o\">+</span><span class=\"n\">set</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}&lt;/</span><span class=\"n\">pre</span><span class=\"o\">&gt;</span></code></pre></div><p>运行结果如下：</p><p>集合中元素个数：2<br/>集合中元素为：[hello world, hello 冰湖一角]</p><p>分析：由于String类中重写了hashCode()和equals()方法，用来比较指向的字符串对象所存储的字符串是否相等。所以这里的第二个&#34;hello 冰湖一角&#34;是加不进去的。</p><p>下面着重介绍Set集合几个常用实现类：</p><p><b>1）HashSet类</b></p><p>HashSet是Set集合最常用实现类，是其经典实现。HashSet是按照hash算法来存储元素的，因此具有很好的存取和查找性能。</p><p>HashSet具有如下特点：</p><p>♦ 不能保证元素的顺序。</p><p>♦ HashSet不是线程同步的，如果多线程操作HashSet集合，则应通过代码来保证其同步。</p><p>♦ 集合元素值可以是null。</p><p>HashSet存储原理如下：</p><p>当向HashSet集合存储一个元素时，HashSet会调用该对象的hashCode()方法得到其hashCode值，然后根据hashCode值决定该对象的存储位置。HashSet集合判断两个元素相等的标准是(1)两个对象通过equals()方法比较返回true；(2)两个对象的hashCode()方法返回值相等。因此，如果(1)和(2)有一个不满足条件，则认为这两个对象不相等，可以添加成功。如果两个对象的hashCode()方法返回值相等，但是两个对象通过equals()方法比较返回false，HashSet会以链式结构将两个对象保存在同一位置，这将导致性能下降，因此在编码时应避免出现这种情况。</p><p>HashSet查找原理如下：</p><p>基于HashSet以上的存储原理，在查找元素时，HashSet先计算元素的HashCode值（也就是调用对象的hashCode方法的返回值），然后直接到hashCode值对应的位置去取出元素即可，这就是HashSet速度很快的原因。</p><p>重写hashCode()方法的基本原则如下：</p><p>♦ 在程序运行过程中，同一个对象的hashCode()方法返回值应相同。</p><p>♦ 当两个对象通过equals()方法比较返回true时，这两个对象的hashCode()方法返回值应该相等。</p><p>♦ 对象中用作equals()方法比较标准的实例变量，都应该用于计算hashCode值。</p><p><b>2）LinkedHashSet类</b></p><p>LinkedHashSet是HashSet的一个子类，具有HashSet的特性，也是根据元素的hashCode值来决定元素的存储位置。但它使用链表维护元素的次序，元素的顺序与添加顺序一致。由于LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet，但在迭代访问Set里的全部元素时由很好的性能。</p><p><b>3）TreeSet类</b></p><p>TreeSet时SortedSet接口的实现类，TreeSet可以保证元素处于排序状态，它采用红黑树的数据结构来存储集合元素。TreeSet支持两种排序方法：自然排序和定制排序，默认采用自然排序。</p><p><b>♦ 自然排序</b></p><p>TreeSet会调用集合元素的compareTo(Object obj)方法来比较元素的大小关系，然后将元素按照升序排列，这就是自然排序。如果试图将一个对象添加到TreeSet集合中，则该对象必须实现Comparable接口，否则会抛出异常。当一个对象调用方法与另一个对象比较时，例如obj1.compareTo(obj2)，如果该方法返回0，则两个对象相等；如果返回一个正数，则obj1大于obj2；如果返回一个负数，则obj1小于obj2。</p><p>Java常用类中已经实现了Comparable接口的类有以下几个：</p><p>♦ BigDecimal、BigDecimal以及所有数值型对应的包装类：按照它们对应的数值大小进行比较。</p><p>♦ Charchter：按照字符的unicode值进行比较。</p><p>♦ Boolean：true对应的包装类实例大于false对应的包装类实例。</p><p>♦ String：按照字符串中的字符的unicode值进行比较。</p><p>♦ Date、Time：后面的时间、日期比前面的时间、日期大。</p><p>对于TreeSet集合而言，它判断两个对象是否相等的标准是：两个对象通过compareTo(Object obj)方法比较是否返回0，如果返回0则相等。</p><p><b>♦ 定制排序</b></p><p>想要实现定制排序，需要在创建TreeSet集合对象时，提供一个Comparator对象与该TreeSet集合关联，由Comparator对象负责集合元素的排序逻辑。</p><p>综上：自然排序实现的是Comparable接口，定制排序实现的是Comparator接口。（具体代码实现会在后续章节中讲解）</p><p><b>4）EnumSet类</b></p><p>EnumSet是一个专为枚举类设计的集合类，不允许添加null值。EnumSet的集合元素也是有序的，它以枚举值在Enum类内的定义顺序来决定集合元素的顺序。</p><p><b>5）各Set实现类的性能分析</b></p><p>HashSet的性能比TreeSet的性能好（特别是添加，查询元素时），因为TreeSet需要额外的红黑树算法维护元素的次序，如果需要一个保持排序的Set时才用TreeSet，否则应该使用HashSet。</p><p>LinkedHashSet是HashSet的子类，由于需要链表维护元素的顺序，所以插入和删除操作比HashSet要慢，但遍历比HashSet快。</p><p>EnumSet是所有Set实现类中性能最好的，但它只能 保存同一个枚举类的枚举值作为集合元素。</p><p>以上几个Set实现类都是线程不安全的，如果多线程访问，必须手动保证集合的同步性，这在后面的章节中会讲到。</p><p><b>3. List集合</b></p><p>List集合代表一个有序、可重复集合，集合中每个元素都有其对应的顺序索引。List集合默认按照元素的添加顺序设置元素的索引，可以通过索引（类似数组的下标）来访问指定位置的集合元素。</p><p>实现List接口的集合主要有：ArrayList、LinkedList、Vector、Stack。</p><p><b>1）ArrayList</b></p><p>ArrayList是一个动态数组，也是我们最常用的集合，是List类的典型实现。它允许任何符合规则的元素插入甚至包括null。每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小。随着容器中的元素不断增加，容器的大小也会随着增加。在每次向容器中增加元素的同时都会进行容量检查，当快溢出时，就会进行扩容操作。所以如果我们明确所插入元素的多少，最好指定一个初始容量值，避免过多的进行扩容操作而浪费时间、效率。</p><p>ArrayList擅长于随机访问元，同时ArrayList是非同步的。</p><p><b>2）LinkedList</b></p><p>LinkedList是List接口的另一个实现，除了可以根据索引访问集合元素外，LinkedList还实现了Deque接口，可以当作双端队列来使用，也就是说，既可以当作“栈”使用，又可以当作队列使用。</p><p>LinkedList的实现机制与ArrayList的实现机制完全不同，ArrayLiat内部以数组的形式保存集合的元素，所以随机访问集合元素有较好的性能；LinkedList内部以链表的形式保存集合中的元素，所以随机访问集合中的元素性能较差，但在插入删除元素时有较好的性能。</p><p><b>3）Vector</b></p><p>与ArrayList相似，但是Vector是同步的。所以说Vector是线程安全的动态数组。它的操作与ArrayList几乎一样。</p><p><b>4）Stack</b></p><p>Stack继承自Vector，实现一个后进先出的堆栈。Stack提供5个额外的方法使得Vector得以被当作堆栈使用。基本的push和pop 方法，还有peek方法得到栈顶的元素，empty方法测试堆栈是否为空，search方法检测一个元素在堆栈中的位置。Stack刚创建后是空栈。</p><p><b>5）Iterator接口和ListIterator接口</b></p><p>Iterator是一个接口，它是集合的迭代器。集合可以通过Iterator去遍历集合中的元素。Iterator提供的API接口如下：</p><p>♦ boolean hasNext()：判断集合里是否存在下一个元素。如果有，hasNext()方法返回 true。<br/>♦ Object next()：返回集合里下一个元素。<br/>♦ void remove()：删除集合里上一次next方法返回的元素。</p><p>ListIterator接口继承Iterator接口，提供了专门操作List的方法。ListIterator接口在Iterator接口的基础上增加了以下几个方法：</p><p>♦ boolean hasPrevious()：判断集合里是否存在上一个元素。如果有，该方法返回 true。<br/>♦ Object previous()：返回集合里上一个元素。<br/>♦ void add(Object o)：在指定位置插入一个元素。</p><p>以上两个接口相比较，不难发现，ListIterator增加了向前迭代的功能（Iterator只能向后迭代），ListIterator还可以通过add()方法向List集合中添加元素（Iterator只能删除元素）。</p><p><b>4. Map集合</b></p><p>Map接口采用键值对Map&lt;K,V&gt;的存储方式，保存具有映射关系的数据，因此，Map集合里保存两组值，一组值用于保存Map里的key，另外一组值用于保存Map里的value，key和value可以是任意引用类型的数据。key值不允许重复，可以为null。如果添加key-value对时Map中已经有重复的key，则新添加的value会覆盖该key原来对应的value。常用实现类有HashMap、LinkedHashMap、TreeMap等。</p><p>Map常见方法（来源于API）如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-47f7ec6eedf1bd0164c29f2747e628c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"922\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"922\" data-original=\"https://pic3.zhimg.com/v2-47f7ec6eedf1bd0164c29f2747e628c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;922&#39; height=&#39;736&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"922\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"922\" data-original=\"https://pic3.zhimg.com/v2-47f7ec6eedf1bd0164c29f2747e628c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-47f7ec6eedf1bd0164c29f2747e628c2_b.jpg\"/></figure><p><b>1）HashMap与Hashtable</b></p><p>HashMap与Hashtable是Map接口的两个典型实现，它们之间的关系完全类似于ArrayList与Vertor。HashTable是一个古老的Map实现类，它提供的方法比较繁琐，目前基本不用了，HashMap与Hashtable主要存在以下两个典型区别：</p><p>♦ HashMap是线程不安全，HashTable是线程安全的。</p><p>♦ HashMap可以使用null值最为key或value；Hashtable不允许使用null值作为key和value，如果把null放进HashTable中，将会发生空指针异常。</p><p>为了成功的在HashMap和Hashtable中存储和获取对象，用作key的对象必须实现hashCode()方法和equals()方法。</p><p>HashMap工作原理如下：</p><p>HashMap基于hashing原理，通过put()和get()方法存储和获取对象。当我们将键值对传递给put()方法时，它调用建对象的hashCode()方法来计算hashCode值，然后找到bucket位置来储存值对象。当获取对象时，通过建对象的equals()方法找到正确的键值对，然后返回对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会存储在链表的下一个节点中。</p><p><b>2）LinkedHashMap实现类</b></p><p>LinkedHashMap使用双向链表来维护key-value对的次序（其实只需要考虑key的次序即可），该链表负责维护Map的迭代顺序，与插入顺序一致，因此性能比HashMap低，但在迭代访问Map里的全部元素时有较好的性能。</p><p><b>3）Properties</b></p><p>Properties类时Hashtable类的子类，它相当于一个key、value都是String类型的Map，主要用于读取配置文件。</p><p><b>4）TreeMap实现类</b></p><p>TreeMap是SortedMap的实现类，是一个红黑树的数据结构，每个key-value对作为红黑树的一个节点。TreeMap存储key-value对时，需要根据key对节点进行排序。TreeMap也有两种排序方式：</p><p>♦ 自然排序：TreeMap的所有key必须实现Comparable接口，而且所有的key应该是同一个类的对象，否则会抛出ClassCastException。</p><p>♦ 定制排序：创建TreeMap时，传入一个Comparator对象，该对象负责对TreeMap中的所有key进行排序。</p><p><b>5）各Map实现类的性能分析</b></p><p>♦ HashMap通常比Hashtable（古老的线程安全的集合）要快</p><p>♦ TreeMap通常比HashMap、Hashtable要慢，因为TreeMap底层采用红黑树来管理key-value。</p><p>♦ LinkedHashMap比HashMap慢一点，因为它需要维护链表来爆出key-value的插入顺序。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "Java", 
                    "tagLink": "https://api.zhihu.com/topics/19561132"
                }, 
                {
                    "tag": "并发", 
                    "tagLink": "https://api.zhihu.com/topics/19757794"
                }, 
                {
                    "tag": "Java 编程", 
                    "tagLink": "https://api.zhihu.com/topics/19582744"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86469761", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 1, 
            "title": "我对程序员的认知从我看到他们桌面才知道...", 
            "content": "<p>爱因斯坦说“要是乱糟糟的桌面意味着杂乱无章的脑袋，那空白桌面意味着什么呢？”</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-83a7346b00c0f69c5cdeb45b5c9ea9ac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-83a7346b00c0f69c5cdeb45b5c9ea9ac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-83a7346b00c0f69c5cdeb45b5c9ea9ac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-83a7346b00c0f69c5cdeb45b5c9ea9ac_b.jpg\"/></figure><p>似乎很多在某些领域拥有天赋的人都不喜欢干净整洁的桌面，包括乔布斯和扎克伯格也是，甚至有的人一看到整洁的桌面就会感到一阵惶恐，想马上弄乱。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-063a2eb247271a0f63f9f2ba514506c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic2.zhimg.com/v2-063a2eb247271a0f63f9f2ba514506c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;407&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"407\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic2.zhimg.com/v2-063a2eb247271a0f63f9f2ba514506c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-063a2eb247271a0f63f9f2ba514506c5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c19a425fa2eafd2356fda668bc1ee1e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb\" width=\"592\" data-original=\"https://pic4.zhimg.com/v2-c19a425fa2eafd2356fda668bc1ee1e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;592&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"592\" data-original=\"https://pic4.zhimg.com/v2-c19a425fa2eafd2356fda668bc1ee1e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c19a425fa2eafd2356fda668bc1ee1e3_b.jpg\"/></figure><p>慢慢的，杂乱无章似乎变成了创造力和脑力劳动者的代名词。对他们来说看似混乱的背后，其实自有一套混乱制造者的逻辑，并不会影响他们执行工作的效率。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4a528f2884a1d0ef01546bbb35f7e5dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"306\" class=\"content_image\" width=\"292\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;292&#39; height=&#39;306&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"292\" data-rawheight=\"306\" class=\"content_image lazy\" width=\"292\" data-actualsrc=\"https://pic1.zhimg.com/v2-4a528f2884a1d0ef01546bbb35f7e5dc_b.jpg\"/></figure><p>这一点在程序员的身上有了很好的印证，程序员在用电脑工作的过程中，灵感随时可以从混乱的桌面获得。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-626922dcee8b6d7fe98672af3bf991c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-626922dcee8b6d7fe98672af3bf991c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-626922dcee8b6d7fe98672af3bf991c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-626922dcee8b6d7fe98672af3bf991c3_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a56071e00c3198990a312d0686f8f1bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-a56071e00c3198990a312d0686f8f1bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;406&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-a56071e00c3198990a312d0686f8f1bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a56071e00c3198990a312d0686f8f1bd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-904af5adbe43d93b253e4eda703096d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"421\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-904af5adbe43d93b253e4eda703096d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;421&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"421\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-904af5adbe43d93b253e4eda703096d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-904af5adbe43d93b253e4eda703096d6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-137048d6fbc60b8c18d03e912fadc159_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-137048d6fbc60b8c18d03e912fadc159_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-137048d6fbc60b8c18d03e912fadc159_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-137048d6fbc60b8c18d03e912fadc159_b.jpg\"/></figure><p>“乱，乱到怀疑人生”</p><p>为了将电脑桌面整理干净，大神们开始各显神通，然后慢慢地，桌面就开始……我们来一起看看这些程序员“充满创造力”的桌面吧……</p><p>这里的山路十八弯，这里的文件排排站……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ce0f116f0fae336ea78abeb5a7b9fb33_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-ce0f116f0fae336ea78abeb5a7b9fb33_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-ce0f116f0fae336ea78abeb5a7b9fb33_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ce0f116f0fae336ea78abeb5a7b9fb33_b.jpg\"/></figure><p>晾衣绳</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f5ab26fb5a1ab70e62ba925d306246c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-f5ab26fb5a1ab70e62ba925d306246c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-f5ab26fb5a1ab70e62ba925d306246c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f5ab26fb5a1ab70e62ba925d306246c5_b.jpg\"/></figure><p>图标摆放的艺术</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4853361d69ff24963f3b272b17678167_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4853361d69ff24963f3b272b17678167_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4853361d69ff24963f3b272b17678167_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4853361d69ff24963f3b272b17678167_b.jpg\"/></figure><p>如何优雅表现出自己的球迷身份</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f84cc360d20ae2b349849152dc6ca373_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-f84cc360d20ae2b349849152dc6ca373_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-f84cc360d20ae2b349849152dc6ca373_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f84cc360d20ae2b349849152dc6ca373_b.jpg\"/></figure><p>万有引力版桌面也非常炫酷啊</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-adb5e6d9c832536497012d052c352027_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-adb5e6d9c832536497012d052c352027_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;560&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-adb5e6d9c832536497012d052c352027_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-adb5e6d9c832536497012d052c352027_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6ef03eb5bdf39cd6b0cff9d965ec4b1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-6ef03eb5bdf39cd6b0cff9d965ec4b1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-6ef03eb5bdf39cd6b0cff9d965ec4b1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6ef03eb5bdf39cd6b0cff9d965ec4b1b_b.jpg\"/></figure><p>千万星战粉的选择</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d225ebd602b51842b59a3efecd0f83f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-d225ebd602b51842b59a3efecd0f83f7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-d225ebd602b51842b59a3efecd0f83f7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d225ebd602b51842b59a3efecd0f83f7_b.jpg\"/></figure><p>明天需要上线一个新功能</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eba03ce2974301c9bbb6e7426999abb3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-eba03ce2974301c9bbb6e7426999abb3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-eba03ce2974301c9bbb6e7426999abb3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-eba03ce2974301c9bbb6e7426999abb3_b.jpg\"/></figure><p>第二天都快下班了，需求还没上线！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a77005808b00f538aaf6b795184894d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-a77005808b00f538aaf6b795184894d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-a77005808b00f538aaf6b795184894d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a77005808b00f538aaf6b795184894d3_b.jpg\"/></figure><p>上线ing……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-29f415559736cba36ee78b68293d81c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-29f415559736cba36ee78b68293d81c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-29f415559736cba36ee78b68293d81c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-29f415559736cba36ee78b68293d81c2_b.jpg\"/></figure><p>新产品上线，需要一个程序员祭天</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1c33cbc5f869fa4647464d190e9c5e5a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-1c33cbc5f869fa4647464d190e9c5e5a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-1c33cbc5f869fa4647464d190e9c5e5a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1c33cbc5f869fa4647464d190e9c5e5a_b.jpg\"/></figure><p>看毕业两年，三年工作经验</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-38642a31334ff08f5b5a31b1e003a676_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"369\" class=\"origin_image zh-lightbox-thumb\" width=\"565\" data-original=\"https://pic3.zhimg.com/v2-38642a31334ff08f5b5a31b1e003a676_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;565&#39; height=&#39;369&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"369\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"565\" data-original=\"https://pic3.zhimg.com/v2-38642a31334ff08f5b5a31b1e003a676_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-38642a31334ff08f5b5a31b1e003a676_b.jpg\"/></figure><p>这一定是一位爱岗敬业的小姐姐</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3db668708f8d22b2dd8d81d7ad4f0e1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic3.zhimg.com/v2-3db668708f8d22b2dd8d81d7ad4f0e1a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;596&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"596\" data-original=\"https://pic3.zhimg.com/v2-3db668708f8d22b2dd8d81d7ad4f0e1a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3db668708f8d22b2dd8d81d7ad4f0e1a_b.jpg\"/></figure><p>一个人就是一个部门</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b92cffd15af3da75eba4db7fc7ae4ac6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb\" width=\"536\" data-original=\"https://pic3.zhimg.com/v2-b92cffd15af3da75eba4db7fc7ae4ac6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;536&#39; height=&#39;345&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"536\" data-original=\"https://pic3.zhimg.com/v2-b92cffd15af3da75eba4db7fc7ae4ac6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b92cffd15af3da75eba4db7fc7ae4ac6_b.jpg\"/></figure><p>这些工作咋干不完，全部烧了吧</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0032371ea7e4f8304758e979d1e12b8c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-0032371ea7e4f8304758e979d1e12b8c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-0032371ea7e4f8304758e979d1e12b8c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0032371ea7e4f8304758e979d1e12b8c_b.jpg\"/></figure><p>这是一位暴躁的程序员</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-92467b344ae6d3d4b82f1bad65a0f916_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-92467b344ae6d3d4b82f1bad65a0f916_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-92467b344ae6d3d4b82f1bad65a0f916_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-92467b344ae6d3d4b82f1bad65a0f916_b.jpg\"/></figure><p>程序员为啥单身？你自己心里没有点 X 数么！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d572ad89d105defb4908c6ac0f8ca70f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-d572ad89d105defb4908c6ac0f8ca70f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-d572ad89d105defb4908c6ac0f8ca70f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d572ad89d105defb4908c6ac0f8ca70f_b.jpg\"/></figure><p>再也没有什么比工作更让我热爱的了</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1b43ff565bb8f24098d5fc078ca1aecd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-1b43ff565bb8f24098d5fc078ca1aecd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-1b43ff565bb8f24098d5fc078ca1aecd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1b43ff565bb8f24098d5fc078ca1aecd_b.jpg\"/></figure><p>来告诉我，你用的是那个浏览器！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-88167cd7b6de4ffe8d32e1a3fb38b679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-88167cd7b6de4ffe8d32e1a3fb38b679_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-88167cd7b6de4ffe8d32e1a3fb38b679_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-88167cd7b6de4ffe8d32e1a3fb38b679_b.jpg\"/></figure><p>你选哪边？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6fd44c3872069766e7ef0392c7bf97d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-6fd44c3872069766e7ef0392c7bf97d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-6fd44c3872069766e7ef0392c7bf97d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6fd44c3872069766e7ef0392c7bf97d0_b.jpg\"/></figure><p>真爱程序员远离 IE…远离 IE</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d330f6c2eb95f8e95e5b82f78eb899e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d330f6c2eb95f8e95e5b82f78eb899e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-d330f6c2eb95f8e95e5b82f78eb899e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d330f6c2eb95f8e95e5b82f78eb899e5_b.jpg\"/></figure><p>这样对 IE 真的合适吗？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ccded2e522bad73024382e52d9028f60_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-ccded2e522bad73024382e52d9028f60_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;312&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-ccded2e522bad73024382e52d9028f60_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ccded2e522bad73024382e52d9028f60_b.jpg\"/></figure><p>我可算找到你了，嘿 嘿 嘿</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a1d67e7c75d7405fb01c671cd67d37af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a1d67e7c75d7405fb01c671cd67d37af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-a1d67e7c75d7405fb01c671cd67d37af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a1d67e7c75d7405fb01c671cd67d37af_b.jpg\"/></figure><p>太残忍了，轻点，别打死，慢慢折磨</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3793f7d0c080fd85c46b6945048147b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-3793f7d0c080fd85c46b6945048147b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-3793f7d0c080fd85c46b6945048147b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3793f7d0c080fd85c46b6945048147b0_b.jpg\"/></figure><p>重度强迫症同样也很精彩</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2b75aa2756b9df66b3efc029fa28ac8f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-2b75aa2756b9df66b3efc029fa28ac8f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-2b75aa2756b9df66b3efc029fa28ac8f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2b75aa2756b9df66b3efc029fa28ac8f_b.jpg\"/></figure><p>别人不写注释……别人不写文档……</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-19a405ae682dcc3a66356f3bb3e7a9d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-19a405ae682dcc3a66356f3bb3e7a9d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-19a405ae682dcc3a66356f3bb3e7a9d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-19a405ae682dcc3a66356f3bb3e7a9d0_b.jpg\"/></figure><p>你要相信：程序员们都是脾气极好的</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-482f493b67d4169ffcd0f691721577e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-482f493b67d4169ffcd0f691721577e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;590&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-482f493b67d4169ffcd0f691721577e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-482f493b67d4169ffcd0f691721577e2_b.jpg\"/></figure><p>虚实结合</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-62f69da688d9d19f0a1edcbd22c736b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-62f69da688d9d19f0a1edcbd22c736b4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-62f69da688d9d19f0a1edcbd22c736b4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-62f69da688d9d19f0a1edcbd22c736b4_b.jpg\"/></figure><p>把桌面延伸到三维世界中</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3abd98945b0dc8d844a897dd09ea05bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"1689\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-3abd98945b0dc8d844a897dd09ea05bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;1689&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"1689\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic4.zhimg.com/v2-3abd98945b0dc8d844a897dd09ea05bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3abd98945b0dc8d844a897dd09ea05bb_b.jpg\"/></figure><p>或许这就是大神吧</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-4c4b5f3deef70565c2500d1ca1d50ddf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4c4b5f3deef70565c2500d1ca1d50ddf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-4c4b5f3deef70565c2500d1ca1d50ddf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-4c4b5f3deef70565c2500d1ca1d50ddf_b.jpg\"/></figure><p>“他人笑我太凌乱，我笑他人看不穿。”这大概是程序员的电脑桌面被无情吐槽后，内心默念几百遍的潜台词吧。</p>", 
            "topic": [
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "程序猿生存必备", 
                    "tagLink": "https://api.zhihu.com/topics/19963617"
                }, 
                {
                    "tag": "桌面", 
                    "tagLink": "https://api.zhihu.com/topics/19566868"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86463823", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 3, 
            "title": "简谈Mysql的InnoDB存储引擎中的锁，让你轻松掌握", 
            "content": "<h2><b>一、InnoDB存储引擎中的锁</b></h2><p>锁，在现实生活中是为我们想要隐藏于外界所使用的一种工具。在计算机中，是协调多个进程或县城并发访问某一资源的一种机制。在数据库当中，除了传统的计算资源（CPU、RAM、I/O等等）的争用之外，数据也是一种供许多用户共享访问的资源。如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，锁的冲突也是影响数据库并发访问性能的一个重要因素。从这一角度来说，锁对于数据库而言就显得尤为重要。</p><p>相对于其他的数据库而言，MySQL的锁机制比较简单，最显著的特点就是不同的存储引擎支持不同的锁机制。根据不同的存储引擎，MySQL中锁的特性可以大致归纳如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1199cf6de1cda2bb07d145b38905d9c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-1199cf6de1cda2bb07d145b38905d9c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;109&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-1199cf6de1cda2bb07d145b38905d9c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1199cf6de1cda2bb07d145b38905d9c2_b.jpg\"/></figure><p>这里锁的对象是事务，用来锁定数据库中的对象，如：表、页、行。并且一般锁的对象仅在事务commit或rollback后进行释放。并且有死锁机制。</p><p>下面我们看InnoDB存储引擎中两种标准的行级锁：</p><ul><li>共享锁（S Lock），允许事务读一行数据</li><li>排它锁（X Lock），允许事务删除或更新一行数据</li></ul><p>若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S锁之前不能对A做任何修改。</p><p>若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。</p><p>上述情况称为锁不兼容。</p><p>此外，InnoDB存储引擎还支持多粒度锁定，这种锁定允许事务在行级上的锁和表级上的锁同时存在。为了支持在不同粒度上进行加锁操作，InnoDB存储引擎支持一种额外的锁方式，称之为意向锁。</p><p>所谓意向锁，就是将要锁定的对象分成多个层次，意向锁意味着事务希望在更细粒度上进行加锁。如果把上锁的对象看成树形结构（从根到叶为从粗粒度到细粒度的顺序），那么对最下层的对象上锁，必须先对他的上层节点上锁。</p><p>举个例子，比如事务T要对某一行R1加X锁，必须先对R1所在的表T1加意向锁IX（Intention X Lock）。相应的也有IS（Intetion S Lock）锁。</p><p>刚开始我也是很懵的，不知道引入意向锁到底是干嘛的。后来再刷书的时候，才豁然开朗。下面我谈下我的理解。</p><p>因为引入意向锁是用来实现多粒度锁定的，即行锁和表锁同时存在。我们看看如果不引入意向锁，怎么判断。</p><p>如果事务T要对表T1加X锁，那么这是就必须要判断T1表下的每一行记录是否加了S锁或X锁（因为上面提到了锁有不兼容性）。这样做效率无疑很低。那么引入意向锁之后呢？</p><p>如果事务T要对表T1加X锁，在这之前，已经有事务对表T1中的行记录R加了S锁，那么此时在表T1上有IS锁，当事务T对表T1准备加X锁时，由于X锁与IS锁不兼容（关于兼容性后面会给出表格），所以事务T要等待行锁操作完成。你看，这样就省去了遍历的操作，提升了锁定父节点（本例为表T1）的效率。</p><p>下图就是X、S、IX、IS锁的兼容性了：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-31673de7cf5630d77d5c9ed6e2fffeeb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-31673de7cf5630d77d5c9ed6e2fffeeb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;171&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"171\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-31673de7cf5630d77d5c9ed6e2fffeeb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-31673de7cf5630d77d5c9ed6e2fffeeb_b.jpg\"/></figure><h2><b>二、锁的算法</b></h2><p>InnoDB存储引擎有3种行锁的算法，分别是：</p><ul><li>Record Lock：单个行记录上的锁</li><li>Gap Lock：间隙锁，锁定一个范围，但不包含记录本身</li><li>Next-Key Lock：Gap Lock+Record Lock，锁定一个范围，并且锁定记录本身。</li></ul><p>举例说明：<br/>假如一个索引有10,11,13,20这四个值。那么该索引可能被Next-Key Locking的区间为：<br/>(-∞，10]<br/>(10,11]<br/>(11,13]<br/>(13,20]<br/>(20,+∞)</p><blockquote><b>注</b><br/>对于Next_Key Lock，如果我们锁定了一个行，且查询的索引含有唯一属性时（即有唯一索引），那么这个时候InnoDB会将Next_Key Lock优化成Record Lock，也就是锁定当前行，而不是锁定当前行加一个范围；如果我们使用的不是唯一索引锁定一行数据，那么此时InnoDB就会按照本来的规则锁定一个范围和记录。还有需要注意的点是，当唯一索引由多个列组成时，如果查询仅是查找其中的一个列，这时候是不会降级的。还有注意的点是，InnoDB存储引擎还会对辅助索引的下一个键值区间加上gap lock（这么做也是为了防止幻读）。Next_Key Lock是为了解决数据库出现幻读的问题。</blockquote><p>关于如何加锁详见我的这篇文章：Mysql的一致性非锁定读和一致性锁定读</p><p>有关脏读、不可重复读、幻读详见我的这篇文章浅析Mysql的隔离级别及MVCC</p><p>InnoDB存储引擎默认的事务隔离级别是RR级别，即可重复读。在该级别下，采用next-key locking的方式加锁。故而可以防止幻读现象。</p><p>举例一下，为什么next-key locking 可以解决幻读问题吧：</p><blockquote>所谓幻读，就是在同一事务下，连续执行两次同样的SQL语句可能导致不同的结果，第二次的SQL语句可能会返回之前不存在的行。</blockquote><p>创建表t:</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">create</span> <span class=\"n\">table</span> <span class=\"nf\">t</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"kt\">int</span> <span class=\"n\">primary</span> <span class=\"n\">key</span><span class=\"o\">);</span><span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"n\">t</span> <span class=\"n\">select</span> <span class=\"n\">1</span><span class=\"o\">;</span><span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"n\">t</span> <span class=\"n\">select</span> <span class=\"n\">2</span><span class=\"o\">;</span><span class=\"n\">insert</span> <span class=\"n\">into</span> <span class=\"n\">t</span> <span class=\"n\">select</span> <span class=\"n\">5</span><span class=\"o\">;</span>\n</code></pre></div><p>这时有三行记录，分别是1,2,5。</p><p>假设有如下执行序列：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d439e3a5adbca56569390dbaf0cdc08f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d439e3a5adbca56569390dbaf0cdc08f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d439e3a5adbca56569390dbaf0cdc08f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d439e3a5adbca56569390dbaf0cdc08f_b.jpg\"/></figure><p>我们分析一下，会话A在时间2查询的结果为5，由于使用了select...for update语句，为（2，+∞）这个范围加了X锁。因此任何对于这个范围的插入都是不被允许的，由于4在这个范围，所以不允许插入，也就避免了幻读。</p><p><b>如果觉得不错就点赞支持一下吧，同时也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-08cbadb7ae05cdf8d6498d65f8d65ad8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic1.zhimg.com/v2-08cbadb7ae05cdf8d6498d65f8d65ad8_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Innodb", 
                    "tagLink": "https://api.zhihu.com/topics/19612337"
                }, 
                {
                    "tag": "MySQL", 
                    "tagLink": "https://api.zhihu.com/topics/19554128"
                }, 
                {
                    "tag": "数据库", 
                    "tagLink": "https://api.zhihu.com/topics/19552067"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86441683", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 2, 
            "title": "一文让你彻底搞懂Java程序的初始化顺序", 
            "content": "<p><b>欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-15d9d2a769abfdb8121bc2cb53899540_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-15d9d2a769abfdb8121bc2cb53899540_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;427&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"427\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-15d9d2a769abfdb8121bc2cb53899540_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-15d9d2a769abfdb8121bc2cb53899540_b.jpg\"/></figure><h2><b>使用场景</b></h2><p>在Java程序中，当实例化对象时，对象的所在类的所有成员变量首先要进行初始化，只有当所有类成员完成初始化后，才会调用对象所在类的构造函数创建对象。</p><h2><b>原则</b></h2><ol><li>变量优先于块、静态优先于非静态。</li><li>父类优先于派生类初始化。</li><li>按照成员变量定义的顺序来进行初始化，即使变量定义散布于方法定义之中，它们仍然在任何方法（包括构造器）被调用前初始化。</li></ol><h2><b>初始化顺序</b></h2><ul><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ul><h2><b>初始化示例代码</b></h2><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">class</span> <span class=\"nc\">Base</span> <span class=\"o\">{</span>\n <span class=\"kd\">public</span> <span class=\"nf\">Base</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;父类构造方法&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"n\">String</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">&#34;父类非静态变量&#34;</span><span class=\"o\">;</span>\n <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;父类非静态代码块&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">&#34;父类静态变量&#34;</span><span class=\"o\">;</span>\n <span class=\"kd\">static</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;父类静态代码块&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">A</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;父类普通静态方法&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Derived</span> <span class=\"kd\">extends</span> <span class=\"n\">Base</span> <span class=\"o\">{</span>\n <span class=\"kd\">public</span> <span class=\"nf\">Derived</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;子类构造器&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"n\">String</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">&#34;子类非静态变量&#34;</span><span class=\"o\">;</span>\n <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">);</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;子类非静态代码块&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s\">&#34;子类静态变量&#34;</span><span class=\"o\">;</span>\n <span class=\"kd\">static</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;子类静态块&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">A</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;子类普通静态方法&#34;</span><span class=\"o\">);</span>\n <span class=\"o\">}</span>\n <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"na\">A</span><span class=\"o\">();</span>\n <span class=\"n\">Derived</span><span class=\"o\">.</span><span class=\"na\">A</span><span class=\"o\">();</span>\n <span class=\"k\">new</span> <span class=\"n\">Derived</span><span class=\"o\">();</span>\n <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>分别执行主函数里的三条指令，执行结果如下。</p><p><b>Base.A()</b></p><ul><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态块</li><li>父类普通静态方法</li></ul><p><b>Derived.A()</b></p><ul><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态块</li><li>子类普通静态方法</li></ul><p><b>new Derived()</b></p><ul><li>父类静态变量</li><li>父类静态代码块</li><li>子类静态变量</li><li>子类静态代码块</li><li>父类非静态变量</li><li>父类非静态代码块</li><li>父类构造函数</li><li>子类非静态变量</li><li>子类非静态代码块</li><li>子类构造函数</li></ul>", 
            "topic": [
                {
                    "tag": "知乎专栏", 
                    "tagLink": "https://api.zhihu.com/topics/19866282"
                }, 
                {
                    "tag": "股票知识学习", 
                    "tagLink": "https://api.zhihu.com/topics/19618598"
                }, 
                {
                    "tag": "Java程序", 
                    "tagLink": "https://api.zhihu.com/topics/20659188"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86435887", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 2, 
            "title": "【金九银十】终一搏，BAT、TMD名企精选面试题93道（附解析）！", 
            "content": "<p><b>首先欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b32d6e9490f4377836be3b6772cf5815_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic2.zhimg.com/v2-b32d6e9490f4377836be3b6772cf5815_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic2.zhimg.com/v2-b32d6e9490f4377836be3b6772cf5815_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b32d6e9490f4377836be3b6772cf5815_b.jpg\"/></figure><h2><b>心态</b></h2><ul><li>心态很重要！</li><li>心态很重要！</li><li>心态很重要！</li></ul><p>重要的事情说三遍，这一点我觉得是必须放到前面来讲。</p><p>找工作之前，有一点你必须清楚，就是找工作是一件看缘分的事情，不是你很牛，你就一定能进你想进的公司，都是有一个概率在那。如果你基础好，项目经验足，同时准备充分，那么你拿到offer的概率就会比较高；相反，如果你准备不充分，基础也不好，那么你拿到offer的概率就会比较低，但是你可以多投几家公司，这样拿到offer的几率就要大一点，因为你总有运气好的时候。所以，不要惧怕面试，刚开始失败了没什么的，多投多尝试，面多了你就自然能成面霸了。得失心也不要太重，最后每个人都会有offer的。</p><p>还有就是</p><p><b>技术才是我们程序员的立身之本，在再好的机遇面前我们也要有这个实力去抓住它</b>。</p><p>我这里整理了93道大型互联网公司会用到的面试题目（答案见文末）</p><p>希望在你的求职路上有一定的帮助。</p><h2><b>一、开源框架篇</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d94912dfabab51569b0032596598dba6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-d94912dfabab51569b0032596598dba6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;371&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-d94912dfabab51569b0032596598dba6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d94912dfabab51569b0032596598dba6_b.jpg\"/></figure><ol><li>BeanFactory 和 ApplicationContext 有什么区别</li><li>Spring Bean 的生命周期</li><li>Spring IOC 如何实现</li><li>说说 Spring AOP</li><li>Spring AOP 实现原理</li><li>动态代理（cglib 与 JDK）</li><li>Spring 事务实现方式</li><li>Spring 事务底层原理</li><li>如何自定义注解实现功能</li><li>Spring MVC 运行流程</li><li>Spring MVC 启动流程</li><li>Spring 的单例实现原理</li><li>Spring 框架中用到了哪些设计模式</li><li>为什么选择 Netty？</li><li>说说业务中，Netty 的使用场景。</li><li>说说对原生的 NIO 在 JDK 1.7 版本存在 epoll bug的看法？</li><li>什么是TCP 粘包/拆包？</li><li>TCP粘包/拆包的解决办法</li><li>Netty 线程模型</li><li>说说 Netty 的零拷贝</li><li>Netty 内部执行流程</li></ol><h2><b>二、微服务架构篇</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fa87e1af345462b9fb48b92e7f61f28b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-fa87e1af345462b9fb48b92e7f61f28b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-fa87e1af345462b9fb48b92e7f61f28b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fa87e1af345462b9fb48b92e7f61f28b_b.jpg\"/></figure><ol><li>前后端分离是如何做的</li><li>微服务哪些框架</li><li>怎么理解 RPC 框架</li><li>说说 RPC 的实现原理</li><li>说说 Dubbo 的实现原理</li><li>怎么理解 RESTful</li><li>说说如何设计一个良好的 API</li><li>如何理解 RESTful API 的幂等性</li><li>如何保证接口的幂等性</li><li>说说 CAP 定理、 BASE 理论</li><li>怎么考虑数据一致性问题</li><li>说说最终一致性的实现方案</li><li>怎么看待微服务</li><li>微服务与 SOA 的区别</li><li>如何拆分服务</li><li>微服务如何进行数据库管理</li><li>如何应对微服务的链式调用异常</li><li>对于快速追踪与定位问题</li><li>微服务的安全</li></ol><h2><b>三、分布式篇与并发编程</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-06ab4b7e646589e93c85c0a6eb47b1bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-06ab4b7e646589e93c85c0a6eb47b1bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;475&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-06ab4b7e646589e93c85c0a6eb47b1bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-06ab4b7e646589e93c85c0a6eb47b1bb_b.jpg\"/></figure><ol><li>谈谈业务中使用分布式的场景</li><li>Session 分布式方案</li><li>分布式锁的场景</li><li>分布是锁的实现方案</li><li>分布式事务</li><li>集群与负载均衡的算法与实现</li><li>说说分库与分表设计</li><li>分库与分表带来的分布式困境与应对之策</li></ol><h2><b>四、性能优化篇与安全问题</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b95051a3d8ada78bd8f1ee6b457c83d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-b95051a3d8ada78bd8f1ee6b457c83d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"399\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-b95051a3d8ada78bd8f1ee6b457c83d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b95051a3d8ada78bd8f1ee6b457c83d7_b.jpg\"/></figure><ol><li>性能指标有哪些</li><li>如何发现性能瓶颈</li><li>性能调优的常见手段</li><li>说说你在项目中如何进行性能调优</li><li>JVM如何执行子系统</li><li>Tomcat运行的机制</li><li>Tomcat针对并发优化及内存优化</li><li>垃圾回收的优点和原理。并考虑 2 种回收机制。</li><li>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</li><li>Java 中会存在内存泄漏吗，请简单描述。</li><li>深拷贝和浅拷贝。</li><li>JVM 的永久代中会发生垃圾回收么？</li><li>讲讲类加载器双亲委派模型机制？</li><li>安全要素与 STRIDE 威胁</li><li>防范常见的 Web 攻击</li><li>服务端通信安全攻防</li><li>HTTPS 原理剖析</li><li>HTTPS 降级攻击</li><li>授权与认证</li><li>基于角色的访问控制</li><li>基于数据的访问控制</li></ol><h2><b>五、数据库篇</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f6cbec2086377e65fd187cafd7a201c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic2.zhimg.com/v2-f6cbec2086377e65fd187cafd7a201c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic2.zhimg.com/v2-f6cbec2086377e65fd187cafd7a201c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f6cbec2086377e65fd187cafd7a201c9_b.jpg\"/></figure><ol><li>请简洁描述 MySQL 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</li><li>在 MySQL 中 ENUM 的用法是什么？</li><li>CHAR 和 VARCHAR 的区别？</li><li>列的字符串类型可以是什么？</li><li>MySQL 中使用什么存储引擎？</li><li>TIMESTAMP 在 UPDATE CURRENT_TIMESTAMP 数据类型上做什么？</li><li>主键和候选键有什么区别？</li><li>MySQL 数据库服务器性能分析的方法命令有哪些?</li><li>LIKE 和 REGEXP 操作有什么区别？</li><li>BLOB 和 TEXT 有什么区别？</li><li>数据库的三范式？</li><li>MySQL 表中允许有多少个 TRIGGERS？</li><li>什么是通用 SQL 函数？</li><li>MySQL 中有哪几种锁？</li><li>说说MySQL 数据优化的理解？</li><li>truncate delete drop 的区别。</li><li>Redis 是什么？</li><li>讲讲Redis 实现原理或机制？</li><li>说说Redis 的两种类型分区</li><li>MongoDB是什么？</li><li>MongoDB 特点是什么？</li><li>描述MongoDB 的功能？</li><li>说说MongoDB 的适用场景？</li><li>Redis、memcache、MongoDB 对比。</li></ol><h2><b>六、 面试心得</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2caa2ee0180cb69429120af4acbee705_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"605\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"605\" data-original=\"https://pic2.zhimg.com/v2-2caa2ee0180cb69429120af4acbee705_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;605&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"605\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"605\" data-original=\"https://pic2.zhimg.com/v2-2caa2ee0180cb69429120af4acbee705_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2caa2ee0180cb69429120af4acbee705_b.jpg\"/></figure><p><b>其实你应该能够预料到面试官要问的地方，请提前准备好，如果被问到没有准备到的地方，也不要紧张，一定要说出自己的想法，对不对都不是关键，主要是有自己的想法，另外，你应该对你的项目整体框架和你做的部分足够熟悉</b>。</p><p><b>你应该问的问题</b></p><p>面试里，最后面完之后一般面试官都会问你，你有没有什么要问他的。其实这个问题是有考究的，问好了其实是有加分的，一般不要问薪资，主要应该是：关于公司的、技术和自身成长的。</p><p><b>软实力</b></p><p>什么是软实力，就是你的人际交往、灵活应变能力，在面试过程中，良好的礼节、流畅的表达、积极的交流其实都是非常重要的。</p><p>很多公司可能不光看你的技术水平怎么样，而更看重的是你这个人怎么样的。所以在面试过程中，请保持诚信、积极、乐观、幽默，这样更容易得到公司青睐。</p><p>很多时候我们都会遇到一个情况，就是面试官的问题我不会，这时候大多数情况下不要马上说我不会，要懂得牵引，例如面试官问我C++的多态原理，我不懂，但我知道java的，哪我可以向面试官解释说我知道java的，类似的这种可以往相关的地方迁移（但是需要注意的是一定不要不懂装懂，被拆穿了是很尴尬的），意思就是你要尽可能的展示自己，表现出你的主动性，向面试官推销自己。</p><p>还有就是遇到智力题的时候，不要什么都不说，面试官其实不是在看你的答案，而是在看你的逻辑思维，你只要说出你自己的见解，有一定的思考过程就行。</p><h2><b>读者福利、完整面试题【含答案】Java核心笔记，Java架构面试专题整合千道（pdf文档）</b></h2><p>针对于上面的文章我总结出了互联网公司java程序员面试涉及到的绝大部分面试题及答案做成了文档和架构视频资料免费分享给大家（包括Dubbo、Redis、Netty、zookeeper、Spring cloud、分布式、高并发等架构技术资料），希望能帮助到您面试前的复习且找到一个好的工作，也节省大家在网上搜索资料的时间来学习。</p><blockquote><b>资料获取方式：点赞+关注后台私信【资料】获取免费资料！</b></blockquote><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-86fd23588b60991d8d907d601097489a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-86fd23588b60991d8d907d601097489a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-86fd23588b60991d8d907d601097489a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-86fd23588b60991d8d907d601097489a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-36e6c8fd6b9698c7d1d01e0169a545e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-36e6c8fd6b9698c7d1d01e0169a545e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;441&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"441\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-36e6c8fd6b9698c7d1d01e0169a545e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-36e6c8fd6b9698c7d1d01e0169a545e5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2e2fc67ec59cd3fac5bf6441c6d74ac9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-2e2fc67ec59cd3fac5bf6441c6d74ac9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;444&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"444\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-2e2fc67ec59cd3fac5bf6441c6d74ac9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2e2fc67ec59cd3fac5bf6441c6d74ac9_b.jpg\"/></figure><h2><b>部分视频资料截图</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9cd9ddb05b0f71c3507d83bcfe0eaf43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-9cd9ddb05b0f71c3507d83bcfe0eaf43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-9cd9ddb05b0f71c3507d83bcfe0eaf43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9cd9ddb05b0f71c3507d83bcfe0eaf43_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f881fd2114752d783facca4e44c2ac4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-f881fd2114752d783facca4e44c2ac4a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-f881fd2114752d783facca4e44c2ac4a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f881fd2114752d783facca4e44c2ac4a_b.jpg\"/></figure><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "BAT（百度、阿里巴巴、腾讯）", 
                    "tagLink": "https://api.zhihu.com/topics/19613318"
                }, 
                {
                    "tag": "面试问题", 
                    "tagLink": "https://api.zhihu.com/topics/19591867"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86192113", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 3, 
            "title": "阿里Java岗面试有多难？分享阿里面试真题（附解析）及P8知识体系", 
            "content": "<h2><b>前言</b></h2><p>好多人对阿里巴巴技术岗的体系结构及级别的技术要求设置不太清楚，想去面试也不知道面试什么级别的岗位，下面说说阿里的技术体系又是一哥怎么样的水平划分！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c4cd43e7b794aa69def34d2a04f4d7d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"277\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic2.zhimg.com/v2-c4cd43e7b794aa69def34d2a04f4d7d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;277&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"277\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic2.zhimg.com/v2-c4cd43e7b794aa69def34d2a04f4d7d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c4cd43e7b794aa69def34d2a04f4d7d9_b.jpg\"/></figure><h2><b>阿里P5(高级研发工程师)</b></h2><p><b>工作要求：</b></p><p>能独立完成日常工作，并能够对一些方案提出自己的建议。</p><p>基本考核就是能上手独立完成工作，熟练掌握。</p><p><b>技能要求(熟练)：</b></p><ol><li>程序设计和开发。</li><li>工作中需用到的Java开发的技术点以及相关的其他技术点。</li><li>工作中需用到的Web开发的技术点以及相关的其他技术点。</li><li>工作中需要用到的数据库技术点以及相关的其他技术点。</li><li>运维能力，应用发布和运维，线上故障分析和排查 。</li><li>1-5的技能能力：程序设计和开发、java web、数据库的技能要求熟练。</li></ol><h2><b>阿里P6(技术主管)</b></h2><p><b>工作要求：</b></p><p>能独立解决问题，制定系统的技术实现方案，考核会涉及部分技术深度。</p><p><b>技能要求：</b></p><p>除P5的技能外，还需掌握以下技能，以下技能至少需要做到熟悉。</p><ul><li>架构设计，运维能力，操作系统。</li></ul><h2><b>阿里P7(技术专家)</b></h2><p><b>工作要求：</b></p><p>能独立带领产品或业务向前发展，并在产品或业务的规划上具备一定的能力。</p><p><b>技能要求：</b></p><ol><li>在P6的基础上，需要在Java开发、Web开发上至少有一项能做到精通。</li><li>在架构设计上至少在某一架构领域达到精通。</li><li>架构相关的技能要求可以参考文章最后的阿里P8架构师技能。</li></ol><h2><b>阿里Java岗的面试题分享</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-983dd377a07f874b5e60ed80e9f0bfea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"823\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-983dd377a07f874b5e60ed80e9f0bfea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;823&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"823\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-983dd377a07f874b5e60ed80e9f0bfea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-983dd377a07f874b5e60ed80e9f0bfea_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5b813dcafbaa3577e0a3fe8c9b629b27_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"837\" class=\"origin_image zh-lightbox-thumb\" width=\"567\" data-original=\"https://pic4.zhimg.com/v2-5b813dcafbaa3577e0a3fe8c9b629b27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;567&#39; height=&#39;837&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"837\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"567\" data-original=\"https://pic4.zhimg.com/v2-5b813dcafbaa3577e0a3fe8c9b629b27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5b813dcafbaa3577e0a3fe8c9b629b27_b.jpg\"/></figure><p>针对于上面的面试题我总结出了互联网公司java程序员面试涉及到的绝大部分面试题及答案做成了文档和架构视频资料免费分享给大家（包括Dubbo、Redis、Netty、zookeeper、Spring cloud、分布式、高并发等架构技术资料），希望能帮助到您面试前的复习且找到一个好的工作，也节省大家在网上搜索资料的时间来学习。</p><p><b>资料领取方式：点赞+关注后后台私信【面试】即可免费领取资料！</b></p><p><b>内含福利小惊喜</b></p><a href=\"https://link.zhihu.com/?target=https%3A//shimo.im/docs/eS3OHM0QBDgqkkGd\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-32c5483eade1297834054eb7abfc3356_180x120.jpg\" data-image-width=\"1686\" data-image-height=\"407\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">免费获取Java学习笔记，面试，文档以及视频</a><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;684&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_b.jpg\"/></figure><h2><b>成为阿里P8架构师所要掌握的六大技能体系</b></h2><h2><b>开源框架源码解析</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-592ddf79e103e3f3479f1f953244d414_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"991\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-592ddf79e103e3f3479f1f953244d414_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;991&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"991\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-592ddf79e103e3f3479f1f953244d414_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-592ddf79e103e3f3479f1f953244d414_b.jpg\"/></figure><h2><b>高性能分布式架构</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b5a1cada6c6c2e9bec802d19a3f53716_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"1625\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-b5a1cada6c6c2e9bec802d19a3f53716_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;1625&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"1625\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-b5a1cada6c6c2e9bec802d19a3f53716_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b5a1cada6c6c2e9bec802d19a3f53716_b.jpg\"/></figure><h2><b>性能优化及操作系统</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-febe0a2fac53eafc44bb6cb4b29b35e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-febe0a2fac53eafc44bb6cb4b29b35e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;1024&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-febe0a2fac53eafc44bb6cb4b29b35e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-febe0a2fac53eafc44bb6cb4b29b35e4_b.jpg\"/></figure><h2><b>微服务架构</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-78929aceaac337b666e83b5dc716b043_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"890\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-78929aceaac337b666e83b5dc716b043_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;890&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"890\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-78929aceaac337b666e83b5dc716b043_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-78929aceaac337b666e83b5dc716b043_b.jpg\"/></figure><h2><b>团队开发工具</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9f7e56acbc592fef67b724ac4063a330_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-9f7e56acbc592fef67b724ac4063a330_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;449&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-9f7e56acbc592fef67b724ac4063a330_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9f7e56acbc592fef67b724ac4063a330_b.jpg\"/></figure><h2><b>设计模式</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2ca3b425a8523bcf1111dc50b60d1981_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-2ca3b425a8523bcf1111dc50b60d1981_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;727&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"727\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-2ca3b425a8523bcf1111dc50b60d1981_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2ca3b425a8523bcf1111dc50b60d1981_b.jpg\"/></figure><p><b>最后也欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a>", 
            "topic": [
                {
                    "tag": "阿里巴巴 HR", 
                    "tagLink": "https://api.zhihu.com/topics/19644340"
                }, 
                {
                    "tag": "阿里巴巴集团", 
                    "tagLink": "https://api.zhihu.com/topics/19551577"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86148848", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 3, 
            "title": "”金九银十“跳槽裁员季：Java程序员痛失工作，绝地逢生面进蚂蚁", 
            "content": "<p><b>开头小广告：欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d4a8213d68fac3ca22bcd261386d7385_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic2.zhimg.com/v2-d4a8213d68fac3ca22bcd261386d7385_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;710&#39; height=&#39;350&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"710\" data-original=\"https://pic2.zhimg.com/v2-d4a8213d68fac3ca22bcd261386d7385_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d4a8213d68fac3ca22bcd261386d7385_b.jpg\"/></figure><h2><b>一面：主要问的基础知识</b></h2><p><b>（考察对技术底层原理的掌握）</b></p><p>1、Java线程同步都有哪几种方式，Synchronized和ReentrantLock的区别</p><p>2、ReentrantLock底层是怎么实现的，怎么实现的超时获取锁。</p><p>3、cas的原理，变量要用哪个关键字修饰，volatile实现的原理，进而引申到了java虚拟机的内存模型。</p><p>4、介绍一下Java虚拟机内存模型，然后继续讨论volatile。</p><p>5、线程池种类，哪四种 workqueue分别是什么</p><p>6、反射讲一讲，主要是概念,都在哪需要反射机制，反射的性能，如何优化</p><p>7、什么时候触发minor GC 什么时候触发full GC</p><p>8、聊点数据库，一般选什么样的字段做主键，有什么选取原则吗，用种子自增来做主键，为什么每次种子要加1，加2加3可以吗。</p><p>9、sql优化有哪些思路</p><p>10、索引使用注意事项</p><p>11、InnoDB数据模型，B+树具体说说都保存了什么，叶子节点保存了什么</p><p>12、你有什么想问我的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2abe444189d71fe25411098b539686b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-2abe444189d71fe25411098b539686b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;439&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"439\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-2abe444189d71fe25411098b539686b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2abe444189d71fe25411098b539686b5_b.jpg\"/></figure><h2><b>二面：主要是围绕项目</b></h2><p><b>（考察技术应用实战能力）</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b7c254c9ed7ad21e18039a7213fef6b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"445\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-b7c254c9ed7ad21e18039a7213fef6b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;445&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"445\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-b7c254c9ed7ad21e18039a7213fef6b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b7c254c9ed7ad21e18039a7213fef6b6_b.jpg\"/></figure><p>1、介绍一下你的项目(主要是技术难点)，请画出项目架构设计图和部署图？</p><p>2、dubbo负载均衡算法有哪些，如果让你实现一致性hash的dubbo负载均衡算法，你会怎么实现？</p><p>3、zookeeper实现的分布式锁的原理，以及redis具体怎么实现分布式锁？</p><p>4、限流是怎么实现的，hystrix介绍一下。</p><p>5、dubbo有哪些模块，底层通信的原理。</p><p>6、对Spring的理解，项目中都用什么？怎么用的？对IOC、和AOP的理解及实现原理。</p><p>7、线上问题的解决思路，程序运行一段时间，突然内存溢出，重启后，过一段时间又内存溢出，怎么排查问题。</p><h2><b>三面：主要问解决问题的思路</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-81a05308e0e808bf9696f55af845d47e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-81a05308e0e808bf9696f55af845d47e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-81a05308e0e808bf9696f55af845d47e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-81a05308e0e808bf9696f55af845d47e_b.jpg\"/></figure><p>1、如果让你实现一个MQ，怎么样保证消息不丢失？</p><p>2、硬盘io速度会变慢，有什么解决办法吗？</p><p>3、mysql的innodb索引数据结构为什么是b+树，用hash来实现可以吗？</p><p>4、分布式事务的实现？</p><p>5、线程同步，并发操作怎么控制 ？</p><p>6、描述struts的工作流程。</p><p>5、如何解决redis和mysql数据一致性？</p><p>7、常见的MySQL主从同步方案有哪些？优劣势比较过？</p><p>8、先谈秒杀的设计思路？</p><p>9、再谈谈秒杀如何防止超卖?</p><p>10、你有什么想问我的？</p><h2><b>面试题目以及答案解析</b></h2><h3><b>一、反射讲一讲，主要是概念,都在哪需要反射机制，反射的性能，如何优化</b></h3><p>答：反射机制的定义：是在运行状态中，对于任意的一个类，都能够知道这个类的所有属性和方法，对任意一个对象都能够通过反射机制调用一个类的任意方法，这种动态获取类信息及动态调用类对象方法的功能称为java的反射机制。</p><p><b>反射的作用</b>：</p><p>1、动态地创建类的实例，将类绑定到现有的对象中，或从现有的对象中获取类型。</p><p>2、应用程序需要在运行时从某个特定的程序集中载入一个特定的类</p><h3><b>二、对Spring的理解，项目中都用什么？怎么用的？对IOC、和AOP的理解及实现原理</b></h3><p>答：Spring是一个开源框架，处于MVC模式中的控制层，它能应对需求快速的变化，其主要原因它有一种面向切面编程（AOP）的优势，其次它提升了系统性能，因为通过依赖倒置机制（IOC），系统中用到的对象不是在系统加载时就全部实例化，而是在调用到这个类时才会实例化该类的对象，从而提升了系统性能。这两个优秀的性能使得Spring受到许多J2EE公司的青睐，如阿里里中使用最多的也是Spring相关技术。</p><p><b>Spring的优点</b>：</p><p>1、降低了组件之间的耦合性，实现了软件各层之间的解耦。</p><p>2、可以使用容易提供的众多服务，如事务管理，消息服务，日志记录等。</p><p>3、容器提供了AOP技术，利用它很容易实现如权限拦截、运行期监控等功能。</p><p>Spring中AOP技术是设计模式中的动态代理模式。只需实现jdk提供的动态代理接口InvocationHandler，所有被代理对象的方法都由InvocationHandler接管实际的处理任务。面向切面编程中还要理解切入点、切面、通知、织入等概念。</p><p>Spring中IOC则利用了Java强大的反射机制来实现。所谓依赖注入即组件之间的依赖关系由容器在运行期决定。其中依赖注入的方法有两种，通过构造函数注入，通过set方法进行注入。</p><h3><b>三、线程同步，并发操作怎么控制</b></h3><p><b>答</b>：</p><p>Java中可在方法名前加关键字syschronized来处理当有多个线程同时访问共享资源时候的问题。syschronized相当于一把锁，当有申请者申请该</p><p>资源时，如果该资源没有被占用，那么将资源交付给这个申请者使用，在此期间，其他申请者只能申请而不能使用该资源，当该资源被使用完成后将释放该资源上的锁，其他申请者可申请使用。</p><p>并发控制主要是为了多线程操作时带来的资源读写问题。如果不加以空间可能会出现死锁，读脏数据、不可重复读、丢失更新等异常。</p><p>并发操作可以通过加锁的方式进行控制，锁又可分为乐观锁和悲观锁。</p><p><b>悲观锁</b>：</p><p>悲观锁并发模式假定系统中存在足够多的数据修改操作，以致于任何确定的读操作都可能会受到由个别的用户所制造的数据修改的影响。也就是说悲观锁假定冲突总会发生，通过独占正在被读取的数据来避免冲突。但是独占数据会导致其他进程无法修改该数据，进而产生阻塞，读数据和写数据会相互阻塞。</p><p><b>乐观锁</b>：</p><p>乐观锁假定系统的数据修改只会产生非常少的冲突，也就是说任何进程都不大可能修改别的进程正在访问的数据。乐观并发模式下，读数据和写数据之间不会发生冲突，只有写数据与写数据之间会发生冲突。即读数据不会产生阻塞，只有写数据才会产生阻塞。</p><h3><b>通篇涉及到的技术知识点比较多且范围比较广，建议可以先收藏</b>。</h3><blockquote>这些面试题出自我一位好友的面试经历的整理，由于篇幅原因，我这边没有把面试以及答案全部列举出来，<b>如果有需要原文件的可以关注我，后台私信【面试】获取完整的文件。</b><br/>其实，这次互联网的“寒冬”未尝不是一件好事，让大多数技术人员认识到了自身的不足，不要满足于目前的状态，我了解过很多程序员，有点技术能力就自持高大，遭遇到瓶颈时也只是认为自己已经得道升天了，哪里还想到一山更比一山高。<br/>直到裁员的时候，被公司遗弃的时候才发现所学甚少，再这段闲暇时间，更多的人还是选择了跳槽，四处寻找各厂的面试题，以求能够进厂之后深造。<br/>所谓授人以鱼不如授人以渔，这套面试题给大家带来的也只是大致的技术学习要点，并没有明确技术广度提升的学习方向。</blockquote><p>在相关面试的知识点后面，我给大家提供一套全面的架构方向的学习思维导图，不少公司很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已经是面试的必考题。</p><p>这些东西可能你们平时在工作中接触过，但是缺少全面系统的学习，希望对正在面试的朋友或是遭遇技术瓶颈的程序员们提供一点思路。</p><p><b>1、开源框架解析专题:</b> 站在巨人肩膀，收获不一样的视野。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f78f8bc435e729921a506b1ded9cb4ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f78f8bc435e729921a506b1ded9cb4ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;371&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f78f8bc435e729921a506b1ded9cb4ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f78f8bc435e729921a506b1ded9cb4ed_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2、架构筑基专题:</b> 深入内核、直击故障、拒绝懵圈。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c8f187f95263ed75166a392ffe5d9aa6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"418\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-c8f187f95263ed75166a392ffe5d9aa6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;418&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"418\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-c8f187f95263ed75166a392ffe5d9aa6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c8f187f95263ed75166a392ffe5d9aa6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3、微服务架构专题:</b>你还不知道微服务，怎么涨薪。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8daec03786a87556544b6458c8afb929_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-8daec03786a87556544b6458c8afb929_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"317\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-8daec03786a87556544b6458c8afb929_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8daec03786a87556544b6458c8afb929_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4、高性能架构专题:</b> 成为互联网架构师，你要的都在这里。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eac16b29a662926688485cbb414a02bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"744\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-eac16b29a662926688485cbb414a02bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;744&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"744\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-eac16b29a662926688485cbb414a02bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-eac16b29a662926688485cbb414a02bb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5、团队协作开发专题:</b> 让你团队开发效率提高十倍。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dbf8e99777fa8fbb5b2861d9e12c439e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-dbf8e99777fa8fbb5b2861d9e12c439e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-dbf8e99777fa8fbb5b2861d9e12c439e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dbf8e99777fa8fbb5b2861d9e12c439e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>6、B2C商城项目实战:</b> 撸起袖子干实事，项目经验那点事。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7a1e47f7e45c7a1cc60af869c2741687_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-7a1e47f7e45c7a1cc60af869c2741687_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;309&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"309\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-7a1e47f7e45c7a1cc60af869c2741687_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7a1e47f7e45c7a1cc60af869c2741687_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>7、设计模式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1d116afa34b95cebee417568ef659718_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"489\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-1d116afa34b95cebee417568ef659718_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;489&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"489\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-1d116afa34b95cebee417568ef659718_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1d116afa34b95cebee417568ef659718_b.jpg\"/></figure><p>以上资料是我结合自己和身边朋友的面试经历而整理的，希望对面试的朋友或者在找工作的程序员们有所帮助。<b>需要资料的话可以点赞+关注后后台私信我【面试】即可免费获取</b>！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-34646b352284b96ef528ad82cce742c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-34646b352284b96ef528ad82cce742c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;684&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-34646b352284b96ef528ad82cce742c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-34646b352284b96ef528ad82cce742c3_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "跳槽", 
                    "tagLink": "https://api.zhihu.com/topics/19551769"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86110558", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 0, 
            "title": "”金九银十“末期，你的跳槽成功了吗？分享腾讯Java岗五面面经", 
            "content": "<p><b>开头小广告：欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-909138a010f4eae0f30c69fe04d27752_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1045\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb\" width=\"1045\" data-original=\"https://pic3.zhimg.com/v2-909138a010f4eae0f30c69fe04d27752_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1045&#39; height=&#39;656&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1045\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1045\" data-original=\"https://pic3.zhimg.com/v2-909138a010f4eae0f30c69fe04d27752_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-909138a010f4eae0f30c69fe04d27752_b.jpg\"/></figure><h2><b>腾讯一面（电话）</b></h2><ol><li>说说对JVM的理解</li><li>treemap和hashmap有什么区别？</li><li>Java多线程的的5大状态图流转</li><li>mysql主键和唯一索引的区别</li><li>说说最近的项目</li><li>如何实现session共享，用redis如何实现</li><li>缓存击穿的概念和解决方案</li><li>说说微服务，微服务之间如何管理</li></ol><h3><b>腾讯二面（现场）</b></h3><ol><li>java nio常？用的三个类</li><li>java里面的同步锁了解吗？Countdownlauch和Cylicbarrior的区别，分别在什么应用场景下使用</li><li>JVM的内存结构？哪些是共享的，哪些是线程私有的？Java虚拟机栈里面存放的是什么？</li><li>如何自己实现一个线程池让别人使用？</li><li>哪些情况会触发Java的类加载？</li><li>手写代码：快速排序、单例模式，化一个工厂和装饰者模式的UML类图</li><li>AOP的实现原理？</li><li>如何优化一个慢查询</li><li>Java锁有哪几种？可重入锁和不可重入锁的区别？</li><li>Lock和synchronized的区别？它们都是可重入锁吗？哪个效率更高？</li><li>手写SpringMVC DispatcherServlet的大致实现</li></ol><h3><b>腾讯三面（现场）</b></h3><ol><li>平时的项目并发经验有哪些？</li><li>redis数据结构</li><li>redis线程模型</li><li>redis数据淘汰机制</li><li>读过redis源码吗？</li><li>mysql实现事务的原理(MVCC)</li><li>MQ底层实现原理</li><li>数据库事务acid，事务操作，怎么加锁，分布式系统锁</li><li>什么情况容易发生雪崩？如何来解决</li></ol><h3><b>腾讯四面 ：技术面</b></h3><ol><li>主要是并发想的项目介绍</li><li>技术含量较高的项目，从架构设计到部署问了一遍</li><li>高并发架构的设计思路</li></ol><h3><b>腾讯五面 ：HR面</b></h3><ol><li>主要问手里的offer？</li><li>聊人生和未来的规划？</li><li>以及相关的薪资？</li></ol><p>以上就是腾讯java研发5面题目，以下最新总结的<b>最全2019BATJ高级Java必考题范围和答案</b>，范围包含最全MySQL、Spring、Redis、JVM等最全面试题和答案，仅用于参考~、</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cf4594a67492a642cd02ce03235a11ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-cf4594a67492a642cd02ce03235a11ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;684&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-cf4594a67492a642cd02ce03235a11ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cf4594a67492a642cd02ce03235a11ca_b.jpg\"/></figure><p><b>答案获取方式</b>：关注+点赞后，私信关键词 【<b>面试</b>】即可获得详细答案链接！<br/><b>答案获取方式</b>：关注+点赞后，私信关键词 【<b>面试</b>】即可获得详细答案链接！！<br/><b>答案获取方式</b>：关注+点赞后，私信关键词 【<b>面试</b>】即可获得详细答案链接！！！</p>", 
            "topic": [
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "程序员面试", 
                    "tagLink": "https://api.zhihu.com/topics/19579066"
                }, 
                {
                    "tag": "后端技术", 
                    "tagLink": "https://api.zhihu.com/topics/19553595"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86001122", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 4, 
            "title": "”面霸“19年夏派卧底阿里、百度、美团等大厂带来面试题及答案！", 
            "content": "<p><b>开头小广告：欢迎关注我的专栏：</b>里面不定期分享Java架构技术知识点及解析，还会不断更新的BATJ面试专题，欢迎大家前来探讨交流，如有好的文章也欢迎投稿。</p><a href=\"https://zhuanlan.zhihu.com/c_1158379550839930880\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-f81f01c6d2abc1d3c40a1212527a041b_ipico.jpg\" data-image-width=\"350\" data-image-height=\"350\" class=\"internal\">以架构赢天下</a><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-54c3b33138fd004acf1ca0ebb8d3e3fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-54c3b33138fd004acf1ca0ebb8d3e3fd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-54c3b33138fd004acf1ca0ebb8d3e3fd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-54c3b33138fd004acf1ca0ebb8d3e3fd_b.jpg\"/></figure><p>面试，难还是不难？最终结果好还是不好？取决于面试者的底蕴（气场+技能）、心态和认知以及沟通技巧。而一些主流的大型互联网公司面试（阿里巴巴、京东、美团、滴滴）更是需要你在面试时展现出自己的能力，从而获得面试官的欣赏和肯定。</p><p><br/>而程序员在应聘时更是需要经历层层面试。俗话说，磨刀不误砍柴工，做好面试前的准备工作可以帮助大家更好的应对面试官的问题以及面试中的突发情况。那么我们一起来看看大型互联网公司的面试题吧！（<b>因篇幅问题，答案我这里就没有一一解答了，如有需要，可以关注我后台私信【面试】可免费获取！</b>）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b4dda40a18d38c272cf6e27a7b1fd5c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic4.zhimg.com/v2-b4dda40a18d38c272cf6e27a7b1fd5c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic4.zhimg.com/v2-b4dda40a18d38c272cf6e27a7b1fd5c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b4dda40a18d38c272cf6e27a7b1fd5c7_b.jpg\"/></figure><h2><b>阿里面试</b></h2><p>1、开发中Java用了比较多的数据结构有哪些？<br/>2、谈谈你对HashMap的理解，底层原理的基本实现，HashMap怎么解决碰撞问题的？<br/>3、这些数据结构中是线程安全的吗？假如你回答HashMap是线程安全的，接着问你有没有线程安全的map，接下来问了conurren包。<br/>4、对JVM熟不熟悉？简单说说类加载过程，里面执行的哪些操作?问了GC和内存管理，平时在tomcat里面有没有进行过相关的配置<br/>5、然后问了http协议，get和post的基本区别，接着tcp/ip协议，三次握手，窗口滑动机制。<br/>6、开发中用了那些数据库？回答mysql，储存引擎有哪些？然后问了我悲观锁和乐观锁问题使用场景、分布式集群实现的原理。<br/>7、然后问了springmvc和mybatis的工作原理，有没有看过底层源码？<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d794cdf80a8ef9f7cdcf256c06ca2775_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-d794cdf80a8ef9f7cdcf256c06ca2775_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;331&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-d794cdf80a8ef9f7cdcf256c06ca2775_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d794cdf80a8ef9f7cdcf256c06ca2775_b.jpg\"/></figure><h2><b>百度面试</b></h2><p>1、Dubbo超时重试；Dubbo超时时间设置<br/>2、如何保障请求执行顺序<br/>3、分布式事物与分布式锁（扣款不要出现负数）<br/>4、分布式session设置<br/>5、执行某操作，前50次成功，第51次失败a全部回滚b前50次提交第51次抛异常，ab场景分别如何设置Spring（传播性）<br/>6、Zookeeper有哪些用<br/>7、JVM内存模型<br/>8、数据库垂直和水平拆分<br/>9、MyBatis如何分页；如何设置缓存；MySQL分页<br/>10、熟悉IO么？与NIO的区别，阻塞与非阻塞的区别<br/>11、分布式session一致性<br/>12、分布式接口的幂等性设计「不能重复扣款」<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-64d4bf68518d092804d36e84917309da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-64d4bf68518d092804d36e84917309da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-64d4bf68518d092804d36e84917309da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-64d4bf68518d092804d36e84917309da_b.jpg\"/></figure><h2><b>美团面试</b></h2><p>1、最近做的比较熟悉的项目是哪个？画一下项目技术架构图<br/>2、JVM老年代和新生代的比例？<br/>3、YGC和FGC发生的具体场景<br/>4、jstack，jmap，jutil分别的意义？如何线上排查JVM的相关问题？<br/>5、线程池的构造类的方法的5个参数的具体意义？<br/>6、单机上一个线程池正在处理服务如果忽然断电该怎么办？（正在处理和阻塞队列里的请求怎么处理）？<br/>7、使用无界阻塞队列会出现什么问题？<br/>8、接口如何处理重复请求？<br/>9、具体处理方案是什么？<br/>10、如何保证共享变量修改时的原子性？<br/>11、设计一个对外服务的接口实现类，在1,2,3这三个主机（对应不同IP）上实现负载均衡和顺序轮询机制（考虑并发）<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d445f2483f3cd1c7ac3900bf3fc9a3cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"211\" class=\"content_image\" width=\"309\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;309&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"211\" class=\"content_image lazy\" width=\"309\" data-actualsrc=\"https://pic1.zhimg.com/v2-d445f2483f3cd1c7ac3900bf3fc9a3cc_b.jpg\"/></figure><h2><b>滴滴面试</b></h2><p>1、自我介绍，技术特点<br/>2、兴趣是什么，优势是什么<br/>3、jvm，jre以及jdk三者之间的关系？<br/>4、Dubbo的底层原理，Zookeeper是什么<br/>5、cincurrentMap的机制；TreeMap；Volatil关键字<br/>6、快速排序；广度优先搜索（队列实现）<br/>7、缓存的雪崩以及穿透的理解？<br/>8、HashMap的key可以重复吗？<br/>9、synchronized和lock的区别？<br/>10.开发一个大型网站你会考虑哪些问题?<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-540908c0e153f7e1e82518f0b5ae0e54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-540908c0e153f7e1e82518f0b5ae0e54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-540908c0e153f7e1e82518f0b5ae0e54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-540908c0e153f7e1e82518f0b5ae0e54_b.jpg\"/></figure><h2><b>本次卧底面试得到的结论</b></h2><p>我这里还特意整理了一下目前互联网大企面试出现频露较高的一些题，基本能覆盖到你的知识体系的一些问题。这里有Java的也有Android的。<br/></p><ol><li>Java IO流的层次结构?</li><li>请说出常用的异常类型?</li><li>SKU的全称是什么，SKU与SPU的区别及关系？</li><li>FileInputStream 在使用完以后，不关闭流，想二次使用可以怎么操作？</li><li>设计一个分步式登录系统？</li><li>Spring加载过程？</li><li>自己有没有写过类似Spring这样的AOP事务？</li><li>Java中 try..catch 关闭流的语法糖?</li><li>如何设计一个秒杀系统？要考虑什么？</li><li>有没有遇到进线上GC，出现的症状是什么样的，怎么解决的？</li><li>spring的加载过程？</li><li>atomic 与 volatile的区别？</li><li>Thread的 notify()给notifyAll()的区别?</li><li>notifiy()是唤醒的那一个线程?</li><li>Thread.sleep()唤醒以后是否需要重新竞争？</li><li>单例有多少种写法? 有什么区别? 你常用哪一种单例，为什么用这种？</li><li>问一个Thread.join()相关的问题?</li><li>商品相关模块系统怎么设计数据模型？</li><li>写一个JAVA死锁的列子?</li><li>如何解决死锁?</li><li>GC回收算法,及实现原理?</li><li>HashMap数据存储结构? key重复了怎么办? 是如何解决的?</li><li>Spring AOP的实现原理，底层用什么实现的？</li><li>缓存的使用，如果现在需要实现一个简单的缓存，供搜索框中的ajax异步请求调用，使用什么结构？</li><li>内存中的缓存不能一直存在，用什么算法定期将搜索权重较低的entry去掉？</li><li>TCP如何保证安全性</li><li>红黑树的问题，B+数</li><li>JDK1.8中对HashMap的增强，如果一个桶上的节点数量过多，链表+数组的结构就会转换为红黑树。</li><li>项目中使用的单机服务器，如果将它部署成分布式服务器？</li><li>算法和数据结构数组、链表、二叉树、队列、栈的各种操作（性能，场景）</li><li>二分查找和各种变种的二分查找</li><li>各类排序算法以及复杂度分析（快排、归并、堆）</li><li>操作系统：进程通信IPC（几种方式），与线程区别</li><li>OS的几种策略（页面置换，进程调度等，每个里面有几种算法）</li><li>互斥与死锁相关的</li><li>linux常用命令（问的时候都会给具体某一个场景）</li><li>并发和多线程（线程池、SYNC和Lock锁机制、线程通信、volatile、ThreadLocal、CyclicBarrier、Atom包、CountDownLatch、AQS、CAS原理等等）</li><li>JVM（内存模型、GC垃圾回收，包括分代，GC算法，收集器、类加载和双亲委派、JVM调优，内存泄漏和内存溢出）</li></ol><p>哎，基本就整了这么多，当然还有一些比较模糊的问题，不太好整理，暂时没有整理。<br/>看了这么多问题我心里不觉有一句话：<b>工作的时候，用得着这么多东西吗？同是猿类，程序员何必为难程序员呢</b>。。。。</p><p><br/><b>面试资料获取方式：</b><br/><b>点赞+关注后后台私信【面试】即可免费获取！（诚意满满）</b><br/></p><p>好了，废话不多说，以下是我帮大家收集到的面试讲解视频，各位收好：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;684&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a139a948a9d22bdfc0a2b215000a53ec_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cc2d9d0b12f800e29260639b79db8bbb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-cc2d9d0b12f800e29260639b79db8bbb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;292&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-cc2d9d0b12f800e29260639b79db8bbb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cc2d9d0b12f800e29260639b79db8bbb_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-48930bf1406cfae4d158334584febf43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-48930bf1406cfae4d158334584febf43_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;347&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-48930bf1406cfae4d158334584febf43_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-48930bf1406cfae4d158334584febf43_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-84e979d39a4137713aead97878500eee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-84e979d39a4137713aead97878500eee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1240&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1240\" data-original=\"https://pic3.zhimg.com/v2-84e979d39a4137713aead97878500eee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-84e979d39a4137713aead97878500eee_b.jpg\"/></figure><p><b>面试资料获取方式：点赞+关注后后台私信【面试】即可免费获取！（诚意满满）</b></p><h2><br/><b>部分资料截图</b></h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;775&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4846c2de852a218200b6a54f0efe9286_b.jpg\"/></figure><p><br/><br/><br/> </p>", 
            "topic": [
                {
                    "tag": "面试问题", 
                    "tagLink": "https://api.zhihu.com/topics/19591867"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }, 
                {
                    "tag": "阿里巴巴集团", 
                    "tagLink": "https://api.zhihu.com/topics/19551577"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85970623", 
            "userName": "愤怒的小情绪", 
            "userLink": "https://www.zhihu.com/people/bb89328f52233141917756015d301e55", 
            "upvote": 2, 
            "title": "一文解析Spring IOC面试中常问的那些核心题！", 
            "content": "<h3><b>广义的 IOC</b></h3><ul><li>IoC(Inversion of Control) 控制反转，即“不用打电话过来，我们会打给你”。</li></ul><p>两种实现： 依赖查找（DL）和依赖注入（DI）。</p><p>IOC 和 DI 、DL 的关系（这个 DL，Avalon 和 EJB 就是使用的这种方式实现的 IoC）：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-530992f378d6993074e04ae67b9fcaa3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic4.zhimg.com/v2-530992f378d6993074e04ae67b9fcaa3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic4.zhimg.com/v2-530992f378d6993074e04ae67b9fcaa3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-530992f378d6993074e04ae67b9fcaa3_b.jpg\"/></figure><ul><li>DL 已经被抛弃，因为他需要用户自己去是使用 API 进行查找资源和组装对象。即有侵入性。</li><li>DI 是 Spring 使用的方式，容器负责组件的装配。</li></ul><blockquote>注意：Java 使用 DI 方式实现 IoC 的不止 Spring，包括 Google 的 Guice，还有一个冷门的 PicoContainer（极度轻量，但只提供 IoC）。</blockquote><h3><b>Spring 的 IoC</b></h3><p>Spring 的 IoC 设计支持以下功能：</p><ol><li>依赖注入</li><li>依赖检查</li><li>自动装配</li><li>支持集合</li><li>指定初始化方法和销毁方法</li><li>支持回调某些方法（但是需要实现 Spring 接口，略有侵入）</li></ol><p>其中，最重要的就是依赖注入，从 XML 的配置上说， 即 ref 标签。对应 Spring RuntimeBeanReference 对象。</p><p><b>对于 IoC 来说，最重要的就是容器。容器管理着 Bean 的生命周期，控制着 Bean 的依赖注入</b>。</p><p>那么， Spring 如何设计容器的呢？</p><p>Spring 作者 Rod Johnson 设计了两个接口用以表示容器。</p><ol><li>BeanFactory</li><li>ApplicationContext</li></ol><p>BeanFactory 粗暴简单，可以理解为就是个 HashMap，Key 是 BeanName，Value 是 Bean 实例。通常只提供注册（put），获取（get）这两个功能。我们可以称之为 “低级容器”。</p><p>ApplicationContext 可以称之为 “高级容器”。因为他比 BeanFactory 多了更多的功能。他继承了多个接口。因此具备了更多的功能。</p><blockquote>例如资源的获取，支持多种消息（例如 JSP tag 的支持），对 BeanFactory 多了工具级别的支持等待。所以你看他的名字，已经不是 BeanFactory 之类的工厂了，而是 “应用上下文”， 代表着整个大容器的所有功能。</blockquote><p>该接口定义了一个 refresh 方法，此方法是所有阅读 Spring 源码的人的最熟悉的方法，用于刷新整个容器，即重新加载/刷新所有的 bean。</p><p>当然，除了这两个大接口，还有其他的辅助接口，但我今天不会花太多篇幅介绍他们。</p><p>为了更直观的展示 “低级容器” 和 “高级容器” 的关系，我这里通过常用的 ClassPathXmlApplicationContext 类，来展示整个容器的层级 UML 关系。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8854597c511171b00689df4b1ad25612_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-8854597c511171b00689df4b1ad25612_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-8854597c511171b00689df4b1ad25612_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8854597c511171b00689df4b1ad25612_b.jpg\"/></figure><p>有点复杂？ 先不要慌，我来解释一下。</p><p>最上面的 BeanFactory 知道吧？我就不讲了。</p><p>下面的 3 个绿色的，都是功能扩展接口，这里就不展开讲。</p><p>看下面的隶属 ApplicationContext 粉红色的 “高级容器”，依赖着 “低级容器”，这里说的是依赖，不是继承哦。他依赖着 “低级容器” 的 getBean 功能。而高级容器有更多的功能：支持不同的信息源头，可以访问文件资源，支持应用事件（Observer 模式）。</p><p>通常用户看到的就是 “高级容器”。 但 BeanFactory 也非常够用啦！</p><p>左边灰色区域的是 “低级容器”， 只负责加载 Bean，获取 Bean。容器其他的高级功能是没有的。例如上图画的 refresh 刷新 Bean 工厂所有配置。生命周期事件回调等。</p><blockquote>好，解释了低级容器和高级容器，我们可以看看一个 IoC 启动过程是什么样子的。说白了，就是 ClassPathXmlApplicationContext 这个类，在启动时，都做了啥。（由于我这是 interface21 的代码，肯定和你的 Spring 4.x 系列不同）。</blockquote><p>下图是 ClassPathXmlApplicationContext 的构造过程，实际就是 Spring IoC 的初始化过程。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1d56a5d83e032c9a4f5ff86a9ae9d908_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"618\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-1d56a5d83e032c9a4f5ff86a9ae9d908_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;618&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"618\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-1d56a5d83e032c9a4f5ff86a9ae9d908_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1d56a5d83e032c9a4f5ff86a9ae9d908_b.jpg\"/></figure><p>注意，这里为了理解方便，有所简化。</p><p>这里再用文字来描述这个过程：</p><ol><li>用户构造 ClassPathXmlApplicationContext（简称 CPAC）</li><li>CPAC 首先访问了 “抽象高级容器” 的 final 的 refresh 方法，这个方法是模板方法。所以要回调子类（低级容器）的 refreshBeanFactory 方法，这个方法的作用是使用低级容器加载所有 BeanDefinition 和 Properties 到容器中。</li><li>低级容器加载成功后，高级容器开始处理一些回调，例如 Bean 后置处理器。回调 setBeanFactory 方法。或者注册监听器等，发布事件，实例化单例 Bean 等等功能，这些功能，随着 Spring 的不断升级，功能越来越多，很多人在这里迷失了方向 ：）。</li></ol><p><b>简单说就是</b>：</p><ol><li>低级容器 加载配置文件（从 XML，数据库，Applet），并解析成 BeanDefinition 到低级容器中。</li><li>加载成功后，高级容器启动高级功能，例如接口回调，监听器，自动实例化单例，发布事件等等功能。</li></ol><p>所以，一定要把 “低级容器” 和“高级容器” 的区别弄清楚。不能一叶障目不见泰山。</p><p>好，当我们创建好容器，就会使用 getBean 方法，获取 Bean，而 getBean 的流程如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-88c856b7307dbe10b0c728b3b6ce33ac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-88c856b7307dbe10b0c728b3b6ce33ac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;495&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-88c856b7307dbe10b0c728b3b6ce33ac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-88c856b7307dbe10b0c728b3b6ce33ac_b.jpg\"/></figure><p>从图中可以看出，getBean 的操作都是在低级容器里操作的。其中有个递归操作，这个是什么意思呢？</p><blockquote>假设：当 Bean_A 依赖着 Bean_B，而这个 Bean_A 在加载的时候，其配置的 ref = “Bean_B” 在解析的时候只是一个占位符，被放入了 Bean_A 的属性集合中，当调用 getBean 时，需要真正 Bean_B 注入到 Bean_A 内部时，就需要从容器中获取这个 Bean_B，因此产生了递归。</blockquote><p>为什么不是在加载的时候，就直接注入呢？因为加载的顺序不同，很可能 Bean_A 依赖的 Bean_B 还没有加载好，也就无法从容器中获取，你不能要求用户把 Bean 的加载顺序排列好，这是不人道的。</p><p>所以，Spring 将其分为了 2 个步骤：</p><ol><li>加载所有的 Bean 配置成 BeanDefinition 到容器中，如果 Bean 有依赖关系，则使用占位符暂时代替。</li><li>然后，在调用 getBean 的时候，进行真正的依赖注入，即如果碰到了属性是 ref 的（占位符），那么就从容器里获取这个 Bean，然后注入到实例中 —— 称之为依赖注入。<br/>可以看到，依赖注入实际上，只需要 “低级容器” 就可以实现。</li></ol><h3><b>这就是 IoC</b>。</h3><p>所以 ApplicationContext refresh 方法里面的操作不只是 IoC，是高级容器的所有功能（包括 IoC），IoC 的功能在低级容器里就可以实现。</p><h3><b>总结</b></h3><p>说了这么多，不知道你有没有理解Spring IoC？ 这里小结一下：IoC 在 Spring 里，只需要低级容器就可以实现，2 个步骤：</p><ol><li>加载配置文件，解析成 BeanDefinition 放在 Map 里。</li><li>调用 getBean 的时候，从 BeanDefinition 所属的 Map 里，拿出 Class 对象进行实例化，同时，如果有依赖关系，将递归调用 getBean 方法 —— 完成依赖注入。</li></ol><p>上面就是 Spring 低级容器（BeanFactory）的 IoC。</p><p>至于高级容器 ApplicationContext，他包含了低级容器的功能，当他执行 refresh 模板方法的时候，将刷新整个容器的 Bean。同时其作为高级容器，包含了太多的功能。一句话，他不仅仅是 IoC。他支持不同信息源头，支持 BeanFactory 工具类，支持层级容器，支持访问文件资源，支持事件发布通知，支持接口回调等等。</p><p>可以预见，随着 Spring 的不断发展，高级容器的功能会越来越多。</p><blockquote>诚然，了解 IoC 的过程，实际上为了了解 Spring 初始化时，各个接口的回调时机。例如 InitializingBean，BeanFactoryAware，ApplicationListener 等等接口，这些接口的作用，笔者之前写过一篇文章进行介绍，有兴趣可以看一下，关键字：Spring 必知必会 扩展接口。</blockquote><p>但是请注意，实现 Spring 接口代表着你这个应用就绑定死 Spring 了！代表 Spring 具有侵入性！要知道，Spring 发布时，无侵入性就是他最大的宣传点之一 —— 即 IoC 容器可以随便更换，代码无需变动。而现如今，Spring 已然成为 J2EE 社区准官方解决方案，也没有了所谓的侵入性这个说法。因为他就是标准，和 Servlet 一样，你能不实现 Servlet 的接口吗？: -)</p>", 
            "topic": [
                {
                    "tag": "Spring", 
                    "tagLink": "https://api.zhihu.com/topics/19599516"
                }, 
                {
                    "tag": "Java 程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19629329"
                }, 
                {
                    "tag": "面试", 
                    "tagLink": "https://api.zhihu.com/topics/19552079"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1158379550839930880"
}
