{
    "title": "STM32学习分享", 
    "description": "本专栏旨在介绍STM32在应用中的设计技巧、推广成熟应用方案，帮助工程师解决设计盲点、规避设计陷阱。", 
    "followers": [
        "https://www.zhihu.com/people/mengxj-32", 
        "https://www.zhihu.com/people/ren-sheng-ruo-zhi-ru-chu-jian-56-5-11", 
        "https://www.zhihu.com/people/feng-qi-yun-ding", 
        "https://www.zhihu.com/people/zhao-yu-ming-45-40", 
        "https://www.zhihu.com/people/xu-ze-yang-35", 
        "https://www.zhihu.com/people/3425878110", 
        "https://www.zhihu.com/people/zhong-zhong-28-28-31", 
        "https://www.zhihu.com/people/zdh-70-29", 
        "https://www.zhihu.com/people/mu-ne-dao", 
        "https://www.zhihu.com/people/lol-47-18", 
        "https://www.zhihu.com/people/yang-fang-3-69", 
        "https://www.zhihu.com/people/xiao-you-64-54", 
        "https://www.zhihu.com/people/yang-tao-hua", 
        "https://www.zhihu.com/people/li-zhi-long-92-10", 
        "https://www.zhihu.com/people/zhang-yao-shi-61", 
        "https://www.zhihu.com/people/tian-ya-yike-13", 
        "https://www.zhihu.com/people/bu-yu-53", 
        "https://www.zhihu.com/people/mrzhang-72", 
        "https://www.zhihu.com/people/scpshou-xi-ji-zhu-guan", 
        "https://www.zhihu.com/people/catopoon", 
        "https://www.zhihu.com/people/zi-fei-yu-76-10", 
        "https://www.zhihu.com/people/whiteka-mic", 
        "https://www.zhihu.com/people/minhal", 
        "https://www.zhihu.com/people/yujian-84", 
        "https://www.zhihu.com/people/zhuo-yue-26-12", 
        "https://www.zhihu.com/people/sui-xin-72-91", 
        "https://www.zhihu.com/people/tj1302-33", 
        "https://www.zhihu.com/people/zi-se-ling-hun-81", 
        "https://www.zhihu.com/people/huang-hou-sen-18", 
        "https://www.zhihu.com/people/fengzhizi391412", 
        "https://www.zhihu.com/people/jiu-dong-hui-84", 
        "https://www.zhihu.com/people/xie-ruo-fei-163", 
        "https://www.zhihu.com/people/mgjack-84", 
        "https://www.zhihu.com/people/qing-gun-tian", 
        "https://www.zhihu.com/people/flash-egg-8866", 
        "https://www.zhihu.com/people/qing-qing-de-qing-qing-84", 
        "https://www.zhihu.com/people/hao-nan-96-81", 
        "https://www.zhihu.com/people/qiu-xie-73-79", 
        "https://www.zhihu.com/people/qqsun-84", 
        "https://www.zhihu.com/people/yu-da-33-44", 
        "https://www.zhihu.com/people/zou-zhi-ma", 
        "https://www.zhihu.com/people/mai-dou-24-51", 
        "https://www.zhihu.com/people/tai-xiao-qing-93", 
        "https://www.zhihu.com/people/ha-ha-ha-10-49-28", 
        "https://www.zhihu.com/people/leetyle", 
        "https://www.zhihu.com/people/dengwenwu", 
        "https://www.zhihu.com/people/xu-yin-da-58", 
        "https://www.zhihu.com/people/da-si-na-ge-fang-xiang-cai-de", 
        "https://www.zhihu.com/people/wang-ying-ru-8", 
        "https://www.zhihu.com/people/david-quan-30", 
        "https://www.zhihu.com/people/jiang-ji-jiu-ji-ji-jin-jing-ji", 
        "https://www.zhihu.com/people/felix-25-33", 
        "https://www.zhihu.com/people/cui-yi-long", 
        "https://www.zhihu.com/people/pessimist-42", 
        "https://www.zhihu.com/people/liang-kun-can-15", 
        "https://www.zhihu.com/people/DreSanders", 
        "https://www.zhihu.com/people/chenzhy-29", 
        "https://www.zhihu.com/people/minicoil", 
        "https://www.zhihu.com/people/wang-mo-mo-54-42", 
        "https://www.zhihu.com/people/si-bu-si-sha-99", 
        "https://www.zhihu.com/people/lfdcn", 
        "https://www.zhihu.com/people/li-fa-yu-69", 
        "https://www.zhihu.com/people/wei-li-tong-9", 
        "https://www.zhihu.com/people/asns", 
        "https://www.zhihu.com/people/zhang-yun-he-74-79", 
        "https://www.zhihu.com/people/yin-wei-lei-suo-yi-cheng-chang", 
        "https://www.zhihu.com/people/ao-qi-xiong-ying-13", 
        "https://www.zhihu.com/people/xiao-jie-32", 
        "https://www.zhihu.com/people/jiang-xue-feng-28-14", 
        "https://www.zhihu.com/people/gong-chang-zhi-qin", 
        "https://www.zhihu.com/people/gu-zhi-xin-12", 
        "https://www.zhihu.com/people/ekko-30-33", 
        "https://www.zhihu.com/people/wmf-82", 
        "https://www.zhihu.com/people/fuqiang-21", 
        "https://www.zhihu.com/people/fang-liang-94", 
        "https://www.zhihu.com/people/ypee-le", 
        "https://www.zhihu.com/people/ni-huo-25-1", 
        "https://www.zhihu.com/people/liu-peng-6-57-24", 
        "https://www.zhihu.com/people/wen-xiang-80-1", 
        "https://www.zhihu.com/people/zhao-yang-11-79-9", 
        "https://www.zhihu.com/people/ke-ke-20-85", 
        "https://www.zhihu.com/people/ji-bei-zhi-xing", 
        "https://www.zhihu.com/people/lan-feng-61-10", 
        "https://www.zhihu.com/people/gao-gao-82-92-98", 
        "https://www.zhihu.com/people/er-er-23-10", 
        "https://www.zhihu.com/people/lu-lv-qun", 
        "https://www.zhihu.com/people/ertfyang", 
        "https://www.zhihu.com/people/cxh-24-47", 
        "https://www.zhihu.com/people/kkkkkkkk-22-26", 
        "https://www.zhihu.com/people/dong-dong-bu-cun-zai", 
        "https://www.zhihu.com/people/zhu-niceday", 
        "https://www.zhihu.com/people/wang-xin-90-39", 
        "https://www.zhihu.com/people/seaward233", 
        "https://www.zhihu.com/people/bluemonkey", 
        "https://www.zhihu.com/people/yao-qing-12", 
        "https://www.zhihu.com/people/xie-wei-qing-37-88", 
        "https://www.zhihu.com/people/947575128", 
        "https://www.zhihu.com/people/xiao-biao-di-39", 
        "https://www.zhihu.com/people/li-xin-ying-82", 
        "https://www.zhihu.com/people/ri-chu-dong-fang-wei-wo-bu-bai-39", 
        "https://www.zhihu.com/people/cjy-64-1", 
        "https://www.zhihu.com/people/linkerlin", 
        "https://www.zhihu.com/people/dylan-58-1", 
        "https://www.zhihu.com/people/james-jia-10", 
        "https://www.zhihu.com/people/li-senhui", 
        "https://www.zhihu.com/people/fan-gun-ba-tu-dou-55", 
        "https://www.zhihu.com/people/song-wei-wei-39", 
        "https://www.zhihu.com/people/maxdan-8", 
        "https://www.zhihu.com/people/sword-six", 
        "https://www.zhihu.com/people/dan-pian-ji-de-wei-lai", 
        "https://www.zhihu.com/people/si-shui-ku-11", 
        "https://www.zhihu.com/people/guan-yong-kang-12", 
        "https://www.zhihu.com/people/vincent-91-17-57", 
        "https://www.zhihu.com/people/mo-ni-50-3", 
        "https://www.zhihu.com/people/lin-xian-sheng-38-62-41", 
        "https://www.zhihu.com/people/sama520025", 
        "https://www.zhihu.com/people/jun-lin-42-79", 
        "https://www.zhihu.com/people/bei-dan-pian-ji-zheng-fu-liao", 
        "https://www.zhihu.com/people/waderen-63", 
        "https://www.zhihu.com/people/wyr-58-19", 
        "https://www.zhihu.com/people/yetizz", 
        "https://www.zhihu.com/people/chesily", 
        "https://www.zhihu.com/people/qing-feng-lang-yue-57-56", 
        "https://www.zhihu.com/people/zhao-ling-79-37", 
        "https://www.zhihu.com/people/yang-zhen-min-52", 
        "https://www.zhihu.com/people/chen-zhen-4-74", 
        "https://www.zhihu.com/people/jacob-57-34", 
        "https://www.zhihu.com/people/lian-zhi-wen", 
        "https://www.zhihu.com/people/fu-su-iv", 
        "https://www.zhihu.com/people/fcx322", 
        "https://www.zhihu.com/people/bai-gong-shu-sheng-4", 
        "https://www.zhihu.com/people/iamecong", 
        "https://www.zhihu.com/people/yang-jun-zhe-14", 
        "https://www.zhihu.com/people/zha-bu-shi-zhen-ming", 
        "https://www.zhihu.com/people/manorsuperman", 
        "https://www.zhihu.com/people/du-zi-xing-zou-de-zi-ji", 
        "https://www.zhihu.com/people/zhu-tian-87", 
        "https://www.zhihu.com/people/hehehe-ly", 
        "https://www.zhihu.com/people/lu-guan-43", 
        "https://www.zhihu.com/people/da-gang-20-51", 
        "https://www.zhihu.com/people/feiguohai517", 
        "https://www.zhihu.com/people/xiao-pi-hai-zi-79", 
        "https://www.zhihu.com/people/hiahia-41-68", 
        "https://www.zhihu.com/people/huang-li-7-66", 
        "https://www.zhihu.com/people/piao-liu-ping-99-11", 
        "https://www.zhihu.com/people/nj893", 
        "https://www.zhihu.com/people/kowalski-99", 
        "https://www.zhihu.com/people/wang-zi-yu-89-13", 
        "https://www.zhihu.com/people/nd770v", 
        "https://www.zhihu.com/people/jia-qi-74-8", 
        "https://www.zhihu.com/people/bear-big-79", 
        "https://www.zhihu.com/people/mo-tian-25-92", 
        "https://www.zhihu.com/people/cwqloon", 
        "https://www.zhihu.com/people/wen-chu-97-63", 
        "https://www.zhihu.com/people/rvo510", 
        "https://www.zhihu.com/people/wang-li-yun-93", 
        "https://www.zhihu.com/people/hu-xiao-dao-51", 
        "https://www.zhihu.com/people/deng-feng-ye-deng-ni-43-2", 
        "https://www.zhihu.com/people/hu-han-tong-nian", 
        "https://www.zhihu.com/people/zhanghf-2", 
        "https://www.zhihu.com/people/leo-24-98-44", 
        "https://www.zhihu.com/people/jeremy-yan-85", 
        "https://www.zhihu.com/people/lztcl-12", 
        "https://www.zhihu.com/people/liu-zhi-hu-25-51", 
        "https://www.zhihu.com/people/jing-xin-68-66", 
        "https://www.zhihu.com/people/wang-lei-53-41", 
        "https://www.zhihu.com/people/bai-hao-ran-61-8", 
        "https://www.zhihu.com/people/lili-93-29-81", 
        "https://www.zhihu.com/people/li-an-67-79", 
        "https://www.zhihu.com/people/yaya6", 
        "https://www.zhihu.com/people/yyss-xx", 
        "https://www.zhihu.com/people/xu-hong-rui-65", 
        "https://www.zhihu.com/people/sun-sun-5-67", 
        "https://www.zhihu.com/people/lws-12", 
        "https://www.zhihu.com/people/sui-ye-yin-qiu-xi-yu", 
        "https://www.zhihu.com/people/liyif1988", 
        "https://www.zhihu.com/people/guizi-60", 
        "https://www.zhihu.com/people/ji-chou-xian-sheng", 
        "https://www.zhihu.com/people/jacky-3-55", 
        "https://www.zhihu.com/people/treehm", 
        "https://www.zhihu.com/people/lei-lei-75-53-33", 
        "https://www.zhihu.com/people/li-wen-yu-40-74", 
        "https://www.zhihu.com/people/yuan-yi-97-31", 
        "https://www.zhihu.com/people/hao-shao-jie-29", 
        "https://www.zhihu.com/people/peter-99-53", 
        "https://www.zhihu.com/people/li-sheng-56-72-69", 
        "https://www.zhihu.com/people/lu-bo-86-31", 
        "https://www.zhihu.com/people/hu-xiao-wei-70", 
        "https://www.zhihu.com/people/wang-cai-61-19", 
        "https://www.zhihu.com/people/chang-feng-76-62", 
        "https://www.zhihu.com/people/henry-45-51", 
        "https://www.zhihu.com/people/7023-40", 
        "https://www.zhihu.com/people/zhan-mu-si-91", 
        "https://www.zhihu.com/people/zhang-fei-fei-14-53", 
        "https://www.zhihu.com/people/zhang-tong-80-23", 
        "https://www.zhihu.com/people/zhang-yibo-1", 
        "https://www.zhihu.com/people/xiao-xiao-sha-lou-58", 
        "https://www.zhihu.com/people/jason-66-19-17", 
        "https://www.zhihu.com/people/hellomonkey-69", 
        "https://www.zhihu.com/people/zhou-liu-9-12", 
        "https://www.zhihu.com/people/chen-dong-jie-89-78", 
        "https://www.zhihu.com/people/lijian2019", 
        "https://www.zhihu.com/people/lin-lin-52-78-57", 
        "https://www.zhihu.com/people/dyxf", 
        "https://www.zhihu.com/people/hao-yu-80", 
        "https://www.zhihu.com/people/bu-rui", 
        "https://www.zhihu.com/people/meng-lei-73-97", 
        "https://www.zhihu.com/people/haijie-13", 
        "https://www.zhihu.com/people/liu-ban-pian", 
        "https://www.zhihu.com/people/zheng-chao-49-25", 
        "https://www.zhihu.com/people/zheng-feng-80-24", 
        "https://www.zhihu.com/people/sztinker", 
        "https://www.zhihu.com/people/qi-qiang-90", 
        "https://www.zhihu.com/people/007-66-89", 
        "https://www.zhihu.com/people/chen-yun-qiang-21", 
        "https://www.zhihu.com/people/tang-mu-yi-ke-si", 
        "https://www.zhihu.com/people/na-jiu-jiao-zhe-ge-ming-zi-ba-75", 
        "https://www.zhihu.com/people/wang-xin-yi-77-14", 
        "https://www.zhihu.com/people/michael-70-24", 
        "https://www.zhihu.com/people/sanmuslei", 
        "https://www.zhihu.com/people/yun-yang-84-24", 
        "https://www.zhihu.com/people/feng-yiyang-de-nan-ren-67", 
        "https://www.zhihu.com/people/ym1010-95", 
        "https://www.zhihu.com/people/ma-zou-ri-96", 
        "https://www.zhihu.com/people/li-wen-qi-14-93", 
        "https://www.zhihu.com/people/zhangsan-97-39", 
        "https://www.zhihu.com/people/da-pang-miao-3-70", 
        "https://www.zhihu.com/people/zhao-yue-feng-64", 
        "https://www.zhihu.com/people/xi-yue-27-32-57", 
        "https://www.zhihu.com/people/fu-lang-zi-wu-fu", 
        "https://www.zhihu.com/people/bulewoody", 
        "https://www.zhihu.com/people/young-dennis", 
        "https://www.zhihu.com/people/liuxin-8035", 
        "https://www.zhihu.com/people/dq-hsue", 
        "https://www.zhihu.com/people/xiao-wen-55-60", 
        "https://www.zhihu.com/people/yooyooy", 
        "https://www.zhihu.com/people/jian-zhi-jiu-zhou", 
        "https://www.zhihu.com/people/kuang-re-fen-zi-45", 
        "https://www.zhihu.com/people/libin-sui", 
        "https://www.zhihu.com/people/li-ming-93-31-1", 
        "https://www.zhihu.com/people/yao-yi-zheng-84", 
        "https://www.zhihu.com/people/wang-shi-wei-67-38", 
        "https://www.zhihu.com/people/fang-ze-ming-78", 
        "https://www.zhihu.com/people/qawwali-han", 
        "https://www.zhihu.com/people/zheng-dian-yuan-zi", 
        "https://www.zhihu.com/people/matthewzhenggong", 
        "https://www.zhihu.com/people/jian-zhi-jiu-tian-22", 
        "https://www.zhihu.com/people/chi-wei-huo", 
        "https://www.zhihu.com/people/wang-wen-long-63-72", 
        "https://www.zhihu.com/people/zhu-ha-38", 
        "https://www.zhihu.com/people/chen-xiang-60-24", 
        "https://www.zhihu.com/people/simonwang-87", 
        "https://www.zhihu.com/people/zhou-xian-sheng-9-59", 
        "https://www.zhihu.com/people/zhuo-ji-23-72", 
        "https://www.zhihu.com/people/pei-pei-qi-4", 
        "https://www.zhihu.com/people/jian-chi-xiang-yuan-fang", 
        "https://www.zhihu.com/people/margin-47", 
        "https://www.zhihu.com/people/king-10-42-52"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/89451638", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "【话说定时器系列】之九：定时器单通道测量脉宽和占空比", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本文为【STM32定时器】系列第九篇分享文章，重点介绍通过定时器单个通道测量信号脉宽及占空比。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验内容</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>一般来讲，通过STM32单片机对外来脉冲信号测量其脉冲宽度及占空比的方法较多，即使使用STM32定时器的捕获功能，我们可以使用一个通道、也可以使用两个通道；可以使用定时器基本的输入捕获功能实现、也可以利用PWM输入模式结合定时器的<b>从模式</b>来完成。这里使用支持输入捕获功能的定时器的<b>单个通道</b>，来实现对1路外来信号脉冲宽度及占空比的测量，并在测量过程中统计和计算用于测量的<b>定时器自身的溢出事件</b>。</p><p>这里用到的开发板：<b>STM32F411 Nucleo </b>板 【实验对开发板并无特别要求】，集成开发环境不限。这里用的是ARM MDK IDE。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验目的</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、熟悉定时器时基单元的基本寄存器及相关数据的拟定。</p><p>2、了解通过STM32定时器实现PWM波形输出的配置与使用。   </p><p>    【因为这里要使用一个定时器的pwm输出产生一个待测量脉冲信号】</p><p>3、熟悉定时器输入捕捉的基本应用与实现，并熟悉相关事件或中断。</p><p>4、为后面的PWM输入模式测量脉宽及占空比实例做铺垫。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验思路及步骤</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.1 测量的思路</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里使用32F411Nucleo板的板载芯片内的<b>TIM3的通道1</b>产生一个周期为<b>5s</b>，占空比为<b>40%</b>的PWM输出信号，然后用连线将该信号连接到TIM4的定时<b>器输入通道2</b>，通过<b>它</b>对来自于TIM3的PWM输出信号进行脉宽及占空比的测量。 </p><p>测量过程中，TIM4的通道2对外来信号的捕捉过程是这样的，TIM4的通道2对一个外来信号完整的测试过程实现 3次捕捉。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-29813f5f37bb262413d615058dc83191_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"156\" class=\"content_image\" width=\"401\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;401&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"156\" class=\"content_image lazy\" width=\"401\" data-actualsrc=\"https://pic2.zhimg.com/v2-29813f5f37bb262413d615058dc83191_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在初始状态【没进入测量的状态】下基于上升沿发起第一次捕捉，记录下第1次的捕捉值<b>【Capture_1st】</b>，并开启TIM4定时器溢出事件的统计，同时将捕获极性切换为下沿捕捉。之后进入状态1，等待后续的下沿捕获。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当发生下沿捕获时，记录下第2次的捕捉值<b>【Capture_2nd】</b>，并将前面这段时间的定时器溢出次数也记录下来<b>【Front_Num_OvEvent】，</b>再次将极性切换为上沿捕捉，进入状态2，等待第3次捕获。在状态2的情况下，当发生上沿捕获时，记录下第3次的捕捉值<b>【Capture_3rd】</b>，并将整个测试周期内发生的定时器溢出次数记录下来<b>【Total_NuOvEvent】</b>，然后进入状态3进行占空比【Signal_Duty】和脉宽【Signal_Cycle】的计算。完毕后回到初始状态，准备下次的测量。另外，在TIM4的更新中断里对非初始状态的溢出事件累加统计，放在变量<b>【Num_OvEvent】</b>里。实验代码里用到一个变量<b>Measure_State</b>来记录和表示当前测试状态。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3aa6e2dae822b067d325a5c3c9e04d67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-3aa6e2dae822b067d325a5c3c9e04d67_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;297&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-3aa6e2dae822b067d325a5c3c9e04d67_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3aa6e2dae822b067d325a5c3c9e04d67_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.2  测量用到的算式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据上面的介绍，那1次完整的测量下来，测得的周期和占空比可以用下面算式求得：</p><p>Signal_Duty=(Capture_2nd+(Front_Num_OvEvent*(TIM4_PERIOD+1))-Capture_1st)<b><i>/</i></b>(Capture_3rd+(Total_Num_OvEvent*(TIM4_PERIOD+1))-Capture_1st)</p><p>Signal_Freq=Clk_Internal<b><i>/</i></b>((Capture_3rd+(Total_Num_OvEvent*(TIM4_PERIOD+1))-Capture_1st)*(TIM4_PSC+1)); </p><p>因为：计数器时钟= Clk_Internal /(TIM4_PSC+1)</p><p>或者说：</p><p>Signal_Freq计数器时钟<b><i>/</i></b>(Capture_3rd+(Total_Num_OvEvent*(TIM4_PERIOD+1))-Capture_1st);       </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.3  基本配置准备</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>3.3.1 实现TIM3 通道1的PWM输出，计数周期<b>5s</b>,占空比<b>40%</b>，用来做被测量信号。</p><p>A、选择定时器内部时钟作为时钟源，STM32F411芯片定时器内部时钟为<b>100Mhz；</b></p><p>B、设置分频比，选择计数模式、设置计数脉冲个数；</p><p>      对时钟源20000分频,<b>PSC=20000-1;</b>选择向上计数模式<b>up counting;</b></p><p>      计数器基于分频后的脉冲每计数设置为25000个后，发生溢出并产生更新事件及中        断。则：<b>ARR=25000-1</b></p><p>按照上面参数来设计，定时器的定时周期或者说溢出周期就是5s.</p><p>C、它需做PWM输出，这里选择PWM 模式1，占空比为40%，则<b>CCR</b>=（ARR+1）*0.40 =<b>10,000</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>CubeMx图形化配置界面：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c3c3b93c0aab1d62bdb517b84bc86e9d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"428\" data-original=\"https://pic2.zhimg.com/v2-c3c3b93c0aab1d62bdb517b84bc86e9d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;428&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"428\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"428\" data-original=\"https://pic2.zhimg.com/v2-c3c3b93c0aab1d62bdb517b84bc86e9d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c3c3b93c0aab1d62bdb517b84bc86e9d_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4382a818e9a4e8bcc713c1995b68b3ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"453\" data-original=\"https://pic3.zhimg.com/v2-4382a818e9a4e8bcc713c1995b68b3ba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;453&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"453\" data-original=\"https://pic3.zhimg.com/v2-4382a818e9a4e8bcc713c1995b68b3ba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4382a818e9a4e8bcc713c1995b68b3ba_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.3.2 实现TIM4通道2的输入捕获，假定计数器溢出周期为20ms.</b></p><p>1、选择定时器内部时钟为时钟源，32F411定时器内部时钟为<b>100Mhz；</b></p><p>2、设置分频比，选择计数模式、设置计数脉冲个数；</p><p>     先对时钟源100分频、即<b>PSC=100-1;</b> 选择向上计数模式<b>up counting;</b>计数器基于       分频后的脉冲每计数20000个，发生溢出并产生更新事件及中断。则：           </p><p><b>ARR=20000-1</b></p><p>按照上面参数来设计，定时计数周期或者说溢出周期就是<b>20ms.</b></p><p>另外，通道2配置为<b>输入捕捉</b>，初始捕捉极性位选择<b>上升沿</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1aed66d0d0a59dc6b57fda455a874fba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb\" width=\"457\" data-original=\"https://pic3.zhimg.com/v2-1aed66d0d0a59dc6b57fda455a874fba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;457&#39; height=&#39;248&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"457\" data-original=\"https://pic3.zhimg.com/v2-1aed66d0d0a59dc6b57fda455a874fba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1aed66d0d0a59dc6b57fda455a874fba_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-27632ac6a6845f7a3f5a6d956814c223_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic4.zhimg.com/v2-27632ac6a6845f7a3f5a6d956814c223_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic4.zhimg.com/v2-27632ac6a6845f7a3f5a6d956814c223_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-27632ac6a6845f7a3f5a6d956814c223_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.4 工程代码的生成、添加和整理</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>通过STM32CUBEMX依据上述参数完成配置，并开启TIM4的中断使能，然后生成工程。</p><p>再在工程里添加应用户代码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fbe47e449febd40931bb94da48e18d05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"154\" class=\"content_image\" width=\"389\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;389&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"389\" data-rawheight=\"154\" class=\"content_image lazy\" width=\"389\" data-actualsrc=\"https://pic2.zhimg.com/v2-fbe47e449febd40931bb94da48e18d05_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>TIM4中断处理代码说明：</p><p>在TIM4通道2的比较中断里做3次捕捉值的获取以及计算，在TIM4更新中断里对溢出事件进行统计。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-16e546298cd18bba2fe660ea3bd80222_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-16e546298cd18bba2fe660ea3bd80222_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;138&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-16e546298cd18bba2fe660ea3bd80222_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-16e546298cd18bba2fe660ea3bd80222_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1aae641709784be73bbf934b209af0a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-1aae641709784be73bbf934b209af0a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;135&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"135\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-1aae641709784be73bbf934b209af0a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1aae641709784be73bbf934b209af0a8_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0c6b8ab6a72cee44f1280a7d977f9a28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-0c6b8ab6a72cee44f1280a7d977f9a28_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-0c6b8ab6a72cee44f1280a7d977f9a28_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0c6b8ab6a72cee44f1280a7d977f9a28_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e024c9ee1312fd8775496a3d73ba12c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"602\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"602\" data-original=\"https://pic2.zhimg.com/v2-e024c9ee1312fd8775496a3d73ba12c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;602&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"602\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"602\" data-original=\"https://pic2.zhimg.com/v2-e024c9ee1312fd8775496a3d73ba12c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e024c9ee1312fd8775496a3d73ba12c9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验结果验证</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>实验中tim4的时基参数保持不变，主要调整TIM3的PWM输出波形的脉宽和占空比，来看看实验结果。尤其看看当待测脉宽远长于TIM4定时器的溢出周期时的情况。</p><p>为了便于参数的修改和测试，这里针对TIM3和TIM4的时基参数定义了几个宏：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3ae894496f4a49d178e1cff458771ed0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-3ae894496f4a49d178e1cff458771ed0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-3ae894496f4a49d178e1cff458771ed0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3ae894496f4a49d178e1cff458771ed0_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a60711e90726c83fcc15a8382ed9173c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"117\" class=\"content_image\" width=\"410\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;410&#39; height=&#39;117&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"117\" class=\"content_image lazy\" width=\"410\" data-actualsrc=\"https://pic1.zhimg.com/v2-a60711e90726c83fcc15a8382ed9173c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5e29ad471eb8ffcee9d5462ba372a512_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"378\" data-rawheight=\"86\" class=\"content_image\" width=\"378\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;378&#39; height=&#39;86&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"378\" data-rawheight=\"86\" class=\"content_image lazy\" width=\"378\" data-actualsrc=\"https://pic3.zhimg.com/v2-5e29ad471eb8ffcee9d5462ba372a512_b.jpg\"/></figure><p>。。。。。。</p><p>我们选取几组数据，直接联机观察运行结果。</p><p>// pulse cycle = ((TIM3_PSC+1) * (TIM3_PERIOD+1))/100,000,000 【s】</p><p>// 5s    ==&gt;500,000,000       // 9s    ==&gt;900,000,000       </p><p>//500ms  ==&gt;50,000,000         //80ms   ==&gt;8,000,000</p><p>//20ms   ==&gt;2,000,000   /////Same with measuring TIM4 cycle</p><p>//1ms    ==&gt;100,000       //100us  ==&gt;10,000</p><p>//10us   ==&gt;1000         //5us   ==&gt;500</p><p>…… 4 us?</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>小结</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上面实验的实现思路及提到的代码，仅供参考，旨在抛砖引玉。</p><p>其它地方也有相关的例程，不过往往有个前提，待测信号的周期不能长于用来测量的定时器的溢出周期。如果按照上面的代码设计，就没有这个限制了。基于现有软硬件环境，我们可以对一定宽度以上的外来脉冲准确测量其脉冲宽度及占空比，当然这个一定宽度跟我们的软硬件境有关，比方时钟频率、计数脉冲精度、代码效率等。基于刚才的实验来看，5us以上时都能准确测得结果。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89440015", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 13, 
            "title": "【STM32学习笔记】USART 硬件流控", 
            "content": "<p><b>流控的概念源于 RS232 这个标准，在 RS232 标准里面包含了串口、流控的定义。</b>大家一定了解，RS232 中的“RS”是Recommend Standard 的缩写，即”推荐标准“之意，它并不像 IEEE-1284、IEEE-1394 等标准，是由“委员会定制”。因而，不同的厂商在做 RS232 时，多少会有不同，流控也都会存在差异。以下我们与大家一起探讨流控的作用、搭建及如何操作。</p><p><b>本文着重探讨硬件流控。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>为什么需要流控？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>数据在两个串口之间进行通讯的时候常常会出现丢失数据的现象，比如两台计算机或者是一台计算机和一个单片机之间进行通讯，当接收端的数据缓冲区已经满了，这个时候如果还有数据发送过来，因为接收端没有时间进行处理，那这样的数据就有可能会丢失。在工业现场或者其他领域，经常会遇到这种问题，本质原因是速度不匹配、处理能力不匹配。比如单片机的主频只有20M或30M，ARM的处理能力可能是200M，PC机的处理能力是几个G，这种处理能力的不匹配造成了传输的时候数据容易丢失。</p><p><b>硬件流控就是来解决这个速度匹配的问题。</b>它的基本含义非常简单，当接收端接收到的数据处理不过来时，就向发送端发送不再接收的信号，发送端接收到这个信号之后就会停止发送，直到收到可以继续发送的信号再继续发送。因此<b>流控本身是可以控制数据传输的进度，进而防止数据丢失。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一般常用的流控方式有两种：硬件流控和软件流控。</b>本文主要探讨硬件流控。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>如何在STM32上搭建硬件流控？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5a70619cf0be732e9d32a5e5a7bfb63c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5a70619cf0be732e9d32a5e5a7bfb63c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;475&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5a70619cf0be732e9d32a5e5a7bfb63c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5a70619cf0be732e9d32a5e5a7bfb63c_b.jpg\"/></figure><p>▲　图1，硬件流控的连接原理图</p><p class=\"ztext-empty-paragraph\"><br/></p><p>图1中，以前用到的 TX 和 RX，也就是简单的三线串口的通讯方式，如果使能了硬件流控，在这个基础上需要增加两根控制线，一根叫 CTS（Clear To Send 为输入信号，一根叫 RTS（Require To Send 为输出信号）。其实从名字上也可以看到，一个是接收控制，一个是发送控制。</p><p>从硬件连接原理图中我们可以看到，如果从 USART 1 向 USART 2 发送的话，USART 1 的 TX 和 USART 2 的 RX 相连，USART 1 的 CTS 和 USART 2 的 RTS 相连，数据的方向是从 TX 到 RX，从串口1到串口2，流控是从 RTS 到 CTS 也就是从串口2到串口1。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>数据线方向与流控线数据方向相反</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从图1 - 硬件流控的连接原理图中，大家可以发现数据线方向与流控线数据方向是相反的，为什么呢？文章前面提到了流控的主要概念是指接收端没有时间处理这样的数据或者是处理能力比较弱，所以需要让发送端等待，接收端发出来的信号叫 RTS 信号，发送端检测管脚叫 CTS。因此，硬件连接原理图的下半部分和上半部分正好相反，接收端和串口2的TX相连，RTS和串口2的CTS相连。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>数据在接收的时候具体如何操作？</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0ecdead04ed257fe2fba69629fe6c407_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-0ecdead04ed257fe2fba69629fe6c407_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;605&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-0ecdead04ed257fe2fba69629fe6c407_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0ecdead04ed257fe2fba69629fe6c407_b.jpg\"/></figure><p>▲　图2，接收与RTS信号原理图</p><p class=\"ztext-empty-paragraph\"><br/></p><p>从图2 - 接收与 RTS 信号原理图中，我们可以看到，RTS 信号在数据没有被读取之前都是保持在高电平状态，我们可以看到在 Start 之前都是高电平，这也就是告诉发送端，数据还没有被拿走，请发送端等待，一旦数据被 DMA 或者 CPU 从 DR 寄存器读取之后，RTS 就释放高电平，变为低电平，这时候发送端如果想发送数据的话就可以直接发送了。</p><p>一句话概括，就是 <b>RTS 表示了 USART 是否已经准备好接收新的数据了</b>。</p><p>另外，我们需要注意，当 USART 的 FIFO 模式也就是缓冲模式开启的时候，在 FIFO 满的时候才会去拉高 RTS 信号。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1e705e5a441ad915dea5e2027fd25fc7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"670\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1e705e5a441ad915dea5e2027fd25fc7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;670&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"670\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1e705e5a441ad915dea5e2027fd25fc7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1e705e5a441ad915dea5e2027fd25fc7_b.jpg\"/></figure><p>▲　图3，发送与CTS信号原理图</p><p class=\"ztext-empty-paragraph\"><br/></p><p>图3 - 发送与 CTS 信号原理图中，TDR 是 USART 的发送寄存器，在这个寄存器中写入数据，如果这时候在移位寄存器中没有数据正在发送，硬件就会把 TDR 中的内容搬移到移位寄存器中，之后按照设置好的波特率、数据位等数据格式开始直接发送数据。这就是一个正常的数据发送的流程。</p><p><b>如果使能了硬件流控的功能，就会增加一个实时检测的步骤。</b>在图3中，当没有收到CTS信号的时候，TX 发送线上数据是连续发送的，表现形式为：在 STOP 位后紧跟着就是下一个数据的 Start bit。</p><p>当 Data 2 还在 TX 线上进行发送的时候，如果此时在 CTS 信号上检测到了高电平，即使在 Data 2 的 STOP 位发送完之前写入了 Data 3，在当前的字节发送完之后是不会马上发送新写入的数据的，而是要等待，直到在 CTS 管脚上检测为低电平后，TX脚上才会开启 Data 3 的 Start 信号。</p><p>这里其实我们可以简单理解一下，<b>在发送的时候要实时监测 CTS 的电平状态，如果发现是高电平，就不会再发送新的数据</b>，直到 CTS 检测发现已经没有高电平信号了。</p><p>需要注意的是在当前字节发送完之前的三个时钟周期，CTS 需要提前置位上，也就是在Data 2 结尾的地方如果只差一个 STOP bit，那有可能把 Data 3 连续发送出去。</p><p>有人可能会有疑问，CTS 不是马上就置位了吗，而且 Data 2 还没有完全发送出去。其实它是去检查 CTS 的标志位，设置这个标志位至少需要两个时钟周期，设置好了 CTS 的标志位之后，硬件才会去检查进而不去发送 Data 3 的 Start bit。但如果设置的 CTS 或者是检查到的 CTS 已经是非常晚了，那后面的一个字节就已经发送过去了，因为在发送 Data 3 的时候没看到有 CTS 的标志位，所以就要求我们至少提前三个时钟周期把 RTS 信号释放出来，让 CTS 把这个信号检测到进而让后面的数据不再发送。RTS 是只要在接收缓冲区非空的时候就会被提前置位，也就是结果寄存器里面只要有一个东西就会把它置位，都会放在当前的移位缓冲寄存器里。</p><p>在原则上是不会出现由于 RTS 置位比较晚，导致 CTS比较慢的现象。但是不排除一种情况，就是 CTS 和 RTS 之间的延迟特别大，或者说串口的波特率特别快，这个时候就容易出现由于 RTS 置位比较晚使得 CTS 比较慢的现象。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>软件配置</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fcd558d5029ed426d8c75d300f108f1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-fcd558d5029ed426d8c75d300f108f1e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;539&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-fcd558d5029ed426d8c75d300f108f1e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fcd558d5029ed426d8c75d300f108f1e_b.jpg\"/></figure><p>▲　图4，软件配置</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在 CubeMX 里可以选择一个串口模式为异步模式，之后在它下面的硬件流控 RS232 中选择 CTS/RTS。这里要注意一下，CTS 和 RTS 是可以单独使能的，可以根据速度来选择使能 CTS 还是 RTS，如果我的速度比较慢的话就使能 RTS，因为 RTS 是给对方的信号，不需要考虑对方的处理能力。</p><p>另外，在 CubeMX 里也可以使能 RS485 的硬件流控，这里的流控实际上流控的是数据的方向，因为 RS485 是一个半双工的通讯模式，它的数据收的时候就不能发，发的时候不能收。STM32 上有一个 DE 管脚和 RS485 的接收器芯片直接相连，控制数据的收发，所以我们要知道在 STM32 的硬件流控中其实包含两方面的内容，一方面是关于速度的，也就是 RS232 的 CTS、RTS；另一方面是关于数据的方向的控制，它是基于 RS485 的，在软件中只需要设置它的功能，其他使用功能和串口都是一样的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>硬件流控和软件流控的区别</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>软件流控是以特殊的字符来代表从机已经不能再接收新的数据了</b>，基本的流程就是从机在接收数据很多的时候或主动给发送端发送一个特殊字符，当发送端接收到这个特殊字符后就不能再发送数据了。</p><p>软件流控很方便，不需要增加新的硬件，还是以前的TX、RX，但是使用了软件流控，它本身的字符也是数据，这个数据只不过是说在软件里把它设置了一个特殊的含义。如果它是一个全双工的通讯，在给另一个串口发送数据的时候如果也包含了这样一个特殊字符，对方就会误以为我让它不要再发送数据了，会有一定的概率出现错误，而硬件流控就不需要考虑这方面，只需要使用 CTS 和 RTS，所有的数据都是由硬件来操作的。</p><p>在实际的应用开发中，大家需要根据自己的实际情况来选择使用硬件流控还是软件流控。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/89407098", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "实战 | 双11福利恰值万圣节：跟Nicholas学G0，完课送板卡", 
            "content": "<p>万圣节，不给糖就捣乱狂欢夜，没糖有板卡攻城狮小鬼来玩啦！<b>G0板卡，只要你学，我们就送！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G0从2019年初开始推向市场，成为兼顾成本、性能、易开发的新一代嵌入式入门利器，广受欢迎。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d7d602a4a1c8f3ba2640882f8fa8a91f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d7d602a4a1c8f3ba2640882f8fa8a91f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;658&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"658\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d7d602a4a1c8f3ba2640882f8fa8a91f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d7d602a4a1c8f3ba2640882f8fa8a91f_b.jpg\"/></figure><p>之前，我们已经通过直播和系列课程精讲了STM32G0系列产品性能及市场应用</p><p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D54661bb85bb24476bade57526b640e92\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32G0新一代入门利器及USB Type-C PD技术深度解析》</a>。</p><p><b>《STM32G0实战》系列课</b>则是带大家实战，从相关软件安装到点灯实验，各种示例，以及最后的烧写编程，非常适合初学者。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5ab4c1b810d59ab28ce787adb6833102_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5ab4c1b810d59ab28ce787adb6833102_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5ab4c1b810d59ab28ce787adb6833102_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5ab4c1b810d59ab28ce787adb6833102_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>毋庸多言，先上课表！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d077fb9a212144f6490b13948d30868a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"969\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d077fb9a212144f6490b13948d30868a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;969&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"969\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-d077fb9a212144f6490b13948d30868a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d077fb9a212144f6490b13948d30868a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>课程主讲人Nicholas来自法国，他用英语授课，虽然口音有点法国的浪漫style。为了便于大家理解，字幕组很结棍，统统配上了中文字幕！无需担心语言问题。此套实战课程视频绝非照本宣科念PPT，Nicholas拿着板卡模块化讲解、沉浸式学习。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>既然是实战，有板才能练。这门课程，为大家准备了<b>150块 NUCLEO-G071RB开发板</b>，<b>只要你学，我们就送。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>获得板卡的流程有点不一样，请见下方学习流程图：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-460dc08e60cdbd865cd355cb96054809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb\" width=\"1055\" data-original=\"https://pic2.zhimg.com/v2-460dc08e60cdbd865cd355cb96054809_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1055&#39; height=&#39;1182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1055\" data-original=\"https://pic2.zhimg.com/v2-460dc08e60cdbd865cd355cb96054809_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-460dc08e60cdbd865cd355cb96054809_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>活动规则</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>电堂小姐姐审核是否发板卡有关键三点：</p><p>❶ 板子要发给爱学习的攻城狮和童鞋们，所以一定要先1元购买课程；否则没有获取板卡资格。</p><p>❷ 确保大家完整地收看课程，我们会先行收取板卡押金29元，需要完成课程并打卡小作业（作业会尽快批改），达成目标后，电堂小姐姐会及时退板卡押金。</p><p>❸ 为了给更多的蝶粉提供学习机会，通过电堂获得过NUCLEO G0板卡的粉友们，将不参加本次学习送板卡活动。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>本系列课程在《第三节 简单的工程试验》、《第五节 外部中断》、《第六节 低功耗（上）》设有课后练习，大家记得在学习完课程后完成作业哦！</b></p><p><b>PS：请大家在PC端提交作业，手机端暂不支持提交视频！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>活动截止时间：2019年12月15日</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果你还对学习流程不清楚，可以添加电堂小姐姐微信询问：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2ecf0bbb48aabe678f9c16d47b2136a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"210\" data-rawheight=\"294\" class=\"content_image\" width=\"210\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;210&#39; height=&#39;294&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"210\" data-rawheight=\"294\" class=\"content_image lazy\" width=\"210\" data-actualsrc=\"https://pic1.zhimg.com/v2-2ecf0bbb48aabe678f9c16d47b2136a4_b.jpg\"/></figure><p>实战课总是需要安装很多软件，电堂小姐姐已经贴心地将所需软件打包放在百度云，<b>向&#34;AI电堂&#34;公众号后台回复&#34;G0安装包&#34;，即可获得下载链接</b>。</p><p>安装包包括如下软件：1、STM32CubeMX，用于生成初始化代码；2、STM32CubeProgrammer，用于对Flash存储器进行编程；3、Keil uVision 5；4、STM32G0的元件数据包、外设库及其他中间件；5、终端应用程序，如Tera Term。</p><p>期待你的学习有收获，能力有增长！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>《STM32G0 实战》课程链接</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D659129547e414ee68aee75ca8938f356\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "万圣节", 
                    "tagLink": "https://api.zhihu.com/topics/19656534"
                }, 
                {
                    "tag": "开发板", 
                    "tagLink": "https://api.zhihu.com/topics/19883423"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88840884", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 9, 
            "title": "【话说定时器系列】之八：STM32定时器计数定时基本功能实验", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验内容：</b></p><p>使用STM32定时器的基本计数定时功能，周期性地让一个LED灯闪烁,具体就是1s亮1s暗。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>涉及到的开发板：</b></p><p><b>STM32F411 Nucleo</b> 板 【实验对开发板并无特别要求】，集成开发环境不限。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验目的：</b></p><p>1、熟悉定时器时基单元的基本寄存器及相关数据的拟定。</p><p>2、比较通用定时器与高级定时器在时基单元组成上的差异。</p><p>3、熟悉定时器的不同时钟源及使用。</p><p>4、为后面的其它实验做铺垫。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本次实验分三组来完成，实验结果都一样，只是实现方式上有些差异。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>第一组：使用<b>通用定时器3</b>来完成，选用定时器的内部时钟做计数器时钟源，在定时器的更新中断里做某GPIO的翻转实现LED的闪烁。</p><p>第二组：使用<b>高级定时器1</b>来完成，选用定时器的内部时钟做计数器时钟源，在定时器的更新中断里做某GPIO的翻转实现LED的闪烁。</p><p>第三组：使用通用定时器3来完成，选用定时器的一<b>外部时钟</b>做计数器时钟源，在定时器的更新中断里做某GPIO的翻转实现LED的闪烁。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验一</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIM3/ 每1s切换PA5输出电平驱动LED灯</p><p>1、选择定时器内部时钟作为时钟源，STM32F411芯片定时器内部时钟为100Mhz；</p><p>2、设置分频比，选择计数模式、设置计数脉冲个数；</p><p>先对时钟源10000分频、即<b>PSC=10000-1;</b></p><p>选择向上计数模式<b>up counting;</b></p><p>计数器基于分频后的脉冲每计数10000个，发生溢出并产生更新事件及中断。</p><p>则：<b>ARR=10000-1</b></p><p>按照上面的参数来设计的话，定时器的定时计数周期或者说溢出周期就是1s.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9ee838dd7dd44048e6740d473295a896_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-9ee838dd7dd44048e6740d473295a896_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;175&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-9ee838dd7dd44048e6740d473295a896_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9ee838dd7dd44048e6740d473295a896_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-de9b82fbae7cde631d47d01acbe0593a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-de9b82fbae7cde631d47d01acbe0593a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;293&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-de9b82fbae7cde631d47d01acbe0593a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-de9b82fbae7cde631d47d01acbe0593a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过STM32CUBEMX依据上述参数完成配置，并开启TIM3的中断使能，然后生成工程。再在工程的用户代码里添加应用代码。</p><p>HAL_TIM_Base_Start_IT(&amp;htim3);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>该函数使能了TIM3的更新中断位，并软件启动定时器的工作。</p><p>在中断服务程序里添加切换LED亮暗的代码：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-98b3b3b727fb7fc2edf7cb141a5e0652_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-98b3b3b727fb7fc2edf7cb141a5e0652_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;177&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"177\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic3.zhimg.com/v2-98b3b3b727fb7fc2edf7cb141a5e0652_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-98b3b3b727fb7fc2edf7cb141a5e0652_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>整个过程比较简单，配置完成，只需添加简单的用户代码，然后编译、下载就可以看结果。第一个实验就算完成了，接着来看第2个实验。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验二</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIM1/每1s切换PA5输出电平驱动LED灯</p><p>这次是使用高级定时器，时钟源不变。但我们这次想用一下高级定时器才有<b>RCR寄存器</b>。实验的内容一样的。</p><p>我们知道，RCR寄存器是用来对计数器的溢出次数进行统计的，计数器每发生RCR+1次溢出时,定时器会产生更新事件触发更新中断。</p><p>上面的实验中是定时器基于计数时钟每1秒钟发生一次溢出并产生更新事件，那么，这里我们可以让定时器溢出多次，比方4次、5次都可以，然后定时器才产生更新事件并触发中断，同样我们在更新中断里做GPIO的翻转实现LED的闪烁。至于溢出几次产生更新事件，我们通过RCR寄存器来配置，比如希望每溢出5次产生更新事件，那么RCR就设置为5-1，也就是4.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>具体结合到这里的实验，我们希望每1s发生5次溢出后才产生更新事件及中断。这也就意味着定时器每200ms发生一次溢出，那相应的时基寄存器的参数我们可以做些调整.显然，相比上一个实验，定时器单次计数周期变得短多了，我们可以将PSC/ARR/RCC做适当调整。比如我们这样配置：</p><p>1、选择定时器内部时钟作为计数器时钟源，100Mhz；</p><p>2、设置分频比，选择计数模式、设置计数脉冲个数、RCR的值</p><p>先对时钟源2000分频、即<b>PSC=2000-1;</b></p><p>选择向上计数模式<b>up counting;</b></p><p>计数器基于分频后的脉冲每计数10000个发生溢出。则：<b>ARR=10000-1</b></p><p>每发生5次溢出产生更新事件，则: RCR=5-1</p><p class=\"ztext-empty-paragraph\"><br/></p><p>按照上面的参数来设计的话，定时器的定时计数溢出周期就是0.2s，但每5次溢出才产生一次更新事件，即1s中才产生更新事件及中，并在中断里完成PA5的电平翻转。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-64b567775702dfb298c7ecc4fcff2fd0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"184\" class=\"origin_image zh-lightbox-thumb\" width=\"486\" data-original=\"https://pic1.zhimg.com/v2-64b567775702dfb298c7ecc4fcff2fd0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;486&#39; height=&#39;184&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"184\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"486\" data-original=\"https://pic1.zhimg.com/v2-64b567775702dfb298c7ecc4fcff2fd0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-64b567775702dfb298c7ecc4fcff2fd0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fc7eab673e828872010763eebcd385e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-fc7eab673e828872010763eebcd385e3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;202&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic4.zhimg.com/v2-fc7eab673e828872010763eebcd385e3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fc7eab673e828872010763eebcd385e3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过CUBEMX依据上述参数完成配置，并开启TIM1的更新中断使能，然后生成工程。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b9faf9fb9f8d9290b15de82a6280b83e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"130\" class=\"content_image\" width=\"406\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;406&#39; height=&#39;130&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"130\" class=\"content_image lazy\" width=\"406\" data-actualsrc=\"https://pic3.zhimg.com/v2-b9faf9fb9f8d9290b15de82a6280b83e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>再在用户代码里添加应用代码：</p><p>HAL_TIM_Base_Start_IT(&amp;htim1);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>该函数使能TIM1的更新中断允许位，并软件启动定时器TIM1计数器的工作。</p><p>跟实验1一样，还是在中断服务程序里添加切换LED亮暗的代码。编译下载后即可看结果了。最终，可以看出，虽然定时器的时基参数不一样，最后结果跟实验1是完全一样的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实验三</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIM1/ 每1s切换PA5电平驱动LED灯</p><p>还是使用高级定时器TIM1，不过时钟源这次选择来自于定时器外部的触发输入脚，即ETR脚。这里我们用定时器3的PWM输出模式输出10MHz的脉冲信号并通过连线连接到TIM1的外部触发输入端ETR脚，并作为TIM1的计数器时钟源。</p><p>前面在介绍时钟源时，提到过来自ETR脚的时钟信号有两路走法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一路走法是：</b></p><p>来自引脚ETR过来的信号经过极性选择、分频、滤波后的信号并连接到从模式控制器，为计数器提供时钟源。此时定时器工作在从模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>另外一路走法是：</b></p><p>来自ETR脚的时钟信号经过极性选择、分频、滤波后不连接到从模式控制器，而像内部时钟源一样为计数器提供时钟；这时基于该时钟定时器工作在主模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>顺便提醒下，这里提到的分频跟后面连接到时基单元后的分频不是一回事。这里的分频是指对来自ETR脚的时钟信号在连接到计数器之前做分频，当然这个分频也不是必须的，要视具体信号频率来定。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们这里使用第2种用法，即来自ETR脚的时钟信号经过极性选择、分频、滤波后不连到从模式控制器，而是直接提供给计数器时钟控制单元，并在连接到计数器之前也不对其做分频。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-77202a1b728b49962947cea83097d78f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-77202a1b728b49962947cea83097d78f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;376&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"376\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-77202a1b728b49962947cea83097d78f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-77202a1b728b49962947cea83097d78f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>TIM1的时基参数的配置</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、来自ETR脚的外部时钟作为计数器时钟源，10Mhz。</p><p>2、设置计数器的分频比，选择计数模式、设置计数脉冲个数、RCR的值【这个RCR不是必须</p><p>      用的】</p><p>先对时钟源100分频、即<b>PSC=100-1;</b></p><p>选择向上计数模式<b>up counting;</b></p><p>计数器基于分频后的脉冲每计数10000个就发生溢出，则：<b>ARR=10000-1</b></p><p>计数器每发生10次溢出动作产生更新事件，则: RCR=10-1</p><p>这样的话，每两次更新事件所对应的时间间隔也正好是1s.</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f9709d027f7ba87e87e43f1916a21703_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic4.zhimg.com/v2-f9709d027f7ba87e87e43f1916a21703_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;194&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic4.zhimg.com/v2-f9709d027f7ba87e87e43f1916a21703_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f9709d027f7ba87e87e43f1916a21703_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-75cb6af1ddf72ddd2cb0b27ff13d76e0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过STM32CUBEMX依据上述参数完成配置，注意在NVIC设置栏开启TIM1的更新中断使能，然后生成工程。再在用户代码里添加应用代码。<br/></p><p>HAL_TIM_Base_Start_IT(&amp;htim1);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在该代码里使能TIM1的更新中断允许位，并软件启动计数器的工作。</p><p>同样，在更新中断服务程序里添加切换LED亮暗的代码。编译下载后即可看结果了。照样可以看到跟上面两个实验完全相同的结果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三个实验的比较小结:</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-87e37598f0306a3c532a1ee6fac5ccd8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-87e37598f0306a3c532a1ee6fac5ccd8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;704&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-87e37598f0306a3c532a1ee6fac5ccd8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-87e37598f0306a3c532a1ee6fac5ccd8_b.jpg\"/></figure><p>到此定时器基本定时功能实验就完毕了。主要目的希望通过实验了解时基单元里几个寄存器的配置和使用。实验中涉及到定时器时钟源、更新事件等概念，希望通过实验加深印象和理解，也希望就实验中涉及的概念做些整理、回顾。比方定时器时钟源，前面在做了原理性介绍时，提到过定时器时钟源一般来讲有多种，这里只用到两类，其它的一般用在什么场合呢。当然，这些基础的东西，在后面实验中肯定会再次提到或用到。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>另外，<b>就今天的实验以及涉及到的内容做几点提醒：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、在对时钟源做分频时，注意实际分频比等于分频寄存器PSC+1；</p><p>2、计数器使用单向计数【向上或向下计数】时，实际计数脉冲个数等于ARR+1;</p><p>3、使用高级定时器的RCR寄存器时，注意，是每发生RCR+1次溢出才产生更新事件并可以触</p><p>     发更新中断；</p><p>4、使用定时器内部时钟源时，其时钟频率并不一定等于与其相连的总线时钟，它完全可能高</p><p>     于与其相连的总线时钟；因为外设总线时钟与定时器内部时钟之间往往有个倍频器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后留下几个思考题，有兴趣的话可以去自行回顾与思考：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、上面的实验用到哪几种定时器时钟源？还有哪些没用到？</p><p>2、定时器的溢出发生在什么时刻？重装又发生在什么时刻？重装些什么？</p><p>3、定时器的溢出事件与更新事件是什么关系？差别是什么？</p><p>4、通用定时器与高级定时器因溢出而发生更新事件有什么差异？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于上述问题可以自行查看手册或之前的原理介绍。今天就聊到这里，下期会就定时器的输入捕获测量脉冲宽度及占空比的实验做些分享介绍，敬请关注。谢谢！</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88439916", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "【百问百答】ST 电机控制实战问答合辑 | 连载之二", 
            "content": "<p>点击下方链接可以直接观看<b>电机直播</b>及<b>直播答疑</b></p><a href=\"https://link.zhihu.com/?target=https%3A//wx18257eb0e8c82435.h5.xiaoe-tech.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmM5NmViMzFjMGRlX0w3bUNZdVE1IiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">wx18257eb0e8c82435.h5.xiaoe-tech.com</span><span class=\"invisible\">/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmM5NmViMzFjMGRlX0w3bUNZdVE1IiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9</span><span class=\"ellipsis\"></span></a><a href=\"https://link.zhihu.com/?target=https%3A//wx18257eb0e8c82435.h5.xiaoe-tech.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmRmZWM1ZTgxMWNmX05yNDdnYWppIiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">wx18257eb0e8c82435.h5.xiaoe-tech.com</span><span class=\"invisible\">/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmRmZWM1ZTgxMWNmX05yNDdnYWppIiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9</span><span class=\"ellipsis\"></span></a><p class=\"ztext-empty-paragraph\"><br/></p><p>本次实战问答只讨论<b>同步电机</b>，不对步进电机做特别的讨论，希望有助于大家进行电机开发或者是电机应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>想了解Q1~Q25的朋友可以参考之前的文章</p><a href=\"https://zhuanlan.zhihu.com/p/88309827\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-ae86ea524b96c1c29671348320d49f93_180x120.jpg\" data-image-width=\"1366\" data-image-height=\"1025\" class=\"internal\">AI电堂：【百问百答】ST 电机控制实战问答合辑 | 连载之一</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q26：</b>关于FOC库，电流放大的参数设计问题及马达启动问题？</p><p><b>A26：</b>在Workbench上，有参数的一个设计小软件，电流的配比和外围电路的配比可以在这</p><p>           个软件上看得到。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q27：</b>无传感电机怎么来实现速度的检测？</p><p><b>A27：</b>通过无传感观测器，观测角度从而观测出速度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q28：</b>MCU控制电机特别需要注意的要点(软件&amp;硬件)是哪些？</p><p><b>A28：</b>首先是电路的配对、采样电路布局、电源布局、芯片位置等等。同时，软件上要去学习</p><p>           原理，再加一些实践经验，软硬件去做一个调整，将是比较好的方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q29：</b>在控制直流有刷电机时，PWM频率如果进行选择？对于不同的直流有刷电机，PWM</p><p>          频率该如何选择，选择的依据是什么？PWM频率过高或过低会影响那些性能？</p><p><b>A29：</b>直流电机实际上可以加一些频率，与电机相关，也与应用相关。PWM频率的选择，可</p><p>           以考虑模糊算法，或者PID控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q30：</b>无码码盘情况下，如何跟踪平稳驱动正在惯性旋转的PMSM？</p><p><b>A30：</b>可以加入外部反电势检测电路，也可以进行一个辅助检测。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q31：</b>MC Workbench生成的控制电机的代码可以修改成自己的代码吗？修改成一个模板，</p><p>          之后就用Keil或是IAR调试电机，直接修改代码去调试电机，而不是用</p><p>          MCWorkbench。</p><p><b>A31：</b>MC workbench生成的是CubeMX工程，之后用户可自行修改CubeMX 工程或者修改</p><p>          代码进行调试。之前，是直接生成头文件，现在是由CubeMX 直接生成工程，所以将</p><p>          为您带来的极大便利性</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q32：</b>永磁同步电机的控制技术工程实现的思路是什么？怎么实现永磁同步电动机高速运行？</p><p>           比如15000转每分 技术难点是什么？</p><p><b>A32：</b>在高速转动的时候，如果采用FOC控制，PWM波控制，比如30K的一个FOC，最大电</p><p>           转速可以到为200000RPM。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q33：</b>当下电动车上电机主要的控制策略有哪些？</p><p><b>A33：</b>电动车上面有些使用的是交流异步电机（ACIM），这种电机比较皮实，是一种大功率</p><p>           电机。有些小功率电机，采用永磁同步电机（PMSM），主要以矢量控制为主。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q34：</b>伺服位置环为什么要用比例控制，如果出现稳态误差怎么办？</p><p><b>A34：</b>现在有非常多的控制反馈的控制算法，如预估量等。但是PID实现最简便，可调整PID</p><p>          参数达到最佳效果。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q35：</b>高级定时器和低级定时器控制电机的实际差别?</p><p><b>A35：</b>高级定时器有六路PWM输出，带死区；适合控制同步电机；其他定时器没有死区互补</p><p>          输出的。其他在配比上也有差别，如ADC采样的触发点，或者有没有ADC触发接口等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q36：</b>永磁电机的过流保护和电流环是什么？？</p><p><b>A36：</b>永磁电机的过流保护，通过TIM BKIN硬件保护来进行的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q37：</b>如何对电机的电流精准采样，电机双环PID算法的实现和调试的方式。</p><p><b>A37：</b>电流环的PID理论上是可以计算得到的，因为它是和我们的电机的电感和电阻相关的，</p><p>          速度环是可以调试的。可以把实际速度以及参考速度通过某种手段，比如说抓到电机</p><p>          上，或者是某些测试，放在同一表格或者同一图像，来观测PID的整定，一般过程是先</p><p>          调P后调I。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q38：</b>带HALL的BLDC电机的STM32控制中，定时器、ADC两个模块的具体配置细节是怎样</p><p>           的？</p><p><b>A38：</b>见具体程序，程序完全开源，可以看到完全配比。有时候HALL信号，我们采用定时器</p><p>           的一个霍尔模块。ADC是需要用定时器来做硬件触发的，是配置好的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q39：</b>ST 的FOC算法对于40极（20对极）以上的电机有测试过吗，对于极对数比较多的电机</p><p>          使用算法库应该注意什么？FOC算法能处理电机转速上限都有哪些限制因素？极对数较</p><p>          多的电机是否需要PWM载波频率更高？是极对数和PWM频率怎样的一个比例关系？</p><p><b>A39：</b>极数比较多的电机，先看电转速，最大速度能够达到多少，是否在200000RPM。还与</p><p>          采样与控制频率，死区，振铃等相关，需要进一步一个测试。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q40：</b>STM32如何控制大功率伺服电机?用STM32控制大功率伺服电机需要掌握哪些知识?(大</p><p>          致范围)</p><p><b>A40：</b>伺服电机有非常多的具体要求。要考虑具体要求是什么，有些大功率要求很精密的一些</p><p>          控制，有些可能需要用到更高级的如FPGA辅助硬件直接实现算法。功率是和硬件相</p><p>          关，对于控制器只是是否能够有足够的速度资源。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q41：</b>BLDC电机无感启动，如何能做到满载，甚至过载启动？</p><p><b>A41：</b>BLDC的无感启动非常困难，满载和过载启动比较困难。因为如果是开环转闭环驱动，</p><p>          一开始，尤其开环的过程，是比较麻烦的，转矩不太好控制，且输出功率有限。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q42：</b>利用编码器进行闭环控制的控制策略；如何提高低速时的稳定性；如何提高过载能力？</p><p><b>A42：</b>如果编码器的细分足够到位，角度细分足够到位，效果会比较好，也就是说闭环控制可</p><p>          能很精确。如果你想要加入更快，需要加入微分项。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q43：</b>伺服中零位对齐控制实现过程和原理怎样的？电机控制开发中，哪些是电机的必须参</p><p>           数，有哪些意义？</p><p><b>A43：</b>伺服中零位对齐控制是给定定子磁场角度将转子拉到固定位置。电机的关键参数包括电</p><p>          机的电阻，电感，反充电常数，极对数，最大电流，最大速度等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q44：</b>我的无人机之前是用BLDC电调驱动电机，现在想用FOC驱动。飞控给电调的控制信号</p><p>           频率是多少，怎么去确定？</p><p><b>A44：</b>飞控或接收机与电调之前是通过50～400Hz的PWM来控制通信的，电机调速以</p><p>           900us~2100us的高电平宽度来调节，因此一般把ST单片机配置为中断模式就可以得</p><p>           到速度控制信号，值得提的是FOC只是高端机器上使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q45：</b>霍尔有感模式下电角度不平滑，如何对霍尔电角度修正与电角度补偿有什么好的方式？</p><p><b>A45：</b>可以尝试在低速条件下使用的霍尔有感模式，高速条件下使用无传感的方式，根据你的</p><p>          速度可以做一些集成动作。因为有时候霍尔装的角度参差不齐，可能偏差一定角度，在</p><p>          低速上反应不出来，高速上非常明显，可以采用两种控制方式来调整。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q46：</b>能否提供一套完整的开发用的软件包？STVD编辑软件，有没有更高版本的？</p><p><b>A46：</b>STVD实际上只支持STM8S，只支持8位单片机。如果是32位单片机，您可以使用IAR</p><p>          或Keil，或者TureSTUDIO这个免费版本，都可以进行开发，都可以直接在网上下载</p><p>          的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q47：</b>使用stm32f303rct6，设计双电机控制，计划使用内置的4个运放加2个外置运放的方</p><p>          式，实现两个电机三电阻采样的方案，请问，方案是否可行？若可行，则adc通道该如</p><p>          何分配？是否能够实现对一个电机三个通道同步采样？</p><p><b>A47：</b>可以直接参考Workbench的双电机的控制配置，Workbench的参考视频上有双电机的</p><p>           FOC配比的参考事例。一般情况下，ADC采样使用两个ADC模块进行采样即可，就是</p><p>           同时采集两相电流，根据基尔霍夫定律，IA+IB+IC=0，直接推出第三相电流。所以对</p><p>           于三电阻采样，直接采两相电流即可。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q48：</b>如何快速学习电机知识，应用电机软件？</p><p><b>A48：</b>只能一步一步来，电机或者研发项目实际都是苦差事，一定要扎下心去做才会有收获。</p><p>          理论加实践，逐步深入，要有心理预期，急不得。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q49：</b>无传感情况下，如何动态的转速跟踪？</p><p><b>A49：</b>无传感情况下速度和角度同样是由观测器的输出量来动态输出的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q50：</b>更换电机型号后，怎么把Workbench生成的电机参数更换到现有的工程当中去？</p><p><b>A50：</b>当你更换电机型号后，那个电机的参数同样在workbench里边，也做相应改动，</p><p>          Workbench配置完成之后，再次生成工程就可以。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "电动机", 
                    "tagLink": "https://api.zhihu.com/topics/19633825"
                }, 
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88794027", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "如何在 MCSDK 5.x 中增加绝对位置编码器", 
            "content": "<p><i>在“AI电堂”微信公众号回复“SPI”，获得示例代码下载链接</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当前MC SDK5.x中支持的关于编码器（Encoder）为增量编码器，即有A，B，Z信号的编码器，主要为光编码器；在市场中有些应用（比如无人机云台，伺服，医疗）已经在广泛使用磁编码器，输出的是绝对位置，而想取得位置信息，或者通过取样绝对位置传感的PWM脉宽，或者需要通过通讯方式进行获取，比如SPI，I2C，UART等等；当前MC SDK5.x还未对这个部分直接支持，需要通过修改程序实现绝对位置编码器的应用，本文使用STM32F303RE-Nucleo控制说明。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 绝对位置编码器使用简介</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当导体通电后放入磁场中，由于磁场的作用导体上流动的电荷就会因为受到由磁场感应产生的洛伦兹力而发生流通路径的偏移，这样在垂直于电流方向上如果去测量的Y1，Y2点电压，将产生电势差，这个就是所说的霍尔效应；如果使用ADC对Y1，Y2点进行测量标定即可以反推磁场变化；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-aefd53558b1a2798a8e206dfe055a685_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"215\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-aefd53558b1a2798a8e206dfe055a685_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;508&#39; height=&#39;215&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"215\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-aefd53558b1a2798a8e206dfe055a685_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-aefd53558b1a2798a8e206dfe055a685_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>打开有绝对位置编码器的电机可以看到转子上有一个同步旋转的磁石，同时有检测芯片用于绝对角度输出，绝对位置编码器芯片输出PWM波或者内部做通讯输出，单片机可以读取相关信息得到到当前转子的角度。</p><p><b>1. 准备工作</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了方便调试，首先使用无传感控制（Sensor-less）将电机闭环运行起来，如果电机合适，并且使用的是ST的电机Demo板，可以使用ST的Motor Profiler（30KHzPWM）进行无传感电机参数以及转动参数识别，可以很快将电机无传感转动起来；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果使用客户自制板子，则按照ST的操作说明，使用MCWorkbench将电机闭环无传感转动起来，电机闭环转动过程可以确保硬件软件的完备性；注意这边生成的CubeMx工程文件*.ioc文件，后面我们添加程序会使用到；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了便于调试可增加两路DAC，比如使用STM32F303则直接使用两路输出的DAC，如果该芯片上没有DAC模块，可以使用TIMER+RC滤波电路模拟输出DAC；下图为使用DAC配置，需要配置为Userdefined DAC1/2。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-84468258566373a88847813c538cc7e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-84468258566373a88847813c538cc7e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;572&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"572\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"572\" data-original=\"https://pic4.zhimg.com/v2-84468258566373a88847813c538cc7e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-84468258566373a88847813c538cc7e7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 绝对编码器芯片角度信息读取</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>绝对编码器的输出可以为PWM波形输出，也可以为通讯端口输出，比如UART，SPI，I2C等等，本文以SPI输出以及PWM输出为例做说明</p><p><b>2. 角度以及速度标定</b></p><p><b>2.1 电角度标定</b></p><p>因为我们读取的角度为机械角度，在控制过程中我们用到的是电角度，因此还要做一下变换，将机械角度数据变为电角度数 据；使用公式为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-facb3b7e880f2e37e417ebecac708a54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb\" width=\"552\" data-original=\"https://pic1.zhimg.com/v2-facb3b7e880f2e37e417ebecac708a54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;552&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"552\" data-original=\"https://pic1.zhimg.com/v2-facb3b7e880f2e37e417ebecac708a54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-facb3b7e880f2e37e417ebecac708a54_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在程序中需要量化为Q16格式后得到电角度范围[−180°~180°]；即[-32768~32767]</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-043b9f3e8145c7891d6a1ac25ff96741_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-043b9f3e8145c7891d6a1ac25ff96741_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"54\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic2.zhimg.com/v2-043b9f3e8145c7891d6a1ac25ff96741_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-043b9f3e8145c7891d6a1ac25ff96741_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 2.2 速度计算</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-365558a6643102b456ed54bb6f6e1a6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"763\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-365558a6643102b456ed54bb6f6e1a6a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;763&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"763\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-365558a6643102b456ed54bb6f6e1a6a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-365558a6643102b456ed54bb6f6e1a6a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. 编码器SPI输出模式</b></p><p><b> 3.1 CubeMx配置</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>打开MCWorkbench生成的*.ioc文件，配置SPI模块，这边我们使用SPI3接收，配置参数需要参考编码器芯片的说明，这 边以AS5048A为例，如下配置，配置PB10作为片选信号CS输出</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b0be4a047ab2772d60bff666725ace20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-b0be4a047ab2772d60bff666725ace20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;414&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-b0be4a047ab2772d60bff666725ace20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b0be4a047ab2772d60bff666725ace20_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f4925847e1edeefe205320de0eb5417d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"268\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;268&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"268\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic2.zhimg.com/v2-f4925847e1edeefe205320de0eb5417d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.2 重新生成代码</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7e397d1b96e0cca23840d6e943f80e02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-7e397d1b96e0cca23840d6e943f80e02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;900&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-7e397d1b96e0cca23840d6e943f80e02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7e397d1b96e0cca23840d6e943f80e02_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 3.3    编写SPI读取代码</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据编码器芯片的数据手册编写SPI读取代码，调试代码以便读取到角度信息，因为是外设配置，本文对此部分不做具体说明；可以参考spi_pwm_encoder.c文件，得到角度信息后进行机械角度转变为电角度的计算；</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ENCODER_SPI_MAX 16384 \n#define POLES 11 \n\n/* \n* Calculate electrical angle based on motor, data in Q16 format \n* 16384 stand for 360degree(65536)*motor poles \n*/ \nSPI_EIAngle = (int16_t)((65536*SPI_Angle_Digital*POLES)/ENCODER_SPI_MAX)%65536;\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>SPI_Angle_Digital为通过SPI读取的电角度数字量，ENCODER_SPI_MAX为最大数字量输出，比如14-bit精度的输出，这个数据为16384。</p><p><b> 3.4 创建绝对值编码器的结构体</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>创建结构体，包含SpeednPosFdbk_Handle_t的通用组件，并且定义私有成员变量，用于绝对位置编码器的控制以及参量计算，在abs_encoder_pos_fdbk.c中进行初始化动作。</p><div class=\"highlight\"><pre><code class=\"language-text\"> /** \n  * @brief Abs encoder component parameters definition \n  */ \n  typedef struct\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">{ \n       SpeednPosFdbk_Handle_t _Super; \n       int16_t Encoder_EIAngle; /* Encoder final electrical angle */\n       int16_t Encoder_MecAngle; /* Encoder final mechanical angle */ \n       \n       int16_t Encoder_AngleD_Pre; /* Encoder previous digital angle */ \n       int16_t Encoder_AngleD_Now; /* Encoder present/now digital angle */ \n       int16_t Encoder_Speed_RPM; /* Speed uint in RPM */ \n       int16_t Encoder_Average_Speed_RPM; /* Average speed unit in RPM*/ \n       \n       bool SensorIsReliable; \n       uint8_t mode; \n       \n       int32_t Circle_Counter; /* Count the circle for motro run */ \n       bool Middle_Flag; /* Middle flag, 1--arrived pass middle*/ \n       \n} Abs_Encoder_Handle_t;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.5 绝对值编码器函数编写</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参照encoder_speed_pos_fdbk.c文件编写对应的绝对值编码器的代码，接口函数对应起来，这样可以有效的集成扩展, 分别定义：</p><p>1)    初始化函数Abs_Encoder_Init</p><p>2)    清除函数Abs_Encoder_Clear</p><p>3)    绝对值编码器读取电角度函数Abs_Encoder_GetElAngle</p><p>4)    读取机械角度函数Abs_Encoder_GetMecAngle</p><p>5)    得到电机平均机械速度函数 Abs_Encoder_GetAvrgMecSpeed01Hz</p><p>6)     计算电机平均机械速度函数 Abs_Encoder_CalcAvrgMecSpeed01Hz</p><p><b>3.6 添加绝对位置编码器代码</b></p><p><b>3.6.1 绝对位置编码器速度计算</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参照2.2公式进行速度计算</p><div class=\"highlight\"><pre><code class=\"language-text\">/* Speed_RPM = Deta(angle)*60*f/65536 */ \npHandle-&gt;Encoder_Speed_RPM = (int16_t)((int32_t)(pHandle-&gt;Encoder_AngleD_Now - pHandle-\n&gt;Encoder_AngleD_Pre * 60 * SPEED_LOOP_FREQUENCY_HZ/65536); </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.6.2 添加编码器初始化代码</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在mc_task.c文件的MCboot()函数中增加初始化代码</p><div class=\"highlight\"><pre><code class=\"language-text\"> Abs_Encoder_Init(&amp;Abs_Encoder_M1); // Initial absolute encoder sensor \nAbs_Encoder_M1.mode = SENSOR_SPI;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.6.3 角度以及速度的代码添加</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>中频任务TSK_MediumFrequencyTaskM1中加入绝对编码器的角度以及速度计算函数</p><div class=\"highlight\"><pre><code class=\"language-text\">Abs_Encoder_CalcAvrgMecSpeed01Hz(&amp;Abs_Encoder_M1, &amp;wAux );</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.7 判断绝对位置编码器角度准确性</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>使用DAC对角度进行判读，在mc_task.c中TSK_HighFrequencyTask()函数中增加UserDAC数据更新，一个DAC输出无 传感观测器输出的电角度，另外一路输出绝对值编码器计算出的电角度。</p><div class=\"highlight\"><pre><code class=\"language-text\">/* DAC output*/ \nextern UI_Handle_t * pDAC; \nstatic int16_t temp1; \nstatic int16_t temp2; \n\ntemp1 = FOCVars[M1].hElAngle; \ntemp2 = Abs_Encoder_M1.Encoder_EIAngle; \n\nDAC_SetUserChannelValue(pDAC, DAC_USER1, temp1);\nDAC_SetUserChannelValue(pDAC, DAC_USER2, temp2); </code></pre></div><p>程序修改完成后编译下载，让电机工作在无传感闭环模式，示波器连接DAC两路输出。</p><p>如果出现下面波形，则需要交换其中任意两条电机线，或者在程序中加入负号即可；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2337b9e7a5b16373ec642a2e472026a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-2337b9e7a5b16373ec642a2e472026a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;704&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"704\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"704\" data-original=\"https://pic1.zhimg.com/v2-2337b9e7a5b16373ec642a2e472026a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2337b9e7a5b16373ec642a2e472026a0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面的图为正确的DAC输出波形，可以看到黄色为无传感器观测器输出电角度，蓝色为计算得到的绝对位置编码器输出计算结果，两者基本重合，如果出现吻合度非常差，波形错开很多情况下，有两种措施，要么和电机厂商沟通做准确的零点校准， 要么自行增加角度补偿。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b1a1cabbd44988eb68aac264636d990b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-b1a1cabbd44988eb68aac264636d990b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;648&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"648\" data-original=\"https://pic4.zhimg.com/v2-b1a1cabbd44988eb68aac264636d990b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b1a1cabbd44988eb68aac264636d990b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 3.8 绝对位置角度闭环程序修改</b></p><p><b> 3.8.1 修改电角度赋值</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>修改mc_task.c中TSK_MediumFrequencyTaskM1（）函数，由无传感方式获得电角度改为绝对位置编码器的转换完成的电角度，并且返回对应的速度值；</p><div class=\"highlight\"><pre><code class=\"language-text\"> #if defined(ABS_ENCODER_MODE) \n      Abs_Encoder_CalcAvrgMecSpeed01Hz(&amp;Abs_Encoder_M1, &amp;wAux ); \n      IsSpeedReliable = 1; \n#else \n      Abs_Encoder_CalcAvrgMecSpeed01Hz(&amp;Abs_Encoder_M1, &amp;wAux ); \n      IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &amp;STO_PLL_M1, &amp;wAux ); \n#endif</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.8.2 屏蔽无传感电角度计算</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>修改 mc_task.c 中 TSK_HighFrequencyTask() 函数，只保留MC_FOC_DURATION这个判断，其他都可以屏蔽掉。</p><div class=\"highlight\"><pre><code class=\"language-text\"> hFOCreturn = FOC_CurrController(M1); \nif(hFOCreturn == MC_FOC_DURATION) \n{ \n   STM_FaultProcessing(&amp;STM[M1], MC_FOC_DURATION, 0); \n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.8.3 修改速度传感器为绝对编码传感器 </b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>修改 mc_task.c 中 TSK_MediumFrequencyTaskM1（）函数，传感器设定修改为绝对编码器。</p><div class=\"highlight\"><pre><code class=\"language-text\">case CLEAR: \n  FOCVars[M1].bDriveInput = INTERNAL; \n  STC_SetSpeedSensor( pSTC[M1], &amp;Abs_Encoder_M1._Super ); \n\n  if ( STM_NextState( &amp;STM[M1], START ) == true ) \n  { \n    FOC_Clear( M1 ); \n\n    R3_2_SwitchOnPWM( pwmcHandle[M1] ); \n   } \n   break;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.8.4 修改状态跳转</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为开始就直接是闭环运行，因此需要修改mc_task.c中TSK_MediumFrequencyTaskM1()函数，状态START下，只需要一条跳转语句，其他删除或者屏蔽掉。</p><div class=\"highlight\"><pre><code class=\"language-text\">case START: \n     STM_NextState( &amp;STM[M1], START_RUN ); \nbreak ;</code></pre></div><p>同样在状态START_RUN下，也只需要一条跳转语句。</p><div class=\"highlight\"><pre><code class=\"language-text\">case START_RUN: \n    STM_NextState( &amp;STM[M1], RUN ); \nbreak ;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.9 绝对编码器力</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>以上修改完成后，重新编译下载后就可以直接运行电机了，电机需要工作在力矩模式，如果使用GUI进行控制，则切换到Torque模式，同时设定Iqref数据，500这个数据计算来自于电机最大支持电流数字量（比如5000）的10%，可以逐渐增加这个数据，直到电机能够运转起来。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-abe97499717dfbc84b21330d065fe4d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb\" width=\"672\" data-original=\"https://pic1.zhimg.com/v2-abe97499717dfbc84b21330d065fe4d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;672&#39; height=&#39;412&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"672\" data-original=\"https://pic1.zhimg.com/v2-abe97499717dfbc84b21330d065fe4d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-abe97499717dfbc84b21330d065fe4d0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果程序控制电机运行则可以写为下面代码</p><div class=\"highlight\"><pre><code class=\"language-text\">MC_ProgramTorqueRampMotor1(500,1000); \nMC_StartMotor1();</code></pre></div><p><b>3.10  绝对编码器速度闭环运行电机</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>速度输出已经在上面的中频任务中计算得到，可以在无传感模式下对编码器速度输出做调试，看输出速度是否和无传感匹配，如果匹配后可以转入绝对编码器的速度闭环控制</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6c972dc046623b034171637c74ac2656_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb\" width=\"672\" data-original=\"https://pic3.zhimg.com/v2-6c972dc046623b034171637c74ac2656_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;672&#39; height=&#39;411&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"672\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"672\" data-original=\"https://pic3.zhimg.com/v2-6c972dc046623b034171637c74ac2656_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6c972dc046623b034171637c74ac2656_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果程序控制电机运行则可以写为下面代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">MC_ProgramSpeedRampMotor1 (600/6,1000); // 600RPM \nMC_StartMotor1();</code></pre></div><p><b>3.11 使用绝对编码器做位置环</b></p><p><b>3.11.1 框架说明</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>以表贴电机为例，一般的FOC电机控制是两环控制，速度环+电流环的控制方式，速度环为外环，电流环为内环，Idref = 0（d轴电流参考为0）的控制为常见控制；参考速度环输出参考转矩后供后端电流环路；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果增加位置环最简单和直接的方式即为将速度环换为位置环，即变为位置环+电流环的方式：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6d487fe285a78d666437e76f03f4a08b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-6d487fe285a78d666437e76f03f4a08b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic4.zhimg.com/v2-6d487fe285a78d666437e76f03f4a08b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6d487fe285a78d666437e76f03f4a08b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-520c5dc60b52efd5bd0d61adeac1dd54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic1.zhimg.com/v2-520c5dc60b52efd5bd0d61adeac1dd54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic1.zhimg.com/v2-520c5dc60b52efd5bd0d61adeac1dd54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-520c5dc60b52efd5bd0d61adeac1dd54_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 3.11.2  计算说明</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了方便控制，以及考虑精度问题，角度单位为rad*10000，比如电机转动10圈，也就是10圈后的位置，则该位置的设定角度为：   </p><p>             θset=10∗2𝜋∗10000≈628320</p><p> 位置环采用的是线性系数乘以系数直接输出到速度的参考:</p><p>             𝜔re𝑓=𝐾𝑝∗(𝑃𝑠−𝑃𝑐)</p><p>             𝐾𝑝−位置环系数</p><p>             𝑃𝑠 −设定的位置</p><p>             𝑃𝑐−当前的位置</p><p>当前位置的角度数字量计算如下：</p><p>             𝜃𝑐=𝐶𝑛𝑡∗2∗𝑃𝐼∗10000+𝜃𝑑</p><p>            𝐶𝑛𝑡 –绝对值编码器转过的整圈数</p><p>            𝜃𝑑−当前的机械角度的数字量</p><p>            𝑃𝐼 −取值3.1416</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.11.3 位置控制改进</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在三环控制中，不可避免的会涉及到加速度的计算，正常控制过程为：加速、匀速、减速、定位过程。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-dd0c6a12fdb3818e67acf967772a790c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-dd0c6a12fdb3818e67acf967772a790c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;480&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"480\" data-original=\"https://pic1.zhimg.com/v2-dd0c6a12fdb3818e67acf967772a790c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-dd0c6a12fdb3818e67acf967772a790c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>那么会涉及到加速度以及定位阶段的控制，这边我们可以按照加速度与速度差成反比，而定位阶段可以直接设定速度为0，但是实际使用过程中我们会发现直接直接的速度模式在定位阶段力量有限。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>方法一：PID 需要特别设定，更能够定位到给定位置；</p><p>方法二：抛开速度环，直接力矩控制；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-499fc2185146c3dbfeac172b9c467afb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-499fc2185146c3dbfeac172b9c467afb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;580&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"580\" data-original=\"https://pic4.zhimg.com/v2-499fc2185146c3dbfeac172b9c467afb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-499fc2185146c3dbfeac172b9c467afb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.11.4 增加以下变量或函数用于位置环控制</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    1) 位置环PID 结构体PID_Handle_t PIDAngleHandle_M1</p><p>    2) 位置控制的结构体Position_Handle_t</p><p>    3) 位置角度误差Position_GetErrorAngle</p><p>    4) 位置环速度参考输出计算Position_CalcSpeedReferrence</p><p>    5) 位置环力矩参考输出计算Position_CalcTorqueReferrence</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.11.5 增加位置控制程序</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在mc_task.c的中频任务函数TSK_MediumFrequencyTaskM1中增加位置环差值数据计算，根据差值计算，当差值在阈值之上的话进行速度控制，在RUN下调用下面函数：</p><div class=\"highlight\"><pre><code class=\"language-text\">/* Get error position/Angle, unit in rad*10000 */ \nPosition_GetErrorAngle(&amp;Abs_Encoder_M1,Target_Angle); \n…… \nPosition_CalcSpeedReferrence()</code></pre></div><p>如果差值缩小到一定范围内，则进行力矩控制，在函数FOC_CalcCurrRef中进行调用。</p><div class=\"highlight\"><pre><code class=\"language-text\">__weak void FOC_CalcCurrRef(uint8_t bMotor) \n{ \n       if(FOCVars[bMotor].bDriveInput == INTERNAL) \n       { \n       #if defined(POSITION_CONTROL) \n             /* If in position torque mode, Iqref come from Angle PID*/ \n             if(Position_M1.Mode_Flag == P_TORQUE_MODE) \n             { \n                   FOCVars[bMotor].hTeref = Position_CalcTorqueReferrence(); \n                   FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref; \n             } \n             else \n       #endif \n             { \n                   FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]); \n                   FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref; \n              } \n        } \n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3.11.6 实际运行效果</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>位置偏差较大时，电机加速到最大速度，偏差小时将进入力矩控制模式，直到目标位置，在目标位置直接力矩锁定。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>设定位置角度值在0&lt;- -&gt;15708000（电机转动250圈） 实际速度与参考速度曲线。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-37095eb6c3b56869a662fd8361d940ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb\" width=\"832\" data-original=\"https://pic2.zhimg.com/v2-37095eb6c3b56869a662fd8361d940ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;832&#39; height=&#39;481&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"481\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"832\" data-original=\"https://pic2.zhimg.com/v2-37095eb6c3b56869a662fd8361d940ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-37095eb6c3b56869a662fd8361d940ed_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 3.12 测试说明</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>spi_pwm_encoder.h中提供了测试宏定义</p><p>A，无传感运行，用于测试绝对值编码器，如下宏定义</p><div class=\"highlight\"><pre><code class=\"language-text\">//#define ABS_ENCODER_MODE \n//#define POSITION_CONTROL \n#define ENCODER_SPI_MODE \n//#define ENCODER_PWM_MODE</code></pre></div><p>B，绝对值编码器，SPI输出模式的闭环运行</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ABS_ENCODER_MODE \n//#define POSITION_CONTROL \n#define ENCODER_SPI_MODE \n//#define ENCODER_PWM_MODE</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p> C，加入位置环后的三环运行</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ABS_ENCODER_MODE \n#define POSITION_CONTROL \n#define ENCODER_SPI_MODE \n//#define ENCODER_PWM_MODE</code></pre></div><p><b>4.  编码器PWM输出模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>一般编码器的PWM都是以固定频率输出，占空比代表角度，Duty的范围为0—T，也就是0—360度（机械角度）；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1003efed1bf87fe911045b4230eaa5dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb\" width=\"484\" data-original=\"https://pic2.zhimg.com/v2-1003efed1bf87fe911045b4230eaa5dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;484&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"484\" data-original=\"https://pic2.zhimg.com/v2-1003efed1bf87fe911045b4230eaa5dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1003efed1bf87fe911045b4230eaa5dd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 4.1 CubeMx配置</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>编码器的PWM输出可以直接使用ST芯片的TIMER PWM捕获功能获取PWM波的频率（用于计算电角度）和占空比（机械角度信息）；这边我们使用TIM2；打开MC workbench生成的*.ioc文件，修改TIM2为PWM捕获输入：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-24955c78391f786a718691718762006e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"624\" data-original=\"https://pic3.zhimg.com/v2-24955c78391f786a718691718762006e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;624&#39; height=&#39;334&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"624\" data-original=\"https://pic3.zhimg.com/v2-24955c78391f786a718691718762006e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-24955c78391f786a718691718762006e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>将TIM2捕获输入通道1配置为Rising Edge，通道2为间接捕获输入（实际是TIM2_CH1的内部输出），配置为Falling Edge，同时我们看到PA15（TIM2_CH1）已经被配置；通道1为频率捕获，通道2为占空比捕获；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9326f8dcb0b73fbdf3ec90e732af1f8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https://pic2.zhimg.com/v2-9326f8dcb0b73fbdf3ec90e732af1f8d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;632&#39; height=&#39;310&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"632\" data-original=\"https://pic2.zhimg.com/v2-9326f8dcb0b73fbdf3ec90e732af1f8d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9326f8dcb0b73fbdf3ec90e732af1f8d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 使能TIM2中断</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4b818c051b202c3d0ebe6933e4d035d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-4b818c051b202c3d0ebe6933e4d035d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;284&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic1.zhimg.com/v2-4b818c051b202c3d0ebe6933e4d035d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4b818c051b202c3d0ebe6933e4d035d4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 编辑中断优先级</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>因为TIM2中断不能妨碍电机运行，因此需要修改中断优先级为抢占等级为3</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e9c58e21ddcce2cdf94ba59ab58eea91_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic2.zhimg.com/v2-e9c58e21ddcce2cdf94ba59ab58eea91_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic2.zhimg.com/v2-e9c58e21ddcce2cdf94ba59ab58eea91_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e9c58e21ddcce2cdf94ba59ab58eea91_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4.2 重新生成代码</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8b29b8ea384f3cd19d9606c3fe231fb0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-8b29b8ea384f3cd19d9606c3fe231fb0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;900&#39; height=&#39;474&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-8b29b8ea384f3cd19d9606c3fe231fb0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8b29b8ea384f3cd19d9606c3fe231fb0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p> 在生成代码的main.c中增加通道使能代码，TIM2（32-bit）工作在72MHz，如果默认编码器1K PWM，CCR1计数数值为 72MHz/1KHz = 72000</p><div class=\"highlight\"><pre><code class=\"language-text\">/* In PWM mode, use Tim2 PWM capture mode to get frequency and duty cycle, \n* CCR1 value is the frequency of PWM, can be used as calibration value. \n* CCR2 value is for digital angle \n* In this demo, TIM2 work under 72MHz \n*/ \nHAL_TIM_Base_Start(&amp;htim2); \nHAL_TIM_IC_Start(&amp;htim2,TIM_CHANNEL_1); \nHAL_TIM_IC_Start_IT(&amp;htim2,TIM_CHANNEL_2);</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4.3 编写电角度转换读取代码 </b></p><div class=\"highlight\"><pre><code class=\"language-text\">void PWM_Encoder_EIangle(uint32_t data) \n{ \n      PWM_Angle_Digital = data; \n      if(PWM_Angle_Digital &gt; ENCODER_PWM_MAX) \n             PWM_Angle_Digital = ENCODER_PWM_MAX; \n      PWM_EIAngle = (int16_t)((65536*PWM_Angle_Digital*POLES)/ENCODER_PWM_MAX)%65536; \n}</code></pre></div><p>在TIM2的中断服务中读取CCR2寄存器内容，为防止误动作，这边CCR1数据标定为ENCODER_PWM_MAX，可以仿真条件下读取这个数据，如果编码器准确1KHz PWM输出这个数据为72000，如果为其他数据可以进行对应修改；</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ENCODER_PWM_MAX 67039 //72000 \n\nvoid TIM2_IRQHandler(void) \n{ \n    PWM_Encoder_EIangle(TIM2-&gt;CCR2); \n    Encoder_EIAngle = PWM_EIAngle; \n    Encoder_MecAngle = (int16_t)(PWM_Angle_Digital*65536/ENCODER_PWM_MAX); \n} </code></pre></div><p><b>4.4 判断绝对位置编码器角度准确性</b></p><p>    同3.7所描述</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4.5 绝对位置角度闭环程序修改</b></p><p>    同3.8，3.9，3.10的描述</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4.6使用绝对编码器做位置环</b></p><p>   参照 3.11 中的具体操作</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "自动化", 
                    "tagLink": "https://api.zhihu.com/topics/19574232"
                }, 
                {
                    "tag": "自动控制", 
                    "tagLink": "https://api.zhihu.com/topics/19589888"
                }, 
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88400316", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "想学NB-IoT连云吗？简单易学的那种", 
            "content": "<p>物联网时代，万物互联已经从手机电脑跳跃到万万物物，其中包括一些高速率业务（如视频类业务等），以及一些低速率业务（如抄表类业务等）。据不完全统计，低速率业务占据IoT业务的67%以上，且低速率业务还没有良好的蜂窝技术来提供支持，这也意味着低速率广域网技术拥有巨大的需求空间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>IoT通信技术随着IoT市场的蓬勃发展也日趋成熟，而广域网通信技术的发展尤其突出。广域网通信技术按频谱是否授权可以分成以下两种类型：一是<b>非授权的Lora和Sigfox</b>等；另一个便是频谱授权的<b>窄带物联网</b>（NB-IoT，Narrow Band－Internet of Things）技术，由3GPP制定的蜂窝通信技术，聚焦于低功耗广覆盖（LPWAN）的物联网市场。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>频谱授权就好似有了“官家身份”，因而具备良好的通信网络支撑。NB-IOT技术从2013年初由华为携手达沃丰提出窄带技术NB-M2M开始，经历2016年6月正式商用，再到今年7月技术被正式纳入5G候选技术集合，将成为未来5G物联网主流技术，短短6年间，NB-IoT技术从被提出到不断成熟，逐步得到市场的泛识化认可。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>NB-IOT的技术特点</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>众所周知，NB-IOT有四大技术优势：<b>大连接、广覆盖、低功耗、低成本</b>。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6aa4dc5880c645dbbbaa22da7925d922_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-6aa4dc5880c645dbbbaa22da7925d922_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;611&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-6aa4dc5880c645dbbbaa22da7925d922_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6aa4dc5880c645dbbbaa22da7925d922_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>接地气的说法就是：<b>吃的少，睡的多，能干活，不讲究。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>NB-IOT的应用场景</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>NB-IoT所支持的应用场景通常具有低速率、高时延、低频次、弱移动性的属性，正应和了我们生活的方方面面：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d65468bfb041d5883188fff89bc33d12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1073\" data-original=\"https://pic3.zhimg.com/v2-d65468bfb041d5883188fff89bc33d12_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1073&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1073\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1073\" data-original=\"https://pic3.zhimg.com/v2-d65468bfb041d5883188fff89bc33d12_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d65468bfb041d5883188fff89bc33d12_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>①<b>智慧城市</b>： 智慧交通，交通信息、应急调度、智能停车，水、电、气、热、垃圾箱、路灯等基础设施的智能管理；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>② <b>智慧工业 &amp; 农业：</b>水、空气、土壤等实时监测，农业灌溉控制，气体探测、机器报警等；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>③<b>物品追踪：</b>物流资源的跟踪与监测控制；资产追踪，个人/宠物追踪等；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>④<b>智慧生活：</b>家居安防等设备的智能化管理与控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>IOT界，工程师连云的能力是刚需</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>大家都知道WiFi（能上网），蓝牙（能传图连接鼠标耳机），ZigBee（组网才能传输数据）。我们的生活中还有那么多Things等着上云，而擅长跑、能遁地、为传输小量数据而生的NB-IOT将为智慧城市贡献多多。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9c5715d02076ed0d1f6043a759952c46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9c5715d02076ed0d1f6043a759952c46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;611&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"611\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9c5715d02076ed0d1f6043a759952c46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9c5715d02076ed0d1f6043a759952c46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>今年４月，电堂平台上线了<u><b><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D61d5aeaf319f42c2a0cf8b210e1d16e0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《基于STM32 节点和阿里云IoT平台的物联网应用开发》</a></b></u>课程（点击蓝字进入课程），讲解了Paho MQTT协议栈，及如何通过Wi-Fi模组连云，今天将给课程带来新番，<b><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/videocourse%3Fid%3D2b4719e971534e09b1c8158c74232b0b\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">教大家如何通过NB-IOT连接阿里云物联网平台</a></b>。（点击下方链接可直接进入课程）</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/videocourse%3Fid%3D2b4719e971534e09b1c8158c74232b0b\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p class=\"ztext-empty-paragraph\"><br/></p><p>本节课程由移远通信的资深工程师讲解，内容涵盖：</p><ul><li>NB-IOT技术介绍</li><li>整体框架结构</li><li>硬件连接注意事项</li><li>DEMO运行效果</li><li>在阿里云物联网平台创建并配置产品</li><li>在云平台创建设备</li><li>常见问题及解决方法</li><li>DEMO运行过程实物演示</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>向“<b>AI电堂”公众号</b>后台回复“<b>NB-IOT</b>”，可获取课程相关<b>资料</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>双11套板价格大放送</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>双十一即将来临又到了买买买的时节值此“剁手”之际<b>电堂携手合作伙伴ST、庆科、移远通信及艾思科技发福利</b></p><p>给工程师的荷包省钱啦！</p><p><b>套件双十一团购价：269元</b></p><p><b>活动时间：即日起至11月25日</b></p><p><b>数量：45套，每人仅限团购一套</b></p><p><b>活动结束后价格将恢复：389元</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-98efec5b177aae71ae2c7af60b503da4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"763\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-98efec5b177aae71ae2c7af60b503da4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;763&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"763\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-98efec5b177aae71ae2c7af60b503da4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-98efec5b177aae71ae2c7af60b503da4_b.jpg\"/></figure><p>① <b>主控底板</b>是来自ST的Nucleo-L4R5ZI，它搭载着STM32的最新系列L4R5 100引脚微控制器，可通过Arduino接口外接其他功能扩展板；板载STLINK-V2调试烧写器，支持 USB 供电；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>② 搭载多种环境传感器（温湿度、压力）和运动传感器（加速度、陀螺仪）的<b>传感器扩展板</b>（X-NUCLEO-IKS01A3 Sensor）具备Arduino接口 ； </p><p class=\"ztext-empty-paragraph\"><br/></p><p>③ 搭载Wifi模块和天线的<b>WIFI连接扩展板</b>，具备Arduino接口。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>④<b>NB-IOT连接扩展板</b>：BC28-TE-B 开发板可单独使用，也可配合 STM32 Nucleo-64位系列开发板调试开发基于 NB-IoT 的物联网应用，通过 NB-IoT 无线电通信协议（3GPP Release 14），与移动网络运营商的基础设备之间建立通信。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>团购咨询事宜，请联系电堂小姐姐</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "物联网", 
                    "tagLink": "https://api.zhihu.com/topics/19551271"
                }, 
                {
                    "tag": "NB-IoT", 
                    "tagLink": "https://api.zhihu.com/topics/20085926"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/88309827", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【百问百答】ST 电机控制实战问答合辑 | 连载之一", 
            "content": "<p>点击下方链接可以直接观看<b>电机直播</b>及<b>直播答疑</b></p><a href=\"https://link.zhihu.com/?target=https%3A//wx18257eb0e8c82435.h5.xiaoe-tech.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmM5NmViMzFjMGRlX0w3bUNZdVE1IiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-152f35bfeb192d7bd0619f9da6dee7ce_ipico.jpg\" data-image-width=\"2480\" data-image-height=\"2188\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂</a><a href=\"https://link.zhihu.com/?target=https%3A//wx18257eb0e8c82435.h5.xiaoe-tech.com/content_page/eyJ0eXBlIjoiMiIsInJlc291cmNlX3R5cGUiOjQsInJlc291cmNlX2lkIjoibF81YmRmZWM1ZTgxMWNmX05yNDdnYWppIiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIiwicHJvZHVjdF9pZCI6InBfNWI4ZTA0OWJmMzRmMV8xVXNhc1dwSyJ9\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-152f35bfeb192d7bd0619f9da6dee7ce_ipico.jpg\" data-image-width=\"2480\" data-image-height=\"2188\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂</a><p class=\"ztext-empty-paragraph\"><br/></p><p>本次实战问答只讨论<b>同步电机</b>，不对步进电机做特别的讨论，希望有助于大家进行电机开发或者是电机应用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c6fefe31207b1b06556e81737a331d0e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"248\" data-rawheight=\"220\" class=\"content_image\" width=\"248\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;248&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"248\" data-rawheight=\"220\" class=\"content_image lazy\" width=\"248\" data-actualsrc=\"https://pic3.zhimg.com/v2-c6fefe31207b1b06556e81737a331d0e_b.jpg\"/></figure><p><b>Q1</b>：STM32关于FOC控制或者在永磁同步电机上有哪些可用的库和工具，有没有关于弱磁</p><p>        MTPV等算法的文档或者学习工具，或者是开发套件？</p><p><b>A1：</b>今年ST推出FOCSDK 5.2版本，可以在ST官网上直接下载这个库。关于算法，请参考培</p><p>        训文档（<a href=\"https://link.zhihu.com/?target=http%3A//www.stmcu.com.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">www.stmcu.com.cn</a> “设计资源”中查找），原理请看UM1052。请大家充分</p><p>        利用<a href=\"https://link.zhihu.com/?target=http%3A//www.stmcu.com.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">stmcu.com.cn</a>，可自助解决MCU及相关应用难点，网站上的资源包括培训课件，</p><p>        实战经验等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q2</b>：在电机控制中，F407系列MCU有没有方法可以在线修改参数？不用每次都编译，不然调     </p><p>        PI很麻烦。</p><p><b>A2：</b>在线修改可以使用RAM方式修改，如果您用的是自己程序，可以考虑仿真器或串口方式</p><p>        修改定义好的变量数据，当调试好参数后回写到Flash中固化参数；如果使用 </p><p>        Workbench，可以在workbench调试界面上上修改相应参数，同样这个是修改RAM，</p><p>        调试好后再回写入Flash中。这样就不需要每次都进行编译，浪费很多时间在编译上面。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q3</b>：伺服电机的分类，以及有主流的控制方法及使用方法？</p><p><b>A3：</b>伺服电机大体可分为直流伺服电机和交流伺服电机。控制方法如果采用矢量控制，当前</p><p>        主要有DTC控制和FOC控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q4：</b>自主搭建电机驱动，软硬件如何设置？F030系列如何做FOC？</p><p><b>A4：</b>实际上您自主搭建的电机驱动的硬件，可以与MCSDK workbench匹配使用，注意参数</p><p>        配置。Workbench就是为大家提供配置的便利，包括板子参数、电机参数、控制策略等</p><p>        等，都可以做直接配置。F030是支持FOC的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q5：</b>电机的参数（电感，电阻）对位置估算的结果影响多大？为什么我用错误的电感和电阻</p><p>        值电机也能转，而且位置输出没发现异常？</p><p><b>A5：</b>电机的参数对位置估算的结果是有影响的，即会影响无传感观测器参数，也会影响电流</p><p>        环PID的设定，还很可能影响电流稳定度等；当然在观测技术是上有一定阈值调整。有些</p><p>        参数稍微调整也可以运行，但是最好能够使用正确的电感电阻值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q6：</b>永磁同步和BLDC应用领域的区别？BLDC如何正确的检测换向点？BLDC与PMSM的转</p><p>         矩脉动产生的原因分别是什么？如何减小这一现象对精度和稳定性的影响呢？如何计算</p><p>         BLDC与PMSM的效率差别呢？</p><p><b>A6：</b>永磁同步和BLDC可以看成是同一种电机，只是叫法不同而已。如果BLDC矢量控制无过</p><p>        零点检测，六步方波控制方法需要检测过零点。如果是FOC，可以利用观测器的方式来</p><p>        观测出你现在的一个转阻位置。</p><p>        这两个电机实际相同，只是电机工艺做法差异所导致的，转矩脉动和控制方法有关。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q7：</b>开环运行到闭环运行需要哪些步骤，有哪些注意事项？</p><p><b>A7：</b>大致步骤是定位，开环，闭环；需要注意设定开环速度以及驱动电流，还有设定最小切</p><p>        入速度，一般在额定速度的10%以上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q8：</b>这个电机库支持高频注入算法吗？效果如何？</p><p><b>A8：</b>目前FOC 5.0不支持高频注入算法，以前的4.3版本是支持的。后续这个算法会加进来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q9：</b>如何使用开源或免费的编译器进行相关设计？有无相关例程？</p><p><b>A9：</b>参考培训文档，可以在<a href=\"https://link.zhihu.com/?target=http%3A//www.stmcu.com.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">stmcu.com.cn</span><span class=\"invisible\"></span></a>上下载。参考例程在Cube库和标</p><p>        准库里都有。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q10：</b>凸极BLDC想要从任意位置平稳启动无反转，有什么好的策略可以使用？高频注入利用</p><p>          凸极性，对于隐极BLDC，有没有好的评估转子位置的方案，希望启动无抖动无反转噪 </p><p>          音低。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>A10：</b>这个问题涉及当前最热门且研究最多的无传感的部分。无传感策略，ST有两种方式：一</p><p>          是观测器的方式，由开环转闭环，启动时会有一些抖动，或者是一些反转，因为要做一</p><p>          次定位；如果无反转，是在静止的时候，抓到转子的位置，采用无传感方式，ST采用高</p><p>          频注入加观测器方式来实现。高频注入，目前市场有非常多开发好的算法。各有特长，</p><p>          好的算法要靠时间或者是精力来实现，基本可以实现无抖动，无反转。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q11：</b>5.0的库相对于之前的库新增哪些特性？二次开发需要考虑哪些设想？</p><p><b>A11：</b>5.0库是针对前一代有结构上的变化，ST的开发力度历来是非常大的，如果客户二次开</p><p>          发，可以在它的库基础上，非常便利地实现自己的一些想法，可以进行一些库的修改代</p><p>          码。也可以直接用接口代码，调用API的方式，针对简单应用足够了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q12：</b>BLDC最低电压能做到几伏，低电压的转速可以做的很高吗？BLDC用在吸尘器上是要做</p><p>          恒功率还是其他？</p><p><b>A12：</b>BLDC有些可以低到5V，当然最低电压需要和电机厂商联系，转速部分与电机本体相</p><p>          关；恒转速和恒功率都可以实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q13：</b>请问交轴直轴怎么理解，同样是电流产生的力矩和磁通怎么实现分别控制的？被控量只</p><p>          有一个电流，是怎么实现力矩，磁通解耦合控制的？</p><p><b>A13：</b>直轴可理解为永磁体磁场方向。交轴垂直于永磁体磁场方向的轴，即垂直于直轴，它是</p><p>          一个动轴。直轴电流是用于叠合磁场，交轴电流相当于一个旋转量，当旋转量持续为90</p><p>          度时，这时候力是最大的。电流解耦合后有两个量，id，iq，分别控制这两个量</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q14：</b>ST是否有方波切正弦的启动方案，可直接重载启动？</p><p><b>A14：</b>已有客户在ST的电机库上实现。方波切正弦，切起来应该问题不是很大，这是一个通用</p><p>          方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q15：</b>在FOC控制方面，STM32有哪些库与工具让初学者快速入门，STM32对于浮点运算怎</p><p>          么处理的？</p><p><b>A15：</b>F0、F1产品系列，即M0、M3核上面没有这种浮点处理单元。F3、F4这类高端MCU的</p><p>          平台上，有浮点算法。所以可以直接在F3、F4等高端MCU上直接使用浮点运算。在电</p><p>          机库里你会发现，除高频注入以外的基础控制算法，都是以定点的方式实现。所以可以</p><p>          兼容从F0到F7、H7等产品系列。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q16：</b>电机电流如何判定是否堵转？</p><p><b>A16：</b>最直接的方法就是电机没有速度了，或者低速震荡、并且电流很大的情况下，就判断为</p><p>          堵转。在ST的FOC电机库里，有两种方式来提供这个判断：一是所谓的速度（时速），</p><p>          没有任何速度的时候，就判断为堵转；二是在无传感方面，如果正弦震荡，可检查是否</p><p>          有反电动势，不转的时候，反电动势就没有了，这样可以从另外一个角度检测堵转。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q17：</b>加位置环应该怎么来添加？项目开发需要三个环同时工作，位置环电流环和速度环，有</p><p>          编码器，定位刚性能保证吗？</p><p><b>A17：</b>通常在做过程震荡，一般是两个环路比较好控制，比如说的力矩环+速度环，或者力矩</p><p>          环+位置环，这种方式比较好。如果三环在一起，会有很多变量是纠结在一起，不方便</p><p>          开发。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q18：</b>相对于传统DSP、FPGA等手段，STM32在控制电机方面的优势是什么？</p><p><b>A18：</b>从字面上理解，传统的DSP就是数字信号处理，FPGA是现场可编程门阵列。FPGA非常</p><p>          好，基本可实现所有的数字控制，但其开发有一定门槛，在电路设计不够好时，可能会</p><p>          存在一些风险。应该说，有些SOC是在FPGA的仿真验证之后，才重新设计实现的。传</p><p>          统DSP的设计初衷是为了数字运算，具有较快的数字运算或数据处理性能。当然，现在</p><p>          DSP和MCU实际上有些相近，没有特别分明的界限，它既可做数据处理也可实现一些</p><p>          控制功能。但性价比是客户考量点，有赖于客户的评估。当前ST的部分芯片性能已经非        </p><p>          常高了，比如低端伺服已经不用FPGA，换成高性能ST芯片；随着芯片工艺提高，干扰</p><p>          性对客户硬件处理要求也提高。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q19：</b>BLDC启动过程怎么调节？</p><p><b>A19：</b>无传感的是开环启动，定位后V/F启动，电流闭环，速度开环整个一个过程。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q20：</b>弱磁原理是什么？</p><p><b>A20：</b>简单说就是Id需要被控制，通常情况是ID等于0的控制。现在要作为一个ID控制，进行</p><p>          一些弱磁的配比，可根据电压方程来做。请访问官网<a href=\"https://link.zhihu.com/?target=http%3A//stmcu.com.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">stmcu.com.cn</span><span class=\"invisible\"></span></a>上的培训文档，有</p><p>          各种公式可以算出来，较为详细。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q21：</b>STM32应用于电机控制器，除了开发流程更快一些之外，还有其他的优势吗？成本？</p><p>          维护？二次开发？</p><p><b>A21：</b>STM32芯片性价比非常高，资源非常丰富，产品的生态系统非常强大。用户可以在很</p><p>          多途径上得到ST的特别多的生态系统支持，不仅仅是芯片文档，还有多种路径的技术支</p><p>          持帮助用户解决问题。STM32生态系统非常到位，这一点是众所周知的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q22：</b>有霍尔无刷电机换相时脉动，导致噪音，如何有效去除？STM32单片机6路PWM和</p><p>           IR2136连接，中间需要加小电阻吗？</p><p><b>A22：</b>如果MCU直接接驱动桥，需要加一个小电阻，一是防止干扰，二来保护芯片。如果采</p><p>          用方波控制，即有传感的方式，需要进行电流补偿；如果是FOC，需要做电角度修正，</p><p>          因为FOC在霍尔信号这个边缘要做一次同步，同步的准确度与否或者是这个突然同步的</p><p>          过程中会产生脉动，这是要做一定的补偿的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q23：</b>我发现很多书上关于电磁转矩的解释不合理，能基于原理实际分析一下电磁转矩产生的</p><p>          原理吗？</p><p><b>A23：</b>实际就是内外磁场（定子、转子）的叉乘带来电磁转矩。当两路的磁场方向不一样时，</p><p>          之间的有一定夹角，就会产生一个转矩。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q24：</b>请讲解弱磁控制、前馈控制的代码函数讲解和应用，不同内核芯片的代码移植？</p><p><b>A24：</b>电机算法实际上独立于芯片而存在的，如果你熟悉一种算法，可以用到很多的MCU或</p><p>          者芯片上去。弱磁控制实际上根据电压方程来做的；前馈控制是两轴之间，电可转磁，</p><p>          磁可以转电，两者之间的耦合性带来了前馈控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Q25：</b>如何解决电机对电路的干扰问题？</p><p><b>A25：</b>电机的硬件电路设计有讲究；转速快速的话可以考虑加入PID中的微分量，同时注意反</p><p>          充电保护。电机控制实际上是软硬件的结合。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/index\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }, 
                {
                    "tag": "电动机", 
                    "tagLink": "https://api.zhihu.com/topics/19633825"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87696495", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "基于Linkkit C-SDK的MQTT直连(用于资源丰富设备)-Linkkit C-SDK", 
            "content": "<p>Linkkit SDK是阿里云IoT提供给设备厂商用于快速将设备接入阿里云IoT平台的功能代码集。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ef4b7a25986cc77fd135fee77d5d4102_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-ef4b7a25986cc77fd135fee77d5d4102_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;601&#39; height=&#39;337&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"337\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"601\" data-original=\"https://pic3.zhimg.com/v2-ef4b7a25986cc77fd135fee77d5d4102_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ef4b7a25986cc77fd135fee77d5d4102_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Linkkit SDK的总体功能是方便节点设备安全快速地连接到阿里云IoT平台，细分下来有如下具体<b>功能</b>：</p><p><b>基础功能</b>：设备连云：支持多种协议连接阿里云IoT平台，比如MQTT、CoAP、HTTP/S、</p><p>                 HTTP2.</p><p><b>设备认证</b>：多种身份认证方式，如一机一密，一型一密。</p><p><b>数据通信</b>：SDK提供上行、下行数据接口，数据加密功能。</p><p><b>高级功能</b>：物模型：处理属性上报、设置；服务调用、事件上报。</p><p><b>设备OTA</b>：设备厂商通过阿里云IoT平台推送固件给设备，设备SDK负责接收接收固件并调用</p><p>                  设备升级函数实现固件的烧写。</p><p><b>时间同步</b>：SDK可从云端获取实时时间，用于设备的定时任务。</p><p><b> WiFi配网</b>：SDK提供多种配网方式，比如一键配网、手机热点配网、零配、路由器配网。</p><p><b>Linkkit C-SDK架构框图</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-86412e137cd83a06fbf06aafed64e80c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1313\" data-rawheight=\"591\" class=\"origin_image zh-lightbox-thumb\" width=\"1313\" data-original=\"https://pic1.zhimg.com/v2-86412e137cd83a06fbf06aafed64e80c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1313&#39; height=&#39;591&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1313\" data-rawheight=\"591\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1313\" data-original=\"https://pic1.zhimg.com/v2-86412e137cd83a06fbf06aafed64e80c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-86412e137cd83a06fbf06aafed64e80c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> Linkkit SDK源文件组织</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9b4b5e80486f603d32bef8b35d880eaa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https://pic3.zhimg.com/v2-9b4b5e80486f603d32bef8b35d880eaa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1546&#39; height=&#39;648&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1546\" data-original=\"https://pic3.zhimg.com/v2-9b4b5e80486f603d32bef8b35d880eaa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9b4b5e80486f603d32bef8b35d880eaa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 设备端C-SDK的分层</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6accd343b1bb6e9dd7d92b4627c169d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"154\" class=\"content_image\" width=\"302\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;302&#39; height=&#39;154&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"154\" class=\"content_image lazy\" width=\"302\" data-actualsrc=\"https://pic1.zhimg.com/v2-6accd343b1bb6e9dd7d92b4627c169d4_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c232f8dfd7786d6c6be250a5b454a1be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"227\" class=\"content_image\" width=\"335\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;335&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"335\" data-rawheight=\"227\" class=\"content_image lazy\" width=\"335\" data-actualsrc=\"https://pic3.zhimg.com/v2-c232f8dfd7786d6c6be250a5b454a1be_b.jpg\"/></figure><p><b> 【设备信息】相关HAL</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0839de4f426e0055cf644c204e7140b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"663\" class=\"origin_image zh-lightbox-thumb\" width=\"1037\" data-original=\"https://pic4.zhimg.com/v2-0839de4f426e0055cf644c204e7140b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1037&#39; height=&#39;663&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"663\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1037\" data-original=\"https://pic4.zhimg.com/v2-0839de4f426e0055cf644c204e7140b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0839de4f426e0055cf644c204e7140b3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 【设备信息】相关HAL的实现</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bf4c8313591213dc97e216e87d2eb914_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1337\" data-rawheight=\"687\" class=\"origin_image zh-lightbox-thumb\" width=\"1337\" data-original=\"https://pic1.zhimg.com/v2-bf4c8313591213dc97e216e87d2eb914_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1337&#39; height=&#39;687&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1337\" data-rawheight=\"687\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1337\" data-original=\"https://pic1.zhimg.com/v2-bf4c8313591213dc97e216e87d2eb914_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bf4c8313591213dc97e216e87d2eb914_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 【基础功能】相关HAL</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8b162d4d4054719918bc58cb8ef7705a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"1071\" data-original=\"https://pic3.zhimg.com/v2-8b162d4d4054719918bc58cb8ef7705a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1071&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1071\" data-original=\"https://pic3.zhimg.com/v2-8b162d4d4054719918bc58cb8ef7705a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8b162d4d4054719918bc58cb8ef7705a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【基础功能】相关HAL的实现</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0bfa28bb53beb7e0f6e5f8f7b06f518f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1306\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb\" width=\"1306\" data-original=\"https://pic4.zhimg.com/v2-0bfa28bb53beb7e0f6e5f8f7b06f518f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1306&#39; height=&#39;539&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1306\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1306\" data-original=\"https://pic4.zhimg.com/v2-0bfa28bb53beb7e0f6e5f8f7b06f518f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0bfa28bb53beb7e0f6e5f8f7b06f518f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 【多线程功能】相关HAL的实现</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-95b14a61942d9279e38d46fc0d3a47d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1252\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"1252\" data-original=\"https://pic1.zhimg.com/v2-95b14a61942d9279e38d46fc0d3a47d0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1252&#39; height=&#39;589&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1252\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1252\" data-original=\"https://pic1.zhimg.com/v2-95b14a61942d9279e38d46fc0d3a47d0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-95b14a61942d9279e38d46fc0d3a47d0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 【MQTT上云】相关HAL</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a677698652518a00c208710ccc5f6960_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1190\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb\" width=\"1190\" data-original=\"https://pic1.zhimg.com/v2-a677698652518a00c208710ccc5f6960_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1190&#39; height=&#39;607&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1190\" data-rawheight=\"607\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1190\" data-original=\"https://pic1.zhimg.com/v2-a677698652518a00c208710ccc5f6960_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a677698652518a00c208710ccc5f6960_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【MQTT通道】相关HAL的实现</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-08a18574c4619c59ccbd44bc9741b54d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1332\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"1332\" data-original=\"https://pic2.zhimg.com/v2-08a18574c4619c59ccbd44bc9741b54d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1332&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1332\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1332\" data-original=\"https://pic2.zhimg.com/v2-08a18574c4619c59ccbd44bc9741b54d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-08a18574c4619c59ccbd44bc9741b54d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 网络接口文件的适配</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-855cdbb1903fad2b909332f6e64d8221_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-855cdbb1903fad2b909332f6e64d8221_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;596&#39; height=&#39;559&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"596\" data-original=\"https://pic2.zhimg.com/v2-855cdbb1903fad2b909332f6e64d8221_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-855cdbb1903fad2b909332f6e64d8221_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-858d7279c04aa56d4ee69e1827828b18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"598\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb\" width=\"598\" data-original=\"https://pic1.zhimg.com/v2-858d7279c04aa56d4ee69e1827828b18_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;598&#39; height=&#39;653&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"598\" data-rawheight=\"653\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"598\" data-original=\"https://pic1.zhimg.com/v2-858d7279c04aa56d4ee69e1827828b18_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-858d7279c04aa56d4ee69e1827828b18_b.jpg\"/></figure><p><b>C-SDK的适配和调用</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6148495b637798c6f69853c2dc585221_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb\" width=\"668\" data-original=\"https://pic2.zhimg.com/v2-6148495b637798c6f69853c2dc585221_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;668&#39; height=&#39;344&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"344\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"668\" data-original=\"https://pic2.zhimg.com/v2-6148495b637798c6f69853c2dc585221_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6148495b637798c6f69853c2dc585221_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-99792238610b7c42e6590829298ff774_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic1.zhimg.com/v2-99792238610b7c42e6590829298ff774_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;543&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic1.zhimg.com/v2-99792238610b7c42e6590829298ff774_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-99792238610b7c42e6590829298ff774_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【基础】相关API</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-809c124a910413b76d0538254cfcf9b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"638\" class=\"origin_image zh-lightbox-thumb\" width=\"1488\" data-original=\"https://pic2.zhimg.com/v2-809c124a910413b76d0538254cfcf9b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1488&#39; height=&#39;638&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"638\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1488\" data-original=\"https://pic2.zhimg.com/v2-809c124a910413b76d0538254cfcf9b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-809c124a910413b76d0538254cfcf9b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 【MQTT】相关API</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ab0c613d78367e8077b3b828fb4634ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1324\" data-rawheight=\"609\" class=\"origin_image zh-lightbox-thumb\" width=\"1324\" data-original=\"https://pic3.zhimg.com/v2-ab0c613d78367e8077b3b828fb4634ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1324&#39; height=&#39;609&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1324\" data-rawheight=\"609\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1324\" data-original=\"https://pic3.zhimg.com/v2-ab0c613d78367e8077b3b828fb4634ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ab0c613d78367e8077b3b828fb4634ee_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-877d230d123c31502ecea11a102cc25a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1472\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"1472\" data-original=\"https://pic3.zhimg.com/v2-877d230d123c31502ecea11a102cc25a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1472&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1472\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1472\" data-original=\"https://pic3.zhimg.com/v2-877d230d123c31502ecea11a102cc25a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-877d230d123c31502ecea11a102cc25a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "SDK", 
                    "tagLink": "https://api.zhihu.com/topics/19552526"
                }, 
                {
                    "tag": "MQTT", 
                    "tagLink": "https://api.zhihu.com/topics/19804946"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87256894", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 4, 
            "title": "【话说定时器系列】之七：STM32定时器比较输出话题", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们知道，STM32定时器除了基本计数定时功能外，还对外拓展了输入、输出通道，从而可以实现输入捕捉、比较输出功能。<b>比较输出【Compare Output】功能：</b>定时器通过对预设的<b>比较值</b>与<b>计数器的值</b>做匹配比较之后，并依据相应的输出模式从而实现各类输出。如PWM输出、电平翻转、单脉冲输出、强制输出等。一般来讲，STM32的通用定时器和高级定时器都具有比较捕获功能，不同的定时器可能通道数量上有差异。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>或者，我们可以使用比较输出功能来感知或提示某个时间段已经过去了。这个不难理解，因为比较输出的基本特征是计数器CNT的值与比较寄存器CCR的值做比较，计数器数据变化意味着时间的流逝，<b>当计数器记到跟比较值相等或相匹配时</b>，也就表示相应时间段的过去。具体到STM32定时器，在比较输出模式下，当捕获比较单元监测到计数器CNT的值与CCR寄存器的数字匹配时，将根据相应的比较输出模式实现相应输出。比较输出功能主要靠捕捉比较单元实现，同时定时器输出单元与时基单元协同配合。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>捕捉比较单元有个重要的寄存器，捕捉比较寄存器<b>CCR，</b>它由<b>影子寄存器/预装载寄存器</b>组成。用户访问时访问预装寄存器。预装载功能可开启或关闭。由OCxPE@TIMx_CCER控制。至于什么时候需要开、什么时候需要关闭前面多次提到过。总之需要用户修改的预装数据立即生效时将预装功能关闭，希望用户修改的数据不影响当前周期的计数或波形输出时，我们就打开其预装功能。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-630be3930ff9961821ed3a51e5abe921_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-630be3930ff9961821ed3a51e5abe921_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-630be3930ff9961821ed3a51e5abe921_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-630be3930ff9961821ed3a51e5abe921_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>比较输出的大致流程以及几个术语【<b>OCxREF</b> <b>、OCx 、输出极性】</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7398f163f8be70455db3adbb600b7261_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"102\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-7398f163f8be70455db3adbb600b7261_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;102&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"102\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-7398f163f8be70455db3adbb600b7261_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7398f163f8be70455db3adbb600b7261_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当定时器的比较输出单元检测到计数器CNT的值与捕捉比较寄存器CCR的值发生匹配事件时，定时器的比较输出单元会根据比较输出模式输出相应的信号，该信号我们称之为中间参考信号，即OcxREF信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>该OCxREF源于输出模式控制器，并<b>硬件约定</b>高电平为有效信号，即有效状态所对应的信号。它经过极性选择后，再经过输出控制电路输出到管脚。当极性选择位CCxP=0时，高电平作为Ocx的有效输出信号，当CCxP=1时，低电平作为Ocx的有效输出。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>也就是说，OCXref信号只是个中间参考信号，并非最终输出信号。最终输出端<b>OCX</b>的active state【有效状态】/inactive state【无效状态】所对应的电平取决于极性选择控制位CCxP/CCxNP。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>比方我们以通道1为例：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>任一时刻计数器的值与CCR的比较结果，结合相应的比较输出模式决定了中间参考信号OC1REF的电平，而<b>最终输出端OC1的输出电平取决于极性选择CC1P位的配置</b>。即对于非互补输出时 Ocx =OCxREF + 极性  【+ 表示结合的意思】</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，如果是<b>高级定时器的互补输出</b>，最后的输出电平除了与极性选择有关外，输出波形还跟插入的死区有关。即对于互补输出时 Ocx =OCxREF + 极性 + 死区</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>比较输出相关事件</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li> 当核心计数器的值CNT与比较寄存器CCR 的数值匹配时发生比较输出事件</li><li>  相应通道的比较输出标志位CCxIF@TIMx_SR被置位</li><li>  触发比较中断 （如果CCxIE@TIMx_DIER被置位使能）</li><li> 触发DMA请求 （CCxDE@TIMx_DIER CCDS@TIMx_CR2 使能允许）</li><li>比较输出事件也可以软件方式产生。通过操作TIMx_EGR@CCxG位来实现</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>对于这些比较输出有关的事件，我们也需做到心中有数。因为在我们的定时器应用中，往往需要基于相关事件来开展我们的应用开发。比方基于比较输出事件，做脉冲波形频率或占空比的变更、做脉冲个数的统计、做DMA请求的触发等待等等，不一而足。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>另外，对于 CCRx 影子寄存器的预装载功能可以软件开启或关闭  (OCxPE@TIMx_CCMR)也应该清楚，以便我们在定时器的应用中根据具体应用来打开或关闭CCRx寄存器的预装功能，前面有做个相关应用案例的分享。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>输出比较模式概览</b></p><p class=\"ztext-empty-paragraph\"><br/></p><b><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f512ab09fbfb2bbcd84ef3204e7dfb45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-f512ab09fbfb2bbcd84ef3204e7dfb45_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-f512ab09fbfb2bbcd84ef3204e7dfb45_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f512ab09fbfb2bbcd84ef3204e7dfb45_b.jpg\"/></figure></b><p class=\"ztext-empty-paragraph\"><br/></p><p>总的来讲，这几个比较输出模式，我们有必要对它们的各自输出特征做基本了解，它是我们做比较输出应用时的基础。比方不同比较输出模式，结合不同的计数模式，相应的输出特征是什么。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>边沿对齐PWM输出波形示例【Up Counting + PWM mode1】</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0ea32f3518e6aa1d69fb68802784e402_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb\" width=\"470\" data-original=\"https://pic3.zhimg.com/v2-0ea32f3518e6aa1d69fb68802784e402_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;470&#39; height=&#39;295&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"470\" data-original=\"https://pic3.zhimg.com/v2-0ea32f3518e6aa1d69fb68802784e402_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0ea32f3518e6aa1d69fb68802784e402_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>中心对齐PWM输出波形示例【Center aligned Mode + PWM1】</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a2a07e7272307340e3ecb6749957d809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"365\" class=\"origin_image zh-lightbox-thumb\" width=\"429\" data-original=\"https://pic2.zhimg.com/v2-a2a07e7272307340e3ecb6749957d809_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;429&#39; height=&#39;365&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"365\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"429\" data-original=\"https://pic2.zhimg.com/v2-a2a07e7272307340e3ecb6749957d809_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a2a07e7272307340e3ecb6749957d809_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>PWM输出频率的计算</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>定时器比较输出最常见的应用就是PWM输出，即脉宽调制输出。这里简单介绍下PWM输出波形参数的计算。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>以计数器向上计数、PWM1为例：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li> PWM输出方波信号，信号的频率是由TIMx的<b>计数时钟频率</b>和TIMx_ARR这个寄存器所决定。输出信号的占空比由TIMx_CRRx寄存器和TIMx_ARR这个寄存器的值所确定。</li><li>占空比=(TIMx_CRRx/（TIMx_ARR+1）)*100%</li><li>F_pwm = CK_PSC/((PSC + 1)*(ARR + 1))</li></ul><p>以中央对齐计数、PWM1为例：</p><ul><li>占空比=(TIMx_CRRx/（TIMx_ARR）)*100%</li><li>F_pwm = CK_PSC/((PSC + 1)*ARR )</li></ul><p><b>单脉冲输出模式</b>是定时器比较输出模式的一种特例。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>原理：</b>计数器启动后，在下一个更新事件来临之前的时间段内实现固定个数的脉冲输出。当下一个更新事件来临时计数器停止计数。输出的脉冲个数可以一个或几个。如果是通用计数器就是1个，如果是高级定时器，脉冲个数与RCR数值和计数模式有关。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>实现方式：</b>使用OC比较输出或PWM输出模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>计数器的启动可以通过自身软件使能启动，也可以将定时器配置在触发从模式经过触发启动。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-144ed1c56c67572ea9c5debf8d958971_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"285\" class=\"content_image\" width=\"274\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;274&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"285\" class=\"content_image lazy\" width=\"274\" data-actualsrc=\"https://pic2.zhimg.com/v2-144ed1c56c67572ea9c5debf8d958971_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高级定时器的互补输出及死区的插入：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里所说的互补输出，特指高级定时器TIM1或 TIM8通过其<b>专门的互补通道</b>输出互补信号。即每一对互补通道，共用相同的输出模式和同一通道比较寄存器CCR来输出互补信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-62412a01b83ea8641682533011f40fe2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-62412a01b83ea8641682533011f40fe2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"242\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic3.zhimg.com/v2-62412a01b83ea8641682533011f40fe2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-62412a01b83ea8641682533011f40fe2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这里要提醒的是，这对<b>互补信号</b>的每一路都可以独立做输出极性配置，在极性选择前二者一定是互补的，但经过极性选择后是否还是互补波形取决于二者的极性选择情况。如果极性选择一致，即都选择高电平做为有效信号或者都选择低电平做为有效信号，这时互补通道的<b>最终输出【OCX/OCXN】</b>就是互补信号。如果二者的极性选择不一致，最终的互补输出波形则是同相的，而不是互补信号。对于我们用户来讲，具体做怎样的极性选择，取决于实际应用需求。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们常常使用互补输出信号来驱动电机桥臂。电机的各个桥臂由功率器件组成，比如IGBT。实际应用中，每一相的上下两个桥臂不可以同时导通，否则电源会通过上下两个桥臂产生短路情况。一般来讲，每组桥臂的上下臂呈互开关驱动系，即上臂导通，下臂截止，反之亦然。但由于那些晶体管的开、关动作本身会有时延问题，而且不同晶体管开关动作的延时也有差异。鉴于此,为了避免上下臂同时导通的隐患，在输出控制信号中额外插入一个时段，保证让上下臂都呈截止状态，这个时段就是死区。<b>对于高级定时器的互补输出通道，可以通过相关寄存器配置即可实现死区控制。</b>不难看出，死区的插入是以牺牲有效输出为代价来保障电机驱动电路的安全性，所以该参数的设置除了考虑安全性外，也要考虑合理性。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b641f5fea287b0264fe5d8754e0a6b48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic1.zhimg.com/v2-b641f5fea287b0264fe5d8754e0a6b48_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;497&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"176\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"497\" data-original=\"https://pic1.zhimg.com/v2-b641f5fea287b0264fe5d8754e0a6b48_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b641f5fea287b0264fe5d8754e0a6b48_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>比较输出应用时的几个注意点</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>【实际应用或芯片软硬件移植过程中经常遇到的情形】</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 高级定时器相比通用定时器，它增加了主输出使能控制位，【MOE@timx_bdtr】,如果该位置零的话，此时OCx端没有波形输出；</p><p>2. 高级定时器相比通用定时器，它增加了刹车控制机制，BKE@timx_bdtr】,如果使能了刹车控制并触发有效刹车电平，此时OCx端没有波形输出；</p><p>3. 高级定时器相比通用定时器，使用互补输出时增加了死区插入机制，【DTG@timx_bdtr】,若插入的死区时间过大，当超过有效输出电平宽度时，会导致OCx/OCxN一端或两端没有变化的波形输出；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-68ffb9ba08459de5d1fafec04d01eea1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic2.zhimg.com/v2-68ffb9ba08459de5d1fafec04d01eea1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;475&#39; height=&#39;148&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"475\" data-original=\"https://pic2.zhimg.com/v2-68ffb9ba08459de5d1fafec04d01eea1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-68ffb9ba08459de5d1fafec04d01eea1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 高级定时器的互补输出在OCxREF出来后、在极性选择之前，二者是互补的，经过极性选择后是否互补取决于两互补通道的极性选择。极性的选择最终由实际驱动电路需求决定的。</p><p>5. 定时器的所有输出通道可以独立自由设置，如禁用/开启、输出模式选择、极性安排等。但高级定时器的做互补输出时，<b>他们共用相同输出模式和CCR值。</b></p><p>6. 对于通用定时器的Ocx通道，当使能该通道时，Ocx输出=OCxREF+极性；当禁用该通道时，Ocx的输出=0。</p><p>7. 对于高级定时器Ocx/OCxN互补通道，没法同时实现实现有效输出。注意区分有效电平、无效电平与最终输出端的高、低电平。</p><p>8. 对于高级定时器来说，Ocx/OCxN的输出除了跟输出使能位有关外，跟其它多个控制位【MOE/OSSI/OSSR/CCxP/CCxNP】有关。各个系列的STM32参考手册中有个Ocx/OcxN互补通道输出控制表格可以查看。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ad4f0a7ffd56e69701b34ff1ef8ad07b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb\" width=\"476\" data-original=\"https://pic4.zhimg.com/v2-ad4f0a7ffd56e69701b34ff1ef8ad07b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;476&#39; height=&#39;492&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"492\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"476\" data-original=\"https://pic4.zhimg.com/v2-ad4f0a7ffd56e69701b34ff1ef8ad07b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ad4f0a7ffd56e69701b34ff1ef8ad07b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>整体上讲，关于定时器的比较输出，基本原理并不复杂，但实际应用起来就非常灵活，尤其当多种比较输出模式，结合定时器的主从应用时，STM32定时器的强大功能可以因此而得到充分展现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本节课主要介绍了比较输出相关的原理性的东西以及要注意的地方。后续课程会就定时器<b>输入捕获、比较输出，并结合定时器的主从模式分享一些实际应用案例，</b>敬请关注。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/87079922", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 13, 
            "title": "STM32 TALK | 无感FOC方案原理机器控制难点分析", 
            "content": "<p>电机在各种应用中，都是最广泛、最核心的存在。随着传统应用转变翻新、新兴应用层出不穷，这几年的电机界，如果不会FOC，都不好意思说自己是做电机的。八月底，在电堂联合ST举办的“<b>STM32 TALK - 电机控制私享会</b>”上，艾思科技作为STM32的深度合作伙伴，汇集梳理多年电机应用方面的知识、经验和技巧，为大家总结出下文。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、<b>电机控制方案的分析与选择</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>在永磁电机的无感控制策略中，主要有两大类：（1）无感方波控制；（2）无感FOC控制。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>先谈谈无感方波控制。在无感方波控制中，主要是利用反电动势过零点的方式来得到换相信号（反电动势过零点的信号与电机的换相信号在相位上相差30°电角度）。为了得到反电动势过零的信号，通常采用两种方式：<b>（1）硬件比较器法；（2）软件端电压采样法。</b>这两种方法的原理大致是相同的，都是将检测得到的端电压的值与电机中性点电压进行比较来得到反电动势过零点的信号。在无感方波控制中，该检测手段的好坏将决定了控制性能的好坏。但无感方波控制通常会伴随着噪声大、转矩脉动大等缺点，因此仅在一些对电机无感控制要求不是很高的场合中较为适用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>而<b>无感FOC控制</b>，主要是利用电机数学模型以及一些自动控制原理上的知识来实现电机的控制。在无感FOC的控制中，通常需要使用相应的观测器来实现对转子位置的间接得到。<b>无感FOC常采用的控制策略有：（1）滑膜环观测器法；（2）隆伯格观测器法；（3）高频注入法等。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>滑膜观测器：</b>利用自动控制原理中的滑膜变结构的控制原理来实现的。滑膜变结构实际上是变结构控制系统的一种控制策略，特点在于其控制的不连续性，在一定特性下迫使系统在规定的超平面上下做小幅度、高频率的运动，也就是我们常常讲到的“滑动模态”或“滑模”运动。此滑动模态与系统的参数和扰动无关，且可以设计，因此系统有很好的鲁棒性。<b>隆伯格观测器</b>：实质上是滑膜观测器的升维观测器，直接加入了反电动势观测量。<b>高频注入法：</b>利用的是电机的凸极效应来实现对转子位置的检测，该方法对电机的凸极效应要求较高，由于要注入高频通常会伴随着较大的电流啸叫声。目前，滑膜变结构的观测器策略已发展较为成熟，因此在目前的大多数无感FOC的控制中仍然采用滑膜观测器的方法对转子的位置进行检测来实现电机的FOC控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2、设计思路</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>我们这里主要描述的控制策略是滑膜变结构的无感FOC控制，同时在对该控制中所遇到的问题进行阐述，并在后面讲述针对这些问题的解决控制策略。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>永磁同步电机滑膜变结构的无感FOC控制，主要是从两个方面出发来设计的：（1）永磁同步电机的数学模型；（2）滑膜变结构中滑膜面的选取。永磁同步电机在αβ坐标系下的数学模型：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-875c2fbb8abda45a2eb781af49fde1ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"642\" data-original=\"https://pic4.zhimg.com/v2-875c2fbb8abda45a2eb781af49fde1ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;642&#39; height=&#39;338&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"642\" data-original=\"https://pic4.zhimg.com/v2-875c2fbb8abda45a2eb781af49fde1ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-875c2fbb8abda45a2eb781af49fde1ef_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从上面式（1）和（2）中可以看出PMSM在αβ坐标系的数学模型是含有相应的转子的位置的信息的，只需通过相应的手段得到 <img src=\"https://www.zhihu.com/equation?tex=e_%7B%5Calpha%7D\" alt=\"e_{\\alpha}\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=e_%7B%5Cbeta%7D\" alt=\"e_{\\beta}\" eeimg=\"1\"/> 即可得到转子的位置信息。将上式（1）简化为：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-51a93c4dc1138242371dfe2a1ccb0132_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"431\" data-original=\"https://pic3.zhimg.com/v2-51a93c4dc1138242371dfe2a1ccb0132_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;431&#39; height=&#39;103&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"431\" data-original=\"https://pic3.zhimg.com/v2-51a93c4dc1138242371dfe2a1ccb0132_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-51a93c4dc1138242371dfe2a1ccb0132_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>式（3）中  </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6a7c810b952d77594876855723e98613_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"122\" class=\"content_image\" width=\"293\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;293&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"122\" class=\"content_image lazy\" width=\"293\" data-actualsrc=\"https://pic4.zhimg.com/v2-6a7c810b952d77594876855723e98613_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-88b0229e3796d808f25f29042b3a7c2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"769\" data-rawheight=\"209\" class=\"origin_image zh-lightbox-thumb\" width=\"769\" data-original=\"https://pic4.zhimg.com/v2-88b0229e3796d808f25f29042b3a7c2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;769&#39; height=&#39;209&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"769\" data-rawheight=\"209\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"769\" data-original=\"https://pic4.zhimg.com/v2-88b0229e3796d808f25f29042b3a7c2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-88b0229e3796d808f25f29042b3a7c2b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>滑膜变结构控制的定义：</p><p>设有一控制系统：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-aa0f52b714ea700ce8b001650cbb81bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb\" width=\"519\" data-original=\"https://pic4.zhimg.com/v2-aa0f52b714ea700ce8b001650cbb81bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;519&#39; height=&#39;61&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"61\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"519\" data-original=\"https://pic4.zhimg.com/v2-aa0f52b714ea700ce8b001650cbb81bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-aa0f52b714ea700ce8b001650cbb81bb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>选取确定切换函数为：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e6e2aed3a92b0ce568c201d00fd3a518_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"226\" data-rawheight=\"40\" class=\"content_image\" width=\"226\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;226&#39; height=&#39;40&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"226\" data-rawheight=\"40\" class=\"content_image lazy\" width=\"226\" data-actualsrc=\"https://pic1.zhimg.com/v2-e6e2aed3a92b0ce568c201d00fd3a518_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>求解控制函数</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dba2714d19d43e986fd2e4e41139f646_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"114\" class=\"content_image\" width=\"291\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;291&#39; height=&#39;114&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"291\" data-rawheight=\"114\" class=\"content_image lazy\" width=\"291\" data-actualsrc=\"https://pic3.zhimg.com/v2-dba2714d19d43e986fd2e4e41139f646_b.jpg\"/></figure><p>当切换函数满足：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42b4198e312c894c511a1347b639a178_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"144\" data-rawheight=\"35\" class=\"content_image\" width=\"144\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;144&#39; height=&#39;35&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"144\" data-rawheight=\"35\" class=\"content_image lazy\" width=\"144\" data-actualsrc=\"https://pic1.zhimg.com/v2-42b4198e312c894c511a1347b639a178_b.jpg\"/></figure><p>时，满足于李雅普诺夫的稳定判定，所构造的滑膜面选取将适合。</p><p>通过上面对PMSM在αβ坐标系下的数学模型以及对滑膜变结构的分析，可选取建立如下滑膜观测器方程：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d85c6acfd48d45b963ec6f3319b1e0d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"113\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-d85c6acfd48d45b963ec6f3319b1e0d2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;113&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"113\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-d85c6acfd48d45b963ec6f3319b1e0d2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d85c6acfd48d45b963ec6f3319b1e0d2_b.jpg\"/></figure><p>式（4）中</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-32ca523355e4a1f33986d130c0f4000a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"37\" data-rawheight=\"55\" class=\"content_image\" width=\"37\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;37&#39; height=&#39;55&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"37\" data-rawheight=\"55\" class=\"content_image lazy\" width=\"37\" data-actualsrc=\"https://pic3.zhimg.com/v2-32ca523355e4a1f33986d130c0f4000a_b.jpg\"/></figure><p>是观测的电流值；为观测器的开关增益；sgn（）是开关函数</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c27f88fe1e0404e9b49724b07708835f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"180\" data-rawheight=\"123\" class=\"content_image\" width=\"180\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;180&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"180\" data-rawheight=\"123\" class=\"content_image lazy\" width=\"180\" data-actualsrc=\"https://pic4.zhimg.com/v2-c27f88fe1e0404e9b49724b07708835f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a0dd68d4fc924392f9ca926b021f2d0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"125\" class=\"content_image\" width=\"380\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;380&#39; height=&#39;125&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"380\" data-rawheight=\"125\" class=\"content_image lazy\" width=\"380\" data-actualsrc=\"https://pic2.zhimg.com/v2-a0dd68d4fc924392f9ca926b021f2d0d_b.jpg\"/></figure><p>将（3）-（4）</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2148a85388facca4d2cd9b2779c131f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"471\" data-original=\"https://pic2.zhimg.com/v2-2148a85388facca4d2cd9b2779c131f9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;471&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"471\" data-original=\"https://pic2.zhimg.com/v2-2148a85388facca4d2cd9b2779c131f9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2148a85388facca4d2cd9b2779c131f9_b.jpg\"/></figure><p>选取滑膜面 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1cd74d5cd6669668f61560b2bc45aeba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"123\" data-rawheight=\"56\" class=\"content_image\" width=\"123\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;123&#39; height=&#39;56&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"123\" data-rawheight=\"56\" class=\"content_image lazy\" width=\"123\" data-actualsrc=\"https://pic3.zhimg.com/v2-1cd74d5cd6669668f61560b2bc45aeba_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过验证该滑膜面满足与滑膜变结构的稳定性判定。通过上面的分析知可以通过PMSM在αβ数学模型建立相应的滑膜面来间接的得到转子的位置，由于滑膜变结构的鲁棒性较强，且对电机的参数要求较低所以选择该方案作为PMSM无感控制的方案。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3、控制策略分析</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>针对上面分析的，PMSM的滑膜观测器额无感FOC控制框图如下：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-50d746a159ed02901984b63568ab8717_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-50d746a159ed02901984b63568ab8717_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;411&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"411\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-50d746a159ed02901984b63568ab8717_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-50d746a159ed02901984b63568ab8717_b.jpg\"/></figure><p><br/>从上面图一的控制框图中可以看出，在此控制中有三点是该控制需要重点解决，其分别为：（1）转子初始位置辨识；（2）无感FOC的启动；（3）如何实现平滑切换。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们逐一分析：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>（1）转子初始位置辨识：</b>采用基于电感饱和特性的电流差值检测法：由于电感的饱和效应，电感值的大小随转子位置近似成正弦状变化。绕组电流响应与电感的大小存在相应的关系，永磁同步电机静止时，对任意两相绕组注入幅值恒定的电压脉冲，此时线圈绕组可看成RL串联电路的零状态响应。电流大小反映了绕组的电感大小，同时也包含了当前转子位置信息。根据电流响应的值可以辨识出转子初始位置角。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ae1f1082b2153c686dcad40f473220c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-ae1f1082b2153c686dcad40f473220c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;787&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-ae1f1082b2153c686dcad40f473220c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ae1f1082b2153c686dcad40f473220c2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在PMSM中按照如下顺序注入6组脉冲，如图3所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e67fc22e99239ecc85927aaefb816cfd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb\" width=\"716\" data-original=\"https://pic2.zhimg.com/v2-e67fc22e99239ecc85927aaefb816cfd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;716&#39; height=&#39;485&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"716\" data-rawheight=\"485\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"716\" data-original=\"https://pic2.zhimg.com/v2-e67fc22e99239ecc85927aaefb816cfd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e67fc22e99239ecc85927aaefb816cfd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>则注入的脉冲在绕组上的电流示意图，如下图4所示：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c1d4d0d62287cf3d55cdd40877ea360a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-c1d4d0d62287cf3d55cdd40877ea360a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;522&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-c1d4d0d62287cf3d55cdd40877ea360a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c1d4d0d62287cf3d55cdd40877ea360a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>以在AB绕组上的电流相应分析，其电流相应如图5所示：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2ac6ae69c01bc8a1bc3ea5277f98df07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic4.zhimg.com/v2-2ac6ae69c01bc8a1bc3ea5277f98df07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;610&#39; height=&#39;426&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"610\" data-rawheight=\"426\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"610\" data-original=\"https://pic4.zhimg.com/v2-2ac6ae69c01bc8a1bc3ea5277f98df07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2ac6ae69c01bc8a1bc3ea5277f98df07_b.jpg\"/></figure><p>又由于转子的位置与线电流的差值之间存在着如下图6的关系：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9ff9719eda2a444ee1a4ad9b8844f961_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb\" width=\"845\" data-original=\"https://pic2.zhimg.com/v2-9ff9719eda2a444ee1a4ad9b8844f961_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;845&#39; height=&#39;469&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"845\" data-original=\"https://pic2.zhimg.com/v2-9ff9719eda2a444ee1a4ad9b8844f961_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9ff9719eda2a444ee1a4ad9b8844f961_b.jpg\"/></figure><p>通过上面的分析通过如下公式即可得到转子的初始位置：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d7884b7d0974d76031d3dec7f4753024_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"721\" data-original=\"https://pic1.zhimg.com/v2-d7884b7d0974d76031d3dec7f4753024_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;721&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"721\" data-original=\"https://pic1.zhimg.com/v2-d7884b7d0974d76031d3dec7f4753024_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d7884b7d0974d76031d3dec7f4753024_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8e083c274297249e1839ce2e9517fc2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb\" width=\"431\" data-original=\"https://pic3.zhimg.com/v2-8e083c274297249e1839ce2e9517fc2a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;431&#39; height=&#39;202&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"202\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"431\" data-original=\"https://pic3.zhimg.com/v2-8e083c274297249e1839ce2e9517fc2a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8e083c274297249e1839ce2e9517fc2a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4f2c5b5e4e3ab6795c51ccfea192e438_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic1.zhimg.com/v2-4f2c5b5e4e3ab6795c51ccfea192e438_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic1.zhimg.com/v2-4f2c5b5e4e3ab6795c51ccfea192e438_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4f2c5b5e4e3ab6795c51ccfea192e438_b.jpg\"/></figure><p><b>（2）无感FOC启动：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在无感FOC的启动中，通常采用的时三段式启动方法，在有的情况下也采用V/F进行启动，但是这些启动都具有相应的局限性，对于无感FOC的控制中，其启动的性能将对PMSM的无感FOC控制有着重要的影响，这里讲述一种I/F比的启动控制策略。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>I/F启动方式的基本思想是在电枢绕组中产生幅值跟随参考值、频率逐渐增大的旋转电流矢量，使转子加速起动。它的特点是工作在速度开环、电流闭环的状态，定子绕组电流经过坐标变换以后，投影到由指令位置角决定的旋转坐标系上，并受期望值的约束，可有效避免过流产生。其控制框图如下图7所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fdeb9f18ce9e396b3cbaa33887832358_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"678\" data-original=\"https://pic1.zhimg.com/v2-fdeb9f18ce9e396b3cbaa33887832358_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;678&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"678\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"678\" data-original=\"https://pic1.zhimg.com/v2-fdeb9f18ce9e396b3cbaa33887832358_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fdeb9f18ce9e396b3cbaa33887832358_b.jpg\"/></figure><p><b>（3）如何实现平滑切换：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在前面的I/F启动控制中，其中电流已经处于闭环状态，速度为开环，当滑模观测的角度和速度收敛时，为了实现其平滑切换，这里讲述一种基于双DQ轴平滑切换的方式。双dq空间切换的瞬间需要完成如下几步操作：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>第一步：电流环的反馈变量由dvqv空间下的idv和iqv转换为dq空间下的id和iq。<br/></p><p>第二步：d轴电流定由0转换为 iq*sinθL，q轴电流给定由iq*改为由转速环PI调节器生成，而 </p><p>             转速环PI调节器的输出初始化为 iq*cosθL。</p><p>第三步：dq轴PI输出初始化</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-96e34a6684e6189dfdcaad0ef204a9d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"101\" class=\"content_image\" width=\"356\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;356&#39; height=&#39;101&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"356\" data-rawheight=\"101\" class=\"content_image lazy\" width=\"356\" data-actualsrc=\"https://pic1.zhimg.com/v2-96e34a6684e6189dfdcaad0ef204a9d4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第四步：改由dq空间进行坐标变换和逆变换。<br/></p><p>双dq变换的模型图以及控制框图如下图8和图9所示：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c6c73ca2c8a783d576ea240827a8ff10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"479\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"479\" data-original=\"https://pic1.zhimg.com/v2-c6c73ca2c8a783d576ea240827a8ff10_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;479&#39; height=&#39;475&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"479\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"479\" data-original=\"https://pic1.zhimg.com/v2-c6c73ca2c8a783d576ea240827a8ff10_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c6c73ca2c8a783d576ea240827a8ff10_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-68e7e3260b4d4ccc394d021f15bf0da3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-68e7e3260b4d4ccc394d021f15bf0da3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;839&#39; height=&#39;557&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"839\" data-original=\"https://pic4.zhimg.com/v2-68e7e3260b4d4ccc394d021f15bf0da3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-68e7e3260b4d4ccc394d021f15bf0da3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4、程序编程与调试</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上述完成了对PMSM的滑膜观测器的无感FOC控制的原理分析以及重难点分析，接下来完成对上面控制策略的编程。其程序主要分为：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）启动程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6e6dbadea77d5a722fe17952822610af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"709\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb\" width=\"709\" data-original=\"https://pic4.zhimg.com/v2-6e6dbadea77d5a722fe17952822610af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;709&#39; height=&#39;436&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"709\" data-rawheight=\"436\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"709\" data-original=\"https://pic4.zhimg.com/v2-6e6dbadea77d5a722fe17952822610af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6e6dbadea77d5a722fe17952822610af_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（2）SVP程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-85aa94b68d1e7f717e6bcd483c76f8a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1020\" data-rawheight=\"477\" class=\"origin_image zh-lightbox-thumb\" width=\"1020\" data-original=\"https://pic1.zhimg.com/v2-85aa94b68d1e7f717e6bcd483c76f8a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1020&#39; height=&#39;477&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1020\" data-rawheight=\"477\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1020\" data-original=\"https://pic1.zhimg.com/v2-85aa94b68d1e7f717e6bcd483c76f8a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-85aa94b68d1e7f717e6bcd483c76f8a8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（3）相电压重构程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-292bcffe4ea4482732036f3ba466ad9b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"929\" data-original=\"https://pic4.zhimg.com/v2-292bcffe4ea4482732036f3ba466ad9b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;929&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"929\" data-original=\"https://pic4.zhimg.com/v2-292bcffe4ea4482732036f3ba466ad9b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-292bcffe4ea4482732036f3ba466ad9b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（4）ADC中断服务子程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-64c91246e51465a9465b665de2436cbd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic2.zhimg.com/v2-64c91246e51465a9465b665de2436cbd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;799&#39; height=&#39;571&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"571\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"799\" data-original=\"https://pic2.zhimg.com/v2-64c91246e51465a9465b665de2436cbd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-64c91246e51465a9465b665de2436cbd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（5）滑膜观测器算法程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b012a22f1479efbf49244861b9418328_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"916\" data-original=\"https://pic1.zhimg.com/v2-b012a22f1479efbf49244861b9418328_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;916&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"916\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"916\" data-original=\"https://pic1.zhimg.com/v2-b012a22f1479efbf49244861b9418328_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b012a22f1479efbf49244861b9418328_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>（6）锁相环程序：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-747f523d2c9894db2bc10e9a66e041e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"933\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"933\" data-original=\"https://pic1.zhimg.com/v2-747f523d2c9894db2bc10e9a66e041e8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;933&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"933\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"933\" data-original=\"https://pic1.zhimg.com/v2-747f523d2c9894db2bc10e9a66e041e8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-747f523d2c9894db2bc10e9a66e041e8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>最后，讲下在编程调试过程中的难点：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）开关函数和开关增益的选取，这个将会影响着观测器的好坏，通常通过串口打印出eα和eβ的波形来进行调试；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（2）eα和eβ的滤波，该滤波深度不能太大，通常取0.5左右，但是具体的滤波深度还是需要通过串口打印出反电动势波形来进行调节；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（3）PLL的KP和KI的确定，锁相环的输出的快速性与稳定性将会影响着观测得到角度的线性度和稳定性，因此对于锁相环的参数的调节是至关重要的，通常需根据观测器输出的角度通过串口打印，来做相应的调整；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>（4）数据格式的处理，在电流采样时，最好将ADC采样的电流转化成实际电流再进行相应的Q格式，但是在这里Q格式的大小也会对系统有着重要的影响，需要在在实际的程序调试中注意。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "电动机", 
                    "tagLink": "https://api.zhihu.com/topics/19633825"
                }, 
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86925137", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "分享Arm与Linux的完美结合", 
            "content": "<p>分享：Arm与Linux的完美结合</p><p>嵌入式系统的定义应当是以应用为中心、以计算机技术为基础、软件硬件可裁剪、适应应用系统对功能、可靠性、成本、体积、功耗严格要求的专用计算机系统。</p><p>比如现在ATM取款机就是一个典型RTOS,embedded os主要包括两部分，一部分是处理器，比如Arm,POWERPC,MIPC,一部分是OS，比如Linux,wince,vxworks,us/os,etc.我现在主要学习的路线是arm+linux，选择arm主要是因为arm技术已经比较成熟，选择linux是因为linux是开源的，免费的，另外如果学好了linux就算将来不搞嵌入式系统开发这块，也可以专供linux服务器这一方面。</p><p>学习嵌入式linux，主要做的就是四点，一点就是写bootloader,并移植到到nand flash上，第二点，编译kernel,并通过bootloader下载到nand flash上，第三点，在基于nand flash上建立文件系统，第四点，把写好的应用程序下载到target上。基本流程就是这么下来的，具体到开发板上时可能就有所差别了，下边就以深圳优龙公司的fs2410为目标板具体的上述一下开发的流程，以及在开发中应注意的问题。</p><p>第一步：交叉编译环境的建立</p><p>A: 基于linux操作系统的应用开发环境一般是由目标系统硬件（开发板）和宿主pc机所构成。目标硬件开发板用于运行操作系统和系统应用软件。而目标板所用到的操作系统的内核编译、应用程序的开发和调试则需要通过宿主pc机来完成（所以称为交叉编译）。双方之间一般通过串口，并口或以太网接口建立连接关系。安装linux os，比如redhao linux 9.0,可以采用默认安装（但要包含ftp服务），将该linux服务器接入局域网，其他的pc机可以用windows,需要的软件工具包括。</p><p>（1）ftp客户端程序</p><p>（2）telnet工具</p><p>（3）移植到某一特定arm平台的linux操作系统内核源码</p><p>（4）gnu编译工具，可由相关网站下载</p><p>在某工作站pc上安装ftp客户端程序和telnet工具，linux os kernel的编译一般有一个比较固定的步骤，会根据Makefiel文件的不同而略有差异，可参考相关文档，按固定的步骤编译内核完成以后，会在相应目录生成可执行的二进制文件,通过ftp传到pc机上，热后通过串口或网络下载到开发板上。</p><p>B：（1） 创建编译环境，在这个过程中，将设置一些环境变量，创建安装目录，安装内核源代码和头文件等。</p><p>（2） 创建binutils.在这个过程结束后，会创建类似arm-linux-ld等工具。</p><p>（3） 创建一个交叉编译版本的gcc,注意：在这个过程中，只能编译c程序，而不能编译c++程序。</p><p>（4） 创建一个交叉编译版本的glibc，这里最容易出问题。</p><p>（5） 创建一个交叉编译版本的gdb。这个过程结束后，会创建arm-linux_gdb</p><p>（6） 重新创建gcc。前面创建gcc的过程没有编译c++编译器，现在glibc已经准备好了，所以这个步骤将完善gcc的交叉编译。</p><p>（7） 重新创建glibc.</p><p>如果在交叉编译过程中出现错误，那么请检查：</p><p>版本选择是否正确，以及是否安装了相应的补丁；</p><p>库文件路径设置是否正确；</p><p>系统环境变量是否设置正确。</p><p>第二步：编写bootloader并移植到开发板上</p><p>A：bootloader（引导加载程序）是系统加电后运行的第一段代码。嵌入式系统中的bootloader相当于pc机中的bios。大多数bootloader都包含两种不同的操作模式，一种是启动加载（bootloading）模式,在这种模式下，bootloader从目标机上的某个固态存储器设备上将操作系统加载到RAM中运行，整个过程并没有用户的介入。这种模式是bootloader的正常工作模式，另一种是下载（downloading）模式。在这种模式下，目标机上的bootloader将通过串口或网络等通信手段从开发主机（host）上下载内核映像和根文件系统映像等到RAM中。然后可以再被bootloader写到目标机上的固态存储介质上。</p><p>B：bootloader启动大多数都分为两个阶段</p><p>（1）：基本的硬件初始化（屏蔽所有的中断，关闭处理器内部指令/数据cache等）。</p><p>为第二阶段准备RAM空间，如果是从某个固态存储媒质中，则复制bootlodaer的第二阶段代码到RAM。</p><p>设置堆栈。</p><p>跳转到第二阶段的C程序入口点。</p><p>（2）：初始化本阶段要使用的硬件设备。</p><p>检查系统内存映射。</p><p>将内核映像和根文件系统映像从flash读到RAM。</p><p>为内核设置启动参数调用内核。</p>", 
            "topic": [
                {
                    "tag": "ARM", 
                    "tagLink": "https://api.zhihu.com/topics/19553303"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86521781", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "arm的那些年和它的核儿们", 
            "content": "<p>这篇文章来跟大家聊一下<b>ARM内核</b>的发展历史，我们谈到MCU经常会提到MCU的内核是什么，最常听到的内核当属ARM内核，ARM的内核中大家会听到很多名字，有用数字命名的名字，比如ARM 9、ARM 7，也有叫Cortex的名字，像Cortex-M3、Cortex-M4。</p><p><b>那这些内核都是什么关系呢？这些内核都有什么历史呢？</b></p><p>说到ARM，我们要先回到1978年，有一个物理学家叫Hermann Hauser和一个工程师Chris Curry，他们在英国的剑桥创办了一家CPU公司，这个CPU叫Cambridge Processor Unit，他们当时主要的业务是给当地的市场供应电子设备，到1979年，这个CPU公司就改名叫Acorn计算机公司。起初，Acorn计算机公司打算用摩托罗拉的16位芯片去做他们的计算机，但是后来发现这个芯片太贵了，如果想做一台售价500英镑的机器，那光这个芯片就要100英镑，所以他们就向因特尔公司索要80286芯片设计资料，但是被拒绝了，于是就只能被迫自己研发。就这样到了1985年，Acorn与合作伙伴推出了第一代32位、6MHz的处理器，用它做了一个RISC指令集计算机，把它称为Acorn RISC Mechine 。到了1990年的时候，Acorn公司正式改名为ARM计算机公司，有很多大公司来投资，像苹果公司、芯片厂商VLSI公司，加上Acorn本身的资金和知识产权一起入股做了一家这样的ARM计算机公司，当时公司的办公地点也非常简陋，就是一个谷仓，公司成立之后，业务一度十分不景气，有很多更加有名的计算机公司在那时候爆发，所以工程师们人心惶惶，担心会失业，由于缺乏资金，ARM做了一个迫于无奈但今天看来意义深远的决定，即自己不制造芯片，只把芯片的设计方案授权给其他公司，由其他公司来生产，正是因为这个因祸得福的模式使得ARM的芯片遍地开花，把封闭涉及的因特尔公司置于人民战争的汪洋大海，所以ARM公司采取的模式就是不生产芯片，也不销售芯片，只出售芯片的技术授权。说到这里，我们大名鼎鼎的STM32就是业内最早license了ARN Cortex-M内核的公司，当然要再加上自己一流的外设、超低的功耗、它的集成度和简单的结构以及方便使用的工具，就迅速称霸了MCU的市场，直到今天仍然在继续。</p><p>说到ARM的产品分类，其实有很多种分法，常规的按照处理器的分类可以分为冯诺依曼结构、哈佛结构，可以按照ARM的架构等级来分，也可以按照ARM的经典内核来划分，还可以有MCU和MPU的分类，MCU叫微控制器，MPU叫微处理器，它们的区别在于MPU是带虚拟地址的映射管理的MMU，它可以跑向Linux这样复杂的系统，而MCU是不带MMU的。</p><p><b>经典处理器</b></p><p>1994年的时候，ARM出了一款叫ARM 7的处理器，是32位的嵌入式处理器，它也是目前ARM还沿用的经典处理器里最低端的ARM内核。紧接着ARM又用了哈佛体系结构做的ARM 9内核，它的指令和数据线分属不用的总线，可以做并行处理，很明显ARM 9的执行效率会高于ARM 7。然后ARM做了9E，增强了DSP指令，使用于很需要DSP和微控制器的应用场合，随后ARM还做了10E和ARM 11，ARM 11是ARM第六代架构的第一款产品，它的媒体处理能力很强，又很有低功耗特点，开始的时候特别风靡在手机设计中，之后ARM 11就成了ARM经典处理器的最后一代。</p><p>在2004年，ARM全面进入了Cortex这个大系列阶段，Cortex系列里面分为A、R和M，Cortex-A是面向移动计算、智能手机、服务器等市场的高端处理器，这些处理器运行的频率会比较高，有时候超过1GHz，它支持像Linux这样的操作系统，ARM在Cortex-A系列的处理器上也有性能强弱的一个排序，像现在的老大ARM Cortex-A75、A73、A72到后面的A57、A53、A15到A9、A8、A7、A5，下面是ARM 11、ARM 9等等。</p><p>ARM Cortex-R系列是面向实时应用的一种高性能处理器，比如要做硬盘控制、汽车传动、无线通讯的基带控制，大多时候实时处理器不支持MMU，但是它一般要具有MPU、cache和其他的一些存储能力，实时处理器有比较高的频率，一般200MHz~1GHz，要有响应延时非常低这个很重要的特点，所以实时操作系统一般不能运行完整版本的Linux和Windows操作系统，但是可以支持大量的实时操作系统在上面运行。</p><p>Cortex-M系列更多处理的是一些低性能端的特性，但是这些处理器比许多传统的微处理器仍然强大很多，像Cortex-M4、M7的处理器，在许多高性能的微控制器中最大主频可以达到400多MHz，这里就要说到意法半导体STM32H7就是Cortex-M7内核的MCU，它最大的时钟频率就可以达到400MHz。当然，选择Cortex-M系列的产品中可能性能并不是所有处理器选择中的唯一标准，在许多应用中要去考虑功耗、成本、芯片面积甚至要综合考虑这些因素才能选择一款最适合应用开发的MCU。</p><p>ARM的Cortex家族是有一系列的产品可以满足大家对Cortex-M系列的不同需求。Cortex-M系列最早出来的时候是Cortex-M3，那时候是2004年ARM推出来的第一款Cortex-M系列产品，值得一说的是然后意法半导体就是在业内第一家license了这款Cortex-M3，并且推出了STM32F1系列产品。基于M3之后，ARM的内核往低成本、低功耗、更小处理器的方向走，又推出了Cortex-M0、M0+，紧接着想在M3的基础上做一些数字信号处理方面扩充，想做一些浮点运算，就走到了Cortex-M4内核上。慢慢的随着整个互联网市场的发展，大家发现在这个节点端也需要性能处理强大一点的MCU，M7就孕育而生了，它是针对高端的一个微控制器，还会处理数据密集型的开发要求，所以Cortex-M4所支持的所有功能它都支持，并且还扩充了双精度的浮点运算、外部扩展的存储器，还加了一些只在以前ARM的一些MPU上用的cache和TCM紧密耦合存储器的一些功能。紧接着，Cortex-M系列也还出了另外两款新产品叫Cortex-M23和Cortex-M33，M23是面向低功耗、低成本设计的小型处理器，也可以把它想象成是在Cortex-M0的基础上又增强了trustzone安全扩展的处理器，M33是在之前M3、M4处理器基础上扩展了trustzone安全性能的处理器。</p><p>说到Cortex-M家族，意法半导体的STM32可以是当之无愧的Cortex-M系列中的霸主，它有基于像Cortex-M0、M0+、M3、M4以及M7这样的内核，有主流型、超低功耗型、高性能型、无线型四大类共12个大家族，超过50个产品线，近千种型号，这么多种型号在Cortex-M系列上形成了平台化的策略，平台化策略就是说在软件和硬件上实施的是兼容型策略，在硬件上想要做到的是相同的引脚、相同封装的MCU可以做到脚对脚的兼容，意味着客户想升级换代产品的时候PCB板已经设计好了，只需要把芯片拿掉换上另外一个，可以不改变原有设计；在软件上有一个软件平台，有CubeMC这样的一个软件工具，加上它软件设计的底层库HAL库和LL库，对于用户开发来说，上层看到的API接口是统一的，再加上STM32这么多年来一直努力在做的丰富的生态资源，就可以快速搭建原型，升级硬件平台，让产品迅速上市。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "ARM", 
                    "tagLink": "https://api.zhihu.com/topics/19553303"
                }, 
                {
                    "tag": "操作系统内核", 
                    "tagLink": "https://api.zhihu.com/topics/19627055"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86235935", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "基于百度云的FOTA实例-代码及开发说明", 
            "content": "<p>STM32F769DK云端固件升级例程分为两部分：BootLoader和用户应用程序，这是两个独立的工程。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-df3ce3664efcec760c84aebb34abd5ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"795\" data-original=\"https://pic3.zhimg.com/v2-df3ce3664efcec760c84aebb34abd5ba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;795&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"795\" data-original=\"https://pic3.zhimg.com/v2-df3ce3664efcec760c84aebb34abd5ba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-df3ce3664efcec760c84aebb34abd5ba_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>软件的架构</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-be96755e103d03eed9075aba2b347f3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb\" width=\"949\" data-original=\"https://pic3.zhimg.com/v2-be96755e103d03eed9075aba2b347f3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;949&#39; height=&#39;602&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"949\" data-original=\"https://pic3.zhimg.com/v2-be96755e103d03eed9075aba2b347f3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-be96755e103d03eed9075aba2b347f3e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>网络抽象层</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-843d2e3181e8e525b5dea4414fea5cc5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb\" width=\"729\" data-original=\"https://pic2.zhimg.com/v2-843d2e3181e8e525b5dea4414fea5cc5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;729&#39; height=&#39;559&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"729\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"729\" data-original=\"https://pic2.zhimg.com/v2-843d2e3181e8e525b5dea4414fea5cc5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-843d2e3181e8e525b5dea4414fea5cc5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>百度MQTT客户端实现</b></p><p>分为三个部分：</p><p>  网络接口函数封装——baidu_iot_network_wrapper.c</p><p> 百度IoT客户端操作——baidu_iotclient.c</p><p> MQTT消息处理——mqtt_msg_handler.c</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5fb79cc34b2f37eaa2e78aeb249dcf90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb\" width=\"577\" data-original=\"https://pic1.zhimg.com/v2-5fb79cc34b2f37eaa2e78aeb249dcf90_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;577&#39; height=&#39;339&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"577\" data-original=\"https://pic1.zhimg.com/v2-5fb79cc34b2f37eaa2e78aeb249dcf90_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5fb79cc34b2f37eaa2e78aeb249dcf90_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>远程下载模块</b></p><p>分为两个部分：</p><p>   HTTP客户端——http_util.c</p><p> 固件下载过程——rfu.c</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f14ac19ae9a147dd1c0ddc14f90f85e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"755\" data-original=\"https://pic1.zhimg.com/v2-f14ac19ae9a147dd1c0ddc14f90f85e4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;755&#39; height=&#39;438&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"755\" data-original=\"https://pic1.zhimg.com/v2-f14ac19ae9a147dd1c0ddc14f90f85e4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f14ac19ae9a147dd1c0ddc14f90f85e4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>下载文件格式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e908a3500d10cd2633de00e65c65cf5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb\" width=\"888\" data-original=\"https://pic4.zhimg.com/v2-e908a3500d10cd2633de00e65c65cf5f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;888&#39; height=&#39;601&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"601\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"888\" data-original=\"https://pic4.zhimg.com/v2-e908a3500d10cd2633de00e65c65cf5f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e908a3500d10cd2633de00e65c65cf5f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>下载过程</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-475266321d5ada42bd52ada674794eea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic3.zhimg.com/v2-475266321d5ada42bd52ada674794eea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;902&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"902\" data-original=\"https://pic3.zhimg.com/v2-475266321d5ada42bd52ada674794eea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-475266321d5ada42bd52ada674794eea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>QSPI Flash</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-03c59c450e141cfeca286a4794a7e65d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"355\" class=\"content_image\" width=\"294\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;294&#39; height=&#39;355&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"294\" data-rawheight=\"355\" class=\"content_image lazy\" width=\"294\" data-actualsrc=\"https://pic2.zhimg.com/v2-03c59c450e141cfeca286a4794a7e65d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>QSPI Flash除了会保存从云端下载下来的固件，还会保存下载过程的一些状态信息，比如下载的版本、下载链接、下载失败的标志。</p><p>QSPI Flash中保存这些信息的区叫做info区，info区分为两部分，第一个部分是用来保存一些擦除不太频繁的数据，比如说只在烧写完成或失败后进行数据更新；第二部分是用来保存擦除比较频繁的数据，比如在烧写QSPI Flash时记录烧写进度的标识位。</p><p>对QSPI Flash操作的函数都在两个.c文件中，在stm32f769i_discovery_qspi.c中提供了读写QSPI Flash的接口函数，比如擦除、写和读的操作；在qspi_flash_if.c中提供了对状态信息读写的接口函数。</p><p><b>基于本软件的再次开发</b></p><p>新建自己的百度IoT服务</p><p>在百度IoT平台创建自己的服务；</p><p>修改代码中的信息（服务器地址，用户名及密码，主题等）；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d1efbbb28e0e53e4122738724e00f9f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1067\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"1067\" data-original=\"https://pic1.zhimg.com/v2-d1efbbb28e0e53e4122738724e00f9f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1067&#39; height=&#39;556&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1067\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1067\" data-original=\"https://pic1.zhimg.com/v2-d1efbbb28e0e53e4122738724e00f9f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d1efbbb28e0e53e4122738724e00f9f4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>连接其他云平台的IoT服务</b></p><p></p><p>方法一：基于Paho</p><p> 自己实现连接</p><p>方法二：使用平台提供的SDK</p><p> 仅做应用层开发</p><p><b>其他的云存储</b></p><p>直接用任何其他的支持HTTP1.1的存储服务来保存要下载的固件；</p><p>如果要支持HTTPS，你还需要：</p><p>1、 将新的证书内容放在certs.h中；</p><p>2、 修改http_util.c中，httphost_cas_pem的定义。改成你使用的证书名；</p><p>3、 根据调试的情况，修改mbedTLS的配置。</p><p><b>更换WIFI模块</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ebcf8477ea5612b4a21f5b669e79b50a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic3.zhimg.com/v2-ebcf8477ea5612b4a21f5b669e79b50a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;733&#39; height=&#39;557&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"733\" data-original=\"https://pic3.zhimg.com/v2-ebcf8477ea5612b4a21f5b669e79b50a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ebcf8477ea5612b4a21f5b669e79b50a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-daba75a72743eb03b3c216fdf953af9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"907\" data-original=\"https://pic3.zhimg.com/v2-daba75a72743eb03b3c216fdf953af9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;907&#39; height=&#39;580&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"907\" data-original=\"https://pic3.zhimg.com/v2-daba75a72743eb03b3c216fdf953af9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-daba75a72743eb03b3c216fdf953af9e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>从WiFi到2G/3G</b></p><p>1、 从工程中去掉net_tcp_wifi.c，wifi_net_c，以及WiFi模块的驱动文件；</p><p>2、 向工程中添加net_tcp_c2c.c，c2c_net.c，以及2G/3G模块的驱动文件；</p><p>3、 根据2G/3G模块的驱动，重新修改net_tcp_c2c.c，c2c_net.c文件；</p><p>4、 保证net_tcp_c2c.c，c2c_net.c中的函数接口不变，比如还是net_sock_open_tcp_c2c()，还是net_if_init()。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "百度云", 
                    "tagLink": "https://api.zhihu.com/topics/20250001"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/86052116", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 7, 
            "title": "【STM32生态系统】第三期 - 基于STM32WB的低功耗蓝牙应用之协议栈和应用程序的更新", 
            "content": "<p>上个月的<b>2019 STM32全国巡回研讨会</b>上，浓墨重彩地讲了新品<b>STM32WB</b>。为什么看好<b>STM32WB这朵“无线之花”</b>呢，无非还是因为正在和将要发生的物联网规模化落地。物联网产品的应用率、应用者、应用方案都在迈入激增阶段，“连接”将成为行业使用最高频的关键词。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>目前被广泛催生的“连接”已超越“有线”，因为“无线连接”可以带来更多更具想象力的应用场景。“无线连接”可以用两个字符概括表达：<b>W &amp; B，W = WIRELESS, B=BLE</b>。这就是STM32WB后两个字符的由来。要“连接”，就会涉及到很多协议，比如BLE、Thread、Zigbee，它们在STM32WB芯片内部是如何布局？我们需要复盘一下STM32WB的双核架构。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>巧妙的双核架构</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB是一个系统芯片方案，即只有一颗裸片，但包含了两颗独立内核，用以实时执行任务。相比单核的无线MCU不得不为之的分时共享，STM32WB通过双核的分配和协同升级为实时执行，因而缩短了任务执行时间，达到降低功耗、延长电池续航时间的效果；双核的架构还提高了开发的灵活度，使开发更为简易快速。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3864c1ffc457329c19355c7e94774377_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"474\" data-original=\"https://pic4.zhimg.com/v2-3864c1ffc457329c19355c7e94774377_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;474&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"474\" data-original=\"https://pic4.zhimg.com/v2-3864c1ffc457329c19355c7e94774377_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3864c1ffc457329c19355c7e94774377_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>为什么会有FUS？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB的两个内核具有不同的使用功能，M0+跑协议栈，M4跑用户应用。由于支持多种协议栈，因此芯片出厂前并未烧录协议栈，而是放了一个FUS，让用户自主选择并烧录协议栈。FUS，Firmware Update Service之意，是专门为 Firmware 升级来服务的一段特殊程序，但需要特别指出的是，此处的“Firmware”是专指由M0+内核运行的FUS本身和RF协议栈，不包括M4内核上运行的用户应用程序。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>RF协议栈包含在STM32CubeWB包里，用户在拿到WB芯片后，最通常的做法应是：使用最新版本的STM32CubeWB固件包里，最新的RF协议栈和最新的FUS同步更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB更新协议栈和用户应用的四种方式</p><p class=\"ztext-empty-paragraph\"><br/></p><p>以往普通的一颗STM32，拿到芯片空片后，我们可以通过ISP的方式通过USB、UART等常用接口为芯片下程序；或者通过 JTAG/SWD 这样的调试接口下程序。运行一段时间后，要做用户应用程序的更新，除了继续使用 JTAG/SWD 调试接口外，可以通过ISP和IAP的方式来更新程序。ISP和IAP原理类似，都是通过运行在芯片上程序，通过约定的通信端口，比如USB、UART来接收上位机程序，再烧到芯片内部。两者差别是，ISP的这段程序运行在STM32出厂预置在系统Flash里；而IAP的这段程序，是用户自己开发并下载到用户Flash里。这是我们常用的<b>有线升级</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>随着物联网时代的到来，无线升级（FOTA：Firmware on the Air，亦称作空中升级）成为嵌入式设备的必备功能之一。之前的STM32没有片上RF模块，通常外接Wifi，NB-IOT、Lora等种无线模块，将它们作为通道，从空中接收要更新的程序，然后写到芯片里来更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在STM32WB来了，自带BLE接口，可以通过BLE上位机或者手机来给芯片做无线升级。但是它自身的双核架构（一个M4核跑用户应用程序，一个M0+核跑RF 协议栈）、它的片上flash结构（安全flash区域、非安全flash区域），使得它片上内容的升级和以往有点不一样。这个不一样主要体现在如何安装、升级由M0+内核运行的RF协议栈，还有“FUS”的升级。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>更新STM32WB芯片里的RF协议栈和用户应用程序，共有四种方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6403e40521551dd53176fbc495609e25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6403e40521551dd53176fbc495609e25_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;523&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-6403e40521551dd53176fbc495609e25_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6403e40521551dd53176fbc495609e25_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>近程/有线方式两种</b>：一是通过USB通信接口，搭配STM32CubeProgrammer上位机软件更新；二是通过JTAG/SWD调试接口，搭配STLINKUtility使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>另外一大类就是使用BLE接口的空中升级方式，即远程/无线方式（FOTA）</b>。如果STM32WB芯片里面已经有合适的BLE 协议栈和带BLE ota功能的bootloader程序；那么即可通过手机或者装有STM32CubeProgrammer的上位机作为OTA客户端发起OTA请求，从而更新RF协议栈或新版的用户应用程序。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "低功耗蓝牙", 
                    "tagLink": "https://api.zhihu.com/topics/19868970"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85871234", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【超低功耗系列三】BAM 模式和 Stop 模式的选择", 
            "content": "<p>这篇文章主要和大家讨论一下<b>BAM和stop模式</b>的选择问题。首先我们来看一下BAM模式和stop模式分别是什么。</p><p><b>BAM模式</b></p><p>BAM模式使数据用通信外设进行传输，但是MCU的其他部分处于低功耗模式，一般的工作方式可能会选用一个RTC加一个可以工作在这个模式下的外设再加一个DMA和SRAM，SRAM可以是系统的SRAM 1，也可以是SRAM 2，在不需要CPU干预的情况下就可以自行做数据采集，一旦数据采集到CPU需要处理的条件，再去把CPU唤醒，所以我们可以看到BAM模式从本质上实现了一个协处理器的功能。</p><p><b>Stop模式</b></p><p></p><p>Stop模式是CPU Cortex-M内核时钟被关断之外，内核供电域的时钟也被停止了，所以在stop模式下，内核供电域的时钟全部停掉，PLL内部、外部高速时钟全部停掉，电压调节器为内核供电域供电，它有保留寄存器和全部SRAM中的内容。</p><p>从低功耗模式上来看，stop模式是L4系列七种低功耗模式中的一种，但是这七种低功耗模式不包括BAM模式，所以首先要看BAM模式可以工作在什么样的功耗模式下。BAM不是这七种低功耗模式中的一种，它是可以工作在某些特定低功耗模式下的一种工作方式，这个工作模式要比stop模式功耗高一些，类似于睡眠模式、低功耗睡眠模式和低功耗运行模式，这三个模式下可以使用BAM模式。</p><p>单从功耗上来说，stop模式的功耗更低，那为什么不直接选择stop模式呢？</p><p>我们拿采样类的应用来做一个例子说明，采样类的应用整个系统是先做采样，然后去休息 ，再采样，再休息，所以整个系统是一个以采样事件作为驱动的一个状态机，采样不仅提供信息，也提供整个系统需要的脉搏，当采样到达一定程度是就需要CPU去处理，BAM模式和stop模式都可以处理采样类的应用，对于stop模式来说，CPU每次从stop模式下唤醒，在工作模式下去采样，采样完之后进入低功耗的stop模式去休眠，紧接着再被唤醒，做完采样再休眠，可以一直持续这样的过程；对于BAM模式，也可以让整个系统工作在低功耗睡眠或者睡眠模式下，然后在系统中相应的用一个定时器唤醒外设，用外设采样得到的数据再放到SRAM中，整个系统保持在低速的sleep运行状态，也是有不停的采样、保存。</p><p>所以stop模式和BAM模式都可以实现采样的应用，那到底要用stop模式还是BAM模式呢？</p><p>简而言之，哪种情况下功耗最节省，就用哪种模式。</p><p>我们的工作情况是先要工作采样，然后进入休眠，再工作采样，再休眠，所以会在工作状态和低功耗状态一直在切换，所以我们要看的整体功耗情况一定是要看完成整个应用所需要的所有功能的情况下把采样时候和休眠时候整个的功耗加起来总的功耗最低，我们就选用这种功耗低的模式。</p><p>说到BAM模式和stop模式下的电流值也就是功耗值比较，这里要提到几个新的概念。</p><p>首先是唤醒电流，这个电流是一个瞬间的电流，它是从stop 2模式下唤醒的时候瞬间会产生的电流，这个电流非常大。</p><p>也就是说，从功耗的角度来说，stop模式下的功耗值是相对比较低的，BAM因为是放在sleep模式下，所以它的功耗值相对是高的。但是stop模式有一个问题，就是唤醒的时候有一个大的唤醒电流，BAM模式没有唤醒电流，所以唤醒周期就是一个至关重要的参数，简而言之，如果唤醒周期特别短，唤醒次数特别多，那唤醒电流出现很多次肯定会很影响功耗；如果唤醒周期非常长，那一次大的唤醒电流平摊下来其实对功耗的影响没有非常大。</p><p>那唤醒周期多长适合使用BAM模式呢？多长的周期比较适合用stop模式？</p><p>如果唤醒周期长于几十毫秒，那么推荐使用standby模式；如果唤醒周期相对短一些，建议使用stop 2模式；如果温度较高，还是建议使用standby模式；如果唤醒周期更短，那建议使用BAM模式。</p><p><b>总结</b></p><p>关于BAM模式和stop模式的选择就是一个引子，这个引子引出来的话题就是去思考自己的低功耗应用设计，到底要选择什么样的模式，不仅是低功耗模式，还包括运行时候的模式，要完成应用到底要选择什么样的方式去工作，这个其实很简单，就是要选择能够满足应用的、高效的，同时功耗最低的模式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85700397", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【超低功耗系列二】低功耗设计应用考虑", 
            "content": "<p>在这篇文章里我们来分享一下如果一个项目有低功耗的需求，那在这个项目中如何去做芯片的选型、与MCU相关的低功耗系统设计考虑（硬件考虑和软件考虑及系统考虑），也就是从项目的角度出发如何做低功耗设计的考虑因素。</p><p>整体来说，按照你的应用需求会先选择一颗芯片，现在假设我们选好了芯片，基于应用需求，需要做低功耗设计，降低功耗是需要软件和硬件协同工作才能解决的。</p><p>从芯片选型开始说，有一些设计大家可能沿用原先项目中使用过的低功耗芯片，在此基础上做低功耗设计，不断从软件和硬件角度来降低功耗，最终看能不能达到我们的需求，如果达不到，再换其他的芯片，还有一些情况，我们可能要完全从头去选一个MCU芯片，一般这时候还是要看项目需求，要求做到的工作，再加上休眠这样的一个时间要求做到多低的功耗，也就是要求电池的使用寿命时间有多长，依据这个标准去做选择。</p><p><b>选择芯片会考虑到的因素有：</b></p><p>首先需要拿到芯片的数据参考手册，看到它在不同功耗时的数值，做一个简单的估计。对STM32来说，会有一个power consumption calculate这样一个软件，其实就是一个简单的数学建模模型，然后把芯片工作的模式变得模式化，也就是把它变成一个循环，比如工作多长时间，紧接着让哪些外设进入休眠的状态，休眠的时候让哪些外设去工作，什么条件唤醒，要把这些变为程序化的过程，把这个过程输到数学建模的模型中，这样就可以帮我们算出power consumption calculat的值，算出来之后我们就可以很明显的得到一个数值，也就是说我们使用这样一个电池去给应用供电大概可以使用多久，可以看到功耗是不是能够满足应用需求。</p><p>从工艺的角度来说，一般芯片的工艺越先进，动态功耗会越低，但是静态的漏电流会相对高一些。</p><p>低功耗芯片与不是低功耗的芯片，两者最大的区别是专门为低功耗设计的芯片它的低功耗模式一定会比没有为低功耗设计的芯片模式多很多种，它会考虑到各种可能性的低功耗组合，在这种组合下用更多的组合模式来达到更低的功耗。</p><p><b>MCU相关的系统设计</b></p><p>在系统设计的时候，我们先要搞清楚MCU芯片是怎么设计进去的，可以查阅数据手册，找出可以被唤醒的最大的休眠模式，按照数据手册的要求写一个测试工程，像STM32的话，还会有很多的例程，CubeMX里带的固件库里有低功耗的各个使用例程，那么去实现一个纯粹什么都不做的休眠状态，然后关闭所有能够关闭的功能，这样就获得了一个很极限的低功耗，也可以称之为最小系统，也是最小功耗的最小系统，这个时候要做的就是根据硬件工程师提供的I/O设置状态来配置I/O状态获得人为的最低的功耗。</p><p><b>如何减少I/O的漏电流</b></p><p>一般来说，如果I/O口是由固定电平的，把它配置为模拟的、输入的形式，这时候功耗是最低的，它内部的触发器一定要关掉，我们需要有一个正确的I/O口的状态，然后把代码加入到目标电路板里测量功耗，如果电路板上无法优化的一些固有功耗，比如某些固定的消耗电流的一些电阻功耗，消除之后仍然没有达到数据手册上所说的对应的休眠状态下的最大值，这个时候可能就要从硬件状态上找原因，这件事情是值得花时间好好研究一下的。</p><p><b>如何唤醒MCU</b></p><p>在这个过程里，我们要确认系统的脉搏，就是要总体来审查应用的工作方式，找到系统时钟最大的节拍，然后根据这个需求来确认芯片所需要使用的唤醒源。</p><p>除此之外，还要研究应用的需求，明白系统工作的模式，比如拿采样模式来说，需要先采样，然后进入低功耗休息状态，再采样，再进入低功耗休息状态，所以整个系统是类似于像一个状态机一样，以采样事件作为驱动来工作的，采样不仅是提供信息，也提供系统的脉搏，这类系统在采样的同时可能还会涉及串口要进行通信等问题，因为信息的本源是采样，所以还是要采样的周期本身决定信息的有效性，要明确系统对唤醒源和唤醒模式的需求，以便确定系统最基础的休眠方式。进一步来说，比如基础的休眠方式和所应用的场景需求确定了，就可以给出这个系统设计的一个初步评估结果，从而达到是否能够确定是这个芯片、确定适用系统设计的结果。</p><p>所以我们总结下来，要关注MCU是怎样进入休眠状态的以及怎样从休眠状态被唤醒的，这样来考虑系统的优化，使系统能用最小的功耗提供最大的性能，还能满足所需要的唤醒时间。</p><p>从另一个角度说，刚才的方式就是包含低功耗应用中两个不同的阶段，一个是process阶段，在规定的时间间隔，不管是RTC还是外部的事件、GPIO中断等等，需要处理一些传感器收集过来的数据或者是无线传过来的数据；还有一个是inactive阶段，这个时候系统是属于真正的低功耗状态，会等待各种唤醒源或者是中断来把它唤醒。低功耗设计就是要考虑这两个阶段，考虑的各种因素就是要从这两个阶段来进行考虑，在process阶段，要求在给定的时间内能够执行一定数量的指令，所以有时候也不是说process阶段频率越慢越好，要考虑性价比，在inactive阶段，要保持最少的内容，比如数据要在SRAM里面保持，还要有一定的唤醒能力。两个阶段之间的转换要支持不同的约束条件，睡眠到运行的转换要求在转换时具有快速的唤醒时间，而且风驰电流是最小的，这样能够使用外部的电池来供电；从运行到睡眠的时候其实是不太关心转换时间的，但是需要关心的是要转换到最能够节约功耗的一个睡眠模式。</p><p>所以综合起来考虑，关键是要考虑四个参数：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个叫平均功耗，一般会以微瓦的数量级来计量大小，它就能决定用的电池的大小以及所预期的应用是不是能够用这个MCU；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还有风驰电流，这个参数一般是以微安的数量级来计量大小，它决定了可以使用电池的类型以及需要添加到板上的外部元件的数量和尺寸。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在process阶段的处理性能也很重要，它和CPU的频率以及CPU工作在什么样的状态成正比；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后一个参数是反应时间，它是唤醒的信号源激活和第一条指令执行之间的时间。</p><p>上面提到了如何选MCU芯片以及如何知道MCU是如何进入低功耗、如何去唤醒的，除了这些MCU低功耗的一些特性之外，还要考虑MCU的一些其他特性，像STM32的超低功耗系列里面这样几个特性，比如SMPS，也就是外接的开关电源，这也是能保证动态功耗被极大降低的一个办法；还有一个叫BAM，就是批处理的一个模式；另一个是STM32具有自己的知识产权的FLASH ART加速器。</p><p><b>SMPS</b></p><p>SMPS是通过外部的DCDC转换器生成内核的逻辑电压源，用来显著提高运行模式的效率</p><p><b>BAM</b></p><p>BAM是批处理的一个模式，它使用在睡眠模式或者低功耗睡眠模式或者低功耗运行模式，相当于是给MCU做了一个小的协处理器，不需要耗费CPU的资源，也不需要每次采集完数据都要CPU去处理</p><p><b>FLASH ART加速器</b></p><p>大家知道从半导体工艺制程上来说，FLASH的工艺就决定了它的速度不会很快，基本上就到20多MHz，但是一般MCU内核可以跑到80、90甚至100、200MHz，这个时候从FLASH中做代码执行就有一个瓶颈——时间不匹配，正常情况我们都是加等待周期，随着FLASH的频率越高，要加的等待周期就越大，所以ST就加入了一个新东西，叫FLASH ART加速器。</p><p>加速器实现的功能就是让我们从FLASH代码里面做执行的时候不需要等待，这是因为它加了cache。</p><p>从低功耗的角度来说，从SRAM里运行和从FLASH里运行功耗更低的是从SRAM里运行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><b>点击下方链接观看更多相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "芯片（集成电路）", 
                    "tagLink": "https://api.zhihu.com/topics/19583435"
                }, 
                {
                    "tag": "设计", 
                    "tagLink": "https://api.zhihu.com/topics/19551557"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85543578", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 4, 
            "title": "【超低功耗系列一】STM32L 低功耗产品和模式", 
            "content": "<p>大家知道意法半导体STM32产品中有四个系列，其中一个很重要的系列是超低功耗系列，今天我们就来聊一下<b>STM32超低功耗系列</b>产品。</p><p>意法半导体的超低功耗系列有非常优秀的低功耗表现，在EEMBC（嵌入式微处理器基准测评协会）的一个测评排名中，STM32L4系列的功耗可谓首屈一指，那我们就来看一下STM32L系列为什么可以做到那么低的功耗以及是如何做到的。</p><p>这篇文章先来说一下STM32L低功耗系列有哪些产品以及不同产品中低功耗模式的对比，之后我们还会发表后续文章，感兴趣的朋友可以持续关注。</p><p><b>超低功耗模式中的不同产品系列</b></p><p>有M0+内核的STM32L0，有Cortex-M3内核的L1以及Cortex-M4内核的L4和L4+，其中L0和L1都有5种低功耗模式，这5种低功耗模式分别是低功耗的运行、睡眠、低功耗睡眠、停止和待机。对于L4和L4+，它们在5种低功耗模式基础上又添加了停止模式下的两个状态，也就是stop 1、stop 2和关断模式。</p><p><b>那这么多模式是怎么定义出来的呢?</b></p><p>从STM32的历史来说，最早是时候是沿用arm内核的低功耗概念，这个概念里面具有睡眠模式、停止模式、待机模式，但随着工艺的不断提升，ST有更多更低功耗的模式出来，像L4产品就做到了非常低的功耗的shutdown模式。</p><p><b>低功耗运行模式</b></p><p>其实低功耗运行模式还是一种运行模式，只是它的电流消耗很低，它与运行模式最大的区别是给内核供电的内部电压调节器电压要低于正常的运行模式下的电压值，也就是它使用的是低功耗电压器来供电，所以系统最大的相对运行频率也会很低，像L4在低功耗运行模式时最大的频率不超过2MHz，对L1来说，它不能超过121KHz。</p><p><b>睡眠模式</b></p><p>在睡眠模式，系统的CPU也就是Cortex-M内核的时钟被关闭了，但外设是继续保持运转的它整个I/O的引脚状态与运行模式下也是相同的。</p><p><b>低功耗睡眠模式</b></p><p>低功耗睡眠模式是基于睡眠模式下的低功耗模式，是具有极低电流消耗的睡眠模式，它内核的时钟也是被关闭的，同时外设时钟频率受到了限制，因为它的电压调节器属于低功耗状态，内部的FLASH是要被停止的，所以低功耗睡眠模式只能从低功耗运行模式进入，这个是和其他模式不同的，其他模式都可以从运行模式直接做切换。</p><p>在低功耗运行和睡眠模式下，可以有一个BAM模式，它的工作方式是通过RTC加一个外设加DMA加SRAM，在不需要CPU干预的情况下就可以自行做数据采集，一旦到了数据采集需要到CPU处理的条件时，然后再把CPU唤醒做处理，所以这整个一个小系统就实现了一个协处理器的功能。</p><p><b>停止模式</b></p><p>在说停止模式之前，为了说清楚停止模式和睡眠模式的区别，我们先说一下Vcore的概念，它是内核的一个供电区域，不仅给CPU内核供电，还会给系统内部的存储器和它的数字外设供电。 </p><p>停止模式中，除了CPU，也就是Cortex-M内核的时钟被关闭外，内核供电域的时钟也被停止，在停止模式下，内核供电域的时钟全部都停掉，PLL内部、外部的高速时钟全部都停掉，电压调节器为内核供电域供电，保留寄存器和内部SRAM中的内容。</p><p>在L4和L4+系列中，停止模式被细分为stop 0、stop 1和stop 2三种模式，按照功耗从低到高来说，stop 2是功耗最低的一个stop模式，它整个Vcore电源域放在了更低的漏电流模式下，使用了低功耗的电压调节器，只有最少的外设可以工作，所以它的功耗相对来说是最低的，但是唤醒时间是最长的。</p><p>Stop 1模式提供了更多的外设和唤醒源，唤醒时间也会更长一些；</p><p>Stop 0模式主电压调节器打开，可以得到最快的唤醒时间；</p><p>在所有的stop模式下，所有的高速振荡器停止，而低速振荡器保持活动，外设设置为active，需要的时候就可以使用这些高速时钟，能保证它在一些特定的事件下去唤醒设备。</p><p><b>待机模式</b></p><p>在待机模式下，内核的供电是直接断电的，电压调节器掉电区寄存器的内容会完全丢失，包括内部的SRAM，所以最大的区别就是说，系统从待机模式下的低功耗唤醒的时候，系统是要复位的。</p><p>待机模式下，BOR是始终使能的，这样就保证了供电电压低于所选功能阈值时，器件可以复位。默认条件的待机模式下，SRAM的内容是会丢失的，但是在L4里增加了SRAM 2，如果需要在待机模式后系统唤醒的时候有SRAM能保存一些内容，那就可以使用SRAM 2，它需要有多余220nA的额外电流消耗。</p><p><b>Shutdown模式</b></p><p>在shutdown模式，系统达到了最最低的功耗，电压调节器的供电就被关断了，内核的供电也完全被断开，只有备份域的LSE、RTC可以工作所以在L4器件实现了一个新的模式，这个模式主要实现的目的就是为了延长电池供电之后整个器件的使用寿命，它其实是通过关闭内部的稳压器以及禁止使用耗电的监控，所以这个模式可以达到最低的功耗电流。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "电子产品", 
                    "tagLink": "https://api.zhihu.com/topics/19565023"
                }, 
                {
                    "tag": "硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19559524"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84538148", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "入门ARM这条路太吃力？或许你该认真学习51单片机（牛人详细分析）", 
            "content": "<p><b>问：</b> <b>从51到<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_arm_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a>，这路怎么走？</b><br/>很多人说：有51基础的人很容易入门ARM。我想说，坑爹啊，我就是51走过来的，看ARM几个月了，一点进展都没有...<br/>51都是有地址映射的（即SFR，特殊功能寄存器），在头文件reg52.h里面，不知道ARM有没有，且不知道如何调用。以<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_stm32_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32</a></b>为例，官方有提供个固件库，也就是好几个文件夹和几十个文件，里面有会汇编写的，也有用C写的，貌似也有地址映射，貌似里面的地址映射语句不是像51里面用sfr来表示的，貌似是用#define来定义的，这边搞糊涂了。<br/>固件库中还包含了很多打包好的程序，比如说各种传输协议要用到的程序。但我的思维还停留在51，并且我不知道停留在51的这种思维是否是正确的：那就是，完全自己编码，除了sfr定义，包括很多包装好的函数，自己写出来才算学会。这种思维，不知道在ARM学习上是否同等适用，难道学ARM时上了个层次，就直接在别人打包好程序的基础上做产品了吗？<br/>必须强调，在上位机，PC软件方面，是得调用操作系统的很多函数、库，这个没办法，因为强大的PC界面及功能，如果底层驱动什么的都自己写的话会累死，而且不一定有成效。但ARM不同，不同在他比PC低一层次，但同时又高51一个层次，所以我纠结了。<br/>并且我现在不知何从入手，就算是将固件库搞明白也得花不少时间。但我觉得，如果让ARM点亮一个小<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/957\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LED</a></b>，应该用不上那么多固件库或函数，只要能点亮个LED就行，这么低的要求，应该是用到很少的语句及配置程序，但网上所有的教程基本上首先就教你：如何调用所有的官方库。这无疑让初学者陷入泥潭，晕。<br/><b>良心答主：</b><br/>我做了个实例，不用ST的库来点LED，解答你的问题</p><p>我的 KeilMDK 3.5<br/>我的STM32板子奋斗版是 ，IC 是 STM32F103VET6<br/>调试工具 JLINK V8<br/>LED 接在 PB5 ，高电平点亮</p><p>既然说一定懂C语言了，那么对于下面我的问题，不查百度，完全靠自己，懂多少？然后查了百度之后又能懂多少？</p><p><b>（一）新建 keil 工程</b>，IC选择 ST 公司的 STM32F103VE，keil提示是否copy 启动文件，选择是。</p><p>这里有问题，你有没有读过这个启动头文件？51 也是同样的启动文件，51的那个启动文件有没有读过？你知道头文件里面做了什么吗？C语言真的从 main 函数开始吗？运行时库是什么？这些资料从什么地方知道？keil编译器的行为？<br/>（如果你说头文件是汇编的，没有必要看，那我当我没说）</p><p>例如启动文件里面有这么一句，我的问题是 __main 这个标号在哪里实现的，注意，这里肯定不是 main 函数这里跳到哪里去了？还有个问题 [WEAK] 这里是什么意思？有什么用？？？？</p><p>Reset_Handler   PROC<br/>                EXPORT  Reset_Handler             [WEAK]<br/>                IMPORT  __main<br/>                LDR     R0, =__main<br/>                BX      R0</p><p><b>（二）新建一个 main.c</b> 并且写一个 main函数，什么都不做，这和51一样了。</p><p>void main(void)<br/>{<br/>        while (1)<br/>        {</p><p>        }<br/>}</p><p>然后因为我需要调试，则设置jlink<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/311\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">调试器</a></b>，在项目属性里面 Debug 标签，Use J-LINK/J-TRACE ，然后到 u<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></b>lities 标签，同样选择J-LINK /J-TRACK ，并且选择 Setting 按钮，里面的 Programming Algorithm 还是空的，表示keil 不知道目标是什么，我添加一个 STM32F10X High-density Flash ，问题，为什么是 High-desity ？依据是什么？？？全部确认返回。</p><p>这个时候已经可以编译，<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/try.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开发板</a></b>上电，已经可以下载<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_proteus_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">仿真</a></b>的，虽然程序什么都没有写</p><p><b>（三）既然硬件，<a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/311\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">仿真器</a>，调试都准备好了，接着就开始写程序了</b>。<br/>我一直推荐新手花钱买学习板和仿真器，因为可以排除硬件的问题，让初学者集中精力去写程序，而不用怀疑硬件有问题，这点很重要。</p><p>这阶段主要是看书，了解这个IC 的架构，了解指令集，了解寄存器（别跟我说你找不到这些资料？.....）<br/>Cortex-M3权威指南CnR2（<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子</a></b>书）.pdf <br/>STM3210x参考手册.pdf<br/>学习板原理图<br/>博客，<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">论坛</a></b>等多个帖子，务必要对整个IC有个初步的了解。这个过程有点痛苦，但是值得花这个时间。</p><p><b>（四）开始写 LED</b><br/>既然我们要操作 IO 口，当然就要看IO口相关的知识。打开 STM3210x参考手册.pdf ，我的目的只是操作 GPIO 所以我只需要将第五章看完就OK了。章节比较多，懒得看，根据一般的经验（你缺经验了吧？），不说多就AVR 和 PIC 而已。操作IO一般是两个步骤，第一，操作IO控制寄存器，设置IO为输出，第二就是送数据。</p><p>那么很明显，只可能是 GPIOx_CRL  GPIOx_CRH ， GPIOx_ODR 三个寄存器会有想要仔细阅读这几个寄存器的介绍后知道，GPIOx_CRL 是控制 PIN 0-7 的属性的，GPIOx_CRH 控制PIN 8-15，ODR寄存器当然就是输出数据了，将数据送到这里就行了。</p><p>然后，这几个寄存器的地址是多少？首先看 stm32f103ve.pdf 这个是官方的datasheet、，看第四章， Mmeory Mapping<br/>为什么看这章？会英文都能猜到吧？，看 PORTB 的地址是 0x40010C00 - 0x40010FFF ，这个就是基地址了。基地址<br/>加上偏移量就能找到具体的寄存器。 </p><p>例如我需要操作 GPIOB_CRL 的偏移为 00H ，（看STM3210x参考手册.pdf） ODR 寄存器的偏移为 0CH <br/>那么很自然得出<br/>GPIOB_CRL = 0x40010C00<br/>GPIOB_ODR = 0x40010C0C</p><p>怎么验证我的结论正确？先看 keil 给的头文件 \\Keil\\ARM\\INC\\ST\\STM32F10x\\stm32f10x_map.h<br/>#define PERIPH_BASE           ((u32)0x40000000)<br/>#define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)<br/>#define GPIOB_BASE            (APB2PERIPH_BASE + 0x0C00)</p><p>这样怎么算都能算出 0x40010C00 出来吧？？ODR 寄存器同理</p><p>为了点亮 LED ，我需要将 PB5 （也就是 GPIOB5）设置为输出，并且ODR相应的位写入 1 ，看资料得出 MODE5 是bit 20 21 控制的，CNF5 是bit 22,23<br/>MODE5应该设置 10（0x2) 选择 2MHZ 输出，CNF5 选择00（0x0），通用推挽模式，于是将这个值写入</p><p>(*volatile unsigned long)0x40010C00 = (2&lt;&lt;20) | (0&lt;&lt;22);  // 为简单起见，不管其他位了</p><p>你是否能看懂这句C语言？？volatile 什么意思什么用？指针的本质是什么？为什么能这样用？2&lt;&lt;20 是什么意思，为什么能这样用？我真的不是为难你，<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/forum.php%3Fgid%3D3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">嵌入式</a></b>都这么写的，ST的头文件也是这么定义</p><p>同理，设置 ODR 寄存器<br/>*(volatile unsigned long *)0x40010C0C = 1&lt;&lt;5;<br/>*(volatile unsigned long *)0x40010C0C = 0;</p><p>STM32 没有SFR ，没有bit，没有sbit 的概念的了。是不是就不如 51 了？</p><p>下载运行，还不行，因为GPIOB 的CLK 没有使能，这时其实 GPIOB 是不能工作的，这是 STM32 特殊的地方，上电默认外设的<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></b>都是关的，初学者没有注意这里，是可以原谅的，多看看书，多实践，多问问就是了。</p><p>找到问题的原因，则再 RCC_APB2ENR 设置，其中 BIT 3 就是 IOPBEN 是时钟使能位，同上，先找到 RCC_APB2ENR的地址 <br/>#define PERIPH_BASE           ((u32)0x40000000)<br/>#define AHBPERIPH_BASE        (PERIPH_BASE + 0x20000)<br/>#define RCC_BASE              (AHBPERIPH_BASE + 0x1000)<br/>RCC_APB2ENR 的偏移是 18H ，所以最终得到地址为 0x40021018，操作方法同上</p><p>*(volatile unsigned long *)0x40021018 |= 1&lt;&lt;3;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>最终的点LED的程序就完成了。<br/>void main(void)<br/>{<br/>        *(volatile unsigned long *)0x40021018 |= 1&lt;&lt;3;<br/>        *(volatile unsigned long *)0x40010C00 = (2&lt;&lt;20) | (0&lt;&lt;22); <br/>        *(volatile unsigned long *)0x40010C0C = 1&lt;&lt;5;<br/>        while (1)<br/>        {</p><p>        }<br/>}<br/>如果将寄存器做一个定义，则程序变成如下</p><p>#define RCC_APB2ENR *(volatile unsigned long *)0x40021018<br/>#define GPIOB_CRL  *(volatile unsigned long *)0x40010C00<br/>#define GPIOB_ODR *(volatile unsigned long *)0x40010C0C</p><p>void main(void)<br/>{<br/>        RCC_APB2ENR |= 1&lt;&lt;3;<br/>        GPIOB_CRL = (2&lt;&lt;20) | (0&lt;&lt;22); <br/>        GPIOB_ODR = 1&lt;&lt;5;<br/>        while (1)<br/>        {</p><p>        }<br/>}</p><p>RCC_APB2ENR  RCC 是时钟寄存器 ， APB2 是外设2 ，ENR ，可以理解为 enable<br/>GPIOB_CRL  GPIO B control 控制寄存器<br/>GPIOB_ODR  GPIO(general purpose input output) B output data register 输出数据寄存器</p><p>都是有意义的名字，哪里难记了？？而且名字都来自 ST 的官方 datasheet、这个程序跟你用 51 写的程序我还真的没看出差别有很大 .....</p><p>加入刚才的 GPIOB 寄存器，看看 ST 的官方库是怎么定义的，<br/>\\Libraries\\CMSIS\\CM3\\DeviceSupport\\ST\\STM32F10x\\stm32f10x.h<br/>用 UltraEdit 打开，搜索 GPIOB</p><p>#define PERIPH_BASE           ((uint32_t)0x40000000)<br/>#define APB2PERIPH_BASE       (PERIPH_BASE + 0x10000)<br/>#define GPIOB_BASE            (APB2PERIPH_BASE + 0x0C00)</p><p>没错，和keil 里面是一模一样的。</p><p>typedef struct<br/>{<br/>  __IO uint32_t CRL;<br/>  __IO uint32_t CRH;<br/>  __IO uint32_t IDR;<br/>  __IO uint32_t ODR;<br/>  __IO uint32_t BSRR;<br/>  __IO uint32_t BRR;<br/>  __IO uint32_t LCKR;<br/>} GPIO_TypeDef;</p><p>其中 __IO  的定义在 \\Libraries\\CMSIS\\CM3\\CoreSupport\\core_cm3.h 为什么我知道在这个文件里面，因为我会用 source insight ...</p><p>#define     __IO    volatile </p><p>__IO uint32_t CRL 其实就是 volatile uint32_t CRL</p><p>为什么用结构体？因为结构体的成员的地址分配（RAM中）是连续（不知道您是否懂得，这还是C语言的问题），而 STM32 的一个模块的功能寄存器都是连续的，每个寄存器都是相当于 基地址加偏移，跟上面的理论一致</p><p>于是就有了结构体指针的用法 <br/>跟踪库函数的源代码，例如 GPIO 的 初始化函数<br/>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</p><p>以结构体指针的形式传递 IO 口 GPIO_TypeDef* GPIOx</p><p>访问 CRL 寄存器则用成员的形式 GPIOx-&gt;CRL;</p><p>不需要担心这样做的效率，因为都是地址，也就是指针，最终的效率是直接寄存器操作，效率是非常高的。</p><p>看不懂库函数，归根究底就是C语言功底不行。不要以为写过几行51就懂C语言了，远的很呢。</p><p>还有，STM 的库下载的时候包含了很多很多例子，库函数怎么使用在例子里面有很详细的介绍，不用写几行代码，<br/>都是复制例子做实验，也很很容易的。</p><p><b>总结的几个问题</b></p><p>1，ARM 没有SFR，也不需要，SFR 是51的关键字，没有理由 51 有 ARM 就要有。例如ACC，ARM 就没有，但是有 R0-R15 ，这些就是架构（architecture 的区别了）</p><p>2，STM32 的寄存器在官方头文件上面已经全部有定义了，上面已经阐述了。（你看不懂不代表没有吧？）</p><p>3，不带库函数的LED程序已经实现了。更多交流可以私我vx：132陆零伍陆2029</p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "ARM", 
                    "tagLink": "https://api.zhihu.com/topics/19553303"
                }, 
                {
                    "tag": "51 单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19737566"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84509853", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "STM32巡研，节前最有营养的技术补给", 
            "content": "<p><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32 2019年全国巡回研讨会</a></b>于今天在厦门、广州和上海同期收官，现场人潮涌动，上海站的直播间也熙熙攘攘，网友们聊得热火朝天、不亦悦乎。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>今年的STM32全国巡回研讨会上，重新梳理了STM32的中国市场策略，面向新场景下的新应用，为中国客户提供集成度更高、产品小型化、融合更多算法的产品；进一步完善STM32生态系统的规划，从大学计划到技术培训，从技术课程到线下沙龙，为用户提供全域学习切入点；还重点推介5款新品：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li><b>STM32WB</b>集成了低功耗蓝牙的SOC方案，代表着未来STM32在更强大通信功能上的投入；</li><li><b>STM32MP1</b>作为ST第一款通用MPU，兼顾了ARM Cortex-A核的高主频和对smartOS(Linux, Android)的支持优势，同时又发挥了MCU的丰富外设和对实时操作系统的良好支持；</li><li><b>STM32H7</b>双核系列拓展了MCU可以达到的性能边界，把多任务分配到不同的核来解决单核MCU的性能瓶颈；</li><li><b>STM32G0</b>和<b>STM32G4</b>的性能提升和成本优化，是对F0和F3的升级迭代，继续巩固和拓展主流市场。<br/></li></ul><p><b>向&#34;AI电堂“微信公众号后台回复”研讨会“，即可下载STM32全国巡回研讨会资料</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6ef30d156c6e694a9505f83ee9c82f0a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-6ef30d156c6e694a9505f83ee9c82f0a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-6ef30d156c6e694a9505f83ee9c82f0a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6ef30d156c6e694a9505f83ee9c82f0a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84509160", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "性能爆表的STM32G4，您想尝鲜体验吗？", 
            "content": "<p>今年6月，STM32系列处理器又添了新成员——STM32G4系列。这是继2018年底发布STM32G0系列后，ST推出的第二个以“G”命名的系列。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>该系列是2012年推出的STM32F3系列的延续，它继承了很多STM32F3的理念和基因，带来更强劲的性能和数模效果。在性能、外设、安全等多方面进行了多项升级，从而带来更强劲的性能，更丰富的针对应用领域的功能进阶。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G4作为一款基于Arm Cortex-M4架构的产品，定位为主流型MCU，主要针对电机控制、工业设备与测量仪器、高端消费类应用和数字电源等应用场景，通过数模组合的方式来满足用户对兼顾控制逻辑与模拟信号处理的需求。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-79167a2ac37296c85094f3144daff5c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-79167a2ac37296c85094f3144daff5c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-79167a2ac37296c85094f3144daff5c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-79167a2ac37296c85094f3144daff5c8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G4还有许多其他亮点需要大家自己去发现。小电特意为大家准备了节日福利，10块NUCLEO-G431RB 让大家抢先体验，与蝶粉同乐。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8eabc81b6cdaf1a76ae0aca8daf041c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"426\" data-original=\"https://pic2.zhimg.com/v2-8eabc81b6cdaf1a76ae0aca8daf041c1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;426&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"426\" data-original=\"https://pic2.zhimg.com/v2-8eabc81b6cdaf1a76ae0aca8daf041c1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8eabc81b6cdaf1a76ae0aca8daf041c1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>活动时间</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>申请时间：9月27日-10月13日</p><p>公布时间：10月16日左右</p><p>试用报告提交时间：收到开发板后30天内</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>活动流程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、扫码下方二维码，认真填写申请理由，展现有创意的试用计划。我们将根据申请者填写的试用计划可行性及详细程度进行评选。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-fd6d194485d8e33975a78c1b975716aa_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"999\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb\" width=\"999\" data-original=\"https://pic3.zhimg.com/v2-fd6d194485d8e33975a78c1b975716aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;999&#39; height=&#39;999&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"999\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"999\" data-original=\"https://pic3.zhimg.com/v2-fd6d194485d8e33975a78c1b975716aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fd6d194485d8e33975a78c1b975716aa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 试用通知：名单公布后工作人员将以微信或邮件的形式通知申请成功者，如申请者3天不回复算弃权;</p><p>3. 产品寄送：联系到试用者双方确认试用规则后，将产品快递给试用者;</p><p>4. 收到货后试用开始，提交一篇试用报告，试用报告要求100%原创，分为项目概述、硬件设计、软件调试、视频效果演示，要求不少于600字+5张图片。</p><p>5. 产品回收：评测完成后将根据试用报告决定是否可以赠与开发板。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>想要了解STM32G4更多资料请点击：</b></p><a href=\"https://link.zhihu.com/?target=https%3A//www.stmcu.com.cn/Product/pro_detail/cat_code/STM32G4/family/81/sub_family/270/layout/product\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-11889a72714ecdf62a4730a9716013dd_180x120.jpg\" data-image-width=\"1000\" data-image-height=\"414\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32G4 | 产品 | STM32/STM8 | MCU单片机 | 意法半导体STM | STM32/STM8微控制器 | MCU单片机 | 意法半导体STM</a><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/Product/pro_detail/cat_code/STM32G4/family/81/sub_family/270/layout/product\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-11889a72714ecdf62a4730a9716013dd_180x120.jpg\" data-image-width=\"1000\" data-image-height=\"414\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32G4 | 产品 | STM32/STM8 | MCU单片机 | 意法半导体STM | STM32/STM8微控制器 | MCU单片机 | 意法半导体STM</a><p><b>最新官方STM32G4线下培训开启报名，请点击：</b></p><a href=\"https://link.zhihu.com/?target=https%3A//www.stmcu.com.cn/training\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32/STM8微控制器 | MCU单片机 | 意法半导体STM</a><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e402ce2acd8414d39f63bd88ce3b563f_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "中央处理器 (CPU)", 
                    "tagLink": "https://api.zhihu.com/topics/19553309"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84023742", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "STM32G0技术详解 _ Type-C-UCPD", 
            "content": "<p><b>UCPD特性</b></p><p>UCPD支持USB Power Delivery规范的物理层</p><p>  支持Universal Serial Bus Power Delivery specification: Revision 3.0, V1.2；</p><p>  支持Universal Serial Bus Type-C™ Cable 和 Connector Specification: Release 1.3；</p><p>主要功能是PD标准的物理实现，以CC线信号方式对应到Type-C线。</p><p><b>UCPD复位和时钟</b></p><p>使用了一个复位信号nPReset；</p><p>UCPD寄存器的时钟直接由PCIK提供；</p><p>主要功能模块的时钟则由UsbpdCIK供应</p><p>  此时钟可被预分频；</p><p>  接收器在输入时钟为6~18MHz范围内均可正常工作；</p><p>  在6~9MHz时性能较低；</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ad3e6963a3ccc9236e9e9f146506aece_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-ad3e6963a3ccc9236e9e9f146506aece_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;623&#39; height=&#39;495&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"623\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"623\" data-original=\"https://pic3.zhimg.com/v2-ad3e6963a3ccc9236e9e9f146506aece_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ad3e6963a3ccc9236e9e9f146506aece_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>引脚</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e165c70c520313d8408d9c029662ac7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1103\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"1103\" data-original=\"https://pic4.zhimg.com/v2-3e165c70c520313d8408d9c029662ac7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1103&#39; height=&#39;497&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1103\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1103\" data-original=\"https://pic4.zhimg.com/v2-3e165c70c520313d8408d9c029662ac7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e165c70c520313d8408d9c029662ac7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>上拉和下拉电阻</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a5754fa9ee29a67f89f97a0d9a160644_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1087\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb\" width=\"1087\" data-original=\"https://pic1.zhimg.com/v2-a5754fa9ee29a67f89f97a0d9a160644_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1087&#39; height=&#39;463&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1087\" data-rawheight=\"463\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1087\" data-original=\"https://pic1.zhimg.com/v2-a5754fa9ee29a67f89f97a0d9a160644_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a5754fa9ee29a67f89f97a0d9a160644_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>UCPD工作在DFP模式，假设没有反插</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e897a9e95a103bf32f0cfd6aa3b9d6ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"212\" data-rawheight=\"194\" class=\"content_image\" width=\"212\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;212&#39; height=&#39;194&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"212\" data-rawheight=\"194\" class=\"content_image lazy\" width=\"212\" data-actualsrc=\"https://pic4.zhimg.com/v2-e897a9e95a103bf32f0cfd6aa3b9d6ef_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>UCPD工作在UFP模式，假设没有反插</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-446c3b05a917ffe91b9e1ed9f191d228_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"206\" data-rawheight=\"188\" class=\"content_image\" width=\"206\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;206&#39; height=&#39;188&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"206\" data-rawheight=\"188\" class=\"content_image lazy\" width=\"206\" data-actualsrc=\"https://pic1.zhimg.com/v2-446c3b05a917ffe91b9e1ed9f191d228_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>上下拉电阻、死电池</b></p><p>当MCU未上电时，死电池的下拉电阻依然存在</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-738445e992142f2711b95bdd591417cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"191\" class=\"content_image\" width=\"392\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;392&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"191\" class=\"content_image lazy\" width=\"392\" data-actualsrc=\"https://pic2.zhimg.com/v2-738445e992142f2711b95bdd591417cd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当MCU未上电时，CC1和CC2之间表现为开路</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f87ccbc31f8d80329bcb59e22d0c8c3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"152\" class=\"content_image\" width=\"381\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;381&#39; height=&#39;152&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"152\" class=\"content_image lazy\" width=\"381\" data-actualsrc=\"https://pic4.zhimg.com/v2-f87ccbc31f8d80329bcb59e22d0c8c3f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>MCU上电并启动后，先配置UCPD_CR寄存器的ANAMODE（SOURCE或者SINK）和ANASUBMODE</p><p>位，再使能SYS_CONFIG[USBPDstrobe]来使能CC的下拉电阻。</p><p><b>快速角色互换（FRS）信号及检测</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5577a1797e31fd7fb6c9480453a054ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic1.zhimg.com/v2-5577a1797e31fd7fb6c9480453a054ec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;787&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"787\" data-original=\"https://pic1.zhimg.com/v2-5577a1797e31fd7fb6c9480453a054ec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5577a1797e31fd7fb6c9480453a054ec_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FRS信号：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>  需要一个外部的N-MOS晶体管来将CC线拉到地，FRSTX控制外部对应的晶体管；</p><p>  控制信号（FRSTX）表现为一段高电平。</p><p>UCPD_CR寄存器的FRSRXEN位用来控制快速角色互换检测。</p><p><b>UCPD数据控制器</b></p><p>数据控制器负责：</p><p>   USB Type-C插拔检测并去抖，产生中断；</p><p>  FRS检测，并产生中断；</p><p>  CRC校验生成/检查；</p><p>  4b5b编码/解码；</p><p>  BPM编码/解码；</p><p>  有序序列集合（在接收端可选择使用哪个序列）；</p><p>  在接收前导码阶段速率检测；</p><p>  字节级的USB Power Delivery数据传输负载，可产生中断（PD中断或者DMA中断）；</p><p> USB Power Delivery时钟分频（包含一个预分频器）。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2f11a7c1a1cc2f25fa92a21d50e4315c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-2f11a7c1a1cc2f25fa92a21d50e4315c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;498&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-2f11a7c1a1cc2f25fa92a21d50e4315c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2f11a7c1a1cc2f25fa92a21d50e4315c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电压监视和去抖</b></p><p>为了使Type-C的状态机实时保持最新状态，采用连续或者轮询的方式监控CC1和CC2上的</p><p>重大电压事件。</p><p>为了使软件只接收有意义的事件，去抖过滤掉杂波，它与PD数据收发活动一起协同工作。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-75283a6d56614a5cf5b0cf630f5bc836_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"499\" data-original=\"https://pic3.zhimg.com/v2-75283a6d56614a5cf5b0cf630f5bc836_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;499&#39; height=&#39;452&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"499\" data-original=\"https://pic3.zhimg.com/v2-75283a6d56614a5cf5b0cf630f5bc836_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-75283a6d56614a5cf5b0cf630f5bc836_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>PD协议</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cad0e4388eda41bff1631ffd91774ccb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic4.zhimg.com/v2-cad0e4388eda41bff1631ffd91774ccb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;456&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic4.zhimg.com/v2-cad0e4388eda41bff1631ffd91774ccb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cad0e4388eda41bff1631ffd91774ccb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c1c35c11a7cfa57dbd1125e84dae4032_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"817\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb\" width=\"817\" data-original=\"https://pic3.zhimg.com/v2-c1c35c11a7cfa57dbd1125e84dae4032_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;817&#39; height=&#39;326&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"817\" data-rawheight=\"326\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"817\" data-original=\"https://pic3.zhimg.com/v2-c1c35c11a7cfa57dbd1125e84dae4032_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c1c35c11a7cfa57dbd1125e84dae4032_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>序列集</b></p><p>包含4个K-Codes的序列集合，当接收器检测到4个中的3个或者全部4个K-Codes匹配</p><p>时，则认定为合法序列。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e0e6ba5f3bbe30d562709e52604a4763_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb\" width=\"738\" data-original=\"https://pic4.zhimg.com/v2-e0e6ba5f3bbe30d562709e52604a4763_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;738&#39; height=&#39;201&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"738\" data-original=\"https://pic4.zhimg.com/v2-e0e6ba5f3bbe30d562709e52604a4763_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e0e6ba5f3bbe30d562709e52604a4763_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>PD消息包格式</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-8cffa4371442d65272fa2afc03002d98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"749\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"749\" data-original=\"https://pic1.zhimg.com/v2-8cffa4371442d65272fa2afc03002d98_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;749&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"749\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"749\" data-original=\"https://pic1.zhimg.com/v2-8cffa4371442d65272fa2afc03002d98_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-8cffa4371442d65272fa2afc03002d98_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>PD消息包-复位</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7397361a0b527fc932118aeb2c86f85c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"345\" data-rawheight=\"54\" class=\"content_image\" width=\"345\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;345&#39; height=&#39;54&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"345\" data-rawheight=\"54\" class=\"content_image lazy\" width=\"345\" data-actualsrc=\"https://pic1.zhimg.com/v2-7397361a0b527fc932118aeb2c86f85c_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>硬复位是指正在有消息传输的过程中以一种干净利索的方式来中断传输并复位。</p><p>线缆复位与硬复位类似，但不同之处在于它不需要以高优先级的方式来对待。</p><p>步骤：</p><p>等待25µs；</p><p>如果CC不是空闲，则等到它为空闲；</p><p>发送前导码，后面跟4个K-Codes表示的硬复位信号；</p><p>Disable掉通道（如停止发送和接收），复位物理层并通知协议层；</p><p>当协议层请求时重新使能通道。</p><p><b>PD消息包-BIST</b></p><p>取决于协议层请求采取何种具体的BIST，下列两种操作将执行：</p><p>发送BIST测试，写UCPD_CR寄存器的TXMODE和TXSEND位；</p><p>接收BIST测试，写UCPD_CR寄存器的RXMODE位。</p><p>UCPD支持两种模式：</p><p>  BIST测试数据（192-bit模式），适用于发送和接收接收器的握手包，直接抛弃，并没有传递给协议层；</p><p> BIST搬运模式，仅适用于发送，CC线上对应的接收端在此状态下将直接忽略掉此消息。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-96febf5c48b0b6974774746f3c09f753_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb\" width=\"509\" data-original=\"https://pic4.zhimg.com/v2-96febf5c48b0b6974774746f3c09f753_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;509&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"509\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"509\" data-original=\"https://pic4.zhimg.com/v2-96febf5c48b0b6974774746f3c09f753_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-96febf5c48b0b6974774746f3c09f753_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Type-C状态机处理</b></p><p>对于一般的SOURCE和SINK应用场景（也包含DRP应用）。软件必须实现USB Type-C相关的状态机。</p><p>UCPD模块只控制CC线。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-abf8b784c76c23b1e8a58f9f727455cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic1.zhimg.com/v2-abf8b784c76c23b1e8a58f9f727455cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;711&#39; height=&#39;239&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"711\" data-original=\"https://pic1.zhimg.com/v2-abf8b784c76c23b1e8a58f9f727455cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-abf8b784c76c23b1e8a58f9f727455cc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗下的运行模式</b></p><p>提供低功耗操作接口，兼容stop模式，在低功耗模式下有能力检测USB PD消息和FRS信号，UCPD可以配置成唤醒MCU。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7932ce1d294b8937e54893ef9b0688ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"631\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"631\" data-original=\"https://pic4.zhimg.com/v2-7932ce1d294b8937e54893ef9b0688ab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;631&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"631\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"631\" data-original=\"https://pic4.zhimg.com/v2-7932ce1d294b8937e54893ef9b0688ab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7932ce1d294b8937e54893ef9b0688ab_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗模式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ffc0f676f99d58fa011d3dfda0021d88_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-ffc0f676f99d58fa011d3dfda0021d88_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;703&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"703\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"703\" data-original=\"https://pic1.zhimg.com/v2-ffc0f676f99d58fa011d3dfda0021d88_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ffc0f676f99d58fa011d3dfda0021d88_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>中断</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2f6d753e222902a219b68732a5b8b531_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb\" width=\"1082\" data-original=\"https://pic2.zhimg.com/v2-2f6d753e222902a219b68732a5b8b531_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1082&#39; height=&#39;469&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1082\" data-original=\"https://pic2.zhimg.com/v2-2f6d753e222902a219b68732a5b8b531_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2f6d753e222902a219b68732a5b8b531_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>相关外设</b></p><p>参考下述相关外设的培训链接：</p><p>STM32G0 DMA controller (DMA)</p><p>Reset and Clock Controller (RCC)</p><p>Extended Interrupt and Event Controller (EXTI)</p><p>System Configuration Controller (SYSCFG)</p><p>Power Controller (PWR)</p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b> </p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "USB Type-C", 
                    "tagLink": "https://api.zhihu.com/topics/20007727"
                }, 
                {
                    "tag": "USB", 
                    "tagLink": "https://api.zhihu.com/topics/19559049"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83848593", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 12, 
            "title": "想要单片机顺手，搞懂这些三极管知识！", 
            "content": "<p>实际上，只要你了解了<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1079\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三极管</a></b>的特性对你使用<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_mcu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></b>就顺手很多了。大家其实也都知道三极管具有放大作用，但如何去真正理解它却是你以后会不会使用大部分<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子</a><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_dianlu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></b>和1C的关键。<br/><br/><br/>我们一般所说的普通三极管是具有电流放大作用的器件。其它的三极管也都是在这个原理基础上功能延伸。三极管的符号如下图左边，我们就以NPN型三极管为例来说说它的工作原理。由于三极管是由<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/967\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二极管</a></b>演化而来的，所以大家记住PN结永远都是P指向N的，这样PNP还是XPN—下就很清楚了.<br/><br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1ab21950dfd2a5b6c7934a34024657f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic1.zhimg.com/v2-1ab21950dfd2a5b6c7934a34024657f4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;650&#39; height=&#39;538&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"650\" data-original=\"https://pic1.zhimg.com/v2-1ab21950dfd2a5b6c7934a34024657f4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1ab21950dfd2a5b6c7934a34024657f4_b.jpg\"/></figure><p><br/><br/><br/>细管子里藍色的小水流冲动杠杆使大水管的阀门开大，就可允许较大红色的水流通过这个阀门。当蓝色水流越大，也就使大管中红色的水流更大。如果放大倍数是100,那么当蓝色小水流为1千克/小时，那么就允许大管子流过100千克/小时的水。三极管的原理也跟这个一样，放大倍数为100时，当lb(基极电流)为1M时，就允许100mA的电流通过Ice。我这么说大家能理解吗？<br/><br/><br/>这个原理大家可能也都知道，但是把它用在电路里的状况能理解，那单片机的运用就少了一大障碍了。最常用的连接如下图。<br/><br/><br/><br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2092b0d2a022d8ce093e961a20026824_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"317\" class=\"content_image\" width=\"326\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;326&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"326\" data-rawheight=\"317\" class=\"content_image lazy\" width=\"326\" data-actualsrc=\"https://pic1.zhimg.com/v2-2092b0d2a022d8ce093e961a20026824_b.jpg\"/></figure><p><br/><br/><br/>我们来分析一下这个电路，如果它的放大倍数是100,基极电压我们不计。基极电流就是10V+10K=lmA，集电极电流就应该是100mA。根据欧姆定律，这样Rc上的电压就是0.1AX50〇=5V。那么剩下的5V就吃在了三极管的C、E极上了。<br/><br/><br/>好！现在我们假如让Rb为1K，那么基极电流就是10V+lK=10mA，这样按照放大倍数100算，Ic就是不是就为1000mA也就是1A了呢？假如真的为1安，那么Rc上的电压为1AX50Q=50V。啊？50V!都超过<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_power_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源</a></b>电压了，三极管都成发电机了吗？其实不是这样的。见下图：<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-68c2919363f2e63604f16b3f6ba63c3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"362\" class=\"content_image\" width=\"316\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;316&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"362\" class=\"content_image lazy\" width=\"316\" data-actualsrc=\"https://pic2.zhimg.com/v2-68c2919363f2e63604f16b3f6ba63c3d_b.jpg\"/></figure><p><br/><br/><br/>我们还是用水管内流水来比喻电流，当这个控制电流为10mA时使主水管上的阀开大到能流过1A的电流，但是不是就能有1A的电流流过呢？不是的，因为上面还有个电阻，它就相当于是个固定开度的阀门，它串在这个主水管的上面，当下面那个可控制的阀开度到大于上面那个固定电阻的开度时，水流就不会再增大而是等于通过上面那个固定阀开度的水流了，因此，下面的三极管再开大开度也没有用了。<br/><br/><br/>因此我们可以计算出那个固定电阻的最大电流10V+50Q=0.2A也就是200mA。就是说在电路中三极管基极电流增大集电极的电流也增大，当基极电流lb增大到2mA时，集电极电流就增大到了200mA。当基极电流再增大时，集电极电流己不会再增大，就在200mA不动了。此时上面那个电阻也就是起限流作用了。<br/><br/><br/>共发射极电路NPN管，ib变大时，实质上是给基区注入空穴，如果是这样的话，注入的空穴将会中和更多发射极过来的电子，理论上ic便会变得更小才对啊，为什么ic还会以相应倍数P放大呢？<br/><br/><br/>图中所画的是三极管内部电流流向【NPN型管，箭头指向代表电流方向】，现在基极电流增大到2,说明在基区有更多的电子被基区空穴所复合，按理来说，集电极电流应该减少啊【因为有更多的电子在基区被复合，流到集电区的电子就少了】，但是现实情况却是集电极电流被放大到了6。显而易见，我在增大基极电流的同时，发射极电流也在增大，并且基极电流增大一倍，发射极电流也增大一倍，这是为什么？<br/><br/><br/>换句话说，我增大基极电流一倍，则从发射区到达基区的电子将会被多出一倍的空穴所复合，但是，又是什么原因使得此时此刻发射极发射出了比原来多出一倍的电子，比如右图比原来【左图】多出了1个单位的电子被基区空穴复合，但同时，发射区却多射出了4个单位的电子。我人为的增加了1个单位的基极电流，而发射极却多射出了4个单位的电子，增加了4单位的电流，why?<br/><br/><br/>不要用公式ie=ib-ic=(1+3)ib说明，请从三极管内部载流子的微观运动情况加以分析说明.<br/><br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3e888724fcd033adae88700580101f2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic4.zhimg.com/v2-3e888724fcd033adae88700580101f2f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;650&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"650\" data-original=\"https://pic4.zhimg.com/v2-3e888724fcd033adae88700580101f2f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3e888724fcd033adae88700580101f2f_b.jpg\"/></figure><p><br/><br/><br/><br/>1、发射区向基区发射电子<br/><br/><br/>由于发射结处于正向偏置，多说载流子的扩散运动加强，发射区的多说载流子（电子）向基区扩散（称为发射），同样基区的多数载流子（空穴）也向发射区扩散，但由于发射区的电子浓度远远高于基区的空穴浓度，两者比较可忽略基区空穴向发射区的扩散。由于两个电源Eb和Ec的负极接在发射极，所以发射区向基区发射区向基区的电子都可以从电源得到补充，这样就形成了发射极电流le.<br/><br/><br/>2、电子在基区的扩散与复合<br/><br/><br/>从发射区发射到基区的电子到达基区后，由于靠近发射结附近的电子浓度高于靠近集电结附近的电子浓度，所以这些电子会向集电结附近继续扩散。在扩散的过程中，有小部分电子会与基区的空穴复合，由于电源Eb的正极与基极相连，这些复合掉的空穴均可由Eb补充，因而形成了基极电流lb。<br/><br/><br/>因基区做的很薄，电子在扩散过程中通过基区的时间很短，加上基区的空穴浓度很低，所以从发射区发射到基区的电子在基区继续向集电结附近扩散的过程中，与基区空穴复合的机会很少，因而基电极的电流很小，大部分电子都能通过基区而到达集电结附近，所以集电极电流很大。更多交流学习请私窝132陆零伍陆2029（vx）</p><p></p>", 
            "topic": [
                {
                    "tag": "三极管", 
                    "tagLink": "https://api.zhihu.com/topics/19670980"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": [
                {
                    "userName": "向导", 
                    "userLink": "https://www.zhihu.com/people/7dbfef7b48addedc906fe3c12dafb897", 
                    "content": "写的不错，感谢投稿[握手]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83849247", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 2, 
            "title": "17种常见单片机常用设计模块", 
            "content": "<p>以下分享17种<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_mcu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></b>常用<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_dianlu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></b>设计模块，包括：双路232<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_wireless_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">通信</a></b>电路3线连接方式，<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1079\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三极管</a></b>串口通信，单路232通信电路，<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/576\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB</a></b>转232电路等。<br/><br/>1、双路232通信电路3线连接方式，对应的是母头，工作电压5V，可以使用MAX202或MAX232.<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-211debeaa59424ee99728653ee44425b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-211debeaa59424ee99728653ee44425b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-211debeaa59424ee99728653ee44425b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-211debeaa59424ee99728653ee44425b_b.jpg\"/></figure><p><br/><br/>2、三极管串口通信<br/><br/>本电路是用三极管搭的，电路简单，成本低，但是问题，一般在低波特率下是非常好的。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7a0e4229d68c484d748c56c49b1327c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-7a0e4229d68c484d748c56c49b1327c4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-7a0e4229d68c484d748c56c49b1327c4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7a0e4229d68c484d748c56c49b1327c4_b.jpg\"/></figure><p><br/><br/>3、单路232通信电路<br/><br/>三线方式，与上面的三级管搭的完全等效。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-b064742d357b139b6d7977646d31eb7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-b064742d357b139b6d7977646d31eb7d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-b064742d357b139b6d7977646d31eb7d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-b064742d357b139b6d7977646d31eb7d_b.jpg\"/></figure><p><br/><br/>4、USB转232电路<br/><br/>采用的是PL2303HX,价格便宜，稳定性还不错。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-14642e5bcc3a7dbcefd648d064018885_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-14642e5bcc3a7dbcefd648d064018885_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;297&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-14642e5bcc3a7dbcefd648d064018885_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-14642e5bcc3a7dbcefd648d064018885_b.jpg\"/></figure><p><br/><br/>5、SP706S复位电路<br/><br/>带看门狗和手动复位，价格便宜（美信的贵很多），R4为调试用，调试完后<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/853\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">焊接</a></b>好R4。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0e54aab779ac385885256fe965410d24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-0e54aab779ac385885256fe965410d24_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-0e54aab779ac385885256fe965410d24_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0e54aab779ac385885256fe965410d24_b.jpg\"/></figure><p><br/><br/>6、SD卡模块电路（带锁）本电路与SD卡的封装有关，注意与封装对应。此电路可以通过端口控制SD卡的<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_power_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源</a></b>，比较完善，可以用于5V和3.3V。但是要注意，有些器件的使用，5V和3.3是不一样的。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f351bb9e94f503e7b93ae959791874e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-f351bb9e94f503e7b93ae959791874e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-f351bb9e94f503e7b93ae959791874e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f351bb9e94f503e7b93ae959791874e1_b.jpg\"/></figure><p><br/><br/><br/>7、LCM12864液晶模块（ST7920）本电路是常见的12864电路，价格便宜，带中文字库。可以通过PSB端口的电平来设置其工作在串口模式还是并行模式，带背光控制功能。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-810b210ea59ceb4d6751baf36cad133a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-810b210ea59ceb4d6751baf36cad133a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;279&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"279\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-810b210ea59ceb4d6751baf36cad133a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-810b210ea59ceb4d6751baf36cad133a_b.jpg\"/></figure><p><br/><br/>8、LCD1602字符液晶模块(KS0066)最常用的字符液晶模块，只能显示数字和字符，可4位或8位控制，带背光功能。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c05a48ec48c2659a18b5f2b50f2558ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-c05a48ec48c2659a18b5f2b50f2558ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-c05a48ec48c2659a18b5f2b50f2558ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c05a48ec48c2659a18b5f2b50f2558ed_b.jpg\"/></figure><p><br/><br/>9、全双工RS485电路（带保护功能）带有保护功能，全双工4线通信模式，适合远距离通信用。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6d6ef5bcddfe95640967e6580b9440df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-6d6ef5bcddfe95640967e6580b9440df_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;195&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"195\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-6d6ef5bcddfe95640967e6580b9440df_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6d6ef5bcddfe95640967e6580b9440df_b.jpg\"/></figure><p><br/><br/>10、RS485半双工通信模块<br/><br/>可以通过选择端口选择数据的传输方向，带保护功率。此模块只能工作在5V.<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-155322b7b218a9ecc31f34c026d8a25a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-155322b7b218a9ecc31f34c026d8a25a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-155322b7b218a9ecc31f34c026d8a25a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-155322b7b218a9ecc31f34c026d8a25a_b.jpg\"/></figure><p><br/><br/><br/>11、<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_arm_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></b> JTAG<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_proteus_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">仿真</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></b>电路<br/><br/>比较完善，可以应用在常规的ARM<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/%3Fu%3D999\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">芯片</a></b>下，具有有自动下载功能，可以用JLINK或ULINK.<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-48b5df419456a4a71aa92246f065171b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"418\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-48b5df419456a4a71aa92246f065171b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;418&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"418\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-48b5df419456a4a71aa92246f065171b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-48b5df419456a4a71aa92246f065171b_b.jpg\"/></figure><p><br/><br/>12、5V<b><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/article/83/116/2016/20160104397743.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源模块</a></b>这个电路比较简单，如果用直插可以达到1.5A，如果用<b><a href=\"https://link.zhihu.com/?target=http%3A//smt.hqchip.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">贴片</a></b>的可以到达1A。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1603d8d10b87be607d732688dd63ef39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-1603d8d10b87be607d732688dd63ef39_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-1603d8d10b87be607d732688dd63ef39_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1603d8d10b87be607d732688dd63ef39_b.jpg\"/></figure><p><br/><br/>13、3.3电源模块可以到达800mA，价格非常便宜，也有相应的1.8/1.2的芯片，可以直接替换。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-76f264d4a85f8a9a878375c0d23984c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-76f264d4a85f8a9a878375c0d23984c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;170&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-76f264d4a85f8a9a878375c0d23984c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-76f264d4a85f8a9a878375c0d23984c3_b.jpg\"/></figure><p><br/><br/>14、最常用的<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/848\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开关</a></b>电源<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2bddbc3a0306c1663050fb94141bdc73_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-2bddbc3a0306c1663050fb94141bdc73_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;232&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-2bddbc3a0306c1663050fb94141bdc73_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2bddbc3a0306c1663050fb94141bdc73_b.jpg\"/></figure><p><br/><br/>15、DS1302数字<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></b>一款非常普及的时钟电路，好用，成本低。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1c6b1fe1af9186e09ec0234ce2e46945_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-1c6b1fe1af9186e09ec0234ce2e46945_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;232&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-1c6b1fe1af9186e09ec0234ce2e46945_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1c6b1fe1af9186e09ec0234ce2e46945_b.jpg\"/></figure><p><br/><br/>16、AT24C02（EEPROM）最常用的EEPROM电路。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-15b75e8849cf832819a8e4cedecaeb07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-15b75e8849cf832819a8e4cedecaeb07_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;211&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-15b75e8849cf832819a8e4cedecaeb07_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-15b75e8849cf832819a8e4cedecaeb07_b.jpg\"/></figure><p><br/><br/>17、<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/802\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">蜂鸣器</a></b>驱动这个电路简单就不多说了。<br/><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bb34b06ab6a7cf4f2601f910e664ce1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-bb34b06ab6a7cf4f2601f910e664ce1c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-bb34b06ab6a7cf4f2601f910e664ce1c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bb34b06ab6a7cf4f2601f910e664ce1c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>更多交流可以私vx昵称</p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "电子电路", 
                    "tagLink": "https://api.zhihu.com/topics/19695857"
                }, 
                {
                    "tag": "电路", 
                    "tagLink": "https://api.zhihu.com/topics/19570604"
                }
            ], 
            "comments": [
                {
                    "userName": "向导", 
                    "userLink": "https://www.zhihu.com/people/7dbfef7b48addedc906fe3c12dafb897", 
                    "content": "<p>很实用的总结，感谢，看您文章写了100多篇了，是真正在分享的工程师，</p><a class=\"comment_sticker\" href=\"https://pic2.zhimg.com/v2-90359a720808ff45062287127cfa1039.gif\" data-width=\"\" data-height=\"\">[爱心]</a>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83844112", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "STM32G0技术详解 _ Type-C-PD协议", 
            "content": "<p>这篇文章主要介绍一下<b>Type-C的PD协议</b>。</p><p><b>USB PD包</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5179f62ea7ed560ac52f937e57530533_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"72\" class=\"origin_image zh-lightbox-thumb\" width=\"466\" data-original=\"https://pic4.zhimg.com/v2-5179f62ea7ed560ac52f937e57530533_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;466&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"72\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"466\" data-original=\"https://pic4.zhimg.com/v2-5179f62ea7ed560ac52f937e57530533_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5179f62ea7ed560ac52f937e57530533_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>需要注意的是，PD仅在一条单线上通讯，所有PD包里的东西都是串行的。</p><p><b>前导码</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-56640accc133f46af5b29ed3c2d5d84f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb\" width=\"427\" data-original=\"https://pic4.zhimg.com/v2-56640accc133f46af5b29ed3c2d5d84f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;427&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"427\" data-original=\"https://pic4.zhimg.com/v2-56640accc133f46af5b29ed3c2d5d84f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-56640accc133f46af5b29ed3c2d5d84f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>前导码是以0开始的包含64个0和1的序列，它本身是不进行4b5b编码的。</p><p><b>数据包开始标识</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1b35a28132d0e072970e44f3e7a23d84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"376\" data-rawheight=\"149\" class=\"content_image\" width=\"376\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;376&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"376\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"376\" data-actualsrc=\"https://pic1.zhimg.com/v2-1b35a28132d0e072970e44f3e7a23d84_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>SOP*是一个通用术语，指不同数据包的开始，它向接受者指明包的开始，指示谁是此消息的接受者。</p><p><b>USB PD消息</b></p><p></p><p>控制消息（16bit）：管理接口合作伙伴之间的消息流或进行交换不需要额外数据的消息。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5b5effaca4db3bf8ec4199bd2cce34d4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb\" width=\"592\" data-original=\"https://pic1.zhimg.com/v2-5b5effaca4db3bf8ec4199bd2cce34d4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;592&#39; height=&#39;55&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"55\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"592\" data-original=\"https://pic1.zhimg.com/v2-5b5effaca4db3bf8ec4199bd2cce34d4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5b5effaca4db3bf8ec4199bd2cce34d4_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>数据消息（48-240bit）：至少一个数据对象，最多7个数据对象。</p><p>  发现和协商电源管理；</p><p>  系统自测BIST；</p><p>  厂商自定义（VDM）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-07b9f558d66fcb14efb7313e4b919b4b_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb\" width=\"762\" data-original=\"https://pic4.zhimg.com/v2-07b9f558d66fcb14efb7313e4b919b4b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;762&#39; height=&#39;52&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"52\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"762\" data-original=\"https://pic4.zhimg.com/v2-07b9f558d66fcb14efb7313e4b919b4b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-07b9f558d66fcb14efb7313e4b919b4b_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>扩展消息（26-260byte）</p><p>  用于源和电池信息的交互；</p><p>  使用安全；</p><p>  用于固件更新；</p><p>  供应商定义。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5d8c05e5fe649be13ea6d0706f6822a0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"45\" class=\"origin_image zh-lightbox-thumb\" width=\"895\" data-original=\"https://pic1.zhimg.com/v2-5d8c05e5fe649be13ea6d0706f6822a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;895&#39; height=&#39;45&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"45\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"895\" data-original=\"https://pic1.zhimg.com/v2-5d8c05e5fe649be13ea6d0706f6822a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5d8c05e5fe649be13ea6d0706f6822a0_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>消息Summary</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-120c20f50d6b17a71215a152c599d668_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"778\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb\" width=\"778\" data-original=\"https://pic1.zhimg.com/v2-120c20f50d6b17a71215a152c599d668_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;778&#39; height=&#39;475&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"778\" data-rawheight=\"475\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"778\" data-original=\"https://pic1.zhimg.com/v2-120c20f50d6b17a71215a152c599d668_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-120c20f50d6b17a71215a152c599d668_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USB PD消息头格式</b></p><p>消息头格式：</p><p>  每一个消息包含一个消息头；</p><p>  消息头包含关于消息和PD端口功能的基本信息。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a2b25f0ac315598fe479a3f7e9678b1f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"311\" class=\"content_image\" width=\"381\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;381&#39; height=&#39;311&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"381\" data-rawheight=\"311\" class=\"content_image lazy\" width=\"381\" data-actualsrc=\"https://pic4.zhimg.com/v2-a2b25f0ac315598fe479a3f7e9678b1f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6440e23b9140c82d67cf73a12d0d4a15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"420\" data-rawheight=\"206\" class=\"content_image\" width=\"420\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;420&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"420\" data-rawheight=\"206\" class=\"content_image lazy\" width=\"420\" data-actualsrc=\"https://pic2.zhimg.com/v2-6440e23b9140c82d67cf73a12d0d4a15_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>控制消息</b></p><p>控制消息（16bit）：管理端口合作伙伴之间的消息流或进行交换不需要额外数据的消息。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f6574ec7d7a810e9b96b64ea1b6b2b0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"571\" data-original=\"https://pic4.zhimg.com/v2-f6574ec7d7a810e9b96b64ea1b6b2b0b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;571&#39; height=&#39;560&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"571\" data-original=\"https://pic4.zhimg.com/v2-f6574ec7d7a810e9b96b64ea1b6b2b0b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f6574ec7d7a810e9b96b64ea1b6b2b0b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>数据消息</b></p><p>数据消息（48-240bit），至少一个数据对象，最多7个数据对象。数据消息应该由消息头组成，后面跟着一个或多个数据对象。数据消息很容易识别，因为消息头中的数据对象字段的数量是非零值。它包含下面几类数据对象：</p><p>  BIST数据对象（BDO）、电力数据对象（PDO）、请求数据对象（RDO）、厂商定义数据对象（VDO）、电池状态数据对象（BSDO）、警报数据对象（ADO）。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e87eee5a12e18ff2bf0d916a5f33c39a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-e87eee5a12e18ff2bf0d916a5f33c39a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-e87eee5a12e18ff2bf0d916a5f33c39a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e87eee5a12e18ff2bf0d916a5f33c39a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>CRC&amp;EOP</b></p><p>CRC是32位的，引用头和所有数据。</p><p>不包括前言、SOP和EOP；</p><p>多项式=0x04C1 1DB7;</p><p>初始值=0XFFFF FFFF</p><p>EOP是单k码（5位）</p><p>它触发当前帧的CRC结束（开始计算）；</p><p>它可以在任何时候发送，以提前结束一个数据包始。</p><p><b>SOURCE供电能力</b></p><p>电力能力消息：</p><p>消息类型为SOURCE为00001 SINK为00100；</p><p>至少有一个电力数据对象；</p><p>如果还有其他的固定支出的对象，应该是从低到高的顺序；</p><p>如果有电池对象，按从低到高的电压顺序发送；</p><p>如果有可变电力供应对象，按从低到高的顺序；</p><p>如果有PPS对象，按从低到高的电压顺序。</p><p>功能消息还应包含发送端口的消息，后面跟着最多6个额外的power数据对象。</p><p>能力信息中的PDOs应按以下顺序发送：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1a0f61ed126490e65b48f7e40c5f11f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb\" width=\"666\" data-original=\"https://pic3.zhimg.com/v2-1a0f61ed126490e65b48f7e40c5f11f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;666&#39; height=&#39;115&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"115\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"666\" data-original=\"https://pic3.zhimg.com/v2-1a0f61ed126490e65b48f7e40c5f11f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1a0f61ed126490e65b48f7e40c5f11f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>允许转换</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9cc55981ef8998d1869bba9320b771c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"172\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic2.zhimg.com/v2-9cc55981ef8998d1869bba9320b771c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;172&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"172\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic2.zhimg.com/v2-9cc55981ef8998d1869bba9320b771c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9cc55981ef8998d1869bba9320b771c9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-41b6d511cd29f21614d4c012e3385f8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic4.zhimg.com/v2-41b6d511cd29f21614d4c012e3385f8b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;488&#39; height=&#39;276&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"488\" data-original=\"https://pic4.zhimg.com/v2-41b6d511cd29f21614d4c012e3385f8b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-41b6d511cd29f21614d4c012e3385f8b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ed11560f742eb98b7d1e645f946fc55c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-ed11560f742eb98b7d1e645f946fc55c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;675&#39; height=&#39;410&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"675\" data-original=\"https://pic1.zhimg.com/v2-ed11560f742eb98b7d1e645f946fc55c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ed11560f742eb98b7d1e645f946fc55c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>VConn的交换顺序</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d1e36af2a51cd8344aa324459b2aafb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic3.zhimg.com/v2-d1e36af2a51cd8344aa324459b2aafb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;722&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"722\" data-original=\"https://pic3.zhimg.com/v2-d1e36af2a51cd8344aa324459b2aafb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d1e36af2a51cd8344aa324459b2aafb2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>数据角色转换</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cba9558450b530c6a7b88516979e58d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"474\" data-original=\"https://pic2.zhimg.com/v2-cba9558450b530c6a7b88516979e58d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;474&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"474\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"474\" data-original=\"https://pic2.zhimg.com/v2-cba9558450b530c6a7b88516979e58d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cba9558450b530c6a7b88516979e58d9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>厂商自定义信息</b></p><p>可分为结构化（SVDM）和非结构化（VDM）。</p><p>非结构化：非结构化VDM没有在VDM报头中定义B14……0的内容。它们的定义和使用时VID指出的供应商的唯一责任。当PD上出现硬复位时，端口合作伙伴和电缆插头将退出使用非结构化VDM进入的任何状态；</p><p> 非结构化VDMs只能在有明确连接的情况下使用；</p><p>  在订立明确的连接前，不得发送非结构化的VDMs，接收时应予以忽略；</p><p>  只有DFP应该是非结构化VDMs的发起者；</p><p>  只有UFP或电缆插头应作为非结构化VDM的响应者；</p><p>  在任何其他情况下，不得启动或响应非结构化VDMs；</p><p>  命令序列应该是可中断的，例如，由于需要与电源相关的AMS；</p><p>  非结构化VDMs只能在主动模式下的模态操作中使用；</p><p> 非结构化VDMs可以与SOP*包一起使用；</p><p>  当DFP或UFP不支持非结构化VDMs或不识别VID时，它将返回一条Not_Supported消息。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0c40b5b1c0bb7b5fcbd1c813a5fd8d50_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"105\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic1.zhimg.com/v2-0c40b5b1c0bb7b5fcbd1c813a5fd8d50_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;105&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"105\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic1.zhimg.com/v2-0c40b5b1c0bb7b5fcbd1c813a5fd8d50_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0c40b5b1c0bb7b5fcbd1c813a5fd8d50_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>结构化：将VDM类型字段设置为1定义了在结构化VDM报头中使用比特B14……0；</p><p> 结构化VDMs仅在有明确连接的情况下使用，但下列情况除外：在建立一个明确的契约之前，一个源可能会发出Discover身份信息，作为发起者，使用SOP*的信息包将其发送到电缆插头。</p><p>  除了输入模式和退出模式命令之外，任何端口都可以是结构化VDMs的发起者，发起者应仅由DFP发起；</p><p>  电缆插头只能作为结构化VDMs的应答者；</p><p>  在任何其他情况下，不应启动或响应结构化VDMs；</p><p> 当DFP或UFP不支持结构化VDMs时，任何接收到的结构化VDMs都应返回一个Not_Supported消息；</p><p>  当电缆插头不支持结构化VDMs时，接收的任何结构化VDMs都应被忽略；</p><p>  一个DFP、UFP或电缆插头，它支持结构化VDMs，并接收一个结构化VDM的SVID，它不承认，应该用NAK命令回复；</p><p>  结构化的VDM命令序列应该是可中断的，；例如，由于需要与电源相关的AMS。</p><p><b>VDM命令</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ab109ea1e3253061d3793d54a4bdf3f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-ab109ea1e3253061d3793d54a4bdf3f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;664&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"664\" data-original=\"https://pic3.zhimg.com/v2-ab109ea1e3253061d3793d54a4bdf3f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ab109ea1e3253061d3793d54a4bdf3f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Discover VDM ACK</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7f1a232f96ccb490998c62cfe57e0e71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-7f1a232f96ccb490998c62cfe57e0e71_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;752&#39; height=&#39;249&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-7f1a232f96ccb490998c62cfe57e0e71_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7f1a232f96ccb490998c62cfe57e0e71_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2ed9f9bf7de4c9ef84710b6fa95e9e13_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"742\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb\" width=\"742\" data-original=\"https://pic4.zhimg.com/v2-2ed9f9bf7de4c9ef84710b6fa95e9e13_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;742&#39; height=&#39;370&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"742\" data-rawheight=\"370\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"742\" data-original=\"https://pic4.zhimg.com/v2-2ed9f9bf7de4c9ef84710b6fa95e9e13_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2ed9f9bf7de4c9ef84710b6fa95e9e13_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Discover SVIDs命令、应答</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-952e4e62eb1951e6b77856006a4f35cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"701\" data-original=\"https://pic1.zhimg.com/v2-952e4e62eb1951e6b77856006a4f35cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;701&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"701\" data-original=\"https://pic1.zhimg.com/v2-952e4e62eb1951e6b77856006a4f35cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-952e4e62eb1951e6b77856006a4f35cc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-643d3d6bb8da248586aec225426f2cd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb\" width=\"649\" data-original=\"https://pic3.zhimg.com/v2-643d3d6bb8da248586aec225426f2cd6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;649&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"649\" data-rawheight=\"340\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"649\" data-original=\"https://pic3.zhimg.com/v2-643d3d6bb8da248586aec225426f2cd6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-643d3d6bb8da248586aec225426f2cd6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a413fc6c3f1277807baa0e9e0b37278a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"728\" data-original=\"https://pic3.zhimg.com/v2-a413fc6c3f1277807baa0e9e0b37278a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;728&#39; height=&#39;405&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"728\" data-original=\"https://pic3.zhimg.com/v2-a413fc6c3f1277807baa0e9e0b37278a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a413fc6c3f1277807baa0e9e0b37278a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Discover Mode命令、应答</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8a87fd67f8bae6d225ac098ef9fb6445_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"125\" class=\"origin_image zh-lightbox-thumb\" width=\"667\" data-original=\"https://pic2.zhimg.com/v2-8a87fd67f8bae6d225ac098ef9fb6445_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;667&#39; height=&#39;125&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"667\" data-rawheight=\"125\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"667\" data-original=\"https://pic2.zhimg.com/v2-8a87fd67f8bae6d225ac098ef9fb6445_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8a87fd67f8bae6d225ac098ef9fb6445_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ea94f02cd4eb9037af95584fb06ada89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-ea94f02cd4eb9037af95584fb06ada89_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;740&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"740\" data-original=\"https://pic2.zhimg.com/v2-ea94f02cd4eb9037af95584fb06ada89_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ea94f02cd4eb9037af95584fb06ada89_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e915ddb85e431831ec89ae34353444f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic2.zhimg.com/v2-e915ddb85e431831ec89ae34353444f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;694&#39; height=&#39;403&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"694\" data-original=\"https://pic2.zhimg.com/v2-e915ddb85e431831ec89ae34353444f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e915ddb85e431831ec89ae34353444f5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Enter Mode命令、应答</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-da8382c584f1b82d61cca1e31a54d156_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"724\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb\" width=\"724\" data-original=\"https://pic3.zhimg.com/v2-da8382c584f1b82d61cca1e31a54d156_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;724&#39; height=&#39;392&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"724\" data-rawheight=\"392\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"724\" data-original=\"https://pic3.zhimg.com/v2-da8382c584f1b82d61cca1e31a54d156_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-da8382c584f1b82d61cca1e31a54d156_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-401379a09c539059293e3cbbd642e243_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"369\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic4.zhimg.com/v2-401379a09c539059293e3cbbd642e243_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;722&#39; height=&#39;369&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"369\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"722\" data-original=\"https://pic4.zhimg.com/v2-401379a09c539059293e3cbbd642e243_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-401379a09c539059293e3cbbd642e243_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Exit Mode命令、应答</b></p><p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-47652737d0a5602bc25e901b1dc795d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic4.zhimg.com/v2-47652737d0a5602bc25e901b1dc795d7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;412&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic4.zhimg.com/v2-47652737d0a5602bc25e901b1dc795d7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-47652737d0a5602bc25e901b1dc795d7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8bed04cf7aa082805ca32677294abc2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb\" width=\"710\" data-original=\"https://pic4.zhimg.com/v2-8bed04cf7aa082805ca32677294abc2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;710&#39; height=&#39;385&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"710\" data-rawheight=\"385\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"710\" data-original=\"https://pic4.zhimg.com/v2-8bed04cf7aa082805ca32677294abc2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8bed04cf7aa082805ca32677294abc2b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b> </p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "USB Type-C", 
                    "tagLink": "https://api.zhihu.com/topics/20007727"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83664156", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 5, 
            "title": "STM32G0技术详解 _ USB Type-C的物理接口", 
            "content": "<p>这篇文章主要是介绍一下<b>USB Type-C</b>的物理接口。</p><p><b>USB的再次演变</b></p><p>USB从最早的数据传输到它能够提供5V 500mA的电流能力，现在新的一次演变从数据接口演变为利用数据接口提供电源的主要设备。</p><p>USB Type-C有几个突出的<b>特点</b>：</p><p>1、 支持正反插，提高了系统的灵活性；</p><p>2、 提供更多电力，USB Power Delivery最多可提供100W。也就是5V 20A的提供能力；</p><p>3、 支持更多协议，比如DP接口、HDMI接口、VGA等等；</p><p>4、 速度更快，USB 3.1的速度可以达到10 Gbps。</p><p><b>USB Type-C和USB Power Delivery</b></p><p>计算机可以完全用一个端口来掌握所有的功能</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-75d8df15634cad751034607c6544737c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-75d8df15634cad751034607c6544737c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;652&#39; height=&#39;434&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"434\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"652\" data-original=\"https://pic1.zhimg.com/v2-75d8df15634cad751034607c6544737c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-75d8df15634cad751034607c6544737c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>USB Type-C提高了用户体验并且有助于保护环境，提供了新型、令人兴奋的主机和器件外形，其尺寸、工业设计和样式都是重要因素，与现有的USB主机和器件硅解决方案无缝对接，提高了连接USB器件的简易性，侧重于最大限度地减少用户对插头和线缆方向的困惑。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5c29c1aa4bb8b683b62d7b41670c6b0f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic4.zhimg.com/v2-5c29c1aa4bb8b683b62d7b41670c6b0f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;773&#39; height=&#39;343&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"343\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"773\" data-original=\"https://pic4.zhimg.com/v2-5c29c1aa4bb8b683b62d7b41670c6b0f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5c29c1aa4bb8b683b62d7b41670c6b0f_b.jpg\"/></figure><p><b>物理接口介绍</b></p><p><b>引脚功能</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3d734a2b4a8c20c1deef8f06dddb5e6e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"837\" data-original=\"https://pic3.zhimg.com/v2-3d734a2b4a8c20c1deef8f06dddb5e6e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;837&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"837\" data-original=\"https://pic3.zhimg.com/v2-3d734a2b4a8c20c1deef8f06dddb5e6e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-3d734a2b4a8c20c1deef8f06dddb5e6e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Type-C配置处理</b></p><p>Type-C插座、插头和线，在连接的时候，它包含一系列的配置处理过程，它的主要目的是检测是一个DFP连接还是一个UFP连接和管理VBUS。</p><p>配置过程：</p><p>  SRC to SINK插入或者拔出检测；</p><p>  插入的正反方向检测；</p><p>  初始化电源（SRC-SINK）和建立数据关系。</p><p><b>USB-C线上下拉电阻</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bd403fa8bce644fe9be137a59558195c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic1.zhimg.com/v2-bd403fa8bce644fe9be137a59558195c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;714&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"714\" data-original=\"https://pic1.zhimg.com/v2-bd403fa8bce644fe9be137a59558195c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bd403fa8bce644fe9be137a59558195c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USB-C ADAPTER上下拉电阻</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec88c232fc9d892161484ea661efabbe_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb\" width=\"760\" data-original=\"https://pic3.zhimg.com/v2-ec88c232fc9d892161484ea661efabbe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;760&#39; height=&#39;107&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"107\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"760\" data-original=\"https://pic3.zhimg.com/v2-ec88c232fc9d892161484ea661efabbe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec88c232fc9d892161484ea661efabbe_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>供电端通过Rp的阻值来告诉sink端自己的默认供电电流：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-936db9841b8e758d7f3f78823f5879aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb\" width=\"569\" data-original=\"https://pic3.zhimg.com/v2-936db9841b8e758d7f3f78823f5879aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;569&#39; height=&#39;163&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"569\" data-rawheight=\"163\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"569\" data-original=\"https://pic3.zhimg.com/v2-936db9841b8e758d7f3f78823f5879aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-936db9841b8e758d7f3f78823f5879aa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c0c998bf1ed2e7f3f4d0760c2d4fa210_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb\" width=\"592\" data-original=\"https://pic1.zhimg.com/v2-c0c998bf1ed2e7f3f4d0760c2d4fa210_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;592&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"592\" data-rawheight=\"150\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"592\" data-original=\"https://pic1.zhimg.com/v2-c0c998bf1ed2e7f3f4d0760c2d4fa210_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c0c998bf1ed2e7f3f4d0760c2d4fa210_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Type-C信号介绍</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f1a5fdc87177e9535b541a288201969d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-f1a5fdc87177e9535b541a288201969d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;558&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"341\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"558\" data-original=\"https://pic2.zhimg.com/v2-f1a5fdc87177e9535b541a288201969d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f1a5fdc87177e9535b541a288201969d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USB Type-C口的角色定义</b></p><p>数据角色：DFP，是下行接口，相当于以前的主机端；</p><p>  UFP，是上行接口，相当于以前的device；</p><p>电源角色：SOURCE，是纯供电方，会给sink进行供电；</p><p>  SINK，是纯耗电方；</p><p>  DRP，是双重角色的可供电设备，既可以是SOURCE，也可以是SINK。</p><p>数据角色和电源角色之间是交叉的，可以通过USB PD动态切换角色。</p><p><b>SOURCE到SINK连接</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1c8852ce2970dfdaa8cab40e44c4d737_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"431\" data-original=\"https://pic4.zhimg.com/v2-1c8852ce2970dfdaa8cab40e44c4d737_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;431&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"431\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"431\" data-original=\"https://pic4.zhimg.com/v2-1c8852ce2970dfdaa8cab40e44c4d737_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1c8852ce2970dfdaa8cab40e44c4d737_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-67d2ce32c8a26cc90a3fe896aa57133b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"453\" data-original=\"https://pic4.zhimg.com/v2-67d2ce32c8a26cc90a3fe896aa57133b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;453&#39; height=&#39;283&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"453\" data-original=\"https://pic4.zhimg.com/v2-67d2ce32c8a26cc90a3fe896aa57133b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-67d2ce32c8a26cc90a3fe896aa57133b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7eb974ffb82c6d7744ed2cb621b638cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"278\" class=\"content_image\" width=\"399\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;399&#39; height=&#39;278&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"399\" data-rawheight=\"278\" class=\"content_image lazy\" width=\"399\" data-actualsrc=\"https://pic1.zhimg.com/v2-7eb974ffb82c6d7744ed2cb621b638cc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>SINK</b></p><p>SINK必须有两个下拉电阻（Rd）分别连接到两条CC脚上；</p><p>SINK通过检查到VBUS来确定一个SOURCE的连接；</p><p>SINK通过CC脚上的上拉电阻来建立和检查一个正确的高速USB数据路径（正反向）；</p><p>如果SINK支持PD和/或者VDM，需要CC通讯。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ad3610d612a49c32a47f2af8ad55f35e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"356\" class=\"content_image\" width=\"328\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;328&#39; height=&#39;356&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"356\" class=\"content_image lazy\" width=\"328\" data-actualsrc=\"https://pic3.zhimg.com/v2-ad3610d612a49c32a47f2af8ad55f35e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>SOURCE</b></p><p>SOURCE必须有两个上拉电阻（Rp）分别连接到两条CC脚上，并且同时监测SINK；</p><p>SOURCE源在CC1和CC2上提供上拉电阻，并监控两者以检测SINK。在任何一个引脚上存在一个下拉电阻（Rd）表明正在连接一个SINK。Rp的值表示主机支持的初始USB Type-C当前级别；</p><p>SOURCE用CC pin下拉特性来检测和建立高速USB数据路径的正确路由，并确定哪个CC pin用于提供VCONN；</p><p>一旦检测到SINK，SOURCE将启用VBUS和VCONN；</p><p>SOURCE可以动态的调节Rp的值，来告诉SINK可以改变USB Type-C电流；</p><p>SOURCE应该实时监控Rd，一旦SINK断开，应该立刻断开已供电源；</p><p>如果SOURCE支持PD和/或者VDM，需要CC通讯。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ac45e77ed950c9db6a348f98485f9067_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"341\" class=\"content_image\" width=\"386\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;386&#39; height=&#39;341&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"341\" class=\"content_image lazy\" width=\"386\" data-actualsrc=\"https://pic4.zhimg.com/v2-ac45e77ed950c9db6a348f98485f9067_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DRP</b></p><p></p><p>在VBUS中启用/禁用电源，最初在DFP模式中禁用VBUS；</p><p>在建立一个特定的稳定状态之前，DRP在将自身暴露为DFP和UFP之间交替进行；</p><p>当DRP作为一个DFP呈现时，它遵循DFP的操作来检测一个附加的UFP，如果检测到UFP，它将应用VBUS，VCONN，并继续作为DFP进行操作；</p><p>当DRP作为UFP呈现时，它会监视VBUS以检测它是否与DFP相连，如果检测到DFP，它将继续作为UFP运行。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-49d348410d1a95eb6a020bad1e5be69a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"359\" class=\"content_image\" width=\"371\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;371&#39; height=&#39;359&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"359\" class=\"content_image lazy\" width=\"371\" data-actualsrc=\"https://pic3.zhimg.com/v2-49d348410d1a95eb6a020bad1e5be69a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USB Type-C Cable</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dcc66ed4edb8a4d134990bfffca62761_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1075\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"1075\" data-original=\"https://pic2.zhimg.com/v2-dcc66ed4edb8a4d134990bfffca62761_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1075&#39; height=&#39;650&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1075\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1075\" data-original=\"https://pic2.zhimg.com/v2-dcc66ed4edb8a4d134990bfffca62761_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dcc66ed4edb8a4d134990bfffca62761_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2fdc10d4b36bdc9af17749f3cae700ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"788\" data-rawheight=\"609\" class=\"origin_image zh-lightbox-thumb\" width=\"788\" data-original=\"https://pic2.zhimg.com/v2-2fdc10d4b36bdc9af17749f3cae700ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;788&#39; height=&#39;609&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"788\" data-rawheight=\"609\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"788\" data-original=\"https://pic2.zhimg.com/v2-2fdc10d4b36bdc9af17749f3cae700ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2fdc10d4b36bdc9af17749f3cae700ad_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USB Type-C CC连接</b></p><p>在功能上，配置通道（CC）用于以下目的：</p><p>1、 检测USB端口的连接/分离，例如DFP到UFP，配置VBUS;</p><p>2、 解析电缆方向和twist来建立USB数据总线路由；</p><p>3、 建立两个连接端口之间的DFP和UFP角色；</p><p>4、 USB电源传输通信。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9ae120d263389afc75c85bcf96b3b746_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"897\" data-original=\"https://pic3.zhimg.com/v2-9ae120d263389afc75c85bcf96b3b746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;897&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"897\" data-original=\"https://pic3.zhimg.com/v2-9ae120d263389afc75c85bcf96b3b746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9ae120d263389afc75c85bcf96b3b746_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>CC1、CC2、CC</b></p><p>这些引脚用于检测连接，并配置USB Type-C电缆和连接器的接口，一旦建立连接，将重新分配CC1或CC2，以通过插头的VCONN引脚提供电源，作用主要有以下几个方面：</p><p>1、 检测USB口的插入；</p><p>2、 决定电缆的方向和扭曲连接，以建立USB数据总线路由；</p><p>3、 在两个连接的口，建立数据的角色；</p><p>4、 检测和配置VBUS：VBUS Type-C电流模式或者USB PD；</p><p>5、 配置VCONN；</p><p>6、 发现和配置可选的备用和附件模式。</p><p><b>附属模式</b></p><p>Type-C接口可以实现两类附属模式</p><p>音频模式：通过检测到CC1和CC2上都有Ra时来进入音频模式；</p><p>调试模式：通过监测到CC1和CC2上都有不同的Rp和Rd阻值来决定进入不同的调试模式DTS或者TS。</p><p><b>信号定义</b></p><p>Type-C采用BMC编码形式</p><p>  传输速度为300kbps±10%</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c6dd173d90bc10715885621ea54a424a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic3.zhimg.com/v2-c6dd173d90bc10715885621ea54a424a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;515&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"515\" data-original=\"https://pic3.zhimg.com/v2-c6dd173d90bc10715885621ea54a424a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c6dd173d90bc10715885621ea54a424a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>  数据到CC传输（发送）</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7205251f5922aa5bca0661ab4b077e73_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"172\" class=\"content_image\" width=\"384\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;384&#39; height=&#39;172&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"172\" class=\"content_image lazy\" width=\"384\" data-actualsrc=\"https://pic4.zhimg.com/v2-7205251f5922aa5bca0661ab4b077e73_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>CC传输到数据</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b1c12cae0cae234756e3d14f09dd3ba3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb\" width=\"439\" data-original=\"https://pic4.zhimg.com/v2-b1c12cae0cae234756e3d14f09dd3ba3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;439&#39; height=&#39;156&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"439\" data-rawheight=\"156\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"439\" data-original=\"https://pic4.zhimg.com/v2-b1c12cae0cae234756e3d14f09dd3ba3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b1c12cae0cae234756e3d14f09dd3ba3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>常用的功能序列</b></p><p>我们通过不同编码组合定义，从而实现数据传输和特殊功能，下面是常用的特殊功能：</p><p><b>复位线缆</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-754fcf7799ad158d2ca9ecc518813206_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"100\" class=\"content_image\" width=\"247\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;247&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"247\" data-rawheight=\"100\" class=\"content_image lazy\" width=\"247\" data-actualsrc=\"https://pic3.zhimg.com/v2-754fcf7799ad158d2ca9ecc518813206_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>接口和线缆复位</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-821d8c77de0d751edb7939c435320890_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"262\" data-rawheight=\"98\" class=\"content_image\" width=\"262\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;262&#39; height=&#39;98&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"262\" data-rawheight=\"98\" class=\"content_image lazy\" width=\"262\" data-actualsrc=\"https://pic1.zhimg.com/v2-821d8c77de0d751edb7939c435320890_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>数据包开始标识</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9e40d6339ede78ff9f7cefcbe5b5490a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"141\" class=\"content_image\" width=\"286\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;286&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"286\" data-rawheight=\"141\" class=\"content_image lazy\" width=\"286\" data-actualsrc=\"https://pic3.zhimg.com/v2-9e40d6339ede78ff9f7cefcbe5b5490a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-461874275274801180415f2465454b74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"146\" class=\"content_image\" width=\"290\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;290&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"290\" data-actualsrc=\"https://pic1.zhimg.com/v2-461874275274801180415f2465454b74_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87206bea4f70b1954b302bb3fee1bc89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"138\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;138&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"138\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic2.zhimg.com/v2-87206bea4f70b1954b302bb3fee1bc89_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b> </p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "接口标准和线缆", 
                    "tagLink": "https://api.zhihu.com/topics/19564912"
                }, 
                {
                    "tag": "USB Type-C", 
                    "tagLink": "https://api.zhihu.com/topics/20007727"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83287240", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 2, 
            "title": "学习嵌入式要先分清C语言和C++的区别", 
            "content": "<p>现在科技发展的很迅速猛烈，在之前很多小伙伴就问小编：小编之前看你写<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/java/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java</a></u>和C语言之间的区别写的不错，那么<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/c%2B%2B/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++</a></u>和C语言之间有什么区别呢？这两种语言应该先学习哪个好一点呢？这不，小编看到这条留言之后立马就整理了很多的资料，想在这个平台上与大家做个交流与会谈，那么我们话不多说，直接进入正文吧！</p><p>我们首先要从它们的定义入手，因为它们就单从定义上来讲就有很大的区别。首先小编觉得C语言简而言之就是一经出现就以其功能丰富、表达能力强、灵活方便、应用面广等特点迅速在全世界普及和推广。C语言不但执行效率高而且可移植性好，可以用来开发应用软件、驱动、操作系统等。C语言也是其它众多高级语言的鼻祖语言，所以说学习C语言是进入编程世界的必修课。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-21c3cf28e1fc1d202d61c4e337ee5882_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-21c3cf28e1fc1d202d61c4e337ee5882_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;504&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-21c3cf28e1fc1d202d61c4e337ee5882_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-21c3cf28e1fc1d202d61c4e337ee5882_b.jpg\"/></figure><p>而且C语言主要用于底层开发，Windows、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/linux/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Linux</a></u>、Unix 等操作系统的内核90%以上都使用C语言开发，开发硬件驱动，让硬件和操作系统连接起来，这样用户才能使用硬件、程序员才能控制硬件。所以小编认为C语言是一门简单、底层、较早的编程语言，后来的很多语言在语法上都和C语言类似，称为“类C语言“，或者也可以这么理解，学好C语言，可以奠定我们今后学习其他编程语言的基础。</p><p>其实C++就是C语言的继承者，也可以说C++是通过C语言改善成C++的，也成为一种面向对象的程序设计语言。一般人都会说学习C++会比其他的语言难学，其实原因就在以下四大类中：面向对象、模板、函数式编程、过程式。但是难能可贵的是，这几种东西在C++混在一起用也是多么的自然。不过，这需要你花时间去掌控他。<br/>       到了这个时候你会觉得，C++真是一门好语言。当你需要为了你的项目放弃不同的部分的时候，C++都能帮你做到。当你需要不同的抽象层次需要不同的性能要求的是，C++还是能够帮你做到。如果你用别的语言，你最终会发现那个语言只能做某几类的项目。这是因为，C++能够自由的让你放弃某些部分，而别的语言会阻止你放弃某些部分。</p><p>那么当两数据点都介绍完了之后，我们言归正传，它们两者之间到底有什么区别呢？首先小编觉得它们的编程思想不一样，为什么这么说呢？很简单，C++是在C语言的基础上发展来的，但是并不是C++比C语言高级，两者的编程思想不一样，应用的领域也不一样。在各自的领域，谁也不能替代谁。其次就是说他们之间最大的区别就是在于它们的用于解决问题的思想方法不一样。之所以说C++比C更先进，是因为“ 设计这个概念已经被融入到C++之中 ”，而就语言本身而言，在C中更多的是算法的概念。那么是不是C就不重要了，错！算法是程序设计的基础，好的设计如果没有好的算法，一样不行。而且，“C加上好的设计”也能写出非常好的东西。</p><p>从表达能力方面的话，那么从这点来看，C++要比C强大，当然也要比C复杂。C++从诞生之日起，其设计哲学就崇尚复杂的问题要用复杂的工具解决，现代C++的定位是零开销的高级抽象语言：用各种高层次的抽象能力，在不损失性能的条件下解决复杂的问题，理解了这个设定，你才能理解C++的强大之处。</p><p>总结言之小编觉得其实C语言属于结构化编程语言，其核心思想是将软件分解为一组数据描述与一组函数，因此用 C 语言写软件，归根到底就是写一系列的函数；C++ 属于面向对象语言，其核心思想是将软件分解为一组对象，通过对象间的交互来实现软件功能，并且还提供了模板等进一步抽象的手段，因此用 C++ 语言写软件，归根到底就是要写一系列的类来建模运行时对象的交互行为。</p><p>那么应该如何选择先学习哪一种语言呢？小编觉得如果单从语法上来讲，那么C语言是C++的一部分，C语言代码简直不用修正就可以以C++的方法编程，这样的缺点就是会给许多初学者带来很多的困惑。那么小编觉得其实我对这个问题保持中立，可是初学者直接学习C++会非常费劲，Hold 不住，尤其是对<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>内存不太了解的情况下，C++ 是学不懂的。<br/>       C++ 是一门灵敏多变、特性丰厚的言语，一起也意味着比较复杂，不易把握。不过可以明确地说：学了C言语就相当于学了C++的一半，从C言语转向C++时，不需要再从头开始，接着C言语往下学就可以，所以我强烈建议先学C言语再学 C++。而且随着C++的盛行，它的语法也越来越强壮，已经可以很完善的支持面向进程编程、面向对象编程（OOP）和泛型编程，简直成了一门独立的言语，具有了自己的编译方法。</p><p>所以总体来说小编觉得学习编程是一个循序渐进的进程，不要期望一口吃个胖子。学习C言语，一来是学习它的语法，为C++打根底，一起培育编程爱好，二来是学习内存、编译和链接，弄清编程言语的内涵机理。</p><p><b>技术指导合作微信xydf321456</b></p><p><b>技术指导合作QQ754634522</b></p>", 
            "topic": [
                {
                    "tag": "C / C++", 
                    "tagLink": "https://api.zhihu.com/topics/19601705"
                }, 
                {
                    "tag": "C（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19561633"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83281938", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32G0实验演示01_ 互联矩阵", 
            "content": "<p>这篇文章给大家介绍一下内部<b>互连矩阵实验</b>部分。</p><p><b>实验目的</b></p><p>1、 了解STM32G0内部连接矩阵的架构。</p><p>2、 通过定时器之间的内部连接，达到定时器分频的目的。</p><p>3、 熟悉STM32CubeMX的配置流程。</p><p>4、 知道内部连接的优势</p><p><b>实验环境</b></p><p>软件环境：IAR 8.22</p><p> STM32Cube_FW_G0_V1.0.0</p><p> STM32CubeMX 5.0.1</p><p>硬件环境：Nucleo-G071RB</p><p>                示波器/逻辑分析仪</p><p><b>原理框图</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-cd6b467114e1f233e459e0be0a1c4af6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1279\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb\" width=\"1279\" data-original=\"https://pic3.zhimg.com/v2-cd6b467114e1f233e459e0be0a1c4af6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1279&#39; height=&#39;412&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1279\" data-rawheight=\"412\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1279\" data-original=\"https://pic3.zhimg.com/v2-cd6b467114e1f233e459e0be0a1c4af6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-cd6b467114e1f233e459e0be0a1c4af6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeMX配置流程</b></p><p>1、 打开STM32CubeMX；</p><p>2、 选择STM32G071RB；</p><p>3、 使能TIM3的内部时钟并设置自动重装载的值为16000-1，开启自动重装载功能；</p><p>4、 开启TRGO OutPut功能且设置输出TRGO事件为更新事件</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-49408453777ecf00d2dbd21d3ee1748a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"789\" data-rawheight=\"553\" class=\"origin_image zh-lightbox-thumb\" width=\"789\" data-original=\"https://pic3.zhimg.com/v2-49408453777ecf00d2dbd21d3ee1748a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;789&#39; height=&#39;553&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"789\" data-rawheight=\"553\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"789\" data-original=\"https://pic3.zhimg.com/v2-49408453777ecf00d2dbd21d3ee1748a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-49408453777ecf00d2dbd21d3ee1748a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>5、 配置TIM2的从机模式为External-Clock Mode 1，触发源为ITR2，设置通道1为PWM输出，自动重装载的值为1000-1，PWM输出的Pulse为500。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f660c83808b3500cb159c20cb430e044_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"641\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic1.zhimg.com/v2-f660c83808b3500cb159c20cb430e044_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;550&#39; height=&#39;641&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"641\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic1.zhimg.com/v2-f660c83808b3500cb159c20cb430e044_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f660c83808b3500cb159c20cb430e044_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>6、 将TIM2_CH1重定义到PA5这个GPIO上（默认是定义到PA0上的）这是为了测试简单，因为PA5上连接了LD4。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6a8f10faadadfb5192a89149c231c62b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"603\" data-original=\"https://pic4.zhimg.com/v2-6a8f10faadadfb5192a89149c231c62b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;603&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"603\" data-original=\"https://pic4.zhimg.com/v2-6a8f10faadadfb5192a89149c231c62b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6a8f10faadadfb5192a89149c231c62b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>7、 检查一下时钟配置，确认系统时钟为16MHz，APB Timer的时钟为16MHz</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-994c1fc13b38b5db9de1c8982e23e5cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"949\" data-original=\"https://pic1.zhimg.com/v2-994c1fc13b38b5db9de1c8982e23e5cc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;949&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"949\" data-original=\"https://pic1.zhimg.com/v2-994c1fc13b38b5db9de1c8982e23e5cc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-994c1fc13b38b5db9de1c8982e23e5cc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>8、 工程命名为STM32G0_Test，选择EWARM_V8工具链；</p><p>9、 直接生成IAR的工程；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-18c85d0883998c51d1ebacb220d21c1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"595\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic2.zhimg.com/v2-18c85d0883998c51d1ebacb220d21c1d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;734&#39; height=&#39;595&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"595\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"734\" data-original=\"https://pic2.zhimg.com/v2-18c85d0883998c51d1ebacb220d21c1d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-18c85d0883998c51d1ebacb220d21c1d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>增加代码</b></p><p>Main.c文件中的main函数中，增加如下粗体部分的代码</p><p>MX_TIM2_Init();</p><p>/* USER CODE BEGIN 2 */</p><p><b>HAL_TIM_Base_Start(&amp;htim3);</b></p><p><b>HAL_PWM_Start(&amp;htim2,TIM_CHANNEL_1);</b></p><p>/* USER CODE END 2 */</p><p><b>Nucleo-G071RB测试点</b></p><p></p><p>PA5在Nucleo-G071RB上有两个测试点，可以用来连接示波器或者逻辑分析仪；</p><p>CN5的第6Pin或者是CN10的第11pin;</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-93a59eaca20f76de79e3bab56fd7de59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1030\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"1030\" data-original=\"https://pic2.zhimg.com/v2-93a59eaca20f76de79e3bab56fd7de59_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1030&#39; height=&#39;380&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1030\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1030\" data-original=\"https://pic2.zhimg.com/v2-93a59eaca20f76de79e3bab56fd7de59_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-93a59eaca20f76de79e3bab56fd7de59_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>频率计算</b></p><p>在APB的时钟为16MHz的情况下，TIM3的输入时钟为16MHz，经过16000的分频，就会得到1000Hz的更新事件频率，将这1000Hz的频率输入到TIM2的时钟内，再经过1000分频，就得到1Hz的时钟。让PA5（TIM2的通道1）产生一个占空比为50%的方波，我们即可在示波器上看到这个波形。</p><p>如果没有示波器，在Nucleo板子上也可以看到LD2灯在不断的闪烁。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b> </p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "矩阵", 
                    "tagLink": "https://api.zhihu.com/topics/19650614"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83172448", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "分析可穿戴设备现状以及未来发展趋势", 
            "content": "<p>近年来全球可穿戴设备出货量 为3.1亿台，比之前增长16.7%，市场规模庞大。而随着消费升级及<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ai/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AI</a></u>、 VR、AR等技术的逐渐普及，可穿戴设备 已从过去的单一功能迈向多功能，同时具 有更加便携、实用等特点。智能可穿戴设备在医疗保健、导航、社交网络、商务和媒体等许多领域有众多可开发应用，并能通过不同场景的应用给未来生活带来改变。</p><p>目前市场上主要的可穿戴产品形态各异，主要包括智能眼镜、智能手表、智能手环、意念控制、健康穿戴、体感控制、物品追踪等。其中，医疗卫生、信息娱乐、运动健康是热点；产品功能方面，互联（<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/nfc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NFC</a></u>、Wifi、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%2593%259D%25E7%2589%2599/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">蓝牙</a></u>、无线）、人机接口（语音、体感）、传感（骨传感、人脸识别、地理定位、各类<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E4%25BC%25A0%25E6%2584%259F%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">传感器</a></u>）是该类产品必不可少的功能。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7f042e80e07089d81e0753d849fc6247_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"437\" data-original=\"https://pic4.zhimg.com/v2-7f042e80e07089d81e0753d849fc6247_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;437&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"437\" data-original=\"https://pic4.zhimg.com/v2-7f042e80e07089d81e0753d849fc6247_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7f042e80e07089d81e0753d849fc6247_b.jpg\"/></figure><p>智能可穿戴设备包括智能手表、智能手环、3D眼镜等，其中，智能手表是炙手可热的数码产品，可将手表内置智能化系统、搭载智能手机系统而连接于网络而实现多功能，能同步手机中的电话、短信、邮件、照片、音乐等。智能化系统由现代通信与信息技术、计算机网络技术、行业技术、智能控制技术汇集而成的针对某一个方面的应用智能集合。随着市场对于智能手表等可穿戴设备的需求增加，传感器、光纤通信、触控面板等领域将收益，也将带动稀有金属铟、锗、镓等品种消费增长。</p><p>可穿戴设备发展极具潜力。技术的迭代和商业上的可能性正在超越人们的想象，其功能从运动监测到短信和电话提醒，从玩游戏、在线教育到畅游互联网，可穿戴设备越来越让人们感受到科技的魅力。而<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/wi-fi/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wi-Fi</a></u>、智能蓝牙、NFC和GPS这些成熟技术，高效的无线连接设计也降低了可穿戴设备在处理能力和电量等方面的需求。专业人士对各类可穿戴设备近几年的增长做了预测，其中智能手表、运动手环、可穿戴医疗智能设备占据了大部分市场份额，而智能眼镜、智能衣服等也呈增长态势。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-acc347adf9ba8e8a8748012fe2d5eb54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"355\" data-rawheight=\"281\" class=\"content_image\" width=\"355\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;355&#39; height=&#39;281&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"355\" data-rawheight=\"281\" class=\"content_image lazy\" width=\"355\" data-actualsrc=\"https://pic1.zhimg.com/v2-acc347adf9ba8e8a8748012fe2d5eb54_b.jpg\"/></figure><p><b>发展趋势</b></p><p>智能穿戴的目的是探索一种全新的人机交互方式，通过智能设备穿戴在人体之上这种方式为消费者提供专属的、个性化的服务。随着移动互联网技术的发展和低功耗芯片、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%259F%2594%25E6%2580%25A7%25E7%2594%25B5%25E8%25B7%25AF%25E6%259D%25BF/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">柔性电路板</a></u>等穿戴设备核心硬件技术的成熟，部分穿戴设备已经从概念化的设想逐渐走向商用化，新式的穿戴设备不断推出。</p><p>1、 时尚眼镜将不仅仅看起来很酷，它们将变得更为智能</p><p>谷歌眼镜也许备受旧金山酒吧客和非科技圈人士的憎恨，但是不可否认的是，智能眼镜浪潮的兴起，搜索巨人是功不可没的。</p><p>尽管谷歌眼镜遇到了不少的挫折，但是这并没有让其他的厂商却步。索尼、Vuzix和其他很多厂商已经推出或正在开发智能眼镜类可穿戴设备。</p><p>虽然这类设备大多不太精美，但是智能眼镜已经开始让人看着越来越顺眼了。谷歌眼镜配备了有型的镜框，其中有些出自著名的时尚设计师戴安娜冯弗斯滕伯格（Diane von Fu<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/rs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rs</a><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">te</a></u>nberg）之手。日本公司推出的Jins Meme智能眼镜看起来跟普通眼镜一样，但却包含了不少的科技技术。Meme甚至可以监控你的警觉性，以免你在开车时睡着。</p><p>2、 越来越多的科技公司将开发智能珠宝</p><p>可穿戴热潮兴起后不久，Indiegogo和Kickstarter平台上冒出了不少关于智能珠宝的众筹项目。很多项目比如Ringly、Mota SmartRing和Cuff已经完成了融资目标，这说明女性消费者或许对笨重的智能手表不感冒，但她们非常喜欢智能珠宝的概念。</p><p>最近，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%258B%25B1%25E7%2589%25B9%25E5%25B0%2594/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">英特尔</a></u>也凭借其MICA智能手镯进入了可穿戴市场。它的这款可穿戴设备配备了不少的功能和蛇皮材料的外皮和宝石装饰。</p><p>英特尔进入可穿戴市场之后，科技领域的一些大品牌也开始开发智能珠宝。即便他们没有这样做，象Ringly、Mota和Cuff这样的小厂商也将推动智能珠宝市场在最近进一步发展壮大。</p><p>3、 你的服装将内置更多的感应器</p><p>曾几何时，智能服装只是高科技设备的代名词。毫无疑问，nal、HexoSkin和Sensoria将继续推出智能运动衫、运动内衣和其他智能服装，同时更多厂商也将进入该领域。</p><p>3D打印的服装已经问世了，很多著名的时尚品牌比如拉尔夫劳伦的Polo和Victoria Secret等已经在高调展示它们的智能服装。已经见过内置LED、能够随着用户情绪变色的裙子、光纤制成的服装以及能够在下雨前检测空气湿度的衣服。</p><p>虽然这些高技时尚服装对消费者们来说有些奇怪，但它们却是时代的标志。智能服装正在蓬勃兴起，它们将在未来变得更有吸引力，希望它们同时也能变得更有用。</p><p>4、 你将更加了解自己的身体</p><p>早期的运动腕带并不能精确地记录步数，但是现在大多数高端运动腕带都在向着精益求精的方向发展，参加奥运会的很多运动员以及他们的教练利用运动腕带来提高成绩。这主要得益于算法的改良、感应器的完善以及增加了心率监控设备。</p><p>另外，低端腕带的价格将更便宜，即便是普通人也能随时随地掌握自己的身体状况。</p><p>5、 模特们将展示她们实际佩戴的可穿戴设备</p><p>到目前为止，可穿戴设备的目标用户仍是男性消费者。大多数可穿戴设备公司只是顺带着提到女性，声称自己的智能手表“男女闲宜”。这太令人意外了！到目前为止，这种男女闲宜的可穿戴设备从未成为畅销商品。然而，这种情况将发生变化。</p><p>现在，不仅很多专注于时尚的众筹可穿戴设备将上网销售，自从苹果宣布Apple Watch以来，它已经在巴黎时尚周、时尚中国版和其他时尚杂志上亮相。</p><p>其他厂商肯定已经注意到苹果在可穿戴市场瞄准的人群是大多数厂商忽略掉的女性消费者人群。像LG、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E4%25B8%2589%25E6%2598%259F/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三星</a></u>和华硕那样的竞争对手肯定会再接再厉，推出更多具有吸引力的可穿戴设备，它们或许还会推出一两款专为女性打造的智能手表。</p><p>未来，随着AI/VR/AR等技术的逐渐成熟和普及，可穿戴身边将成为人工智能的重要节点。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-812d36debfbaa777d71152c52d0d3b93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"444\" data-original=\"https://pic4.zhimg.com/v2-812d36debfbaa777d71152c52d0d3b93_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;444&#39; height=&#39;261&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"444\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"444\" data-original=\"https://pic4.zhimg.com/v2-812d36debfbaa777d71152c52d0d3b93_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-812d36debfbaa777d71152c52d0d3b93_b.jpg\"/></figure><p><b>技术指导合作微信xydf321456</b></p><p><b>技术指导合作QQ754634522</b></p>", 
            "topic": [
                {
                    "tag": "智能可穿戴", 
                    "tagLink": "https://api.zhihu.com/topics/19813051"
                }, 
                {
                    "tag": "发展趋势", 
                    "tagLink": "https://api.zhihu.com/topics/19641874"
                }, 
                {
                    "tag": "智能手表", 
                    "tagLink": "https://api.zhihu.com/topics/19696568"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83174401", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "物联网的要求有哪些", 
            "content": "<p>在“剖析物联网的要求—第一部分”中介绍了先进的工艺技术、低功耗设计技术、多核系统的功耗问题、内核间的通讯、串行<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>以及系统安全。第二部分， 我们将介绍 BLE 无线链路、模拟前端、智能触摸界面以及其他重要的物联网设计技术。</p><h2>无线连接技术的发展：</h2><p>基于物联网的设备连接仍处于起步阶段。这意味着，随着新应用程式的涌现，显著提高了微控制器（<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/mcu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MCU</a></u>）系统在速度、功耗、范围和容量方面的需求。该领域的潜在商机打破了在设计方面的局限性。<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%2593%259D%25E7%2589%2599/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">蓝牙</a></u>技术联盟最新（特殊利益集团）宣布，蓝牙5.0标准定位于电子产业对物联网市场需求的典型布局。内容指出，全新的 BLE 标准可提供两倍的传输速度、四倍的传输范围以及广播包的数据承载量是上一个版本的8倍。这些新的技术特性将极大地促进物联网设备与我们日常生活间的各种连接。MCU作为物联网设备的核心，必须与时俱进，紧跟协议的发展进程，支持新标准提供的各种特性。以下是即将推出的最新BLE标准的主要特性。</p><p>· 速度（传输更快）：蓝牙5.0传输速度上限为2Mbps，是之前4.2版本的两倍。</p><p>· 传输距离（通信距离更远）：有效工作距离可达300米，是旧版本的4倍之多。</p><p>· 低功耗（延长<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/dianyuan/603907.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电池</a></u>/设备工作时间）：协议优化大大降低了能源消耗，提升了其性能。</p><p>· 广播能力（更大的承载量）：协议优化将提升800%增长的数据广播包的承载量。</p><p>· 安全功能：高安全加密及认证，确保只允许经受权用户跟踪设备位置和安全配对。</p><p>扩充处理器容量、内存及功耗方面的性能不会凭空而来。对于许多应用程序而言，底层硬件（例如MCU）需要做出相应调整以适应这些特性。因此，生产商在设计下一代MCU时必须时刻紧记这些要求。例如，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%25B5%259B%25E6%2599%25AE%25E6%258B%2589%25E6%2596%25AF/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">赛普拉斯</a></u> <u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/psoc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PSoC</a></u> 6 BLE MCU（见图1）为物联网设计人员提供BLE 5.0所具备的这些功能。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3d882f7b1e4868f1b3c2f4c138b99140_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb\" width=\"491\" data-original=\"https://pic1.zhimg.com/v2-3d882f7b1e4868f1b3c2f4c138b99140_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;491&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"123\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"491\" data-original=\"https://pic1.zhimg.com/v2-3d882f7b1e4868f1b3c2f4c138b99140_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3d882f7b1e4868f1b3c2f4c138b99140_b.jpg\"/></figure><p>尽管这些特点会增加MCU的负载，但也能为终端用户带来诸多好处：</p><p>· 性能（范围优势）：相比于基于物联网的其他协议，如<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/wi-fi/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wi-Fi</a></u>及<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/zigbee/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ZigBee</a></u>，BLE已经成为<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%2597%25A0%25E7%25BA%25BF%25E9%2580%259A%25E4%25BF%25A1/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">无线通信</a></u>协议的首选。改进过的覆盖范围将确保蓝牙设备（如扬声器、智能门<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/694858.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">锁</a></u>、灯泡等）可以在家里任意位置实现完全连接。这是真正实现智能家居的关键一步。BLE 5.0也有可能取代高功耗的Wi-Fi，控制智能家居设备。改进后的覆盖范围还能让智能手表等设备更方便地接收来自智能手机的即时通知。</p><p>· 低功耗（速度优势）：更快的转输速度提高了响应能力。对于那些非数据密集型物联网设备来说，更快的速度意味着会带来更低的消耗及更长的使用寿命。例如，将传输速度增加两倍，发送/接收时间减少近一半。这样就可以减少功耗，因为设备可以迅速进入低功耗模式。此外，更高的传输速度支持周期性的设备软件更新，这将是物联网应用的一个重要功能。</p><p>· 无线连接服务（广播容量优势）：广播容量的显著增加将使信息传输更加丰富和智能化，Beacon等无线连接服务将能够传输更多的信息。举例来说，Beacon可以传输实际内容，而不是通过URL指向内容。这可能将重新定义蓝牙设备传播信息的方式，因为它通过无需连接的物联网传输信息，而非蓝牙配对设备模式。这有可能让资产跟踪和智能垃圾管理等先进的应用更加智能地使用网状网络。</p><h2>智能触摸界面：</h2><p>正如第一部分中所讲到的，物联网设备跨越消费类、工业、汽车和商业应用领域。这些应用都能受惠于美观的的用户界面，且具备产品差异化，如触摸显示屏、按钮/滑块以及近距离感应。为了让用户享受最佳体验，触摸<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/964\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">显示器</a></u>还需支持手势识别、防水、手腕感应及戴手套触摸。这些特征都可以通过低功耗的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E5%25AE%25B9/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电容</a></u>感应技术实现，除此以外，触摸感应还可以帮助优化功耗，例如使用近距离感应来检测用户何时使用设备。将电容感应集成在 MCU 中则无需单独的专用传感设备，此外，此项集成还可以提升功效、性能并且降低成本（参见图2）。</p><p>电容感应是实现创新应用和提高产品特色的关键技术：</p><p>智能家居<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/848\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开关</a></u>─个人远程控制家用设备可以为生活带来带来许多好处，智能家电也是如此。支持智能家电需要两个关键的构建模块：一、无线连接，用于将设备连接到云端;二、可以由多个源头控制的智能开关，如云端、遥控、智能手机及/或用户自身输入指令。</p><h2>带有电容感应的智能开关可以实现许多高级功能：</h2><p>1. 智能调光─电容感应滑块为调光功能提供了一个直观的物理接口。BLE使调光器具备无线连接功能，方便其放置在房屋内的任意位置。</p><p>2. <u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></u>功能─MCU可以保存其内部存储中选择的亮度设置，并在电源中断或后续使用时恢复设置。</p><p>3. 安全性─智能开关的高压交流部分与<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/870\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">继电器</a></u>是隔离的，用户实体操作界面部分只用于处理低功率DC，从而保证用户安全。</p><p>4. 照明功能─MCU可以在开关上提供<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/959\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LED照明</a></u>，以便用户在黑暗中找到开关。这一特性可以使用基于电容的近距离感应来启动。</p><p>5. 手势功能─智能开关具有检测近距离和触摸手势的能力，可轻松快速实现配置以运行特定任务。</p><p><b>技术指导合作微信xydf321456</b></p><p><b>技术指导合作QQ754634522</b></p>", 
            "topic": [
                {
                    "tag": "物联网前景", 
                    "tagLink": "https://api.zhihu.com/topics/19610973"
                }, 
                {
                    "tag": "物联网", 
                    "tagLink": "https://api.zhihu.com/topics/19551271"
                }, 
                {
                    "tag": "物联网产品", 
                    "tagLink": "https://api.zhihu.com/topics/19585455"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83057783", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 2, 
            "title": "嵌入式开发需要具备哪一些技能", 
            "content": "<p>嵌入式知识和技能体系庞大，样样精通者凤毛鳞角，一般都是一专多能，各类技能多少都能说上一点。按照嵌入式开发层次关系，整理嵌入式开发者技能大全如下：</p><p>1、处理器</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/mcu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MCU</a></u>架构及开发。MCU俗称<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%258D%2595%25E7%2589%2587%25E6%259C%25BA/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></u>，把中央处理器（CentralProcess Unit，<u><a href=\"https://link.zhihu.com/?target=http%3A//m.elecfans.com/article/645277.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CPU</a></u>）的频率和规格作适当删减，并将内存（Memory）、计数器（<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%25BE%25B7%25E5%25B7%259E%25E4%25BB%25AA%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ti</a></u>mer）、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/usb/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB</a></u>、A/D转换、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/uart/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">UART</a></u>、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/plc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PLC</a></u>、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dma/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DMA</a></u>等周边<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>，甚至LCD等驱动<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></u>都整合在单一芯片上，形成芯片级的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>，为不同的应用场合做不同的组合控制。常见的MCU包括<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/intel/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Intel</a></u>的C51/C8051F系列，Motorola的68K系列，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/microchip/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MicroChip</a></u>的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/pi/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PI</a></u>C系列等。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-562e6a9ccc8d2765bcf0abbc887fdeeb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"306\" data-rawheight=\"226\" class=\"content_image\" width=\"306\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;306&#39; height=&#39;226&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"306\" data-rawheight=\"226\" class=\"content_image lazy\" width=\"306\" data-actualsrc=\"https://pic4.zhimg.com/v2-562e6a9ccc8d2765bcf0abbc887fdeeb_b.jpg\"/></figure><p>MPU架构及开发。MPC指微处理单元，一般不带外围器件（如<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></u>阵列等），是高度集成的通用结构的处理器。典型如In<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">te</a></u>l的X86系列、飞思卡尔的PowerPC系列、P1系列，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/arm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></u>架构处理器等。</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dsp/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DSP</a></u>架构及开发。DSP采用哈佛结构，同一个<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%2597%25B6%25E9%2592%259F/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></u>周期内可以多次访问<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></u>器，多级指令执行流水结构提高了系统的执行效率，DSP芯片常用于复杂的运算，典型如<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>的TMS CXX系列，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ADI/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ADI</a></u>的SHARC系列、Blackfin系列等。</p><p>2、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/cpld/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CPLD</a></u>&amp;<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/fpga/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FPGA</a></u>架构及开发</p><p>CPLD&amp;FPGA作为专用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/876\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">集成电路</a></u>（<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/asic/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ASIC</a></u>）领域中的一种半定制电路而出现，既解决了定制电路的不足，又克服了原有可<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/311\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">编程器</a></u>件门电路数有限的缺点。通过可编程逻辑单元实现各种算法和组合逻辑。</p><p>基于CPLD&amp;FPGA实现程序开发。包括RTL门级逻辑图设计，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/verilog/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Verilog</a></u>HDL程序设计，VHDL程序设计，XILINX编译软件使用，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/altera/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ALTERA</a></u>编译软件使用，低速串、并行通信控制器设计，高速串行通信控制器设计。</p><p>3、电路设计和分析</p><p>包括<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">模拟电路</a></u>和<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数字电路</a></u>设计，包括器件DataSheet阅读，原理图及<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PCB</a></u>阅读等。</p><p>4、原理图/<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PCB设计</a></u>工具</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/cadence/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cadence</a></u>，Al<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>um，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PAD</a></u>S，DXP等。</p><p>5、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E8%25B7%25AF%25E4%25BB%25BF%25E7%259C%259F/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路仿真</a></u>工具使用</p><p>Mul<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>sim，Pspice，ADS，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/matlab/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MATLAB</a></u>等。</p><p>6、分立类<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子元器件</a></u>工作原理和<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/canshu\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">选型</a></u></p><p>电路防护类器件，阻容器件，<u><a href=\"https://link.zhihu.com/?target=http%3A//m.elecfans.com/article/570177.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电感</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/852\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">磁珠</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dc/dc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DC/DC</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/850\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">晶振</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/967\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">二极管</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/dianyuan/633947_3.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三极管</a></u>，稳压管，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/yuanqijian/guangou/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">光耦</a></u>，MOS管，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/igbt/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IGBT</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/763963.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">继电器</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/848\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开关</a></u>和按键，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/957\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LED</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/106\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">指示灯</a></u>，PCB板用接线<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1027\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">端子</a></u>，交流<u><a href=\"https://link.zhihu.com/?target=http%3A//m.elecfans.com/article/535292.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">互感器</a></u>等。</p><p>7、集成类电子<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">元器件</a></u>工作原理和选型</p><p>AD，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1049\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">逻辑器件</a></u>，DA，运放，计数器，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/632428.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">触发器</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/694858.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">锁</a></u>存器，译码器，S<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RAM</a></u>，S<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DRAM</a></u>，DDR，FLASH，EEP<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/rom/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ROM</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口芯片</a></u>等。</p><p>8、失效分析与可靠性</p><p>物料的构造与工作原理，金相切片，显微观察，PCB形变<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/851\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测量</a></u>，HALT实验技术，可靠性计算等。</p><p>9、硬件测试（器件、模件、整机）</p><p>元器件测试方法，模件、整机测试方法，元器件、模件、整机测试问题分析，国标、行标理解，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/emc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EMC</a></u>问题分析和解决等。</p><p>10、操作系统架构及开发环境</p><p>了解操作系统原理及基本编译原理。操作系统提供CPU资源管理、外设驱动、内存管理、线程/进程管理、文件系统、网络通讯、安全机制、界面管理等。嵌入式实时操作系统的基本特征是事件响应的快速性和确定性，在嵌入式系统中广泛应用。</p><p>通用操作系统包括windows、Unix、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/linux/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LInux</a></u>等。目前在嵌入式领域广泛使用的操作系统包括：嵌入式实时操作系统µC/OS-II、嵌入式Linux、WindowsEmbedded、VxWorks、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/freertos/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FreeRTOS</a></u>、QNX等，以及应用在智能手机和平板电脑的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/android/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Android</a></u>、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ios/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">iOS</a></u>等。</p><p>11、底层驱动开发</p><p>VxWorks操作系统驱动开发，Linux移植，Linux开发，单板DTS配置以及根文件系统生成（Buildroot），U-BOOT移植和开发，C语言开发，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/python/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python</a></u>语言开发，Makefile编写，GNU编译器及工具链的使用，Linux操作系统使用。</p><p>具体包括<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E4%25BB%25A5%25E5%25A4%25AA%25E7%25BD%2591/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">以太网</a></u>驱动，SPI驱动，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/i2c/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">I2C</a></u>驱动，文件系统驱动，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/can/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CAN</a></u>驱动等。</p><p>12、系统软件设计</p><p>面向对象，设计模式，UML，嵌入式多任务开发，重构，多核开发等。了解常用的开发过程，如敏捷编程，测试驱动开发等。</p><p>13、系统软件开发</p><p>熟悉开发语言，包括：C，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/c%2B%2B/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/c%23/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C#</a></u>，QT，Python，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/java/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JAVA</a></u>，等。熟悉WEB 开发，开发规范等。</p><p>14、数据结构与算法</p><p>常用数据结构和算法，图论算法，数字信号处理算法，小波算法等。</p><p>15、网络与通信</p><p>计算机网络原理，TCP/IP协议原理及分析，IEC61850规约（建模，MMS，SV，GOOSE等），103规约，104规约，DNP规约，Modbus协议，物联网<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/zigbee/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Zigbee</a></u>协议，bluetooth，wireshark等报文分析工具，环网HSR协议，网络安全等。</p><p>16、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/643604.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据库</a></u></p><p>数据库原理与设计，SQLite/Access/MySQL/SQLServer/Oracle/<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/rengongzhineng/605233_a.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">大数据</a></u>hadoop等。</p><p>17、界面和图形库</p><p>Zinc，UGL，QT，SVG，MiniGUI等。</p><p>18、应用知识（以电力系统自动化为例）</p><p>电力系统常识，继电保护知识，测控知识;智能变电站网络架构，网分，故障录波器，保信，远动等。</p><p>19、调试和测试</p><p>软件测试基础，61850规约测试，网络测试，时间管理测试，应用功能测试（继电保护功能等），ATS测试开发与使用，<u><a href=\"https://link.zhihu.com/?target=http%3A//labview.elecfans.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Labview</a></u>测试程序开发等。</p><p>20、项目管理</p><p>配置管理如版本管理工具Git使用等，项目计划与任务划分，项目进度跟踪，项目协调等。</p><p>合格的嵌入式开发者应是多面手，应具备各方面的技能，包括从硬件到软件到应用（电力系统保护，自动化，控制，人工智能，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%259C%25BA%25E5%2599%25A8%25E5%25AD%25A6%25E4%25B9%25A0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习</a></u>等），从单板到系统整机，从技术到管理，甚至吹拉弹唱也需要了解一点，做项目管理时可以提升团队气氛和丰富业余生活。</p><p>技指导合作微信xydf321456</p><p>技术指导合作QQ754634522</p><p></p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "嵌入式设计", 
                    "tagLink": "https://api.zhihu.com/topics/19733229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/83116313", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "STM32G0技术详解 _ GPIO-EXTI-系统DMA", 
            "content": "<p><b>STM32G0</b>的复用率是很高的，更多的引脚可以被当做<b>GPIO引脚</b>来使用。</p><p>G0的GPIO模块与F0的类似，主要有以下<b>区别</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-556f754f0cde2a00b2d0f0d1115721b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1424\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"1424\" data-original=\"https://pic4.zhimg.com/v2-556f754f0cde2a00b2d0f0d1115721b3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1424&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1424\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1424\" data-original=\"https://pic4.zhimg.com/v2-556f754f0cde2a00b2d0f0d1115721b3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-556f754f0cde2a00b2d0f0d1115721b3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32F0系统架构</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-87723c9ae662d3225fd9cd87e9ec6b46_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"987\" data-original=\"https://pic3.zhimg.com/v2-87723c9ae662d3225fd9cd87e9ec6b46_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;987&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"987\" data-original=\"https://pic3.zhimg.com/v2-87723c9ae662d3225fd9cd87e9ec6b46_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-87723c9ae662d3225fd9cd87e9ec6b46_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32G0系统架构</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-889e8e0fe8c69676219c6eefa2caf905_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1031\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb\" width=\"1031\" data-original=\"https://pic2.zhimg.com/v2-889e8e0fe8c69676219c6eefa2caf905_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1031&#39; height=&#39;631&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1031\" data-rawheight=\"631\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1031\" data-original=\"https://pic2.zhimg.com/v2-889e8e0fe8c69676219c6eefa2caf905_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-889e8e0fe8c69676219c6eefa2caf905_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 主要特性</b></p><p>双向操作最多达60个I/O引脚，从GPIOA~GPIOF共5个端口，每个端口最多16个I/O引脚，全部具有外部中断和唤醒功能，使用BSRR和BRR寄存器进行原子操作（置位和复位），每个端口独立配置。</p><p>GPIOx直接挂在IOPORT总线上。</p><p>大多数I/O引脚能够支持5V容忍。</p><p><b>引脚的基本结构</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6326a62279d3751bb45b9d0067e086bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1256\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb\" width=\"1256\" data-original=\"https://pic2.zhimg.com/v2-6326a62279d3751bb45b9d0067e086bd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1256&#39; height=&#39;624&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1256\" data-rawheight=\"624\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1256\" data-original=\"https://pic2.zhimg.com/v2-6326a62279d3751bb45b9d0067e086bd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6326a62279d3751bb45b9d0067e086bd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>操作模式</b></p><p>输入模式：悬浮（无上下拉电阻），输入上拉/下拉，模拟输入模式。</p><p>输出模式：推挽，带有可选上拉/下拉的开漏。</p><p>可配置的输出斜率，速度可达80MHz。</p><p>复用功能模式：I/O可以用作不同引脚的配置，复用功能越灵活，用的时候越方便。</p><p>用于冻结I/O端口配置的锁定机制（GPIOx_LCKR）。</p><p><b>复用功能</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>多个集成外设共享相同的I/O引脚，包含USARTx_TX，TIMx_CHx，SPIx_MISO……</p><p>复用功能多路选择器选择连接到I/O引脚的外设，一次只有一个复用功能连接到特定的I/O引脚，通过GPIOx _AFRL和GPIOx_AFRH寄存器配置。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-da070008f56c6b8c8ad2f40f59264aec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-da070008f56c6b8c8ad2f40f59264aec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic1.zhimg.com/v2-da070008f56c6b8c8ad2f40f59264aec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-da070008f56c6b8c8ad2f40f59264aec_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>重定位GPIOs</b></p><p>PA10和PA9分别可以重映射PA12和PA11这两个GPIO口，为那些在封装上没有提供这些引脚但又想访问它们的引脚功能提供了可能，通过SYS_CFG寄存器重映射。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-652f0b71abcfb418666ff624bade7ab6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-652f0b71abcfb418666ff624bade7ab6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;405&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-652f0b71abcfb418666ff624bade7ab6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-652f0b71abcfb418666ff624bade7ab6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>I/O引脚的特殊注意事项</b></p><p>在复位期间和复位后，复用功能是未激活状态，I/O引脚默认为模拟状态，在复位期间和复位后关闭施密特触发器以降低功耗。</p><p>只有SWD调试引脚保持为AF上拉/下拉的配置模式，PA13：SWDIO；PA14：SWCLK（BOOT0）。</p><p><b>I/O管脚在低功耗模式下的状态</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-492cb334c720507d42dcef73afb42d45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb\" width=\"1040\" data-original=\"https://pic2.zhimg.com/v2-492cb334c720507d42dcef73afb42d45_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1040&#39; height=&#39;627&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1040\" data-original=\"https://pic2.zhimg.com/v2-492cb334c720507d42dcef73afb42d45_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-492cb334c720507d42dcef73afb42d45_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>中断</b></p><p><b>EXTI原理图</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1fb05ba845e4b27fd00fd721a78b72e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1398\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb\" width=\"1398\" data-original=\"https://pic3.zhimg.com/v2-1fb05ba845e4b27fd00fd721a78b72e2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1398&#39; height=&#39;644&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1398\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1398\" data-original=\"https://pic3.zhimg.com/v2-1fb05ba845e4b27fd00fd721a78b72e2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1fb05ba845e4b27fd00fd721a78b72e2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>主要特性</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从stop模式唤醒，生成中断和事件，独立的中断和事件屏蔽。</p><p>可配置事件：边沿选择；</p><p>                    专门的挂起标志；</p><p>                    可由软件触发；</p><p>                    连接到GPIO，PVD，COMPx。</p><p>直接事件：状态标志由相关外设提供；</p><p>                 连接到I2Cx，USARTx，UARTx，LPUARTx，SPIx。</p><p><b>GPIO MUX从STSCFG移到EXTI</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b1575e0031a0d3ac62a218fafdd997ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1498\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb\" width=\"1498\" data-original=\"https://pic3.zhimg.com/v2-b1575e0031a0d3ac62a218fafdd997ae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1498&#39; height=&#39;586&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1498\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1498\" data-original=\"https://pic3.zhimg.com/v2-b1575e0031a0d3ac62a218fafdd997ae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b1575e0031a0d3ac62a218fafdd997ae_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>EXTI线重映射</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1ceb6d191cad516593b35677a01f3db5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb\" width=\"681\" data-original=\"https://pic2.zhimg.com/v2-1ceb6d191cad516593b35677a01f3db5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;681&#39; height=&#39;582&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"681\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"681\" data-original=\"https://pic2.zhimg.com/v2-1ceb6d191cad516593b35677a01f3db5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1ceb6d191cad516593b35677a01f3db5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMA</b></p><p>G0的DMA控制器与F0的类似，但是多了一个多路复用控制器DMAMUX。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1ddc29a6c5bd524d334e74520a360615_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb\" width=\"1437\" data-original=\"https://pic2.zhimg.com/v2-1ddc29a6c5bd524d334e74520a360615_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1437&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1437\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1437\" data-original=\"https://pic2.zhimg.com/v2-1ddc29a6c5bd524d334e74520a360615_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1ddc29a6c5bd524d334e74520a360615_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>G0 DMA特性</b></p><p>减少CPU负载，用于从内存映射源到内存映射目标的数据传输。</p><p>1x DMA控制器：可编程块传输，具有7个并发通道可以独立配置；</p><p>                           可编程通道优先级；</p><p>                           通过AHB主端口（连接到总线矩阵）传输数据；</p><p>1x 新DMA请求多路复用（DMAMUX）：可编程映射DMA请求；</p><p>                                                               事件触发和同步的DMA请求生成。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3ebed6363393a29c232206f57d4104e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"848\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"848\" data-original=\"https://pic2.zhimg.com/v2-3ebed6363393a29c232206f57d4104e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;848&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"848\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"848\" data-original=\"https://pic2.zhimg.com/v2-3ebed6363393a29c232206f57d4104e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3ebed6363393a29c232206f57d4104e5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>DMAMUX+DMA的方式最先出现在H7，然后是L4+，好处是使DMA通道对应的外设更加灵活，不再受限。</p><p><b>STM32G0 DMA和DMAMUX示例</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c0b6ad042886120f3b992ef7f233940d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-c0b6ad042886120f3b992ef7f233940d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;510&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-c0b6ad042886120f3b992ef7f233940d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c0b6ad042886120f3b992ef7f233940d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4f15cefdd32b2747db999367a69c6038_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"614\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb\" width=\"614\" data-original=\"https://pic1.zhimg.com/v2-4f15cefdd32b2747db999367a69c6038_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;614&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"614\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"614\" data-original=\"https://pic1.zhimg.com/v2-4f15cefdd32b2747db999367a69c6038_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4f15cefdd32b2747db999367a69c6038_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMA特点</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>外设到内存，内存到外设，和内存到内存的数据传输。</p><p>DMA上有7个独立可配置的通道，每个通道要么分配给DMA硬件和外设请求，或者用在内存传输中的软件请求。DMA通道之间的数据传输优先级可配置为非常高、高、中、低。每个通道可各自配置不同的数据传输格式（数据格式、地址增量类型、起始地址、块大小）。各个通道拥有各自的标志位和（块）半传输，（块）传输完成，传输错误等中断。</p><p>在总线访问错误的情况下，会自动禁用故障通道。</p><p>用于批量数据传输的可编程功能。</p><p><b>DMAMUX结构</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3d471d8458ca82dfd803f37a8ac49555_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-3d471d8458ca82dfd803f37a8ac49555_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;752&#39; height=&#39;540&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-3d471d8458ca82dfd803f37a8ac49555_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3d471d8458ca82dfd803f37a8ac49555_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMAMUX特性</b></p><p>DMAMUX是DMA请求多路复用器/路由器。</p><p>DMAMUX可将来自任何外设请求路由到7个DMA通道中任意一个中去。</p><p>另外的，有4个请求发生器，可配置由本身生成的DMA请求，触发输入及配置如下：</p><p>                触发选择：EXTI0~15，LPTIM1/2 OUT，TIM14_OC，或4个生成的DMAMUX事 </p><p>                                 件中任一个。</p><p>                触发事件：上升沿，下降沿或双边沿。</p><p>                触发事件时生成的DMA请求数（在请求发生器内置了一个计数器）。</p><p>当下一个触发事件到来而之前由生成的DMA请求数尚未完成时，触发器溢中断会通知软件处理。</p><p>对于每个DMAMUX请求多路复用器，可以配置：</p><p>                   从外设或者从请求发生器中选择DMA的请求输入，该请求输出连接到DMA控制 </p><p>                  器的给定通道。</p><p>                  可配置的同步输入：</p><p>                                             同步选择：EXTI0~15，LPTIM1/2 OUT，TIM14_OC或4个生</p><p>                                                              成的DMAMUX事件中任一个。</p><p>                                             同步时间：上升沿，下降沿或双边沿。</p><p>                                             同步事件发生时允许通过的DMA请求数。</p><p>当下一个同步信号到来之前DMA请求数还没有全部通过时，将会产生溢出中断。</p><p>可选生成的DMAMUX事件输出（多路复用器内置了一个计数器），4个DMAMUX事件作为触发输入和同步输入环回到DMAMUX，应用基于DMA通道间链接的场合。</p><p><b>生成的DMA请求和DMAMUX事件</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-67ce3c6418f92ee8c3cd179cb61d652b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"511\" data-original=\"https://pic4.zhimg.com/v2-67ce3c6418f92ee8c3cd179cb61d652b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;511&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"511\" data-original=\"https://pic4.zhimg.com/v2-67ce3c6418f92ee8c3cd179cb61d652b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-67ce3c6418f92ee8c3cd179cb61d652b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f82e8f019062286a8206a0ee527ba167_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"495\" data-original=\"https://pic4.zhimg.com/v2-f82e8f019062286a8206a0ee527ba167_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;495&#39; height=&#39;395&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"495\" data-original=\"https://pic4.zhimg.com/v2-f82e8f019062286a8206a0ee527ba167_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f82e8f019062286a8206a0ee527ba167_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMA中断</b></p><p>每个通道的中断事件：</p><p>                            半传输：当块数据的一半传输完成时置位；</p><p>                             传输完成：当块传输完成时置位；</p><p>                             传输错误：当数据传输出错时置位；</p><p>                             全局中断：每当半传输、传输完成或传输出错时置位；</p><p><b>DMAMUX中断</b></p><p>中断事件：</p><p>             请求发生器触发溢出：当下一个触发输入事件到来而之前由DMAMUX生成的DMA请</p><p>                                               求数尚未完成时，请求发生器触发溢出标志位会被置位。</p><p>             请求多路复用器同步溢出：当下一个同步事件到来而之前由DMAMUX生成的DMA请</p><p>                                                      求数尚未完成时，请求多路复用器同步溢出标志位会被置</p><p>                                                       位。</p><p><b>低功耗模式下的DMA</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bdbbded3d59c18d0935f5d551ae667bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1347\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb\" width=\"1347\" data-original=\"https://pic1.zhimg.com/v2-bdbbded3d59c18d0935f5d551ae667bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1347&#39; height=&#39;535&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1347\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1347\" data-original=\"https://pic1.zhimg.com/v2-bdbbded3d59c18d0935f5d551ae667bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bdbbded3d59c18d0935f5d551ae667bc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>互联矩阵</b></p><p>互联矩阵就是一个外设可以触发另一个外设工作，而CPU不用参与。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-22d59495de8f4637b0291550e1cb9c7c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-22d59495de8f4637b0291550e1cb9c7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;612&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"612\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"612\" data-original=\"https://pic1.zhimg.com/v2-22d59495de8f4637b0291550e1cb9c7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-22d59495de8f4637b0291550e1cb9c7c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>运用优势：时间可预测的操作；</p><p>                 降低了功耗；</p><p>                 减少了GPIO的使用。</p><p><b>主要特性</b></p><p>             外围设备之间的直接自由连接：消除了软件处理方面的延时；</p><p>             节省了CPU资源；</p><p>             无需通过专用GPIO去搭建环回信号。</p><p>可以在低功耗模式下运行（取决于外设）。</p><p><b>源和目的</b></p><p><b>源外设</b></p><p>         定时器：TIMx，LPTIMx，RTC</p><p>         模拟IP：ADC，COMPx，DACx，Vreflnt，VBAT，Temp，Sensor</p><p>         时钟：HSE，LSE，LSI，HSI16，MCO</p><p>     EXTI</p><p>         系统错误</p><p><b>目的外设</b></p><p>          定时器： TIMx，LP TIMx，IRTIM</p><p>          模拟IP：ADCx，COMPx，DACx</p><p>          DMA</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-18ab4111aabe0df5b304663562bfee6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"340\" class=\"content_image\" width=\"333\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;333&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"340\" class=\"content_image lazy\" width=\"333\" data-actualsrc=\"https://pic4.zhimg.com/v2-18ab4111aabe0df5b304663562bfee6f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>所有互联均可在下述模式下工作：RUN，Sleep，Low-power run和Low-power sleep模式</p><p>从RTC，COMP1，COMP2到低功耗定时器的（LPTIM1/LPTIM2）的连接，也适用于stop 0，stop 1和stop 2（仅LPTIM1）模式。</p><p><b>运用示例</b></p><p>             定时器同步或链接</p><p>             触发ADC，DAC或COMP（通过定时器或EXTI）</p><p>             触发DMA数据从内存到DAC（通过定时器）</p><p>             校准HSI16/LSI时钟</p><p>             温度和电压监控</p><p>             保护定时器驱动的电源开关（定时器系统错误）</p><p>             红外信号产生（定时器到IRTIM）</p><p><b>定时器同步示例</b></p><p>定时器2可以作为定时器2的预分频器</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-18630dba1be30b4046ddf41d628aad23_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1189\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"1189\" data-original=\"https://pic4.zhimg.com/v2-18630dba1be30b4046ddf41d628aad23_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1189&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1189\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1189\" data-original=\"https://pic4.zhimg.com/v2-18630dba1be30b4046ddf41d628aad23_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-18630dba1be30b4046ddf41d628aad23_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b> </p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "GPIO", 
                    "tagLink": "https://api.zhihu.com/topics/20078322"
                }, 
                {
                    "tag": "中断", 
                    "tagLink": "https://api.zhihu.com/topics/19833346"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82975455", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 5, 
            "title": "STM32旗舰店上新，错过了 说好不哭 哦~", 
            "content": "<figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-358e8ae46cfa09490903a2e8bb0648cf_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"155\" data-rawheight=\"122\" data-thumbnail=\"https://pic4.zhimg.com/v2-358e8ae46cfa09490903a2e8bb0648cf_b.jpg\" class=\"content_image\" width=\"155\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;155&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"155\" data-rawheight=\"122\" data-thumbnail=\"https://pic4.zhimg.com/v2-358e8ae46cfa09490903a2e8bb0648cf_b.jpg\" class=\"content_image lazy\" width=\"155\" data-actualsrc=\"https://pic4.zhimg.com/v2-358e8ae46cfa09490903a2e8bb0648cf_b.gif\"/></figure><p><b>多款开发板全新上架STM32天猫旗舰店</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-b3a8ff934477639ed269a8db30e7c136_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-b3a8ff934477639ed269a8db30e7c136_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-b3a8ff934477639ed269a8db30e7c136_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b3a8ff934477639ed269a8db30e7c136_b.jpg\"/></figure><p><b>STM32G0系列</b></p><p>新一代入门级32位STM32，超过93%的 I/O利用率</p><p>STM32G0 系列不仅作为一款全新的 Arm® Cortex®-M0+ 微控制器，还为高效能微控制器树立了新的标杆。此系列产品在每个细节上都实现了最出色的优化，可为您提供最佳的性价比，让您以最低的 BOM 成本和更好的灵活性来满足应用需求。</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-57c9d61e89f0a7405f9f8a51f3c47516_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-57c9d61e89f0a7405f9f8a51f3c47516_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-57c9d61e89f0a7405f9f8a51f3c47516_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-57c9d61e89f0a7405f9f8a51f3c47516_b.jpg\"/></figure><p><b>STM32G4 系列</b></p><p>支持 DSP 和 FPU 指令的可适用于混合信号应用</p><p>STM32G4 系列内置运行速度可达170 MHz 的 32 位 Arm® Cortex®-M4 内核（支持 FPU 和 DSP 指令集）与 3 种不同的硬件加速器：ART Accelerator™、CCM-SRAM 程序执行加速器和数学运算加速器。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-33e6c35e4169ffeb5e917e7be8ff894f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb\" width=\"454\" data-original=\"https://pic4.zhimg.com/v2-33e6c35e4169ffeb5e917e7be8ff894f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;454&#39; height=&#39;454&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"454\" data-original=\"https://pic4.zhimg.com/v2-33e6c35e4169ffeb5e917e7be8ff894f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-33e6c35e4169ffeb5e917e7be8ff894f_b.jpg\"/></figure><p><b>STM32WB无线系列MCU</b></p><p>STM32WB系支持无线功能的双核 MCU，内嵌 工作频率为 64 MHz 的 Arm® Cortex®-M4 内核【应用处理器】和工作频率为 32 MHz 的 Arm® Cortex®-M0+ 内核【网络处理器】。凭借两款完全独立内核的创新型架构设计，其针对实时执行（无线相关的软件处理）、资源使用灵活性、电源管理和 BOM 成本都进行了优化，从而带来更好的用户体验。</p><figure data-size=\"small\"><noscript><img src=\"https://pic2.zhimg.com/v2-61bc3ff080563ee1ff9f324af37de221_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-61bc3ff080563ee1ff9f324af37de221_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-61bc3ff080563ee1ff9f324af37de221_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-61bc3ff080563ee1ff9f324af37de221_b.jpg\"/></figure><p><b>STM32MP1</b></p><p>集成双 Arm® Cortex®-A7和 Cortex®-M4 内核的微处理器</p><p>STM32MP1 通用微处理器产品系列，系基于混合的 双Arm Cortex-A7核 和 Cortex-M4核架构产品。此系列产品在充分满足多种应用的灵活性需求的同时，又实现了最佳性能和低功耗特性。Cortex-A7 内核支持开源操作系统 (Linux/Android)，Cortex-M4 内核完美沿用现有的 STM32 MCU 生态系统，有助于开发者轻松实现各类开发应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>除了以上介绍的新系列，还有更多型号芯片及开发板都在STM32旗舰店哦</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-7700d3aaa9d6bc91c2c297a94e7bb70b_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-7700d3aaa9d6bc91c2c297a94e7bb70b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-7700d3aaa9d6bc91c2c297a94e7bb70b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-7700d3aaa9d6bc91c2c297a94e7bb70b_b.jpg\"/></figure><p>保存二维码，打开<b>手机淘宝/天猫</b>APP扫一扫功能，选择相册图片，即可查看</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p><br/> </p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "旗舰店", 
                    "tagLink": "https://api.zhihu.com/topics/19800887"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82948482", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 27, 
            "title": "STM32G4驾到！这是一颗有“分量”的诚意之作", 
            "content": "<p>去年底STM32G0的推出，实际上是释放出了一个很明确的信号——<b>STM32 MCU从“F”系列到“G”系列的主流型系列升级之旅，已经全面开启</b>，未来我们将迎来越来越多的“G”字辈的新器件！</p><p>不出所料，<b>官宣的“重量级力作”，STM32G4来了！</b>对于 STM32G4这一全新的MCU系列，为何赋予如此有“分量”的评价，让我们一探究竟。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>F系列的全面升级</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从STM32 MCU整体的产品布局和路线图上看，<b>STM32G4</b>定位于“主流MCU”系列，其直接对标的就是之前的STM32F3和STM32F1，可视为STM32F3和STM32F1的升级之作，主攻工业、消费、电机控制、数字电源等主流应用市场。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a602c57ee2afff690a0a4dcf7d161937_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb\" width=\"870\" data-original=\"https://pic4.zhimg.com/v2-a602c57ee2afff690a0a4dcf7d161937_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;870&#39; height=&#39;510&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"870\" data-rawheight=\"510\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"870\" data-original=\"https://pic4.zhimg.com/v2-a602c57ee2afff690a0a4dcf7d161937_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a602c57ee2afff690a0a4dcf7d161937_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32 MCU产品布局</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>有了之前STM32F3和STM32F1市场磨砺的经验，STM32G4在产品的设计上弥补了前者的性能和外设资源上的不足，以适应细分市场发展的需要，可以说其性能和外设资源上的提升是全面的。具体来讲，包括以下几方面：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>01、高性能</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G4基于Arm® Cortex®-M4内核，支持FPU和DSP指令集，主频高达170MHz，相较于STM32F3和STM32F1的72MHz的主频，提高了一大步。同时，STM32G4引入了新的硬件数学运算加速器 —— 数学滤波加速器（FMAC）和专用CORDIC（坐标旋转数字计算）引擎，这让STM32G4在进行电机控制的坐标旋转变换，三角函数、对数、平方根运算，以及数学滤波和数字电源控制时，更加游刃有余，为主处理器大大“减负”，提高了CPU运算效率。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>02、高效率</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G4灵活的互连矩阵允许外设之间的自主通信，进一步释放了CPU的资源，使得器件实现了极佳的性能。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>03、低功耗</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>工作模式下功耗低于165μA/MHz。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>04、模拟外设丰富</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>集成更丰富的模拟外设是STM32G4的一大亮点，ADC、DAC、运算放大器、比较器，应有尽有。STM32G4系列中最高配置MCU中的模拟外设多达25个。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>05、更安全</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G4具有安全存储区 ，集成了硬件加密AES-256、硬件随机数发生器，增强了用户程序保密性和通讯安全性，更高的安全性对物网应用尤为重要。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>06、更可靠</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>此外，STM32G4系列最高工作温度可达到125°C，具有更强的抗电气干扰能力，可耐受4kV以上的瞬变电压，增强的可靠性也进一步扩展了其应用范围，特别是一些工业领域。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>匹配细分市场的三大系列</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在以上全面性能提升的基础上，STM32G4还根据差异化应用市场的需要，将产品细分为三个系列。图2中详细比较了三个子系列产品的差异。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-342826ec9c5ca761b5b377daf64fc953_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb\" width=\"987\" data-original=\"https://pic4.zhimg.com/v2-342826ec9c5ca761b5b377daf64fc953_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;987&#39; height=&#39;548&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"548\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"987\" data-original=\"https://pic4.zhimg.com/v2-342826ec9c5ca761b5b377daf64fc953_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-342826ec9c5ca761b5b377daf64fc953_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32G4三个子系列MCU性能比较</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>基础型系列STM32G4x1</b>，具有入门级模拟外设配置，单存储区Flash，支持的Flash存储器容量范围从32到512KB。<b>增强型系列STM32G4x3</b>，与基本型器件相比具有更多数量的模拟外设，以及双存储区Flash，Flash存储器容量也提高到128到512KB，显然适合更高阶的应用。<b>高分辨率系列STM32G4x4</b>，除了具备与增强型系列同样丰富的模拟外设和存储器资源外，STM32G4x4系列具有高分辨率定时器和复杂波形生成器，以及事件处理器，这使其特别适合于数字电源应用，如数字开关电源、照明、焊接、太阳能和无线充电等。STM32G4x4高分辨率系列包括7个高分辨率定时器，它们包括12个PWM输出（可以成对耦合输出）和10个外部事件输入（电流限制、零电压/零电流检测等）和6个故障输入。这些高分辨率定时器的主要特性包括：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>184 ps分辨率，适用于所有工作模式：可变占空比、可变频率和信号跳变模式。</li><li>可减轻CPU的负担的诸多特性：谷值跳过和斜率补偿；每个定时器一个DMA通道；内置突发模式控制器和特定拓扑模式——推挽和谐振。</li><li>定时器之间有很多互连：复位/启动相邻的定时器；置位/复位/切换输出。</li></ul><p>STM32G4一问世便推出这么丰富的产品系列，对于开发者来说，也就有了更多选择，更方便大家为目标应用找到最合适的那颗“芯”。由此也能感觉到，面对未来的目标市场，STM32G4确是有备而来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>软硬开发生态是神助攻</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>提到STM32，肯定免不了要探究一下其相关的开发生态。这些年大家也已经习惯了，伴随着每一款STM32新品的推出，总是有及时跟进的设计生态资源“助攻”，STM32G4也不例外，目前让开发者触手可及的资源包括：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>支持STM32G4 MCU的NUCLEO开发板：NUCLEO-G474RE 和 NUCLEO-G431RB；</li><li>功能齐全的评估板：STM32G474E-EVAL 和板载加密和加速度计的STM32G484E-EVAL；</li><li>开发工具：STM32CubeG4开发软件；</li><li>专用开发套件：包括一套Nucleo马达控制专用开发板（P-NUCLEO-IHM03）和软件开发套件（X-CUBE-MCSDK v5.4），以及线上马达控制工具ST-MC-SUITE。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3086f6307b33f8c85c1500c793c1d910_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-3086f6307b33f8c85c1500c793c1d910_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;422&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-3086f6307b33f8c85c1500c793c1d910_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3086f6307b33f8c85c1500c793c1d910_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>支持STM32G4 MCU的Nucleo开发板</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>还有很重要的一点，<b>STM32G4与STM32F3和STM32F1的高度兼容</b>，这就让开发者有机会将以前的设计平滑过渡到新一代MCU平台上，实现差异化的性能和更高的开发效率。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>总之，无论是从产品性能、市场准备，还是配套生态上来看，STM32G4的推出都可以说是STM32成熟体系中的一次稳步升级，从某种意义上讲，这一“主流”MCU系列也为整个G系列MCU定下了基调。这种“分量”和“诚意”，你是否也感受到了？</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "MCU", 
                    "tagLink": "https://api.zhihu.com/topics/19916470"
                }
            ], 
            "comments": [
                {
                    "userName": "郎云飞", 
                    "userLink": "https://www.zhihu.com/people/2f40e241c6acf234c8f5e307a784a5b9", 
                    "content": "那么 哪里能买到", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "AI电堂", 
                            "userLink": "https://www.zhihu.com/people/f29964d190c8e4b669bb47d56ff8368c", 
                            "content": "<p>在ST官网可以买到</p>", 
                            "likes": 0, 
                            "replyToAuthor": "郎云飞"
                        }
                    ]
                }, 
                {
                    "userName": "章鱼博士", 
                    "userLink": "https://www.zhihu.com/people/1b4fe3e6fa5ac4fef2e17040ecd8a2d0", 
                    "content": "你们俩这段配合的不错", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82783578", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "【群聊邀请】加入这个朋友圈，体验不一样的STM32研讨会", 
            "content": "<p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32</a><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年全国研讨会</a></b>将于今天在北京和杭州两地拉开序幕。不用多想，即将走进13城市的<b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">全国巡回研讨会</a></b>将围绕“<b>未来的STM32</b>”展开，拥有32位MCU最全产品线、面向应用升维的新品将是本次研讨会的热门话题。来吧，让电小二带你领略不一样的参会体验！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>来不及多说，先上车看看STM32的软件生态……</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>不喜欢看剧透的朋友，扫描下方二维码，<b>直接参与“STM32全国巡回研讨会”，13城市任你选，可以现场报名哦！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6f8501c86c5ca5993f58dbbe514fb62e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"260\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"260\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic3.zhimg.com/v2-6f8501c86c5ca5993f58dbbe514fb62e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>对于迫不及待想了解更多的小伙伴，电小二也为大家准备了一份剧透清单，拿走不谢！</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>什么样的产品，才能站在通用MCU市场“一号位”？</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>据 IHS Market 数据，<b>STM32在2018年站在了中国通用MCU市场“一号位”</b>。凭的是什么？是<b>对应用市场的认知升级</b>。万物要互联的市场需求要求主控芯片不仅具有传统MCU单纯的逻辑控制能力，还要在系统中集成更复杂的功能和小型化的需求，比如传感器的数据处理、射频模块以及复杂算法等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2c897fc05eb99019f5fa111614eb30fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2c897fc05eb99019f5fa111614eb30fb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2c897fc05eb99019f5fa111614eb30fb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2c897fc05eb99019f5fa111614eb30fb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>而STM32十二年的成长史，就是产品能力不断升维的过程，紧耦合应用市场的变化，完成从传统向未来的跨越！</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8a970b674899bf16db3e6c38d55d91ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8a970b674899bf16db3e6c38d55d91ad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8a970b674899bf16db3e6c38d55d91ad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8a970b674899bf16db3e6c38d55d91ad_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>你知道这两年STM32开拓的新江湖吗？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32的产品观是为开发者提供最全的产品图谱</b>，提供不同CPU主频、Coremark或者DMIPS分数的产品系列，同时兼顾性能和成本优化，让开发者能够找到最适合自己应用的产品。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-47fc60fc5efe502ec6507abcd5c4c8ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-47fc60fc5efe502ec6507abcd5c4c8ff_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-47fc60fc5efe502ec6507abcd5c4c8ff_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-47fc60fc5efe502ec6507abcd5c4c8ff_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>STM32WB 集成了低功耗蓝牙的SOC方案，代表着未来STM32在更强大通信功能上的投入；</li><li>STM32G0和STM32G4的性能提升和成本优化，是对F0和F3的升级迭代，继续巩固和拓展主流市场；</li><li>STM32H7双核系列拓展了MCU可以达到的性能边界，以把多任务分配到不同的核来解决单核MCU的性能瓶颈；</li><li>STM32MP1作为ST第一款通用MPU，兼顾了ARM Cortex-A核的高主频和对smartOS(Linux, Android)的支持优势，同时又发挥了MCU的丰富外设和对实时操作系统的良好支持</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32如何与合作伙伴共赢共生？</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>嵌入式物联网落地的征途上，从来没有孤胆英雄。这场硬仗，需要<b>生态圈的伙伴们</b>共同完成。STM32全国巡回研讨会期间，ST将与三十多家生态圈合作伙伴携手，全面展示产业生态融合的发展趋势、应用方案。这里，将是<b>STM32生态圈</b>的大趴体！这个大咖云集、协同创新、共建生态的“朋友圈”，一定要加入哦！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-49a03c6a40dcfb77c1236216cbfc403d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-49a03c6a40dcfb77c1236216cbfc403d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-49a03c6a40dcfb77c1236216cbfc403d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-49a03c6a40dcfb77c1236216cbfc403d_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=https%3A//v.alltuu.com/album/1010752313/%3Ffrom%3Dgroupmessage%26isappinstalled%3D0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年9月17日</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//v.alltuu.com/album/1010752313/%3Ffrom%3Dgroupmessage%26isappinstalled%3D0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会在京杭两地拉开序幕</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//v.alltuu.com/album/1010752313/%3Ffrom%3Dgroupmessage%26isappinstalled%3D0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">点击上面图片，进入北京站图片直播相册</a></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;459&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年9月27日</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会将在上海收官</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">点击上面图片，预约上海站视频直播</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>扫码加小电微信：diantang18，</p><p>邀您加入STM32全国研讨会技术交流群</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a3fe081d3c764042ae0869343b4d65eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb\" width=\"912\" data-original=\"https://pic4.zhimg.com/v2-a3fe081d3c764042ae0869343b4d65eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;912&#39; height=&#39;836&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"912\" data-original=\"https://pic4.zhimg.com/v2-a3fe081d3c764042ae0869343b4d65eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a3fe081d3c764042ae0869343b4d65eb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>参会有惊喜</b></p><p>两种方式获得精美礼品：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>亲临13城市线下研讨会，有机会抽奖环节赢大奖：<b>BOSE 700无线降噪耳机</b>。</li><li>参与9月27日上海站收官现场视频直播，答问卷参与抽奖，赢取 <b>STM32 Inside 的大疆机甲大师 RoboMaster S1</b>。还不赶快行动，<b>点击上方图片观看直播，或扫描客服小电二维码参与活动</b>。</li></ul><p><b>活动小贴士：</b>STM32全国研讨会结束后即70年国庆，我们将于国庆假期后通过短信或微信的形式联系获奖者。本活动仅限电子行业从业人士及相关专业学生参与。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "研讨会", 
                    "tagLink": "https://api.zhihu.com/topics/20040994"
                }
            ], 
            "comments": [
                {
                    "userName": "萌新的小懵逼", 
                    "userLink": "https://www.zhihu.com/people/7ce958b5c884e6c5c71ff59eed2b00ad", 
                    "content": "<p>上海的举办地在哪儿？</p><p></p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "AI电堂", 
                            "userLink": "https://www.zhihu.com/people/f29964d190c8e4b669bb47d56ff8368c", 
                            "content": "<p>上海站是9月27号13:30在上海中星铂尔曼大酒店三层大宴会厅（上海市徐汇区浦北路1号）</p>", 
                            "likes": 0, 
                            "replyToAuthor": "萌新的小懵逼"
                        }
                    ]
                }, 
                {
                    "userName": "白茶", 
                    "userLink": "https://www.zhihu.com/people/9d7492b6334b53142c5d1b58df5aadc5", 
                    "content": "小电的微信二维码扫不出。可以去现场报名么？知道的晚了没办法线上报名了[思考]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82632600", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "STM32G0技术详解 _ PWR", 
            "content": "<p>这篇文章来简单介绍一下<b>STM32G0的POWER</b>部分。</p><p>说到POWER，首先会想到跟低功耗相关的一些内容，所以可以把GO和L4系列做一个对比。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d075076bd266ebb8112691c5b44e05d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1126\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"1126\" data-original=\"https://pic4.zhimg.com/v2-d075076bd266ebb8112691c5b44e05d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1126&#39; height=&#39;308&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1126\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1126\" data-original=\"https://pic4.zhimg.com/v2-d075076bd266ebb8112691c5b44e05d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d075076bd266ebb8112691c5b44e05d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>L系列也就是LOW POWER系列，它的低功耗模式是非常多的，一个好的低功耗产品有别于普通的MCU产品，一定是说它有不同的低功耗模式可供选配。</p><p>L4有一个stop 2模式，在所有STM32的产品中stop模式基本上基本上都是功耗最低的，执行到stop唤醒之后程序还可以进行下去，其他比stop模式功耗更低的模式，在程序唤醒之后就是reset，不可以再继续往下走。</p><p>Stop里面也根据有哪些外设是可以使用的、哪些外设不可以使用分为stop 0、stop 1、stop 2，在L4里有stop 2模式，在STM32里stop 2的功耗&lt;stop 1&lt;stop 0，GO里面没有stop 2模式，它只有stop 0和stop 1，设计的时候也是考虑这两种模式于G0来说已经可以满足客户的需要了。</p><p>除了stop模式，还有standby模式，standby模式比stop模式的功耗更低，但是系统从standby模式唤醒后，整个系统要reset，不会继续执行代码。Standby模式下有一个小的SRAM，可以做数据的保持，在L4的SRAM比较大，它是把SRAM划分成几个SRAM，几个不同的SRAM中只有SRAM2可以做数据的保持，而在G0中所有的SRAM都可以做数据的保持。</p><p>PVD和BOR是做电压的检测，BOR是欠压检测，欠压检测就是如果没达到阈值电压的时候，是不能上电的，不能reset；掉电的时候也是这样，掉到阈值电压以下就reset，这是让整个系统更加稳定的功能。PVD就是可编程电压的检测器，可编程的电压不会产生reset，它是产生一个中断，另外可编程就意味着阈值电压是可以遍进去的，所以这是一个比较方便的外设。在L4中，下降和上升阈值必须一起配置，而在G0中，下降和上升阈值可以各自配置。</p><p>BOR和PDR周期采样是在G0中才存在的功能。</p><p><b>电源设计</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-94c57efa86afae0e58703748e10041b6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic3.zhimg.com/v2-94c57efa86afae0e58703748e10041b6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;805&#39; height=&#39;478&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"478\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"805\" data-original=\"https://pic3.zhimg.com/v2-94c57efa86afae0e58703748e10041b6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-94c57efa86afae0e58703748e10041b6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>从电源设计的角度，我们看任何一个MCU，都要看它的电源是怎么设计的，尤其是低功耗的时候电源也很重要。</p><p>对于这个电源来说，进来的电是VDD，VDD进来之后一部分给数字供电，一部分给模拟供电</p><p>，数字部分给数字外设供电，外设供电之后数字有一部分通过电压调节器分出来内核的电压，内核的电压是可以去调节的，其实电压调节器也分好几种——主电压调节器、低功耗电压调节器，不同的电压调节器本质上是说输出给内核的电压是不同的，有可能全输的时候是1.2V的，有可能半输的时候是1.0V的，也有可能低功耗的时候比1.0V还低，电压和整个MCU跑的频率是成正比的，电压越大，MCU整个主频跑的越快；电压越低，主频越小。数字部分还有standby电路的电压，有一个备份域，我们可以看到VBAT，这个的意思就是说可以接电池去给它供电，如果整个系统VDD是有电的话，那就自动通过VDD来供电，当系统的VDD没有电了，这时候有电池，VBAT这个引脚接了电池，就转为电池供电。</p><p>G0的模拟比较好的是它有一个VREF buffer，这个buffer的意思是它提供两个内部的参考电压源，这两个参考电压源很精准，一个是2.5V，一个2.48V，可以用做内部模拟器件的参考电压，而且还可以输出用做外部的参考电压。</p><p>VDD供电范围是1.7V~3.6V（最低可1.6V，低于该值则会产生Power-down），在存在其他独立电源供电时，VDD必须提供。</p><p>VDD供电范围是1.62~3.6V，当使用ADC或COMP时，VDDA的最小供电电压为1.62V；当使用DAC时，VDDA的最小供电电压为1.8V；当时用VREFBUF时，VDDA的最小供电电压为2.4V。</p><p>当VDDA&lt;2V时，VREF+=VDDA；当VDDA&gt;2V时，2V&lt;VREF+&lt;VDDA；</p><p>VBAT的电压范围为1.55~3.6V，供电范围包括RTC和128字节备份寄存器。</p><p>VREF+：ADC和DAC的参考电压，该电压可以由外部参考电压或者内部的电压参考buffer提供，在低引脚数量的封装上不提供VREF+引脚和内部参考电压，此时VREF+与VDDA内部连接到VDD，内部电压参考buffer保持禁用状态。</p><p><b>电源稳压器</b></p><p>对于GO来说，稳压器是由两个部分组成的，一个是主稳压器，另一个是低功耗稳压器。</p><p>主稳压器有2个电压范围（Range 1：1.2V，Range 2：1.0V），用于状态电压调整，用在RUN、Sleep和stop 0模式下。</p><p>低功耗稳压器用在LP Run、LP Sleep和带SRAM内容保留的stop 1模式。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6d8a660df89bde6b491dc244f44cf512_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"647\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic3.zhimg.com/v2-6d8a660df89bde6b491dc244f44cf512_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;647&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"903\" data-rawheight=\"647\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic3.zhimg.com/v2-6d8a660df89bde6b491dc244f44cf512_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6d8a660df89bde6b491dc244f44cf512_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>G0的不同功耗模式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-df007e2c47c0490a3ad2cbecdb73e9f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-df007e2c47c0490a3ad2cbecdb73e9f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;355&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-df007e2c47c0490a3ad2cbecdb73e9f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-df007e2c47c0490a3ad2cbecdb73e9f8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗模式状态机</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7780d3a18f55e6301de842fa7e10ec9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-7780d3a18f55e6301de842fa7e10ec9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;638&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"638\" data-original=\"https://pic3.zhimg.com/v2-7780d3a18f55e6301de842fa7e10ec9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7780d3a18f55e6301de842fa7e10ec9e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>主要特性</b></p><p>7种低功耗模式带快速唤醒，低至33nA（Shutdown）仍可用I/O唤醒，低至870nA（standby）仍可有36KB RAM保留能力，很多种外设可以从低功耗模式下唤醒MCU。</p><p>在运行模式下低至98.3µA/MHz。</p><p>VBAT模式依旧可以保持RTC和备份寄存器的内容。</p><p><b>运用优势</b></p><p>高度灵活度使用户可以选择多个低功耗模式，这取决于需要激活哪些外设，性能要求以唤醒源。</p><p>增加了电池使用寿命。</p><p>由于只有一对VDD/VSS电源对，从而降低了BOM成本。</p><p><b>RUN和LP RUN模式</b></p><p>每一个外设的时钟可以配置为开启ON或关闭OFF，复位后，除了FLASH所有的外设时钟都是关闭的；在RUN模式下，SRAM时钟总是ON开启的。</p><p>当从SRAM启动（在RUN或LP RUN 模式下），FLASH闪存可以处于Power-down模式（仅限Low-Power run）；FLASH闪存时钟可以关闭；中断向量必须被重映射到SRAM。</p><p><b>Sleep和LP Sleep模式</b></p><p></p><p>内核停止，每个外设的时钟可以被打开或关闭。</p><p>通过执行WFI（等待中断）或WFE（等待事件）进入该模式。</p><p>2种机制进入该模式：Sleep Now：一旦执行了WFI/WFE事件后，MCU就立刻进入Sleep模式；</p><p> Sleep on Exit：一旦退出了最低优先级ISR，MCU就立刻进入Sleep模式，在进入Sleep模式前，栈没有被弹出，在下个中断产生时也不会被压栈，节省运行时间。 </p><p> 由内核Cortex-M0+系统控制寄存器[SLEEPONEXIT]。</p><p><b>Sleep模式：Range 1</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-da2e4408dd85035509bc7e9aad00bfcd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-da2e4408dd85035509bc7e9aad00bfcd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;394&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-da2e4408dd85035509bc7e9aad00bfcd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-da2e4408dd85035509bc7e9aad00bfcd_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>LP Sleep</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-529955e558325b8f71b452bd06783c68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-529955e558325b8f71b452bd06783c68_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;391&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-529955e558325b8f71b452bd06783c68_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-529955e558325b8f71b452bd06783c68_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Stop模式</b></p><p>SRAM和所有的外设寄存器保留。</p><p>所有的高速时钟停止。</p><p>LSE（32.768KHz外部时钟）和LSI（32KHz内部时钟）可以使能。</p><p>一些外设能够被激活并且用于从stop模式唤醒。</p><p>系统时钟唤醒后是HSI16（2µs唤醒时钟从SRAM启动，5.6µs从FLASH启动）。</p><p>Stop 1和stop 2在主稳压器关闭的情况下是等同的，会有一个更小的功耗但是更长的唤醒时间。</p><p><b>Stop 0模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-26e86057dee1f625f714d96cdb87cf1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-26e86057dee1f625f714d96cdb87cf1b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-26e86057dee1f625f714d96cdb87cf1b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-26e86057dee1f625f714d96cdb87cf1b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Stop 1模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-67291f6f9d4f58365f7da7eb817e5c4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-67291f6f9d4f58365f7da7eb817e5c4a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-67291f6f9d4f58365f7da7eb817e5c4a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-67291f6f9d4f58365f7da7eb817e5c4a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Stop模式对比</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3c77ae64c0c0357ece5656c64fd13a70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"1055\" data-original=\"https://pic1.zhimg.com/v2-3c77ae64c0c0357ece5656c64fd13a70_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1055&#39; height=&#39;546&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1055\" data-original=\"https://pic1.zhimg.com/v2-3c77ae64c0c0357ece5656c64fd13a70_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3c77ae64c0c0357ece5656c64fd13a70_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Stop 0和stop 1模式最明显的区别就是稳压器不同，也就导致两种模式的功耗有很大区别。</p><p><b>Standby模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>SRAM和寄存器内容默认不会保存（电源稳压器为关闭），但20字节备份寄存器总是保存的。</p><p>可以设置为保存36K字节SRAM的内容（默认不保留SRAM的内容，但可配置）。</p><p>超低功耗BOR/PDR配置：忽略下降VDD斜率，采用ULP模式周期性监控VDD电压从而降低功耗。</p><p>每个I/O口可配置为上拉/下拉，利用PWR_PUCRx/PWR_PDCRx寄存器（x=A,B,……H），当PWR_CR3寄存器中的APC=1时，允许去控制外部器件的输入状态。</p><p>唤醒引脚：每个唤醒引脚的极性可配置。</p><p>唤醒时钟是HSI16为16MHz。</p><p><b>Standby模式下带SRAM</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9a4c65bb1596a0919c40d5d1e16e93f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-9a4c65bb1596a0919c40d5d1e16e93f5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;393&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"393\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-9a4c65bb1596a0919c40d5d1e16e93f5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9a4c65bb1596a0919c40d5d1e16e93f5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Standby模式不带SRAM</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7f87291e87abc8865330937dd958c37e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-7f87291e87abc8865330937dd958c37e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;398&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"398\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-7f87291e87abc8865330937dd958c37e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7f87291e87abc8865330937dd958c37e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Shutdown模式</b></p><p>Shutdown模式和standby模式类似，但是没有电源监控，即没有BOR和PDR，供电不能切换到VBAT，如果电压的供电低于1.6V产品的状态不能得到保证，并不能自动切换到VBAT；</p><p>没有LSI，没有IWDG。</p><p>当从shutdown模式跳出来将产生BOR复位，除了那些在备份域之外的所有的寄存器被复位，产生复位信号。</p><p>20字节的备份寄存器。</p><p>唤醒源：5个唤醒引脚，RTC。</p><p>唤醒时钟为16MHz的HSI。</p><p><b>Shutdown模式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-cf42d9138387059af7f0146236ad1473_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"396\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-cf42d9138387059af7f0146236ad1473_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;396&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"396\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-cf42d9138387059af7f0146236ad1473_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-cf42d9138387059af7f0146236ad1473_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗模式总结</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c9924c65ba790c891971e98282877fac_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1207\" data-rawheight=\"603\" class=\"origin_image zh-lightbox-thumb\" width=\"1207\" data-original=\"https://pic1.zhimg.com/v2-c9924c65ba790c891971e98282877fac_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1207&#39; height=&#39;603&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1207\" data-rawheight=\"603\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1207\" data-original=\"https://pic1.zhimg.com/v2-c9924c65ba790c891971e98282877fac_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c9924c65ba790c891971e98282877fac_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>VBAT备份域</b></p><p>备份域包含：RTC由32.768KHz LSE提供，包含2个入侵引脚（tamper pins）；</p><p>  20字节备份寄存器；</p><p>  RCC_BDCR寄存器。</p><p>当VDD电源关闭和开启时，内部会在VBAT和VDD之间自动切换。</p><p>内部连接到ADC通道用于检测电压（VBAT/3）。</p><p>VBAT充电：当VDD存在时，允许通过内部电阻对VBAT上的超级电容充电。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7117de9304bc36ac189d9a3edb7a3da5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1493\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb\" width=\"1493\" data-original=\"https://pic2.zhimg.com/v2-7117de9304bc36ac189d9a3edb7a3da5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1493&#39; height=&#39;454&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1493\" data-rawheight=\"454\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1493\" data-original=\"https://pic2.zhimg.com/v2-7117de9304bc36ac189d9a3edb7a3da5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7117de9304bc36ac189d9a3edb7a3da5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>VBAT模式</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-52d609683be462f7c49ee55940b7d9bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-52d609683be462f7c49ee55940b7d9bb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;391&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"391\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-52d609683be462f7c49ee55940b7d9bb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-52d609683be462f7c49ee55940b7d9bb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电源监控</b></p><p>除了shutdown模式，在所有的模式下POR和PDR总是使能的，在stop 0/1和standby模式下，它只能在ULPEN比特位设置后周期性的工作。</p><p>当BOR_EN选项位使能后，除了shutdown模式，在所有的模式下BOR总是使能的，无论VDD斜率如何，只要MCU供电电压降到所选的阈值以下就能复位，可以通过选项字节BORR_LEV[1:0]和BORF_LEV[1:0]分别对上升沿和下降沿选择4种阈值。</p><p>除了standby和shutdown模式，在所有的模式下PVD总是使能的，7个阈值+PVD_IN（Vrefint），对于上升沿或下降沿可独立配置。</p><p>PVD的上升阈值PVDRT可以选择使用内部连接的Vrefint，此时PVDFT无效。</p><p><b>欠压BOR复位</b></p><p>与STM32F0相比，G0的POR/PDR之外还存在着一个BOR。</p><p>BOR将器件保持在复位状态，直到达到所需的电源电压。</p><p>4个BOR阈值，可以独立的配置上升沿和下降沿，为用户提供滞后的灵活性。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a0814ddf6ad7a06c5cfe2dcdf6e609a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"459\" data-original=\"https://pic1.zhimg.com/v2-a0814ddf6ad7a06c5cfe2dcdf6e609a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;459&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"459\" data-original=\"https://pic1.zhimg.com/v2-a0814ddf6ad7a06c5cfe2dcdf6e609a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a0814ddf6ad7a06c5cfe2dcdf6e609a4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c1ef0e80d920b082f5ffcbcdbd70ca87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb\" width=\"837\" data-original=\"https://pic4.zhimg.com/v2-c1ef0e80d920b082f5ffcbcdbd70ca87_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;837&#39; height=&#39;586&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"837\" data-original=\"https://pic4.zhimg.com/v2-c1ef0e80d920b082f5ffcbcdbd70ca87_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c1ef0e80d920b082f5ffcbcdbd70ca87_b.jpg\"/></figure><p><b>电源电压检测</b></p><p>与STM32F0相比，G0的PVD允许用户分别设置上升沿和下降沿的电压阈值，PVD仍然连接到极性可配的EXTI Line，以便执行安全关闭任务（如刹车输入）。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1d492c6c7f2d2725b5e4a2760628df22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic3.zhimg.com/v2-1d492c6c7f2d2725b5e4a2760628df22_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;595&#39; height=&#39;650&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"595\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"595\" data-original=\"https://pic3.zhimg.com/v2-1d492c6c7f2d2725b5e4a2760628df22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-1d492c6c7f2d2725b5e4a2760628df22_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82282201", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "嵌入式系统应该怎样设计硬件电路", 
            "content": "<p>1、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/mcu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MCU</a></u>的选择</p><p>选择MCU时要考虑MCU所能够完成的功能、MCU的价格、功耗、供电电压、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1010\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">I/O</a></u>口电平、管脚数目以及MCU的封装等因素。MCU的功耗可以从其<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电气性能</a></u>参数中查到。供电电压有5V、3.3V以及1.8V超低电压供电模式。为了能合理分配MCU的I/O资源，在MCU<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/canshu\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">选型</a></u>时可绘制一张引脚分配表，供以后的设计使用。</p><p>2、电源</p><p>（1）考虑系统对电源的需求，例如系统需要几种电源，如24V、12V、5V或者3.3V等，估计各需要多少功率或最大<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E6%25B5%2581/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电流</a></u>（mA）。在计算电源总功率时要考虑一定的余量，可按公式“电源总功率=2×器件总功率”来计算。</p><p>（2）考虑芯片与器件对电源波动性的需求。一般允许电源波动幅度在±5%以内。对于A/D转换芯片的参考电压一般要求±1%以内。</p><p>（3）考虑工作电源是使用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E6%25BA%2590%25E6%25A8%25A1%25E5%259D%2597/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源模块</a></u>还是使用外接电源。</p><p>2、电源</p><p>（1）考虑系统对电源的需求，例如系统需要几种电源，如24V、12V、5V或者3.3V等，估计各需要多少功率或最大<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E6%25B5%2581/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电流</a></u>（mA）。在计算电源总功率时要考虑一定的余量，可按公式“电源总功率=2×器件总功率”来计算。</p><p>（2）考虑芯片与器件对电源波动性的需求。一般允许电源波动幅度在±5%以内。对于A/D转换芯片的参考电压一般要求±1%以内。</p><p>（3）考虑工作电源是使用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%2594%25B5%25E6%25BA%2590%25E6%25A8%25A1%25E5%259D%2597/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源模块</a></u>还是使用外接电源。</p><p>3、普通I/O口</p><p>（1）上拉、下拉<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/yuanqijian/dianzuqi/20171214603273_2.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电阻</a></u>：考虑用内部或者外部上/下拉电阻，内部上/下拉阻值一般在700Ω左右，低功耗模式不宜使用。外部上/下拉电阻根据需要可选10KΩ～1MΩ之间。</p><p>（2）<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/848\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开关</a></u>量输入：一定要保证高低电压分明。理想情况下高电平就是电源电压，低电平就是地的电平。如果外部<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></u>无法正确区分高低电平，但高低仍有较大压差，可考虑用A/D采集的方式设计处理。对分压方式中的采样点，要考虑分压电阻的选择，使该点通过采样端口的电流不小于采样最小输入电流，否则无法进行采样。</p><p>（3）开关量输出：基本原则是保证输出高电平接近电源电压，低电平接近地电平。I/O口的吸纳电流一般大于放出电流。对小功率<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">元器件</a></u>控制最好是采用低电平控制的方式。一般情况下，若负载要求小于10mA，则可用芯片引脚直接控制；电流在10~100mA时可用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/645955.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">三极管</a></u>控制，在100mA～1A时用IC控制；更大的电流则适合用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/870\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">继电器</a></u>控制，同时建议使用光电隔离芯片。</p><p>4、A/D电路与D/A电路</p><p>（1）A/D电路：要清楚前端采样基本原理，对电阻型、电流型和电压型<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/835\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">传感器</a></u>采用不同的采集电路。如果采集的信号微弱，还要考虑如何进行信号放大。</p><p>（2）D/A电路：考虑MCU的引脚通过何种输出电路控制实际对象。</p><p>5、控制电路</p><p>对外控制电路要注意设计的冗余与反测，要有合适的信号隔离措施等。在评估设计的布板时，一定要在构件的输入输出端引出检测孔，以方便排查错误时<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/851\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测量</a></u>。</p><p>6、考虑低功耗</p><p>低功耗设计并不仅仅是为了省电，更多的好处在于降低了电源模块及散热系统的成本。由于电流的减小也减少了电磁辐射和热噪声的干扰。随着设备温度的降低，器件寿命则相应延长，要做到低功耗一般需要注意以下几点：</p><p>（1）并不是所有的总线信号都要上拉。上下拉电阻也有功耗问题需要考虑。上下拉电阻拉一个单纯的输入信号，电流也就几十微安以下。但拉一个被驱动了的信号，其电流将达毫安级。所以需要考虑上下拉电阻对系统总功耗的影响。</p><p>（2）不用的I/O口不要悬空，如果悬空的话，受外界的一点点干扰就可能成为反复振荡的输入信号，而MOS器件的功耗基本取决于门电路的翻转次数。</p><p>（3）对一些外围小芯片的功耗也需要考虑。对于内部不太复杂的芯片功耗是很难确定的，它主要由引脚上的电流确定。例如有的芯片引脚在没有负载时，耗电大概不到1毫安，但负载增大以后，可能功耗很大。</p><p>技术指导微信:xydf321456</p><p>技术指导QQ：754634522</p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "MCU", 
                    "tagLink": "https://api.zhihu.com/topics/19916470"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82284986", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "嵌入式微处理器是由什么组成", 
            "content": "<p>嵌入式系统硬件层的核心是嵌入式微处理器，嵌入式微处理器与通用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/cpu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CPU</a></u>最大的不同在于嵌入式微处理器大多工作在为特定用户群所专用设计的系统中，它将通用CPU许多由板卡完成的任务集成在芯片内部，从而有利于嵌入式系统在设<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计时</a></u>趋于小型化，同时还具有很高的效率和可靠性。</p><p>嵌入式微处理器的体系结构可以采用冯·诺依曼体系或哈佛体系结构;指令系统可以选用精简指令系统（Reduced Instruc<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ti/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></u>on Set Compu<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">te</a></u>r，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/risc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC</a></u>）和复杂指令系统CISC（Complex Instruc<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>on Set Computer，CISC）。RISC<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>在通道中只包含最有用的指令，确保数据通道快速执行每一条指令，从而提高了执行效率并使CPU硬件结构设计变得更为简单。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9b90fde6362e28ac897bf4a52fb594cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-9b90fde6362e28ac897bf4a52fb594cd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;460&#39; height=&#39;351&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"351\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-9b90fde6362e28ac897bf4a52fb594cd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9b90fde6362e28ac897bf4a52fb594cd_b.jpg\"/></figure><p>嵌入式微处理器有各种不同的体系，即使在同一体系中也可能具有不同的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></u>频率和数据总<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">线宽</a></u>度，或集成了不同的外设和<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>。据不完全统计，目前全世界嵌入式微处理器已经超过1000多种，体系结构有30多个系列，其中主流的体系有<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/arm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></u>、<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MI</a></u>PS、PowerPC、X86和SH等。但与全球PC市场不同的是，没有一种嵌入式微处理器可以主导市场，仅以32位的产品而言，就有100种以上的嵌入式微处理器。嵌入式微处理器的选择是根据具体的应用而决定的。</p><p>2、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></u></p><p>嵌入式系统需要<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></u>器来存放和执行代码。嵌入式系统的存储器包含Cache、主存和辅助存储器。</p><p>1：Cache</p><p>Cache是一种容量小、速度快的存储器阵列它位于主存和嵌入式微处理器内核之间，存放的是最近一段时间微处理器使用最多的程序代码和数据。在需要进行数据读取操作时，微处理器尽可能的从Cache中读取数据，而不是从主存中读取，这样就大大改善了系统的性能，提高了微处理器和主存之间的数据传输速率。Cache的主要目标就是：减小存储器（如主存和辅助存储器）给微处理器内核造成的存储器访问瓶颈，使处理速度更快，实时性更强。</p><p>在嵌入式系统中Cache全部集成在嵌入式微处理器内，可分为数据Cache、指令Cache或混合Cache，Cache的大小依不同处理器而定。一般中高档的嵌入式微处理器才会把Cache集成进去。</p><p>2：主存</p><p>主存是嵌入式微处理器能直接访问的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%25AF%2584%25E5%25AD%2598%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">寄存器</a></u>，用来存放系统和用户的程序及数据。它可以位于微处理器的内部或外部，其容量为256KB~1GB，根据具体的应用而定，一般片内存储器容量小，速度快，片外存储器容量大。</p><p>常用作主存的存储器有：</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/rom/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ROM</a></u>类NOR Flash、EPROM和PROM等。</p><p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RAM</a></u>类SRAM、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DRAM</a></u>和SDRAM等。</p><p>其中NOR Flash凭借其可擦写次数多、存储速度快、存储容量大、价格便宜等优点，在嵌入式领域内得到了广泛应用。</p><p>3：辅助存储器</p><p>辅助存储器用来存放<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/rengongzhineng/605233_a.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">大数据</a></u>量的程序代码或信息，它的容量大、但读取速度与主存相比就慢的很多，用来长期保存用户的信息。</p><p>嵌入式系统中常用的外存有：硬盘、NAND Flash、CF卡、MMC和SD卡等。</p><p>技术指导微信xydf321456</p><p>技术指导QQ：754634522</p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "处理器", 
                    "tagLink": "https://api.zhihu.com/topics/19612331"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82235787", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32G0技术详解 _ DAC-TIMERS-LPTIM", 
            "content": "<p>这篇文章我们来说一下<b>STM32G0的DAC模块</b>。</p><p>DAC的“采样与保持”功能的主要目标是在MCU处于低功耗模式如STOP 1模式时保持DAC输出电压。当配置了“采样与保持”模式时，当所有与它相关的模拟和数字电路部分都“关闭”时，DAC能够在其输出生成转换的电压，并且内部或外部的保持电容可以连接到DAC输出。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-62485cdd7091c7fad025775ff9ebc953_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"146\" class=\"content_image\" width=\"314\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;314&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"314\" data-actualsrc=\"https://pic4.zhimg.com/v2-62485cdd7091c7fad025775ff9ebc953_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>如何工作？</b></p><p>在“采样和保持”模式期间，DAC转换由以下三个阶段组成：</p><p>1、 <b>采样阶段</b>：在该阶段，将“采样和保持”元件充电到所需的电压。</p><p>2、 <b>保持阶段</b>：在此期间，DAC的输出三态为高阻High-Z，以维持“采样和保持”元件的存储电荷。</p><p>3、<b> 刷新阶段</b>：由于来自多个源的泄漏，刷新阶段对于将其输出电压保持在所需值至关重要。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-87a848e67a05f6758136d99c38d05237_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-87a848e67a05f6758136d99c38d05237_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;198&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"198\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-87a848e67a05f6758136d99c38d05237_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-87a848e67a05f6758136d99c38d05237_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>如何配置？</b></p><p><b>“采样和保持”元件</b></p><p>配置为外部时：应在DAC的外部引脚上安装外部电容，buffer可以被使能或禁能，DAC的输出可以选择是否连接到内部组件。</p><p>配置为内部时：需要一个内嵌电容作为“采样与保持”元件。在此配置中，DAC的输出仅路由至内部组件。</p><p><b>转换阶段时间</b></p><p>采样时间、保持时间和刷新时间是可配置的，这都是根据所需的DAC精度和“采样与保持”的电容的值计算的。</p><p><b>Timers</b></p><p>定时器在STM32G0上的更新：TIM1和TIM5定时器的时钟频率为100+MHz，以提供低于10ns的分辨率。</p><p>1、 BUCK转换器的更精细分辨率（10位精度@100KHz PWM）；</p><p>2、 用于可变频率谐振转换器的较低频率步长，例如，在200KHz开关频率时最大0.4KHz频率步长（0.2%）；</p><p>3、 TIM1有3对互补：LLC初级和次级侧（同步整流），边界导通模式PFC，降压；</p><p>TIM5仅有一对（降压，LLC初级侧）。</p><p>与STM32F0相比，GO增加了新的PWM模式</p><p><b>非对称中心对齐</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fb76141208988e3832306f18c3ca6c77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"242\" class=\"content_image\" width=\"313\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;313&#39; height=&#39;242&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"242\" class=\"content_image lazy\" width=\"313\" data-actualsrc=\"https://pic4.zhimg.com/v2-fb76141208988e3832306f18c3ca6c77_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>组合PWM模式</b>：将两个通道进行与或功能组合，以实现更复杂的波形。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-edd7fbe8e3630a299237474d5e7e89c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-edd7fbe8e3630a299237474d5e7e89c3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;188&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-edd7fbe8e3630a299237474d5e7e89c3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-edd7fbe8e3630a299237474d5e7e89c3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>组合三相模式</b>：允许第4个PWM与常规3相PWM组合，实现零矢量插入。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-570f020138a3f045f537a6c605a760d3_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"144\" data-rawheight=\"119\" class=\"content_image\" width=\"144\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;144&#39; height=&#39;119&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"144\" data-rawheight=\"119\" class=\"content_image lazy\" width=\"144\" data-actualsrc=\"https://pic4.zhimg.com/v2-570f020138a3f045f537a6c605a760d3_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>TIM1还具有<b>双向刹车I/O</b></p><p>1、 刹车输入是双向的，以接收外部故障事件和/或发出MCU的内部故障事件；</p><p>2、 此功能允许：全局的刹车信息可通过单引脚实现，可用于外部MCU或栅极驱动器的全  </p><p>局中断信号；</p><p>当必须合并多个内部和外部中断输入时，内部比较器和多个外部开漏比较器将输出Ored到一起，并触发中断事件。 </p><p>3、 所有内部故障源（系统比较器）都合并为一个信号；</p><p>4、 特定的撤防逻辑可防止在安全时锁定（在故障存在或启用PWM时无法撤销）。 </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-528a6f8297d7a3a67c0cd37e3f1eb812_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-528a6f8297d7a3a67c0cd37e3f1eb812_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-528a6f8297d7a3a67c0cd37e3f1eb812_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-528a6f8297d7a3a67c0cd37e3f1eb812_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>G071定时器特性比较</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fed0269faf08963e43c841a4584a3927_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-fed0269faf08963e43c841a4584a3927_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;336&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-fed0269faf08963e43c841a4584a3927_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fed0269faf08963e43c841a4584a3927_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>TIM1互联</b></p><p>输入捕获重映射连接：IC1:COMP1_OUT </p><p> IC2:COMP2_OUT</p><p>输出比较清除（OCREF_CLR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p>外部触发输入（ETR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p> ADC模拟看门狗（AWD1,AWD2,AWD3）</p><p>内部触发输入（ITR）连接：TIM15_TGO</p><p> TIM2_TGO</p><p> TIM3_TGO</p><p> TIM17_OC1</p><p>刹车输入：BK1：COMP1_OUT，COMP2_OUT</p><p>  BK2：COMP1_OUT，COMP2_OUT</p><p><b>TIM2互联</b></p><p>输入捕获重映射连接：IC1:COMP1_OUT </p><p> IC2:COMP2_OUT</p><p>输出比较清除（OCREF_CLR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p>外部触发输入（ETR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p>   LSE</p><p>内部触发输入（ITR）连接：TIM1_TGO</p><p> TIM15_TGO</p><p> TIM3_TGO</p><p> TIM14_OC1</p><p><b>TIM3互联</b></p><p>输入捕获重映射连接：IC1:COMP1_OUT </p><p> IC2:COMP2_OUT</p><p>输出比较清除（OCREF_CLR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p>外部触发输入（ETR）重映射连接：COMP1_OUT</p><p> COMP2_OUT</p><p>内部触发输入（ITR）连接：TIM1_TGO</p><p> TIM2_TGO</p><p> TIM15_TGO</p><p> TIM14_OC1</p><p><b>TIM14互联</b></p><p>输入捕获重映射连接：IC1：RTCCLK，HSE/32，MCO</p><p><b>TIM15互联</b></p><p>输入捕获重映射连接：IC1:TIM2_IC1，TIM3_IC1</p><p> IC2: TIM2_IC2，TIM3_IC2</p><p>内部触发输入（ITR）连接：TIM2_TGO</p><p> TIM3_TGO</p><p> TIM16_OC1</p><p> TIM17_OC1</p><p>刹车输入：BK1：COMP1_OUT，COMP2_OUT</p><p><b>TIM16互联</b></p><p>输入捕获重映射连接：IC1：LSI，LSE，RTC唤醒中断</p><p>刹车输入：BK1：COMP1_OUT，COMP2_OUT</p><p><b>G0添加了新的TIMx AF映射</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-01f562967bf2ba0bc96cbc13ac2ded62_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-01f562967bf2ba0bc96cbc13ac2ded62_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;397&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-01f562967bf2ba0bc96cbc13ac2ded62_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-01f562967bf2ba0bc96cbc13ac2ded62_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>进入电堂官网观看更多相关视频</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "DAC", 
                    "tagLink": "https://api.zhihu.com/topics/19933062"
                }, 
                {
                    "tag": "时钟", 
                    "tagLink": "https://api.zhihu.com/topics/19609452"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82077235", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 1, 
            "title": "嵌入式系统安全面临着什么挑战", 
            "content": "<p>在我们努力在更小的嵌入式系统中使用更多功能时，它们的安全性往往被忽视。本文讨论了过去的一些安全漏洞，并讨论了嵌入式安全性被忽视的原因。</p><p>物联网可以被视为嵌入式系统发展的绝佳机会。智能手机，平板电脑和可穿戴设备等物联网移动设备已经无处不在。随着物联网市场的不断扩大，预计非移动物联网系统将超过我们熟悉的当前支持物联网的移动设备。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6aff7007e65f6f983e2c08d24f2ffeba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-6aff7007e65f6f983e2c08d24f2ffeba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;504&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-6aff7007e65f6f983e2c08d24f2ffeba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6aff7007e65f6f983e2c08d24f2ffeba_b.jpg\"/></figure><p>随着时间的推移，嵌入式系统变得越来越小，越来越智能，使我们能够完成比以前更多的工作。随着越来越多的功能嵌入到更小的设备占地面积中，安全性问题也越来越多。设备供应商更愿意添加经常挤出基本安全系统的新功能，从而启动经过敷衍安全<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测试</a></u>的设备。</p><p>随着复杂嵌入式攻击的数量增加，嵌入式系统需要更高的安全措施。</p><p>维护嵌入式系统安全性的当前挑战是什么？</p><p>与标准PC不同，嵌入式系统旨在执行一组指定的任务。这些设备通常设计为最小化处理周期并减少<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></u>使用，因为没有可用的额外处理资源。考虑到这一点，为PC开发的安全解决方案无法解决嵌入式设备的问题。事实上，大多数嵌入式设备都不支持PC的安全解决方案。</p><p>这给嵌入式系统安全带来了许多挑战，其中一些是：</p><p>不规则的安全更新</p><p>大多数嵌入式系统未定期升级以进行安全更新。一旦部署了嵌入式设备，它就会在其附带的软件上运行数年甚至数十年。如果设备需要远程软件更新，则需要在设备中设计一项功能以允许安全更新，因为嵌入式操作系统可能没有自动功能，无法轻松进行固件更新以确保嵌入式安全性。</p><p>攻击复制</p><p>由于嵌入式设备是批量生产的，因此相同版本的设备具有相同的设计并且与该批次中的其他设备一样。考虑到这一点，将有数百万个相同的嵌入式设备。如果某人能够成功攻击该批次中的任何设备，则可以轻松地在其余设备上复制攻击。</p><p>可靠性</p><p>许多关键方面，如公用电网，交通基础设施和通信系统，都是由嵌入式系统控制的。现代社会依赖于几种设施，其中许多设备依赖于嵌入式设备。网络攻击会导致嵌入式系统功能中断，这可能会产生一些灾难性后果。</p><p>设备生命周期</p><p>与PC相比，嵌入式设备具有更长的使用寿命。人们可以很容易地发现现场已有十年历史的嵌入式设备，仍在同一系统上运行。因此，当<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/xianshi/20171205594009.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">制造</a></u>商计划开发嵌入式系统时，他们需要考虑未来二十年可能出现的潜在威胁。除了开发能够抵御当前威胁的系统之外，制造商还需要满足未来的安全要求，这本身就是一项巨大的挑战。</p><p>工业协议</p><p>嵌入式系统遵循一些未受企业安全工具保护或识别的工业协议。企业入侵检测系统和防火墙可以使组织免受企业特定威胁的攻击，但无法提供针对工业协议攻击的安全性。</p><p>远程部署</p><p>在企业安全范围之外的现场部署了许多嵌入式设备。因此，这些远程或移动设备可以直接连接到互联网，而不需要在企业环境中提供安全层。</p><p>考虑到硬件和固件方面，在嵌入式设备设计和开发期间需要解决所有上述挑战。只有嵌入式设备是安全的，它才能运行预期的任务。</p><p>总结</p><p>问题不在于嵌入式设备是否安全，问题在于嵌入式设备是否足够安全。不同的嵌入式设备需要不同级别的安全性，具体取决于它执行的功能。</p><p>在设备设计的早期阶段需要考虑嵌入式安全级别。嵌入式设备不应依赖企业安全工具，而应配备安全系统，以便即使在企业安全范围之外也能抵御威胁。</p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78064635", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【话说定时器系列】之五：与影子寄存器预装功能有关的几个案例分享", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>本文重点分享与影子寄存器预装功能有关的几个案例。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32定时器中有四个带影子特性的寄存器组【影子+预装】： </b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><i>- TIMx_PSC </i>分频寄存器      </p><p><i>- TIMx_ARR</i> 自动重装载寄存器</p><p>- <i>TIMx_CCR </i>捕捉比较寄存器     </p><p><i>-TIMx_RCR </i>重复计数寄存器 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中ARR、CCR寄存器带预装载使能控制位，PSC、RCR无预装使能控制位，所以对于PSC/RCR实际寄存器的数据更新只能通过更新事件实现从预装寄存器数据到影子寄存器的拷贝更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于ARR/CCR寄存器，当关闭它们的预装载使能位时，用户修改预装寄存器的数据后会立即被拷贝进影子寄存器【实际寄存器】，否则，修改过的预装寄存器的数据只能等到下次更新事件 来完成从预装寄存器数据到影子寄存器的拷贝更新。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里分享三个跟影子寄存器的预装特性有关的案例，以加深大家的理解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【案例一】</b></p><p>异常情形：某客户使用到 STM32芯片TIMER1和TIM2，其中使用TIM1做PWM波形输出。使用PWM模式1，向上计数模式，每次在定时器上溢中断里调节CCR寄存器的值，改变波形占空比。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但他发现，当打开定时器2并使能定时器2的中断时会导致TIM1的PWM输出异常的现象。有一定几率出现尖窄脉冲现象。在正常占空比之后出现一个极短的小脉冲。测试中，CCR的比较值读出正常。关闭定时器2则输出正常，未捕捉到小尖脉冲。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>【下面的第一个波形是初始波形；第二个波形是修改后的输出波形；第三个波形是计数器计数变化示意图】</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4e74bcc59e39f9706f631816f30b8bb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-4e74bcc59e39f9706f631816f30b8bb9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-4e74bcc59e39f9706f631816f30b8bb9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4e74bcc59e39f9706f631816f30b8bb9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>先大致分析一下条件及现象：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、经了解，他关闭了CCR寄存器的预装功能，即修改CCR的数据会立即拷贝到实际影子寄存器而发挥作用；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2、他采用PWM1模式的特性，向上计数，输出极性高有效。这个条件下，当CCR的值比计数器值大时，输出高电平;当CCR的小于或等于计数器的值时，输出低电平。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3、它在更新中断里随机动态修改CCR的值，如果没有其它中断存在。发生TIM1溢出中断时，立即响应并修改CCR的值，由于CCR的预装载功能关闭，所以修改立即生效。下一个周期的波形按新的参数运行。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>4、如果有其它中断的存在，且TIM1的溢出更新中断不具备抢占能力，具体到这里，如果TIM1溢出时，TIM2中断正在使用CPU处理事情。那么TIM1中断请求就只能等待TIM2中断事务处理完毕后才有机会修改新的CCR值。但这个等待过程中，TIM1的运行及PWM输出并不会停止，依然按照原来的参数在运行。如果新调整的CCR值比之前的CCR值要大，当TIM1的中断修改完CCR值时，输出波形又刚刚变为低电平不久， 由于新的CCR值比当前计数器的值要大，结合pwm1的输出特性，这时就会出现了尖脉冲的问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>假设TIM1开始的pwm参数是CCR=100,ARR=300.当TIM1发生溢出中断请求时，TIM2正在处理自己的中断服务程序，而TIM1的中断又不具备抢占能力，假设知道TIM1的计数器记到103时TIM2才释放CPU，显然TIM1的PWM输出刚做完从高到低的跳变，如果此时TIM1的中断服务程序里将CCR的值改为200, 并立即生效。这一改，CCR于计数器的比较结果马上改变了，即在计数器记到200前都是CCR大于计数器的值了，此时对应的输出应该是高电平。所以，刚跳下来的电平，马上又跳高，这时就产生了一个低电平的尖峰脉冲。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，如果新修改的CCR值比当前计数器小，那就对当前周期的输出不会有影响，因为在溢出前一直是计数器大于CCR的值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>所以这个尖脉冲是时有时无，其宽度与TIM2释放CPU的时机以及TIM1本身中断服务程序处理时间都有关系。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>处理办法:</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 开启ccr寄存器的预装功能，让其在下一个周期生效发挥作用；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 调整TIM1的中断抢占优先级，让其抢占TIM2的中断。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【案例二】</b></p><p>【第一个波形是初始波形；第二个波形是修改后的输出波形；第三个波形是计数器计数变化示意图】<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dd58a0595504b91d7be9f8227a1794ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-dd58a0595504b91d7be9f8227a1794ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;294&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-dd58a0595504b91d7be9f8227a1794ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dd58a0595504b91d7be9f8227a1794ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这个案例跟第一个有点类似，这里是在比较中断里动态修改CCR寄存器的值。CCR寄存器的预装功能是关闭的，即修改的数据立即生效。也是PWM波形里偶尔夹杂尖脉冲的问题。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【案例三】</b></p><p>基于ARR寄存器的预装功能的开启或关闭，修改ARR的数据看看相应的PWM输出情形。前提条件还是UP counting + pwm1；极性选择：高有效 。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>特别注意下图中的第一种情形。即在关闭ARR的预装功能、向上计数模式的情况下，如果新修改的ARR值小于修改时刻计数器的值，计数器将持续计数到其满量程值，对于16位计数器就计到0xffff,对于32位计数器则计到0xffffffff才发生溢出。这点要特别注意。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-db36a1fdf03753bcc0db39d9a9961b9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-db36a1fdf03753bcc0db39d9a9961b9a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-db36a1fdf03753bcc0db39d9a9961b9a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-db36a1fdf03753bcc0db39d9a9961b9a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>前面跟大家分享了几个跟影子寄存器的预装功能有关的案例，希望大家对影子寄存器的预装特性有更深的理解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1b6c08f921fa80353cabe92000c1fe24_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"148\" data-rawheight=\"146\" class=\"content_image\" width=\"148\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;148&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"148\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"148\" data-actualsrc=\"https://pic1.zhimg.com/v2-1b6c08f921fa80353cabe92000c1fe24_b.png\"/></figure><p><b>或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "定时器（程序开发）", 
                    "tagLink": "https://api.zhihu.com/topics/19655962"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77723008", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 0, 
            "title": "Cortex-M3的编程模式", 
            "content": "<p><b>寄存器组</b></p><p>M3处理器拥有R0-R15的寄存器组和五个特殊寄存器，R0-R12是通用寄存器；R13作为堆栈指针，堆栈指针有两个，一个是主堆栈指针（MSP），另一个是进程堆栈指针（PSP），在任何一个时刻只能访问其中的一个；R14是连接寄存器（LR），当调用子函数时用来保存返回地址，中断处理时保存中断返回值；R15是程序计数器，指向当前的程序地址；还有五个特殊寄存器保存了处理器的状态和执行中断屏蔽。需要注意的是，这里所有的寄存器都是没有地址映射的，只能通过MSR和MRS指令以及寄存器的名字进行操作。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-efcce9b2893ffd8ac55281c633c116ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-efcce9b2893ffd8ac55281c633c116ef_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-efcce9b2893ffd8ac55281c633c116ef_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-efcce9b2893ffd8ac55281c633c116ef_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>特权操作和双堆栈</b></p><p>M3支持两种操作模式和两级特权级别，两种操作模式为线程模式和Handler模式，分别对应应用程序和异常/中断服务程序，；两级特权为特权级和非特权级，通过特权级别的划分可以提供对存储器的保护，防止程序中的关键代码和重要数据被普通用户代码意外或者恶意地改变，在非特权级下，禁止对存储器的系统控制区域SCS的访问，除APSR之外的特殊功能寄存器也都被禁止访问。</p><p>可以通过CONTROL寄存器的bit[0]位选择线程模式是在特权级还是在用户级，CONTROL寄存器也是只能在特权级下才能进行访问的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0f187ec30d5a130d4aad13b94057bbfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-0f187ec30d5a130d4aad13b94057bbfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;313&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"313\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-0f187ec30d5a130d4aad13b94057bbfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0f187ec30d5a130d4aad13b94057bbfb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>系统复位后处理器默认进入线程模式，处于特权级访问，在特权级下程序可以访问全部范围的存储器并且可以执行所有的指令。我们看下图中蓝色的路径，这个时候如果发生中断的话，系统就会进入中断服务程序，处理器切换到Handler模式，但是同样是在特权级的访问权限下，从中断返回后又回到特权级的线程模式，在这个过程中发生了模式的转化并没有发生特权级别的切换。</p><p>我们再来看一下黄色箭头显示的另一条状态转换的路径，线程模式在特权级下可以修改CONTROL寄存器的bit[0]，可以通过修改CONTROL寄存器的bit[0]来进入到非特权级，但是之后如果想再回到特权级就只能通过系统服务调用指令SVC来触发一次SVC异常，在异常中再修改CONTROL寄存器的bit[0]才能回到特权级。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a18b7be9b9eae335339521f26808fe7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-a18b7be9b9eae335339521f26808fe7f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-a18b7be9b9eae335339521f26808fe7f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a18b7be9b9eae335339521f26808fe7f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>双堆栈指针</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>M3内核中有两个堆栈指针，MSP和PSP，但是在任何一个时刻只能用到其中的一个。系统复位后默认使用的是主堆栈指针，可以通过CONTROL寄存器的bit[0]选择是使用主堆栈指针还是进程堆栈指针，在Handler模式下只允许使用MSP，也就是主堆栈指针。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0f3b4630d2731aea5d036c65b38e8339_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-0f3b4630d2731aea5d036c65b38e8339_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;386&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"386\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-0f3b4630d2731aea5d036c65b38e8339_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0f3b4630d2731aea5d036c65b38e8339_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>双堆栈指针在OS中的应用</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在简单的应用里用主堆栈指针一个堆栈指针就够了，也就只需要一个堆栈区域。MSP用于OS内核以及异常的处理，PSP则用于其他的应用任务。内核栈和任务栈是分开的，这种方式还可以让上下文的切换更加简单。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-647af4b5cd92f3c65d038ddf8bd2dcab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-647af4b5cd92f3c65d038ddf8bd2dcab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;299&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"299\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-647af4b5cd92f3c65d038ddf8bd2dcab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-647af4b5cd92f3c65d038ddf8bd2dcab_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>双堆栈指针的初始化</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>MSP也就是主堆栈指针是在系统复位时被初始化的，MSP的初始值是从零地址处被读出；PSP也就是进程堆栈指针是在OS初始化的时候被初始化。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c2bca5590b667418e7a1ce37c489eaec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c2bca5590b667418e7a1ce37c489eaec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;250&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c2bca5590b667418e7a1ce37c489eaec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c2bca5590b667418e7a1ce37c489eaec_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在使用操作系统的应用中，每个任务都有自己的堆栈空间，所以在不同任务的上下文切换中也需要切换堆栈指针来指向不同任务的堆栈空间，在下面的图片中描述了PSP在不同任务间的切换过程。首先使用任务A的堆栈指针执行入栈操作，然后在异常服务程序中保存任务A的堆栈指针地址，并且设置堆栈指针指向任务B的栈空间，之后用任务B的堆栈指针执行出栈，随后开始执行任务B。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9f754ed91a892963462787a54496151a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-9f754ed91a892963462787a54496151a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-9f754ed91a892963462787a54496151a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9f754ed91a892963462787a54496151a_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_b.jpg\"/></figure><p><b>Cortex-M3的流水线介绍</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Cortex-M3使用一个3级流水线，分为取指、解码和执行三级，下面是一个理想状态下的流水线。</p><p>在执行第N条指令的同时，再对第N+1条指令解码，对第N+2条指令进行取指操作，整个流水线是不断的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aaa04185b6bac62e0df4e44eebc1d9ca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>流水线的一些基本特征</b></p><p>执行一条分支指令或者直接修改PC而发生跳转的时候，ARM内核有可能会清空流水线，而需要重新读取指令。</p><p>即使产生了一个中断，一条处于“执行”阶段的指令也将会完成。流水线里其他指令将会被放弃，而处理器将从向量表的适当入口开始填充流水线。需要注意的是对于LDM和STM指令是例外的。</p><p>不论是执行16位指令还是32位指令，读取PC时，会返回当前指令地址+4的值。</p><p>M3内核的预取指单元带有一个三个字长的指令缓冲区，这从一定程度上可以避免流水线的断流。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e187f66cc1dc34de00788e6c3ada9ecb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-e187f66cc1dc34de00788e6c3ada9ecb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-e187f66cc1dc34de00788e6c3ada9ecb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e187f66cc1dc34de00788e6c3ada9ecb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们知道CPU的执行速度远远大于FLASH的读取速度，为了不让FLASH拖后腿，STM32的片上闪存接口也提供了预取指的功能，如下图中所示，假设FLASH一次可以读取128位的指令数据，在不带预取指的情况下，只有等这128位的指令全部被CPU取走执行后才会再从FLASH中读取下一个128位指令数据，对于带预取指的情况，当CPU通过I-bus获取这些已经从FLASH中读出的指令后，预取指单元可以提前从FLASH中读取下一个128位的指令数据放在预取指的buffer中。这样在顺序执行代码的情况下，CPU在第一次等待之后就再也无需等待了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-03ee159b1143e4f16b257a8a29cad65c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-03ee159b1143e4f16b257a8a29cad65c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;333&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-03ee159b1143e4f16b257a8a29cad65c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-03ee159b1143e4f16b257a8a29cad65c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>我们来看一下带预取指和不带预取指的流水线运行情况对比。</b></p><p>假设顺序执行32位指令，读取FLASH的等待周期为3个周期。</p><p>不带预取指的情况：执行第一条指令的时候流水线是空的，所以CPU需要等待3个周期后才会读到指令，这时有4条指令被从FLASH中读出，等这4条指令被执行完后才会再从FLASH中读取后4条指令，因为FLASH的读取速度很慢，这样每隔一段时间就会出现一段等待周期，因此流水线是断流的。</p><p>带预取指的情况：同样，在执行第一条指令的时候流水线是空的，所以CPU等待3个周期后才能读到指令，这时有4条指令从FLASH中被读出，在执行这4条指令的同时STM32的闪存接口会继续从FLASH中读取后4条指令，这样就能够始终保持流水线的连续不断。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2b67f4c3cccd308c61377fe3848f8c3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-2b67f4c3cccd308c61377fe3848f8c3f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;298&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-2b67f4c3cccd308c61377fe3848f8c3f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2b67f4c3cccd308c61377fe3848f8c3f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>前面说到的是顺序执行的情况，如果发生指令跳转的话，流水线被清空，预取出的指令就会作废，这样处理器就不得不从跳转的目的地重新取指。为了减少由于指令跳转带来的等待周期，STM32片上闪存接口提供了64组128bit 的指令缓存和8组128bit的数据缓存。指令缓存中保存最近从FLASH中读出的指令，当跳转发生，先看看需要的指令在不在当前使用的指令组、预取指指令组和指令缓存中，只有在找不到需要的指令时才需要从FLASH中重新读取，并且将重新读取的指令保存到指令缓存区。当缓存区填满了以后，根据最近最少使用原则来替换缓存区中的某一个组。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-28024ddeb53f092255624d0f84a80ddf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"301\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-28024ddeb53f092255624d0f84a80ddf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;301&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"301\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-28024ddeb53f092255624d0f84a80ddf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-28024ddeb53f092255624d0f84a80ddf_b.jpg\"/></figure><p><b>总线结构</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>Cortex-M3有4条总线，I-Code总线，也就是指令总线；D-Code总线，也就是数据总线；还有系统总线和私有外设总线。每条总线都只能对规定的地址范围进行访问。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-74d89d008a2afe8a7ec7f21921af4313_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"527\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"527\" data-original=\"https://pic4.zhimg.com/v2-74d89d008a2afe8a7ec7f21921af4313_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;527&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"527\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"527\" data-original=\"https://pic4.zhimg.com/v2-74d89d008a2afe8a7ec7f21921af4313_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-74d89d008a2afe8a7ec7f21921af4313_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来说一下STM32的总线结构。下面是一张STM32F2的总线矩阵图，它是一个多层的32位AHB总线矩阵，包括8个AHB总线主设备和7个AHB总线从设备。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9fe278ac7a670de9eff8bcd4fb79cba5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-9fe278ac7a670de9eff8bcd4fb79cba5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;259&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"259\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-9fe278ac7a670de9eff8bcd4fb79cba5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9fe278ac7a670de9eff8bcd4fb79cba5_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "ARM Cortex M", 
                    "tagLink": "https://api.zhihu.com/topics/20007904"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73610715", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "电动机分类及控制方法对比", 
            "content": "<p>电动机的分类方法有很多种，在电动机发明之初它是与电源相连接的，通过电源的通断来让电机转动或者停止，根据电动机供电电源是交流还是直流可以把电机分为交流电机和直流电机，而交流电机又可以分为异步电机和电励磁同步电机，还有一种通用电机，无论通入直流电还是交流电，它都可以运转。早期的交流电机基本上采用的都是电励磁的方式，而随着技术的进步，电力电磁器件在电动机驱动方面得到了广泛的应用。电动机的运转不仅仅是启动、停止或者是有限的几个转速的切换，它还可以实现无级变速甚至实现伺服，这样的系统就需要在输入电源和电机之间插入一个变频器和驱动器，我们把它称作为需要变频驱动的电机。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-19d013699e25d7070159c279ca269843_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-19d013699e25d7070159c279ca269843_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;290&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"290\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-19d013699e25d7070159c279ca269843_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-19d013699e25d7070159c279ca269843_b.jpg\"/></figure><p>我们可以看到异步电机可以使用相控方式，也可以使用电压频率比为固定常数的方式，也可以使用矢量控制。</p><p>永磁同步电机或者直流无刷电机可以采用电压频率比为固定常数的方式，也可以使用矢量控制的方式或者方波控制的方式。</p><p>开关磁阻电机可以使用矢量控制的方式和微步控制的方式。</p><p>步进电机常用的是微步控制的方式。</p><p>传统的直流电机可以使用斩控的方式。</p><p>我们现在的ST MC SDK支持三项永磁同步电机或者直流无刷电机的矢量控制。</p><p>从电动机本身来讲，永磁同步电机和直流无刷电机应该看成是对同一种事物的不同命名。直流无刷的命名是相对于直流电机而言的，直流电机为了保持转子持续旋转必须装有换向器和电刷装置，这类装置在电动机运转中因为绕组电枢感性负载的电流突变产生高压，所以会在换向器和电刷的接触点让空气电离产生有损装置的电火花，这个直接会影响电动机的寿命。为了克服这个缺点，人们不断研发新的技术来解决这个问题。</p><p>一开始人们发明了交流电，也就是我们现在说的异步电机和电励磁同步交流电机，但是在矢量控制或者与之性能差不多的另一种控制方法直接转矩控制这两种方法被发明以前，异步电机和电励磁同步电机的控制性能远远不如传统的直流电机。随着电力电子技术的发展，有人用电力开关器件代替直流电机的换向器和电刷，随后当霍尔效应传感器发明以后，直流无刷电动机也就随之诞生了。这种电动机用晶体管的开关来代替换向器和电刷，把电流的换向变成电流的换相。一方面这种机构保持了直流电动机的控制特性，另一方面这类电动机不再需要换向器和电刷，就彻底地克服了直流电机在结构上的缺陷。</p><p>我们从另一个角度来看一下，最早的电动机也是要用永磁铁的，法拉第发明的世界上第一台直流电机模型就是里面有一个马蹄形的磁铁。但是在过去永磁铁都是天然磁铁，比如四氧化三铁、磁铁矿，它的性能和做电机的效果都不是很好，所有后来人们才发明了电励磁的方式，并且在电动机中得到了广泛的应用，像异步电机、电励磁同步电机还有直流电机都是使用的电励磁的方式。</p><p>直到上个世纪后半叶，人造磁石的性能不断提升，这让人们重新看到了电动机应用永磁体的前景，从而导致了永磁电机再度进入了我们产业化、实用化的领域，永磁同步电机也是其中一员。从旋转磁场和转子转速的关系来看，这种电机是同步电机，而从励磁的角度来看，励磁方式用了永磁体，它不需要电励磁，这使得提升电动机的效率成为了可能。随着电动机的控制技术发展，矢量控制或者直接转矩控制方法被发明出来，这使得交流电机的控制可以达到与控制直流电动机同样的特性。</p><p>我们可以根据绕组内流入电流的波形分为方波控制和正弦波控制，也可以根据电力电子开关器件在一个电周期里累积的导通时间或者是展播持续时间，命名为120度控制或者是180度控制。如果我们用120度控制方式或者是方波控制方式来控制电机，那就把它看作一台直流无刷电机；反之，如果我们用矢量控制的方式来控制电机，那它就是一台交流电机，因为它属于同步电机，而且依靠永磁体来完成励磁，所以我们就叫它永磁同步电机。</p><p>下图是方波控制和矢量控制的方法对比</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c78a5d0aee7e544f6321b3119149bcae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-c78a5d0aee7e544f6321b3119149bcae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-c78a5d0aee7e544f6321b3119149bcae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c78a5d0aee7e544f6321b3119149bcae_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>来电堂听课，找你要的设计秘笈！</b></p><p>感兴趣的朋友可以关注微信公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ef4294be564eca5d91ba69739c1f6c50_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic1.zhimg.com/v2-ef4294be564eca5d91ba69739c1f6c50_b.jpg\"/></figure><p>也可以直接登陆电堂网站观看课程</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "电动机", 
                    "tagLink": "https://api.zhihu.com/topics/19633825"
                }, 
                {
                    "tag": "电机控制", 
                    "tagLink": "https://api.zhihu.com/topics/20142328"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73239215", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "特别算法 – 弱磁控制和电流前馈控制", 
            "content": "<p>当永磁同步电机运转以后，它会在绕组里产生感应电动势，随着转速的提高，感应电动势也在提高。如果输入电压不能超过感应电动势，绕组的电流就会下降，输出的电磁力矩也就会下降，如果这时候还要保持一定的力矩，就要让输入电压超前感应电动势，这个就需要弱磁控制来实现。</p><p>电流、电压的约束条件</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-41aadbe9450402414360615a5f5e98d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"351\" data-rawheight=\"78\" class=\"content_image\" width=\"351\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;351&#39; height=&#39;78&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"351\" data-rawheight=\"78\" class=\"content_image lazy\" width=\"351\" data-actualsrc=\"https://pic4.zhimg.com/v2-41aadbe9450402414360615a5f5e98d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>电流幅值约束条件</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f9ed9dcc8820cf1d8527bccc2405d909_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"184\" data-rawheight=\"48\" class=\"content_image\" width=\"184\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;184&#39; height=&#39;48&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"184\" data-rawheight=\"48\" class=\"content_image lazy\" width=\"184\" data-actualsrc=\"https://pic2.zhimg.com/v2-f9ed9dcc8820cf1d8527bccc2405d909_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>结合了MTPA和弱磁控制在SDMCSDK里是用下面的框图实现的</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a43551a2aa42e696f191895f1995d886_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb\" width=\"461\" data-original=\"https://pic3.zhimg.com/v2-a43551a2aa42e696f191895f1995d886_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;461&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"461\" data-original=\"https://pic3.zhimg.com/v2-a43551a2aa42e696f191895f1995d886_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a43551a2aa42e696f191895f1995d886_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>总结一下MTPA和弱磁控制</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1973a5df91c0b0636ab640226d0a73d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-1973a5df91c0b0636ab640226d0a73d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-1973a5df91c0b0636ab640226d0a73d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1973a5df91c0b0636ab640226d0a73d9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>电流前馈</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eb45616abe1f3f789857edf1ed8292b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-eb45616abe1f3f789857edf1ed8292b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;197&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-eb45616abe1f3f789857edf1ed8292b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-eb45616abe1f3f789857edf1ed8292b7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>ST MC SDK5.x对特别算法的实现</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f035fa57ea71186ed33e8e6433ff5dc8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-f035fa57ea71186ed33e8e6433ff5dc8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;283&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-f035fa57ea71186ed33e8e6433ff5dc8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f035fa57ea71186ed33e8e6433ff5dc8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>感兴趣的朋友可以关注AI电堂公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8fd09901319328ec2200bf3e76cad3fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"140\" data-rawheight=\"134\" class=\"content_image\" width=\"140\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;140&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"140\" data-rawheight=\"134\" class=\"content_image lazy\" width=\"140\" data-actualsrc=\"https://pic4.zhimg.com/v2-8fd09901319328ec2200bf3e76cad3fb_b.jpg\"/></figure><p>也可以直接登陆电堂网站观看相关课程</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80564133", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "必备Linux命令和C语言基础", 
            "content": "<p>系统信息</p><p>arch 显示机器的处理器架构(1)</p><p>uname -m 显示机器的处理器架构(2)</p><p>uname -r 显示正在使用的内核版本</p><p>dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)</p><p>hdp<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_arm_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></b>-i /dev/hda 罗列一个磁盘的架构特性</p><p>hdparm -tT /dev/sda 在磁盘上执行<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/851\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测试</a></b>性读取操作</p><p>cat /proc/cpuinfo 显示CPU info的信息</p><p>cat /proc/interrupts 显示中断</p><p>cat /proc/meminfo 校验内存使用</p><p>cat /proc/swaps 显示哪些swap被使用</p><p>cat /proc/version 显示内核的版本</p><p>cat /proc/net/dev 显示网络<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/555\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">适配器</a></b>及统计</p><p>cat /proc/mounts 显示已加载的文件系统</p><p>lspci -tv 罗列 PCI 设备</p><p>ls<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/576\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB</a></b>-tv 显示 USB 设备</p><p>date 显示系统日期</p><p>cal 2007 显示2007年的日历表</p><p>date 041217002007.00 设置日期和时间 - 月日时分年.秒</p><p>clock -w 将时间修改保存到 BIOS</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>关机 (系统的关机、重启以及登出 )</p><p>shutdown -h now 关闭系统(1)</p><p>init 0 关闭系统(2)</p><p>telinit 0 关闭系统(3)</p><p>shutdown -h hours:minutes &amp; 按预定时间关闭系统</p><p>shutdown -c 取消按预定时间关闭系统</p><p>shutdown -r now 重启(1)</p><p>reboot 重启(2)</p><p>logout 注销</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件和目录</p><p>cd /home 进入 &#39;/ home&#39; 目录&#39;</p><p>cd .. 返回上一级目录</p><p>cd ../.. 返回上两级目录</p><p>cd 进入个人的主目录</p><p>cd ~user1 进入个人的主目录</p><p>cd - 返回上次所在的目录</p><p>pwd 显示工作路径</p><p>ls 查看目录中的文件</p><p>ls -F 查看目录中的文件</p><p>ls -l 显示文件和目录的详细资料</p><p>ls -a 显示隐藏文件</p><p>ls *[0-9]* 显示包含数字的文件名和目录名</p><p>tree 显示文件和目录由根目录开始的树形结构(1)</p><p>lstree 显示文件和目录由根目录开始的树形结构(2)</p><p>mkdir dir1 创建一个叫做 &#39;dir1&#39; 的目录&#39;</p><p>mkdir dir1 dir2 同时创建两个目录</p><p>mkdir -p /tmp/dir1/dir2 创建一个目录树</p><p>rm -f file1 删除一个叫做 &#39;file1&#39; 的文件&#39;</p><p>rmdir dir1 删除一个叫做 &#39;dir1&#39; 的目录&#39;</p><p>rm -<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/193\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RF</a></b>dir1 删除一个叫做 &#39;dir1&#39; 的目录并同时删除其内容</p><p>rm -rf dir1 dir2 同时删除两个目录及它们的内容</p><p>mv dir1 new_dir 重命名/移动 一个目录</p><p>cp file1 file2 复制一个文件</p><p>cp dir/* . 复制一个目录下的所有文件到当前工作目录</p><p>cp -a /tmp/dir1 . 复制一个目录到当前工作目录</p><p>cp -a dir1 dir2 复制一个目录</p><p>ln -s file1 lnk1 创建一个指向文件或目录的软链接</p><p>ln file1 lnk1 创建一个指向文件或目录的物理链接</p><p>touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)</p><p>file file1 outputs the mime type of the file as text</p><p>iconv -l 列出已知的编码</p><p>iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and conver<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></b>ng it to toEncoding.</p><p>find . -maxdepth 1 -name *.jpg -print -exec convert &#34;{}&#34; -resize 80x60 &#34;thumbs/{}&#34; \\; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件搜索</p><p>find / -name file1 从 &#39;/&#39; 开始进入根文件系统搜索文件和目录</p><p>find / -user user1 搜索属于用户 &#39;user1&#39; 的文件和目录</p><p>find /home/user1 -name \\*.bin 在目录 &#39;/ home/user1&#39; 中搜索带有&#39;.bin&#39; 结尾的文件</p><p>find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件</p><p>find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件</p><p>find / -name \\*.rpm -exec chmod 755 &#39;{}&#39; \\; 搜索以 &#39;.rpm&#39; 结尾的文件并定义其权限</p><p>find / -xdev -name \\*.rpm 搜索以 &#39;.rpm&#39; 结尾的文件，忽略光驱、捷盘等可移动设备</p><p>locate \\*.ps 寻找以 &#39;.ps&#39; 结尾的文件 - 先运行 &#39;updatedb&#39; 命令</p><p>whereis halt 显示一个二进制文件、源码或man的位置</p><p>which halt 显示一个二进制文件或可执行文件的完整路径</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>挂载一个文件系统</p><p>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 &#39;/ mnt/hda2&#39; 已经存在</p><p>umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 &#39;/ mnt/hda2&#39; 退出</p><p>fuser -km /mnt/hda2 当设备繁忙时强制卸载</p><p>umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</p><p>mount /dev/fd0 /mnt/floppy 挂载一个软盘</p><p>mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom</p><p>mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p>mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom</p><p>mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件</p><p>mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统</p><p>mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备</p><p>mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>磁盘空间</p><p>df -h 显示已经挂载的分区列表</p><p>ls -lSr |more 以尺寸大小排列文件和目录</p><p>du -sh dir1 估算目录 &#39;dir1&#39; 已经使用的磁盘空间&#39;</p><p>du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小</p><p>rpm -q -a --qf &#39;%10{SIZE}t%{NAME}n&#39; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)</p><p>dpkg-query -W -f=&#39;${Instal<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/957\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LED</a></b>-Size;10}t${Package}n&#39; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>用户和群组</p><p>groupadd group_name 创建一个新用户组</p><p>groupdel group_name 删除一个用户组</p><p>groupmod -n new_group_name old_group_name 重命名一个用户组</p><p>useradd -c &#34;Name Surname &#34; -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 &#34;admin&#34; 用户组的用户</p><p>useradd user1 创建一个新用户</p><p>userdel -r user1 删除一个用户 ( &#39;-r&#39; 排除主目录)</p><p>usermod -c &#34;User FTP&#34; -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性</p><p>passwd 修改口令</p><p>passwd user1 修改一个用户的口令 (只允许root执行)</p><p>chage -E 2005-12-31 user1 设置用户口令的失效期限</p><p>pwck 检查 &#39;/etc/passwd&#39; 的文件格式和语法修正以及存在的用户</p><p>grpck 检查 &#39;/etc/passwd&#39; 的文件格式和语法修正以及存在的群组</p><p>newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件的权限 - 使用 &#34;+&#34; 设置权限，使用 &#34;-&#34; 用于取消</p><p>ls -lh 显示权限</p><p>ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</p><p>chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</p><p>chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限</p><p>chown user1 file1 改变一个文件的所有人属性</p><p>chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性</p><p>chgrp group1 file1 改变文件的群组</p><p>chown user1:group1 file1 改变一个文件的所有人和群组属性</p><p>find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件</p><p>chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</p><p>chmod u-s /bin/file1 禁用一个二进制文件的 SUID位</p><p>chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</p><p>chmod g-s /home/public 禁用一个目录的 SGID 位</p><p>chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</p><p>chmod o-t /home/public 禁用一个目录的 STIKY 位</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件的特殊属性 - 使用 &#34;+&#34; 设置权限，使用 &#34;-&#34; 用于取消</p><p>chattr +a file1 只允许以追加方式读写文件</p><p>chattr +c file1 允许这个文件能被内核自动压缩/解压</p><p>chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</p><p>chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</p><p>chattr +s file1 允许一个文件被安全地删除</p><p>chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</p><p>chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</p><p>lsattr 显示特殊的属性</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>打包和压缩文件</p><p>bunzip2 file1.bz2 解压一个叫做 &#39;file1.bz2&#39;的文件</p><p>bzip2 file1 压缩一个叫做 &#39;file1&#39; 的文件</p><p>gunzip file1.gz 解压一个叫做 &#39;file1.gz&#39;的文件</p><p>gzip file1 压缩一个叫做 &#39;file1&#39;的文件</p><p>gzip -9 file1 最大程度压缩</p><p>rar a file1.rar test_file 创建一个叫做 &#39;file1.rar&#39; 的包</p><p>rar a file1.rar file1 file2 dir1 同时压缩 &#39;file1&#39;, &#39;file2&#39; 以及目录 &#39;dir1&#39;</p><p>rar x file1.rar 解压rar包</p><p>unrar x file1.rar 解压rar包</p><p>tar -cvf archive.tar file1 创建一个非压缩的 tarball</p><p>tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &#39;file1&#39;, &#39;file2&#39; 以及 &#39;dir1&#39;的档案文件</p><p>tar -tf archive.tar 显示一个包中的内容</p><p>tar -xvf archive.tar 释放一个包</p><p>tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下</p><p>tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包</p><p>tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包</p><p>tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包</p><p>tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包</p><p>zip file1.zip file1 创建一个zip格式的压缩包</p><p>zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包</p><p>unzip file1.zip 解压一个zip格式压缩包</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>RPM 包 - （Fedora, Redhat及类似系统）</p><p>rpm -ivh package.rpm 安装一个rpm包</p><p>rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告</p><p>rpm -U package.rpm 更新一个rpm包但不改变其配置文件</p><p>rpm -F package.rpm 更新一个确定已经安装的rpm包</p><p>rpm -e package_name.rpm 删除一个rpm包</p><p>rpm -qa 显示系统中所有已经安装的rpm包</p><p>rpm -qa | grep httpd 显示所有名称中包含 &#34;httpd&#34; 字样的rpm包</p><p>rpm -qi package_name 获取一个已安装包的特殊信息</p><p>rpm -qg &#34;System Environment/Daemons&#34; 显示一个组件的rpm包</p><p>rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表</p><p>rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表</p><p>rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表</p><p>rpm -q package_name --whatprovides 显示一个rpm包所占的体积</p><p>rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l</p><p>rpm -q package_name --changelog 显示一个rpm包的修改历史</p><p>rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供</p><p>rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表</p><p>rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书</p><p>rpm --checksig package.rpm 确认一个rpm包的完整性</p><p>rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性</p><p>rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</p><p>rpm -Va 检查系统中所有已安装的rpm包- 小心使用</p><p>rpm -Vp package.rpm 确认一个rpm包还未安装</p><p>rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件</p><p>rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包</p><p>rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</p><p>yum install package_name 下载并安装一个rpm包</p><p>yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</p><p>yum update package_name.rpm 更新当前系统中所有安装的rpm包</p><p>yum update package_name 更新一个rpm包</p><p>yum remove package_name 删除一个rpm包</p><p>yum list 列出当前系统中安装的所有包</p><p>yum search package_name 在rpm仓库中搜寻软件包</p><p>yum clean packages 清理rpm缓存删除下载的包</p><p>yum clean headers 删除所有头文件</p><p>yum clean all 删除所有缓存的包和头文件</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>DEB 包 (Debian, Ubuntu 以及类似系统)</p><p>dpkg -i package.deb 安装/更新一个 deb 包</p><p>dpkg -r package_name 从系统删除一个 deb 包</p><p>dpkg -l 显示系统中所有已经安装的 deb 包</p><p>dpkg -l | grep httpd 显示所有名称中包含 &#34;httpd&#34; 字样的deb包</p><p>dpkg -s package_name 获得已经安装在系统中一个特殊包的信息</p><p>dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表</p><p>dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表</p><p>dpkg -S /bin/ping 确认所给的文件由哪个deb包提供</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>APT 软件工具 (Debian, Ubuntu 以及类似系统)</p><p>apt-get install package_name 安装/更新一个 deb 包</p><p>apt-cdrom install package_name 从光盘安装/更新一个 deb 包</p><p>apt-get update 升级列表中的软件包</p><p>apt-get upgrade 升级所有已安装的软件</p><p>apt-get remove package_name 从系统删除一个deb包</p><p>apt-get check 确认依赖的软件仓库正确</p><p>apt-get clean 从下载的软件包中清理缓存</p><p>apt-cache search searched-package 返回包含所要搜索字符串的软件包名称</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>查看文件内容</p><p>cat file1 从第一个字节开始正向查看文件的内容</p><p>tac file1 从最后一行开始反向查看一个文件的内容</p><p>more file1 查看一个长文件的内容</p><p>less file1 类似于 &#39;more&#39; 命令，但是它允许在文件中和正向操作一样的反向操作</p><p>head -2 file1 查看一个文件的前两行</p><p>tail -2 file1 查看一个文件的最后两行</p><p>tail -f /var/log/messages 实时查看被添加到一个文件中的内容</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文本处理</p><p>cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT</p><p>cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中</p><p>cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中</p><p>grep Aug /var/log/messages 在文件 &#39;/var/log/messages&#39;中查找关键词&#34;Aug&#34;</p><p>grep ^Aug /var/log/messages 在文件 &#39;/var/log/messages&#39;中查找以&#34;Aug&#34;开始的词汇</p><p>grep [0-9] /var/log/messages 选择 &#39;/var/log/messages&#39; 文件中所有包含数字的行</p><p>grep Aug -R /var/log/* 在目录 &#39;/var/log&#39; 及随后的目录中搜索字符串&#34;Aug&#34;</p><p>sed &#39;s/stringa1/stringa2/g&#39; example.txt 将example.txt文件中的 &#34;string1&#34; 替换成 &#34;string2&#34;</p><p>sed &#39;/^$/d&#39; example.txt 从example.txt文件中删除所有空白行</p><p>sed &#39;/ *#/d; /^$/d&#39; example.txt 从example.txt文件中删除所有注释和空白行</p><p>echo &#39;esempio&#39; | tr &#39;[:lower:]&#39; &#39;[:upper:]&#39; 合并上下单元格内容</p><p>sed -e &#39;1d&#39; result.txt 从文件example.txt 中排除第一行</p><p>sed -n &#39;/stringa1/p&#39; 查看只包含词汇 &#34;string1&#34;的行</p><p>sed -e &#39;s/ *$//&#39; example.txt 删除每一行最后的空白字符</p><p>sed -e &#39;s/stringa1//g&#39; example.txt 从文档中只删除词汇 &#34;string1&#34; 并保留剩余全部</p><p>sed -n &#39;1,5p;5q&#39; example.txt 查看从第一行到第5行内容</p><p>sed -n &#39;5p;5q&#39; example.txt 查看第5行</p><p>sed -e &#39;s/00*/0/g&#39; example.txt 用单个零替换多个零</p><p>cat -n file1 标示文件的行数</p><p>cat example.txt | awk &#39;NR%2==1&#39; 删除example.txt文件中的所有偶数行</p><p>echo a b c | awk &#39;{print $1}&#39; 查看一行第一栏</p><p>echo a b c | awk &#39;{print $1,$3}&#39; 查看一行的第一和第三栏</p><p>paste file1 file2 合并两个文件或两栏的内容</p><p>paste -d &#39;+&#39; file1 file2 合并两个文件或两栏的内容，中间用&#34;+&#34;区分</p><p>sort file1 file2 排序两个文件的内容</p><p>sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份)</p><p>sort file1 file2 | uniq -u 删除交集，留下其他的行</p><p>sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)</p><p>comm -1 file1 file2 比较两个文件的内容只删除 &#39;file1&#39; 所包含的内容</p><p>comm -2 file1 file2 比较两个文件的内容只删除 &#39;file2&#39; 所包含的内容</p><p>comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>字符设置和文件格式转换</p><p>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX</p><p>unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS</p><p>recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html</p><p>recode -l | more 显示所有允许的转换格式</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>文件系统分析</p><p>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块</p><p>fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性</p><p>fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p>e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性</p><p>e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p>fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性</p><p>fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性</p><p>fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><p>dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>初始化一个文件系统</p><p>mkfs /dev/hda1 在hda1分区创建一个文件系统</p><p>mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统</p><p>mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统</p><p>mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统</p><p>fdformat -n /dev/fd0 格式化一个软盘</p><p>mkswap /dev/hda3 创建一个swap文件系统</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>SWAP文件系统</p><p>mkswap /dev/hda3 创建一个swap文件系统</p><p>swapon /dev/hda3 启用一个新的swap文件系统</p><p>swapon /dev/hda2 /dev/hdb3 启用两个swap分区</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>备份</p><p>dump -0aj -f /tmp/home0.bak /home 制作一个 &#39;/home&#39; 目录的完整备份</p><p>dump -1aj -f /tmp/home0.bak /home 制作一个 &#39;/home&#39; 目录的交互式备份</p><p>restore -<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/844\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IF</a></b>/tmp/home0.bak 还原一个交互式备份</p><p>rsync -rogpav --delete /home /tmp 同步两边的目录</p><p>rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync</p><p>rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录</p><p>rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录</p><p>dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#39;dd of=hda.gz&#39; 通过ssh在远程主机上执行一次备份本地磁盘的操作</p><p>dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件</p><p>tar -Puf backup.tar /home/user 执行一次对 &#39;/home/user&#39; 目录的交互式备份操作</p><p>( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#39;cd /home/share/ &amp;&amp; tar x -p&#39; 通过ssh在远程目录中复制一个目录内容</p><p>( tar c /home ) | ssh -C user@ip_addr &#39;cd /home/backup-home &amp;&amp; tar x -p&#39; 通过ssh在远程目录中复制一个本地目录</p><p>tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接</p><p>find /home/user1 -name &#39;*.txt&#39; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &#39;.txt&#39; 结尾的文件到另一个目录</p><p>find /var/log -name &#39;*.log&#39; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 &#39;.log&#39; 结尾的文件并做成一个bzip包</p><p>dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作</p><p>dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>光盘</p><p>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容</p><p>mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件</p><p>mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件</p><p>mkisofs -J -allow-leading-dots -R -V &#34;Label CD&#34; -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件</p><p>cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件</p><p>gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件</p><p>mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件</p><p>cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中</p><p>cd-paranoia -- &#34;-3&#34; 从一个CD光盘转录音轨到 wav 文件中（参数-3）</p><p>cdrecord --scanbus 扫描总线以识别scsi通道</p><p>dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD</p>", 
            "topic": [
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80660333", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 1, 
            "title": "嵌入式学习路线怎么学 如何学习嵌入式系统", 
            "content": "<p>随着互联网的快速发展，嵌入式也越来越火热，更多的人投入到嵌入式开发的行列中来，那么想要学习嵌入式，该从哪里入手学习，嵌入式学习路线图怎么学？</p><p>　　想要学习好嵌入式，想成为嵌入式软件工程师。那么当前企业需要哪些技术呢？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-705b6054bb4c8e7a5ceb480b901d4ecb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"214\" class=\"content_image\" width=\"416\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;416&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"416\" data-rawheight=\"214\" class=\"content_image lazy\" width=\"416\" data-actualsrc=\"https://pic4.zhimg.com/v2-705b6054bb4c8e7a5ceb480b901d4ecb_b.jpg\"/></figure><p>　1.嵌入式上层的软件应用开发</p><p>　　需要：精通嵌入式<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/linux/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Linux</a></u> C语言编程、嵌入式Linux C语言数据结构、嵌入式Linux项目开发流程、嵌入式 Linux并发程序设计、嵌入式 Linux应用编程、嵌入式 Linux网络编程、嵌入式<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/643604.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据库</a></u>开发;若是<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/android/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Android</a></u>设备的应用开发，那就必须要了解<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/java/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">java</a></u>编程，Android应用编程。</p><p>　　2.嵌入式底层开发</p><p>　　当前底层90%的企业都采用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/arm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></u>处理器，低功耗、成本低倍受关注。因此你必须要会：ARM处理器编程、ARM硬件<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>开发、嵌入式Linux系统开发、嵌入式Linux内核开发、嵌入式Linux驱动开发。其次Android设备越来越多，同样你得了解嵌入式Linux在移动开发的典型应用、ndroid底层系统开发。</p><p>　　目前嵌入式主要开发环境有 Linux、Wince等;Linux因其开源、开发操作便利而被广泛采用。而企业对于人才招聘的需求上需要的嵌入式人才必须具备C语言编程经验、嵌入式操作系统（嵌入式Linux）经验、内核裁剪经验、驱动程序开发经验，所以想要进入嵌入式行列，嵌入式开发学习书籍推荐给你。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a58b610ca6216e6a00045ed7a9fc65d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-a58b610ca6216e6a00045ed7a9fc65d6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-a58b610ca6216e6a00045ed7a9fc65d6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a58b610ca6216e6a00045ed7a9fc65d6_b.jpg\"/></figure><p>基础学习Ⅰ---Linux入门</p><p>　　Linux基础</p><p>　　1、《Linux与Unix Shell 编程指南》</p><p>　　2、《嵌入式Linux应用程序开发详解》</p><p>　　C语言基础</p><p>　　1. The C prog<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ram</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/zhuoluye9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mi</a></u>ng language 《C程序设计语言》</p><p>　　2. Pointers on C 《C和指针》</p><p>　　3. C traps and <u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/pi/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pi</a></u>tfalls 《C陷阱与缺陷》</p><p>　　4. Expert C Lanuage 《专家C编程》</p><p>　　5、《高质量程序设计指南：<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/c%2B%2B/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++</a></u>++/C语言（第3版）》</p><p>　　Linux内核</p><p>　　1、《深入理解Linux内核》（第三版）</p><p>　　2、《Linux内核源代码情景分析》毛德操 胡希明着</p><p>　　研发方向</p><p>　　1、《UNIX Network Programming》（UNP）</p><p>　　2、《TCP/IP详解》</p><p>　　3、《Linux内核编程》</p><p>　　4、《Linux设备驱动开发》（LDD）</p><p>　　硬件基础</p><p>　　1、《ARM体系结构与编程》杜春雷着</p><p>　　2、S3C2410 Datasheet</p><p>　　英语基础</p><p>　　1、《<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>与通信专业英语》</p><p>　　系统教程</p><p>　　1、《嵌入式系统――体系结构、编程与设计》</p><p>　　2、《嵌入式系统――采用公开源代码和StrongARM/Xscale处理器》毛德操 胡希明着</p><p>　　3、《Building Embedded Linux Systems》</p><p>　　理论基础</p><p>　　1、《算法导论》</p><p>　　2、《数据结构（C语言版）》</p><p>　　3、《计算机组织与体系结构？性能分析》</p><p>　　4、《深入理解计算机系统》【美】Randal E. Bryant David O‘Hallaron着</p><p>　　5、《操作系统：精髓与设计原理》</p><p>　　6、《编译原理》</p><p>　　Expert C Lanuage 《专家C编程》</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-327ce1ee12ef65d9e010cf6fd8f28535_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb\" width=\"589\" data-original=\"https://pic2.zhimg.com/v2-327ce1ee12ef65d9e010cf6fd8f28535_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;589&#39; height=&#39;339&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"589\" data-original=\"https://pic2.zhimg.com/v2-327ce1ee12ef65d9e010cf6fd8f28535_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-327ce1ee12ef65d9e010cf6fd8f28535_b.jpg\"/></figure><p>　学习不是一蹴而就的事情，想要学好嵌入式，除了要看书学习以外，实际的操作也很重要，理论结合实践才能更好的学习掌握这门技术。</p><p>　　没如果你想要更好的学习嵌入式，了解更多嵌入式技术，可以来千锋看看，千锋有专业的嵌入式讲师为大家讲解嵌入式课程，而且提供长达两周的课程试听，有兴趣可以来听听，反正也不花钱，多了解一些好的学习方式对我们的学习也是很有帮助的。</p><p>　　如今从开发领域、人才需求等就业方向等因素来看，学习嵌入式，前景十分广阔，在未来的智能时代中，嵌入式工程师无需担心就业前景。从一些招聘网站的信息来看，一般有2—3年工作经验的嵌入式开发工程师，其平均年薪也都在15万以上，职位发展空间也很大。所以现在学习嵌入式是很好的机会，抓紧时间学习就能抓住高薪就业的机会。</p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "物联网工程", 
                    "tagLink": "https://api.zhihu.com/topics/20086712"
                }, 
                {
                    "tag": "智能硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19805484"
                }
            ], 
            "comments": [
                {
                    "userName": "漓之", 
                    "userLink": "https://www.zhihu.com/people/3050f63d8a756b87cd4addb2e479a1e6", 
                    "content": "谢谢", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "李松", 
                            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
                            "content": "[大笑]", 
                            "likes": 0, 
                            "replyToAuthor": "漓之"
                        }
                    ]
                }, 
                {
                    "userName": "小鱼干", 
                    "userLink": "https://www.zhihu.com/people/3874b479e4111514548ebfc4c974b55c", 
                    "content": "学习物联网工程这个专业。感觉大家都在软件开发和嵌入式两个方向纠结。 开发钱来的快，学习周期也相对较短。嵌入式这东西.. 没个几年投入是没啥成绩的", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "李松", 
                            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
                            "content": "看个人兴趣，学技术最重要的是兴趣，没有兴趣做开发会很累", 
                            "likes": 0, 
                            "replyToAuthor": "小鱼干"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80668045", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "让MCU低功耗的五点", 
            "content": "<p>低功耗是MCU的一项非常重要的指标，比如某些可穿戴的设备，其携带的电量有限，如果整个<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_dianlu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></b>消耗的电量特别大的话，就会经常出现电量不足的情况，影响用户体验。</p><p>平时我们在做产品的时候，基本的功能实现很简单，但只要涉及低功耗的问题就比较棘手了，比如某些可以低到微安级的MCU，而自己设计的低功耗怎么测都是毫安级的，电流竟然能够高出标准几百到上千倍，遇到这种情况千万不要怕，只要认真你就赢了。下边咱们仔细分析一下这其中的原因。</p><p>第一条</p><p>掐断外设命脉</p><p>——关闭外设<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></b></p><p>先说最直观的，也是工程师都比较注意的方面，就是关闭MCU的外设时钟，对于现在市面上出现的大多数的MCU，其外设模块都对应着一个时钟<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/848\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">开关</a></b>。只需要打开这个外设的时钟，就可以正常的使用这个外设了，当然，此外设也就会产生相应的功耗;反之，如果想要让这个外设不产生功耗，只需关闭它的时钟即可。</p><p>第二条</p><p>让工作节奏慢下来</p><p>——时钟不要倍频</p><p>除了外设模块功率消耗之外，还有一个功耗大户需要注意一下，这就是PLL和FLL模块。PLL和FLL主要是用来对原始的时钟信号进行倍频操作，从而提高系统的整体时钟，相应的，其功耗也会被提上去。所以在进入低功耗之前，需要切换是种模式，旁路掉PLL和FLL模块，从而尽可能的降低MCU的功耗，等到MCU唤醒之后再把时钟切换回去。</p><p>第三条</p><p>围堵涓涓细流</p><p>——注意<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1010\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">I/O</a></b>口的电平状态</p><p>如果认为只要关闭外设时钟就能够保证外设不再耗电，那么你就太天真了。如果IO口没有做好处理的话，它就会在暗地里偷走功耗，而你却浑然不知。具体原因是这样的，一般的IO的内部或者外部都会有上下拉电阻，举个例子，如下图所示，假如某个IO口有个10KΩ的上拉电阻，把引脚拉到3.3V，然而当MCU进入低功耗模式的时候，此IO口被设置成输出低电平，根据欧姆定律，此引脚就会消耗3.3V/10K=0.33mA的电流，假如有四、五个这样的IO口，那么几个mA就贴进去了，太可惜了。所以在进入低功耗之前，请逐个检查IO口的状态：</p><p>如果此IO口带上拉，请设置为高电平输出或者高阻态输入;</p><p>如果此IO口带下拉，请设置为低电平输出或者高阻态输入;</p><p>总之一句话，不要把上好的电流浪费在产生热量的功能上，咱可不靠这点温度去暖手。</p><p>第四条</p><p>睦邻友好合作</p><p>——注意I/O与外设IC的统筹</p><p>IO口的上下拉电阻消耗电流这一因素相对比较明显，下边咱来说一个不明显的因素：IO口与外部IC相连时的电流消耗。假如某个IO口自带上拉，而此与IO相连的IC引脚偏偏是自带下拉的，那么无论这个引脚处于什么样的电平输出，都不可避免的产生一定的电流消耗。所以凡是遇见这一类的情况，首先需要阅读外设IC的手册，确定好此引脚的的状态，做到心中有数;然后在控制MCU睡眠之前，设置好MCU的IO口的上下拉模式及输入输出状态，要保证一丝儿电流都不要被它消耗掉。</p><p>第五条</p><p>断开<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/311\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">调试器</a></b>连接，不要被假象所迷惑</p><p>还有一类比较奇特，检测出来的电流消耗很大，可实际结果是自己杞人忧天，什么原因呢?是因为在<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/851\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测试</a></b>功耗的时候MCU还连接着调试器呢!这时候大部分电流就会被调试器给掳走，平白无故的让工程师产生极度郁闷的心情。所以在测低功耗的时候，一定不要连接调试器，更不能边调试边测电流。</p><p>总结</p><p>MCU的低功耗设计是一个细致活，要养成良好的习惯，做到每添加一个功能都要重新验证一下低功耗是否符合要求，这样就可以随时随地干掉消耗功率的因素。如果把所有功能都设计好了才去考虑低功耗的问题，一个不小心，就可能要更改程序的架构——即便如此也不一定能把功耗给彻底降下去。</p>", 
            "topic": [
                {
                    "tag": "MCU", 
                    "tagLink": "https://api.zhihu.com/topics/19916470"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80701619", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "人工智能与边缘人工智能的潜在作用", 
            "content": "<p><b>2019年7月22日，微软宣布向总部位于旧金山的非营利人工智能(<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ai/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AI</a></u>)研究集团OpenAI投资10亿美元，致力于人工智能的发展（AGI）。这一宣布将人工智能行业两个最大的品牌联系在一起：微软拥有最受欢迎的云人工智能平台Azure，并支持许多关键的人工智能项目，包括开放<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%25A5%259E%25E7%25BB%258F%25E7%25BD%2591%25E7%25BB%259C/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">神经网络</a></u>交换(ONNX)和项目脑电波(Project Brain)，而Open AI在<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%25B7%25B1%25E5%25BA%25A6%25E5%25AD%25A6%25E4%25B9%25A0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习</a></u>技术方面取得了重大突破，创造了基于GPT-2框架的最先进文本生成器之一，以及在多人在线战场视频游戏中击败人类玩家的游戏AI。</b></p><p>此外，微软的投资金额也是值得注意的。为了将此作为背景，ABI研究公司统计，2017年和2018年，人工智能领域的全球风险资本投资总额分别为107亿美元和184亿美元。鉴于整个行业在<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%259C%25BA%25E5%2599%25A8%25E8%25A7%2586%25E8%25A7%2589/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器视觉</a></u>、自然语言处理(NLP)和人工智能芯片组领域取得的重大进展，微软10亿美元的投资将产生巨大的研究和应用。OpenAI可以利用微软的云基础设施进行人工智能研究，同时获得一个将其人工智能技术商业化的良好渠道。</p><h3>农业投资及其挑战</h3><p>这一新伙伴关系的关键重点是AGI。目前，大多数，如果不是全部，商业上成功的人工智能产品运行在狭窄的人工智能场景，或AI专注于一个特定的任务，并执行非常好的任务。这包括客户服务聊天机器人，用于缺陷检测的智能工业摄像头，以及<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%2587%25AA%25E5%258A%25A8%25E9%25A9%25BE%25E9%25A9%25B6/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自动驾驶</a></u>汽车。相反，AGI旨在模仿人类的智能，使AI能够像人类一样学习和做出决策。这是IBM的沃森(Watson)成立以来一直存在的一个愿景，但到目前为止，该行业并没有取得多大进展。</p><p>OpenAI和微软对AGI的愿景是帮助人类解决目前棘手的多学科问题，包括气候变化、更加个性化的医疗保健和教育等全球性挑战，但设计AGI是极具挑战性的。因此，对于AGI准备就绪和商业化的时间表，整个行业没有统一的共识。AGI的许多基础工作仍处于早期阶段，因为AGI将需要新兴的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%259C%25BA%25E5%2599%25A8%25E5%25AD%25A6%25E4%25B9%25A0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习</a></u>技术。以下是执行AGI的一些关键挑战：</p><h3>多任务的需要</h3><p>目前，目前，人工智能被训练成在一组明确定义的输入下产生单一产出。为了使AI能够完成多任务，它需要能够调整经过训练的模型，以便在给定不同但相关的数据集时产生相似的或预期的输出。这就需要转移学习，这包括将训练实例、特征表示、参数和关系知识从现有的经过训练的AI模型转移到一个新的模型来处理目标任务。这样的过程对AGI的准确性和可靠性有很大的影响，如果采用次优的话。</p><h3>自我优化能力</h3><p>AGI还需要有自我管理资源需求的能力。在某些自动机器学习场景中，在诸如内存管理、功耗、甚至模型选择和超参数调整等领域，AGI预计会更高效。这将需要AGI也识别其系统中的错误。虽然像强化学习这样的技术可以用来奖励正确的行为并惩罚错误的决策，但是这样的优化模型还处于早期阶段。</p><h3>处理不完全信息的能力</h3><p>在数据不完整的情况下，AGI需要做出决定，而且往往正在进行中。这就要求AGI是启发式的，在某些情况下是创造性的。根据AGI是如何设计的，AGI的性能将因缺乏数据而受到影响。相比之下，狭义人工智能在部署到商业环境之前，要经过培训和彻底<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">测试</a></u>，以确保其可靠性和准确性。这不是AGI可以期待的奢侈品。</p><h3>需要更强大的人工智能软件和硬件</h3><p>微软正与OpenAI合作，成为最强大的硬件-软件供应商联盟之一，以解决AGI的问题。然而，AGI可能需要更强大的硬件来处理自然概率计算，例如量子计算和神经形态芯片组。</p><p>尽管如此，所有这些缺点显然并没有阻止微软在AGI上与OpenAI合作。近年来，微软投入了大量资源，以Cortana的形式开发其人工智能能力。正如ABI洞察中提到的重新审视人机交互——微软展示了Cortana通过实时吸收和呈现上下文信息来进行自然对话的能力，这得益于<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mi</a></u>crosoft Build在2019年收购了NLP启动语义机。这是合理的期待，微软正寻求在科塔纳创建一个AGI。</p><h3>边缘在AGI中的潜在作用</h3><p>尽管所有这些发展都发生在云环境中，但ABI Research认为，边缘是可以发挥作用的。不可否认，处于边缘的AGI将扮演一个非常不同的角色。与其解决气候变化和个性化医疗挑战，EDGE AGI可能成为公共安全领域的智能移动机器人，也可能成为黑暗工厂或仓库的中心大脑。</p><blockquote>必须指出的是，许多创新和新兴的人工智能技术目前正在边缘的狭义人工智能上进行试验和测试，通常是在数据连通性差、数据有限、对高移动性和低延迟的需求的环境中。这些模型包括移动机器人的定位和导航模型、智能家庭网关上的家庭连接应用程序、工厂现场服务器的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/xianshi/20171205594009.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">制造</a></u>操作优化和预测维护模型。终端设备收集并驻留在网关和现场服务器中的丰富数据对于开发AGI非常有用。与人类一样，AGI基于实时从多个来源收集的数据做出决策，因此需要包含专用于EDGE的窄AI模型的特征和特性。</blockquote><p>此外，EDGE AI硬件也随着时间的推移而变得更加强大。随着对低延迟和本地化人工智能处理能力的需求，对于基于边缘的AGI的需求将始终存在，无论是在设备、网关或现场服务器上。联合或分布式学习可以为AGI提供增量升级。尽管如此，这些发展仍处于初级阶段，甚至在边缘设备中，因此他们需要一段时间才能进入AGI。</p><p>因此，AGI仍然是该行业的长期愿景。看到微软和OpenAI之间的合作关系将会产生什么样的结果，这是绝对令人兴奋的。作为这一合作中的硬件供应商，微软希望在未来对AGI的投资中朝着什么样的方向发展，无论这家云计算巨头是将投资于新的人工智能计算架构，还是加强其优势人工智能产品，还是像许多竞争对手一样，开始开发自己的云和边缘人工智能芯片组，这将是一件很有趣的事情。</p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "物联网工程", 
                    "tagLink": "https://api.zhihu.com/topics/20086712"
                }, 
                {
                    "tag": "智能硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19805484"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80799986", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 10, 
            "title": "嵌入式考试笔记之嵌入式系统基础知识", 
            "content": "<p>自《嵌入式系统设计师考试复习笔记之存储管理篇》在嵌入式在线的博客出现后，意外的得到很多朋友的关注和评论，收到不少朋友的邮件，问一些有关考试的问题，希望得到我的复习笔记的其他部分。我非常感谢他们，他们的热切关注，使我有了继续往下写的无限动力，使我萌生了将我以前的复习笔记、考试经验结合大纲教程并重新按《教程》的章节顺序整理一份适合考生复习的笔记手册，笔记后面再分析历年的真题，按章节考点找出相关的考题进行分析，希望能和有兴趣的人们一起讨论讨论。</p><p>嵌入式系统设计师的一天考试分为上午和下午部分，两部分的考试方式、试题难度、考点分布和复习方法都是不同的。这次我们讨论的是嵌入式系统基础知识，我本人觉得，这部分出下午大题的可能性不大，主要是分布在上午的75道选择题之中。</p><p>从历年的真题和考试大纲来看，上午的选择题主要考查一些基本概念，重要原理的理解，一些关键技术和一些重要的原理引申出来的简单计算。根据这些考试特点，复习的时候可以采用适当的策略，当然每个人的方法都是不一样的，适合自己的办法才是最好的办法。方法大家可以自己慢慢去体会，我的也不多说了，通过笔记和真题分析就可以体现处理。对于很多关键的知识点和基本概念，除了记住之外还要彻底理解，否则出题的时候会进行一些变换，或者引申一些计算，那么就算你知道考那个考点，可能你也做不好。</p><p>在复习的过程中，你要记住：你不是要考一个很高的分数，而是要考一个通过的分数，在复习过程中可以放弃一些内容，只要保证在大部分基本概念，关键技术，重要原理和历年考点上都把握住，能够拿到需要的分数就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、复习笔记</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、嵌入式系统的定义</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    （1）定义：以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统对功能、可靠性、成本、体积、功耗严格要求的专用计算机系统。</p><p>（2）嵌入式系统发展的4个阶段：无操作系统阶段、简单操作系统阶段、实时操作系统阶段、面向Internet阶段。</p><p>（3）知识产权核（IP核）：具有知识产权的、功能具体、接口规范、可在多个集成电路设计中重复使用的功能模块，是实现系统芯片（SOC）的基本构件。</p><p>（4）IP核模块有行为、结构和物理3级不同程度的设计，对应描述功能行为的不同可以分为三类：软核、固核、硬核。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2、嵌入式系统的组成：硬件层、中间层、系统软件层和应用软件层</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）硬件层：嵌入式微处理器、存储器、通用设备接口和I/O接口。</p><p>嵌入式核心模块＝微处理器＋电源电路＋时钟电路＋存储器</p><p>Cache：位于主存和嵌入式微处理器内核之间，存放的是最近一段时间微处理器使用最多的程序代码和数据。它的主要目标是减小存储器给微处理器内核造成的存储器访问瓶颈，使处理速度更快。</p><p>（2）中间层（也称为硬件抽象层HAL或者板级支持包BSP）：它将系统上层软件和底层硬件分离开来，使系统上层软件开发人员无需关系底层硬件的具体情况，根据BSP层提供的接口开发即可。</p><p>BSP有两个特点：硬件相关性和操作系统相关性。</p><p>设计一个完整的BSP需要完成两部分工作：</p><p>A、 嵌入式系统的硬件初始化和BSP功能。</p><p>片级初始化：纯硬件的初始化过程，把嵌入式微处理器从上电的默认状态逐步设置成系统所要求的工作状态。</p><p>板级初始化：包含软硬件两部分在内的初始化过程，为随后的系统初始化和应用程序建立硬件和软件的运行环境。</p><p>系统级初始化：以软件为主的初始化过程，进行操作系统的初始化。</p><p>B、 设计硬件相关的设备驱动。</p><p>（3）系统软件层：由RTOS、文件系统、GUI、网络系统及通用组件模块组成。</p><p>     RTOS是嵌入式应用软件的基础和开发平台。</p><p>（4）应用软件：由基于实时系统开发的应用程序组成。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3、实时系统</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）定义：能在指定或确定的时间内完成系统功能和对外部或内部、同步或异步时间做出响应的系统。</p><p>（2）区别：通用系统一般追求的是系统的平均响应时间和用户的使用方便；而实时系统主要考虑的是在最坏情况下的系统行为。</p><p>（3）特点：时间约束性、可预测性、可靠性、与外部环境的交互性。</p><p>（4）硬实时（强实时）：指应用的时间需求应能够得到完全满足，否则就造成重大安全事故，甚至造成重大的生命财产损失和生态破坏，如：航天、军事。</p><p>（5）软实时（弱实时）：指某些应用虽然提出了时间的要求，但实时任务偶尔违反这种需求对系统运行及环境不会造成严重影响，如：监控系统、实时信息采集系统。</p><p>（6）任务的约束包括：时间约束、资源约束、执行顺序约束和性能约束。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4、实时系统的调度</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）调度：给定一组实时任务和系统资源，确定每个任务何时何地执行的整个过程。</p><p>（2）抢占式调度：通常是优先级驱动的调度，如uCOS。优点是实时性好、反应快，调度算法相对简单，可以保证高优先级任务的时间约束；缺点是上下文切换多。</p><p>（3）非抢占式调度：通常是按时间片分配的调度，不允许任务在执行期间被中断，任务一旦占用处理器就必须执行完毕或自愿放弃，如WinCE。优点是上下文切换少；缺点是处理器有效资源利用率低，可调度性不好。</p><p>（4）静态表驱动策略：系统在运行前根据各任务的时间约束及关联关系，采用某种搜索策略生成一张运行时刻表，指明各任务的起始运行时刻及运行时间。</p><p>（5）优先级驱动策略：按照任务优先级的高低确定任务的执行顺序。</p><p>（6）实时任务分类：周期任务、偶发任务、非周期任务。</p><p>（7）实时系统的通用结构模型：数据采集任务实现传感器数据的采集，数据处理任务处理采集的数据、并将加工后的数据送到执行机构管理任务控制机构执行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5、嵌入式微处理器体系结构</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    （1）冯诺依曼结构：程序和数据共用一个存储空间，程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，采用单一的地址及数据总线，程序和数据的宽度相同。例如：8086、ARM7、MIPS…</p><p>    （2）哈佛结构：程序和数据是两个相互独立的存储器，每个存储器独立编址、独立访问，是一种将程序存储和数据存储分开的存储器结构。例如：AVR、ARM9、ARM10…</p><p>（3）CISC与RISC的特点比较（参照教程22页）。</p><p>    计算机执行程序所需要的时间P可以用下面公式计算：</p><p>    P=I×CPI×T</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    I：高级语言程序编译后在机器上运行的指令数。</p><p>    CPI：为执行每条指令所需要的平均周期数。</p><p>    T：每个机器周期的时间。</p><p>（4）流水线的思想：在CPU中把一条指令的串行执行过程变为若干指令的子过程在CPU中重叠执行。</p><p>（5）流水线的指标：</p><p>     吞吐率：单位时间里流水线处理机流出的结果数。如果流水线的子过程所用时间不一样长，则吞吐率应为最长子过程的倒数。</p><p>     建立时间：流水线开始工作到达最大吞吐率的时间。若m个子过程所用时间一样，均为t，则建立时间T＝mt。</p><p>（6）信息存储的字节顺序</p><p>    A、存储器单位：字节（8位）</p><p>    B、字长决定了微处理器的寻址能力，即虚拟地址空间的大小。</p><p>    C、32位微处理器的虚拟地址空间位232，即4GB。</p><p>    D、小端字节顺序：低字节在内存低地址处，高字节在内存高地址处。</p><p>    E、大端字节顺序：高字节在内存低地址处，低字节在内存高地址处。</p><p>    F、网络设备的存储顺序问题取决于OSI模型底层中的数据链路层。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6、逻辑电路基础</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）根据电路是否具有存储功能，将逻辑电路划分为：组合逻辑电路和时序逻辑电路。</p><p>（2）组合逻辑电路：电路在任一时刻的输出，仅取决于该时刻的输入信号，而与输入信号作用前电路的状态无关。常用的逻辑电路有译码器和多路选择器等。</p><p>（3）时序逻辑电路：电路任一时刻的输出不仅与该时刻的输入有关，而且还与该时刻电路的状态有关。因此，时序电路中必须包含记忆元件。触发器是构成时序逻辑电路的基础。常用的时序逻辑电路有寄存器和计数器等。</p><p>（4）真值表、布尔代数、摩根定律、门电路的概念。（教程28、29页）</p><p>（5）NOR（或非）和NAND（与非）的门电路称为全能门电路，可以实现任何一种逻辑函数。</p><p>（6）译码器：多输入多输出的组合逻辑网络。</p><p>    每输入一个n位的二进制代码，在m个输出端中最多有一个有效。</p><p>    当m＝2n是，为全译码；当m&lt;2n时，为部分译码。</p><p>（7）由于集成电路的高电平输出电流小，而低电平输出电流相对比较大，采用集成门电路直接驱动LED时，较多采用低电平驱动方式。液晶七段字符显示器LCD利用液晶有外加电场和无外加电场时不同的光学特性来显示字符。</p><p>（8）时钟信号是时序逻辑的基础，它用于决定逻辑单元中的状态合适更新。同步是时钟控制系统中的主要制约条件。</p><p>（9）在选用触发器的时候，触发方式是必须考虑的因素。触发方式有两种：</p><p>    电平触发方式：具有结构简单的有点，常用来组成暂存器。</p><p>    边沿触发方式：具有很强的抗数据端干扰能力，常用来组成寄存器、计数器等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7、总线电路及信号驱动</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）总线是各种信号线的集合，是嵌入式系统中各部件之间传送数据、地址和控制信息的公共通路。在同一时刻，每条通路线路上能够传输一位二进制信号。按照总线所传送的信息类型，可以分为：数据总线（DB）、地址总线（AB）和控制总线（CB）。</p><p>（2）总线的主要参数：</p><p>    总线带宽：一定时间内总线上可以传送的数据量，一般用MByte/s表示。</p><p>    总线宽度：总线能同时传送的数据位数（bit），即人们常说的32位、64位等总线宽度的概念，也叫总线位宽。总线的位宽越宽，总线每秒数据传输率越大，也就是总线带宽越宽。</p><p>    总线频率：工作时钟频率以MHz为单位，工作频率越高，则总线工作速度越快，也即总线带宽越宽。</p><p>    总线带宽 ＝ 总线位宽×总线频率/8， 单位是MBps。</p><p>    常用总线：ISA总线、PCI总线、IIC总线、SPI总线、PC104总线和CAN总线等。</p><p>（3）只有具有三态输出的设备才能够连接到数据总线上，常用的三态门为输出缓冲器。</p><p>（4）当总线上所接的负载超过总线的负载能力时，必须在总线和负载之间加接缓冲器或驱动器，最常用的是三态缓冲器，其作用是驱动和隔离。</p><p>（5）采用总线复用技术可以实现数据总线和地址总线的共用。但会带来两个问题：</p><p>    A、需要增加外部电路对总线信号进行复用解耦，例如：地址锁存器。</p><p>    B、总线速度相对非复用总线系统低。</p><p>（6）两类总线通信协议：同步方式、异步方式。</p><p>（7）对总线仲裁问题的解决是以优先级（优先权）的概念为基础。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8、电平转换电路</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）数字集成电路可以分为两大类：双极型集成电路（TTL）、金属氧化物半导体（MOS）。</p><p>（2）CMOS电路由于其静态功耗极低，工作速度较高，抗干扰能力较强，被广泛使用。</p><p>（3）解决TTL与CMOS电路接口困难的办法是在TTL电路输出端与电源之间接一上拉电阻R，上拉电阻R的取值由TTL的高电平输出漏电流IOH来决定，不同系列的TTL应选用不同的R值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9、可编程逻辑器件基础（具体参见教程51到61页）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>     这方面的内容，从总体上有个概念性的认识应该就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>10、嵌入式系统中信息表示与运算基础</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）进位计数制与转换：这样比较简单，也应该掌握怎么样进行换算，有出题的可能。</p><p>（2）计算机中数的表示：源码、反码与补码。</p><p>    正数的反码与源码相同，负数的反码为该数的源码除符号位外按位取反。</p><p>    正数的补码与源码相同，负数的补码为该数的反码加一。</p><p>    例如－98的源码：11100010B</p><p>               反码：10011101B</p><p>               补码：10011110B</p><p>（3）定点表示法：数的小数点的位置人为约定固定不变。</p><p>     浮点表示法：数的小数点位置是浮动的，它由尾数部分和阶数部分组成。</p><p>     任意一个二进制N总可以写成：N=2P×S。S为尾数，P为阶数。</p><p>（4）汉字表示法（教程67、68页），搞清楚GB2318-80中国标码和机内码的变换。</p><p>（5）语音编码中波形量化参数（可能会出简单的计算题目哦）</p><p>    采样频率：一秒内采样的次数，反映了采样点之间的间隔大小。</p><p>              人耳的听觉上限是20kHz，因此40kHz以上的采样频率足以使人满意。</p><p>              CD唱片采用的采样频率是44.1kHz。</p><p>    测量精度：样本的量化等级，目前标准采样量级有8位和16位两种。</p><p>    声道数：单声道和立体声双道。立体声需要两倍的存储空间。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>11、差错控制编码</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    （1）根据码组的功能，可以分为检错码和纠错码两类。检错码是指能自动发现差错的码，例如奇偶检验码；纠错码是指不仅能发现差错而且能自动纠正差错的码，例如循环冗余校验码。</p><p>（2）奇偶检验码、海明码、循环冗余校验码（CRC）。（教程70到77页）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>12、嵌入式系统的度量项目</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）性能指标：分为部件性能指标和综合性能指标，主要包括：吞吐率、实时性和各种利用率。</p><p>（2）可靠性与安全性</p><p>    可靠性是嵌入式系统最重要、最突出的基本要求，是一个嵌入式系统能正常工作的保证，一般用平均故障间隔时间MTBF来度量。</p><p>（3）可维护性：一般用平均修复时间MTTR表示。</p><p>（4）可用性</p><p>（5）功耗</p><p>（6）环境适应性</p><p>（7）通用性</p><p>（8）安全性</p><p>（9）保密性</p><p>（10）可扩展性</p><p>性价比中的价格，除了直接购买嵌入式系统的价格外，还应包含安装费用、若干年的运行维修费用和软件租用费。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>13、嵌入式系统的评价方法：测量法和模型法</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（1）测量法是最直接最基本的方法，需要解决两个问题：</p><p>        A、根据研究的目的，确定要测量的系统参数。</p><p>        B、选择测量的工具和方式。</p><p>（2）测量的方式有两种：采样方式和事件跟踪方式。</p><p>（3）模型法分为分析模型法和模拟模型法。分析模型法是用一些数学方程去刻画系统的模型，而模拟模型法是用模拟程序的运行去动态表达嵌入式系统的状态，而进行系统统计分析，得出性能指标。</p><p>（4）分析模型法中使用最多的是排队模型，它包括三个部分：输入流、排队规则和服务机构。</p><p>（5）使用模型对系统进行评价需要解决3个问题：设计模型、解模型、校准和证实模型。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三、真题解析</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、2007年4、5题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>若每一条指令都可以分解为取指、分析和执行三步。已知取指时间t取指＝4△t，分析时间t分析＝3△t，执行时间t执行＝5△t。如果按串行方式执行完100条指令需要 （4） △t。如果按照流水线方式执行，执行完100条指令需要 （5） △t。</p><p>（4）A. 1190            B. 1195             C. 1200          D. 1205</p><p>（5）A. 504             B. 507              C. 508           D. 510</p><p>&lt;答案&gt;：C、B</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查流水线技术知识点。</p><p>按照串行的方式，执行完一条指令才能执行下一条指令，那么执行完100条指令的时间为：（4＋3＋5）×100＝1200</p><p>按照流水线的方式，可以同时执行多条指令。在第一条指令进行分析的时候，第二条指令已经开始取指；当第一条指令进行执行的时候，第二条指令进行分析，第三条指令取指；当第二条指令进行执行完的时候，第三条指令已经分析完成。依此类推，当第一条指令完成之后，每一个执行的周期就可以完成一条指令。需要注意的是，如果流水线的子过程所用时间不一样长，则吞吐率应以最长子过程来计算。因此，我们可以计算得100条指令的执行时间为：（4＋3＋5）＋（100－1）×5＝507。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2、2007年24题</p><p>某总线有104根信号线，其中数据总线（DB）32根，若总线工作频率为33MHz，则其理论最大传输率为 （24） 。（注：本题答案中的B表示Byte）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（24）A. 33 MB/s            B. 64MB/s     C. 132 MB/s        D. 164 MB/s</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查总线这个知识点。</p><p>根据上面的笔记，总线带宽 ＝ 总线位宽×总线频率/8=32×33/8＝132MB/s。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3、2007年26题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>某存储器数据总线宽度为32bit，存取周期为250ns，则该存储器带宽为 （26） 。（注：本题答案中的B表示Byte）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（26）A. 8×106B/s       B. 16×106B/s   C. 16×108B/s      D. 32×106B/s</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>&lt;答案&gt;：B</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查总线这个知识点。</p><p>存储器带宽即总线带宽，总线频率为：1/250ns=4×106</p><p>存储器带宽为：32×4×106/8＝16×106B/s</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4、2007年27题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>处理机主要由处理器、存储器和总线组成，总线包括 （27） 。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（27）A. 数据总线、串行总线、逻辑总线、物理总线</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>B. 并行总线、地址总线、逻辑总线、物理总线</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>C. 并行总线、串行总线、全双工总线</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>D. 数据总线、地址总线、控制总线</p><p>&lt;答案&gt;：D</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查总线这个知识点，基本概念的考查。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5、2007年35题</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>三极管是可控的开关器件，其饱和与截止状态分别对应开关的接通和断开状态。UBE为基极输入电压，VTH为基极域值电压，如果UBETH，开关应处于 （35） 状态。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（35）A. 接通           B. 三态        C. 断开          D. 高阻</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查电路中最基本的基础知识点，我觉得做不对的根本不能算嵌入式系统开发入门。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6、2007年36题</p><p>如下图所示，若低位地址（A0-A11）接在内存芯片地址引脚上，高位地址（A12-A19）进行片选译码（其中，A14和A16没有参加译码），且片选信号低电平有效，则对下图所示的译码器，不属于此译码空间的地址为 （36） 。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（36）A. AB000H～ABFFFH             B. BB000H～BBFFFH</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>C. EF000H～EFFFFH              D. FE000H～FEFFFH</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>&lt;答案&gt;：D</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查数字电路中译码知识和存储系统中统一编址的问题，相对来说，这个题目有点难度，但是对于学习过和亲身做过单片机的兄弟来说，最基本不过了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7、2007年46题</p><p>（46） 完全把系统软件和硬件部分隔离开来，从而大大提高了系统的可移植性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（46）A. 硬件抽象层     B. 驱动映射层  C. 硬件交互层    D. 中间层</p><p>&lt;答案&gt;：A</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查嵌入式系统组成中的概念。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>8、2006年3题</p><p>    设指令由取指、分析、执行3个子部件完成，每个子部件的工作周期为△t，采用常规标量单流水线处理机。若连续执行10条指令，则共需要时间（3）△t。</p><p>（3）A.8    B.10    C.12    D.14</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查流水线技术知识点。</p><p>3＋（10－1）×1＝12</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9、2006年4、5题</p><p>某计算机的时钟频率为400MHz，测试计算机的程序使用4种类型的指令。每种指令的数量及所需要的指令时钟数（CPI）如下表所示，则该计算机的指令平均时钟数为（4）；该计算机的运算速度为（5）MIPS。</p><p>指令类型              指令数目（条）           每条指令需要的时钟数</p><p>                     1                   160000                                       1</p><p>                     2                   30000                                        2</p><p>                     3                   24000                                        4</p><p>                     4                   16000                                        8</p><p>（4）A.1.85            B.1.93            C.2.36            D.3.75</p><p>（5）A.106.7          B.169.5          C.207.3          D.216.2</p><p>&lt;答案&gt;：B、C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查指令运行方面的简单计算。</p><p>平均时钟数＝（160000＋2×30000＋4×24000＋8×16000）/（160000＋30000＋24000＋16000）＝1.93</p><p>MIPS是指每秒种执行多少百万条指令，即106。</p><p>计算机的运行数度为：400/1.93=207.25=207.3MIPS</p><p class=\"ztext-empty-paragraph\"><br/></p><p>9、2006年12题</p><p>    计算机要对声音信号进行处理时，必须将它转换为数字声音信号。最基本的声音信号数字化方法时取样－量化法。若量化后的每个声音样本用2个字节表示，则量化分辨率是（12）</p><p>       （12）A.1/2          B.1/1024               C.1/65536             D.1/131072</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查声音编码种量化计算的知识点。</p><p>2个字节是16位，其量化分辨率位1/1016＝1/65536。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>10、2006年13题</p><p>    某幅图像具有640×480个象素点，若每个象素具有8位的颜色深度，则可表示（13）种不同的颜色，经过5：1压缩后，其图像数据需要占用（14）（Byte）的存储空间。</p><p>       （13）A.8             B.256             C.512             D.1024</p><p>       （14）A.61440             B.307200        C.384000              D.3072000</p><p>&lt;答案&gt;：B、A</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查图像数据存储计算的知识点。</p><p>8位颜色深度可以表示28＝256种颜色深度。</p><p>经过5：1压缩后的数据大小为：640×480×8/8/5＝61440。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>11、2006年23题</p><p>    若某逻辑门输入A、B和输出F的波形如下图所示，则F(A,B)的表达式为（23）</p><p>       （23）    A.F=A B                B.F=A+B              </p><p>                       C.F=A异或B         D.F=A（B的非）</p><p>                                            ___         __</p><p>                            A_______|    |____|    |_______</p><p>                                             _______</p><p>                            B_______|             |___________</p><p>                                                    ______</p><p>                            F___________|          |_______</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查数字电路的最基本知识点，我觉得这个都搞不清楚很难通过这个考试。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>12、2006年24题</p><p>    一个4位的二进制计数器，由0000状态开始，经过25个时钟脉冲后，该计数器的状态为24</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>       （24）    A.1100           B.1000           C.1001           D.1010</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查数字电路的最基本知识点，相对上面一题有点难，需要对计数器的工作原理有比较清楚的理解。这个也是搞嵌入式系统的基础中的基础，参考教程38页或相关的数电书籍。</p><p>4位的计数器，其计数范围是24＝16，0000开始经过16个时钟脉冲之后又回到了开始的状态0000。25－16＝9，所以说经过25个时钟之后，其计数器的数值应该是9＝1001。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>13、2006年25题</p><p>稳压二极管构成的稳压电路的接法是（25）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>（25）       A.稳压管与负载电阻串联。</p><p>B.稳压管与限流电阻并联。</p><p>C.限流电阻与稳压管串联后，在与负载电阻串联。</p><p>D.限流电阻与稳压管串联后，在与负载电阻并联。</p><p>&lt;答案&gt;：D</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查模拟电路的最基本知识点，实在太简单，不知道从那里开始分析了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>14、2006年26题</p><p>    以下叙述中，不符合RISC指令系统特点的是（26）</p><p>（26）       A.指令长度固定，指令种类少。</p><p>B.寻址方式种类丰富，指令功能尽量增强。</p><p>C.设置大量通用寄存器，访问存储器指令简单。</p><p>D.选取使用频率较高的一些简单指令。</p><p>&lt;答案&gt;：B</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查RISC与CICS的区别，考生应该清楚他们的区别，参加教程22页。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>15、2006年27题</p><p>    通常所说的32位微处理器是指（27）</p><p>       （27）    A.地址总线的宽度为32位         B.处理器数据长度只能为32位</p><p>                     C.CPU字长为32位                    D.通用寄存器数目为32位</p><p>&lt;答案&gt;：C</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查字长的概念和总线宽度的理解，参加教程25页。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>16、2006年28题</p><p>在32位总线系统中，若时钟频率为500MHz，传送一个32位字需要5个时钟周期，则该总线系统的数据传送速率为（28）MB/s。</p><p>（28）   A.200             B.400             C.600             D.800</p><p>&lt;答案&gt;：B</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查总线和数据传输方面的知识点。</p><p>5个时钟周期可以传送4个Byte。</p><p>每秒中可以传送：4×（500/5）＝400MB/s。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>17、2006年30题</p><p>评价一个计算机系统时，通常主要使用（30）来衡量系统的可靠性。</p><p>（30）       A.评价响应时间</p><p>B.平均无故障时间（MTBF）</p><p>C.平均修复时间</p><p>D.数据处理速率</p><p>&lt;答案&gt;：B</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>考查嵌入式系统性能评价中重要知识点。看过了就会做，每什么分析的，参见教程77页。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>四、小结</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>    就我个人的意见，从内容来看，嵌入式系统基础知识的范围很广，知识点很多，而且没有很强的逻辑性，显得比较凌乱，很难将他们有序的组织在一起。但是也不要害怕，内容虽然多而乱，但是考试的题目都比较简单，有些题目几乎是所见即所得。只要你做过嵌入式或者单片机方面的工作，你都能做出来。一些计算的题目也是一些基本概念的延伸。通过分析历年的真题，一方面可以把握考试的出题方式和考试难度，同时可以把握这部分内容的出题方向和复习的方法。从两年的考试题目数量分布来看，06年10道，07年7道，数量有所较少，但是我觉得这不是一个趋势，08年应该不会少于7道题目的。这部分在嵌入式系统设计里面是相当重要的，有一个良好的基础才能做好下面的事情。如果复习得好，将这7、8分题目拿到手，那么你离45分左右的及格线又迈进了一大步了。</p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "智能硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19805484"
                }, 
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81064706", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "PCB设计项目能不能成功，这个因素占了30%", 
            "content": "<p><b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_power_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电源</a></b>平面的处理，在<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/146\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PCB设计</a></b>中占有很重要的地位。在一个完整的设计项目中，通常电源的处理决定项目的30%-50%的成功率。本次给大家介绍在<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_pads_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PCB</a></b>设计过程中电源平面处理应该考虑的基本要素。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、做电源处理时，首先应该考虑其载流能力，其中包含2个方面：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>a）电源线宽或铜皮的宽度是否足够要考虑电源线宽。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先要了解电源信号处理所在那一层的铜厚是多少。常规工艺下PCB外层（TOP/BOTTOM层）铜厚是1OZ（35μm），内层铜厚会根据实际情况做到1OZ或者0.5OZ。对于1OZ铜厚，在常规情况下，20mil能承载1A左右电流大小；对于0.5OZ铜厚，在常规情况下，40mil能承载1A左右电流大小。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>b）换层时孔的大小及数目是否满足电源电流通流能力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先要了解单个过孔的通流能力，在温升为10度的常规情况下，可参考下表。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c69bb6a59571082e60047245aa6a1e92_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-c69bb6a59571082e60047245aa6a1e92_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;650&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-c69bb6a59571082e60047245aa6a1e92_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c69bb6a59571082e60047245aa6a1e92_b.jpg\"/></figure><p><br/>过孔孔径与电源通流能力对照表<br/><br/><br/>从上表可以看出，单个10mil的过孔可承载1A的电流大小，所以在做设<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计时</a></b>，若电源为2A电流，那么在使用10mil大小过孔打孔换层时，至少要打2个以上的过孔。一般在做设计时，会考虑在电源通道上多打几个孔，从而保持一定的裕量。<br/><br/><br/>2、其次应考虑电源路径，具体应考虑以下2个方面。<br/><br/><br/>a）电源路径应该尽量短，如果走的过长，电源的压降会比较严重，压降过大会导致项目失败。<br/><br/><br/>b）电源平面分割要尽量保持规则，不允许有细长条及哑铃形分割。<br/><br/><br/>c）电源分割时，电源与电源平面分割距离尽量保持在20mil左右，如果在BGA部分区域，可局部保持10mil的分割距离，如果电源平面之间的距离过近，可能会有短路的风险。<br/><br/><br/>d）如若在相邻平面处理电源，要尽量避免铜皮或者走线之间平行处理，这主要是为了减少不同电源之间的干扰，特别是在一些电压相差很大的电源之间，电源平面的重叠问题一定要设法避免，难以避免时可考虑中间增加隔地层。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-12a601426392a10ebcccfada77990d13_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"424\" data-original=\"https://pic4.zhimg.com/v2-12a601426392a10ebcccfada77990d13_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;424&#39; height=&#39;185&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"424\" data-original=\"https://pic4.zhimg.com/v2-12a601426392a10ebcccfada77990d13_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-12a601426392a10ebcccfada77990d13_b.jpg\"/></figure><p><br/>3、做电源分割时应尽量避免相邻信号线跨分割的情况。<br/><br/><br/>信号在跨分割处（如下图示红色信号线就有跨分割现象）因参考平面不连续会有阻抗突变情况产生，会产生EMI、串扰问题在做高速设计时，跨分割会对信号质量造成很大的影响。<br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-64534c933c16e37c97ae9ad9fb984526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"337\" data-rawheight=\"216\" class=\"content_image\" width=\"337\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;337&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"337\" data-rawheight=\"216\" class=\"content_image lazy\" width=\"337\" data-actualsrc=\"https://pic3.zhimg.com/v2-64534c933c16e37c97ae9ad9fb984526_b.jpg\"/></figure><p>更多交流分享私我132-60-562-029</p><p><br/> </p>", 
            "topic": [
                {
                    "tag": "PCB", 
                    "tagLink": "https://api.zhihu.com/topics/19599564"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81070679", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "所谓的嵌入式技术它是什么", 
            "content": "<p>嵌入式技术起源于<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%258D%2595%25E7%2589%2587%25E6%259C%25BA/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></u>技术, 是各类数字化的电子、机电产品的核心,主要用于实现对硬件设备的控制、监视或管理等功能。进入21世纪<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>应用的各行各业中90%左右的开发将涉及到嵌入式开发。全球嵌入式软件市场年增长率超过12.5%，嵌入式系统带来的工业年产值达一万亿美无，未来三年嵌入式软件产业将保持40%以上的年复合增长率。</p><p>一个成熟的嵌入式工程师基本上要了解，应用开发，底层开发，当然这里又会包含很多很多。嵌入式系统的应用前景是非常广泛的，蒂蒙技术更多涉及到的工业领域的嵌入式系统控制。</p><p>基于嵌入式芯片的工业自动化设备将获得长足的发展，目前已经有大量的8、16、32 位嵌入式微控制器在应用中，网络化是提高生产效率和产品质量、减少人力资源主要途径，如工业过程控制、数字机床、电力系统、电网安全、电网设备监测、石油化工系统。就传统的工业控制产品而言，低端型采用的往往是８位单片机。但是随着技术的发展，32位、64位的处理器逐渐成为工业控制设备的核心，在未来几年内必将获得长足的发展。</p><p>工业设备是机电产品中最大的一类，在目前的工业控制设备中，工控机的使用非常广泛，这些工控机一般采用的是工业级的处理器和各种设备，其中以X86的MPU最多。工控的要求往往较高，需要各种各样的设备<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>，除了进行实时控制，还须将设备状态，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/835\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">传感器</a></u>的信息等在显示屏上实时显示。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d9caffe52f55e337ebcd34ab9529bd2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"494\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"494\" data-original=\"https://pic4.zhimg.com/v2-d9caffe52f55e337ebcd34ab9529bd2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;494&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"494\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"494\" data-original=\"https://pic4.zhimg.com/v2-d9caffe52f55e337ebcd34ab9529bd2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d9caffe52f55e337ebcd34ab9529bd2b_b.jpg\"/></figure><p>这些要求8位的单片机是无法满足的，以前多数使用16位的处理器，随着处理器快速的发展，目前32位、64位的处理器逐渐替代了16位处理器，进一步提升了系统性能。采用PC104总线的系统，体积小，稳定可靠，受到了很多用户的青睐。不过这些工控机采用的往往是DOS或者Windows系统，虽然具有嵌入式的特点，却不能称作纯粹的嵌入式系统。另外在工业控制器和设备控制器方面，则是各种<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1037\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">嵌入式处理器</a></u>的天下。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1e57c472be910ec44a56ddeb46e7d443_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic4.zhimg.com/v2-1e57c472be910ec44a56ddeb46e7d443_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;332&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic4.zhimg.com/v2-1e57c472be910ec44a56ddeb46e7d443_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1e57c472be910ec44a56ddeb46e7d443_b.jpg\"/></figure><p>这些控制器往往采用16位以上的处理器，各种<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/mcu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MCU</a></u>，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/arm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Arm</a></u>、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mi</a></u>ps、68K系列的处理器在控制器中占据核心地位。这些处理器上提供了丰富的接口总线资源，可以通过它们实现<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1043\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据采集</a></u>，数据处理，通讯以及显示（显示一般是连接<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/957\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LED</a></u>或者LCD）。最近飞利浦和ARM共同推出32位<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/risc/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC</a></u>嵌入式控制器，适用于工业控制，采用最先进的0.18微米CMOS嵌入式闪存处理技术，操作电压可以低至1.2伏，它还能降低25%到30%的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/xianshi/20171205594009.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">制造</a></u>成本，在工业领域中对最终用户而言是一套极具成本效益的解决方案。</p><p>嵌入式技术在工业控制中显得尤其的重要，属于控制的核心环节。蒂蒙技术不断优化嵌入式系统，力求为用户打造一个高性能、高可靠性的非传统工业控制设备。</p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "物联网", 
                    "tagLink": "https://api.zhihu.com/topics/19551271"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81327954", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "51单片机、AVR单片机和PIC单片机的IO口操作", 
            "content": "<p>51单片机、AVR单片机和PIC单片机IO口结构的均不同，导致了IO口操作也不同。操作单片机IO口的目的是让单片机的管脚输出逻辑电平和读取单片机管脚的逻辑电平。下面我们来看看51单片机、AVR单片机和PIC单片机IO口的操作的方法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d6570bbabe9d0f867733abab48313992_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"872\" data-original=\"https://pic3.zhimg.com/v2-d6570bbabe9d0f867733abab48313992_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;872&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"872\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"872\" data-original=\"https://pic3.zhimg.com/v2-d6570bbabe9d0f867733abab48313992_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d6570bbabe9d0f867733abab48313992_b.jpg\"/></figure><p>一.51单片机IO口的操作</p><p>51单片机IO口的结构比较简单，每个IO口只有一个IO口寄存器Px,而且这个寄存器可以位寻址，操作起来是所有单片机里最简单的，可以直接进行总线操作也可以直接进行位操作，这也是51单片机之所以成为经典的原因之一。下例的运行坏境为Keil软件，器件为AT89S52。</p><p>#i nclude</p><p>sbit bv=P2^0;//定义位变量，关联P2.0管脚。sbit是C51编译器特有的数据类型</p><p>int main(void)</p><p>{</p><p>unsigned char pv;</p><p>//位操作，以P2口的第0位为例：</p><p>bv=0;//直接对P2口的第0位管脚输出低电平</p><p>bv=1;// 直接对P2口的第0位管脚输出高电平</p><p>//总线操作输出数据，以P2口为例：</p><p>P2=0xaa;//直接赋值，P2口输出数据0xaa</p><p>//总线操作读取数据，以P2口为例：</p><p>pv=P2;//直接读取P2口的数据放到pv变量</p><p>return 0;</p><p>}</p><p>二.AVR单片机IO口的操作</p><p>AVR单片机IO口的结构比较复杂，每个IO由三个寄存器组成：IO口数据寄存器POTx、IO口方向寄存器DDRx和IO口输入引脚寄存器PINx。AVR单片机IO口操作相当麻烦，需要设置IO口的方向，而且只能进行总线操作，如果进行位操作还需要掌握编程技巧---通过逻辑运算来实现位操作。下例的运行坏境为ICCAVR软件，器件为ATMEGA16。</p><p>#i nclude</p><p>int main(void)</p><p>{</p><p>unsigned char pv;</p><p>//总线操作输出数据，以D口为例：</p><p>DDRD=0xff;//先设置D口的方向为输出方式(相应位设0为输入，设1为输出)</p><p>PORTD=0xaa;//赋值，D口输出数据0xaa</p><p>//总线操作读取数据，以D口为例：</p><p>DDRD=0x00//先设置D口的方向为输入方式(相应位设0为输入，设1为输出)</p><p>PORTD=0xff;//再设置D口为带上拉电阻(相应位设0为无上拉，设1为有上拉)，才能准确读取数据</p><p>pv=PIND;//读取D口的PIND寄存器的数据放到pv变量</p><p>//位操作，以D口的第0位为例：</p><p>DDRD|=0x01;//先设置D口第0位的方向为输出方式，其他位的方向不变</p><p>PORTD|=0x01;//D口的第0位输出高电平，技巧：使用位或运算，其他位不变</p><p>PORTD&amp;=~0x01;//D口的第0位输出低电平，技巧：使用取反位与运算，其他位不变</p><p>return 0;</p><p>}</p><p>三.PIC单片机IO口的操作</p><p>PIC单片机IO口的结构也比较复杂，每个IO由两个寄存器组成：IO口数据寄存器PORTx、和IO口方向寄存器TRISx。操作起来比AVR单片机简单一些，同样需要设置IO的方向，可以进行总线操作也可以进行位操作。下例的运行坏境为MPLAB IDE软件，器件为PIC16F877。</p><p>#i nclude</p><p>__CONFIG(0x3B32);</p><p>int main(void)</p><p>{</p><p>unsigned char pv;</p><p>//总线操作输出数据，以B口为例：</p><p>TRISB=0x00;//先设置B口的方向为输出方式(相应位设0为输出，设1为输入)</p><p>PORTB=0xaa;//赋值，B口输出数据0xaa</p><p>//总线操作读取数据，以B口为例：</p><p>TRISB=0xff;//先设置B口的方向为输入方式(相应位设0为输出，设1为输入)</p><p>pv=PORTB;//读取B口的数据放到pv变量</p><p>//位操作，以B口的第0位为例：</p><p>TRISB=0xfe;//先设置B口的第0位(RB0)的方向为输出方式(相应位设0为输出，设1为输入)</p><p>RB0=1;//B口的第0位输出高电平</p><p>RB0=0;//B口的第0位输出低电平</p><p>return 0;</p><p>}</p><p>经过比较这三种单片机IO口的操作，我们知道，51单片机IO口结构简单，操作简单，但没有高电平大电流驱动能力;AVR和PIC单片机IO 口结构复杂，操作麻烦，但具备高电平大电流驱动能力。换句话说，单片机的IO口的功能越强大结构越复杂操作越繁琐。</p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "产品设计（硬件）", 
                    "tagLink": "https://api.zhihu.com/topics/19550349"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81567136", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 2, 
            "title": "单片机执行程序的全过程介绍", 
            "content": "<p><u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%258D%2595%25E7%2589%2587%25E6%259C%25BA/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></u>执行程序的过程，实际上就是执行我们所编制程序的过程。即逐条指令的过程。<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>每执行一条指令都可分为三个阶段进行。即取指令-----分析指令-----执行指令。</p><p>取指令的任务是：根据程序计数器PC中的值从程序<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></u>读出现行指令，送到指令<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%25AF%2584%25E5%25AD%2598%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">寄存器</a></u>。</p><p>分析指令阶段的任务是：将指令寄存器中的指令操作码取出后进行译码，分析其指令性质。如指令要求操作数，则寻找操作数地址。</p><p>计算机执行程序的过程实际上就是逐条指令地重复上述操作过程，直至遇到停机指令可循环等待指令</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-22729c0e31a01312f3fc67bca6d1e77c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"199\" class=\"content_image\" width=\"313\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;313&#39; height=&#39;199&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"313\" data-rawheight=\"199\" class=\"content_image lazy\" width=\"313\" data-actualsrc=\"https://pic1.zhimg.com/v2-22729c0e31a01312f3fc67bca6d1e77c_b.jpg\"/></figure><p>一般计算机进行工作时，首先要通过外部设备把程序和数据通过输入<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a><a href=\"https://link.zhihu.com/?target=http%3A//www.hqpcb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></u>和数据总线送入到<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></u>器，然后逐条取出执行。但单片机中的程序一般事先我们都已通过写入器固化在片内或片外程序存储器中。因而一开机即可执行指令。</p><p>下面我们将举个实例来说明指令的执行过程：</p><p>开机时，程序计算器PC变为0000H。然后单片机在时序电路作用下自动进入执行程序过程。执行过程实际上就是取出指令（取</p><p>出存储器中事先存放的指令阶段）和执行指令（分析和执行指令）的循环过程。</p><p>例如执行指令：MOV A，#0E0H，其机器码为“74H E0H”，该指令的功能是把操作数E0H送入累加器， 0000H单元中已存放74H，0001H单元中已存放E0H。当单片机开始运行时，首先是进入取指阶段，其次序是：</p><p>1程序计数器的内容（这时是0000H）送到地址寄存器；</p><p>2程序计数器的内容自动加1（变为0001H）；</p><p>3地址寄存器的内容（0000H）通过内部地址总线送到存储器，以存储器中地址译码电跟，使地址为0000H的单元被选中；</p><p>4 <u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/cpu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CPU</a></u>使读控制线有效；</p><p>5在读命令控制下被选中存储器单元的内容（此时应为74H）送到内部数据总线上，因为是取指阶段，所以该内容通过数据总线被送到指令寄存器。</p><p>至此，取指阶段完成，进入译码分析和执行指令阶段。</p><p>由于本次进入指令寄存器中的内容是74H（操作码），以译码器译码后单片机就会知道该指令是要将一个数送到A累加器，而该数是在这个代码的下一个存储单元。所以，执行该指令还必须把数据（E0H）从存储器中取出送到CPU，即还要在存储器中取第二个字节。其过程与取指阶段很相似，只是此时PC已为0001H。指令译码器结合时序部件，产生74H操作码的微操作系列，使数字E0H从0001H单元取出。因为指令是要求把取得的数送到A累加器，所以取出的数字经内部数据总线进入A累加器，而不是进入指令寄存器。至此，一条指令的执行完毕。单片机中PC=0002H，PC在CPU每次向存储器取指或取数时自动加1，单片机又进入下一取指阶段。这一过程一直重复下去，直至收到暂停指令或循环等待指令暂停。CPU就是这样一条一条地执行指令，完成所有规定的功能。</p>", 
            "topic": [
                {
                    "tag": "单片机软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19949093"
                }, 
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19552332"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81654636", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "ST最新发布Cortex-A9内核嵌入式处理器", 
            "content": "<p>全球系统级芯片（SoC）技术的领导厂商<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%2584%258F%25E6%25B3%2595%25E5%258D%258A%25E5%25AF%25BC%25E4%25BD%2593/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">意法半导体</a></u>发布业内首款整合双<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/arm/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ARM</a></u>Cor<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">te</a></u>x-A9 内核和DDR3（第三代双速率）内存<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1039\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">接口</a></u>的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1037\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">嵌入式处理器</a></u>。新产品SPEAr1310采用意法半导体的低功耗 55nm HCMOS（高速CMOS）制程，为多种嵌入式应用提供高计算和定制功能，同时兼具系统级芯片的成本竞争优势。</p><p>新微处理器整合超低功耗技术和ARM Cortex-A9处理器内核的多任务处理功能，以及创新的片上网络（NoC）技术。双核ARM Cortex-A9处理器可全面支持对称和不对称运算，处理速度高达每核600MHz（在恶劣的工业环境中），相当于 3000 D<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MI</a></u>PS。片上网络是应用灵活的通信架构，可支持多路不同的流量特性，以最具成本效益和能效的方式，最大限度地提高数据吞吐量。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-94491ac6168b6dde71854ea96d6590a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-94491ac6168b6dde71854ea96d6590a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-94491ac6168b6dde71854ea96d6590a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-94491ac6168b6dde71854ea96d6590a2_b.jpg\"/></figure><p>  意法半导体<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>系统产品部总经理Loris Valen<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%25BE%25B7%25E5%25B7%259E%25E4%25BB%25AA%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></u>表示：“SPEAr1310是近期发布的SPEAr1300系列的首款产品，其它产品也将陆续推出。凭借其创新的架构和强大的功能，SPEAr1310以最先进的技术引领嵌入式市场，实现前所未有的成本竞争力、性能以及灵活性。”</p><p>        内置DDR2/DDR3内存控制器和完整的外设接口，包括<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/usb/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB</a></u>、SATA、PCIe（集成物理层）以及千兆<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E4%25BB%25A5%25E5%25A4%25AA%25E7%25BD%2591/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">以太网</a></u>MAC（媒体访问控制器）。意法半导体SPEAr1310微处理器适用于高性能嵌入式控制应用市场，包括通信、计算机外设以及工业自动化。</p><p>        高速缓存与硬件加速器和<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1010\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">I/O</a></u>模块的一致性能够提高数据吞吐量以及简化软件开发过程。加速器一致性端口（ACP）结合芯片的NoC路由功能，可满足硬件加速和I/O性能的最新应用需求。ECC（错误校验码）保护功能可防止<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DRAM</a></u>内存和二级高速缓存上的软硬错误， 可大幅延长故障间隔时间，进而提高系统可靠性。</p><p>合作微信:xydf321456</p><p>合作qq:754634522</p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "编程学习", 
                    "tagLink": "https://api.zhihu.com/topics/19593616"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81655860", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 1, 
            "title": "嵌入式人工智能技术的开发和应用", 
            "content": "<p>人工智能算法如何有效地运行在嵌入式智能终端（即边缘计算）是近年研究的热点，本文从嵌入式人工智能技术研究的意义以及所面临的问题入手，并从硬件平台、算法设计以及算法部署三个方面展开，阐述嵌入式人工智能技术开发的思路，最后通过一个应用实例说明此开发过程。</p><p>随着“<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ai/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AI</a></u>oT（人工智能物联网）=AI（人工智能）+<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/iot/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IoT</a></u>（物联网）”的发展，若把算法都部署在云平台上进行，会给网络通信带来不小的压力，并且会面临数据传输的延迟性以及安全性等问题，因此并不是所有的智能终端都需要利用云平台来运行，因此如何在智能终端上直接运行算法的边缘计算应运而生。</p><p>边缘计算相对于云平台有如下优势：（1）实时性高，不需要传输数据从而减少反应延迟；（2）可靠性高，即使网络断开也能正常工作；（3）安全性高，避免隐私数据被上传；（4）部署灵活，可在各种终端灵活部署；（5）更加节能，嵌入式系统低功耗特性以及减少了传输过程的能耗等；（6）网络流量低，有效抑制了网络拥塞；（7）类人化，人就是作为独立的智能体生存在社会网络中。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a46a4e8ee71ba57e9979bfe422ea60a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic4.zhimg.com/v2-a46a4e8ee71ba57e9979bfe422ea60a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;362&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic4.zhimg.com/v2-a46a4e8ee71ba57e9979bfe422ea60a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a46a4e8ee71ba57e9979bfe422ea60a7_b.jpg\"/></figure><p>当然边缘计算不是为了代替云计算，而是作为云计算的一个补充。</p><p>据<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1181\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IDC</a></u>预测，到2020年将有超过500亿的终端与设备联网，而有50%的物联网网络将面临网络带宽的限制，40%的数据需要在网络边缘分析、处理与储存。边缘计算市场规模将超万亿，成为与云计算平分秋色的新兴市场 [1] 。因此吸引越来越多的公司加入到边缘计算开发当中。</p><p>边缘计算就是在嵌入式平台上能有效地运行各种智能算法，从而使终端具有类似人一样的智能。智能算法大致可以归为三类：（1）认知环境，其中包括物体识别、目标检测、语义分割和特征提取功能，涉及了模式识别、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%259C%25BA%25E5%2599%25A8%25E5%25AD%25A6%25E4%25B9%25A0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">机器学习</a></u>和<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E6%25B7%25B1%25E5%25BA%25A6%25E5%25AD%25A6%25E4%25B9%25A0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深度学习</a></u>等技术；（2）显示场景，其中包括复原算法、三维点云展示和场景生成，涉及了最优化、虚拟现实、深度学习GAN网络等技术；（3）控制机构，其中包括智能控制，涉及了强化学习、<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E7%25A5%259E%25E7%25BB%258F%25E7%25BD%2591%25E7%25BB%259C/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">神经网络</a></u>控制等技术。但是边缘计算环境下嵌入式平台的运算能力弱，因此如何能有效的运行各种智能算法是一个很挑战的问题。</p><p>随着人们对人工智能越来越深入的研究，边缘计算也有了一系列发展的机会：（1）目前通用的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>体系硬件体系结构并不符合人脑的结构构成，所以计算效能还有很大的提升潜力，因此这为边缘计算平台提供了弯道超车的可能性；（2）当前的智能算法还有很大改进的空间，例如通过深度学习训练出的特征往往优于人们传统认识的特征（例如边缘和角点特征等），因此这为边缘计算在算法改进上提供了很大空间；（3）边缘计算平台即嵌入式系统往往是实现某种特定的应用，因此可以根据需求对算法进行各种简化，并且可提出合适的部署方案。</p><p>结合边缘计算所面临的挑战和机会，本文从硬件架构、算法设计和算法部署三个方面展开边缘计算的开发和应用。</p><p>技术指导合作微信：xydf321456</p><p>技术指导合作qq:754634522</p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "人工智能", 
                    "tagLink": "https://api.zhihu.com/topics/19551275"
                }, 
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81755264", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 1, 
            "title": "PCB导通孔、盲孔、埋孔，钻孔知识你一定要看！", 
            "content": "<p>导通孔（VIA），<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_dianlu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电路</a></b>板不同层中导电图形之间的铜箔线路就是用这种孔导通或连接起来的，但却不能插装组件引腿或者其他增强材料的镀铜孔。印制电路板(<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_pads_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PCB</a></b>)是由许多的铜箔层堆叠累积形成的。铜箔层彼此之间不能互通是因为每层铜箔之间都铺上了一层绝缘层，所以他们之间需要靠导通孔（via）来进行讯号链接，因此就有了中文导通孔的称号。<br/><br/><br/></p><p>这个制作过程不能通过电路板黏合后再进行钻孔的方式达成，必须要在个别电路层的时候就进行钻孔操作，先局部黏合内层之后进行电镀处理，最后全部黏合。由于操作过程比原来的导通孔和盲孔更费劲，所以价格也是最贵的。这个制作过程通常只用于高密度的电路板，增加其他电路层的空间利用率。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在印制电路板(PCB)生产工艺中，钻孔是非常重要的。钻孔简单理解就是在覆铜板上钻出所需要的过孔，具有提供电气连接，固定器件的功能。如果操作不正确导致过孔的工序出现问题，器件不能固定在电路板上面，轻则影响电路板的使用，重则让整块板都报废，因此钻孔这个工序是相当重要的。<figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-1797e7c663682bc40650a74623d4a49a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"364\" data-rawheight=\"302\" class=\"content_image\" width=\"364\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;364&#39; height=&#39;302&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"364\" data-rawheight=\"302\" class=\"content_image lazy\" width=\"364\" data-actualsrc=\"https://pic3.zhimg.com/v2-1797e7c663682bc40650a74623d4a49a_b.jpg\"/></figure></p><p><br/><br/>电路板的导通孔必须经过塞孔来达到客户的需求，在改变传统的铝片塞孔工艺中，电路板板面阻焊与塞孔利用白网完成，使其生产更加稳定，质量更加可靠，运用起来更加完善。导通孔有助于电路互相连接导通，随着<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子</a></b>行业的迅速发展，也对印制电路板(PCB)的制作工艺和表面贴装技术提出了更高的要求。<br/><br/><br/>导通孔的塞孔工艺就应运而生了，同时也要满足以下要求：<br/><br/><br/>1、孔内只需有铜，阻焊可以塞也可以不塞；<br/><br/>2、孔内必须有锡铅，有一定的厚度要求（4um），避免阻焊油墨入孔，造成孔内藏锡珠；<br/><br/>3、导通孔必须有阻焊油墨塞孔，不透光，不得有锡圈和锡珠，必须平整等要求。<br/><br/><br/>就是将印制电路板(PCB)中的最外层电路和邻近的内层之间用电镀孔来连接，由于无法看到对面，因此被称为盲通。为了增加板电路层间的空间利用率，盲孔就派上用场了。盲孔也就是到印制板表面的一个导通孔<br/><br/>盲孔位于电路板的顶层和底层表面，具有一定的深度，用于表层线路同下面内层线路的连接，孔的深度一般有规定的比率（孔径）。这种制作方式需要特别注意，钻孔深度一定要恰到好处，不注意的话会造成孔内电镀困难。因此也很少有工厂会采用这种制作方式。其实让事先需要连通的电路层在个别电路层的时候先钻好孔，最后再黏合起来也是可以的，但需要较为精密的定位和对位装置。<br/><br/><br/>埋孔，就是印制电路板(PCB)内部任意电路层间的连接，但没有与外层导通，即没有延伸到电路板表面的导通孔的意思。<br/><br/></p><p>这个制作过程不能通过电路板黏合后再进行钻孔的方式达成，必须要在个别电路层的时候就进行钻孔操作，先局部黏合内层之后进行电镀处理，最后全部黏合。由于操作过程比原来的导通孔和盲孔更费劲，所以价格也是最贵的。这个制作过程通常只用于高密度的电路板，增加其他电路层的空间利用率。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在印制电路板(PCB)生产工艺中，钻孔是非常重要的。钻孔简单理解就是在覆铜板上钻出所需要的过孔，具有提供电气连接，固定器件的功能。如果操作不正确导致过孔的工序出现问题，器件不能固定在电路板上面，轻则影响电路板的使用，重则让整块板都报废，因此钻孔这个工序是相当重要的。有正在学习这块的朋友吗？我这里有些免费资料需要的私我哦</p>", 
            "topic": [
                {
                    "tag": "PCB", 
                    "tagLink": "https://api.zhihu.com/topics/19599564"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81757350", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 1, 
            "title": "脚本在嵌入式系统的应用", 
            "content": "<p>脚本曾经限于行业应用，一直给我低效、低能的印象，但凡事总有个例外，我工作中用到了脚本语言。</p><p>于是让我思索究竟这个脚本在嵌入式系统上。特别是工业系统上，能有多大的作为？究竟能走多远。</p><p>脚本语言不是什么新奇的东西，自打有了编译型的语言自然就有了解释型的语言。限于<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算机</a></u>硬件，解释型的语言初期没有编译型的语言强手。后来计算机硬件越来越强了，解释型语言，这样的易于学习，编程简单的语言渐渐流行，代表的就是B<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/asic/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">asic</a></u>。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8a21cb75a9ef1c8e1618163f55624015_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb\" width=\"563\" data-original=\"https://pic2.zhimg.com/v2-8a21cb75a9ef1c8e1618163f55624015_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;563&#39; height=&#39;400&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"400\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"563\" data-original=\"https://pic2.zhimg.com/v2-8a21cb75a9ef1c8e1618163f55624015_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8a21cb75a9ef1c8e1618163f55624015_b.jpg\"/></figure><p>再后来，横空出世了<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/java/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Java</a></u>。这样的介于解释型和编译型语言之间的语言。代表了一个时期的技术走向。90年代前后诞生了很多有影响力的语言，如站点类的PHP。Ruby等。全能高效的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/python/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python</a></u>。小巧灵动，在游戏界大显身手的Lua。<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/linux/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Linux</a></u>下的 Bash 脚本……太多了。</p><p>脚本语言特别像发展时间比較长的，如Python。其配合库众多庞大，已经涉及到各个行业领域。</p><p>能够轻松的用Python做一个Windows、Linux下的应用程序。也能够用来写浏览器的Web界面，也能够写server的CGI甚至server本身。这都难不倒Python。</p><p>相似的还有Ruby，Perl。PHP，在站点后台专业领域，都有独到的地方。</p><p>然而在嵌入式里。这些脚本语言好像都失去了踪影。特别是一些可靠性高，实时性好的领域，对脚本语言往往敬而远之。广大的嵌入式从业者。特别是<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%258D%2595%25E7%2589%2587%25E6%259C%25BA/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></u>编程程序猿们，对这个东西还是比較抗拒的。</p><p>原因非常easy，原生的Python集成到单片机上得接近900KB的代码空间，除此之外，还须要付出大量的内存开销。嵌入式系统，往往内存管理是简陋的。甚至是没有。这对脚本语言这样的内存大户来说。实在难以接受。</p><p>有非常多嵌入式的有志之士，干了非常多有意思的尝试，比方说将Lua弄到单片机上。用Lua开发单片机程序。</p><p>不失为一个有意思的创新。如Python的python-on-a-chip。<u><a href=\"https://link.zhihu.com/?target=https%3A//data.hqchip.com%3A4006/t/8Qa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mi</a></u>cropython，这些项目都是非常有价值的探索。脚本和C语言比。究竟能为我们带来什么？脚本的出现并非偶然。程序实际上就是一套施加在一些数据上的一些算法。计算完毕后，输出数据而已。没有输出数据的程序是无意义的。 脚本。如Python中的表、元表、字典等数据结构，非常easy的几十行代码能构建出用C语言成百上千行才干写出来的复杂数据结构。简单的迭代方式遍历复杂数据结构的办法，也是C语言无法简单的模仿。</p><p>就连用<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/c%2B%2B/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">C++</a></u>的迭代器，相比也是罗嗦麻烦。静止的引用回收机制。使得脚本基本不考虑内存的泄漏问题。这些特点，决定了脚本适合复杂的数据处理。</p><p>天生的不须要编译的特点，也使得在执行时刻也能够方便的改变代码。</p><p>嵌入式有几类应用，是非常适合脚本处理的：</p><p>1.复杂的数据结构实现。用C/C++写，真心的不好，还是用脚本去实现吧。比方说,uC/OS和<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/freertos/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">FreeRTOS</a></u>这样的跑一个诸如sqli<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/te/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">te</a></u>的<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/d/643604.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">数据库</a></u>，数据库的查询，插入等等。选择脚本是明智的。往往Linux太大，团队实施起来，须要较多的精力，并且，网上东找西找的Linux下的代码，稳定性可靠性难以保证。短时间搞出产品来实在是太难了。</p><p>要是烂在了现场。更加是悔不当初。</p><p>这时，小巧的脚本，如Lua就是个非常理想的选择。</p><p>2.灵活性的选择，系统规模没有上到Linux这样的水平。但在系统里又想保留灵活性。希望能像载入可执行文件一样，迅速的让系统获得新的特性。</p><p>脚本是这样的小系统的不二之选。</p><p>3.測试，一般做嵌入式的公司，时间都非常的紧张，没时间做非常仔细的白盒測试。</p><p>在进度和质量的双重压力下，白盒測试往往成了走过场，大家都心照不宣。那就根本不走。导致后来的集成測试中问题扎堆。事实上利用脚本语言能够非常轻松的构建測试用例，測试代码，进行模块间的測试。和主要的单元測试。</p><p>时间紧了。就多做些模块间的測试。控制一下測试的粒度。时间宽松了，用脚本能够測得再细些。</p><p>特别对于嵌入式中须要的复杂数据，可能须要其它系统。诸如PC平台的软件配合。都能够在脚本里轻松的模拟出来。</p><p>可能有些朋友操心速度问题，Lua 有 LuaJIT，Python的PyPy，处理器的不断进步。我认为这都不是问题，问题是你迈出了这步没有？脚本和C，就像当年的 C与ASM。</p><p>全然替代不是目的，合理的在嵌入式中优化现有的实现框架。才是我们须要的。</p><p>我坚信，脚本在嵌入式中一定会大放异彩。</p><p>技术指导提升合作微信:xydf321456</p><p>技术指导提升合作QQ:754634522</p>", 
            "topic": [
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "单片机软件开发", 
                    "tagLink": "https://api.zhihu.com/topics/19949093"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81757831", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 0, 
            "title": "STM32之串口DMA接收不定长数据", 
            "content": "<p><b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_stm32_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32</a></b>之串口DMA接收不定长数据引言<br/>　　在使用stm32或者其他<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_mcu_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">单片机</a></b>的时候，会经常使用到串口通讯，那么如何有效地接收数据呢?假如这段数据是不定长的有如何高效接收呢?<br/>　　同学A：数据来了就会进入串口中断，在中断中读取数据就行了!<br/>　　中断就是打断程序正常运行，怎么能保证高效呢?经常把主程序打断，主程序还要不要运行了?<br/>　　同学B：串口可以配置成用DMA的方式接收数据，等接收完毕就可以去读取了!<br/>　　这个同学是对的，我们可以使用DMA去接收数据，不过DMA需要定长才能产生接收中断,如何接收不定长的数据呢?<br/>　　DMA简介<br/>　　题外话：其实，上面的问题是很有必要思考一下的，不断思考，才能进步。<br/>　　什么是DMA<br/>　　DMA：全称Direct Memory Access，即直接<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></b>访问<br/>　　DMA 传输将数据从一个地址空间复制到另外一个地址空间。CPU只需初始化DMA即可，传输动作本身是由 DMA 控制器来实现和完成。典型的例子就是移动一个外部内存的区块到<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/%3Fu%3D999\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">芯片</a></b>内部更快的内存区。这样的操作并没有让处理器参与处理，CPU可以干其他事情，当DMA传输完成的时候产生一个中断，告诉CPU我已经完成了，然后CPU知道了就可以去处理数据了，这样子提高了CPU的利用率，因为CPU是大脑，主要做数据运算的工作，而不是去搬运数据。DMA 传输对于高效能<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/forum.php%3Fgid%3D3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">嵌入式</a></b>系统算法和网络是很重要的。<br/>　　在STM32的DMA资源<br/>　　STM32F1系列的MCU有两个DMA控制器(DMA2只存在于大容量产品中)，DMA1有7个通道，DMA2有5个通道，每个通道专门用来管理来自于一个或者多个外设对<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></b>器的访问请求。还有一个仲裁器来协调各个DMA请求的优先权。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-760c3c5e0e61ffeb980039a6be9e3171_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb\" width=\"1244\" data-original=\"https://pic2.zhimg.com/v2-760c3c5e0e61ffeb980039a6be9e3171_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1244&#39; height=&#39;583&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"583\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1244\" data-original=\"https://pic2.zhimg.com/v2-760c3c5e0e61ffeb980039a6be9e3171_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-760c3c5e0e61ffeb980039a6be9e3171_b.jpg\"/></figure><p><br/>　　STM32F1</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-14356395fe2d34f3d29e1a3b3a46785c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1233\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb\" width=\"1233\" data-original=\"https://pic1.zhimg.com/v2-14356395fe2d34f3d29e1a3b3a46785c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1233&#39; height=&#39;644&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1233\" data-rawheight=\"644\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1233\" data-original=\"https://pic1.zhimg.com/v2-14356395fe2d34f3d29e1a3b3a46785c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-14356395fe2d34f3d29e1a3b3a46785c_b.jpg\"/></figure><p><br/>　　STM32F1<br/>　　而STM32F4/F7/H7系列的MCU有两个DMA控制器总共有16个数据流(每个DMA控制器8个)，每一个DMA控制器都用于管理一个或多个外设的存储器访问请求。每个数据流总共可以有多达8个通道(或称请求)。每个通道都有一个仲裁器，用于处理 DMA 请求间的优先级。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1d22cc790e18928d4a0d3063017f18a4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic1.zhimg.com/v2-1d22cc790e18928d4a0d3063017f18a4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;940&#39; height=&#39;429&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"429\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"940\" data-original=\"https://pic1.zhimg.com/v2-1d22cc790e18928d4a0d3063017f18a4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1d22cc790e18928d4a0d3063017f18a4_b.jpg\"/></figure><p><br/>　　STM32F4</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-feed6f568f9750318454198a91e36a20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb\" width=\"964\" data-original=\"https://pic1.zhimg.com/v2-feed6f568f9750318454198a91e36a20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;964&#39; height=&#39;469&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"469\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"964\" data-original=\"https://pic1.zhimg.com/v2-feed6f568f9750318454198a91e36a20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-feed6f568f9750318454198a91e36a20_b.jpg\"/></figure><p><br/>　　STM32F4<br/>　　DMA接收数据<br/>　　DMA在接收数据的时候，串口接收DMA在初始化的时候就处于开启状态，一直等待数据的到来，在软件上无需做任何事情，只要在初始化配置的时候设置好配置就可以了。等到接收到数据的时候，告诉CPU去处理即可。<br/>　　判断数据接收完成<br/>　　那么问题来了，怎么知道数据是否接收完成呢?<br/>　　其实，有很多方法：<br/>　　对于定长的数据，只需要判断一下数据的接收个数，就知道是否接收完成，这个很简单，暂不讨论。<br/>　　对于不定长的数据，其实也有好几种方法，麻烦的我肯定不会介绍，有兴趣做复杂工作的同学可以在网上看看别人怎么做，下面这种方法是最简单的，充分利用了stm32的串口资源，效率也是非常之高。<br/>　　DMA+串口空闲中断<br/>　　这两个资源配合，简直就是天衣无缝啊，无论接收什么不定长的数据，管你数据有多少，来一个我就收一个，就像广东人吃“山竹”，来一个吃一个~(最近风好大，我好怕)。<br/>　　可能很多人在学习stm32的时候，都不知道idle是啥东西，先看看stm32串口的状态寄存器：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0639f9ddc6ea35d4b7536969bc43389c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"1320\" data-original=\"https://pic1.zhimg.com/v2-0639f9ddc6ea35d4b7536969bc43389c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1320&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1320\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1320\" data-original=\"https://pic1.zhimg.com/v2-0639f9ddc6ea35d4b7536969bc43389c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0639f9ddc6ea35d4b7536969bc43389c_b.jpg\"/></figure><p><br/>　　idle</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a9b3260854465f0fdf0442e09460d019_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb\" width=\"1127\" data-original=\"https://pic2.zhimg.com/v2-a9b3260854465f0fdf0442e09460d019_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1127&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1127\" data-original=\"https://pic2.zhimg.com/v2-a9b3260854465f0fdf0442e09460d019_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a9b3260854465f0fdf0442e09460d019_b.jpg\"/></figure><p><br/>　　idle说明<br/>　　当我们检测到触发了串口总线空闲中断的时候，我们就知道这一波数据传输完成了，然后我们就能得到这些数据，去进行处理即可。这种方法是最简单的，根本不需要我们做多的处理，只需要配置好，串口就等着数据的到来，dma也是处于工作状态的，来一个数据就自动搬运一个数据。<br/>　　接收完数据时处理<br/>　　串口接收完数据是要处理的，那么处理的步骤是怎么样呢?<br/>　　暂时关闭串口接收DMA通道，有两个原因：1.防止后面又有数据接收到，产生干扰，因为此时的数据还未处理。2.DMA需要重新配置。<br/>　　清DMA标志位。<br/>　　从DMA寄存器中获取接收到的数据字节数(可有可无)。<br/>　　重新设置DMA下次要接收的数据字节数，注意，数据传输数量范围为0至65535。这个寄存器只能在通道不工作(DMA_CCRx的EN=0)时写入。通道开启后该寄存器变为只读，指示剩余的待传输字节数目。寄存器内容在每次DMA传输后递减。数据传输结束后，寄存器的内容或者变为0;或者当该通道配置为自动重加载模式时，寄存器的内容将被自动重新加载为之前配置时的数值。当寄存器的内容为0时，无论通道是否开启，都不会发生任何数据传输。<br/>　　给出信号量，发送接收到新数据标志，供前台程序查询。<br/>　　开启DMA通道，等待下一次的数据接收，注意，对DMA的相关寄存器配置写入，如重置DMA接收数据长度，必须要在关闭DMA的条件进行，否则操作无效。<br/>　　注意事项<br/>　　STM32的IDLE的中断在串口无数据接收的情况下，是不会一直产生的，产生的条件是这样的，当清除IDLE标志位后，必须有接收到第一个数据后，才开始触发，一断接收的数据断流，没有接收到数据，即产生IDLE中断。如果中断发送数据帧的速率很快，MCU来不及处理此次接收到的数据，中断又发来数据的话，这里不能开启，否则数据会被覆盖。有两种方式解决：<br/>　　在重新开启接收DMA通道之前，将Rx_Buf缓冲区里面的数据复制到另外一个数组中，然后再开启DMA，然后马上处理复制出来的数据。<br/>　　建立双缓冲，重新配置DMA_MemoryBaseAddr的缓冲区地址，那么下次接收到的数据就会保存到新的缓冲区中，不至于被覆盖。<br/>　　程序实现<br/>　　实验效果：<br/>　　当外部给单片机发送数 据的时候，假设这帧数据长度是1000个字节，那么在单片机接收到一个字节的时候并不会产生串口中断，只是DMA在背后默默地把数据搬运到你指定的缓冲区里面。当整帧数据发送完毕之后串口才会产生一次中断，此时可以利用DMA_GetCurrDataCounter()函数计算出本次的数据接受长度，从而进行数据处理。<br/>关于stm32 如何用DMA搬运数据可以看看这个资料</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.makeru.com.cn/live/detail/1484.html%3Fs%3D45051\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">makeru.com.cn/live/deta</span><span class=\"invisible\">il/1484.html?s=45051</span><span class=\"ellipsis\"></span></a><br/>　　串口的配置<br/>　　很简单，基本与使用串口的时候一致，只不过一般我们是打开接收缓冲区非空中断，而现在是打开空闲中断——USART_ITConfig(DEBUG_USARTx, USART_IT_IDLE, ENABLE);。</p><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>　/**<br/></li><li><br/></li><li>　　* [url=home.php?mod=space&amp;uid=2666770]@Brief[/url] USART GPIO 配置,工作参数配置<br/></li><li><br/></li><li>　　* [url=home.php?mod=space&amp;uid=3142012]@param[/url] 无<br/></li><li><br/></li><li>　　* @retval 无<br/></li><li><br/></li><li>　　*/<br/></li><li><br/></li><li>　　void USART_Config(void)<br/></li><li><br/></li><li>　　{<br/></li><li><br/></li><li>　　GPIO_InitTypeDef GPIO_InitStructure;<br/></li><li><br/></li><li>　　USART_InitTypeDef USART_InitStructure;<br/></li><li><br/></li><li>　　// 打开串口GPIO的<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/1045\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">时钟</a></b><br/></li><li><br/></li><li>　　DEBUG_USART_GPIO_APBxClkCmd(DEBUG_USART_GPIO_CLK, ENABLE);<br/></li><li><br/></li><li>　　// 打开串口外设的时钟<br/></li><li><br/></li><li>　　DEBUG_USART_APBxClkCmd(DEBUG_USART_CLK, ENABLE);<br/></li><li><br/></li><li>　　// 将USART Tx的GPIO配置为推挽复用模式<br/></li><li><br/></li><li>　　GPIO_InitStructure.GPIO_Pin = DEBUG_USART_TX_GPIO_PIN;<br/></li><li><br/></li><li>　　GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<br/></li><li><br/></li><li>　　GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br/></li><li><br/></li><li>　　GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &amp;GPIO_InitStructure);<br/></li><li><br/></li><li>　　// 将USART Rx的GPIO配置为浮空输入模式<br/></li><li><br/></li><li>　　GPIO_InitStructure.GPIO_Pin = DEBUG_USART_RX_GPIO_PIN;<br/></li><li><br/></li><li>　　GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOA<b><a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></b>NG;<br/></li><li><br/></li><li>　　GPIO_Init(DEBUG_USART_RX_GPIO_PORT, &amp;GPIO_InitStructure);<br/></li><li><br/></li><li>　　// 配置串口的工作参数<br/></li><li><br/></li><li>　　// 配置波特率<br/></li><li><br/></li><li>　　USART_InitStructure.USART_BaudRate = DEBUG_USART_BAUDRATE;<br/></li><li><br/></li><li>　　// 配置 针数据字长<br/></li><li><br/></li><li>　　USART_InitStructure.USART_WordLength = USART_WordLength_8b;<br/></li><li><br/></li><li>　　// 配置停止位<br/></li><li><br/></li><li>　　USART_InitStructure.USART_StopBits = USART_StopBits_1;<br/></li><li><br/></li><li>　　// 配置校验位<br/></li><li><br/></li><li>　　USART_InitStructure.USART_Parity = USART_Parity_No ;<br/></li><li><br/></li><li>　　// 配置硬件流控制<br/></li><li><br/></li><li>　　USART_InitStructure.USART_HardwareFlowControl =<br/></li><li><br/></li><li>　　USART_HardwareFlowControl_None;<br/></li><li><br/></li><li>　　// 配置工作模式，收发一起<br/></li><li><br/></li><li>　　USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;<br/></li><li><br/></li><li>　　// 完成串口的初始化配置<br/></li><li><br/></li><li>　　USART_Init(DEBUG_USARTx, &amp;USART_InitStructure);<br/></li><li><br/></li><li>　　// 串口中断优先级配置<br/></li><li><br/></li><li>　　NVIC_Configuration();<br/></li><li><br/></li><li>　　#<b><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/844\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">IF</a></b> USE_USART_DMA_RX<br/></li><li><br/></li><li>　　// 开启 串口空闲IDEL 中断<br/></li><li><br/></li><li>　　USART_ITConfig(DEBUG_USARTx, USART_IT_IDLE, ENABLE);<br/></li><li><br/></li><li>　　// 开启串口DMA接收<br/></li><li><br/></li><li>　　USART_DMACmd(DEBUG_USARTx, USART_DMAReq_Rx, ENABLE);<br/></li><li><br/></li><li>　　/* 使能串口DMA */<br/></li><li><br/></li><li>　　USARTx_DMA_Rx_Config();<br/></li><li><br/></li><li>　　#else<br/></li><li><br/></li><li>　　// 使能串口接收中断<br/></li><li><br/></li><li>　　USART_ITConfig(DEBUG_USARTx, USART_IT_RXNE, ENABLE);<br/></li><li><br/></li><li>　　#endif<br/></li><li><br/></li><li>　　#if USE_USART_DMA_TX<br/></li><li><br/></li><li>　　// 开启串口DMA发送<br/></li><li><br/></li><li>　　// USART_DMACmd(DEBUG_USARTx, USART_DMAReq_Tx, ENABLE);<br/></li><li><br/></li><li>　　USARTx_DMA_Tx_Config();<br/></li><li><br/></li><li>　　#endif<br/></li><li><br/></li><li>　　// 使能串口<br/></li><li><br/></li><li>　　USART_Cmd(DEBUG_USARTx, ENABLE);<br/></li><li><br/></li><li>　　}</li></ol><p><br/><i>复制代码</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　串口DMA配置</p><p>　　把DMA配置完成，就可以直接打开DMA了，让它处于工作状态，当有数据的时候就能直接搬运了。</p><p>　可以看看这个基于STM32讲解串口操作</p><p><a href=\"https://link.zhihu.com/?target=http%3A//www.makeru.com.cn/live/1758_490.html%3Fs%3D45051\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">makeru.com.cn/live/1758</span><span class=\"invisible\">_490.html?s=45051</span><span class=\"ellipsis\"></span></a></p><p>UVw&#34;&gt;</p><ol><li>　#if USE_USART_DMA_RX</li></ol><p><br/><i>复制代码</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　接收完数据处理<br/>　　因为接收完数据之后，会产生一个idle中断，也就是空闲中断，那么我们就可以在中断服务函数中知道已经接收完了，就可以处理数据了，但是中断服务函数的上下文环境是中断，所以，尽量是快进快出，一般在中断中将一些标志置位，供前台查询。在中断中先判断我们的产生在中断的类型是不是idle中断，如果是则进行下一步，否则就无需理会。</p><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>void DEBUG_USART_IRQHandler(void)<br/></li><li><br/></li><li>　　{<br/></li><li><br/></li><li>　　#if USE_USART_DMA_RX<br/></li><li><br/></li><li>　　/* 使用串口DMA */<br/></li><li><br/></li><li>　　if(USART_GetITStatus(DEBUG_USARTx,USART_IT_IDLE)!=RESET)<br/></li><li><br/></li><li>　　{<br/></li><li><br/></li><li>　　/* 接收数据 */<br/></li><li><br/></li><li>　　Receive_DataPack();<br/></li><li><br/></li><li>　　// 清除空闲中断标志位<br/></li><li><br/></li><li>　　USART_ReceiveData( DEBUG_USARTx );<br/></li><li><br/></li><li>　　}<br/></li><li><br/></li><li>　　#else<br/></li><li><br/></li><li>　　/* 接收中断 */<br/></li><li><br/></li><li>　　if(USART_GetITStatus(DEBUG_USARTx,USART_IT_RXNE)!=RESET)<br/></li><li><br/></li><li>　　{<br/></li><li><br/></li><li>　　Receive_DataPack();<br/></li><li><br/></li><li>　　}<br/></li><li><br/></li><li>　　#endif<br/></li><li><br/></li><li>　　}<br/></li><li><br/></li><li>　　Receive_DataPack()</li></ol><p><br/><i>复制代码</i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>　　这个才是真正的接收数据处理函数，为什么我要将这个函数单独封装起来呢?因为这个函数其实是很重要的，因为我的代码兼容普通串口接收与空闲中断，不一样的接收类型其处理也不一样，所以直接封装起来更好，在源码中通过宏定义实现选择接收的方式!更考虑了兼容操作系统的，可能我会在系统中使用dma+空闲中断，所以，供前台查询的信号量就有可能不一样，可能需要修改，我就把它封装起来了。不过无所谓，都是一样的。</p><p>　　/*</p><p>　　DMA 开启，等待数据。注意，如果中断发送数据帧的速率很快，MCU来不及处理此次接收到的数据，</p><p>　　中断又发来数据的话，这里不能开启，否则数据会被覆盖。有2种方式解决：</p><p>　　1. 在重新开启接收DMA通道之前，将Rx_Buf缓冲区里面的数据复制到另外一个数组中，</p><p>　　然后再开启DMA，然后马上处理复制出来的数据。</p><p>　　2. 建立双缓冲，重新配置DMA_MemoryBaseAddr的缓冲区地址，那么下次接收到的数据就会</p><p>　　保存到新的缓冲区中，不至于被覆盖。</p><p>　　*/</p><p>　　}最后大家分享一些相关的资料供大家在后续的学习中作为参考的话可以私我vx：1326056贰零贰玖</p><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81921756", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "物联网将带动边缘计算和新式存储器的发展", 
            "content": "<p>新式<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/724\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储器</a></u>可分为独立型产品，以及嵌入于逻辑工艺，用于取代部分传统的嵌入式快闪<u><a href=\"https://link.zhihu.com/?target=http%3A//www.hqchip.com/app/843\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">存储</a></u>器 eFlash 技术，而在嵌入式技术上，趋势已快速成熟中。但用于独立型存储器上，目前还有性能、成本的问题待克服。</p><p>因此，新式存储器无论是 M<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/ram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RAM</a></u> 、PCRAM 和 ReRAM 等，并不会冲击到现在国内正如火如荼发展的 <u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/dram/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DRAM</a></u> 、3D NAND 芯片产业，但对于一些应用领域如云计算、物联网带动的边缘计算，加入新式存储器技术后，确实能让整个产业的发展如虎添翼。</p><p>新式存储器技术已经被提出将近 20 年，成熟之路是跌跌撞撞。直到 2015 年，<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E8%258B%25B1%25E7%2589%25B9%25E5%25B0%2594/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">英特尔</a></u>的 3D XPoint 技术横空出世，被认为是类似于 PCRAM 的结构，整个新式存储技术才算是豁然开朗，之后几年的发展更是势如破竹。</p><p>为了替新式存储器产业添柴火，身为全球半导体龙头的应用材料针对 MRAM 、 PCRAM 、ReRAM 推出两款机台设备：Endura Clover MRAM 物理气相沉积（PVD）机台，以及 Endura Impulse 物理气相沉积（PVD）机台，成为推动该产业发展的有力推手。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c67448770c8247311c68c5c8e46ac2a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb\" width=\"521\" data-original=\"https://pic3.zhimg.com/v2-c67448770c8247311c68c5c8e46ac2a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;521&#39; height=&#39;379&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"379\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"521\" data-original=\"https://pic3.zhimg.com/v2-c67448770c8247311c68c5c8e46ac2a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-c67448770c8247311c68c5c8e46ac2a2_b.jpg\"/></figure><p>DeepTech 通过与应用材料两位专家，分别是应用材料中国区事业部总经理兼首席技术官赵甘鸣博士，以及应用材料金属沉积产品全球产品经理周春明博士的对话，来一窥新式存储器将带给这个世界什么样的变化，借此见证存储产业的历史转折。</p><p>因为，计算能力已不再是单独的处理器能力决定，而是说处理器跟存储器之间来回的传输数据，也因为面临瓶颈，导致计算能力无法再前进。Near Memory Compu<u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/tags/%25E5%25BE%25B7%25E5%25B7%259E%25E4%25BB%25AA%25E5%2599%25A8/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ti</a></u>ng 的定义，就是用大量的高带宽、大容量，把存储器和计算处理器更紧密连在一起，在系统层级增加计算性能。</p><p>这概念其实都是用现有的构建模块，比如 DRAM、NAND 、SRAM 等去实现，未来也逐渐与新式存储器 MRAM、ReRAM、PCRAM 结合来增加计算性能，并且打造“存储器计算”（In-Memory Computa<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>ng）的基础。</p><p>In-Memory Computa<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>ng 在这几年是个非常火的概念，但可能还要至少 3 ~ 5 年的时间才能实现。不同于 Near Memory Compu<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>ng 是把存储跟处理放得更靠近，In-Memory Computa<a href=\"https://link.zhihu.com/?target=http%3A//bbs.elecfans.com/zhuti_715_1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TI</a>ng 就是把存储和处理器整合在一起进行计算，就没有传输、延迟等问题，并且大幅提升效能。</p><p>在 MRAM <u><a href=\"https://link.zhihu.com/?target=http%3A//www.elecfans.com/xianshi/20171205594009.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">制造</a></u>过程中，需要在一个平台上实现超过 10 种材料、超过 30 层薄膜的堆积、沉积是非常复杂的。相较之下， PCRAM 和 ReRAM 没有那么多层，但它还是有很多层的结构，包括电极、选择器、存储器，里面的材料非常独特。比如说 PCRAM，其材料结构是 GST ，包含锗 Ge 、锑 Sb、碲 Te，并不是常用的材料，挑战是如何沉积这些复合材料，控制其组分。</p><p>针对 PCRAM 和 ReRAM 大规模量产，应用材料对应的设备为 Endura Impulse PVD 系统，可严格控制多组分材料成分，同时可以实现出色的薄膜厚度、均匀性、界面控制。以大趋势观之，新式存储器的大规模量产会从嵌入式开始，比如台积电将 ReRAM 和 MRAM 嵌入至现有工艺，之后新式存储技术才会往独立存储器领域发展，因为其需要的密度会更高。</p><p>迎接“数据爆炸”时代，芯片急需高计算性能，偏偏遇上摩尔定律放缓的时代，而类脑芯片、量子计算距离实现又太远，新式存储技术在磨刀多年后，遇上设备材料实现突破，正好可以赶上万物互连、海量数据计算的时代，上战场打仗。</p><p>新式存储器大规模量产之际，正好遇上国内的 3D NAND 和 DRAM 两种传统存储器要加入国际竞争舞台一搏高下之时。虽然彼此应用领域、层面相异，但凑巧地，新旧技术同样走在历史转折的一页，互相见证全球科技产业铺成的轨迹。</p><p>技术指导微信xydf321456</p><p>技术指导QQ：754634522</p>", 
            "topic": [
                {
                    "tag": "嵌入式开发", 
                    "tagLink": "https://api.zhihu.com/topics/19610823"
                }, 
                {
                    "tag": "物联网前景", 
                    "tagLink": "https://api.zhihu.com/topics/19610973"
                }, 
                {
                    "tag": "智能硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19805484"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81915540", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "STM32G0技术详解 _ SPI-RTC-ADC", 
            "content": "<p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><hr/><p>对于SPI，STM32G0和STM32F0系列一样，还实现了一些小增强。G0主要是高度可配置，而且还支持标准的同步协议，优势表现在它仅需要少数引脚、使外部组件和MCU连接简单。</p><p><b>主要特性</b></p><p>SPI支持主或从模式（支持多主和多从）、全双工、单向或半双工、支持Motorola和TI标准。</p><p>它的最小接口只需要2根线，可配置数据和时钟格式，额外的协议层支持（Tx和Rx FIFOs，DMA，CRC），具有各种中断事件及标志。</p><p><b>模块简化框图</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-995feb913464ee09d907d11be72fd82e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-995feb913464ee09d907d11be72fd82e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;366&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-995feb913464ee09d907d11be72fd82e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-995feb913464ee09d907d11be72fd82e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>从图中可以看出，SPI一共有4个I/O引脚，分别为MOSI、MISO、SCK、NSS，所有的数据都是通过特定的接口传送到接收或者发送缓冲区，然后控制部分可以通过配置启用或者禁用。</p><p><b>SPI节点互联</b></p><p>1、<b>支持各种主-从互联</b></p><p>主控时钟提供时钟，数据可以在两个方向上并行交换。</p><p><b>全双工模式</b>：主和从发送器可以同时发送和接收数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-71d29e7afcaafb1c4241c81df34fac37_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"505\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"505\" data-original=\"https://pic4.zhimg.com/v2-71d29e7afcaafb1c4241c81df34fac37_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;505&#39; height=&#39;236&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"505\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"505\" data-original=\"https://pic4.zhimg.com/v2-71d29e7afcaafb1c4241c81df34fac37_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-71d29e7afcaafb1c4241c81df34fac37_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>单向模式</b>：一个节点是发送器而另一个节点是接收器。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fa8f318f006cc187badb08324d46f4bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-fa8f318f006cc187badb08324d46f4bc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;121&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-fa8f318f006cc187badb08324d46f4bc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fa8f318f006cc187badb08324d46f4bc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>半双工模式</b>：主设备和从设备同步交替进行数据发送和接收，主从设备共用一条线进行数据传              输。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a6245582efba4a7d1b490b11d790f65b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic4.zhimg.com/v2-a6245582efba4a7d1b490b11d790f65b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;501&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"501\" data-original=\"https://pic4.zhimg.com/v2-a6245582efba4a7d1b490b11d790f65b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a6245582efba4a7d1b490b11d790f65b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2、<b>支持多主的拓扑结构</b></p><p>多主：两个具有主控功能的节点。</p><p>  当总线处于空闲状态时，节点默认处于从机模式；</p><p>  当处理通信会话时，节点将自身切换到活动主节点以临时获取总线的控制权；</p><p>  从选择引脚用作输入以检测潜在的总线冲突。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-473e94e2bc1b39f6a11b576bf9a09920_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-473e94e2bc1b39f6a11b576bf9a09920_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-473e94e2bc1b39f6a11b576bf9a09920_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-473e94e2bc1b39f6a11b576bf9a09920_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>数据帧的大小支持从4位到16位，可以设置是高位优先或低位优先，还可以设置空闲时极性是高电平还是低电平，在奇数或者偶数边沿进行采样。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f6de87a29dc9e0d0d30b3e587f62fcf0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"486\" data-original=\"https://pic1.zhimg.com/v2-f6de87a29dc9e0d0d30b3e587f62fcf0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;486&#39; height=&#39;353&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"486\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"486\" data-original=\"https://pic1.zhimg.com/v2-f6de87a29dc9e0d0d30b3e587f62fcf0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f6de87a29dc9e0d0d30b3e587f62fcf0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>SPI支持封包模式，可以将多个数据一起存入FIFO，可以配置FIFO阈值，并且支持DMA访问，这样可以减少中断产生的次数，有效降低CPU负载。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3fa5683928ea6d4f04b95d4f1b7cd844_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-3fa5683928ea6d4f04b95d4f1b7cd844_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;178&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"178\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-3fa5683928ea6d4f04b95d4f1b7cd844_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3fa5683928ea6d4f04b95d4f1b7cd844_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMA处理的优势：</b></p><p>   确定数量的数据事务事件；</p><p>  传输结束后会进行CRC自动添加/检查，还可以进行FIFO阈值控制。</p><p><b>CRC</b>是用于独立计算接收和发送的数据流，样式在事务结束时发送，发送器将CRC结果直接发到数据移位寄存器中，接收方将CRC存储在Rx FIFO中，并将该值与内部计算进行比较。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a217bb671bfd290725b0b24e6771288e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a217bb671bfd290725b0b24e6771288e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;222&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a217bb671bfd290725b0b24e6771288e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a217bb671bfd290725b0b24e6771288e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>NSS输入支持硬件或软件进行配置，从模式可以选择哪个从是激活的，主模式可以处理主主之间的冲突</p><p>NSS输出可以选择激活的从，可以设置特定的模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5cfc532484a8bb5387aa41284c29e8d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-5cfc532484a8bb5387aa41284c29e8d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;251&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-5cfc532484a8bb5387aa41284c29e8d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5cfc532484a8bb5387aa41284c29e8d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>SPI的中断事件</b></p><p>发送FIFO就绪：当TxFIFO就绪准备接受新数据时置位；</p><p>接受FIFO就绪：当数据被RxFIFO接受到了时置位；</p><p>主模式出错：当在多主总线配置下检测到总线冲突的时候置位；</p><p>数据溢出错误：接收方由于RxFIFO已满不能再接收下一个数据时置位；</p><p>TI帧格式出错：NSS信号与数据格式不对应</p><p>当达到FIFO阈值时，可以间接触发DMA请求。</p><p><b>低功耗模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8e79c80f6ca110df12ff680b8a28c9cb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-8e79c80f6ca110df12ff680b8a28c9cb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;249&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-8e79c80f6ca110df12ff680b8a28c9cb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8e79c80f6ca110df12ff680b8a28c9cb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>性能</b></p><p>SPI的理论通信速率限制为PCLK/2，真实的通信速率取决于SPI总线容性负载（设备的连接数目，输入电容，线缆的长度）、GPIO内部参数（其配置，VDD电平和环境温度）、SPI时钟信号占空比、软件处理连续数据流的能力。</p><p>真实性能：主模式下最大速率-40MHz；</p><p>  从模式下最大速率-24MHz。</p><p><b>RTC模块</b></p><p><b>RTC与STM32F0的区别：</b></p><p>1、RTC的实现与STM32F0相同，有些轻微的改进；</p><p> 2、STM32G0具有2个闹钟A和B，STM32F0只有闹钟A；</p><p> 3、STM32G0将Tamper IP与RTC分开，在STM32F0上Tamper仍然是RTC IP的一部分。</p><p>G0的RTC在所有低功耗模式下都提供带有报警的超低功耗硬件日历，属于电池备份域，因</p><p>此在主电源关闭时仍然保持功能，并且TAMP外设具有备份寄存器和篡改检测功能。</p><p><b>运用优势</b>：超低功耗-290 nA在1.8V；</p><p>  硬件BCD日历可以降低软件负载。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-aa0b65d29ed5c1841bb6862cdca0e406_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"634\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-aa0b65d29ed5c1841bb6862cdca0e406_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;475&#39; height=&#39;634&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"634\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"475\" data-original=\"https://pic3.zhimg.com/v2-aa0b65d29ed5c1841bb6862cdca0e406_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-aa0b65d29ed5c1841bb6862cdca0e406_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>主要特性：</b></p><p>  BCD格式的亚秒，秒，分，时，工作日，日期，月，年；</p><p>  动态可编程且夏令时补偿；</p><p>  2个可编程闹钟，具有唤醒中断功能；</p><p>  具有可编程时间间隔的周期性中断，可触发唤醒中断；</p><p>  参考时钟源（50或60Hz）可用于加强日历的精确度；</p><p>  数据校准电路可实现0.95 ppm的精度；</p><p>  用于事件保存的时间戳功能，具有亚秒级精度（1个事件）。</p><p><b>ADC模块</b></p><p>ADC支持两种扫描排序方式，一种是序列器不完全配置，另一种是序列器完全配置。</p><p><b>序列器不完全配置：</b></p><p>1、序列顺序由通道号决定；</p><p> 2、序列长度可以高达19个通道；</p><p> 3、扫描序列可以是正向或反向；</p><p> 4、任何一个通道都可以放入到该序列中。</p><p><b>序列器完全配置：</b></p><p>1、在ADC_CFGR1寄存器中必须置位CHSELRMOD位；</p><p> 2、序列长度高达8个通道；</p><p> 3、序列顺序与通道号无关，任一顺序可以通过寄存器ADC_CHSELR中的</p><p>      SQ1[3:0]到SQ1[3:0]比特位编程；</p><p>4、该序列中只有0~14号通道可被选择；</p><p>5、如果序列器检测到SQx[3:0]的值为0’b1111，则序列器扫描的通道结</p><p>束；</p><p> 6、如果序列器没有检测到SQx[3:0]的值为0’b1111，则序列器会扫描全部8个通道。</p><p><b>模拟看门狗</b></p><p>模拟看门狗1：可以监测一个选中的通道或者所有使能的通道</p><p>模拟看门狗2和3：可以监测在ADC_AWDxCR寄存器中选中的通道。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1663606e84d0e822b478ced69268f47f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-1663606e84d0e822b478ced69268f47f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;266&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"266\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-1663606e84d0e822b478ced69268f47f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1663606e84d0e822b478ced69268f47f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>特性对比</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-fa2628985a2c81c52437dfc474557aca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"224\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-fa2628985a2c81c52437dfc474557aca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;224&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"224\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-fa2628985a2c81c52437dfc474557aca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-fa2628985a2c81c52437dfc474557aca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "SPI", 
                    "tagLink": "https://api.zhihu.com/topics/19890005"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81746616", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "STM32G0技术详解 _ Flash", 
            "content": "<p>这篇文章给大家介绍一下<b>STM32G0的FLASH</b>模块。</p><p>STM32G0是支持指令缓存的，有16个字节的指令缓存，OTP区有1K字节，支持快速烧录、PCROP+安全存储区域和ECC纠错，安全存储区域目前只在H7和G0两个系列中存在。</p><p>STM32G0一个bank就嵌入了高达128KB的FLASH。FLASH接口管理所有访问存储保护，安全和选项字节编程。</p><p><b>运用优势</b>：高性能低功耗、小的擦除粒度、短的烧录时间、安全和保护。</p><p><b>主要特性</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>单bank高达128K字节；</p><p>2K字节的页面粒度；</p><p>快速擦除（22ms）和快速烧录时间（85µs双字）；</p><p>预取指和指令缓存；</p><p>ECC纠错：每64位双字就有8位纠错码对应</p><p>  单错误检测和纠错</p><p>  双错误检测会产生一个NIMI中断</p><p><b>FLASH的组织结构</b>如下：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  一个主内存块包含64个页面，每个页面2K字节；</p><p>  一个信息块包含：</p><p>  为ST bootloader保留的系统内存</p><p>  OTP（一次性可编程）1K字节（128双字）用于用户数据</p><p>  OTP区域中的数据无法擦除，只能写入一次</p><p>  选项字节用于用户配置；</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bb29d0362743f93f1ebe19e06190d540_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-bb29d0362743f93f1ebe19e06190d540_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-bb29d0362743f93f1ebe19e06190d540_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bb29d0362743f93f1ebe19e06190d540_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>闪存保持</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a3d9aa47e098c05ac32574e3cd793c42_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a3d9aa47e098c05ac32574e3cd793c42_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a3d9aa47e098c05ac32574e3cd793c42_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a3d9aa47e098c05ac32574e3cd793c42_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FLASH加速器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9fa2c39929b4b7ecc0552ca197e8afb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-9fa2c39929b4b7ecc0552ca197e8afb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-9fa2c39929b4b7ecc0552ca197e8afb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9fa2c39929b4b7ecc0552ca197e8afb2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>黑色线最下面表示的是预取指关闭、cache关闭，它的性能是最低的；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>蓝色线是预取指打开、cache打开的情况，它的性能是最好的。</p><p>由于预取指和缓存的关系，FLASH性能几乎和频率呈线性关系，在缓存和预取指都打开的情况下是支持2.23 CoreMark/MHz。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-4198760404e60bcc86cbee59d175f70e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-4198760404e60bcc86cbee59d175f70e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"147\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-4198760404e60bcc86cbee59d175f70e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-4198760404e60bcc86cbee59d175f70e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FLASH保护</b></p><p><b>读保护</b>：当从SRAM启动或者选择Bootloader时，禁止通过调试接口（SWD）去访问FLASH/SRAM/备份寄存器。</p><p><b>专有代码保护</b>：2个区域512字节粒度，用于保护特定代码区域免受任何读取或写入访问，代码只能被执行。</p><p><b>写保护</b>：2个区域2K字节粒度，用于保护特定代码区域免受不必要的写访问和擦除。</p><p><b>安全存储区域</b>：激活后，对安全存储区的任何访问都将被拒绝，从而产生总线错误。</p><p><b>禁止内核调试访问</b>：在安全存储区中运行代码时，暂时停止调试访问。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d8298e4529802c4c006a008a6e34bd2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-d8298e4529802c4c006a008a6e34bd2b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;261&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-d8298e4529802c4c006a008a6e34bd2b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d8298e4529802c4c006a008a6e34bd2b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>用户选项字节</b></p><p>电源复位后，在OBL_LAUNCH位在FLASH控制寄存器中设置</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6f30a0d775116f4836719c8f873635c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-6f30a0d775116f4836719c8f873635c1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;201&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-6f30a0d775116f4836719c8f873635c1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6f30a0d775116f4836719c8f873635c1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>用户选项字节（安全性）</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3d8879cfb247a849829b315284782c85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-3d8879cfb247a849829b315284782c85_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;249&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"249\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-3d8879cfb247a849829b315284782c85_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3d8879cfb247a849829b315284782c85_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Boot配置</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ac08c5275203933e6d9acb476c512837_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"199\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ac08c5275203933e6d9acb476c512837_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;199&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"199\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ac08c5275203933e6d9acb476c512837_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ac08c5275203933e6d9acb476c512837_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>BOOT_LOCK强制从Main FLASH启动，并且无论启动选项如何配置都可以强制从Main FLASH</p><p>启动。</p><p><b>中断</b></p><p>当出现操作结束、操作出错、读保护错误、写保护错误、大小错误、烧录序列错误等的时候</p><p>都会产生中断事件。</p><p>操作结束：当一个或多个闪存操作（烧录/擦除）成功完成时由硬件置位。</p><p>操作出错：当一个闪存操作（烧录/擦除）没有成功完成时由硬件置位。</p><p>读保护错误：当要读取的数据属于读保护的区域时（PCROP保护）由硬件置位。</p><p>写保护错误：当要擦除/烧录的地址属于闪存的写保护区域时（通过WRP、PCROP或RDP level 1设置），由硬件置位。</p><p>大小错误：当烧录或快速烧录序列中访问的大小时字节或半字时由硬件置位，只允许双字编</p><p>程。</p><p>烧录序列错误：当要烧录的双字地址在烧录之前包含与“0XFFFF FFFF”不同的值时，由硬件置位，除非要写入的数据位“0x0000 0000”。</p><p>烧录对齐错误：在标准烧录的情况下，如果要烧录的数据不能包含在相同的双字闪存中或者在快速烧录期间页面发生变化时由硬件设置置位。</p><p>快速烧录期间数据丢失错误：当新数据没有及时出现时，MISSERR位由硬件设置置位。</p><p>快速烧录错误：当快速烧录序列（由FSTPG激活）由于错误而被中断时由硬件设置置位。</p><p>ECC纠错：检测到并纠正1个ECC错误时由硬件设置置位。</p><p>ECC检测：检测到2个ECC错误时由硬件设置置位。</p><p>  ECC检测出错时会产生一个不可屏蔽的中断。</p><p><b>低功耗模式</b></p><p>FLASH接口时钟可以在Run/LP Run/Sleep /LP Sleep模式下关闭，FLASH时钟的配置是在RCC寄存器，它默认是使能的。</p><p>在LP Sleep，LP Run和Stop模式，FLASH可以配置为Power-down模式。</p><p>各个低功耗模式下FLASH的状态</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef270e79a203b1189023a4f590dad883_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ef270e79a203b1189023a4f590dad883_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ef270e79a203b1189023a4f590dad883_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef270e79a203b1189023a4f590dad883_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>登录电堂网站观看更多相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "Flash 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19728072"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81388733", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "有奖活动 | STM32全国巡回研讨会直播，招募【宣传大使】！", 
            "content": "<p><i><b>引言  </b></i></p><p class=\"ztext-empty-paragraph\"><br/></p><p>自2007年以来，<u><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b></u>在12年间，每年都走进不同的城市，为开发者诠释产品和生态的创新性演进及未来设想。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>今年，在9月17日至27日期间，更是走进13大城市，与蝶粉面对面现场互动。此外，更在<b>9月27日</b>安排了<b>上海站研讨会的全程直播</b>，惠及无法参与线下研讨会的老铁。点击蓝字预约直播【<b><u><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></u></b>】，线上直播多重大奖等你赢取！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-thumbnail=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-thumbnail=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.gif\"/></figure><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2007年，STM32问世时的初心</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如今，依旧坚守</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"626\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;626&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"626\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>回顾STM32的发展史，产能快速增长的同时，垂直应用产线也不断延展。2019年，更是以全新的姿态切入MPU和AI领域。今年，让我们一起拭目以待，人工智能大趋势下，STM32如何AI你的应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><h3><b> STM32全国研讨会将重点宣讲：</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>STM32高性能产品延展至Cortex-A内核产品</li><li>STM32蓝牙无线产品量产发布</li><li>STM32高性能模拟产品及入门型产品</li><li>STM32生态系统新成员（Cube.AI、TouchGFX…）</li><li>携手合作伙伴，呈现多样化的创新产品及落地方案</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;459&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>直播日程（9月27日）</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;936&#39; height=&#39;606&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"936\" data-original=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群与专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "研讨会", 
                    "tagLink": "https://api.zhihu.com/topics/20040994"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81384425", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 16, 
            "title": "【STM32 TALK】电机控制私享会实录（上） - 电机控制的基本实现", 
            "content": "<p>有一本名为《刻意练习》的书，不知大家是否读过？这本书是“唯天才论”的否定者，同时也认为被追捧的“一万小时法则”过于简单化、概念化，并不可靠。书中反复强调，要想在某个领域成为资深高手，无不来自<b>刻意练习</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>刻意练习并不复杂，总结其关键词：<b>目标明确，专注投入，及时反馈，不断挑战舒适区，找到行业优秀导师，强化动机，坚持练习</b>。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>喝完鸡汤，我们来说说举办<b>【STM32 TALK】</b>的初衷，这是一个处处渗透刻意练习理念的小型技术活动。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【STM32 TALK】是依托STM32现有合作伙伴及大学计划搭建的泛生态资源分享、学习、应用平台，采取闭门交流碰撞、共享实战智慧的私享会方式，助力参会者资源协同最大化。</b>私享会计划每月选取不同城市、从多维度考量与会工程师，定向邀请分享嘉宾，并选取热点应用进行主题分享讨论。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>定位：小型   深度   干货</b><br/></p><p><b>愿景：融合+共赢+互助+分享</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>8月30日，电堂协助ST举行了第一期“<b>电机应用私享会</b>”，有幸邀请到业内20余位资深工程师、高校老师、ST原厂技术大咖参与了闭门交流讨论。会中，不仅交流了彰显时代特征的多样化电机应用方向、丰满了电机控制思路，还探讨了精、坚、深的调试经验与技巧。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5ad8df715dd84b7400f2602aa8250df5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-5ad8df715dd84b7400f2602aa8250df5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;716&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-5ad8df715dd84b7400f2602aa8250df5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5ad8df715dd84b7400f2602aa8250df5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f495ddbc4939b2b5d9d1325c8b1e1d69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f495ddbc4939b2b5d9d1325c8b1e1d69_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;720&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f495ddbc4939b2b5d9d1325c8b1e1d69_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f495ddbc4939b2b5d9d1325c8b1e1d69_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f032ae7e65b3951cc8d4384e5b0bce27_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"724\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-f032ae7e65b3951cc8d4384e5b0bce27_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;724&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"724\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-f032ae7e65b3951cc8d4384e5b0bce27_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f032ae7e65b3951cc8d4384e5b0bce27_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-22846bd752a6aae0b62fcd7fc1b041c7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-22846bd752a6aae0b62fcd7fc1b041c7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;742&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-22846bd752a6aae0b62fcd7fc1b041c7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-22846bd752a6aae0b62fcd7fc1b041c7_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a258e0a039b04a12da6684576445666e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a258e0a039b04a12da6684576445666e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a258e0a039b04a12da6684576445666e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a258e0a039b04a12da6684576445666e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本次私享会内容分为两部分，以上下两集方式分享给执着于电机控制开发的工程师好基友。上篇主题为<b>《电机控制的基本实现》</b>，演讲人是来自浙江大学电机系的章玮老师。章老师在浙大学习工作近30年，一直从事电机课程的教学及研究，同时具备极为丰富的项目开发经验。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>近年，很多芯片大厂都将电机控制的源代码开放出来，在极大地降低工程师的入门门槛的同时，提升了大家对电机控制的认知。在代码开放的情况下，对最终产品就提出了更高的要求，要出彩，必须有亮点。这需要我们在做电机控制时，学会一些逆向的思维。问题来了，亮点如何产生呢？有些人会强调产品的难点，比如启动的时候怎么防失步、怎么切换，达到高速后怎么烧管子等等，这些问题最后会决定一个产品的成败。此外，还要考虑低速大力矩，或者高速应用，以及各项参数的精度。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电动机的分类</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>电机的种类有很多种，发展速度也很快，当我们要用到某种电机时，首先需要研究一下它到底是怎样一种电机。下面的图片列出了比较常用的几种电机。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a0d220c58e328913823b0949b3072c89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic2.zhimg.com/v2-a0d220c58e328913823b0949b3072c89_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;830&#39; height=&#39;468&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"830\" data-original=\"https://pic2.zhimg.com/v2-a0d220c58e328913823b0949b3072c89_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a0d220c58e328913823b0949b3072c89_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在开关磁阻电机、同步磁阻电机和混合励磁电机等，都很新颖，大家关注很多。在这么多的电机里，如何将我们的控制思想贯彻进去？在实施前，对电机需要有认真的研究和考量。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电机控制实施前的准备</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>各类新型电机</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-94efc133d592e36b820bb97828248ac9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"183\" class=\"content_image\" width=\"288\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;288&#39; height=&#39;183&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"288\" data-rawheight=\"183\" class=\"content_image lazy\" width=\"288\" data-actualsrc=\"https://pic2.zhimg.com/v2-94efc133d592e36b820bb97828248ac9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6283a971bb34df3556f5b0df9f2087e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"174\" class=\"content_image\" width=\"279\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;279&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"279\" data-rawheight=\"174\" class=\"content_image lazy\" width=\"279\" data-actualsrc=\"https://pic3.zhimg.com/v2-6283a971bb34df3556f5b0df9f2087e2_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b072bb05354b8377c45f7584b4faf138_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"281\" data-rawheight=\"176\" class=\"content_image\" width=\"281\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;281&#39; height=&#39;176&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"281\" data-rawheight=\"176\" class=\"content_image lazy\" width=\"281\" data-actualsrc=\"https://pic1.zhimg.com/v2-b072bb05354b8377c45f7584b4faf138_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f3590f5af164237330816db8d41f12d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"284\" data-rawheight=\"182\" class=\"content_image\" width=\"284\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;284&#39; height=&#39;182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"284\" data-rawheight=\"182\" class=\"content_image lazy\" width=\"284\" data-actualsrc=\"https://pic3.zhimg.com/v2-f3590f5af164237330816db8d41f12d2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电机的运行原理</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于上面非常新颖的电机，我们可以先从运行原理来分析它是<b>单端口还是双端口</b>，即思考它有哪些量是可以控制的，比如异步电机是一个单端口的，所有有功无功的量都是从三根线进去的；而永磁电机、绕线式异步电机、双馈电机、混合励磁电机都是双端口的，可以有不同的方向进入控制的参数。然后就可以确定有哪些量可以影响电机的转速或者转矩，从而确定了对电机控制的途径。</p><p>其次，在对电机的端口做了判断之后，它的磁场是<b>步进式的还是旋转式的</b>，比如无刷直流电机方波的是步进式的；开关磁阻电机也是步进式的；永磁同步电机和同步磁阻电机都是旋转式的。步进式和旋转式反映到转矩生成上面波形也是不一样的。了解了这些特点，我们就对电机控制的方法有了思路。</p><p>然后看<b>电机的稳态性能和动态性</b>能跟哪些参数有关。</p><p>以上三点，<b>对于一个电机工程师来说都是必须要掌握的。</b></p><p><b>电机的控制目标</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>根据动态响应和稳态的要求来<b>确定控制目标是转速控制、转矩控制还是功率控制</b>，比如恒压泵都是恒功率的控制，所以就要着重看它的功率特性。再比如转速控制是双环，对转速动态的要求是怎样的？如果对转速要求不高，可以考虑去掉转速环。<br/></p><p><b>电机的控制方式</b></p><p>电机的控制方式分为<b>标量控制、矢量控制和直接转矩控制</b>，对应于控制目标。</p><p>异步电机以前大量使用标量控制，为了让它动态响应快，换成了矢量控制，而且异步电机不存在失步的问题，因为它是感应电机，存在转差率，可进行功率的自动调整。</p><p>而为什么同步电机控制最关心的一点是会不会失步呢？做的不好就会失步，失步的表现就是电流很大导致功率管烧掉。同步电机会失步的原因在于它的两个磁场是独立的，一个磁场（电枢磁场）在前面走，后面的磁场（转子磁场）如果没跟上来，转一圈，电压向量和电势向量夹角超过90度，进入不稳定区域。所以同步电机的控制关键之处在于会涉及到两个磁场，但在低成本的情况下，一般用途的同步电机也可以用标量控制；但是在转矩变动很大的时候，就会烧电机。这是因为异步电机有转差率在自动调整，而同步电机在用标量控制的时候，不能简单的把标量控制用到永磁同步电机里面，而是要去构造一个约束条件，类似于异步电机的转差率的一个调整参数，对同步电机的功率角进行调节。如果能把自动调节的量放到同步电机里面，从而解决同步电机的失步问题，确保电机能够先运行起来，再去考虑电机的高效运行问题。</p><p>在拿到一个对象之后，要对转子位置做一个判断，位置的判断分为低速、中速和高速三段。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们一般是顺向的启动，要控制电机首先要知道转子的位置，然后加一个Iq，知道Dq，再进行一些其他操作。那我们能不能逆向来思考呢？顺向的东西有很多途径可以给我们提供，那产品想要更好的话，可能就要逆向。转子位置会影响电机的电流电压，电机的转矩、功率、电流都包含了电机所有参数的影响。所谓的逆向就是从这些参数中去提炼所需要的位置，用比较时髦的话就叫做观测器，滑膜观测和卡尔曼观测器都是通过电流电压反过来去观测它的位置。</p><p>在运行过程中会特别关注以下问题：低速启动、防失步、风吹的顺风逆风的启动，对于风机和泵来说，还要考虑堵转情况下如何启动？</p><p>对于行走的机器来说，如割草机，会涉及到什么呢？对于边界怎么处理；还有两个电机的协同和转矩的分配，怎么走直线；另外这种行走的机器会有堵转的问题，有时候是真的堵转，有的时候是假的堵转，真堵转和假堵转的差别就依赖于电机的运行；还有路径规划。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>开关磁阻电机在很多领域已经很受人关注了，比如油田对电机的启动转矩和制动转矩的要求特别高，就会考虑用开关磁阻电机。做磁阻电机时，会涉及到怎么判断角度，在没有位置的时候，对于开关磁阻电机无位置传感器的东西怎么进行，还有开关磁阻电机怎样提高电流的采样精度。</p><p><b>分享几个波形</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0cdbd170e8d54824e75a3afbd9f27446_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb\" width=\"616\" data-original=\"https://pic3.zhimg.com/v2-0cdbd170e8d54824e75a3afbd9f27446_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;616&#39; height=&#39;517&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"616\" data-original=\"https://pic3.zhimg.com/v2-0cdbd170e8d54824e75a3afbd9f27446_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0cdbd170e8d54824e75a3afbd9f27446_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fc36e97a3d20ce8e6aba37c008e92ed5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"822\" data-original=\"https://pic2.zhimg.com/v2-fc36e97a3d20ce8e6aba37c008e92ed5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;822&#39; height=&#39;442&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"822\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"822\" data-original=\"https://pic2.zhimg.com/v2-fc36e97a3d20ce8e6aba37c008e92ed5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fc36e97a3d20ce8e6aba37c008e92ed5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>开关磁阻电机最大的问题是它的电流波形和旋转磁场的电流波形完全不一样，是脉冲式的电流波形，所以得到的转矩是波动的。开关磁阻电机可设计成三相或四相的，四相会平滑一点。开关磁阻电机以前的做法都是有位置的，有位置就要加霍尔，还要加光电编码器，知道了位置之后来切换a相b相c相。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>无位置开关磁阻电机是通过电机内部的磁场对电流饱和的影响判断出转子大概在哪个扇区以及什么位置，然后进行控制。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-49434eb2af06064f8c18646c68427573_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-49434eb2af06064f8c18646c68427573_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;562&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"562\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-49434eb2af06064f8c18646c68427573_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-49434eb2af06064f8c18646c68427573_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>常见问题</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后分享一下做控制程序中的常见问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>控制中最大的问题是<b>嵌入式C语言的编写</b>经常会出问题。新手在编程时，特别对于一个溢出和数制之间的自动变换，往往会出现一个bug，也就是程序看起来是对的，但运行以后发现不是我们要的结果。<br/></p><p>另一个问题是<b>标么值的使用</b>。我们的程序中往往都会采用一些标么值，如果峰值限定和本身两者之间没有匹配好，特别会涉及到Kp、Ki的设定，Kp、Ki太大，一直饱和运行，这个时候肯定调不出来。</p><p>还有就是<b>PI参数的调整</b>，先调P，再调I。有参数借助基本公式进行粗调，没参数学会看响应波形。只能通过多调整才能解决，调的次数多了自然就积累出经验。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "电机控制", 
                    "tagLink": "https://api.zhihu.com/topics/20142328"
                }, 
                {
                    "tag": "电机", 
                    "tagLink": "https://api.zhihu.com/topics/19667696"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81383026", 
            "userName": "李松", 
            "userLink": "https://www.zhihu.com/people/4c321c833fc0c7069dda59c720b0c385", 
            "upvote": 0, 
            "title": "什么是单片机，什么叫单片机？", 
            "content": "<p>单片机的英文称为：Single-Chip Microcomputer</p><p>单片机又称单片微控制器,它不是完成某一个逻辑功能的芯片,而是把一个计算机系统集成到一个芯片上。概括的讲：一块芯片就成了一台计算机。它的体积小、质量轻、价格便宜、为学习、应用和开发提供了便利条件。同时，学习使用单片机是了解计算机原理与结构的最佳选择。<br/>    可以说，二十世纪跨越了三个“电”的时代，即电气时代、电子时代和现已进入的电脑时代。不过，这种电脑，通常是指个人计算机，简称PC机。它由主机、键盘、显示器等组成（如图1所示）。还有一类计算机，大多数人却不怎么熟悉。这种计算机就是把智能赋予各种机械的单片机（亦称微控制器）。顾名思义，这种计算机的最小系统只用了一片集成电路，即可进行简单运算和控制。因为它体积小，通常都藏在被控机械的“肚子”里。它在整个装置中，起着有如人类头脑的作用，它出了毛病，整个装置就瘫痪了。现在，这种单片机的使用领域已十分广泛，如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机，就能起到使产品升级换代的功效，常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等。现在有些工厂的技术人员或其它业余电子开发者搞出来的某些产品，不是电路太复杂，就是功能太简单且极易被仿制。究其原因，可能就卡在产品未使用单片机或其它可编程逻辑器件上。</p><p>　　可以说，二十世纪跨越了三个“电”的时代，即电气时代、电子时代和现已进入的电脑时代。不过，这种电脑，通常是指个人计算机，简称PC机。它由主机、键盘、显示器等组成（如图1所示）。还有一类计算机，大多数人却不怎么熟悉。这种计算机就是把智能赋予各种机械的单片机（亦称微控制器，如图2所示）。顾名思义，这种计算机的最小系统只用了一片集成电路，即可进行简单运算和控制。因为它体积小，通常都藏在被控机械的“肚子”里。它在整个装置中，起着有如人类头脑的作用，它出了毛病，整个装置就瘫痪了。现在，这种单片机的使用领域已十分广泛，如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机，就能起到使产品升级换代的功效，常在 产品名称前冠以形容词——“智能型”，如智能型洗衣机等。现在有些工厂的技术人员或其它业余电子开发者搞出来的某些产品，不是电路太复杂，就是功能太简单且极易被仿制。究其原因，可能就卡在产品未使用单片机或其它可编程逻辑器件上。<br/>    单片机的应用领域 ：<br/>    1.单片机在智能仪器仪表中的应用；<br/>    2.单片机在工业测控中的应用；<br/>    3.单片机在计算机网络和通讯技术中的应用；<br/>    4.单片机在日常生活及家电中的应用；<br/>    5.单片机在办公自动化方面。<br/>    目前单片机渗透到我们生活的各个领域，几乎很难找到哪个领域没有单片机的踪迹。导弹的导航装置，飞机上各种仪表的控制，计算机的网络通讯与数据传输，工业自动化过程的实时控制和数据处理，广泛使用的各种智能IC卡，民用豪华轿车的安全保障系统，录象机、摄象机、全自动洗衣机的控制，以及程控玩具、电子宠物等等，这些都离不开单片机。更不用说自动控制领域的机器人、智能仪表、医疗器械了。因此，单片机的学习、开发与应用将造就一批计算机应用与智能化控制的科学家、工程师。</p><p>单片机的芯片图片：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e09b6f973bf93b23856784e717d13a37_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"134\" data-rawheight=\"111\" class=\"content_image\" width=\"134\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;134&#39; height=&#39;111&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"134\" data-rawheight=\"111\" class=\"content_image lazy\" width=\"134\" data-actualsrc=\"https://pic4.zhimg.com/v2-e09b6f973bf93b23856784e717d13a37_b.png\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "单片机", 
                    "tagLink": "https://api.zhihu.com/topics/19577755"
                }, 
                {
                    "tag": "嵌入式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19565752"
                }, 
                {
                    "tag": "智能硬件", 
                    "tagLink": "https://api.zhihu.com/topics/19805484"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/81108495", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "STM32 IAR 优化选项介绍", 
            "content": "<p></p><p>这篇文章给大家介绍一下<b>STM32 IAR优化选项</b>的设置</p><p>IAR优化选项包括：<b>无优化</b>、<b>低等级优化</b>、<b>中等优化</b>、<b>高等优化</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-00b555b7b6e517c957f43cffb399ba4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"493\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-00b555b7b6e517c957f43cffb399ba4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;493&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"493\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-00b555b7b6e517c957f43cffb399ba4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-00b555b7b6e517c957f43cffb399ba4d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-14f47ee795ddef6334ec1145452196a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-14f47ee795ddef6334ec1145452196a6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;390&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-14f47ee795ddef6334ec1145452196a6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-14f47ee795ddef6334ec1145452196a6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>公共子表达式压缩</b></p><p>公共子表达式压缩是较为常见的优化方式，这种方式既可以较少代码的大小，也可以缩短运行的时间，编译器可能会根据代码上下文产生更加复杂的优化结果，比如对数组或矩阵进行访问时，需要的数组索引计算，有的时候代码中可能会使用大量的宏，虽然在代码中比较简洁，但也可能在代码中产生很多重复计算，编译器使用这种优化也会有很好的结果。</p><p>在公共子表达式压缩优化中，不仅会使用寄存器，也有可能会使用在内存中的临时变量，但是因为部分代码的执行被优化，所以优化后的代码可能会比较难进行调试。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-90a6d5cd02e6fe822bae9cca341ac746_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb\" width=\"470\" data-original=\"https://pic3.zhimg.com/v2-90a6d5cd02e6fe822bae9cca341ac746_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;470&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"470\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"470\" data-original=\"https://pic3.zhimg.com/v2-90a6d5cd02e6fe822bae9cca341ac746_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-90a6d5cd02e6fe822bae9cca341ac746_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>循环展开</b></p><p>循环展开是在编译时已确定需要循环的次数，将循环体展开，来降低每次循环循环体外的运算开销。</p><p>这种优化适用于小循环，因为小循环的循环体外运行开销比重比较大，降低循环次数会明显提高整体的执行效率。显然，这种循环的展开会增加代码的大小，但是编译器会多次进行试探性编译，然后计算编译后代码的执行速度和大小，并根据用户的选择来决定如何进行优化。同样，优化后的代码与原来的代码有很大的不同，也会造成调试上的困难。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7a40c5184df8f24d7623eb2616cb4b8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb\" width=\"461\" data-original=\"https://pic3.zhimg.com/v2-7a40c5184df8f24d7623eb2616cb4b8a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;461&#39; height=&#39;165&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"461\" data-original=\"https://pic3.zhimg.com/v2-7a40c5184df8f24d7623eb2616cb4b8a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7a40c5184df8f24d7623eb2616cb4b8a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>函数内联</b></p><p>函数内联可以减少函数调用时产生的运行开销，缩短执行时间，但可能会增加代码的大小，一般情况下，选择代码量优先时使用该优化不会增加代码的大小。</p><p>是否进行函数内联优化取决于编译器进行的试探性编译。</p><p>同样，优化后的代码可能比较难进行调试。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-953a2dcd82dc71a3b4ae5861de7ea8f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"422\" data-original=\"https://pic2.zhimg.com/v2-953a2dcd82dc71a3b4ae5861de7ea8f1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;422&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"422\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"422\" data-original=\"https://pic2.zhimg.com/v2-953a2dcd82dc71a3b4ae5861de7ea8f1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-953a2dcd82dc71a3b4ae5861de7ea8f1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>循环不变量外提</b></p><p>在许多循环中，通常有一些表达式或运算的结果在循环中是不会改变的，那么这部分内容可以将其转移到循环外部，就可以节省许多循环的工作量。</p><p>这种优化通常既可以节省代码空间，也可以提高运行的效率，但同样会导致优化后的代码比较难进行调试。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e76f3a4bfd402f9d732af411a2146032_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic3.zhimg.com/v2-e76f3a4bfd402f9d732af411a2146032_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;458&#39; height=&#39;120&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"120\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"458\" data-original=\"https://pic3.zhimg.com/v2-e76f3a4bfd402f9d732af411a2146032_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e76f3a4bfd402f9d732af411a2146032_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>基于类型的别名分析</b></p><p>当两个或者更多的指针访问同一个地址时，其中任意一个变量或者指针就称为其他变量或者指针的别名变量。</p><p>如果程序中存在别名变量，会使程序优化变得非常困难，因为在编译时不可能知道一个指定地址上的数据是否被改变了。</p><p>基于别名分析的优化，假设所有访问都是基于被访问对象所声明的类型，这样可以由编译器来判断是否有多个指针访问了同一块存储区。</p><p>对于标准C或者C++程序，这种优化可以减少代码的大小，降低执行时间。</p><p>对于非标准的C或者C++程序，可能会导致生成错误的代码。</p><p><b>静态变量重组</b></p><p>一般情况下，全局和静态变量的位置是根据编译器编译的先后次序进行分配。使用静态变量重组优化后，同一模块中的静态和全局变量会被重新组织，尽量靠近在一起，这样编译器就可以使用同一个机制来访问多个变量。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-45b5ad355ff3440d307ee6473193c816_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-45b5ad355ff3440d307ee6473193c816_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;504&#39; height=&#39;262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"504\" data-original=\"https://pic3.zhimg.com/v2-45b5ad355ff3440d307ee6473193c816_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-45b5ad355ff3440d307ee6473193c816_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>指令规划</b></p><p>合理的汇编指令规划能够有效发挥处理器的处理能力，能够将资源访问冲突导致的流水线等待降到最低。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-84907fcfe94575551f0c1de476a651b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"513\" data-original=\"https://pic3.zhimg.com/v2-84907fcfe94575551f0c1de476a651b2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;513&#39; height=&#39;238&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"513\" data-original=\"https://pic3.zhimg.com/v2-84907fcfe94575551f0c1de476a651b2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-84907fcfe94575551f0c1de476a651b2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>其他代码优化</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3a45b089d309b1824b3173f69d2e02af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3a45b089d309b1824b3173f69d2e02af_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-3a45b089d309b1824b3173f69d2e02af_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3a45b089d309b1824b3173f69d2e02af_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>优化选项调整的次序：从低级到高级，从部分到全局。</p><p>在程序设计中，如果对个别等级的函数需要进行精确的优化调整，可以使用预处理命令，单独定制函数的优化选项。</p><p>有些时候在进行读写共享变量、读写外设寄存器端口或者运行存在副作用的其他操作时，不希望编译器进行调整运算或赋值次序、删除认为没有作用的代码、将变量分配在通用寄存器里等等这些优化操作，那么可以使用volatile对所要操作的对象进行声明。</p><p><b>一般可以在以下情况使用volatile</b></p><ul><li>对象的值会在编译器不知道的情况下发生改变，例如外设寄存器的值发生改变；</li><li>程序进行的操作具有副作用，例如连续读或写某外设寄存器两次，硬件上具有特定的意义；</li><li>有多个程序共享被操作的对象，例如操作系统中的多个任务，主程序和中断服务程序。</li></ul><p>使用volatile后，被声明的变量不会被分配在通用寄存器中，程序对这些变量的访问次序也不会被编译器改变，对变量的访问不会被删除。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80909620", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "ClassB ST MCU相关故障检测方法库", 
            "content": "<p>这篇文章给大家介绍一下<b>IEC60335 Class B ST MCU软件库</b>。</p><p>首先，我们要知道什么是软件评估。<b>软件评估</b>是对软件运行时的风险控制措施进行评估，目的是为了确保电器的使用安全。</p><p>软件评估的内容并不是单独地看软件本身，它需要从软件整体的角度来分析系统存在的风险和软件相关的风险，所以它包括了对系统设计、硬件结构和软件结构的综合检查，还包括对整个软件开发过程的评估。</p><p>Class B主要针对家用电器，如果家用电器中使用了MCU，并且MCU承担了部分或者全部的安全保护功能，那就需要进行软件评估；而如果MCU仅仅实现产品的功能，安全保护由硬件进行，那这类家电不需要进行软件评估。</p><p><b>Class B软件库的结构</b></p><p>Class B程序分为两个部分，<b>启动时的自检</b>和<b>运行时的自检</b>。</p><p>启动时在进行系统初始化之前，会对所有用到的片上资源做一个整体检测，包括看门狗自检、CPU寄存器自检、FLASH功能自检、系统时钟自检、控制流自检。</p><p>在运行时是周期性的对和安全相关的资源进行检查。</p><p>下图显示了启动时的自检流程和检测程序在整个程序中的位置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0707db3efaa40ee1e9f4cf678b0bff54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-0707db3efaa40ee1e9f4cf678b0bff54_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;237&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-0707db3efaa40ee1e9f4cf678b0bff54_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0707db3efaa40ee1e9f4cf678b0bff54_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在程序运行时，通过timer产生一个周期定时中断，启动run time自检，执行run time自检前必须调用STL_InitRun TimeChecks()进行初始化。对RAM的检测，在周期定时中断服务程序里进行。除了对RAM的检测，其他的都在主循环里进行。</p><p><b>CPU寄存器故障</b></p><p>在标准中，对CPU寄存器故障的定义是滞位故障，就是指寄存器的某一位或几个位总是为0或者1，故障状态固定不变。</p><p>在检测时，我们采用的是Checkerboard棋盘存储器检测方式，将0或1分别写入要检测的单元，然后读出，看结果是否正确。棋盘检测对写入被检测区域的数据的要求是每个单元与其紧邻的单元的值都必须不同，我们一般采用的是55AA。</p><p>下图是STM32启动时和运行时分别检测了哪些</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bdd58baa6b417c702e6d6648297802b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"466\" data-original=\"https://pic1.zhimg.com/v2-bdd58baa6b417c702e6d6648297802b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;466&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"466\" data-original=\"https://pic1.zhimg.com/v2-bdd58baa6b417c702e6d6648297802b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bdd58baa6b417c702e6d6648297802b0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下图是STM8启动时和运行时分别检测了哪些</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-87eedf325361ec62babebc0453e55bd1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-87eedf325361ec62babebc0453e55bd1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;264&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-87eedf325361ec62babebc0453e55bd1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-87eedf325361ec62babebc0453e55bd1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在程序运行时还需要对堆栈溢出进行检测，就是在堆栈的边界位置定义一个边界检测区，放置特殊的数值，在程序运行时，定期对该区域的数值进行检测，如果发生了变化就说明有溢出发生。</p><p><b>CPU程序计数器的故障</b></p><p>在标准中对CPU程序计数器故障的定义同样是滞位故障，可以使用的检测方法有两个，一个是独立的时间片检测，可以通过看门狗实现；另一个是程序顺序的逻辑检测。</p><p>ST芯片提供两个不同时钟源的看门狗：窗口看门狗和独立看门狗。</p><p>当PC滞位在某个位置或者跑飞时，窗口看门狗和独立看门狗可以对芯片复位。ST的Class B软件库也提供了代码，在系统启动时对窗口看门狗和独立看门狗进行检测，保证窗口看门狗和独立看门狗工作正常。</p><p>下图是检测的执行流程图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-7fe2b2d7c6b1fcc1c4a4c9a6bb83406b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"331\" data-rawheight=\"214\" class=\"content_image\" width=\"331\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;331&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"331\" data-rawheight=\"214\" class=\"content_image lazy\" width=\"331\" data-actualsrc=\"https://pic4.zhimg.com/v2-7fe2b2d7c6b1fcc1c4a4c9a6bb83406b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>ST软件库里还提供了程序控制流检测的实现方法，通过程序控制流可以检查程序是否被正确调用和完成。它的实现方法是，为每个需要检测的模块定义两个数值，这两个数值是不同而且是唯一的，然后定义两个变量来进行计数，对这两个变量分别在进入和退出每个模块时进行计数，然后在程序固定的位置对这两个变量进行检查，从而来检测所有的安全模块是否被正确调用和完成。</p><p>下图是对整个过程的示意图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-900d9e3f6ceba0eb19a4be92e79e7e3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"289\" class=\"content_image\" width=\"371\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;371&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"371\" data-rawheight=\"289\" class=\"content_image lazy\" width=\"371\" data-actualsrc=\"https://pic3.zhimg.com/v2-900d9e3f6ceba0eb19a4be92e79e7e3e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>系统时钟故障</b></p><p>系统时钟故障指的是错误的失踪频率，采用的检测方法是将时钟频率和一个独立的固定频率相比较。</p><p>下图是STM32启动时检测系统时钟的流程</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-915c41310efaf39539589028bd1b0545_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-915c41310efaf39539589028bd1b0545_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-915c41310efaf39539589028bd1b0545_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-915c41310efaf39539589028bd1b0545_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32运行时对时钟的检测方法与前面所描述的启动时是一样的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-05ef3853e95e91fcc58a5dd9f4e3d07f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-05ef3853e95e91fcc58a5dd9f4e3d07f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;236&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-05ef3853e95e91fcc58a5dd9f4e3d07f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-05ef3853e95e91fcc58a5dd9f4e3d07f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下图是STM8启动时检测时钟的流程</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0efeadd2d5587bebb2eb6850b1115d83_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-0efeadd2d5587bebb2eb6850b1115d83_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-0efeadd2d5587bebb2eb6850b1115d83_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0efeadd2d5587bebb2eb6850b1115d83_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>STM8运行时的检测也和启动时相似</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-83c141d18fef21c0a0bb8dd2048283ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-83c141d18fef21c0a0bb8dd2048283ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;286&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"286\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-83c141d18fef21c0a0bb8dd2048283ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-83c141d18fef21c0a0bb8dd2048283ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>非易失存储器——FLASH故障</b></p><p>FLASH故障指的是所有的单比特错误，通常用的是CRC检测方法。</p><p>启动时和运行时都需要对FLASH进行检测，具体的检测过程如下：</p><p>启动时的检测方法是在编译时计算整个FLASH的CRC校验值，并存储在FLASH末尾位置。启动时，用同样的算法重新计算整个FLASH的CRC校验值，并与存储在FLASH中的CRC校验值作比较。</p><p>运行时不能一次性检查完所有的FLASH，因为这样的话执行时间太长会影响应用程序的执行，所以需要对FLASH分块逐次计算出最终的CRC校验值，然后将最终结果与正确的CRC校验值作比较。</p><p>这里简单给大家介绍一下CRC校验</p><p><b>CRC校验</b>是一种对数据传输和存储中的错误检测技术，使用生成多项式对原始信息进行模二除法，得到的余数就是CRC校验码。CRC校验码和原始信息一起发送，接收方用同样的方法对数据进行计算，然后与接收到的CRC码进行比较，不相同就认为数据在传输中被破坏。</p><p><b>STM32的CRC模块</b></p><p>所有的STM32芯片都带有CRC模块，CRC模块默认使用的是CRC32多项式，部分芯片支持可编程的多项式，比如STM32F3或者是F0系列，可以对8位、16位和32位数据计算CRC值。CRC初始值默认为0xFFFFFFFF，STM32F0和STM32F3可以修改初始值，还可以通过寄存器设置对输入数据和输出数据进行位反转，在默认状态下是不对这些数据进行位反转的。</p><p><b>在IAR7.2中如何配置CRC</b></p><p>在IAR中配置CRC要做两个工作，第一是在工程选项的Checksum页面中，根据使用的CRC参数进行配置，如果使用的是CRC默认参数的话，可以按照下图进行配置</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f776624ad3c78148f389c1d4e56526a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f776624ad3c78148f389c1d4e56526a6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;221&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f776624ad3c78148f389c1d4e56526a6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f776624ad3c78148f389c1d4e56526a6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>第二个工作是要在linker文件中指定CRC在FLASH中的存储位置。</p><p><b>Keil中如何添加CRC值</b></p><p>Keil不像IAR可以很方便的支持在编译时计算CRC的值，并存储在FLASH的指定位置，它需要使用外部工具单独计算CRC的值，并手动添加代码将其放在FLASH末尾。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d243cadf3c97aadf9488601c17131188_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"454\" data-original=\"https://pic1.zhimg.com/v2-d243cadf3c97aadf9488601c17131188_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;454&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"454\" data-original=\"https://pic1.zhimg.com/v2-d243cadf3c97aadf9488601c17131188_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-d243cadf3c97aadf9488601c17131188_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-fa6fddfa9533ff81e3be7971ea88a527_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-fa6fddfa9533ff81e3be7971ea88a527_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;109&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-fa6fddfa9533ff81e3be7971ea88a527_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-fa6fddfa9533ff81e3be7971ea88a527_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>RAM故障检测</b></p><p>启动时使用March C测试，对整个RAM区进行检测。</p><p>运行时只对存储Class B变量的区域进行检测。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3421797047f1372ed29c4bb5a8fd4e3f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"197\" data-rawheight=\"216\" class=\"content_image\" width=\"197\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;197&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"197\" data-rawheight=\"216\" class=\"content_image lazy\" width=\"197\" data-actualsrc=\"https://pic4.zhimg.com/v2-3421797047f1372ed29c4bb5a8fd4e3f_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>March C算法</b></p><p>March C算法分为6步执行，它是分别按照地址递增和递减的顺序对所有的测试单元进行写0和写1的检测。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-730218dba25fed7a8df2bd5f9e17c2eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"429\" data-original=\"https://pic4.zhimg.com/v2-730218dba25fed7a8df2bd5f9e17c2eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;429&#39; height=&#39;220&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"429\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"429\" data-original=\"https://pic4.zhimg.com/v2-730218dba25fed7a8df2bd5f9e17c2eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-730218dba25fed7a8df2bd5f9e17c2eb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>March X算法比March C少中间的两个步骤。</p><p>除了March C算法，还可以利用STM32的SRAM硬件奇偶校验功能对RAM进行检测。STM32的部分芯片是支持这个功能的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5080c7e1af1dc399f911203e260303e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"535\" data-original=\"https://pic1.zhimg.com/v2-5080c7e1af1dc399f911203e260303e0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;535&#39; height=&#39;174&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"535\" data-original=\"https://pic1.zhimg.com/v2-5080c7e1af1dc399f911203e260303e0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5080c7e1af1dc399f911203e260303e0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以使用STM32芯片的SRAM硬件奇偶校验功能，也可以将硬件奇偶校验和软件March测试结合，甚至可以满足Class C的需求。使用硬件奇偶校验时，建议先对整个SRAM空间进行初始化，以避免出现错误。</p><p>在应用程序中，我们肯定会遇到增加新的Class变量的情况，我们需要做的就是在下图所指出的头文件中，按照下面的格式对新的Class变量进行声明，同时根据用户应用程序的需要改变Class B变量区的大小，在IAR中可以通过修改linker文件来实现，在keil中需要在stm32fxxx_STLparam.h文件中进行修改。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2a53cac7c819234e1cf43e795abec71d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb\" width=\"535\" data-original=\"https://pic2.zhimg.com/v2-2a53cac7c819234e1cf43e795abec71d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;535&#39; height=&#39;232&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"232\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"535\" data-original=\"https://pic2.zhimg.com/v2-2a53cac7c819234e1cf43e795abec71d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2a53cac7c819234e1cf43e795abec71d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>内部数据路径故障</b></p><p>内部数据路径故障包括数据错误和寻址错误，对于这两个故障仅针对使用了外部存储器的微控制器，单片微控制器不做要求。</p><p><b>中断故障</b></p><p>中断故障是指没有中断或者中断太频繁，可以采用的检测方法是每次中断中计数器自加：</p><p>周期性地、以固定时间间隔去检查计数器的值（该时间间隔由独立定时器驱动），从而检查是否在固定时间内产生了应用需要的中断次数。</p><p><b>外部通信故障</b></p><p>外部通信故障包括数据故障和地址故障，可以采用的方法是：</p><p>在数据传输中增加用于校验的冗余信息、奇偶校验、CRC校验值等，根据实际应用选择。</p><p><b>带硬件CRC的外设</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a17686dada54266606d520d5a0a407de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"184\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a17686dada54266606d520d5a0a407de_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;184&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"184\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a17686dada54266606d520d5a0a407de_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a17686dada54266606d520d5a0a407de_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>外部通信故障还有一个时序故障，时序故障和前面提到的中断故障一样，可以采用的方法是：</p><p>每个通信事件中计数器自加，周期性地、以固定时间间隔去检查计数器的值（该时间间隔由单独定时器驱动），从而检查是否在固定时间内产生了应用需要的通信事件次数。</p><p><b>输入输出外设故障</b></p><p>输入输出外设包括数字I/O口和模拟I/O口，可以采用的检测方法是：</p><p>必须能检测数字I/O口的任何故障，可能需要与应用中的其他部件的工作情况进行核对。（比如，加热管的开关控制引脚切换后，温度传感器检测到的温度是否发生了变化）。</p><p><b>模拟I/O口的检测方法是：</b></p><p>使用到的pin脚应该按照一定的时间间隙进行检测。空闲的引脚可以用来检测应用中用到的模拟端口。内部参考源也需要进行检测。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>登录电堂网站观看更多相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80752667", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 12, 
            "title": "Cortex-M4 vs. Cortex-M3", 
            "content": "<p>这篇文章我们来把<b>Cortex-M4</b>和<b>Cortex-M3</b>做一下对比。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>与Cortex-M3相比，M4提供了更丰富的指令集，还有一个可选的MPU单元。</p><p>在指令集方面，M4比M3多了浮点运算指令、单周期的MAC指令、SIMD指令和更多的饱和指令。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4f454fef43e74925393b80ced06f3679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"122\" class=\"content_image\" width=\"418\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;418&#39; height=&#39;122&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"418\" data-rawheight=\"122\" class=\"content_image lazy\" width=\"418\" data-actualsrc=\"https://pic2.zhimg.com/v2-4f454fef43e74925393b80ced06f3679_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>单周期SIMD指令可以一次操作多个数据，在单周期内可以完成多次运算，比如下面的运算公式就可以用一个SIMD指令在单周期内完成。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-62c11b4d04858befa2379a9971788342_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-62c11b4d04858befa2379a9971788342_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;450&#39; height=&#39;192&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"192\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"450\" data-original=\"https://pic3.zhimg.com/v2-62c11b4d04858befa2379a9971788342_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-62c11b4d04858befa2379a9971788342_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>打包数据类型就是可以将四个字节长度的数据或者两个半字节长度的数据打包成一个字节长度的数据。上面提到的SIMD指令就是对打包数据进行操作的，公式中的A和B被打包成一个32位的数据，B和D被打包成一个32位的数据，这样一次可以读出多个数据，所以对打包数据的访问也会更有效。另外，打包数据的打包和释放是通过专门的指令执行的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-851412412149c181c9b09a4eafb896e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic2.zhimg.com/v2-851412412149c181c9b09a4eafb896e5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic2.zhimg.com/v2-851412412149c181c9b09a4eafb896e5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-851412412149c181c9b09a4eafb896e5_b.jpg\"/></figure><p>下图中列举出了M3和M4的乘加指令的对比，可以看出M3支持的指令在M4中都是单周期执行的，同时M4也比M3支持更多的指令。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e3982aa57a8b2509ca1a6221b25d1985_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic2.zhimg.com/v2-e3982aa57a8b2509ca1a6221b25d1985_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic2.zhimg.com/v2-e3982aa57a8b2509ca1a6221b25d1985_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e3982aa57a8b2509ca1a6221b25d1985_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们在程序中经常需要对输入数据的范围进行判断，如果输入数据超过了某个范围的话，就会用最大值或者最小值代替，那么如果使用饱和运算指令的话，它可以指定饱和边界来防止变量的溢出，而不用通过软件来进行判断，可以减轻CPU的负担。</p><p>就像下面的图，如果没有做饱和处理，当出现信号量超出变量的有效范围的情况时，变量溢出就有可能从一个很大的值变成一个很小的值，输出的信号就会完全变形；而使用了饱和指令做了饱和处理之后，当出现信号量超出变量的有效范围时，只会让超出的输出值保持在最大值或者最小值，整个输出信号并不会完全走样。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f34091172b63412ccc24c4428326e1ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"234\" class=\"origin_image zh-lightbox-thumb\" width=\"539\" data-original=\"https://pic3.zhimg.com/v2-f34091172b63412ccc24c4428326e1ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;539&#39; height=&#39;234&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"234\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"539\" data-original=\"https://pic3.zhimg.com/v2-f34091172b63412ccc24c4428326e1ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f34091172b63412ccc24c4428326e1ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>浮点运算指令都是V开头的汇编指令，用于FPU单元的单精度浮点运算，只有当FPU开启后才能使用这些指令，否则会产生硬fault异常。</p><p>前面主要介绍的是M3和M4在指令上的区别，下面我们介绍一下M4的FPU单元和FPU寄存器组。</p><p>FPU是独立于CPU的一个浮点运算单元，可以单独地使能或者关闭，它支持单精度浮点数的运算和整数、单精度浮点、半精度浮点之间的数据格式转换。Cortex-M4有一组专门用于FPU单元的单精度浮点运算指令，这部分指令都是用V开头的汇编指令，仅能够在FPU功能被使能时使用。</p><p>我们想使用FPU单元的话需要做两件事，第一件事是在代码中添加设置打开FPU单元的代码，因为芯片复位后FPU默认是关闭的，所以需要在CPACR寄存器中设置打开，同时在编译器中我们也需要设置打开相应的FPU功能，一旦编译器开启了FPU功能，它会在处理单精度浮点运算语句的时候用V开头的汇编指令进行编译。</p><p>如果编译器使能了FPU功能，而芯片未开启FPU单元，程序运行到浮点语句时就会出现异常。相反，如果编译器未使能FPU功能，芯片即使开启了FPU单元，程序仍然会按照未开启FPU的代码执行。</p><p>接着我们说一下在IAR中是如何配置FPU的。如果只是进行简单的浮点运算，那么只需要在IAR工程配置选项中启用FPU，然后在系统初始化函数中加入使能FPU的代码，最后在IAR预编译项中加入相关的宏定义就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a46f113b1ef90a7c0f41c7771a57c871_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"328\" class=\"content_image\" width=\"391\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;391&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"391\" data-rawheight=\"328\" class=\"content_image lazy\" width=\"391\" data-actualsrc=\"https://pic2.zhimg.com/v2-a46f113b1ef90a7c0f41c7771a57c871_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果还要进行复杂的浮点运算，要用到相关的库函数的话就需要包含arm_math.h头文件，并且在宏定义一栏中加入语句ARM_MATH_CM4。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6e0af78fad1bec43c913f76f5a0ef897_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb\" width=\"533\" data-original=\"https://pic4.zhimg.com/v2-6e0af78fad1bec43c913f76f5a0ef897_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;533&#39; height=&#39;282&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"533\" data-original=\"https://pic4.zhimg.com/v2-6e0af78fad1bec43c913f76f5a0ef897_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6e0af78fad1bec43c913f76f5a0ef897_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Keil中要配置的内容与IAR相同，只是配置的路径不同，在工程配置选项中启用FPU，然后在系统初始化函数中加入使能FPU的代码，最后在宏定义项中加入相关的宏定义就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e52d34abaa4e6f4ce8ab29304711f0f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"434\" data-original=\"https://pic1.zhimg.com/v2-e52d34abaa4e6f4ce8ab29304711f0f8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;434&#39; height=&#39;291&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"434\" data-original=\"https://pic1.zhimg.com/v2-e52d34abaa4e6f4ce8ab29304711f0f8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-e52d34abaa4e6f4ce8ab29304711f0f8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>同样，如果还要进行一些复杂的浮点运算，要用到相关的库函数的话也需要包含arm_math.h头文件，并且在宏定义栏中加入语句ARM_MATH_CM4。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9da223b7e799ae419a4b9428e461607b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-9da223b7e799ae419a4b9428e461607b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;534&#39; height=&#39;190&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"534\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"534\" data-original=\"https://pic4.zhimg.com/v2-9da223b7e799ae419a4b9428e461607b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9da223b7e799ae419a4b9428e461607b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>M4中新增了32个FPU寄存器S0-S31以及浮点状态和控制寄存器FPSCR，这33个寄存器都是没有地址映射的，只能通过寄存器的名字进行访问，还有其他的一些状态和配置寄存器，进行浮点运算时会用到这些寄存器。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9ed8530f798faa9942c26513e1288976_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-9ed8530f798faa9942c26513e1288976_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic3.zhimg.com/v2-9ed8530f798faa9942c26513e1288976_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9ed8530f798faa9942c26513e1288976_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在调试的时候也会发现启用FPU后，在查看寄存器时会发现多出一些和浮点运算相关的寄存器，在不启用FPU时是没有的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b902559b282045fc784e6a137748fec7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-b902559b282045fc784e6a137748fec7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;295&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"295\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-b902559b282045fc784e6a137748fec7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b902559b282045fc784e6a137748fec7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来介绍M4的中断响应和返回。M4的中断响应和退出机制和M3大体相同，都支持咬尾中断和晚到中断机制，因为多了对浮点运算的支持，在中断响应和退出时增加了对FPU扩展寄存器的保护。</p><p>入栈浮点寄存器会带来一下影响：</p><p>l 首先会扩大stack frame所占的存储区域</p><p>l 增加中断响应的延迟</p><p>l 在OS环境下增加上下文的切换时间</p><p>在Cortex-M4下有两种stack frame，一种没有使用FPU，与M3一样；另一种使用了FPU，和没有使用FPU相比的话，多入栈了S0-S15和浮点状态和控制寄存器FPSCR。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3e48611719cdf3cb828b1400b6c34388_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-3e48611719cdf3cb828b1400b6c34388_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;449&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"449\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-3e48611719cdf3cb828b1400b6c34388_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3e48611719cdf3cb828b1400b6c34388_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>M4的CONTROL寄存器里也增加了一位定义，增加了FPCA位，当该位为0时，表示没有用到FPU；为1时，表示已经用到了FPU，在响应中断时需要对浮点状态进行保护。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-5fd1cfbd5c3f5d369c85c11f07ce63b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic2.zhimg.com/v2-5fd1cfbd5c3f5d369c85c11f07ce63b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;276&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"551\" data-rawheight=\"276\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic2.zhimg.com/v2-5fd1cfbd5c3f5d369c85c11f07ce63b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-5fd1cfbd5c3f5d369c85c11f07ce63b1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>同样因为多了对浮点寄存器组进行入栈的操作，在中断返回值中的定义也增加了一位，增加了bit 4，用来表示栈帧中是否包含了FPU寄存器的内容。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f4faa3a3632355e7336c58bc4ee60d2a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f4faa3a3632355e7336c58bc4ee60d2a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;289&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f4faa3a3632355e7336c58bc4ee60d2a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f4faa3a3632355e7336c58bc4ee60d2a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>前面说了在启用了FPU的程序里M4通过CONTROL的FPC位的值来决定是否需要在响应中断时对浮点寄存器进行入栈，但是有的时候入栈不是必须的，如果每次都对这些浮点寄存器都进行入栈和出栈就会浪费资源，增加中断的响应时间，为了减少不必要的FPU寄存器组入栈出栈的开支，Cortex-M4引入了Lazy stacking的机制。</p><p>什么是Lazy stacking呢？Lazy stacking就是在中断处理函数不使用FPU或者被中断的程序未曾用到FPU的情况下，跳过对浮点扩展寄存器的入栈操作，仅预留空间，以免中断延迟的增加。</p><p>如果在执行中断处理函数时用到了FPU，那么在执行第一条浮点指令时，内核暂停，由硬件入栈浮点寄存器。</p><p>Lazy stacking的功能是可以通过软件使能和关闭的，同时置位FPCCR寄存器的LSPEN位和ASPEN位可以使能Lazy stacking，清除LSPEN位可以关闭Lazy stacking。</p><p>M4中FPU寄存器的入栈策略可以通过FPCCR寄存器中的LSPEN和ASPEN这两位进行选择。</p><p>当这两位都是0时，取消自动状态保存，中断响应时不入栈FPU寄存器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当LSPEN为0，ASPEN为1时，关闭Lazy stacking，仅打开自动状态保存。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当这两位都为1时，打开Lazy stacking，同时打开自动状态保存。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当LSPEN为1，ASPEN为0时，这种情况是非法配置。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f7937efcb6589903beedbea62d894f02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-f7937efcb6589903beedbea62d894f02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;526&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"260\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"526\" data-original=\"https://pic3.zhimg.com/v2-f7937efcb6589903beedbea62d894f02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f7937efcb6589903beedbea62d894f02_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在响应中断时有三个标志位表示了当前对浮点寄存器的入栈状态，介绍这几个标志位是为了帮助我们理解Lazy stacking的工作机制，在实际编程中是不需要用到的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0194db9ff769e343471dc610b4d164b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-0194db9ff769e343471dc610b4d164b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;319&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-0194db9ff769e343471dc610b4d164b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0194db9ff769e343471dc610b4d164b8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>直接登录电堂网站观看更多相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "ARM Cortex M", 
                    "tagLink": "https://api.zhihu.com/topics/20007904"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80475866", 
            "userName": "唐13260562029", 
            "userLink": "https://www.zhihu.com/people/731463f26d68e85ae27ca41282155348", 
            "upvote": 1, 
            "title": "一个硬件工程师应有得六项基本能力", 
            "content": "<p>一个硬件工程师应有得六项基本能力</p><p>     很多硬件工程师而言，每天都在忙活着手头上的工作，但是有时候并不知道自己的水平去到哪里，也不知道怎样提高，这在这个瞬息万变的社会里面，其实有点危险！毕竟我们这些凭手艺吃饭的人不像某些尸位素餐的某猿，是跟不上潮流就会被淘汰的。所以就算我们不能成为最TOP的那个，也力争成为排在前面的那一批人。</p><p>    但我们工程师怎样成为最TOP呢？该怎么学习呢？</p><p>    根据我们从小受到的教育中我们知道，这首先要求我们对于知识要理解透彻，越深入越好，对于任何一个知识点，通过基本公式，用数学工具推导到最后来验证高级定律和公式。我想对于这一点，高考物理是达到了极点，高中物理知识其实不难，但是我们为了选拔的目的，把物理各种定律糅合在一起，结合一些脑筋急转弯，复杂的运算，造成高考物理是最难的科目了。</p><p>但如果我们拿着解高考物理难题的精神来解决硬件问题，当然精神可嘉，工作之余还是值得鼓励这种学习和探索精神的；可是这样对于项目开发却是没有多少好处，毕竟硬件工程师的工作是工程开发，在规定的时间和预算之内完成硬件项目，而不是你在这个时间自己推导出来了什么公式和计算结果，那是科学家的工作，那是Research的工作。</p><p>    工程开发一个重要特点就是“踩在前人的足迹”，就是通过过去几十上百年的工程实践，对于各种情况有了很多经验数据和经验方法，比如对于PCB layout来说，基本上每个公司都有自己的design guidelines/check list，这就是公司在过去很多项目中总结出来的，每一条可以说都付出了“血”的代价，这是对于板级设计来说了；对于核心芯片和器件，就更是如此了，芯片或器件公司几十数百人历时数年搞出来的一款芯片和器件，又岂是你通过几百页datasheet可以彻底理解的。</p><p>    大多数情况下，知道主要接口，参数，功能和性能就足够了，尤其是芯片/器件公司提供的design guidelines或者application notes，里面一般都是芯片/器件工程师的肺腑之言，经验之谈，一般来说没有个十年二十年工作经验的工程师是写不了这些东西的。</p><p>    看起来虽然很简单，看起来像是废话，但是细细分析，结合电路定理和电磁定律，略微分析，就会发现简直字字珠玑。刚毕业的好学生（一般来说学习好，喜欢啃难题，学习能力强，求知欲强）初干硬件设计，就会发现涉及的知识点和技术要点太多了，如果这个知识点想要理解透彻，那个知识点也要理解透彻，会发现一天24小时根本不够用，但是对不起，公司请你过来不是让你学习的，是要干硬件设计的，过一个月就要见原理图了，你还在这捧着OrCAD手册一个命令一个命令学习OrCAD使用技巧，研究为啥要有串行电阻呢，研究这个电容是取0.1uF还是0.01uF.。</p><p>    有求知欲是好事，但是那是在工作之余，项目之余，虚心向前辈学习，尽量利用各种design guidelines，尽快完成设计工作，记录自己的知识缺点，在业余时间努力学习，理解透彻，通过设计验证/测试，加深对于知识点的了解，这才是正确的工作方法。</p><p>    我在刚毕业的时候欣喜的发现传输线理论太重要了，遂花了一个月把传输线理论努力了一把，并推导了大量公式进行验证，其实总结起来就是几句话，阻抗匹配，如果接收端阻抗大于发送端，信号会怎么样；如果小于，信号会怎么样；如果开路，会怎么样；如果短路，会怎么样，这几条基本每本信号完整性的书上都会介绍，也不会有很复杂的数学公式推导，知道就行了，然后就是如何平衡发射端的阻抗，串行电阻，PCB阻抗，匹配阻抗等等，都是简单的数学公式。</p><p>    所以说，对于求知欲特别强的人（比如我），有时候一定要学会“浅尝辄止”，充分利用前辈经验，避免陷入技术的误区，比如放着公式不用，非得自己用二重积分推导一遍。硬件开发最主要的特点就是“广博”，什么东西都要知道，一个好的硬件工程师就要什么都要懂一点，当然对于某些方面能够深入一些到原理层次就更好了。</p><p>关于硬件设计的各种技术/标准/芯片/器件都要知道，需要的时候，能够信手拈来，功能性能，参数特性，优点缺点。</p><p>那一个好的硬件工程师应该具备哪些基本知识和能力呢？</p><p>    1. 快速学习的能力：</p><p>    作为一个通信汪，我就以通信设备方面来说吧！一方面，通信技术，标准，芯片更新的太快了，快到你根本来不及系统的了解它，只能通过特定的项目，需求进行了解；另一方面对于公司来说，需要做的硬件产品也是变化很快，客户需要T1， E1， PDH， SDH，Ethernet， VoIP， Switch， Router， 没有人是什么都懂的，都需要能够结合客户的需求，选择的芯片方案进行详细了解，尤其对于接口协议和电气特性。假设你是做电源的，同理，你也需要对电源相关的知识和客户的需求进行深入的理解和学习吧？</p><p>    2. 对协议和标准的理解：</p><p>    继续用通信设备做代表。通信设备，顾名思义，就是用来实现多种通信协议（比如T1， E1， V.35，PDH， SDH/SONET， ATM， USB， VoIP， WiFi， Ethernet， TCP/IP，RS232等等常用协议）实现通信的设备，各种电路，PCB板，电源都是为了通信协议服务的。</p><p>    通信协议一般都是由芯片实现，要么是成熟的 ASIC，要么是自己开发的FPGA/CPLD，芯片工程师或者FPGA工程师比硬件工程师跟靠近通信协议，他们需要对于通信协议理解很透彻，实现各种逻辑上的状态机以及满足协议规定的电气参数标准。按照OSI的七层模型，硬件工程师尤其需要专注于一层物理层和二层数据链路层的协议标准，以 Ethernet距离，物理层是由PHY/transceiver芯片完成，数据链路层是由MAC/switch 芯片完成，对于从事Ethernet相关开发的硬件工程师来说，需要对于PHY和Switch芯片理解透彻，从编码方式，电气参数，眼图标准，模板，信号频率到帧格式，转发处理逻辑，VLAN等等。</p><p>    对于传统PDH/SDH/SONET设备就更是如此，PDH/SDH/SONET是更硬件的设备，就是说主要协议都是通过ASIC实现的，软件的功能主要是管理，配置，监视，告警，性能，对于硬件工程师来说，必须要熟悉使用的相关协议和接口标准，尤其对于电气规范，眼图模板，这样在设计验证的时候才能胸有成竹。</p><p>    如果你做智能家居的，你对蓝牙、WIFI、Zigbee的新标准应该要深入了解吧，各自的优劣势也应该了如指掌吧，最新的标准有啥提升和缺点也可以信手拈来，说不定这样你就能做出符合消费者需求的全新产品呢！也指不定在跳槽的时候，因为你掌握了一个别人还没有了解的技术，而获得成功呢！</p><p>    3. 写文档的能力：</p><p>    诚如软件设计一样，好的软件设计需要好的设计文档，明确需求，实现什么功能，达到什么验收标准，随着芯片集成度的增加，接口速率的提高，单板复杂度的提高，硬件设计也越来越复杂以及对应热稳定性，可靠性，电磁兼容，环境保护的要求，已经不是通过小米加步木。仓的游击战可以解决了，每一个硬件项目都是一场战争，都需要好好的规划，好好的分析，这就需要好好做文档。</p><p>    对于硬件工程师来说，最重要的文档有两个：一个是硬件设计规范（HDS ：hardware design specification）和硬件测试报告（一般叫EVT：Engineering Validation&amp; Test report或者DVT：Design Validation &amp; Test report），对于HDS的要求是内容详实，明确，主芯片的选择/硬件初始化，CPU的选择和初始化，接口芯片的选择/初始化/管理，各芯片之间连接关系框图（Block Diagram），DRAM类型/大小/速度，FLASH类型/大小/速度，片选，中断，GPIO的定义，复位逻辑和拓扑图，时钟/晶振选择/拓扑，RTC的使用，内存映射（Memory map）关系， I2C器件选择/拓扑，接口器件/线序定义，LED的大小/颜色/驱动，散热片，风扇，JTAG，电源拓扑/时序/电路等等。</p><p>    对于DVT来说，要求很简单也很复杂：板卡上有什么接口，芯片，主要器件，电路，就要测试什么，尤其在板卡正常工作的情况下的电源/电压/纹波/时序，业务接口的眼图/模板，内部数据总线的信号完整性和时序（如MII， RGMII， XAUI， PCIe，PCM bus， Telecom Bus， SERDES， UART等等），CPU子系统（如时钟，复位，SDRAM/DDR，FLASH接口）。</p><p>好的硬件工程师无论是做的文档还是报道都是令人一目了然，这个硬件系统需要用什么方案和电路，最后验证测试的结果如何。内容详实，不遗漏各种接口/电路；简单明了，不说废话；图文并茂，需要的时候一个时序图，一个示波器抓图就很能说明问题了。</p><p>    4. 仪表/软件的使用能力：</p><p>    仪表包括电烙铁，万用表，示波器，逻辑分析仪，误码仪，传输分析仪，以太网测试仪Smartbits/IXIA，热量计，衰减器，光功率计，射频信号强度计等等；软件包括Office（Outlook，Word， Excel， PowerPoint， Project， Visio），PDF，常用原理图软件Pads或者OrCAD，常用PCB软件Pads或者Allegro，Allegro Viewer，电路仿真软件PSPICE，信号仿真软件HyperLynx等等。</p><p>    无论仪表还是软件，在政治经济学里说都是生产工具，都是促进生产力提高的，作为硬件工程师来说，这些仪表和软件就是手中的木。仓炮，硬件工程师很大一部分能力的体现都在与仪表和软件的使用上，尤其对于原理图软件和示波器的使用，更是十分重要，原理图软件的使用是硬件设计的具体实现，通过一个个器件的摆放，一个个NET的连接，构成了是十分复杂的硬件逻辑软件，是整个硬件设计的核心工作，任何一个原理图上的失误和错误造成的损失都是巨大的，真是“如履薄冰，战战兢兢”。</p><p>    另外，原理图软件的使用还体现在原理图的美观上，好的设计，简单明了，注释明确，无论是谁，顺着思路就能很快搞清楚设计意图，需要特别注意之处，不好的设计，东一个器件，西一个器件，没有逻辑，命名怪异，难以理解，日后维护起来相当麻烦；示波器在所有测试仪表之中，对于硬件工程师是最重要的，无论原理图还是PCB都是设计工作，但是任何设计都需要仔细的验证测试，尤其在信号方面，都需要大量的示波器工作，不会正确的使用示波器根本谈不上正确的验证，接地有没有接好，测试点的选择，触发的选择，延时的选择，幅度、时间的选择，都决定着测试的结果。如果错误的使用示波器必然带来错误的测试结果，这种情况下，有可能本来是错误的设计被误认为是正确的，带来巨大的隐患；本来是正确的设计被误认为是错误的，带来大量的时间精力浪费。</p><p>    5. 电路设计的能力：</p><p>    随着芯片集成度的提高，硬件设计似乎变简单了。首先是逻辑连接，其次考虑信号完整性需要的串行电阻选择和并行电容选择，电源滤波，退耦。不过对于好的硬件工程师来说，简单的逻辑连接（这个芯片的同样总线的输出接另一个芯片的输入，等等），只是硬件设计的最基本技能，电路是芯片功能，通信协议和各种软件的载体，没有对电路的深入理解，根本谈不上对硬件设计的深入理解，尤其对于芯片后面列的电气性能参数或者离散器件各种参数的理解，胡乱乱接，可能在3.3V的总线上可以工作，但是现在工作电压已经降到1V了，什么概念，信号线上的噪声都已经大到可以使采样出现误判了，随着信号速率的提高和工作电压的降低，数字信号已经越来越模拟化了，这就需要对于PCB的阻抗，容抗，感抗，离散器件（电阻，电容，电感，二极管，三极管，MOSFET，变压器等），ASIC的接口电气参数深入了解，这都需要对电路原理，模拟电路甚至电磁场理论深入学习，电路可以说是电磁场理论的子集，没有电磁场理论的理解，根本谈不上对于电容，电感，串扰，电磁辐射的理解。</p><p>    尤其对于电源电路设计上，现在芯片电压多样化，电压越来越低，电流越来越大，运营商对于通信设备功耗的严格要求，散热要求，对于电源设计的挑战越来越大。可以说，对于一个硬件设计来说，40%的工作都是在于电源电路的原理图/PCB设计和后期测试验证，电源电路设计是硬件工程师电路能力的集中体现，各种被动器件、半导体器件、保护器件、DC/DC转换典型拓扑，都有很多参数，公式需要考虑到，计算到。</p><p>    6. 沟通和全局控制的能力：</p><p>    硬件工程师在一个硬件项目中，一般处于Team leader的作用，要对这个硬件项目全权负责，需要协调好PCB工程师，结构工程师，信号完整性工程师，电磁兼容工程师等各种资源，并与产品经理，项目经理，软件工程师，生产工程师，采购工程师紧密配合，确保各个环节按部就班，需要对整个项目计划了然于胸，各个子任务的发布时间，对于可能出现的技术难题和风险的估计，控制。</p><p>    对于外部来说，硬件工程师还要与芯片的分销商，FAE处理好关系，争取获得更大的技术支持和帮助；与EMC实验室，外部实验室打好交道，获得更灵活的测试时间和更多的整改意见。</p><p>    总的来说保持长期学习的态度，有一颗爱岗敬业的心，然后深入研究，谁都能成功了</p><p>更多交流私我vx132-60-56-2029</p>", 
            "topic": [
                {
                    "tag": "硬件工程师", 
                    "tagLink": "https://api.zhihu.com/topics/19673485"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80406653", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 5, 
            "title": "STM32F7 电源控制器（PWR）", 
            "content": "<p>这篇文章给大家介绍一下<b>STM32F7的电源控制器</b>。</p><p>F7的工作电压也就是VDD要求为1.8V~3.6V，通过VDD引脚给整个芯片供电，VDD再通过主电压调节器给I/O口和内核逻辑提供1.2V工作电压。当内部复位电路关闭并工作在0~70度时，可以工作在1.7V下。</p><p>当主电源VDD断电的时候，可以通过VBAT电压为实时时钟，还有RTC的备份寄存器和备份SRAM供电。</p><p>为了提高ADC的转换精度，ADC配有独立的电源，可以单独滤波并屏蔽PCB上的噪音，ADC的电源从单独的VDDA引脚输入，VSSA引脚则提供了独立的电源接地连接。为了提高DR输入的精度，用户还可以在VREF上接单独的ADC外部参考电压输入，VREF上电压的范围位1.8V~VDDA的电压值。F7还有一个单独的VDD_USB引脚，可以单独给USB模块提供电源，它可以连接到VDD或者是USB收发器的外部独立电源。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-91520bb24b29e28ea181731d7e10f299_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-91520bb24b29e28ea181731d7e10f299_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-91520bb24b29e28ea181731d7e10f299_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-91520bb24b29e28ea181731d7e10f299_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>除了LQFP100，F7的大部分封装上都有VDD_USB供电引脚。VDD_USB引脚可以连接到VDD，也可以通过外部电源单独给USB模块供电吗，这样做的好处是当芯片工作在较低电压的情况的时候，使用USB功能不需要外接一个外部PHY，而且当MCU工作在1.8V的时候，通过外部单独提供一个3.3V的电压给USB，这样USB的连接也可以正常工作。</p><p>对于全速USB或者是工作于全速模式的高速USB，相关的GPIO由VDD_USB供电，即使应用仅使用一个USB收发器，与另一个USB收发器相关的GPIO仍由VDD_USB供电。</p><p><b>电源检测和复位电路</b></p><p>F7内部集成有上电复位和掉电复位的电路，可以从1.8V开始正常工作，当VDD低于指定阈值的时候，不需要外部的复位电路，芯片会保持在复位模式。</p><p>在上电期间，欠压复位将使器件保持复位状态，直到电源电压达到指定的VBOR阈值。欠压复位可以通过选项字进行配置，默认是关闭状态，可以选择三个可以变成的阈值级别。</p><p>可编程电压检测可以检测VDD的电源，将VDD的电源与设置的阈值进行比较，当VDD降到阈值以下，或者是当VDD升到阈值以上的时候，它可以产生PVD的输出中断，具体要取决于所对应的中断线上升沿或者下降沿的配置。这个功能的用处之一就是可以在中断服务程序中执行一些紧急的关闭系统的任务。</p><p>内部复位功能的开关可以通过PDR_ON引脚的状态来进行配置，当这个引脚连接到VDD的时候，内部复位电路打开；当这个引脚连接到VSS的时候，内部复位电路关闭。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a0e01f99153a699ec180a5eee88f9a65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-a0e01f99153a699ec180a5eee88f9a65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;283&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"283\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-a0e01f99153a699ec180a5eee88f9a65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a0e01f99153a699ec180a5eee88f9a65_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>F7的备份域包括RTC和4KB的备份RAM以及给备份RAM供电的低功耗电压调节器。对于备份域的部分，当VDD低于PDR值的时候，会自动切换到VBAT的独立供电电源。在VBAT供电的模式下，映射到PC13和PI.8脚的RTC功能在Bbat模式下仍然可用。</p><p>下图是不同的封装下，对于调压器和内部复位功能的支持情况</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8e4cc37dc3c31c68ecb1bba2527fe85d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-8e4cc37dc3c31c68ecb1bba2527fe85d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;212&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-8e4cc37dc3c31c68ecb1bba2527fe85d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8e4cc37dc3c31c68ecb1bba2527fe85d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>调压器的工作模式</b></p><p>在<b>运行和睡眠模式</b>下，调压器可以工作在两种模式：<b>正常模式</b>和<b>过驱动模式</b>。</p><p>正常模式下，CPU和内核逻辑在给定电压级别下以最大频率工作。</p><p>在过驱动模式下，它允许CPU和内核逻辑在电压级别1和级别2下以高于正常模式的频率工作，F7可以通过这种模式达到最高216MHz的工作频率。</p><p>在<b>停止模式</b>下，调压器也有<b>正常模式</b>和<b>欠驱动模式</b>。</p><p>正常模式在正常泄漏模式下保留1.2V域。当主调压器或低功耗调压器使能时，该模式为默认模式。</p><p>欠驱动模式是指低泄漏模式下保留1.2V域。</p><p>在待机模式下调压器掉电，除待机电路和备份域外，寄存器和SRAM的内容都将丢失，可以通过将6 WKUP引脚配置成上升沿或下降沿退出待机模式。</p><p>下图列出来了在器件不同的工作模式下，电压调节器可选择的工作状态。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-639541cc92c70d4cfe87079d9b711a45_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-639541cc92c70d4cfe87079d9b711a45_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;132&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"132\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-639541cc92c70d4cfe87079d9b711a45_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-639541cc92c70d4cfe87079d9b711a45_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>电压调节</b></p><p>F7有三个电源级别：级别1，级别2和级别3。这三个级别在电源控制寄存器中进行修改，但是只能在选择HSI或HSE为系统时钟源并且PLL处于关闭状态时进行修改。</p><p>当PLL重新开启后新的值才有效。</p><p>当PLL关闭后，系统将自动选择电源级别3。</p><p>退出停止模式后，系统也将自动选择电压级别3。</p><p>下图是在不同的电压级别下可以达到的最高系统频率。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-269aaff8d2be12bbc7e385e952d8236e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-269aaff8d2be12bbc7e385e952d8236e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;109&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"109\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-269aaff8d2be12bbc7e385e952d8236e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-269aaff8d2be12bbc7e385e952d8236e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面的图片显示的是最大系统频率和电压级别以及驱动模式的关系图。在电压级别3下，最高可以跑到144MHz；在电压级别2下，如果Over-drive模式打开，最高可以到180MHz；在电压级别1，如果Over-drive模式打开，最高可以到216MHz。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1c571da1543ee3d08cf5034ba7c02c55_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-1c571da1543ee3d08cf5034ba7c02c55_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;235&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"235\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-1c571da1543ee3d08cf5034ba7c02c55_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1c571da1543ee3d08cf5034ba7c02c55_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下图是F4和F7功耗的对比。在低功耗模式下，STOP、Standby或者是外部电池供电的模式下，F4和F7的功耗都是差不多的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c1ddbc9d831ceec035218d915d52b0b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c1ddbc9d831ceec035218d915d52b0b0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;256&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c1ddbc9d831ceec035218d915d52b0b0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c1ddbc9d831ceec035218d915d52b0b0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>F7的外部驱动时钟，LSE的驱动能力可以通过寄存器进行调节，一共有四个级别：低驱动能力、中低驱动能力、中高驱动能力和高驱动能力。在不同的驱动能力下，所带来的功耗是不一样的。下图是对于不同驱动能力下所带来的功耗比较。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5c479646d50d1073e8b4b90630a2751f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-5c479646d50d1073e8b4b90630a2751f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;144&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-5c479646d50d1073e8b4b90630a2751f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5c479646d50d1073e8b4b90630a2751f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>点击下方链接可进行STM32全国巡回研讨会直播预约</b></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-de8cb4573e432b3713141d6dc3002042_180x120.jpg\" data-image-width=\"320\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>加小电微信可进群和各专业人士交流讨论</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;600&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7579ef727f7dc97619c4d3e358bc2c78_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>直接登录电堂网站也可以观看相关课程哦~</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80251987", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 4, 
            "title": "【话说定时器系列】之六：STM32定时器输入捕获话题", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32定时器除了基本计数定时功能外，还对外拓展了输入、输出通道，从而实现输入捕捉、比较输出功能。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>输入捕获【Input Capture】基本原理</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>定时器针对外部输入信号或内部触发信号实行边沿捕捉；产生捕捉事件，并可以触发中断或DMA请求，同时记录捕捉时刻计数器的值。基于这个原理，配合计数器实时计数功能可以对捕捉信号进行脉冲宽度的测量，进而实现对周期性波形测量其周期或占空比，或者用来做通信解码。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5fb42b71152f1c96ebcfc4bc4812e253_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"469\" data-original=\"https://pic4.zhimg.com/v2-5fb42b71152f1c96ebcfc4bc4812e253_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;469&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"469\" data-original=\"https://pic4.zhimg.com/v2-5fb42b71152f1c96ebcfc4bc4812e253_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-5fb42b71152f1c96ebcfc4bc4812e253_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>具体到STM32定时器，输入捕获的功能主要靠捕捉比较单元来实现。输入捕获模式下：当捕获单元捕捉到外来有效信号边沿事件时【上升沿或下降沿】，将此刻计数器的值锁存到CCR影子寄存器并自动将CCR影子寄存器的值拷贝进CCR预装载寄存器，以供用户读取。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>关于CCR寄存器，前面多次提到过。它也是由影子寄存器和预装寄存器组成，带预装使能控制位。在输入模式下，此时CCR对用户是只读的，不可对其进行修改、赋值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>什么信号可以作为捕捉信号？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6d8520115f6ca281e82ca78f3b329211_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-6d8520115f6ca281e82ca78f3b329211_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;425&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-6d8520115f6ca281e82ca78f3b329211_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6d8520115f6ca281e82ca78f3b329211_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>两类信号可作为捕捉信号：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 来自定时器的各个输入通道的输入信号，比如TI1/TI2/TI3/TI4这些输入信号；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 内部触发输入信号，比如ITR0，ITR1，ITR3等，它们映射到各个输入捕捉通道；前面提到过ITR信号往往来自其它定时器的触发输出。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>外部输入信号作为输入捕获信号，往往要经过如下几个阶段：一般经过滤波、边沿检测、极性选择、捕捉信号选择、捕捉信号分频，最终进入捕捉功能模块从而完成输入捕捉。其中边沿检测、极性选择确定捕获单元对捕获信号的捕捉极性，即捕捉上升沿还是下降沿，甚至双沿捕捉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>捕捉信号选择是指对可能作为输入捕获信号的信号进行选择，前面提到过了可能作为捕获信号的信号源有两大类；捕捉信号分频是指对将被用作捕获信号的信号进行分频，比如2分频、3分频等，分频之后送到捕捉功能模块去完成输入捕捉。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>输入信号的滤波</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5320a74780b6b84952abf7ceca69523e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-5320a74780b6b84952abf7ceca69523e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;230&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-5320a74780b6b84952abf7ceca69523e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5320a74780b6b84952abf7ceca69523e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1、外部引脚输入信号的滤波  </b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了防止因为输入信号上的噪声或边沿抖动而导致误计数、误触发，我们可以针对外部输入信号进行合适的滤波。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>用户要做的就是针对输入信号具体情况【频率、噪声等】，通过寄存器配置适当的滤波参数，选择适当采样时钟和采样次数，其它事情交给定时器硬件去处理。这样也可以减少因为做滤波而导致的软件开销。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-e6e9110f4681432a8f7288c8873372e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-e6e9110f4681432a8f7288c8873372e7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;187&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"187\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-e6e9110f4681432a8f7288c8873372e7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-e6e9110f4681432a8f7288c8873372e7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-4fef36b0650ccad63df8911387d9b79c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-4fef36b0650ccad63df8911387d9b79c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"133\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-4fef36b0650ccad63df8911387d9b79c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-4fef36b0650ccad63df8911387d9b79c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-bc56b86e7a075cb2a4ba8687ac28afad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-bc56b86e7a075cb2a4ba8687ac28afad_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;361&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-bc56b86e7a075cb2a4ba8687ac28afad_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-bc56b86e7a075cb2a4ba8687ac28afad_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>假设我们让定时器对某输入通道的信号进行捕捉，捕捉极性为上升沿。设置滤波的采样时钟与定时器内部时钟频率一致，采样次数为4次。则每当捕捉到上升沿时，硬件连续根据采样频率来采样4次【包括发生捕捉触发沿的那一次】。如果4次采样结果均为高电平，则此次触发有效。并可以产生触发事件，该事件可以触发中断或DMA请求，同时捕捉单元将此刻计数器的值放入到捕捉比较寄存器CCR中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，如果捕捉到触发边沿后，没法做到连续4次采样均为高电平，则该触发无效，将会被丢弃。这样达到滤除噪声的目的。</p><p><b>2、内部触发输入信号ITRx作为输入捕捉信号  </b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f18f874ce7fe43a9c8f1bb91ead51f7c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"496\" data-original=\"https://pic1.zhimg.com/v2-f18f874ce7fe43a9c8f1bb91ead51f7c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;496&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"496\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"496\" data-original=\"https://pic1.zhimg.com/v2-f18f874ce7fe43a9c8f1bb91ead51f7c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f18f874ce7fe43a9c8f1bb91ead51f7c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-805388ff6dfe2e71d17dfde96be17e6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb\" width=\"421\" data-original=\"https://pic2.zhimg.com/v2-805388ff6dfe2e71d17dfde96be17e6d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;421&#39; height=&#39;408&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"421\" data-rawheight=\"408\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"421\" data-original=\"https://pic2.zhimg.com/v2-805388ff6dfe2e71d17dfde96be17e6d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-805388ff6dfe2e71d17dfde96be17e6d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>与输入捕获相关的事件</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 捕获时刻的计数器值的锁存到对应捕获通道的CCRx寄存器；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 对应通道的捕获事件/中断标志会被置位；【CCxIF@TIMx_SR】；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 如果允许了 捕捉中断或DMA请求，可以触发中断或DMA请求，其它取决于CCxIE/CCxDE @TIMx_DIER的配置；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 如果发生连续的捕获事件，前次CCxIF没有清零的话会置位CCxOF@TIMx_SR；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>5. 对于CCxIF标志可以软件清零或读取CCR来清零；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>6. 可以通过置位CCxG@TIMx_EGR来软件触发输入捕获事件。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>与输入捕获相关的事件主要就这些，我们要做到心中有数。只要了解它们后，在我们的定时器的实际应用中才能灵活使用它们，实现我们需要的功能。如在发生输入捕获事件时，利用相关中断或DMA请求实现其它功能，比如做数据的更新、ADC的启动、其它定时器的启动等等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3、通过输入捕获测量脉冲周期</b> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>在输入捕捉模式下，定时器可用于测量外部信号周期。根据定时器时钟、预分频器和定时器分辨率，可推导出最大测量周期。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相应的定时器配置包括：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 通过对CCMRx 寄存器中的 CCxS 位选择有效输入。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 根据需要，通过对 CCMRx 寄存器中的 IC1F[3:0] 位执行操作以编程滤波器参数，并通过对IC1PSC[1:0] 位执行写操作以编程预分频器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 通过对 CCxNP/CCxP 位执行写操作选择极性，即选择上升沿触发、下降沿触发或边沿触发。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当输入通道检测到相应的信号发生跳变时，可使用输入捕捉模块进行捕捉。要获取外部信号周期，需连续进行两次捕捉，通过将两次捕捉到的值相减可计算得到周期。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于单沿捕捉，计数器采用向上计数模式，待测信号不长于计数器的计数周期时：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>假设两次连续捕捉值为 CCRx_tn 和 CCRx_tn+1</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>如果 CCRx_tn &lt; CCRx_tn+1：捕捉宽度= CCRx_tn+1 - CCRx_tn</li><li>如果 CCRx_tn &gt; CCRx_tn+1：捕捉宽度= (ARR_max - CCRx_tn) + CCRx_tn+1</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>如果待测信号周期长于当前计数器周期的话，需要考虑溢出问题。实际应用中有时因为忽略了这点而导致测试不正确。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一种较特殊的测量脉宽及占空比的模式：</b></p><p><b>PWM输入模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先说说<b>PWM输入模式工作原理</b>：它是基于输入捕获与定时器从模式相结合的一个具体应用；同一个外部输入引脚【仅限于TI1/TI2的】的输入滤波信号【TIxFPx】映射到2个捕捉通道【仅限于IC1/IC2】，且配置为相反的捕捉极性，即一个通道捕捉上沿，另一个通道捕捉下沿。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>定时器配置在复位从模式，外部输入的滤波信号TIxFPx作为定时器的触发信号。</li><li>经过两次连续的捕捉即可方便地测得信号的周期及占空比。【前提：待测信号周期不长于当前定时器计数周期】</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d0707158523b5bc9d8d305dee66c1fd1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"246\" class=\"content_image\" width=\"302\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;302&#39; height=&#39;246&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"302\" data-rawheight=\"246\" class=\"content_image lazy\" width=\"302\" data-actualsrc=\"https://pic2.zhimg.com/v2-d0707158523b5bc9d8d305dee66c1fd1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>需要强调提醒的是：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>PWM输入模式测量脉宽和占空比，该方法只适用于来自定时器通道1或通道2的TI1或TI2输入信号，而且输入捕捉通道1【 IC1 】与捕捉通道2【IC2 】配合使用。一路直接输入，一路间接输入。一路捕捉上升沿，一路捕捉下降沿。同时，输入信号经滤波和极性选择后提供触发信号给从模式控制器，让定时器工作在复位从模式。</li><li>只有来自TI1或TI2的外来信号才能产生触发信号连接到从模式控制器。</li><li>现有ST参考库代码也有最大时长问题。即待测信号周期超过ARR所对应的时间后，得考虑溢出事件的统计问题，须自行修改代码。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>通过PWM输入模式测量脉宽和占空比，它有其测试方面的方便性。只需两次捕捉，无需过多运算即可得出脉冲的宽度与占空比。但也有其局限性，通道不能随意，还必须结合定时器的复位从模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果我们不使用PWM输入模式测量脉冲宽度和占空比，往往就没有通道选择上的限制，可以一个通道也可以两个通道，自由度更大，也无须一定工作在从模式。但软件代码实现方面稍嫌麻烦点。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1、外部输入信号的直接输入与间接输入  </b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>该说法只存在于输入通道1与通道2之间或者通道3与通道4之间。<br/></p><p>所谓直接输入，即各类输入信号经过滤波、极性选择或者分频之后连接到各自对应的输入捕获通道，这时就是直接输入。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5d450e38d73571fe3a3c86791dc22fe8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"317\" class=\"content_image\" width=\"398\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;398&#39; height=&#39;317&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"317\" class=\"content_image lazy\" width=\"398\" data-actualsrc=\"https://pic1.zhimg.com/v2-5d450e38d73571fe3a3c86791dc22fe8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如：TI1FP2就是通道2的间接输入信号，TI3FP4就是通道4的间接输入信号。换言之，通道1的输入捕捉信号并非一定来自TI1，而可能来自TI2的信号。请弄清这些细节，不然有些地方看不懂或不知配置。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2、关于输入捕获测量异常的提醒 </b> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>实际应用过程中使用TIMER进行输入捕获测量时间失败者较常见，常见的原因可能有如下几方面：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 待测量的脉冲长于当前ARR所对应的时间，代码又没考虑溢出事件；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 使用PMW输入模式测量时选择了TI1/TI2以外的通道；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. CCR寄存器整体上是可读可写的。但是，当相应通道配置为捕获输入时，<b>CCR</b>为只读寄存器，即用户不可修改或赋值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>4. 在发生捕获事件时，CCR影子寄存器的内容由硬件自动将其拷贝到CCR预装寄存器，以供用户或DMA读取。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>刚兴趣的朋友可以关注“AI电堂”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>或者直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "定时器（程序开发）", 
                    "tagLink": "https://api.zhihu.com/topics/19655962"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/80094984", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "【直播预告】STM32全国巡回研讨会直播预告", 
            "content": "<p><b><i>引言  </i></b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>围棋有一个基本规则，即一块棋有“两只真眼”，就是活棋；人具有“两只眼”是为了更精确地观察立体的大千世界，形成“视觉位移”。我们将这样的观点投射到商业产品中，来考量嵌入式领域的现象级产品STM32，这个每年出货10亿片的产品系列，它的“两只眼”是什么？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32火起来，一只眼是与arm的坚定合作，最早采用了低功耗高性价比的产品架构，快速的产品迭代也与移动应用的迅猛发展保持了同频；另一只眼，着力在产品生态的探索，以及对未来市场应用的洞察，不断强调产品的丰富性和易用性的同时，也与各环节商业伙伴达成泛生态合作。<b>简而言之，就是让更多的开发者更好更快更简便地使用STM32。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-thumbnail=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;360&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-thumbnail=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d71c05f2f25d7ba034f80537e56146b7_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a></p><p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国巡回研讨会</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>自2007年以来，<u><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b></u>在12年间，每年都走进不同的城市，为开发者诠释产品和生态的创新性演进及未来设想。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"626\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;626&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"626\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-00306b50b055ad4a324dcb38cfc817d3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>今年，不仅为工程师们推介嵌入式领域最新产品，还将解读人工智能大趋势下，STM32如何AI你的应用。同时，为惠及更多开发者，首次将<u><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b></u>搬到线上，进行直播。（点击链接预约直播）</p><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>全程直播上海站活动，重点宣讲：</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>STM32高性能产品延展至Cortex-A内核产品</li><li>STM32蓝牙无线产品量产发布</li><li>STM32高性能模拟产品及入门型产品</li><li>STM32生态系统新成员（Cube.AI、TouchGFX…）</li><li>携手合作伙伴，呈现多样化的创新产品及落地方案</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;459&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"459\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e30447f4089922ef94ce56709936737a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>直播日程（9月27日）</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;936&#39; height=&#39;606&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"606\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"936\" data-original=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ec3a1c72b4ed3a6fbed850ac631857ee_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>如何参与<a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a>直播？</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 如果你还不是电堂粉，赶紧扫一下二维码找到电堂小姐姐，加入电堂大家庭。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;583&#39; height=&#39;800&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"583\" data-original=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-789b055cb2f7a06a4db8a38c6fff130f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>2. 戳这里，☞ <b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/593848871\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b>预约直播。<b>直播当天，有机会赢取多种开发板及酷炫特等奖 — 大疆机甲大师（STM32 Inside）。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>3. 预约成功后，电堂小姐姐将带你进入<b>“STM32全国研讨会交流群”</b>，群里互动，有机会得直播微信红包哦 ~~~</p><p class=\"ztext-empty-paragraph\"><br/></p><h3><b>观众福利</b></h3><p class=\"ztext-empty-paragraph\"><br/></p><p>参与直播，填写调查问卷，有机会赢取丰厚奖品。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>特等奖：机甲大师 RoboMaster S1 一名</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5b7efaa239e2de6199fd2ad6ce48e90a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-5b7efaa239e2de6199fd2ad6ce48e90a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-5b7efaa239e2de6199fd2ad6ce48e90a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5b7efaa239e2de6199fd2ad6ce48e90a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0ca747cbd7f3b335f7916ad3010f6105_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0ca747cbd7f3b335f7916ad3010f6105_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;651&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0ca747cbd7f3b335f7916ad3010f6105_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0ca747cbd7f3b335f7916ad3010f6105_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"20\" data-thumbnail=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;640&#39; height=&#39;20&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"20\" data-thumbnail=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a8f10b59139a7d343010ec83324551c0_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>来吧，<b>9月27日，我们在直播间等您!</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>扫描下方二维码，参加现场研讨会</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-08b910474454fe2bb4324273ded98086_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"260\" class=\"content_image\" width=\"260\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;260&#39; height=&#39;260&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"260\" class=\"content_image lazy\" width=\"260\" data-actualsrc=\"https://pic3.zhimg.com/v2-08b910474454fe2bb4324273ded98086_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>活动提醒</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1. 电堂拥有直播活动最终解释权；</p><p>2. 本活动仅限电子行业从业人士及相关专业学生参与。</p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "研讨会", 
                    "tagLink": "https://api.zhihu.com/topics/20040994"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79946270", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 13, 
            "title": "【STM32学习笔记】USART 新特性", 
            "content": "<p>之前的学习笔记“SPI不够用？USART来帮忙”一文中介绍了<b>用如何把USART当做SPI来用</b>的方法。此外，ST的USART还有很多新特性，没准有你不知道的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在此，我们整理出来以下串口新特性，供大家参考。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>支持RXD和TXD管脚互换</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>很多时候，我们在外接RS232芯片时，很容易将RXD和TXD两根线接反。这类低级错误，一般是老司机才会犯。如果大家知道<b>USART的TXD和RXD管脚可以互换</b>，那么在连接外设RS232芯片时，如果发生错误，就不必再修改硬件，只需直接在软件中将RXD和TXD的管脚反转过来即可修正错误。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ace0f901741689ef8f603f6b704e00db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"682\" class=\"origin_image zh-lightbox-thumb\" width=\"894\" data-original=\"https://pic4.zhimg.com/v2-ace0f901741689ef8f603f6b704e00db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;894&#39; height=&#39;682&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"682\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"894\" data-original=\"https://pic4.zhimg.com/v2-ace0f901741689ef8f603f6b704e00db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ace0f901741689ef8f603f6b704e00db_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考上图，设置SWAP位，即可将RXD和TXD管脚互换。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>支持接收和发送的电平极性反转</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>第二个特性是，<b>接收和发送的电平极性是可以反转的。</b>通常默认串口电平是高电平为逻辑1，低电平为逻辑0；而在ST的USART中是可以将高电平设置为逻辑0，低电平设置为逻辑1的。这一特性，让我们在一些特殊的场景下灵活使用，举个栗子，USART外接了反相器时就可以直接使用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在数据接收发送寄存器中，数据也是可以反转的，原来的0变为1，原来的1变为0，这和电平极性反转是类似。需要特别注意的是，在极性反转的时候，起始位和结束位也都反转了，所有的信号电平都反转；而在数据寄存器中只反转了数据位，其中也包含了校验位，没有反转信号的起始位和结束位的极性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e03f875569e305b6b90645f4663edc3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic3.zhimg.com/v2-e03f875569e305b6b90645f4663edc3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;639&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic3.zhimg.com/v2-e03f875569e305b6b90645f4663edc3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e03f875569e305b6b90645f4663edc3a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>参考上图，在USART_CR2寄存器中TXINV、RXINV和DATAINV位来进行设置。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>支持数据高位与低位反序发送或接收</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>第三个新特性，<b>发送和接收数据时，可在寄存器中设置是先发低位还是先发高位</b>。默认的配置都是先发送或接收低位的信号（bit 0），实际应用中，通过USART_CR2中的MSBFIRST设置后，也可以让USART先发送或接收高位信号（bit 7/8），这一点在对数据进行反序的时候会经常用到它。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6ff3197c071c3cac0e0fd05c91e31f4c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic1.zhimg.com/v2-6ff3197c071c3cac0e0fd05c91e31f4c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;588&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic1.zhimg.com/v2-6ff3197c071c3cac0e0fd05c91e31f4c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6ff3197c071c3cac0e0fd05c91e31f4c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以考虑这种情况，如果需要把串口接收到的数据先进行反序操作之后，再进行计算，那这个硬件的功能就可以帮助我们节省很多软件的工作量。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART支持DMA传输</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后，<b>STM32的USART都是支持DMA</b>的，这一点有利于做数据的连续发送和数据的缓冲接收。在某些STM32产品系列中，如STM32F4和H7系列具有专门的串口FIFO，这就可以用来做串口唤醒，先让MCU进入到Sleep模式，当接收到一个完整的数据包，这个数据包可能是100个字节或者200个字节，之后再唤醒单片机，这样既可以做到不丢数据又可以降低MCU的唤醒频率。另外，<b>USART的接收还具有超时功能</b>，可以人为设定一个时间，在USART的RTOR寄存器中进行设置，当串口接收的数据帧之间超过了这个设定值，就会引发一个超时中断，串口中会有一个叫RTOF的标志位来显示发生的超时事件，我们通过这个中断中应用的代码就可以知道串口的数据发生了中断现象，近似可认为对方的数据已经发送完成。这种方式，在串口上层协议的开发中，有很多应用场景。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART 新特性小结</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>支持RXD和TXD管脚的互换</li><li>支持管脚上的电平逻辑反转和数据寄存器中的逻辑反转</li><li>支持数据高位与低位反序发送或接收，既可以先发送或接收低位，也可以先发送或接收高位</li><li>支持接收数据的超时功能，并且每个USART都可以支持DMA传输</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>或者直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "SPI", 
                    "tagLink": "https://api.zhihu.com/topics/19890005"
                }
            ], 
            "comments": [
                {
                    "userName": "xiao fang", 
                    "userLink": "https://www.zhihu.com/people/062fe7394c5dca9bfc4b35b46e735a1f", 
                    "content": "<p>RX和TX的交换只是少部分器件上才支持，当前主流的F1和F4系列都不支持的。</p><a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-da6061b49095b3aff2a98395a3a4cf8e.gif\" data-width=\"\" data-height=\"\">[不抬杠]</a>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "AI电堂", 
                            "userLink": "https://www.zhihu.com/people/f29964d190c8e4b669bb47d56ff8368c", 
                            "content": "<p>所以叫“新特性”啊</p><a class=\"comment_sticker\" href=\"https://pic1.zhimg.com/v2-12562ad40366818a1ea39bcecb2599a0.gif\" data-width=\"\" data-height=\"\">[害羞]</a>", 
                            "likes": 0, 
                            "replyToAuthor": "xiao fang"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79921228", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32F7系统配置控制器（SYSCFG）及复位和时钟控制（RCC）", 
            "content": "<p>这篇文章带大家看一下<b>STM32F7的系统配置控制器</b>。系统配置控制器主要用于：</p><p>1、 选择以太网PHY接口；</p><p>2、 交换FMC SDRAM存储区域与NOR/PSRAM存储区域；</p><p>3、 管理GPIO外部中断线连接；</p><p>在系统控制寄存器里有一个bit位来选择使用哪个选项字定义的启动基地址来启动。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8307efcc2e0ea7cc1a6f44d7ff4433a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic4.zhimg.com/v2-8307efcc2e0ea7cc1a6f44d7ff4433a7_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;530&#39; height=&#39;246&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"530\" data-original=\"https://pic4.zhimg.com/v2-8307efcc2e0ea7cc1a6f44d7ff4433a7_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8307efcc2e0ea7cc1a6f44d7ff4433a7_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>复位类型</b></p><p>一共有三种复位类型，系统复位、电源复位和备份域复位。</p><p>系统复位在VDD保持正常工作电压的前提下，有五种事件可以产生复位，分别是低功耗管理复位、软件复位、独立看门狗计数器溢出、窗口看门狗计数器溢出和NRST引脚上的低电平。这里低功耗管理复位指的是MCU执行低功耗模式进入序列的时候是产生复位还是停止待机模式，这个是可以通过选项字中的对应位来进行控制的。系统复位是不会复位备份域和用于查询复位源的RCC_CSR中的复位标志，通过复位标志可以找到产生复位的原因，是软件复位还是看门狗计数器溢出复位或者是NRST引脚上的低电平引起的复位。</p><p>电源复位指VDD工作电压变化引起的复位，它又分为上电掉电复位和退出待机模式复位。对于电源复位，备份域同样不会被影响。</p><p>备份域复位可以通过两种方式产生，一个是软件置位BDRST复位，另一种是当之前VDD和VBAT都是关闭的情况，现在两个中的任何一个又来电了也会产生备份域的复位。对于备份域的复位，备份SRAM的区域也不会被复位，这个区域唯一的复位方式是FALSH的保护等级从等级1切换到等级0。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-bd961e0dbfe105eee676fa45839eaf22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"234\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-bd961e0dbfe105eee676fa45839eaf22_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;234&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"234\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-bd961e0dbfe105eee676fa45839eaf22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-bd961e0dbfe105eee676fa45839eaf22_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>时钟源</b></p><p>F7一共有四类时钟源，分别为外部高速时钟（HSE）、内部高速时钟（HSI）、内部低速时钟（LSI）和外部低速时钟（LSE）。</p><p>外部高速时钟有两个时钟源，一个是外接的外部高速晶振，从4MHz到26MHz，也可以直接接一个外部的时钟源，它支持从1MHz到50MHz.</p><p>内部高速时钟信号由内部的16MHz的RC振荡器生成，系统复位后都默认选择内部高速时钟作为系统的时钟。HIS RC振荡器的优点是成本比较低、启动速度快，但是它的精度相对于外部高速时钟来说要低一点。</p><p>内部低速时钟是32KHz，它可以作为低功耗时钟源在停机和待机的状态下保持运行，可以供给独立看门狗和自动唤醒单元使用。</p><p>外部低速时钟由32.768KHz的低速外部晶振或者是陶瓷谐振器产生，可以作为实时时钟外设RTC的时钟源，它具有功耗低而且精度高的优点。</p><p><b>PLL</b></p><p>F7有三个PLL，分别为主PLL、PLLI2S、PLLSAI。</p><p>主PLL由HSE或者HIS提供时钟，并有两个不同的输出时钟，一个是高速系统时钟，最高可达216MHz；另外产生一个48MHz的时钟，可以给USB模块、SDMMC和RNG外设使用。</p><p>PLLI2S产生专供I2S，SAI和SPDIF-RX接口使用的精准时钟，以达到高质量的音频性能。</p><p>PLLSAI可以提供下列时钟：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>可以给SAI1和SAI2提供时钟，当PLLI2S需要被用来提供其他音频采样频率时，系统需要同时提供两种时钟频率；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>LCD-TFT控制器；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>48MHz时钟供USB、SDMMC和RNG使用。</p><p><b>时钟树</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-af634cc1a43ad76b739fd664540bfcb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"287\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-af634cc1a43ad76b739fd664540bfcb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;287&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"287\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-af634cc1a43ad76b739fd664540bfcb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-af634cc1a43ad76b739fd664540bfcb2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>从上图可以更加直观地看到F7时钟产生的情况。</p><p>F7为外设提供了更加灵活、丰富的时钟源的选择</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-05e7e2a74dadfe149c2f581b350a1526_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"412\" data-rawheight=\"274\" class=\"content_image\" width=\"412\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;412&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"412\" data-rawheight=\"274\" class=\"content_image lazy\" width=\"412\" data-actualsrc=\"https://pic3.zhimg.com/v2-05e7e2a74dadfe149c2f581b350a1526_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2c8be09dcbb85922cdfa41b0abed8e86_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-2c8be09dcbb85922cdfa41b0abed8e86_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;548&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-2c8be09dcbb85922cdfa41b0abed8e86_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2c8be09dcbb85922cdfa41b0abed8e86_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI微信”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>或者直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79767187", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 8, 
            "title": "STM32F7 片上闪存（Flash）", 
            "content": "<p>这篇文章我们来说一下<b>嵌入式FLASH</b>。</p><p><b>FLASH接口</b></p><p>FLASH接口其实在前面的文章中有提到，可以分为三类：</p><p>第一类，64位ITCM接口，该接口连接Cortex-M7的ITCM总线，用于指令执行以及数据读访问。它不支持写访问，支持64个标准化缓存行，256位宽。</p><p>第二类，64位AHB接口，该接口通过AHB总线矩阵连接Cortex-M7的AXI总线，用于代码执行以及读写访问。无论寻址的FLASH接口是TCM还是AHB，FLASH上的DMA和外设DMA数据传输都通过AHB接口完成。</p><p>第三类，32位AHB寄存器接口，该接口主要用于访问控制寄存器和状态寄存器。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a2e7b143ba544dfb931b1c6d47694d02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a2e7b143ba544dfb931b1c6d47694d02_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;205&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"205\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-a2e7b143ba544dfb931b1c6d47694d02_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a2e7b143ba544dfb931b1c6d47694d02_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FLASH构成</b></p><p>F7的FLASH最高有1M字节的用户闪存，它一共分为八个容量不等的扇区，这样FLASH分区可以存放不同的应用程序。</p><p>在信息块部分还包括64KB的系统闪存、1024个字节的OTP区和32字节的选项字。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2de81743c88f2736e10a9c950036145e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-2de81743c88f2736e10a9c950036145e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;305&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"305\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-2de81743c88f2736e10a9c950036145e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2de81743c88f2736e10a9c950036145e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在修改用户选项字之前，需要向选项密钥寄存器写入两个Key值，然后才能在FLASH_OPTCR寄存器中雪茹所需的选项值。</p><p>FLASH的擦除和编程操作的并行宽度主要取决于VDD的范围以及是否有采用外部编程的电压，最大的擦除和变成操作的并行宽度是在FLASHCR寄存器中的PSIZE这个字段进行设计的，但是要注意这个字段设计的值必须与实际的外部电压的条件是相符的。</p><p>下图就列出了外部电压范围和能够配置到的最大的并行位数的对应表格</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5e3b0196312b06cb8a69fdd037a86978_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"96\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-5e3b0196312b06cb8a69fdd037a86978_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;96&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"96\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-5e3b0196312b06cb8a69fdd037a86978_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5e3b0196312b06cb8a69fdd037a86978_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如果PSIZE设置的值和实际使用的外部条件不符，就会造成擦除或者编程操作可能导致不能预料的错误，即使能够读出数据，但数据的正确性不能保证。对于擦除操作来说，只能按照扇区或者整片擦除，擦除的时间也取决于PSIZE设置的值。</p><p><b>CPU时钟和FLASH等待周期之间的关系</b></p><p></p><p>我们知道FLASH的访问速度远远低于CPU的时钟，所以为了准确地读取FLASH的数值必须根据CPU的时钟频率和器件电源在FLASH存储寄存器中正确编写等待周期，这样才能保证准确读取FLASH的数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c38aa28b69cd6f20e268e99caa7cc598_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c38aa28b69cd6f20e268e99caa7cc598_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c38aa28b69cd6f20e268e99caa7cc598_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c38aa28b69cd6f20e268e99caa7cc598_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32F7中新增了选项字，，一个是在停止模式下冻结独立看门狗计数器，还有一个是在待机模式下冻结独立看门狗计数器，第三个是硬件/软件窗口看门狗的配置。需要注意的是，当修改这些选项字之后，需要复位系统来使修改起作用。</p><p>前面有介绍说F7的启动模式和之前F4、F3都不一样，所以相对的它的选项字也有了新的变化。下图显示了BOOT引脚为0和1时分别对应的启动地址的选项字。当外面的BOOT引脚为低电平时，BOOT_ADD0的选项字所定义的就是启动地址；当BOOT引脚为高电平时，BOOT_ADD1定义的是启动地址。在BOOT_ADD0和BOOT_ADD1中并不是直接写的就是启动地址，它的值和启动地址之间是有一个对应关系的，下图也给大家举了几个例子。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5ab4f6384c4bc19168eefbed020bf6ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-5ab4f6384c4bc19168eefbed020bf6ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;248&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"248\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-5ab4f6384c4bc19168eefbed020bf6ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5ab4f6384c4bc19168eefbed020bf6ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FLASH编程错误</b></p><p>FLASH的编程错误又分为写保护错误和编程错误。</p><p>写保护错误是尝试在写保护区域执行编程或擦除操作时，WRPERR位由硬件置1。</p><p>编程错误又分为好几种，一种是编程并行位数错误，当访问宽度和PSIZE所选并行位数类型不一致时，硬件置1；还有一种是编程并齐错误，对FLASH进行跨越128位行界限的数据编程操作时，将由硬件置位该标志位；第三种是擦除顺序错误，如果代码在控制寄存器未正确配置的情况下对FLASH执行擦除操作，则ERSERR错误标志位将置1；最后一种是操作错误，如果检测到FLASH操作请求，但由于存在并行位数错误、对齐错误或写保护错误而无法运行，将由硬件对该位置1.只有在使能错误中断后，该位才会置1.</p><p><b>FLASH中断</b></p><p>FLASH中断分为两类，一类是操作结束，一类是错误中断，它们在寄存器中都有对应的事件标志和使能控制位。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-47f2b50223ad2bf2072616b0ce81126e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-47f2b50223ad2bf2072616b0ce81126e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-47f2b50223ad2bf2072616b0ce81126e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-47f2b50223ad2bf2072616b0ce81126e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>F7的FLASH保护和F4是一样的。FLASH保护又分为读保护和写保护，写保护可以分别对各个扇区进行保护，防止因程序指针错乱而发生意外的写操作。FLASH选项寄存器中的nWRP位段包含了复位后扇区0-7的写保护选项字节值，通过对这些位执行写操作，可将新的写保护编程到FLASH。</p><p>对于FLASH的写保护，选项字控制寄存器中对应的位低电平表示写保护有效，当写保护有效的时候，不能对已经进行保护的扇区进行编程或者擦除操作，而且只要有一个扇区被写保护，芯片就不能执行全片擦除。</p><p>使能和除能写保护的操作过程是首先向选项字控制寄存器中的nWRPi位段写入需要的值，0表示使能写保护，1表示禁止写保护，之后置位FLASH选项字控制寄存器中的OPTSTRT位，等待BSY位清零之后对于FLASH写保护的配置就完成了。</p><p><b>FLASH的读保护分为三个级别</b></p><p>读保护Level 0就是没有读保护，选项字节中的RPD域应该是0xAA，这时候所有启动配置下，对闪存和备份SRAM的读操作都允许。</p><p>第二个级别是Level 1，当选项字节中的RPD域是非0xAA或者0xCC的值时是处于Level 1级别。在这个级别下，如果用户从用户闪存启动，这时候对闪存的访问是无限制的，如果是在调试的模式或者是SRAM或系统闪存启动时，对片上闪存是有访问限制的，不能读、编程和擦除，即使这时候nWRP为1也不行，但是可以通过SRAM运行代码修改选项字节来取消保护，也就是从Level 1降级到Level 0，硬件先对用户闪存和备份SRAM进行全部擦除，选项字节其他域不受影响。</p><p>最高级别的读保护是Level 2，在这个级别下，选项字节中的RDP域是0xCC，在这个级别，除了Level 1级别的保护，用户选项字节也不能再修改，也就是不能从Level 2降级到Level 1或Level 0，而且调试功能是被永久性禁止的，系统闪存启动也被禁止，不能通过bootloader修改选项字节。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e61872c71bded9f91e196638ff466491_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-e61872c71bded9f91e196638ff466491_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;254&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"254\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-e61872c71bded9f91e196638ff466491_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e61872c71bded9f91e196638ff466491_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2cccae85619c0d7adbaf5f44dd8d46ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-2cccae85619c0d7adbaf5f44dd8d46ea_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-2cccae85619c0d7adbaf5f44dd8d46ea_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2cccae85619c0d7adbaf5f44dd8d46ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>或者直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "Flash 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19728072"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79436719", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32F7高速缓存", 
            "content": "<p>STM32F7是第一款带有内部高速缓存的STM32微控制器，所以接下来我们会介绍一些和高速缓存和Cache相关的基本概念，会介绍一些如果是开发者在使用STM32F7的时候需要注意的事情。</p><p>STM32F7的内核中带有一级高速缓存，实现了4K的数据缓存和4K的指令缓存。</p><p>下面介绍一下什么是高速缓存和与高速缓存相关的一些基本概念。</p><p><b>高速缓存</b>就是高速存储器块，包括地址信息和相关联的数据，它的目的主要是为了提高对存储器的平均访问速度。</p><p>执行代码的时候CPU每次都要去访问FLASH，而我们知道FLASH的读取速度是远远低于CPU的主频的，所以需要设置一个等待周期来保证能够正确地从FLASH中把数据读出来。有了Cache之后，第一次访问FLASH读取出需要的指令和数据之后，可以把指令和数据先放到Cache里，当下次再需要这部分内容的时候就不需要再去访问FLASH，而是直接从Cache中把这部分内容读出来，这样就可以提高存储器的平均访问速度和程序的执行速度。</p><p>高速缓存的这种应用是基于下面两个程序的局部性：</p><p>一个是空间局部性，如果一个存储器的位置被访问，那么将来它附近的位置也会被访问，比如顺序执行代码或者是使用一个数据结构。</p><p>另一种是时间局部性，被访问过一次的存储器位置，接下来会被多次引用。比如代码中的循环。</p><p>下面介绍一下高速缓存中的一些术语。</p><p><b>缓存行</b>是指逻辑上的一组存储器位置，是内存交换数据的最小粒度。</p><p><b>缓存命中</b>是指要访问的数据或者指令已经在缓存中。</p><p><b>缓存缺失</b>是指要访问的数据或者指令不在缓存中<b>。</b></p><p>处理器需要访问某个可缓存的寄存器位置时，会先检查缓存内是否已经存在该位置的内容。如果缓存命中，就直接从缓存读出；如果缓存缺失，就从存储器中读出，同时放入缓存。</p><p><b>缓存分配</b>是指当出现缓存缺失时，需要在缓存中发现一个位置，并且把新的缓存数据存到这个位置。在缓存分配时有两种策略，一种是读分配，就是说在进行读操作发生缓存缺失的时候，进行缓存分配，所有可缓存的存储器都是读分配；另一种是写分配，是在进行写操作发生缓存缺失的时候进行缓存分配。</p><p>在应用高速缓存的时候会带来一致性问题，一个原因是程序员不能控制对存储器的访问时机，不知道什么时候会发生CPU访问存储器，可能在读数据写数据的时候都是从缓存中读从缓存中取和把数据写到缓存中，根本就没有真正地访问存储器，可能在某一个时刻缓存满了，但又需要存新的缓存内容，这个时候可能会把数据重新写到FLASH中，这个时机是程序员不能控制的。另一个问题是同一个数据被保存在多个物理位置，被保存在缓存里，又被保存在FLASH中，这两个物理位置中的数据并不都是一致的，所以这个时候就会出现一致性问题。</p><p><b>驱逐</b>是指从缓存中移除一个缓存行，为新的数据腾位置的过程。它发生在一个标位“dirty”的缓存行被新的缓存行替代的时候，标位“dirty”是说现在数据还只是存在缓存里，需要更新到存储器中。</p><p><b>回写</b>是指在对数据进行操作时，只更新缓存，然后将缓存行标记为“dirty”，当这个缓存行需要被替换的时候，再将数据写到存储器中。</p><p><b>透写</b>是指在对数据进行操作的时候同时更新缓存和二级存储，这时候缓存行不被标记为“dirty”。</p><p><b>缓存策略</b></p><p>第一种：透写，就是说数据直接同时写到缓存和下一级存储器中。</p><p>第二种：回写，是说数据只写到缓存。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-546c6eed657d2e8da375d989dbfe8f5e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-546c6eed657d2e8da375d989dbfe8f5e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;489&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"489\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"489\" data-original=\"https://pic3.zhimg.com/v2-546c6eed657d2e8da375d989dbfe8f5e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-546c6eed657d2e8da375d989dbfe8f5e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Cortex-M7高速缓存</b></p><p>Cortex-M7的高速缓存采用了哈佛结构，指令缓存和数据缓存都是分开的，而且是可选的，只在AXIM接口有缓存。对于M7的系统架构来说，增加了Cache之后它增加了Cache的维护操作，增加了新的相关寄存器，最重要的是使用Cache会对系统软件有影响。</p><p>Cortex-M7高速缓存全面支持下列的缓存属性：</p><p>透写，不支持写分配；</p><p>回写，不支持写分配；</p><p>回写，支持写分配。</p><p>回写的方式有利于优化性能，因为减少了对FLASH的访问次数，但是会带来一致性的问题，Cortex-M7没有对一致性的硬件支持，所以需要从软件的层面去保证数据的一致性。</p><p><b>对于一致性有两种可选方案</b></p><p>一种是把所有的共享存储器都定义为共享属性，定义为共享属性之后这些区域将默认不被缓存到D-Cache，由于所有的操作都是直接针对二级存储器进行的，性能就会降低。但是因为这种情况下缓存对于这些区域是透明的，所以写软件会更容易。</p><p>另一种是通过软件对cache进行维护，包括两个方面，一方面M7的写操作必须是全局可见的，另一方面其他主设备的写操作要对M7可见。</p><p>存储器的属性可以由MPU来进行设定，包含共享属性、分配策略和存储器类型。</p><p>下图是存储器默认的映射和属性</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5857ab635401e3332d701523a8e311f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-5857ab635401e3332d701523a8e311f6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;294&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-5857ab635401e3332d701523a8e311f6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5857ab635401e3332d701523a8e311f6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>最后说一下初始化和使能以及缓存的时候需要注意的问题</p><p>上电复位时，在使能之前，cache必须全部被作废，作废就是告诉CPU现在缓存中的数据已经没有用了，如果想对这些数据进行操作的话必须重新从二级存储中把它读出来。如果不这样做，可能会引发程序不可预测的行为。如果是通过软复位并且确定复位前RAM中的值都是可靠的，可以不用做这一步。</p><p>为了保证数据的一致性，必须在除能D-cache之前对其进行清理，这个只在使用回写策略时需要，如果不这么做就可能会丢失数据。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 或者直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/79092144", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "STM32F7x6的存储器映射", 
            "content": "<p>这篇文章主要想给大家介绍一下<b>STM32F7x6的存储器映射</b>。</p><p>Cortex-M7的预定义和之前的M3、M4都是一样的，唯一的区别就是M7不再支持位带操作。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7ab86097c1d442422d8a6578952e3d0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-7ab86097c1d442422d8a6578952e3d0d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-7ab86097c1d442422d8a6578952e3d0d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7ab86097c1d442422d8a6578952e3d0d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Cortex-M7有4类总线接口，这4类总线接口都有自己可以访问的地址，总线接口和要访问的地址范围之间是存在一个固定的映射，这个固定的映射决定了通过哪个接口来访问我的存储器。存储器的属性可以通过MPU设置管理。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ba3dd391319cc59fb677eae0cf182ee5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb\" width=\"547\" data-original=\"https://pic2.zhimg.com/v2-ba3dd391319cc59fb677eae0cf182ee5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;547&#39; height=&#39;319&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"319\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"547\" data-original=\"https://pic2.zhimg.com/v2-ba3dd391319cc59fb677eae0cf182ee5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ba3dd391319cc59fb677eae0cf182ee5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下图是Cortex-M7存储器映射以及访问接口的表格。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-320bd550a5c22e29fdbee39375253996_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-320bd550a5c22e29fdbee39375253996_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;304&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"304\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-320bd550a5c22e29fdbee39375253996_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-320bd550a5c22e29fdbee39375253996_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面的图片是STM32F7x6的片上存储器映射。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-279d763a8d1e6d31a378b5d0858ab4d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-279d763a8d1e6d31a378b5d0858ab4d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;284&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-279d763a8d1e6d31a378b5d0858ab4d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-279d763a8d1e6d31a378b5d0858ab4d1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32F7x6可以通过FMC和Cortex PI接口来外扩外部的存储器，下图是STM32F7x6外部存储器的一个映射。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-df5c20a7cfe38afc9c6aede749ba96be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"340\" class=\"content_image\" width=\"304\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;304&#39; height=&#39;340&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"340\" class=\"content_image lazy\" width=\"304\" data-actualsrc=\"https://pic3.zhimg.com/v2-df5c20a7cfe38afc9c6aede749ba96be_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这个映射并不是完全固定的，后面会再具体介绍。</p><p>要说一下的就是Cortex PI，我们可以看到上图有一个256MB的Cortex PI的映射空间，它有好几种工作模式，其中一种就是memory mapped模式，在这种模式下Cortex PI可以映射256MB的空间，对于这段空间的Cortex PI的存储器可以完全像操作内部存储器一样地通过地址去进行操作。</p><p><b>片上SRAM</b></p><p>片上SRAM包括系统SRAM，系统SRAM分为三个部分：64KB的DTCM-RAM、16KB的SRAM2和240KB的SRAM1，这三部分可以被所有AHB总线的主设备访问。</p><p>还有一部分是ITCM-RAM，这部分RAM只能被CPU访问。</p><p>SRAM可以以8位、16位、32位的宽度进行访问。</p><p>DTCM RAM、ITCM RAM可以以8位、16位、32位、64位的宽度进行访问。</p><p>在备份域还有4KB的Backup SRAM，它的地址范围是0x40024000-0x40024FFF。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b> 也可以直接登录电堂网站观看相关课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78930416", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【直播回放】低功耗蓝牙技术与新一代无线MCU", 
            "content": "<p><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/469784448\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">新一代无线微控制器STM32WB</a></b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果STM32遇见低功耗蓝牙，会碰撞出怎样的独特解决方案？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB双核无线微控制器配备双核无线微控制器(MCU)配备Bluetooth® 5、OpenThread和ZigBee®3.0连接技术，同时兼备超低功耗性能。通过整合意法半导体的STM32L4 Arm® Cortex®-M4 MCU的功能和一颗集成Cortex-M0 +专用内核管理的射频芯片，STM32WB具备高性能、多协议并发、数据安全功能、低功耗、低成本等特点，并通过丰富的 STM32Cube 生态系统帮助用户快速进入市场，是远程传感器、可穿戴跟踪器、楼宇自动化控制器、计算机外围设备、无人机和其它物联网设备的理想选择。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高性能：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>双核简易开发：2个独立处理器内核，保证实时处理</li><li>功能特性丰富：超低功耗，外设丰富</li><li>工作电压1.71至3.6V</li><li>工作温度-40<b>°</b>C至+105<b>°</b>C</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>多协议并发：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>完全认证的BLE 5.0 协议栈；数据速率提高2倍，支持2Mbps高速模式；支持BLE Mesh技术，提高网络覆盖面</li><li>支持最新的 IEEE 802.15.4无线通信标准；OpenThread协议栈，ZigBee 3.0协议栈；支持BLE和OpenThread的动/静态并发模式</li><li>支持私有协议栈 (例如BLE或802.15.4)；同类最好的射频收发器，输出功率高达+6dBm，射频链路预算102dB；接收功耗仅为4.5mA，发射功耗5.2mA(@ 0dBm)，适合能耗敏感的应用；集成balun巴伦平衡器，降低物料清单成本</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>安全：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>软件安全架构</li><li>STM32W的攻击防御措施</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>超低功耗：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>多种低功耗模式</li><li>双核处理器的优势</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低成本：</b>集成越多，BOM降幅越大</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>产品快速上市：</b>完备的软硬件开发工具，全面契合STM32泛生态，助力产品快速上市。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;491&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>回放链接：</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3Db3879d33da724511bb15c505e359848e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">c.51diantang.com/column</span><span class=\"invisible\">detail?id=b3879d33da724511bb15c505e359848e</span><span class=\"ellipsis\"></span></a><p class=\"ztext-empty-paragraph\"><br/></p><p>关注“<b>AI电堂</b>”公众号了解更多内容</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "低功耗蓝牙", 
                    "tagLink": "https://api.zhihu.com/topics/19868970"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78897826", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 3, 
            "title": "STM32全国研讨会要开始巡回宣讲啦~", 
            "content": "<p></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-1219503c3c7f003fb5c4c6f76d010140_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-1219503c3c7f003fb5c4c6f76d010140_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;597&#39; height=&#39;645&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"645\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"597\" data-original=\"https://pic1.zhimg.com/v2-1219503c3c7f003fb5c4c6f76d010140_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1219503c3c7f003fb5c4c6f76d010140_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上面的复古海报是<u><b><a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/roadshow\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b></u>第一届巡回研讨会的海报，那是在<b>2007年</b>！12年的发展，<b>STM32</b>从只有STM32F101和STM32F103，不断递进式创新，形成<b>5大系列、17条产品线</b>的产品布局和定位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-ff49179be107ce220a719f206c6984a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-ff49179be107ce220a719f206c6984a0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;605&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-ff49179be107ce220a719f206c6984a0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-ff49179be107ce220a719f206c6984a0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在通用型微控制器领域，<b>STM32</b>一直在开拓新边疆，从突破以往16位单片机的专用架构、指令系统的局限开始，不断降低32位微控制器的成本和功耗、提高集成度、发掘新应用。</p><p><u><b><a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/roadshow\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></b></u>跨越12载，始终秉承“<b>STM32释放你的创造力</b>”初心，如今已成为工程师洞悉嵌入式领域最新产品和人工智能物联网技术趋势的盛会。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2019<u><a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/roadshow\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32全国研讨会</a></u>将走进13座城市，巡回宣讲：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>STM32高性能产品延展至Cortex-A内核产品</li><li>STM32蓝牙无线产品量产发布</li><li>STM32高性能模拟产品及入门型产品</li><li>STM32生态系统新成员（Cube.AI、TouchGFX…）</li><li>携手合作伙伴们，呈现多样化的创新产品及落地方案<br/></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>日程安排</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：13:30-13:50</p><p>主题：STM32中国市场策略以及新产品介绍</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：13:50-14:20</p><p>主题：新一代STM32:G4&amp;G0！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：14:20 -14:50</p><p>主题：高性能的新选择，多核+ STM32（STM32MP1+双核STM32H7）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：14:50-15:10</p><p>主题：茶歇</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：15:10 -15:40</p><p>主题：STM32WB 的技术特点以及在可穿戴设备上的应用举例</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：15:40-16:10</p><p>主题：STM32MP1的体系结构及技术要点</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：16:10-17:00</p><p>主题：STM32生态系统家族新成员 (SDK5.3, Cube.AI, Cube.IDE, TouchGFX)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：17:00-17:30</p><p>主题：合作伙伴赋能前沿应用，开拓市场边界</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：17:30-17:50</p><p>主题：问答环节</p><p class=\"ztext-empty-paragraph\"><br/></p><p>时间：17:50-18:00</p><p>主题：抽奖</p><p>*实际日程以现场为准，意法半导体保留对日程进行调整的权利。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月17日</b></p><p><u><b>北京</b></u>：北京北辰洲际酒店（北京市朝阳区北辰西路8号）</p><p><u><b>杭州</b></u>：杭州龙禧福朋喜来登酒店（杭州市滨江区东信大道868号）<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月19日</b></p><p><u><b>成都</b></u>：成都协信中心希尔顿酒店（成都市成华区踏水桥西街99号）</p><p><u><b>合肥</b></u>：合肥皇冠假日酒店（安徽省合肥市蜀山区黄山路598号）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月21</b></p><p><u><b>深圳</b></u>：深圳大中华喜来登酒店（深圳市福田区福华路大中华国际交易广场）</p><p><u><b>西安</b></u>：西安香格里拉大酒店（西安市科技路38号乙）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月23日</b></p><p><u><b>南京</b></u>：南京景枫万豪酒店（南京市江宁区双龙大道1519号）</p><p><u><b>顺德</b></u>：顺德美的万豪酒店（广东省佛山市顺德区大良南国东路388号）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月25日</b></p><p><u><b>长沙</b></u>：长沙运达喜来登酒店（长沙市开福区芙蓉中路一段478号）</p><p><u><b>济南</b></u>：济南富力凯悦酒店（济南市市中区经四路187号）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>9月27日</b></p><p><u><b>厦门</b></u>：厦门凯宾斯基酒店（厦门市思明区湖滨中路98号）</p><p><u><b>上海</b></u>：上海中星铂尔曼大酒店（上海市徐汇区浦北路1号）</p><p><u><b>广州</b></u>：广州天河希尔顿酒店（广州市天河区林河西横路215号）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"134\" data-thumbnail=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;134&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"134\" data-thumbnail=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9a990984a6b8f7f7b3c167d0a48d8599_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>抽奖环节奖品大曝光！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一等奖</b>：Bose 700无线降噪耳机</p><p>           （每个城市限一份）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二等奖</b>：华米 GTR智能手表</p><p>          （每个城市限两份）</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三等奖</b>：象印保温杯480ML</p><p>          （每个城市限五份）</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还有更多最新<b>NUCLEO开发板</b>等你拿！</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>报名链接：</b></p><a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/roadshow\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-6354861ab0cb8e3edb774fba38772701_180x120.jpg\" data-image-width=\"1139\" data-image-height=\"119\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2019年STM32全国研讨会 | STM32/STM8微控制器 | MCU单片机 | 意法半导体STM</a><p class=\"ztext-empty-paragraph\"><br/></p><p>也欢迎大家关注“<b>AI电堂</b>”公众号了解更多相关内容</p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78383363", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32F7x6的系统架构", 
            "content": "<p>这篇文章主要给大家介绍一下<b>STM32F7x6的系统架构</b>。</p><p><b>STM32F7系列三个提高处理器性能的特性：</b></p><p>第一个是STM32F7拥有两个独立的机制实现零等待执行性能，从Flash执行的时候零等待的一个执行性能，一个是ST的ART加速器，一个是M7内核独有的可用于内部和外部存储器的一级缓存，在STM32F7里拥有4KB的指令缓存和4KB的数据缓存。</p><p>第二个是STM32F7拥有AXI和多层AHB总线矩阵，除了内核作为总线矩阵的MASTER以外，还有两个通用DMA，一个以太网专用DMA，一个USB专用DMA，还有硬件图形加速器都是作为总线矩阵的MASTER。这些DMA可以在CPU不参加的情况下进行数据的传输来减少CPU的负荷，提高处理器的性能。</p><p>第三个是大容量分布式SRAM，在STM32F7系列里有多大320KB的系统RAM，包括连接到总线矩阵的SRAM1（240KB），SRAM2（16KB）和64KB数据的TCM RAM。除此之外，还有16KB的指令TCM RAM和4KB的备份SRAM，这4KB的备份SRAM的地址范围为0x40024000-0x40024FFFF。</p><p><b>下面我们说一下STM32F7的整体系统框架</b></p><p>STM32F7是基于Cortex-M7的内核，它拥有更高的运行和数字信号处理能力，STM32F7还拥有更多的总线主设备，除了内核，我们之前也有说到STM32F7还有两个通用的DMA，以太网专用的DMA、USB专用的DMA、LCD-TFT DMA和一个通信加速器。</p><p>STM32F7还有更多的片上SRAM，包括SRAM1、SRAM2和数据TC SRAM，加起来一共有320bit。它还有64位宽的AXI总线，AXI总线带来了更大的取指和数据读取宽度，在AXI总线接口上Cortex-M7内部带有一级缓存，这大大提高了从外部存储器执行的性能。连接到TCM接口的64KB的DTCM RAM和16KB的ITCM RAM，这两个部分的RAM可以被内核直接访问，访问的速度更快。</p><p><b>STM32F7还支持更多的外设，比如说Quad SPI等。</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-a71288c704becdc6eb68e1e90c13950b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"302\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-a71288c704becdc6eb68e1e90c13950b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;302&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"302\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-a71288c704becdc6eb68e1e90c13950b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-a71288c704becdc6eb68e1e90c13950b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>整个STM32F7的系统架构是基于两个子系统</b></p><p>一个是AXI转多层AHB总线桥，它实现了从AXI到AHB协议的转换，包括一个AXI转64位AHB桥，它连接到内部的FLASH；三个AXI转32位AHB桥，连接到下面大的多层AHB总线矩阵。</p><p>另一个子系统就是下面大的多层AHB总线矩阵，这个多层AHB总线矩阵连接了所有的MASTER和SLAM，它包括一个32位的多层AHB总线矩阵、一个64位的小的多层AHB总线矩阵，小的多层AHB总线矩阵它将来自CPU的64位的总线和来自通用DMA的32位AHB总线连接到内部FLASH。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a75a3385a0211327b79416e22be201e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-a75a3385a0211327b79416e22be201e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;320&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"320\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-a75a3385a0211327b79416e22be201e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a75a3385a0211327b79416e22be201e1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>FLASH接口</b></p><p>FLASH接口包括三个主接口，分别为64位ITCM接口、64位AXI/AHB接口和32位AHB寄存器接口</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-f53da3b5a1a1f40f7959a4407591726b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb\" width=\"547\" data-original=\"https://pic4.zhimg.com/v2-f53da3b5a1a1f40f7959a4407591726b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;547&#39; height=&#39;216&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"547\" data-original=\"https://pic4.zhimg.com/v2-f53da3b5a1a1f40f7959a4407591726b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-f53da3b5a1a1f40f7959a4407591726b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>DMA传输</b></p><p></p><p>DMA传输可以访问到映射到AXI接口的内部FLASH、SRAM1、SRAM2、FMC和Quad SPI。DTCM可以通过Cortex-M7的AHBS总线进行访问，但是需要注意的是AHBS不能访问ITCM总线。DMA不能访问映射到ITCM总线的存储空间，包括ITCM-RAM和映射到ITCM地址的FLASH空间。</p><p>DMA1只能实现外设和存储器之间的传输，存储器到存储器的传输只能通过DMA2来实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"small\"><noscript><img src=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1280&#39; height=&#39;1280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e863a0f9cb38ce3c884ddb6f2d402ef6_b.jpg\"/></figure><p><b> 或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78219726", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "Cortex-M3的存储保护单元", 
            "content": "<p>这篇文章我们来介绍一下<b>Cortex-M3的存储保护单元（MPU）</b>。</p><p>MPU通过将存储器空间划分成不同的区域，可以对每个区域进行访问属性的配置，通过这种方法可以防止用户应用程序破坏操作系统使用的数据，，防止一个任务访问其他任务的数据区，还可以用来检测堆栈溢出和数组越界等。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-73d7b8398309eec0f444908d50361643_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"549\" data-original=\"https://pic4.zhimg.com/v2-73d7b8398309eec0f444908d50361643_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;549&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"549\" data-original=\"https://pic4.zhimg.com/v2-73d7b8398309eec0f444908d50361643_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-73d7b8398309eec0f444908d50361643_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>MPU在执行其功能时是以region为单位的，一个region实际上就是一段连续的地址，只是它们的位置和范围都要满足一些限制，比如最小容量等。</p><p>M3的MPU最多支持8个region,region最小容量为32字节，还允许启用一个“背景region”,背景region是指全部的地址空间只能特权级享用。</p><p>各个region可以相互重叠，重叠部分的属性由编号最大的region来决定。</p><p>每个region还可以等分为8个子region，子region完全继承父region的属性。Region的容量必须大于等于256字节才能划分子region。</p><p>每个子region可以独立的使能或者除能。</p><p>若某个子region被除能，而这部分地址范围有没有落在其他region中，则对该子region覆盖的范围进行访问会引发fault异常。</p><p><b>下图是一个region的划分与关系的例子。</b></p><p>假设现在定义了region 0-region 3一共四个region,背景region可以通过设置MPUCR寄存器中的PRIVDEFENA位来进行启用或禁止。</p><p>我们先看左半部分，这部分是没有启用“背景region”，在这种情况下，region 0和region 1都使用各自的规则，region 3和region 2的有部分重叠，重叠的部分使用region号大的所定义的规则，没有重叠的部分仍然使用region 2的规则，对于没有定义的区域是禁止访问的。</p><p>右半部分是启用了“背景region”的，在这种情况下，region 0和region 1还是使用各自的规则，region 3和region 2的重叠部分使用region 3的规则，没有重叠的部分仍然使用region 2的规则。与左半部分的不同之处在于，对于没有定义的区域，如果启用了“背景region”，这部分将变成是特权代码可以访问的，而不像左半部分对它们进行访问就会产生fault异常。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-dd3dbe3050a504fe7e36eb89eba81cfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic4.zhimg.com/v2-dd3dbe3050a504fe7e36eb89eba81cfb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;515&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"515\" data-original=\"https://pic4.zhimg.com/v2-dd3dbe3050a504fe7e36eb89eba81cfb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-dd3dbe3050a504fe7e36eb89eba81cfb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通过MPURASR寄存器可以为各个region配置不同的属性，例如可否取指、可否共享、可否缓存缓冲、访问许可等，还可以在这个寄存器中使能或者禁止某个region。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-022d12f522796d2282e8d7c5e88678db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-022d12f522796d2282e8d7c5e88678db_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;272&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"272\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-022d12f522796d2282e8d7c5e88678db_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-022d12f522796d2282e8d7c5e88678db_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下图是STM32MPU的配置例程，需要注意的是配置MPU之前，必须先关闭MPU功能，如果在程序运行中更新MPU的配置，还要关闭中断。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-93263dc823d96943fa79763adb677d3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic3.zhimg.com/v2-93263dc823d96943fa79763adb677d3a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;543&#39; height=&#39;293&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"543\" data-rawheight=\"293\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"543\" data-original=\"https://pic3.zhimg.com/v2-93263dc823d96943fa79763adb677d3a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-93263dc823d96943fa79763adb677d3a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>子region的应用</b></p><p>假设有这样一种应用情况，M3的外设区有0-7一共八个外设，其中有些外设是用户程序可以访问的，有一些外设是只有特权级才能访问，怎么实现对这些只有特权级才能访问的外设的保护呢？</p><p>可以有几种方法，定义多个用户级和特权级的外设，或者是在用户级外设上重叠定义特权级的region，但是这种做法就很容易消耗掉宝贵的八个region的个数，因为我们最多只允许划分八个region。还有种方法是在用户级的外设的region中启用子region除能机制，这种方法的做法是首先先启用一个“背景region”，再为这八个外设的整个空间定义一个用户region，然后再将这个用户region等分为八个子region分别对应每个外设区，将特权级外设对应的子region从用户级region中除能，这样这些区域将使用背景region的属性，就变成了特权级程序才能访问的了。</p><p>对比之下我们就可以看出，如果是用前面两种方法的话，我们至少需要定义3-5个region，而用后面的子region除能机制去做的话，我们只需要一个region就够了，但是这种方法有一个限制就是这八个外设区的大小必须是相等的，也就是能够被等分的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-29bf5ba63d1e8b433a0e3f35a50beeab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"531\" data-original=\"https://pic4.zhimg.com/v2-29bf5ba63d1e8b433a0e3f35a50beeab_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;531&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"531\" data-original=\"https://pic4.zhimg.com/v2-29bf5ba63d1e8b433a0e3f35a50beeab_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-29bf5ba63d1e8b433a0e3f35a50beeab_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>M3中MPU是可选单元，当MPU单元不存在或者是存在但没有启用的时候，M3有一个默认的存储器访问许可，下面的表格中列出了缺省情况下各个存储器地址范围的访问许可。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3af511801f7e3e8fe56c06f9ca35ce94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-3af511801f7e3e8fe56c06f9ca35ce94_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;433&#39; height=&#39;270&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"433\" data-rawheight=\"270\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"433\" data-original=\"https://pic1.zhimg.com/v2-3af511801f7e3e8fe56c06f9ca35ce94_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3af511801f7e3e8fe56c06f9ca35ce94_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>有一个和存储器缺省访问许可相关的问题，STM32外扩SDRAM的地址范围从0xC000_0000到0xDFFF_FFFF，这个地址范围缺省的情况下是不支持取指操作的，所以如果想在外设SDRAM上运行代码的话就必须要启用并且修改MPU的配置才能正确运行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-7135951167d37d8cc324cc6f89e82fc4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-7135951167d37d8cc324cc6f89e82fc4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;498&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"324\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"498\" data-original=\"https://pic1.zhimg.com/v2-7135951167d37d8cc324cc6f89e82fc4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7135951167d37d8cc324cc6f89e82fc4_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6d56039d0dbe99770848538b2e2a49d9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"147\" data-rawheight=\"146\" class=\"content_image\" width=\"147\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;147&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"147\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"147\" data-actualsrc=\"https://pic2.zhimg.com/v2-6d56039d0dbe99770848538b2e2a49d9_b.png\"/></figure><p><b>或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "ARM Cortex M", 
                    "tagLink": "https://api.zhihu.com/topics/20007904"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77876147", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 11, 
            "title": "【STM32学习笔记】SPI不够用? USART来帮忙", 
            "content": "<p>如果您在使用STM32的时候，恰好缺少一个SPI接口，同时片上的资源还有多余的USART（一般来说，USART的接口都较丰富，比如STM32L0系列的产品），我们完全可以<b>用USART来替代SPI</b>，效果非常不错。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>本文将向大家介绍<b>如何把USART当做SPI来用</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>USART是指全双工通用同步/异步串行收发模块，该接口是一个高度灵活的串行通信设备。那么，<b>它与UART有什么区别呢？它的硬件连接方式是怎样的？该如何使能USART的SPI模式？把USART当做SPI来使用的时候和标准的SPI有什么区别，需要注意哪些事项？</b>本文将逐一为大家解读。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>UART与USART的区别</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>早期在开发8051的时候使用的都是UART，大家可能了解的比较多一些。UART的全称叫做通用异步串行收发器，Universal Asynchronous Receiver/Transmitter，用于异步通信。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>USART的全称叫做通用同步异步串行收发器，Universal Synchronous/Asynchronous Receiver/Transmitter，从字面意思我们也可以知道<b>USART比UART增加了一部分同步的功能</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>显而易见，<b>USART当做SPI来用，就是利用了USART的同步模式</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART硬件连接方式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>是否有时钟线，是同步收发器和异步收发器最大的区别，这取决于硬件的连接。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>从USART的硬件连接可以看到标准的SPI的主机和从机应该是怎样连接，有三线的和四线的，下图展示了四线的连接方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0b052d7def4b780af43f0c40be5cee7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb\" width=\"491\" data-original=\"https://pic3.zhimg.com/v2-0b052d7def4b780af43f0c40be5cee7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;491&#39; height=&#39;257&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"491\" data-rawheight=\"257\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"491\" data-original=\"https://pic3.zhimg.com/v2-0b052d7def4b780af43f0c40be5cee7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0b052d7def4b780af43f0c40be5cee7a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>由主机MASTER提供CLK，MOSI和MOSI直接相连，主机的MISO和从机的MISO直接相连，片选是由主机来选择从机。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>那么，如果是把USART当做SPI的时候，我们怎么跟SPI的从机连接呢？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-92ea682f4e84d0326c62e1538a215122_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic3.zhimg.com/v2-92ea682f4e84d0326c62e1538a215122_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;516&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"516\" data-original=\"https://pic3.zhimg.com/v2-92ea682f4e84d0326c62e1538a215122_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-92ea682f4e84d0326c62e1538a215122_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在USART选择为同步传输的模式时，USART会有三个管脚被定义功能：除了RX和从机的Data out相连，TX和从机的Data in相连，还会有一个SCLK被使能，直接和SPI的CLK相连。这时，大家可能会发现，上面两图有一点区别 —— 没有CS，没有片选。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>与标准的SPI连接方式相比，USART当作SPI使用时，真的没有片选吗？答案非也。如果需要一个片选的话，MCU上的任何一个GPIO都可以当作从机的一个片选信号，所以我们基本的连接也变得非常简单。RX和DO直接相连，TX和DIN直接相连，CLK直接相连，CS用任何一个GPIO就可以了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART的同步模式可分为</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>主机模式和从机模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>如何使能USART的SPI模式？可细分为两种模式，也就是USART可以当作SPI的MASTER（主机模式），还可以当作SPI的SLAVE（从机模式）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里，需要大家注意一下，并不是所有的STM32都可以当作SPI的从机模式，目前主要是STM32L4+和STM32H7这两个系列可以支持SPI的从机模式，其他的都仅支持SPI的主机模式。简而言之，<b>L4和H7系列是既支持主机模式又支持从机模式</b>。接下来，我们先来描述一下这两种模式。<b>使能SPI的主机模式，</b>只要开启CR寄存器中CLKEN这个位即可，同时要注意如果开启了CLKEN位，那它就只能当作SPI的主机模式，而不能当作从机模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-92d76c88b67059e1be4f6ab97ddf9783_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"909\" data-original=\"https://pic4.zhimg.com/v2-92d76c88b67059e1be4f6ab97ddf9783_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;909&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"909\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"909\" data-original=\"https://pic4.zhimg.com/v2-92d76c88b67059e1be4f6ab97ddf9783_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-92d76c88b67059e1be4f6ab97ddf9783_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>使能SPI的从机模式</b>，也是在CR寄存器里面，开启SLAVEEN这个位，就将SPI设置成从机模式。</p><p><b>如果同时使能了CLKEN和SLAVEEN，那SPI到底应该是在主机模式还是从机模式呢？</b></p><p>对此，有一个详细说明，就是CR寄存器中的CLKEN、SLAVEEN其中的一个一旦开启，那就要保证其他位是清零的状态。串口可以当作SPI接口去用，也可以当作SMATER接口来用，具体用哪个功能是由软件来决定的，也就是由应用来决定的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a2134887c281fdf4dcb6e82c27e69ce1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-a2134887c281fdf4dcb6e82c27e69ce1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1063&#39; height=&#39;186&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"186\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1063\" data-original=\"https://pic2.zhimg.com/v2-a2134887c281fdf4dcb6e82c27e69ce1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a2134887c281fdf4dcb6e82c27e69ce1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART用作SPI时与标准的SPI有何区别</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>使能SPI之后，就需要设置数据格式。我们知道串口有七位数据位、八位数据位和九位数据位，但是在设置为SPI模式之后，还有两个地方需要设置，一个是时钟极性，另一个是相位极性。这两个位是什么意思呢？让我们一起来看下USART的时序图。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cb70c6512404b53ceb3883b223ebdedc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb\" width=\"912\" data-original=\"https://pic1.zhimg.com/v2-cb70c6512404b53ceb3883b223ebdedc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;912&#39; height=&#39;549&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"549\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"912\" data-original=\"https://pic1.zhimg.com/v2-cb70c6512404b53ceb3883b223ebdedc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-cb70c6512404b53ceb3883b223ebdedc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从上图可以看到，在时钟极性为0的时候，CLK的默认电平是低电平；时钟极性为1时，CLK的默认电平是高电平。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>相位极性（CPHA）为0的时候，它和数据是在时钟的第一个沿进行采样；CPHA为1时，它和数据是在时钟的第二个沿进行采样。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>USART时序图中需要特别注意，有一个LBCL位，它会决定最后一个时钟沿是不是发出。串口发送或者接收的时候，通常需要有一个奇偶校验位。如果数据位是八位，其中有一个奇偶校验位，那真实有效的数据位就只有七位。奇偶校验位本身并不是数据，它是由前七位进行奇偶校验之后得到的，是0或者是1。如果我们只想发真实的数据，而不想发奇偶校验位，那就可以把LBCL设置为0，最后一位就不会发出。但是有的时候是没有奇偶校验位的，八位全部都是有效数据，那这时候就需要把LBCL设置为1，让它产生一个完整的八个时钟信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这点在应用中有一定的意义，也就是说发送的数据本身就是带有校验位的。标准SPI的处理方式是先将数据发送出去，之后再发送它的校验位；但如果用串口进行发送，也就是用USART把它当作SPI模式进行数据发送的时候，实际上是可以直接在后面加上校验位的，数据接收的时候也需要去检查校验位是否是正确的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>除了LBCL位，我们应该了解在数据的起始位和结束位中是不会产生任何时钟信号的，也就是说如果数据有10个bit，只有中间的8个bit会产生时钟信号，最开始的START和最后的STOP无论有几位都是不会产生时钟信号的。这是因为如果我们和标准的SPI模式去对比的话，我们会发现在标准的SPI中每一个位都是有时钟信号的，也就是数据的吞吐率和时钟是成正比的，但是<b>如果用USART来传输SPI的数据，那数据真实的带宽最多只有实际吞吐率的80%，而SPI的带宽是可以占到100%的</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>除了带宽这一点区别之外，还有什么区别呢？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们可以看到，<b>当USART用作SPI时，数据位只能设置为七位、八位或者九位，但是标准的SPI一般可以设置为4-16位，如果数据位一定要设置成7位以下，比如4位、5位，那就只能用SPI模式，不能把USART当成SPI使用</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>另外，<b>SPI和USART的速率也是有很大区别的，UART的速率最高可达10.5Mbit/s，SPI的速率最高可达系统时钟的一半</b>。对于高速的数据通讯，SPI的优势比较明显。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>以上是USART当作SPI的主机模式时，与标准SPI的区别。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当USART做SPI从机模式的时候，有一个专门的CS叫NSS管脚，它可以作为时钟的输入信号，在每个时钟沿会有一个数据从主机里反馈回来，NSS其他的操作和主机模式都是非常相似的，只是它的时钟信号来自外部。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>USART用作SPI时的注意事项</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>最后，我们说一说USART用作SPI模式时的注意事项。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先，<b>一旦设置成SPI模式，在软件中要确保其他模式不被开启</b>，包括SPI的主机模式和从机模式，只能有一种模式被开启。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>第二，我们要注意<b>USART当作SPI模式时，它的速率没有真正的SPI的速率高，而且它的有效带宽也少于SPI的有效带宽</b>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>第三，<b>SPI模式只在USART中是有效的</b>，那么<b>每一个系列中USART的个数和是否支持同步模式是不一样的</b>，比如在F1、F3上有3个USART，它都是支持SPI主机模式的，不支持SPI从机模式；在L4+、H7上是既支持主机模式又支持从机模式，而且USART最多可以到三个或者四个。但是有一些小封装，比如STM32L011D4，有一个USART的，叫USART2，但因为管脚的限制，它虽然也叫USART，却不支持同步模式，需要具体去查数据手册。ST的USART本身还是很多的，尤其在F0上，F0上最多可以有8个USART，我们可以在这样的系列上更多更灵活地将USART用作SPI。</p><p class=\"ztext-empty-paragraph\"><br/></p><p> STM32的USART的功能非常丰富，大家可以多多尝试。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-da44d9824ed65a93b0eb0016452d4710_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"147\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic1.zhimg.com/v2-da44d9824ed65a93b0eb0016452d4710_b.png\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "SPI", 
                    "tagLink": "https://api.zhihu.com/topics/19890005"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77846398", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 0, 
            "title": "【今晚直播】低功耗蓝牙技术与新一代无线MCU", 
            "content": "<p>早在1994年，爱立信的一位工程师为了解决乱糟糟连接缆线的烦恼，发明了短距离无线通信技术 —— 蓝牙。如今，蓝牙已成为业界公认的连接智能移动设备与周边其他人机交互设备（键鼠、耳机等）的最主要无线通信手段之一。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;528&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>自蓝牙技术联盟于2001年发布蓝牙1.1版本技术规范起，脑洞大开的工程师们一直在畅想，如何使智能移动设备与周边的嵌入式设备的连接时间更长，从而让智能移动设备成为10m内各种电子产品通信的中枢。历经十年，蓝牙技术联盟在2011年发布了里程碑版本的蓝牙4.0技术规范，其中最具吸引力的是低功耗蓝牙技术规范。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗蓝牙技术</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为一项可广泛植入各类产品、围绕微型电池设计、可持续工作数年的技术，低功耗蓝牙已然站在了无线技术革命的最前沿。如果说经典蓝牙是为统一全球各地的计算和通信设备而生，让手机与笔记本电脑互联；那么，低功耗蓝牙选择了不同的方向，不关注高传输速率，尽可能降低功耗，保证长时间连接。     </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>不忘蓝牙初心</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>蓝牙技术的设计初衷主要包括以下方面</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"1028\" data-original=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1028&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1028\" data-original=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于低功耗蓝牙而言，其设计目标在于尽可能创造一种最低功率的、短距离无线技术。在尊崇蓝牙的设计目标的同时，相比经典蓝牙，低功耗蓝牙技术对体系结构的每一层都进行了优化，比如放宽物理层的电参量、加快重连速度、提升数据广播效率等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“量化自我”的市场催生</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>低功耗蓝牙不仅极大地降低了芯片的功耗，还以其连接的灵活性、良好的抗干扰性、简单的应用开发等特性，得到智能手机、电脑厂商、外设厂商和应用开发者的广泛认可。同时，处在移动互联创新浪潮之巅的可穿戴设备，为消费者带来了各种集成多种传感器的智能手环、手表等面向运动与健康的应用外设，引发了新潮的“量化自我”的生存方式，进而催生出更广泛的市场和更前卫的应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>聊了这么多蓝牙技术，如果STM32遇见低功耗蓝牙，会碰撞出怎样的独特解决方案？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB双核无线微控制器配备双核无线微控制器(MCU)配备Bluetooth® 5、OpenThread和ZigBee®3.0连接技术，同时兼备超低功耗性能。通过整合意法半导体的STM32L4 Arm® Cortex®-M4 MCU的功能和一颗集成Cortex-M0 +专用内核管理的射频芯片，STM32WB具备高性能、多协议并发、数据安全功能、低功耗、低成本等特点，并通过丰富的 STM32Cube 生态系统帮助用户快速进入市场，是远程传感器、可穿戴跟踪器、楼宇自动化控制器、计算机外围设备、无人机和其它物联网设备的理想选择。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高性能：</b></p><ul><li>双核简易开发：2个独立处理器内核，保证实时处理</li><li>功能特性丰富：超低功耗，外设丰富</li><li>工作电压1.71至3.6V</li><li>工作温度-40<b>°</b>C至+105<b>°</b>C</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>多协议并发：</b></p><ul><li>完全认证的BLE 5.0 协议栈；数据速率提高2倍，支持2Mbps高速模式；支持BLE Mesh技术，提高网络覆盖面</li><li>支持最新的 IEEE 802.15.4无线通信标准；OpenThread协议栈，ZigBee 3.0协议栈；支持BLE和OpenThread的动/静态并发模式</li><li>支持私有协议栈 (例如BLE或802.15.4)；同类最好的射频收发器，输出功率高达+6dBm，射频链路预算102dB；接收功耗仅为4.5mA，发射功耗5.2mA(@ 0dBm)，适合能耗敏感的应用；集成balun巴伦平衡器，降低物料清单成本</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>安全：</b></p><ul><li>软件安全架构</li><li>STM32W的攻击防御措施</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>超低功耗：</b></p><ul><li>多种低功耗模式</li><li>双核处理器的优势</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低成本：</b>集成越多，BOM降幅越大</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>产品快速上市：</b>完备的软硬件开发工具，全面契合STM32泛生态，助力产品快速上市。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;491&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【观众福利】</b>参与直播，有机会试用<b>STM32WB评估套件，仅有五套</b>，不要错失机会哦~~~</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>想参加今晚直播的朋友可以扫码进群</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7f77e22853ad58841ebd99c490c75092_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"367\" data-rawheight=\"484\" class=\"content_image\" width=\"367\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;367&#39; height=&#39;484&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"367\" data-rawheight=\"484\" class=\"content_image lazy\" width=\"367\" data-actualsrc=\"https://pic3.zhimg.com/v2-7f77e22853ad58841ebd99c490c75092_b.jpg\"/></figure><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "低功耗蓝牙", 
                    "tagLink": "https://api.zhihu.com/topics/19868970"
                }, 
                {
                    "tag": "MCU", 
                    "tagLink": "https://api.zhihu.com/topics/19916470"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77210394", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 6, 
            "title": "Cortex-M3的低功耗模式", 
            "content": "<p>Cortex-M3定义了两种低功耗模式——<b>Sleep模式</b>和<b>Deep sleepl模式</b>，在Sleep模式下内核停止工作，外设继续工作；在Deep sleep模式下，始终停止，关闭PLL和Flash。</p><p>STM32在Cortex-m3定义的两种低功耗模式的基础上实现了三种低功耗模式，其中Sleep模式和M3一样，在M3的Deep sleep模式下，STM32又定义了Stop模式和Standby模式两种低功耗模式。在STM32的Standby模式下，内核区域是出于掉电模式的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c99b1cd19af3612f2b0799a562b12cec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c99b1cd19af3612f2b0799a562b12cec_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic1.zhimg.com/v2-c99b1cd19af3612f2b0799a562b12cec_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-c99b1cd19af3612f2b0799a562b12cec_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>低功耗模式有WFI和WFE两种进入的方式，这两种方式的区别就是执行到WFI指令后，处理器会立即进入低功耗睡眠模式，而执行到WFE指令后，会先检查事件锁存器，如果事件锁存器为0，则立刻进入睡眠状态；如果为1，则清除该锁存器，继续执行其他命令。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8dea9a80e4b32bf92f102978a9a9052d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb\" width=\"464\" data-original=\"https://pic2.zhimg.com/v2-8dea9a80e4b32bf92f102978a9a9052d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;464&#39; height=&#39;104&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"464\" data-rawheight=\"104\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"464\" data-original=\"https://pic2.zhimg.com/v2-8dea9a80e4b32bf92f102978a9a9052d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8dea9a80e4b32bf92f102978a9a9052d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当执行到WFI或WFE指令后，是进入Sleep模式还是进入Deep sleep模式是由SCR寄存器的SLEEPDEEP位的状态决定的，当该位掷1的时候，进入Deep sleepl模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-29623d7f280809d96746ebcf8b34668f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic4.zhimg.com/v2-29623d7f280809d96746ebcf8b34668f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;540&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"540\" data-original=\"https://pic4.zhimg.com/v2-29623d7f280809d96746ebcf8b34668f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-29623d7f280809d96746ebcf8b34668f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面我们来说一下低功耗模式的退出。对于通过WFI方式进入低功耗模式的状况，只能由中断唤醒，如果是在主循环中进入低功耗模式，则任何没有被BASEPRI寄存器屏蔽的中断都能将处理器唤醒；如果是在中断服务程序中进入低功耗模式的，则需要比当前中断优先级高的中断才能够将处理器唤醒。</p><p>对于通过WFE方式进入低功耗的状况可以由事件唤醒，当SCR寄存器的SEVONPEND为1时，任何时候发生了任何中断都会把处理器唤醒；当SCR寄存器的SEVONPEND为0时，唤醒条件和前面说的WFI相同。需要说明的是，不管是WFI还是WFE，PRIMASK位对是否能唤醒处理器没有影响，只决定中断是否执行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-15c5f754c3df1f5a16c3442084fc6495_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-15c5f754c3df1f5a16c3442084fc6495_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;275&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-15c5f754c3df1f5a16c3442084fc6495_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-15c5f754c3df1f5a16c3442084fc6495_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>M3还有一个自动睡眠机制Sleep-on-exit，通过SCR寄存器中的Sleep-on-exit位可以打开或关闭该功能。当处理器被中断唤醒后，在执行中断处理程序的最后，处理器会检查Sleep-on-exit位的状态根据它的状态决定是否立刻进入低功耗模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-ef729436ac6e9eed9b938c96e40712eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ef729436ac6e9eed9b938c96e40712eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;328&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-ef729436ac6e9eed9b938c96e40712eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-ef729436ac6e9eed9b938c96e40712eb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Sleep-on-exit的典型应用是在中断驱动的处理器程序中，这类程序一般主循环里不做任何事情，中断完成后希望尽快进入低功耗模式。</p><p>上电复位完成初始化后，系统进入Sleep模式，等到有中断来了以后，响应中断进行入栈操作，执行中断服务程序，中断服务程序执行完后立刻进入Sleep模式，不需要进行出栈的操作，下次响应中断的时候也不需要再做入栈的操作，因为前面已经做好了。这样可以节省中断响应时的出栈入栈消耗的时间，最大程度让处理器处于低功耗的状态。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f7dc8bc670390b221c4a55108b7168aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f7dc8bc670390b221c4a55108b7168aa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-f7dc8bc670390b221c4a55108b7168aa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f7dc8bc670390b221c4a55108b7168aa_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>我们可以对STM32F2运行和低功耗模式进行一个对比</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6057d216439a8be736a5dbd8e890f439_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-6057d216439a8be736a5dbd8e890f439_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic2.zhimg.com/v2-6057d216439a8be736a5dbd8e890f439_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6057d216439a8be736a5dbd8e890f439_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32F2低功耗模式实现</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-16556b15838b5255e2946e164fc9548f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-16556b15838b5255e2946e164fc9548f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;554&#39; height=&#39;214&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"214\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"554\" data-original=\"https://pic4.zhimg.com/v2-16556b15838b5255e2946e164fc9548f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-16556b15838b5255e2946e164fc9548f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>需要注意的是，Sleep-on-exit功能只能和WFI一起用，这是因为Sleep-on-exit功能只有当低功耗模式是被中断唤醒，执行完中断后才会根据Sleep-on-exit位的状态决定是否立刻进入WFI的状态，如果是和WFE一起用的话，有可能低功耗模式是被时间唤醒的，不会执行中断，所以此时即使Sleep-on-exit位被置位也不会再进入低功耗模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-04f5e7fc35bf1cdfd78d510c7e2f0acb_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"149\" data-rawheight=\"146\" class=\"content_image\" width=\"149\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;149&#39; height=&#39;146&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"149\" data-rawheight=\"146\" class=\"content_image lazy\" width=\"149\" data-actualsrc=\"https://pic4.zhimg.com/v2-04f5e7fc35bf1cdfd78d510c7e2f0acb_b.png\"/></figure><p><b>或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "ARM Cortex M", 
                    "tagLink": "https://api.zhihu.com/topics/20007904"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/77004732", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【话说定时器系列】之四：STM32定时器更新事件及案例分享", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本文重点介绍STM32定时器的更新事件及更新事件源，并诠释影子寄存器与预装寄存器的特性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32定时器的更新操作与更新事件</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们知道，STM32定时器中的四个带影子特性的寄存器组，每组寄存器分别由 影子寄存器【即实际控制寄存器】和预装寄存器组成。其中，影子寄存器是真正起作用的控制寄存器，用户访问不到它。而预装寄存器是用户访问的为实际影子寄存器准备数据或指令的寄存器。它们分别是：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIMx_PSC 分频寄存器     TIMx_ARR 自动重装载寄存器</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIMx_CCR 捕捉寄存器     TIMx_RCR 重复计数寄存器[高级定时器有】</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其中，ARR、CCR寄存器带预装载使能控制位，即它们的预装功能可以软件开启或关闭。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIMx_ARR       带预装载使能控制位 ARPE@TIMx_CR1</p><p class=\"ztext-empty-paragraph\"><br/></p><p>TIMx_CCR       带预装载使能控制位 OCxPE@TIMx_CCMR</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当相应预装使能位置1时，即开启预装功能时，此时影子寄存器的数据更新必须且只能通过更新事件实现从预装寄存器到影子寄存器的数据拷贝。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当相应预装使能位置0时，即关闭预装功能时，用户修改预装寄存器的数据后会立即被拷贝进影子寄存器【实际寄存器】。也就是说，此时我们用户操作预装寄存器就相当于访问实际影子寄存器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那另外的PSC、RCR寄存器是不带预装使能控制位的，也就是说，二者的影子寄存器的预装功能始终开启，所以对于PSC/RCR影子寄存器的数据更新就只能通过更新事件唯一途径实现从预装寄存器到影子寄存器的数据拷贝更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1e5ab1bebaf98a8a17cbd39f00e0c193_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-1e5ab1bebaf98a8a17cbd39f00e0c193_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;188&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"188\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-1e5ab1bebaf98a8a17cbd39f00e0c193_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1e5ab1bebaf98a8a17cbd39f00e0c193_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-959ec2091c5acff2040f2d85df929a42_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"507\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"507\" data-original=\"https://pic3.zhimg.com/v2-959ec2091c5acff2040f2d85df929a42_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;507&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"507\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"507\" data-original=\"https://pic3.zhimg.com/v2-959ec2091c5acff2040f2d85df929a42_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-959ec2091c5acff2040f2d85df929a42_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>那么有哪些操作可以产生更新事件呢？或者有哪些更新事件源呢？</b></p><p>这里把更新操作跟更新事件区别开来，以便于概念上的理解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>更新操作是一种动作，是更新事件的源头，即事件源；</p><p class=\"ztext-empty-paragraph\"><br/></p><p>更新事件是基于更新操作所导致的后续影响或结果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>可能的更新操作【事件源】有3类：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、核心计数器的溢出【上溢或下溢】</p><p>2、软件复位操作【对UG@TIMX_EGR置位】</p><p>3、工作在复位模式下的定时器收到触发信号【即复位触发信号】</p><p>【特别提醒，对于高级定时器必须发生RCR+1次溢出动作后才可以产生更新事件。对于通用或基本定时器，每溢出一次都可以产生更新事件。】</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>那么更新操作何时可以升级为更新事件呢？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里涉及到一个控制寄存器的控制位，UDIS@TIMx_CR1.</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当该控制位UDIS@TIMx_CR1为0时，更新操作升级为更新事件，更新事件会产生如下影响或效果：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、实现从预装寄存器的数据到影子寄存器的内容拷贝，即完成影子寄存器的内容更新；</p><p>2、实现计数器【预分频计数器、核心计数器、重复计数器】的重新初始化；</p><p>3、置位状态寄存器的UIF@TIMx_SR，并可以触发定时器更新中断或触发DMA请求；</p><p>当该控制位UDIS@TIMx_CR1为1时，更新操作不能升级为更新事件，其相应的结果或影响：</p><p>仅限于计数器的重新初始化，不做影子寄存器的更新；</p><p>无更新标志的置位，不触发中断或DMA请求</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>那么发生更新操作时计数器的重新初始化具体是指什么呢？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>1、分频计数器重装为0,然后重新开始计数；</p><p>2、重复计数器重装为RCR寄存器里的值，然后重新递减计数；</p><p>3、核心计数器的初始化由计数模式来定，如果是向上计数或中心对齐计数模式，CNT归0；如果是向下计数器模式，CNT重装为ARR，然后重新向下计数；</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>发生更新事件时，影子寄存器的更新与计数器的重装有先后顺序问题吗？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>有！影子寄存器【ARR/CCR….】的更新操作在前，计数器的重装操作在后！</p><p>因为这样可以保障计数器的重装值使用更新过的数据。该个细节要特别注意！</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>最后，不妨做个基于更新事件的案例分享：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>问题描述：TIMER初始化阶段，经常有人反馈，不管定时器周期的长短，只要一使能更新中断，就立即进中断服务程序？令人不解，往往给开发带来些困扰，原因可能是什么？如何解决？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们知道，定时器应用的初始化时，往往需要对有关时基寄存器进行些基本的数据赋值。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>比方对ARR/PSC/RCR这些寄存器赋予初始值。结合前面的介绍，这些寄存器都是些带预装功能的寄存器，我们用户操作的寄存器都是预装寄存器，还不是实际起作用的影子寄存器。对于ARR寄存器倒还好，因为芯片复位后默认状态下，ARR寄存器的预装功能时关闭的【CCR寄存器的预装载功能默认条件下也是关闭的】，那么我们用户给ARR赋值就相当于给其实际影子寄存器赋值了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但PSC/RCR寄存器是不带预装控制位的，它们两个的影子寄存器的更新必须借助于更新事件。所以，在定时器的时基参数的初始代码里，为了让用户写进预转寄存器的数据生效，就用到了上面提到过的软件复位操作，即对UG@TIMx_EGR进行置位而产生更新事件，从而完成影子寄存器的数据更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在STM32标准库里的TIM_TimeBaseInit( )函数里都有这句代码：</p><p>TIMx-&gt;EGR = TIM_PSCReloadMode_Immediate;</p><p>在Cube库里的HAL_TIM_Base_Init( )函数里的  函数有这句代码：</p><p> TIMx-&gt;EGR = TIM_EGR_UG;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>结合前面的介绍，这两行代码使用到了前面提到的软件更新操作，触发了更新事件，它不仅仅实现了影子寄存器的数据更新，同时呢，还置位了状态寄存器的更新中断标志位UIF@TIMx_SR。那么，如果在这之后，我们使能定时器更新中断的话，进入更新中断服务程序的话就再自然不过了。为了规避这个问题，我们在时基参数初始化完成之后、使能定时器更新中断之前，可以先做更新中断标志的清除操作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>基于这个案例，我们可以对定时器的预装特性以及不同影子寄存器的特性差异有进一步的了解。总的来讲，STM32定时器的寄存器预装载特性也是其一特色，定时器的更新事件也是非常重要的事件，更新事件本身及相关中断或DMA功能也是STM32开发应用中常用的工具，切实掌握这些将十分有助于STM32的产品开发。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-90271e2b68d3a8763230fd05ef99741e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"153\" data-rawheight=\"145\" class=\"content_image\" width=\"153\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;153&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"153\" data-rawheight=\"145\" class=\"content_image lazy\" width=\"153\" data-actualsrc=\"https://pic3.zhimg.com/v2-90271e2b68d3a8763230fd05ef99741e_b.png\"/></figure><p><b>或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "定时器（程序开发）", 
                    "tagLink": "https://api.zhihu.com/topics/19655962"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/76836693", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【互动课堂】STM32生态系统", 
            "content": "<p>去年年底，《黑镜》在Netflix正式上线。观众介入故事，甚至决定剧情走向的新鲜体验一夜之间吸粉无数！</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们受到互动影视剧的启发，想开辟出一种新的带入式学习方式，以<b>互动课堂</b>的呈现形式，从<b>STM32用户的需求视角</b>来讲解微控制器领域的流量IP <b>STM32</b>的生态系统。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>什么是STM32生态系统？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>2018年，在通用及汽车微控制器领域的中国市场，ST继续执业界牛耳，排名翘楚。那么，是什么促成STM32达到这个市场高度？主要归因于以下三点：</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>积极拓展产品生态系统</li><li>注重垂直应用的细分市场</li><li>对中小客户的广泛支持</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>上述几点有一个共通的底层逻辑支撑，就是<b>如何让用户更好更快地使用STM32</b>。而这个逻辑的可取之处在于，为产品研发人员打造一个最优化的开发设计秩序，不仅仅针对一款芯片的配置使用，而是通过一整套不断扩展的生态系统，为嵌入式工程师的开发全过程赋能。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a87fae2cdb817ddc8bc947b110f5bf48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-a87fae2cdb817ddc8bc947b110f5bf48_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-a87fae2cdb817ddc8bc947b110f5bf48_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a87fae2cdb817ddc8bc947b110f5bf48_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>上图表达的STM32生态系统的范畴，涵盖了软硬件、设计资源、合作伙伴方案及服务的大圈层（图中列出的技术文档、软件工具的使用和特性介绍，可到<a href=\"https://link.zhihu.com/?target=https%3A//stmcu.com.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STMCU中文网站</a>的“<b>设计资源</b>”找到相对应的资料）。当进一步具象生态系统的内涵时，需要从STM32Cube家族的软件工具开始。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32Cube工具</b></p><p><b>覆盖开发全过程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32Cube家族的软件工具，从选型到开发/调试，到代码二进制烧录，选项字节操作，到运行监测，覆盖了全部的开发过程。它们各自有功能侧重，也有功能重叠，但是合在一起，就提供给STM32开发者，一个无缝的开发平台。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-72b98d1706cce353bc6ba04c719fd0b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-72b98d1706cce353bc6ba04c719fd0b1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;425&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"425\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-72b98d1706cce353bc6ba04c719fd0b1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-72b98d1706cce353bc6ba04c719fd0b1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeMX通用功能：从选型到初始工程建立</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32CubeMX是被最广泛使用的工具，它集成了芯片选型、引脚分配和功能配置，中间件配置，时钟配置，初始代码和项目的功能。最新版本是今年7月刚刚推出的 STM32CubeMX 5.3版本。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2669d95f0d43900df42c23f41458e27a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-2669d95f0d43900df42c23f41458e27a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;610&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-2669d95f0d43900df42c23f41458e27a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2669d95f0d43900df42c23f41458e27a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeIDE : 包罗万象 + 开放</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32CubeIDE是今年4月份推出的，ST原厂开发和支持的集成开发环境（IDE）软件，是STM32Cube工具家族的最新成员。一方面，它继承了以前TrueStudio的基于Eclipse CDT开源框架开发调试环境，集成了GCC、GDB等免费的编译器、链接器；一方面它通过Eclipse插件接口，开放对众多第三方功能插件的支持。同时，还集成了STM32CubeMX，这是与其他厂家IDE最大的一个区别。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d604348a41fcf59423eec9b750e0fe6f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d604348a41fcf59423eec9b750e0fe6f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;495&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d604348a41fcf59423eec9b750e0fe6f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d604348a41fcf59423eec9b750e0fe6f_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeProgrammer通用特性：不仅仅是四合一</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32CubeProgrammer的推出是为了一站式解决STM32烧片需求，如对STM32的片上闪存、片外闪存，选项字节的各种读、写、擦除操作。它集合了以前若干年他们用到的几个分散工具：STVP，STLINK-Utility，Flash Loader，DFUSE Demonstrator。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ae4db88400f089cc4efa0923c2094719_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ae4db88400f089cc4efa0923c2094719_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ae4db88400f089cc4efa0923c2094719_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ae4db88400f089cc4efa0923c2094719_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeMonitors：应用开发和分析的好帮手</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>除了上述三个在开发任何STM32都需要用到的通用性工具，还有与特定应用相关的STM32CubeMonitor家族，它是应用在STM32里面运行时的监测工具，目前有三个。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a8c4a6ba41932df9ee488de995dc3800_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-a8c4a6ba41932df9ee488de995dc3800_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-a8c4a6ba41932df9ee488de995dc3800_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a8c4a6ba41932df9ee488de995dc3800_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>互动课堂</b></p><p><b>带入式学习STM32Cube</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32Cube是每一位STM32用户必须下载使用的软件开发工具，大家都已经完成了STM32Cube的初识；同时，也通过<u><b><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3Deeea0661f5844aa9ad61ea94b16f18ca\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 生态系统》</a></b></u>系列课程的<u><b><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/videocourse%3Fid%3D098b433d34054c23be89dd6866ce81df\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《第一期：</a><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/videocourse%3Fid%3D098b433d34054c23be89dd6866ce81df\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32Cube工具 通用功能和特性》</a></b></u>内容（点击蓝字，进入课程第一讲），了解到STM32Cube工具家族成员的全貌：四大支柱各自的功能特点和侧重。但Cube 工具进一步的灵活使用，是否有令你抓狂的难点和你想探索的新内容，我们并不知晓。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>以往的课程，我们的讲师总是按照自己的思路来准备知识点和课程逻辑，课表也是按部就班地被固定。但<u><b><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3Deeea0661f5844aa9ad61ea94b16f18ca\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 生态系统》</a></b></u>这门课程，我们的讲师希望与用户有互动有共鸣，从用户的关注点出发来备课，为大家提供带入式的学习节奏。 以下我们列出了STM32Cube各类应用和插件的知识点，将结合具体芯片和应用，展开讲解。请大家扫描下方二维码，填写调查问卷，帮助我们完成课程设计。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>《STM32生态系统》课程问卷调查</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d10a0e3d08029ce0bb4de416a8d81f9c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"182\" data-rawheight=\"180\" class=\"content_image\" width=\"182\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;182&#39; height=&#39;180&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"182\" data-rawheight=\"180\" class=\"content_image lazy\" width=\"182\" data-actualsrc=\"https://pic1.zhimg.com/v2-d10a0e3d08029ce0bb4de416a8d81f9c_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>或许，下一节课就是你最想了解的内容，帮助你拨开设计过程中的迷雾 </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c49044846bcd3873704680c786350313_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"152\" data-rawheight=\"148\" class=\"content_image\" width=\"152\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;152&#39; height=&#39;148&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"152\" data-rawheight=\"148\" class=\"content_image lazy\" width=\"152\" data-actualsrc=\"https://pic4.zhimg.com/v2-c49044846bcd3873704680c786350313_b.png\"/></figure><p><b>或者直接登录电堂网站观看课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3Deeea0661f5844aa9ad61ea94b16f18ca\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/76676918", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【STM32安全技术导论之二】加解密技术", 
            "content": "<p>无论通讯安全还是设备安全都离不开加解密技术。我们经常需要需要各种各样的密码，那么背后一定是加解密技术。 加解密技术说白了就是变换，加密变换和它的反变换---解密变换。加解密技术也有三个属性，也叫 CIA，保密性，完整性以及可认证性。注意，最后的这个A与信息安全三要素CIA中的可用性 A 不一样，一个是 Authentication, 一个是 Availability。能够提供保密服务的有对称密钥和非对称密钥。 能够提供狭义完整性服务的有单向散列函数。能够提供认证鉴别类服务有基于非对称密钥技术的数字签名技术， 以及基于对称密钥的技术的消息验证码 MAC。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>1、</i>加解密技术史</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e0c26c70664f57789dae0ce062f108a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb\" width=\"735\" data-original=\"https://pic3.zhimg.com/v2-e0c26c70664f57789dae0ce062f108a2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;735&#39; height=&#39;262&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"735\" data-original=\"https://pic3.zhimg.com/v2-e0c26c70664f57789dae0ce062f108a2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e0c26c70664f57789dae0ce062f108a2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>谈到加解密发展史，不得不提<b>香农</b>。克劳德·香农(Claude Shannon)，美国数学家、电子工程师和密码学家，被誉为信息论的创始人。1948年，香农发表了划时代的论文《通信的数学原理》，奠定了现代信息论的基础。1949 年，香农又发表了《保密系统的通信理论》, 将加解密技术从艺术变成了科学，加解密的历史由此转折。1976年，两位美国计算机学家Dime(D)和Henman(H)提出 DH密钥交换协议，启发了Ron Rivest(R), Adi Shamir(S)和Leonard Adleman(A)， RSA 非对称密钥的加解密技术。于是，加解密技术发展形成了三个阶段。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-ac3c79b06e71d08e1da2040d7790495e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-ac3c79b06e71d08e1da2040d7790495e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;520&#39; height=&#39;173&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"520\" data-original=\"https://pic3.zhimg.com/v2-ac3c79b06e71d08e1da2040d7790495e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-ac3c79b06e71d08e1da2040d7790495e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>2、</i>加解密的参数模型及三大典型算法</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么加解密技术的过程是怎么样的？</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-0207ae171493a6bb3b240e4d800dc3cb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-0207ae171493a6bb3b240e4d800dc3cb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;570&#39; height=&#39;271&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-0207ae171493a6bb3b240e4d800dc3cb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0207ae171493a6bb3b240e4d800dc3cb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>A 对一段明文，用一个密钥进行加密，形成密文。B 收到密文，用一个密钥进行解密，获得明文。密钥有三种情况，代表了三种典型算法：<br/></p><ol><li>密钥的个数为０，通过散列（又叫摘要或哈西）函数将很长的信息摘成很短的数据，这就是通过<b>单向散列函数</b>达成的无密钥技术。</li><li>密钥的个数为1，即 A 用的加密密钥和 B 用的解密密钥相同，这种加解密技术为<b>对称加密</b>。 </li><li>密钥的个数为2，即 A 用的加密密钥和 B 用的解密密钥不同，这就是<b>非对称加密</b>。 </li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>3、</i>数字签名与MAC</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32加密库与算法工具</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>加解密技术三属性（CIA）中的“A”代表Authentication，即可认证性。如何实现认证服务？我们可以通过单向散列函数与加密技术结合来实现，主要有<b>两种认证服务</b>，一种基于对称加密技术，我们称之为<b>消息认证码（MAC）</b>； 一种是基于非对称加密技术，就是我们这里要讲的<b>数字签名</b>。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32 提供了加密库 X-Crypto-lib 对之前提到的三大类算法的支持</b>，甚至包括一些近几年才出现的算法 ChaCha20 以及 Poly。STM32 加密库包括几乎所有的分组模式，例如 ECB, CBC,GCM等等。密码技术可以由软件实现，也可以由硬件加速。软件加密库可以运行在所有的 STM32 平台上。STM32 特定型号有常用的算法加速，可以减轻内核负载，降低功耗。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>同时，在 STM32 MCU 安全开发过程中，有时候需要和确认自己对 MCU 加密库的调用是否正确，这时需要一个工具对他进行比较。<b>STM32的算法工具OpenSSL</b> 支持所有主流算法，很容易地用来进行结果比较，也可以用来理解算法参数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cfdfe878c68c4b55b299c360cf1c15f0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image\" width=\"150\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;150&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"150\" data-actualsrc=\"https://pic1.zhimg.com/v2-cfdfe878c68c4b55b299c360cf1c15f0_b.png\"/></figure><p><b>或者直接登录电堂网站观看相关课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75614728", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【直播课堂】低功耗蓝牙技术与新一代无线MCU", 
            "content": "<p>早在1994年，爱立信的一位工程师为了解决乱糟糟连接缆线的烦恼，发明了短距离无线通信技术 —— 蓝牙。如今，蓝牙已成为业界公认的连接智能移动设备与周边其他人机交互设备（键鼠、耳机等）的最主要无线通信手段之一。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;528&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0402f7131ccd680023f98046c2416101_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>自蓝牙技术联盟于2001年发布蓝牙1.1版本技术规范起，脑洞大开的工程师们一直在畅想，如何使智能移动设备与周边的嵌入式设备的连接时间更长，从而让智能移动设备成为10m内各种电子产品通信的中枢。历经十年，蓝牙技术联盟在2011年发布了里程碑版本的蓝牙4.0技术规范，其中最具吸引力的是低功耗蓝牙技术规范。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低功耗蓝牙技术</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为一项可广泛植入各类产品、围绕微型电池设计、可持续工作数年的技术，低功耗蓝牙已然站在了无线技术革命的最前沿。如果说经典蓝牙是为统一全球各地的计算和通信设备而生，让手机与笔记本电脑互联；那么，低功耗蓝牙选择了不同的方向，不关注高传输速率，尽可能降低功耗，保证长时间连接。     </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>不忘蓝牙初心</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>蓝牙技术的设计初衷主要包括以下方面：</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb\" width=\"1028\" data-original=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1028&#39; height=&#39;423&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"423\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1028\" data-original=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-9fcd9c86fb795915c22446a4eb518767_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于低功耗蓝牙而言，其设计目标在于尽可能创造一种最低功率的、短距离无线技术。在尊崇蓝牙的设计目标的同时，相比经典蓝牙，低功耗蓝牙技术对体系结构的每一层都进行了优化，比如放宽物理层的电参量、加快重连速度、提升数据广播效率等。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>“量化自我”的市场催生</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>低功耗蓝牙不仅极大地降低了芯片的功耗，还以其连接的灵活性、良好的抗干扰性、简单的应用开发等特性，得到智能手机、电脑厂商、外设厂商和应用开发者的广泛认可。同时，处在移动互联创新浪潮之巅的可穿戴设备，为消费者带来了各种集成多种传感器的智能手环、手表等面向运动与健康的应用外设，引发了新潮的“量化自我”的生存方式，进而催生出更广泛的市场和更前卫的应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;492&#39; height=&#39;280&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"492\" data-original=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-f42b055cc8ae5dee9054916c3f30b905_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/469784448\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">新一代无线微控制器STM32WB</a></b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>聊了这么多蓝牙技术，如果STM32遇见低功耗蓝牙，会碰撞出怎样的独特解决方案？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;323&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"323\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-40ebe24e9131abac5606f68b7d6b9356_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32WB双核无线微控制器配备双核无线微控制器(MCU)配备Bluetooth® 5、OpenThread和ZigBee®3.0连接技术，同时兼备超低功耗性能。通过整合意法半导体的STM32L4 Arm® Cortex®-M4 MCU的功能和一颗集成Cortex-M0 +专用内核管理的射频芯片，STM32WB具备高性能、多协议并发、数据安全功能、低功耗、低成本等特点，并通过丰富的 STM32Cube 生态系统帮助用户快速进入市场，是远程传感器、可穿戴跟踪器、楼宇自动化控制器、计算机外围设备、无人机和其它物联网设备的理想选择。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-06a74ac4a49ab78c6459573425a852b5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高性能：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>双核简易开发：2个独立处理器内核，保证实时处理</li><li>功能特性丰富：超低功耗，外设丰富</li><li>工作电压1.71至3.6V</li><li>工作温度-40<b>°</b>C至+105<b>°</b>C</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>多协议并发：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>完全认证的BLE 5.0 协议栈；数据速率提高2倍，支持2Mbps高速模式；支持BLE Mesh技术，提高网络覆盖面</li><li>支持最新的 IEEE 802.15.4无线通信标准；OpenThread协议栈，ZigBee 3.0协议栈；支持BLE和OpenThread的动/静态并发模式</li><li>支持私有协议栈 (例如BLE或802.15.4)；同类最好的射频收发器，输出功率高达+6dBm，射频链路预算102dB；接收功耗仅为4.5mA，发射功耗5.2mA(@ 0dBm)，适合能耗敏感的应用；集成balun巴伦平衡器，降低物料清单成本</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>安全：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>软件安全架构</li><li>STM32W的攻击防御措施</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>超低功耗：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>多种低功耗模式</li><li>双核处理器的优势</li><li>射频协议栈和应用固件更新</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>低成本：</b>集成越多，BOM降幅越大</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-0ca30a172fccb12779682608f7face20_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>产品快速上市：</b>完备的软硬件开发工具，全面契合STM32泛生态，助力产品快速上市。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-15f00bf5521bf1354cbe387f23dd977c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;458&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eeeb66658b33cac750899305f9913c15_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;491&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-eed3f9cc7d787336681e5966e799e15d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>直播课堂</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8d9ac93faa32d464ed5091e482327166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-8d9ac93faa32d464ed5091e482327166_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;900&#39; height=&#39;383&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-8d9ac93faa32d464ed5091e482327166_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8d9ac93faa32d464ed5091e482327166_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2019年8月13日晚8点</b>，电堂特邀ST原厂工程师进驻直播课堂，为大家解读<b><u><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/469784448\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《新一代无线微控制器STM32WB》</a></u></b>（点击蓝字，预约直播），两大板块内容新鲜呈现。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>课程板块一：</b>蓝牙简史及技术概览；</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>课程板块二：</b>物联网广泛环境下，STM32WB助您持续释放不断增长的“无线”创造力。</p><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=http%3A//live.vhall.com/469784448\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">8月13日晚8点，无线MCU大触在线等，不见不散 (点击文字即可进入直播间)</a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>【观众福利】</b>参与直播，有机会试用<b>STM32WB评估套件，仅有五套</b>，不要错失机会哦~~~</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-597eb001eca9bcaee78adf0b9918aaca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb\" width=\"692\" data-original=\"https://pic3.zhimg.com/v2-597eb001eca9bcaee78adf0b9918aaca_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;692&#39; height=&#39;466&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"692\" data-original=\"https://pic3.zhimg.com/v2-597eb001eca9bcaee78adf0b9918aaca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-597eb001eca9bcaee78adf0b9918aaca_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的同学可以关注&#34;AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-debca0b279f83f751ef73b9c9c033a20_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic1.zhimg.com/v2-debca0b279f83f751ef73b9c9c033a20_b.png\"/></figure><p><b>或者登陆电堂网站了解更多内容</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "低功耗蓝牙", 
                    "tagLink": "https://api.zhihu.com/topics/19868970"
                }, 
                {
                    "tag": "MCU", 
                    "tagLink": "https://api.zhihu.com/topics/19916470"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75927022", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 0, 
            "title": "产品颜值，从 GUI 抓起", 
            "content": "<p><b>今年，科技巨头们关注的赛道是5G、人工智能、物联网。</b>当这些科技被承载在产品中伴着汹汹大潮冲到我们面前时，我们感受体验的不仅是产品功能，还有用户界面、易用性，类似智能手机界面的操作交互方式已成为人们的普遍认知。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>以运动手表为例，两三年前的产品已经有了测步态、测心率等功能，但这表的长相，左看右看还是像玩具表。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a343ec7ed679a2b181dffc7e8583ca71_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"324\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;324&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"324\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic2.zhimg.com/v2-a343ec7ed679a2b181dffc7e8583ca71_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>而最新的运动手表不仅性能好，还有高颜值。高端产品的视觉识别性，人性化的视觉优化和创意性，用户界面的友好性，功能界面的易用性，一应俱全。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c4574124f8635999510eea3474e443c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb\" width=\"891\" data-original=\"https://pic2.zhimg.com/v2-c4574124f8635999510eea3474e443c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;891&#39; height=&#39;461&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"891\" data-rawheight=\"461\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"891\" data-original=\"https://pic2.zhimg.com/v2-c4574124f8635999510eea3474e443c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c4574124f8635999510eea3474e443c9_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2c0c09df960523b30b3c0ca97bdc01c5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"911\" data-original=\"https://pic2.zhimg.com/v2-2c0c09df960523b30b3c0ca97bdc01c5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;911&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"911\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"911\" data-original=\"https://pic2.zhimg.com/v2-2c0c09df960523b30b3c0ca97bdc01c5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2c0c09df960523b30b3c0ca97bdc01c5_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-12279da0376050e58edde7b47372784c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"812\" data-original=\"https://pic1.zhimg.com/v2-12279da0376050e58edde7b47372784c_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;812&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"812\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"812\" data-original=\"https://pic1.zhimg.com/v2-12279da0376050e58edde7b47372784c_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-12279da0376050e58edde7b47372784c_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-3eb8bd547e47ec05585b2e59e3b2803b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"894\" data-original=\"https://pic4.zhimg.com/v2-3eb8bd547e47ec05585b2e59e3b2803b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;894&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"894\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"894\" data-original=\"https://pic4.zhimg.com/v2-3eb8bd547e47ec05585b2e59e3b2803b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-3eb8bd547e47ec05585b2e59e3b2803b_b.jpg\"/></figure><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-852585f78e923f4bbd037664888e2179_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"881\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"881\" data-original=\"https://pic2.zhimg.com/v2-852585f78e923f4bbd037664888e2179_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;881&#39; height=&#39;608&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"881\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"881\" data-original=\"https://pic2.zhimg.com/v2-852585f78e923f4bbd037664888e2179_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-852585f78e923f4bbd037664888e2179_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"282\" data-thumbnail=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;282&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"282\" data-thumbnail=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-d2acb4d18786413b14bd22ea4deb1893_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"282\" data-thumbnail=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;282&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"282\" data-thumbnail=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2828d7ad141fe30906ab741d48445104_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>面向物联网产品，基于 STM32 实现这样的 GUI 应用，如今并非难事，<b>因为我们有了 TouchGFX。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TouchGFX 能为嵌入式图形用户界面（GUI）提供出色的图形处理性能和流畅的动画效果，同时对资源的需求和功耗极低。当 TouchGFX 运行在 STM32 微控制器上，可实现高端的图形处理性能，媲美智能手机标准。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b> GUI 应用开发课程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>前面看了那么多炫酷的 GUI 设计，现在我们这篇文章的重点来了 — 想要你的智能家居、楼宇自动化系统、家电、可穿戴设备、音视频系统等等产品颜值媲美智能手机，</p><p>还差 ——<b>一！堂！课！</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>电堂与 ST 联手推出<b><a href=\"https://link.zhihu.com/?target=https%3A//wx18257eb0e8c82435.h5.xiaoe-tech.com/content_page/eyJ0eXBlIjozLCJyZXNvdXJjZV90eXBlIjoiIiwicmVzb3VyY2VfaWQiOiIiLCJwcm9kdWN0X2lkIjoicF81Yzg3MDI3YWMwMmE2X1hhTFZGbFJGIiwiYXBwX2lkIjoiYXBwSjdGOG1ncU0yMTYxIn0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《基于 STM32CubeMX 的 GUI 应用开发 —— TouchGFX》</a></b>线上课程，为想要了解使用 TouchGFX Designer 的开发人员，提供示例性视频课程。着重介绍如何利用TouchGFX Designer，在STM32F769I-Disco目标板上，快速开发TouchGFX 的 GUI 应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>主要内容</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>开发环境的搭建、GUI 应用开发演示和参考资源等。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>课程概要：</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>◎ 背景知识介绍</p><p>◎ 演示例（含参数详解）</p><p>◎ 扩展 - TouchGFX 应用例</p><p>◎ 资源及参考</p><p>◎ 触摸功能实现演示例</p><p>◎ 附录：基于 FSMC FMC 接口的存储器内容加载</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-eae9d49366d6302f589ebe490c8b2f9f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"149\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic4.zhimg.com/v2-eae9d49366d6302f589ebe490c8b2f9f_b.png\"/></figure><p><b>或者直接登录电堂网站观看课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D8b96bd0567ef4fd7b9a29d63496c6b84\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "图形用户界面", 
                    "tagLink": "https://api.zhihu.com/topics/19556118"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74959168", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 1, 
            "title": "【话说定时器系列】之二：STM32常规定时器时基与时钟源", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。<br/></p><p>本文重点介绍对STM32常规定时器的时基单元和时钟源，希望您对影子寄存器的预装载及更新、时钟源有哪些、来自何处等有所了解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32常规定时器的时基单元和时钟源</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>上节提到常规定时器包括：基本定时器、通用定时器和高级定时器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>基本定时器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>基本定时器</b>：没有任何对外输入/输出，主要用作时基计数、定时。 </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-3c66ae7b40a022c3b4114c67747fa8ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb\" width=\"858\" data-original=\"https://pic2.zhimg.com/v2-3c66ae7b40a022c3b4114c67747fa8ed_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;858&#39; height=&#39;531&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"531\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"858\" data-original=\"https://pic2.zhimg.com/v2-3c66ae7b40a022c3b4114c67747fa8ed_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-3c66ae7b40a022c3b4114c67747fa8ed_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>通用定时器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>通用定时器</b>：除了基本定时器的时基功能外，还可对外做输入捕捉、输出比较以及连接其它传感器接口【编码器和霍尔传感器】。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a91b18940f3805b0f3d344002534f680_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb\" width=\"763\" data-original=\"https://pic1.zhimg.com/v2-a91b18940f3805b0f3d344002534f680_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;763&#39; height=&#39;535&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"535\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"763\" data-original=\"https://pic1.zhimg.com/v2-a91b18940f3805b0f3d344002534f680_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a91b18940f3805b0f3d344002534f680_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高级定时器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>高级定时器：</b>此类定时器的功能最为强大，除了具备通用定时器的功能外，还包含一些与电机控制和数字电源应用相关的功能，比方带死区控制的互补信号输出、紧急刹车关断输入。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-757f9458dfa7e3f57a9df064d9e1f8c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"851\" data-original=\"https://pic1.zhimg.com/v2-757f9458dfa7e3f57a9df064d9e1f8c8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;851&#39; height=&#39;514&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"851\" data-original=\"https://pic1.zhimg.com/v2-757f9458dfa7e3f57a9df064d9e1f8c8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-757f9458dfa7e3f57a9df064d9e1f8c8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>了解STM32定时器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>从功能模块整体了解STM32定时器</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2470fc5767d5290c8b6616dd918883d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-2470fc5767d5290c8b6616dd918883d1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;750&#39; height=&#39;570&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"570\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"750\" data-original=\"https://pic2.zhimg.com/v2-2470fc5767d5290c8b6616dd918883d1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-2470fc5767d5290c8b6616dd918883d1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>从寄存器特色了解STM32定时器</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>定时器中的PSC/ARR/RCR/CCR寄存器具有预装载功能，即每类寄存器具有双寄存器机制； </li><li>分别由各自的影子寄存器和预装载寄存器组成；</li><li>影子寄存器是真正起作用的寄存器，预装载寄存器为影子寄存器提供缓冲，提前做数据或指令准备；</li><li>用户操作的永远只是预装载寄存器！ </li><li>在开启预装载功能时，影子寄存器的内容须借助更新事件完成更新！ </li><li>关于预装载功能的开启或关闭，往往也犹如影子、如幽灵般影响到我们的定时器应用开发。充分了解预装载机制与更新事件很重要！</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>一、时基单元</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9b287b7922f2d1fabb5b47b6caa42cae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"648\" data-original=\"https://pic3.zhimg.com/v2-9b287b7922f2d1fabb5b47b6caa42cae_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;648&#39; height=&#39;274&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"648\" data-original=\"https://pic3.zhimg.com/v2-9b287b7922f2d1fabb5b47b6caa42cae_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-9b287b7922f2d1fabb5b47b6caa42cae_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>基本定时器、通用定时器的时基单元<b>由3部分组成：</b> <b>分频器、计数器、自动重装器。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>TIMx_PSC分频寄存器：设置分频器对时钟源的分频比</li><li>TIMx_CNT 核心计数器 ：对从分频器过来的时钟进行计数</li><li>TIMx_ARR自动重装寄存器：为计数器设置计数边界或重装值。比如计数器向上计数时，记到多少发生溢出；向下计数时从多少开始往下计数。</li><li>TIMx_ARR/ TIMx_PSC 都分别由影子寄存器和预装载寄存器组成即使用双寄存器机制。</li><li>影子寄存器：乃TIMER运行中真正起作用的寄存器，即实际寄存器。</li><li>预装载寄存器：乃用户操作的寄存器，提前为影子寄存器做数据准备。</li><li>在发生更新事件时，预装载寄存器的数据拷贝到 影子寄存器发挥作用</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32高级定时器时基单元</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-dab493455f26cdbe013ff01b8887f389_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"367\" class=\"origin_image zh-lightbox-thumb\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-dab493455f26cdbe013ff01b8887f389_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;715&#39; height=&#39;367&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"715\" data-rawheight=\"367\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"715\" data-original=\"https://pic2.zhimg.com/v2-dab493455f26cdbe013ff01b8887f389_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-dab493455f26cdbe013ff01b8887f389_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>相比通用定时器，高级定时器时基单元增加了 重复计数器 和对应的寄存器TIMx_RCR，重复计数器是个向下计数器；当计数器发生 TIMx_RCR+1次溢出动作后 会触发更新事件。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、计数器的时钟源</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-26e95f60f67b14c433b2d146666d380b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb\" width=\"840\" data-original=\"https://pic4.zhimg.com/v2-26e95f60f67b14c433b2d146666d380b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;840&#39; height=&#39;498&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"840\" data-original=\"https://pic4.zhimg.com/v2-26e95f60f67b14c433b2d146666d380b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-26e95f60f67b14c433b2d146666d380b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>内部时钟TIMx_CLK</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-82655e836394472e284c20002e357a38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic1.zhimg.com/v2-82655e836394472e284c20002e357a38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;711&#39; height=&#39;502&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"502\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"711\" data-original=\"https://pic1.zhimg.com/v2-82655e836394472e284c20002e357a38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-82655e836394472e284c20002e357a38_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>内部触发输入：ITRx</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-d8247fe7a3cbca2bd779ff30364a8bba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-d8247fe7a3cbca2bd779ff30364a8bba_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;768&#39; height=&#39;497&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"768\" data-original=\"https://pic3.zhimg.com/v2-d8247fe7a3cbca2bd779ff30364a8bba_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-d8247fe7a3cbca2bd779ff30364a8bba_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>外部时钟源模式1示例：TI2上升沿</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-7c536d02d6d10d0ac178bd03428c4eb2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"832\" data-original=\"https://pic3.zhimg.com/v2-7c536d02d6d10d0ac178bd03428c4eb2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;832&#39; height=&#39;464&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"832\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"832\" data-original=\"https://pic3.zhimg.com/v2-7c536d02d6d10d0ac178bd03428c4eb2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-7c536d02d6d10d0ac178bd03428c4eb2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-64d9f9fe892571493c7eca8c0d5f5481_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-64d9f9fe892571493c7eca8c0d5f5481_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;752&#39; height=&#39;504&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"752\" data-original=\"https://pic2.zhimg.com/v2-64d9f9fe892571493c7eca8c0d5f5481_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-64d9f9fe892571493c7eca8c0d5f5481_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>外部时钟源模式2</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1cc099081f6f6a7e65edeccedcaa4a17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb\" width=\"616\" data-original=\"https://pic4.zhimg.com/v2-1cc099081f6f6a7e65edeccedcaa4a17_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;616&#39; height=&#39;473&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"473\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"616\" data-original=\"https://pic4.zhimg.com/v2-1cc099081f6f6a7e65edeccedcaa4a17_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-1cc099081f6f6a7e65edeccedcaa4a17_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6c9f1b92cf8c2a908e6fc0895fd9fe4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"756\" data-original=\"https://pic2.zhimg.com/v2-6c9f1b92cf8c2a908e6fc0895fd9fe4d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;756&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"756\" data-original=\"https://pic2.zhimg.com/v2-6c9f1b92cf8c2a908e6fc0895fd9fe4d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6c9f1b92cf8c2a908e6fc0895fd9fe4d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>各种时钟源的寄存器配置</b><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8ebc091f2fc8e83f0dcfc515cf40b9c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-8ebc091f2fc8e83f0dcfc515cf40b9c9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;790&#39; height=&#39;468&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"790\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"790\" data-original=\"https://pic2.zhimg.com/v2-8ebc091f2fc8e83f0dcfc515cf40b9c9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8ebc091f2fc8e83f0dcfc515cf40b9c9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e77ce46469c2d58034590713f8ea7e7e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"145\" class=\"content_image\" width=\"146\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;146&#39; height=&#39;145&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"146\" data-rawheight=\"145\" class=\"content_image lazy\" width=\"146\" data-actualsrc=\"https://pic3.zhimg.com/v2-e77ce46469c2d58034590713f8ea7e7e_b.png\"/></figure><p><b>也可以直接登陆电堂网站观看课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74863029", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【从智能锁谈STM32安全技术】之 - 安全固件安装", 
            "content": "<p><b><i>1、</i>为什么我们需要安全固件安装</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在第六季内容中，将介绍安全固件安装 SFI (Secure Firmware Installation)的原理及解决方案。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>安全固件安装的本质是，我们是否能相信工厂的制造过程是安全的过程。如果我们相信工厂是可靠的，相信它总是按照我们的指示，例如，我们希望它不要泄露固件代码，我们希望它不要过生产，他们都能一一办到，那么安全固件安装是没有用武之地。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>然而，总有一些工厂，或者工厂里的某些员工 ，他们为了一时利益，可能会将研发设计公司辛苦开发的源代码（通常是厂商的二进制固件代码），直接泄露给其他第三方。同时他们也有可能将委托生产的产品过生产。即，如果我们希望他试着生产的 1000 台 ，结果他们也许会生产 2000 台。1000 台按照合同提供回给厂商，使用正规的商标与品牌，另外 1000 台则不知道使用什么样的商标流入市场。如果该产品在市场上很火爆，他们获得的利益会远远超过代工的收益。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32 在这种情景下，提供了一种技术手段，来保护委托方产品研发的权益。也就是说除了正常的 法律手段之外，STM32 技术手段可以防止工厂泄漏受委托生产的固件的二进制代码，同时防止工厂进行过生产，获取非法利益。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p><i><b>2、</b></i>安全固件安装的两个关键问题及解决<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>安全固件安装涉及两个关键问题。第一是固件代码的保密性，就是说，我们即使使用第三方工厂进行制造，我们也不会因为工厂制造的安全弱点，而把我们的固件的二进制代码泄露出去。第二个问题就是过生产、产计数的问题。如果我们下的订单是 1000 台，绝无可能生产 1001 台。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>要进行固件保密，一种方法就是我们派一个人常驻工厂，24 小时的对工厂流程进行监控。这种情况下我们可以确保没有人去复制二进制固件代码。还有一种方法就是通讯安全的思路。从公司研发部门到设备终端构建一个端对端的安全通道。在这个安全通道上面传输固件。如果你已听过前面的安全讲座的话，我们很快就可以知道，实现这个方法一定是加密技术。我们在研发部门发布产品的时候对固件二进制代码进行加密，然后让设备， 也就是 STM32 进行解密。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么引出第一个问题，这个加密或者解密的密钥，是如何从研发部门传递到设备里去呢？ 这就需要安全通道的概念。我们从前面的加解密技术也知道，我们有能力构建这样的一个安全通道。我们或者利用公钥体系，或者利用对称密钥体系。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么第二个问题，防止工厂不会过生产产品这个问题是如何解决的呢？如果我们能够控制 STM32 能加密的次数，我们就可以控制实际的产。第一个问题已提到，固件是加密 的。那么，只有通过解密，固件才能在 STM32 里运行。解密的过程，是在 STM32 内部。 换言之， 这是一个产品授权的概念。源端只授权了 1000 台的生产，那么工厂是没有办法 解开 1001 个固件包进行安装。</p><p>我们总结一下 ，在工厂里实施固件保密，是通过对称密钥技术。技术原因是，固件一般比 较大，不适合使用公钥算法。而产计数，则是授权的概念，所授权的数字对应于具体的需要生产的产品数目。解密的密钥通过安全的通道直接发送到设备里去。STM32 设备里所运行的程序，是由ST开发，是可信的代码。它能够保证解密的密钥只使用一次。从而保证了使用次数与授权次数相一致。这样一个产计数就成功实现了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><i><b>3、</b></i>安全固件安装的示例解决方案<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>在了解原理的基础上，我们再具体的看一下这个解决方案的组成。在这个解决方案里有三 个角色，一个角色是研发部门，它是固件的制造者；另一个角色是工厂的产线；第三个参与者则是 STM32 芯片。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b00c3388bd167ba1ab8397bf1c2bf992_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb\" width=\"943\" data-original=\"https://pic3.zhimg.com/v2-b00c3388bd167ba1ab8397bf1c2bf992_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;943&#39; height=&#39;501&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"943\" data-rawheight=\"501\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"943\" data-original=\"https://pic3.zhimg.com/v2-b00c3388bd167ba1ab8397bf1c2bf992_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-b00c3388bd167ba1ab8397bf1c2bf992_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>想了解更多的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-d3cf417bb68162ccb108c800934e1287_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"149\" class=\"content_image\" width=\"150\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;150&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"150\" data-actualsrc=\"https://pic4.zhimg.com/v2-d3cf417bb68162ccb108c800934e1287_b.png\"/></figure><p><b>也可以直接登陆电堂网站观看课程</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "智能锁", 
                    "tagLink": "https://api.zhihu.com/topics/19668468"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74805629", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 0, 
            "title": "当STM32遇到Linux = STM32MP1", 
            "content": "<p><b>STM32MP1</b>系列是ST今年2月重磅推出的最新多核微处理器产品（MPU），集成两颗主频 650MHz 的 Arm® Cortex-A7 应用处理器内核和一颗运行频率209MHz 的高性能 Arm® Cortex-M4 微控制器内核。这一灵活的异构计算架构在充分满足多种应用的灵活性需求的同时，又实现了最佳性能和低功耗特性。Cortex-A7 内核支持开源操作系统 (Linux/Android)，Cortex-M4 内核完美沿用现有的 STM32 MCU 生态系统，有助于开发者轻松实现各类开发应用。同时，STM32MP1嵌入了3D图形处理器(GPU)，以支持人机界面(HMI)显示器；兼备高能效实时控制和高功能集成度，有助于简化工业制造、消费电子、智能家居、医疗应用高性能解决方案的开发。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32MP1 拥有包括丰富的开发生态系统在内的诸多优点</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>• 支持主流开源发行版操作系统Linux 以及合作伙伴提供的 Android操作系统<br/>• 适用于 Cortex-M4 内核的 STM32Cube 固件库和嵌入式软件包<br/>• 可选的为高级 HMI 开发提供的3D 图形处理单元 (GPU)<br/>• 丰富的数字与模拟外设集<br/>• 高级安全功能<br/>• 得益于高集成度特性、封装兼容性与低成本 PCB 技术（可以低至 4 层镀通孔 (PTH) PCB）和专用电源管理 IC (PMIC) 等优势，实现最佳物料清单 (BOM)<br/>• ST 及合作伙伴提供的高级开发工具<br/>• 一流的全球当地在线支持服务<br/>• 遍布全球的分销渠道<br/>• 承诺10 年产品供货保障，且每年更新<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>支持开源操作系统的 STM32 生态系统</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>熟悉 Cortex®-M4 MCU 环境的开发人员能轻松实现他们的目标，因为他们能够使用相同的 STM32Cube 工具套件，包括基于 GCC 的 IDE、STM32CubeProgrammer 和 STM32CubeMX。此外，这款套件还配有 DRAM 接口调试工具，可以轻松配置 DRAM 子系统。</p><p><br/><br/>面向 Arm® Cortex®-A7 内核进行开发时，ST 通过使用主流的开源 OpenSTLinux 发行版进行开发，帮助用户消除潜在的障碍，确保应用软件移植的简便性和快速性。<br/><br/></p><p><b>灵活的双核架构</b></p><p><br/>Cortex-A7 内核专用于开源操作系统，Cortex-M4 内核则专用于实时及低功耗任务处理。<br/><br/>• 650 MHz 主频的双 Cortex®-A7 内核：32 KB L1 指令缓存，32 KB L1 数据缓存，256 KB 级别 2 缓存<br/><br/>• 209 MHz主频 的 Cortex®-M4 内核：单精度浮点运算单元 (FPU)，数字信号处理器 (DSP) 指令，用于提高应用安全性的存储器保护单元(MPU)<br/><br/>Cortex-M4 内核得益于内置的 SRAM (448 KB），可运行完全确定的代码。例如，当前使用基于 STM32Cube 固件库的 STM32 MCU 的客户可直接在 Cortex-M4 内核的 448 KB SRAM 上完全重复使用其代码，并可添加到 Cortex-A7 内核上运行的 Linux 应用程序（例如 HMI）。<br/><br/>为满足各种各样的应用需求，大多数外设都可分配给 Cortex-A7 或 Cortex-M4 内核。<br/><br/></p><p><b>能  效</b></p><p><br/>• 动态效率：Cortex-A7 和 Cortex-M4 内核可独立运行或停止以实现最佳能效，从而满足各种处理和实时应用需求。<br/>• 低功耗模式：支持多种低功耗模式，其中包括： <br/>o 待机模式：低至 36 µW。<br/>o VBAT 模式：低至 4.5 µW。在此模式下，可以使用实时时钟跟踪时间，同时支持侵入检测功能确保系统安全。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果想了解更多可以关注“AI电堂”公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5b80ec43da25ce47b0cd052ecb03fa03_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"147\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;147&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"147\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic4.zhimg.com/v2-5b80ec43da25ce47b0cd052ecb03fa03_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>或者直接登陆电堂网站观看课程</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/74620029", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【话说定时器系列】之三：STM32定时器的信号触发与主从模式", 
            "content": "<p><b>STM32定时器</b>是 ST MCU 内部最基础且常用的外设，实际应用尤为普遍。去年，电堂推出了<b><u><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《STM32 TIMER基础及常规应用介绍》</a></u></b>，为大家梳理了 STM32 TIMER 的庞大内容，涵盖 TIMER 的基本应用原理、常规应用等。现在将课程内容整理为文章，针对STM32定时器有基本了解的用户，分享具体的应用实现环节及常见问题解决。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本文重点介绍STM32定时器的几种触发输入信号、触发输出信号以及信号如何产生的；以及常见的定时器从模式及特征。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32定时器的信号触发与主从模式</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>本文介绍的<b>定时器的信号触发与主从模式</b>，主要指通用定时器或高级定时器，不涉及基本定时器，因为基本定时器相对比较简单，对外无过多联络。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那对于STM32定时器而言，有哪些触发信号呢？这些信号来自何处？或流向哪里呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>触发信号分两大类：触发输入信号【TRGI】，简单地讲就是从外部引入到本定时器的信号；另一类就是触发输出信号，即TRGO信号，它是定时器输出给其它定时器或外设的触发信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在STM32参考手册里文字描述部分，找不到一句完整的关于触发输入信号的描述文字，它主要把触发输入信号的概念融入进时钟源部分，倒是在从模式控制寄存器TIMX_SMCR的TS字段对定时器的触发输入信号有个系统的归纳。从数目上有讲一般可以多达8个，大致分为三类：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dc6f5fbd51f6f60967defd49a2f0717a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"344\" data-rawheight=\"224\" class=\"content_image\" width=\"344\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;344&#39; height=&#39;224&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"344\" data-rawheight=\"224\" class=\"content_image lazy\" width=\"344\" data-actualsrc=\"https://pic3.zhimg.com/v2-dc6f5fbd51f6f60967defd49a2f0717a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-dc75c336c1a3a7a84b4b00e9dec937c2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-dc75c336c1a3a7a84b4b00e9dec937c2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;168&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-dc75c336c1a3a7a84b4b00e9dec937c2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-dc75c336c1a3a7a84b4b00e9dec937c2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一类</b>：来自定时器自身输入通道1或通道2的输入信号，经过极性选择和滤波以后生成的触发信号，连接到从模式控制器，进而控制计数器的工作；顺便提醒下，来自通道1的输入信号经过上升沿、下降沿双沿检测而生成的脉冲信号进行逻辑相或以后的信号就是TI1F_ED信号，即TI1F_ED双沿脉冲信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bc06c801f548f081fa2a312781593540_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-bc06c801f548f081fa2a312781593540_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;255&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"255\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-bc06c801f548f081fa2a312781593540_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bc06c801f548f081fa2a312781593540_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-9e3ddfacc1b911a112501a5f2e8befe8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-9e3ddfacc1b911a112501a5f2e8befe8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-9e3ddfacc1b911a112501a5f2e8befe8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-9e3ddfacc1b911a112501a5f2e8befe8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5725614b16ab23dbac666d0f171db664_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-5725614b16ab23dbac666d0f171db664_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;221&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"221\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-5725614b16ab23dbac666d0f171db664_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5725614b16ab23dbac666d0f171db664_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第二类</b>，来自于外部触发脚[ETR脚]经过极性选择、分频、滤波以后的信号，经过触发输入选择器，连接到从模式控制器。当然分频和滤波不是必需的，可以根据外来信号频率高低及信号干净度来决定。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-6c9c9abce2128b32fcc880ec4a338f38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-6c9c9abce2128b32fcc880ec4a338f38_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;318&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"318\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-6c9c9abce2128b32fcc880ec4a338f38_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-6c9c9abce2128b32fcc880ec4a338f38_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第三类</b>，来自其它定时器的触发输出信号，通过内部线路连接到本定时器的触发输入控制器而连接到从模式控制器。【当然个别特定外设也会产生一些输出信号给到定时器，这里不做重点讨论】再具体一点说，就是其它定时器的触发输出信号连接到本定时器的内部触发输入端ITRx，x可能是0~3，也就是说常规定时器内部最多可以4路内部输入选择端。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>结合前面的介绍，不论来自本定时器外部的哪一类触发输入信号，它们有个共同特点，就是都要经过触发输入选择器而连接到从模式控制器，从而使得计数器的工作受到从模式控制器的控制或影响，基于这一点，定时器工作在从模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么，定时器的从模式控制器可以对计数器实现哪些控制或影响呢？从模式控制器检测到触发输入信号时，可以对定时器进行如下操作而控制或影响计数器的工作：</p><p>1、对计数器复位</p><p>2、启动或停止计数器的计数动作</p><p>3、使能计数器模块的工作</p><p>4、通过触发信号为计数器提供时钟源</p><p class=\"ztext-empty-paragraph\"><br/></p><p>既然这么多可能的控制方式，那么，当触发输入信号出现时，从模式控制器到底如何影响计数器的工作呢？这就引出了定时器从模式话题。也就是说，从模式控制器最终如何控制或影响计数器的工作，又取决于定时器的从模式。定时器的从模式又有哪些呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>整体上讲，STM32通用或高级定时器的从模式有如下几种：[SMS@TIMx_SMCR]</p><p><b>1、复位模式 【Reset mode】</b></p><p><b>2、触发模式 【Trigger mode】</b></p><p><b>3、门控模式  【Gate mode】</b></p><p><b>4、外部时钟模式1 【External clock mode 1】</b></p><p><b>5、编码器模式 【encode mode】</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于<b>编码器模式</b>，它是针对编码器应用的一个特定从模式，应用时注意使用定时器的通道1、通道2引进编码器脉冲，这里不赘述。以下重点介绍前四种从模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>复位模式[Reset Mode]</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c588f0c15c35f34f0cedc00073212799_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"245\" class=\"origin_image zh-lightbox-thumb\" width=\"575\" data-original=\"https://pic2.zhimg.com/v2-c588f0c15c35f34f0cedc00073212799_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;575&#39; height=&#39;245&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"245\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"575\" data-original=\"https://pic2.zhimg.com/v2-c588f0c15c35f34f0cedc00073212799_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c588f0c15c35f34f0cedc00073212799_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当有效触发输入信号出现时，计数器将会被复位，同时还会产生更新事件和触发事件。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果计数器向上计数或中央对齐模式的话，复位后计数器从0开始计数，如果向下计数模式，复位后计数器从ARR值开始计数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>不妨以计数器向上计数为例，将它配置在复位从模式。比方说当计数器计数到某个数据的时候，来了个触发信号，计数器不再继续往上计数，而是重新归0后开始计数。当然，计数器的实际复位操作与触发沿之间往往会有个小的延时，这是由于触发信号作为有效触发脉冲的话，还需要经过定时器内的同步电路确认。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-1d14753c9d6eb7a30399e37090f8ddf5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-1d14753c9d6eb7a30399e37090f8ddf5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;173&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"173\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-1d14753c9d6eb7a30399e37090f8ddf5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-1d14753c9d6eb7a30399e37090f8ddf5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里顺便插几句，我们在介绍定时器的更新事件源时会提到复位模式下的触发脉冲，就是指现在讨论的情形。即处于复位模式的定时器，在触发信号的作用下可以对计数器复位并产生更新事件，实现预装载寄存器内容到影子寄存器的拷贝更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>关于处于复位模式下的定时器，有两点提醒：</b></p><p>1、只要有复位触发脉冲出现，计数器就会被复位重置。复位次数取决于触发脉冲次数。</p><p>2、工作在复位模式下的定时器，其使能需靠软件代码实现，即使能定时器的CEN@TIMx_CR1位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>触发模式 [Trigged Mode]</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当有效触发输入信号出现时，会将本来处于未使能状态的计数器使能激活，让计数器开始计数，同时还会产生触发事件。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>触发从模式下，触发信号具有相当于软件使能计数器的作用，即置位CEN@TIMx_CR1，这也是它最大最明显的特征。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-43bac76633e8a236f4fbc39fc4c47e79_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-43bac76633e8a236f4fbc39fc4c47e79_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;191&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic2.zhimg.com/v2-43bac76633e8a236f4fbc39fc4c47e79_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-43bac76633e8a236f4fbc39fc4c47e79_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-a04c7bb048d5f6071c2ed7c0807460f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-a04c7bb048d5f6071c2ed7c0807460f0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;231&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-a04c7bb048d5f6071c2ed7c0807460f0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-a04c7bb048d5f6071c2ed7c0807460f0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>门控模式 [Gate Mode]</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>定时器根据触发输入信号的电平来启动或停止计数器的计数。在计数器启动或停止时都会产生触发事件并置位相关标志位,TIF@TIMx_SR。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>下图表示来自TI1的输入信号，低电平时计数器启动计数，高电平时停止计数。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-6945efbbba354aab31c1fc564965d6a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb\" width=\"575\" data-original=\"https://pic4.zhimg.com/v2-6945efbbba354aab31c1fc564965d6a3_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;575&#39; height=&#39;212&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"212\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"575\" data-original=\"https://pic4.zhimg.com/v2-6945efbbba354aab31c1fc564965d6a3_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-6945efbbba354aab31c1fc564965d6a3_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-bb4b71e3b1e36168d589aa0d1e339ccc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-bb4b71e3b1e36168d589aa0d1e339ccc_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;576&#39; height=&#39;179&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"179\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"576\" data-original=\"https://pic1.zhimg.com/v2-bb4b71e3b1e36168d589aa0d1e339ccc_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-bb4b71e3b1e36168d589aa0d1e339ccc_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>同样，工作在门控模式下的定时器，其使能需靠软件代码实现，即使能定时器的CEN@TIMx_CR1位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>外部时钟模式1从模式 [External Clock Mod1]</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这个模式比较特别，名字也有点奇葩。其实，这个从模式跟时钟源的外部时钟模式1有渊源。在介绍计数器时钟源时，讲到过外部时钟模式1，即计数器的时钟来自TI1或TI2的输入脉冲，连接到从模式控制器并为计数器提供时钟。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>也就是说，当计数器的时钟来自触发信号时，计数器就处于外部时钟模式1从模式。当然，这个触发信号就不仅仅限于来自定时器通道TI1/TI2的输入信号，还可以是上面提到过三类触发输入信号的任一种，比方来自其它定时器的触发输出信号，或者来自ETR脚的触发输入信号。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>或者，反过来讲，如果定时器的时钟来自外来触发信号时，它一定就工作在外部时钟模式1从模式，显然，它的工作离不开这个触发信号，不然连计数时钟都没有。这个从模式“从”得很彻底。<br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>比如，我们可以使用来自ETR脚的滤波信号ETRF作为触发信号并担当计数器的时钟源。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>到此，上面比较集中介绍了几类常见定时器触发输入信号以及四种典型的定时器从模式及各自特点。<b>触发模式的典型特点是触发信号可以使能计数器的工作，其它模式的计数器的工作需要软件使能</b>。<b>外部时钟模式1从模式比较特别，当计数器的时钟源来自触发信号时，此时定时器就工作在外部时钟1从模式，此时触发信号扮演着双角色，即触发信号与时钟信号。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>前面重点介绍了基于触发信号与定时器的触发与同步，当触发信号是源于其它定时器的触发输出时，这里就自然而然地衍生出了不同定时器间的触发与同步，定时器间联系的纽带就是这个触发信号。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>定时器间的触发与同步，并无拓展新概念，只是基于定时器信号触发与同步的做了应用上的延伸。定时器所涉及的从模式还是上面提到的那几种，复位模式、触发模式、门控模式及外部时钟1模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>前面多次提到其它定时器的触发输出，这里的其它是相对而言的，本定时器以为的定时器就是其它定时器。一般来讲，STM32的常规定时器都能输出触发信号[TRGO]，差别在于不同定时器的可能的输出信号源在数量上或者类型上有差异。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32定时器可以有哪些触发输出信号呢？或者说怎样才能产生触发输出信号呢？整体上讲，常规定时器可以如下方式产生触发输出信号[TRGO]：</p><p>1、软件方式对定时器复位：置位UG@TIMx_EGR</p><p>2、使能计数器。置位CEN@TIMx_CR1</p><p>3、定时器更新事件</p><p>4、定时器捕获、比较事件</p><p>5、各输出通道中间参考信号 OCxREF</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这里要提醒下，通过软件方式对定时器复位，即置位UG@TIMx_EGR，从而产生触发输出信号。它只是产生触发输出信号的一种途径，并非表示该触发输出信号连接到从定时器后，就一定会使得从定时器复位。从定时器复位与否与哪种触发信号无关，取决于从模式下定时器具体的从模式类型。即只有定时器处于复位从模式时，外来触发信号才会导致从定时器复位。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>定时器的主从模式小结</b></p><p><br/>当定时器的工作受到外来触发信号的影响或控制时，它就是工作在从模式，其中从模式可以有多种；如果某定时器能产生触发输出并作为其它定时器的触发输入信号时，此时该定时器就是工作在主模式。如果某定时器的工作既受外来触发信号的影响或控制，同时又能输出触发信号影响或控制别的从定时器，它就是处于主从双角色模式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>感兴趣的朋友可以关注“AI电堂”公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2d21d09238da63cd2eb8cc95774e2ba8_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"148\" data-rawheight=\"149\" class=\"content_image\" width=\"148\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;148&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"148\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"148\" data-actualsrc=\"https://pic1.zhimg.com/v2-2d21d09238da63cd2eb8cc95774e2ba8_b.png\"/></figure><p>或者直接登陆电堂网站观看课程</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/columndetail%3Fid%3D9d1e3a7085cf4ddc99f0ef1fe9e1c37e\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "定时器（程序开发）", 
                    "tagLink": "https://api.zhihu.com/topics/19655962"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/73939701", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "【物联千万种，安全第一条】《STM32安全技术导论》之通讯安全", 
            "content": "<p>众所周知，现实的系统已经不再是一个信息孤岛，物联网更是提出了“万物互联”的口号。一个 MCU，小到和周边其他芯片进行协作，大到和云端进行通信, 上报数据、接受指令，如何保证这些数据、指令不被修改，不被假冒，不被窃听，已经是一个基本需求。对于通讯安全的主要部分，网络安全技术，在 STM32 MCU 上有个轻量级的 TLS 实现，已经被作为中间件集成进 STM32 CubeMx。 </p><p class=\"ztext-empty-paragraph\"><br/></p><p>TLS 的实现本身是一个密码学技术的集成，非常复杂，实现了保密，完整，身份认证，消息认证的服务，而大家最关心的还是如何使用 TLS。在本季课程中，我们不仅介绍 TLS的基本原理、身份认证、密钥协商、通讯加密，并帮助你解决使用 TLS 的问题。例如，选密码套件为什么不再推荐使用 AES-CBC 这个加密模式了；为什么推荐 ECDHE 来进行密钥协商，不再推荐使用 RSA 的公钥加密了。  </p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>1、</i>智能锁面临的远程技术威胁</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-39ca0c4a7dce7a2a3fc9d89e652ac572_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-39ca0c4a7dce7a2a3fc9d89e652ac572_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;539&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-39ca0c4a7dce7a2a3fc9d89e652ac572_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-39ca0c4a7dce7a2a3fc9d89e652ac572_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>网络联网可以小规模组网，也可以直接连上 Internet。小规模组网，则多个设备在某个空间区域组成一个内部的网络。这种情况下，信息在这个局部网络之间流动。而连入Internet, 则设备能够通过 Internet 向服务器端发送消息，也可以从服务器端接收消息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>无论设备是否连接到 Internet, 一旦组成一个网络，就面临通讯链路上的威胁。这些威胁就是我们前面提到的，在通讯线路上，我们面临信息被窃听，信息被纂改，信息被假冒的风险。 换言之，要么智能锁仅仅是以单机的形式存在，否则，不管智能锁是和一个内部的服务器通讯， 还是与一个存在于 Internet 的云进行消息交互，都存在通讯链路上的这些威胁。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为什么我们会下这个断言？ 什么样的系统弱点导致我们如此肯定？</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>第一个原因就是连接方式不安全。</b></p><p><b>第二个原因是中间节点不安全。 </b></p><p><b>第三个原因是无法确定通讯对方是否可靠。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>互联网上两个节点之间的通讯，永远面临一个问题，怎么相信对方就是我应该谈话的那个人呢？ 所以我们一定要对其进行认证，而且最好是进行双向认证。这些需求叠加在一起的一个典型实现就是 TLS。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>2、</i>TLS 基本原理</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>㈠ TLS 的成长史</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TLS 全称为Transport Layer Security，意指传输层安全，是解决网络安全的重量级武器。传输层安全最早由网景公司所开发，那时的名字还不叫TLS，而是SSL Secure Sockets Layer，即安全套接字层。 <br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TCP/IP 的四层模型，如下图所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-2695752dd64a4d999b2cd9c8e295a9a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"265\" data-rawheight=\"381\" class=\"content_image\" width=\"265\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;265&#39; height=&#39;381&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"265\" data-rawheight=\"381\" class=\"content_image lazy\" width=\"265\" data-actualsrc=\"https://pic2.zhimg.com/v2-2695752dd64a4d999b2cd9c8e295a9a9_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>图示 TLS 在TCP/IP 中的层次</p><p class=\"ztext-empty-paragraph\"><br/></p><p>SSL 传输层和应用层之间，SSL/TLS 非常灵活。所有应用层的协议，如上网用的 http, 传输文件的 FTP，收发邮件的 POP3 以及 SMTP，都可以透明地使用 SSL/TLS 所提供的安全服务。SSL1.0 是不成熟的未发布版本，SSL2.0 版本于1995 年由网景公司对外发布了 ，但因其低安全性被弃用。后来陆续发布了 SSL3.0，TLS1.0 （即 SSL3.1版）。SSL3.0 和 TLS1.0 使用非常广泛，之后又有 TLS1.1、TLS1.2 发布。2018 年 TLS1.3 发布，将之前协议中加密传输前，额外的两个来回的握手简化为1 个来回。还根据安全通讯的一些研究，大大减少了密码套件的选择，比如不再有3DES, RC4， AES-CBC, SHA1, MD5 选择，同时取消了使用RSA 作为密钥交换的方式。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>㈡ TLS 的一般原理</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>TLS 的目的是建立起一个安全的通道。在建立安全通道、可以安全地传输数据之前，我们要经历一个TLS 握手过程。因此，TLS 协议是一个两阶段协议，握手阶段 + 应用数据加密传输阶段。同时，TLS 的协议又具有层次结构，如下图所示，所有的报文都会通过记录层协议 Record Layer Protocol 进行打包传输。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-cd67fb65686f77e1a64eae3ddb722dc1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"771\" data-original=\"https://pic2.zhimg.com/v2-cd67fb65686f77e1a64eae3ddb722dc1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;771&#39; height=&#39;210&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"771\" data-original=\"https://pic2.zhimg.com/v2-cd67fb65686f77e1a64eae3ddb722dc1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-cd67fb65686f77e1a64eae3ddb722dc1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>图示  TLS 的内部分层</p><p class=\"ztext-empty-paragraph\"><br/></p><p>握手阶段有三个目标：① 关于密码算法达成一致；② 关于密码算法的参数达成一致，因为密码算法的参数时一个主密钥分割而成，这里是如何形成主密钥；③ 验证对方身份，建立信任。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>然而，这里还存在<b>中间人攻击</b>的风险，如何应对？一种方式，我们<b>使用可信的方式交换证书</b>，即只相信那些手工检查后，手工接受的证书。但这种方式的局限性在于无法用在生活中并不直接的面对面接触的网站，因为数量就过于庞大，且无法更新。而且，并非所有人都具备这个能力去检查证书的真伪。这就需要一个<b>根证书和证书链</b>。根证书来自于可信的 CA 授权中心，我们就在设备里预先烧好这个根证书。这样，当我们收到一个外部的证书时，可以从陌生证书的链条，一级一级向上验证，看看最终能不能归结到这个根证书。如果能，那么这个证书是可靠的。如果大家去抓 TLS 的握手协议报文，在服务器返回的证书链中，一般至少有两个证书：服务器的证书和 CA 授权中心的中间证书。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>关于<b>身份认证</b>，还需要讨论单向认证与双向认证。很多网站服务器提供内容的服务，并关心连接的客户端是谁，也就是说，谁都可以连接它；而客户端会关心连接的服务器是否真实。对于物联网设备，你能否享受云服务，而通常云服务不是免费的，那么云端一定要认证设备。同时，如果物联网设备端有很多隐私数据，那么物联网设备希望云是可靠的。这种情况下，物联网设备就需要验证这个云的证书。因而，在大部分情况下，物联网设备和云端，在通讯安全上执行的是双向认证。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>密钥协商与通讯加密</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>通讯线路上如果要对消息进行保密，我们需要对称加密；如果我们需要对消息进行认证，则需要一个对称密钥。所以我们最终所需要的密钥有三个：① 消息加解密的对称密钥；② 与对称密钥相关的初始化向量；③ 对消息进行认证的密钥。TLS 这三个密钥是从一个叫主密钥 Master Secert 通过某个算法PRF 伪随机函数派生而来，而且这三个密钥，各不相同。否则，一个被破解，会导致另外一个也被破解。我们需要使用具有前向安全性密钥生成通道。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>双方都获得所有的安全参数之后，就可以进行应用数据的加密。 对于应用数据，仅仅是加密肯定不够，还存在中间人攻击的风险，中间人有可能纂改消息，如重放或打乱顺序等等。所以，还需要对它进行消息认证。那么，是否只要使用了认证就万事大吉呢？答案是如果使用的认证方式不对，如 AESCBC, 依然可能会遭受中间人攻击。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在最早的 TLS 实现里，实现加密的方式是：① 先对消息认证，也就是计算MAC, 包括头部、序列号、消息本身；② 然后进行补齐；③ 最后进行加密。实质上，这种方式存在很大问题，很容易遭受中间人攻击，准确地讲是中间人侧信道攻击。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32 CubeTLS 库</b><br/></p><p>TLS 在 PC 上的实现就是大名鼎鼎的 OpenSSL。对于 STM32 MCU，根据单片机本身 Flash 及RAM 大小，可以达成不同的实现。如下图所示，这里列出了各个公司支持 STM32 的TLS 实现。对于商业用途免费的主要是 MbedTLS。同时 MbedTLS 是 CubeMX 所支持的中间件。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-beeec8ae37c56b23f4351aea84527e62_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"954\" data-original=\"https://pic3.zhimg.com/v2-beeec8ae37c56b23f4351aea84527e62_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;954&#39; height=&#39;372&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"954\" data-original=\"https://pic3.zhimg.com/v2-beeec8ae37c56b23f4351aea84527e62_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-beeec8ae37c56b23f4351aea84527e62_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>图示  STM32 TLS 解决方案</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b><i>3、</i>STM32通讯安全在智能锁中的应用</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>对于网络安全，取决于智能锁的网络拓扑如何构造。一般情况下，智能锁有三种节点：① 智能锁本身；② 智能锁服务器；③ 手机用户。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>那么，这里存在多个通讯联系：</p><p>- 智能锁设备与服务器</p><p>- 手机通过服务器连接智能锁</p><p>- 手机通过蓝牙连接智能锁</p><p class=\"ztext-empty-paragraph\"><br/></p><p>为了保证通讯安全，那我们希望智能锁设备与服务器之间的连接，是通过 TLS 连接。而手机通过服务器连接智能锁，需要通过两个阶段：即通过 TLS 进行加密，在服务器进行解密，然后再次通过 TLS 进行加密。前提是，我们就确信服务器是安全的。但是承担信息二传手作用的服务器真的能保证端到端的安全吗？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果用手机通过蓝牙直接连接智能锁，发送开锁指令，由于蓝牙通讯通常在很短的距离内进行，并不需要过于关注保密性。但是指令可能被记录，然后再在某个时间被重放，那么智能锁就有可能被恶意打开。指令的完整可靠性可以借鉴 TLS 使用随机数，加上时间，加上序列号进行验证码 MAC 的计算。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>来电堂听课，找你要的设计秘笈！</b></p><p>感兴趣的朋友可以关注“AI电堂”公众号</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e10d43a212b9ad22967b2f75080d75b4_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image\" width=\"151\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;151&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"151\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"151\" data-actualsrc=\"https://pic1.zhimg.com/v2-e10d43a212b9ad22967b2f75080d75b4_b.png\"/></figure><p>也可以直接登陆电堂网站观看课程</p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }, 
                {
                    "tag": "通信安全", 
                    "tagLink": "https://api.zhihu.com/topics/19856700"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75764124", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 4, 
            "title": "新板在手，G0我有", 
            "content": "<p><b>一、前言</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>近期，ST 新品迭出，G0系列是重磅之一。借ST与电堂联合举办的&#34;旧板换新板&#34;的活动，我有机会获得一块 NUCLEO-STM32G070RB 板尝鲜。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为一名电工，收集开发板当然是我的日常。实话说，很多开发板也就在刚到手时玩个新鲜, 之后都被&#34;打入冷宫&#34;。日常工作亚历山大，的确没时间做个电子发烧友，纯粹&#34;玩板子&#34;。但是ST的开发板不同, 鲜有被束之高阁。原因很简单，日常开发测试经常用到，尤其是Nucleo系列的开发板。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在产品的开发初期，用开发板来验证设计，是非常便捷的，能节省不少工夫。通过&#34;以旧换新&#34;的活动如愿得到这款还未大规模上市的 NUCLEO-STM32G070RB，  试用后还是颇为惊艳。在这里记录下自己的一些体会，希望给读者带来些有益信息。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>二、板子、芯片、内核 — Nucleo/ST/Cortex</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>就Nucleo开发板本身而言，对我已经没有什么新鲜感，甚至有点&#34;审美疲劳&#34;，因为使用非常多，Nucleo 开发板都差不多，只是板载不同的芯片。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-38af0c9398ce2c35fd8441bec2211a23_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"834\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-38af0c9398ce2c35fd8441bec2211a23_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;834&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"834\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-38af0c9398ce2c35fd8441bec2211a23_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-38af0c9398ce2c35fd8441bec2211a23_b.jpg\"/></figure><p> 图1 Nucleo-G070RB正面</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8b508e8e7b87f15d61eb414daafc9589_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"845\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8b508e8e7b87f15d61eb414daafc9589_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;845&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"845\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8b508e8e7b87f15d61eb414daafc9589_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b508e8e7b87f15d61eb414daafc9589_b.jpg\"/></figure><p>图2 Nucleo-G070RB背面</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但对于新手，如在校大学生，或者刚入行的工程师，Nucleo G070RB开发板有可能是他们第一块ST开发板。那我们就来说两句ST官方开发板的种类。ST官方开发板分NUCLEO、Discovery和Eval三个系列，最常见的是NUCLEO和Discovery。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>NUCLEO 是ST官方推出的一系列简配版开发板，根据目标芯片的封装，有Nucleo32、Nucleo64、Nucleo144几种。为什么说是&#34;简配版&#34;呢？因为Nucleo系列的开发板都较简单，基本上就是&#34;Debugger + 目标芯片 + 连接器&#34;。有些Nucleo板子上还有目标芯片的USB接口/以太网接口等等。简单的好处在于几乎所有芯片引脚与资源都开放出来了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为工程师，如果能将 Nucleo 开发板有效利用起来，对效率提升非常有益。相比Nucleo系列，&#34;Discovery&#34;与&#34;Eval&#34;系列的开发板的外设丰富很多，更适合发烧级的&#34;玩&#34;法。本文着重讨论 Nucleo G070RB开发板。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>这次推出G0系列, 有三个系列：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32G070：低成本系列</p><p>STM32G071：主流功能系列  </p><p>STM32G081：安全系列</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0e7e4206c7cf758cff1dcef3739c3ffa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"966\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"966\" data-original=\"https://pic3.zhimg.com/v2-0e7e4206c7cf758cff1dcef3739c3ffa_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;966&#39; height=&#39;530&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"966\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"966\" data-original=\"https://pic3.zhimg.com/v2-0e7e4206c7cf758cff1dcef3739c3ffa_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-0e7e4206c7cf758cff1dcef3739c3ffa_b.jpg\"/></figure><p>图3 G0系列功能图</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-fb73d91aa65075731daef050610f5b58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-fb73d91aa65075731daef050610f5b58_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;128&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"128\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-fb73d91aa65075731daef050610f5b58_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-fb73d91aa65075731daef050610f5b58_b.jpg\"/></figure><p>图4 G070系列产品</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-47af77e8fcf60fb4fd5ba647d5af8d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-47af77e8fcf60fb4fd5ba647d5af8d06_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;700&#39; height=&#39;537&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"700\" data-original=\"https://pic3.zhimg.com/v2-47af77e8fcf60fb4fd5ba647d5af8d06_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-47af77e8fcf60fb4fd5ba647d5af8d06_b.jpg\"/></figure><p>图5 G071, G081系列还有即将上市的其它系列</p><p class=\"ztext-empty-paragraph\"><br/></p><p>由上图可看出，G070 虽是目前推出成本最低的系列（未来还会有更低成本的系列推出），G0x1具备很多高级功能：DAC、USBPD、USB、CAN、安全存储，AES硬件加速在G070上没有的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>尽管如此，G070系列还是有如下亮点：</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1. 90nm工艺，F0系列是180nm工艺，之前的L4系列也是用的90nm工艺。 这个对功耗影响很大，可以说G0系列至少可以达到L4系列级别， 但是功能上G0系列对标的是F0系列。因此G0可看作F0的低功耗升级版本。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2. Cortex M0+内核，对于F0的Cortex M0而言是升级。L0系列也是Cortex M0+，但低功耗性能更好。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3. G0x0与G0x1是Pin2Pin兼容的，所以开发者根据产品的具体功能需求在硬件设计上可以灵活替换。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>三、Demo1：使用CubeMX生成工程</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>下面来体验一下使用CubeMX生成第一个工程：<b>Hello World + Blink。</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>CubeMX最近有大改版， 从4.x升级到5.x。从个人角度来讲，这个工具虽仍有提升空间，但快速图形化生成工程、配置功能，非常便捷。可以说因为CubeMX的存在，STM32系列芯片增色不少。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>CubeMX的安装就不多说了，很简单的操作。直接打开CubeMX，这里有一个吐槽点，就是每次打开强制下载最新的硬件描述信息，个人认为应该按需下载：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-42d5c0e64eff0874bc596ad19b2c3ae8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"200\" class=\"content_image\" width=\"400\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;400&#39; height=&#39;200&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"200\" class=\"content_image lazy\" width=\"400\" data-actualsrc=\"https://pic1.zhimg.com/v2-42d5c0e64eff0874bc596ad19b2c3ae8_b.jpg\"/></figure><p>图6 CubeMX打开后的强制下载最新信息窗口</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>网速好的话一会就下载完了，要是知道板子型号的话使用左边的过滤器很快就可找到Nucleo G070RB板子模板。使用芯片作为模板也可以，但使用板子模版更快捷，有一些现成的配置可直接利用。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-40ec40529efad159e5092207d8782744_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"713\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-40ec40529efad159e5092207d8782744_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;713&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"713\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-40ec40529efad159e5092207d8782744_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-40ec40529efad159e5092207d8782744_b.jpg\"/></figure><p>图7 选择开发板模板</p><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来系统会提示是否使用默认配置。个人认为这是个槽点，如果使用自定义配置， 直接选芯片还选板子干什么。如果是我理解错误，请大咖斧正。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-05274371c95c8165d6e9883256d0b8f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"345\" data-rawheight=\"123\" class=\"content_image\" width=\"345\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;345&#39; height=&#39;123&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"345\" data-rawheight=\"123\" class=\"content_image lazy\" width=\"345\" data-actualsrc=\"https://pic2.zhimg.com/v2-05274371c95c8165d6e9883256d0b8f5_b.jpg\"/></figure><p>图8 默认配置确认窗口</p><p class=\"ztext-empty-paragraph\"><br/></p><p>之后进入项目编辑阶段，因为使用的是默认配置，只需要稍作修改即可。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-5f11e63e26ba7ee7e3b3b4e1f6f58982_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5f11e63e26ba7ee7e3b3b4e1f6f58982_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;627&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5f11e63e26ba7ee7e3b3b4e1f6f58982_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-5f11e63e26ba7ee7e3b3b4e1f6f58982_b.jpg\"/></figure><p>图9 项目编辑窗口</p><p class=\"ztext-empty-paragraph\"><br/></p><p>注意这里有个小坑，默认配置USART使用7bit通信模式。 如果不注意同步修改调试工具的配置那么运行后输出就是乱码。 当然也可以修改调试工具的配置，但是还是按照常规思维将串口改为8bit模式为好。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-26d0273e055d334fca70ea802fefc6d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"604\" class=\"origin_image zh-lightbox-thumb\" width=\"809\" data-original=\"https://pic2.zhimg.com/v2-26d0273e055d334fca70ea802fefc6d9_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;809&#39; height=&#39;604&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"604\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"809\" data-original=\"https://pic2.zhimg.com/v2-26d0273e055d334fca70ea802fefc6d9_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-26d0273e055d334fca70ea802fefc6d9_b.jpg\"/></figure><p>图10 按照7bit配置初始的乱码</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>按照常规思维这里改成8bit模式：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-d7278a8f23819e3269247573a6fbf22d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"961\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"961\" data-original=\"https://pic2.zhimg.com/v2-d7278a8f23819e3269247573a6fbf22d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;961&#39; height=&#39;640&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"961\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"961\" data-original=\"https://pic2.zhimg.com/v2-d7278a8f23819e3269247573a6fbf22d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-d7278a8f23819e3269247573a6fbf22d_b.jpg\"/></figure><p>图11 常规思维的8bit配置</p><p class=\"ztext-empty-paragraph\"><br/></p><p>7bit，9bit这些模式在实际工程中的确有用到的场合，如仅仅传输0-127的数据时用7bit可以提升速率，主从组网时使用9bit多一个控制位。还有些芯片与工具可以支持最低5bit模式，理由就是32个位置可以传输A-Z的字母集了。但是默认配置7bit模式感觉是故意给工程师出附加题的节奏。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>其余外设视乎需要而配置，我在项目中还配置了ADC，GPIO等外设，这里不一一详述，后面会给出参考设计的下载地址。所有配置结束后选择代码生成输出类型，本人使用Keil MDK，用户按需选择，最后点击Generate Code就可生成工程框架。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5e437b4084e8dc51d74caf5144fdc868_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb\" width=\"833\" data-original=\"https://pic1.zhimg.com/v2-5e437b4084e8dc51d74caf5144fdc868_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;833&#39; height=&#39;639&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"833\" data-original=\"https://pic1.zhimg.com/v2-5e437b4084e8dc51d74caf5144fdc868_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5e437b4084e8dc51d74caf5144fdc868_b.jpg\"/></figure><p>图12 选择代码工程输出类型</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果第一次打开G0系列的工程，Keil MDK还会让你下载一个DFP。按照提示操作即可，总之工程自动化程度的提高也是有代价的，代价就是安装很多支持包。总体而言是值得的。生成的工程直接就可以编译下载运行了，但是要看出点效果来还得加几句，我添加的是打印ADC的采样值，还有LD4闪烁。此外还要重定向USART2到pritnf。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a9effcadad02de8859c0f0576a868e3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"654\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a9effcadad02de8859c0f0576a868e3e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;654&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"654\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-a9effcadad02de8859c0f0576a868e3e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-a9effcadad02de8859c0f0576a868e3e_b.jpg\"/></figure><p>图13 重定向串口到printf</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在主文件中添加这个函数：</p><p>int stdout_putchar (int ch)</p><p>{</p><p>uint8_t c = ch;</p><p>HAL_UART_Transmit(&amp;huart2, &amp;c, 1, 1);</p><p>return ch;</p><p>}</p><p>其余代码不赘述，感兴趣的直接下后文代码。注意如果你的用户代码要避免下次自动生成代码被覆盖的话, 要加在这种宏之间：</p><p>  /* USER CODE BEGIN 2 */</p><p>HAL_ADC_Start_DMA(&amp;hadc1, (uint32_t*)g_adc_buf, sizeof(g_adc_buf)/sizeof(g_adc_buf[0]));</p><p>printf(&#34;Clock:%u Hz\\n&#34;, SystemCoreClock);</p><p>  /* USER CODE END 2 */</p><p>到这里就编译下载运行看结果了，所有代码都在后文有下载链接。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>四、Demo2：MPU使用，Privileged与Unprivileged</b></p><p>G0系列主要是用来替代F0系列的产品，所以从Cortex M0到Cortex M0+算是一个升级。Cortex M0与Cortex M0+的区别很细微，很多不注意细节的工程师可能还说不出来两者到底有什么差别。其实ARM公司当初推出Cortex M0的初衷就是替换8bit，16bit的产品，但是很多市场的变化带来嵌入式软件复杂度持续增加。所以Cortex M0被删除的一些功能在Cortex M0+上又补回来了。当然其中很多Cortex M0+新增的功能都是Optional，即可实现也可不实现。 对设计软件的工程师而言Cortex M0+相对于Cortex M0的改变有如下几点比较重要：</p><p class=\"ztext-empty-paragraph\"><br/></p><ol><li>流水线从三级变成了两级，这是为功耗与中断响应速度而考虑的改进。</li><li>VTOR可选，Cortex M0的中断向量是不能有偏移量的，这点设计过Bootloader的程序员会感受很深。</li><li> MPU可选，做过RTOS的任务间隔离的程序员会感受很深。</li><li>两级CPU权限：privileged和unprivileged两种权限状态。 Cortex M0也有这两种权限，只是两种权限完全一样，所以等于没有。<br/></li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p>这里做个Demo展示一下MPU与两级内核状态的使用。设计目的：有一个数组，在用户态仅仅允许读，在内核态可读可写。这种设计在Cortex M0上基本上不可能。在Cortex M0+的芯片如STM32G0F70上，利用MPU和CPU权限可以轻易做到。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>首先声明数组,配置MPU， 注意用的是数组声明是绝对定位：</p><p>#define ARRAY_ADDRESS_START    (0x20002000UL)</p><p>#define ARRAY_SIZE             MPU_REGION_SIZE_256B</p><p>#define ARRAY_REGION_NUMBER    MPU_REGION_NUMBER3</p><p class=\"ztext-empty-paragraph\"><br/></p><p>uint8_t PrivilegedReadOnlyArray[32] __attribute__((at(ARRAY_ADDRESS_START)));</p><p class=\"ztext-empty-paragraph\"><br/></p><p>void MPU_Config(void) {</p><p>  MPU_Region_InitTypeDef MPU_InitStruct = {0};</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_Disable();</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  /* Configure RAM region as Region N°0, 256KB of size and R/W region */</p><p>  MPU_InitStruct.Enable = MPU_REGION_ENABLE;</p><p>  MPU_InitStruct.BaseAddress = EXAMPLE_RAM_ADDRESS_START;</p><p>  MPU_InitStruct.Size = EXAMPLE_RAM_SIZE;</p><p>  MPU_InitStruct.AccessPermission = portMPU_REGION_READ_WRITE;</p><p>  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;</p><p>  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;</p><p>  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;</p><p>  MPU_InitStruct.Number = EXAMPLE_RAM_REGION_NUMBER;</p><p>  MPU_InitStruct.SubRegionDisable = 0x00;</p><p>  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_ConfigRegion(&amp;MPU_InitStruct);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  /* Configure FLASH region as REGION N°1, 1MB of size and R/W region */</p><p>  MPU_InitStruct.BaseAddress = EXAMPLE_FLASH_ADDRESS_START;</p><p>  MPU_InitStruct.Size = EXAMPLE_FLASH_SIZE;</p><p>  MPU_InitStruct.Number = EXAMPLE_FLASH_REGION_NUMBER;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_ConfigRegion(&amp;MPU_InitStruct);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  /* Configure Peripheral region as REGION N°2, 512MB of size, R/W and Execute</p><p>  Never region */</p><p>  MPU_InitStruct.BaseAddress = EXAMPLE_PERIPH_ADDRESS_START;</p><p>  MPU_InitStruct.Size = EXAMPLE_PERIPH_SIZE;</p><p>  MPU_InitStruct.Number = EXAMPLE_PERIPH_REGION_NUMBER;</p><p>  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_ConfigRegion(&amp;MPU_InitStruct);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  /* Enable MPU (any access not covered by any enabled region will cause a fault) */</p><p>  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);</p><p>}</p><p class=\"ztext-empty-paragraph\"><br/></p><p>void MPU_AccessPermConfig(void) {</p><p>  MPU_Region_InitTypeDef MPU_InitStruct = {0};</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_Disable();</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  MPU_InitStruct.Enable = MPU_REGION_ENABLE;</p><p>  MPU_InitStruct.BaseAddress = ARRAY_ADDRESS_START;</p><p>  MPU_InitStruct.Size = ARRAY_SIZE;</p><p>  MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;</p><p>  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;</p><p>  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;</p><p>  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;</p><p>  MPU_InitStruct.Number = ARRAY_REGION_NUMBER;</p><p>  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;</p><p>  MPU_InitStruct.SubRegionDisable = 0x00;</p><p>  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  HAL_MPU_ConfigRegion(&amp;MPU_InitStruct);</p><p class=\"ztext-empty-paragraph\"><br/></p><p>  /* Enable MPU (any access not covered by any enabled region will cause a fault) */</p><p>  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);</p><p>}</p><p class=\"ztext-empty-paragraph\"><br/></p><p>主函数中调用上述函数以使能MPU，并且切换至用户状态：</p><p>  MPU_Config();</p><p>  MPU_AccessPermConfig();</p><p>  __set_CONTROL(THREAD_MODE_UNPRIVILEGED | SP_MAIN);  </p><p>  __ISB(); </p><p class=\"ztext-empty-paragraph\"><br/></p><p>接下来实验读写权限：</p><p>printf(&#34;%s %u\\n&#34;, __func__, __LINE__);</p><p>printf(&#34;%s %u %02X\\n&#34;, __func__, __LINE__, PrivilegedReadOnlyArray[0]);</p><p>这句没毛病，只是读。</p><p>这句就会引起HardFault， 因为在用户状态这个数组是不允许写的。</p><p>PrivilegedReadOnlyArray[0] = (uint8_t)HAL_GetTick();</p><p>printf(&#34;%s %u %02X\\n&#34;, __func__, __LINE__, PrivilegedReadOnlyArray[0]);</p><p>那么要写怎么办？</p><p>答案就是使用SVC指令进入内核权限。</p><p>asm_svc_2(HAL_GetTick());</p><p>printf(&#34;%s %u %02X\\n&#34;, __func__, __LINE__, PrivilegedReadOnlyArray[0]);</p><p>注意asm_svc_2这个是汇编语言写的函数，要放在另外的.s文件中，详情直接看后文的代码下载连接。</p><p>;Supervisor Call 2</p><p>ALIGN</p><p>asm_svc_2 FUNCTION    </p><p>EXPORT asm_svc_2</p><p>SVC #2</p><p>bx lr</p><p>ENDP</p><p>注意要将SVC_Handler的声明改成有参数输入，生成的代码是没有参数输入的。按照AAPS的调用规约，这个函数可以有输入参数。为了求简便，没有区分SVC号，实际工程中这样就比较浪费SVC号了。</p><p>void SVC_Handler(uint32_t input){</p><p>PrivilegedReadOnlyArray[0] = (uint8_t)input;</p><p>}</p><p>这样就可以达到设计目的了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-b8078f2eb870af9ad7ff068b19b2a4fa_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image\" width=\"150\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;150&#39; height=&#39;150&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"150\" class=\"content_image lazy\" width=\"150\" data-actualsrc=\"https://pic3.zhimg.com/v2-b8078f2eb870af9ad7ff068b19b2a4fa_b.png\"/></figure><p><b>或者登陆电堂网站了解更多</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "ST", 
                    "tagLink": "https://api.zhihu.com/topics/19580854"
                }, 
                {
                    "tag": "开发板", 
                    "tagLink": "https://api.zhihu.com/topics/19883423"
                }, 
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/75169576", 
            "userName": "AI电堂", 
            "userLink": "https://www.zhihu.com/org/f29964d190c8e4b669bb47d56ff8368c", 
            "upvote": 2, 
            "title": "STM32Cube生态系统：您的嵌入式开发利器", 
            "content": "<p><b>何为STM32Cube？</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32Cube是专为STM32产品系列而打造的软件生态，主要包括两部分：运行在芯片上的嵌入式软件和安装在电脑端用于开发的软件开发工具。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeMX 5.0</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32CubeMX配置工具创建STM32 微控制器（MCU）项目，将会更直观，更高效。<u><a href=\"https://link.zhihu.com/?target=https%3A//www.st.com/en/development-tools/stm32cubemx.html%3Ficmp%3Dtt8820_gl_pron_nov2018\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">STM32CubeMX v.5.0</a></u>的最新设计的多面板GUI界面在不改变屏幕视图的情况下，能够让用户查看更多参数，完成更多任务，从而让优化MCU配置参数变得更加轻松自如，得心应手。<br/></p><p><br/>STM32CubeMX帮助用户从800多款STM32产品中选择最适合的产品，配置基本硬件功能，自动生成MCU初始化代码，开启嵌入式项目开发之旅。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32CubeIDE</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>近期，STM32Cube软件生态系统中新增一个免费的多功能STM32开发工具：<b>STM32CubeIDE</b>。这套IDE软件采用行业标准的开放式许可条款，为简化和加快基于STM32的嵌入式设计，新增了STM32专用功能，包括功能强大的STM32CubeMX微控制器配置和项目管理工具。通过整合STM32CubeMX与STM32CubeIDE，意法半导体创建了一个更强大的开发环境。</p><p class=\"ztext-empty-paragraph\"><br/></p><ul><li>STM32CubeIDE免费供用户使用，高度集成提供众多高端功能</li><li>集成功能强大的STM32CubeMX，使得它在同类型产品中卓尔不群</li><li>仍继续支持第三方合作伙伴工具，为STM32开发人员提供选择的灵活性<br/></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>STM32Cube.AI</b></p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32系列微控制器问世至今已出货40亿颗，凭借其国民应用级别的市场领导地位，意法半导体在STM32微控制器开发生态系统STM32CubeMX，新增了先进的人工智能（AI）功能 ---STM32Cube.AI，该软件工具扩展包可生成优化代码，在STM32微控制器（MCU）上运行神经网络。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>AI技术使用经过训练的人工神经网络对运动和振动传感器、环境传感器、麦克风和图像传感器的数据信号进行分类，比传统的手工信号处理方法更加快速、高效。开发人员可以用STM32Cube.AI将预先训练的神经网络转成可在STM32 微控制器上运行的C代码，调用经过优化的函数库。从而将AI引入基于微控制器的智能边缘和节点设备，以及物联网、智能楼宇、工业和医疗应用中的深度嵌入式设备。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>STM32Cube.AI附带即用型软件函数包，包含用于识别人类活动和音频场景分类的代码示例，可立即用于意法半导体参考传感器板和移动应用程序。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>感兴趣的朋友可以关注“AI电堂”微信公众号</b></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-750f1ad7f8972ae073f1e743079a2246_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"149\" class=\"content_image\" width=\"150\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;150&#39; height=&#39;149&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"150\" data-rawheight=\"149\" class=\"content_image lazy\" width=\"150\" data-actualsrc=\"https://pic3.zhimg.com/v2-750f1ad7f8972ae073f1e743079a2246_b.png\"/></figure><p><b>或者直接登陆电堂网站了解更多</b></p><a href=\"https://link.zhihu.com/?target=https%3A//c.51diantang.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电堂科技</a><p></p>", 
            "topic": [
                {
                    "tag": "STM32", 
                    "tagLink": "https://api.zhihu.com/topics/19855229"
                }
            ], 
            "comments": [
                {
                    "userName": "王晨", 
                    "userLink": "https://www.zhihu.com/people/9ec413a160e160190296f6361caa4bdb", 
                    "content": "Nb", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_1139497340078583808"
}
