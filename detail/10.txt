{
    "title": "SYSZUX", 
    "description": "Programming、Engineering、Architecture、Practice", 
    "followers": [
        "https://www.zhihu.com/people/buxiu-22", 
        "https://www.zhihu.com/people/lu-jian-qing", 
        "https://www.zhihu.com/people/chen-yun-xin-21", 
        "https://www.zhihu.com/people/wld-87", 
        "https://www.zhihu.com/people/zhi-hu-zhe-ye-25-5", 
        "https://www.zhihu.com/people/xiao-guang-ge-99-88", 
        "https://www.zhihu.com/people/hong-zi-14-93", 
        "https://www.zhihu.com/people/zhu-chang-lin-27", 
        "https://www.zhihu.com/people/zdb-73", 
        "https://www.zhihu.com/people/liu-hao-10-6", 
        "https://www.zhihu.com/people/liu-xiao-xin-37-83", 
        "https://www.zhihu.com/people/justinhan", 
        "https://www.zhihu.com/people/hhkb", 
        "https://www.zhihu.com/people/yun-you-19", 
        "https://www.zhihu.com/people/husky-code", 
        "https://www.zhihu.com/people/di-yu-yong-66", 
        "https://www.zhihu.com/people/wx7d455fc37d622143", 
        "https://www.zhihu.com/people/shen-lan-qian-lan-51-80-15", 
        "https://www.zhihu.com/people/feedbeef", 
        "https://www.zhihu.com/people/da-ming-xiang-shui", 
        "https://www.zhihu.com/people/dan-dan-de-you-shang-30-50", 
        "https://www.zhihu.com/people/mm-ll", 
        "https://www.zhihu.com/people/ysgc", 
        "https://www.zhihu.com/people/heyang-36", 
        "https://www.zhihu.com/people/shootertt", 
        "https://www.zhihu.com/people/xing-long-86", 
        "https://www.zhihu.com/people/chl-97-25", 
        "https://www.zhihu.com/people/siqluxe", 
        "https://www.zhihu.com/people/wang-song-77-47", 
        "https://www.zhihu.com/people/zhan-shen-xiao-xie", 
        "https://www.zhihu.com/people/bing-feng-de-hai-dao", 
        "https://www.zhihu.com/people/wei-xi-57-27", 
        "https://www.zhihu.com/people/suxianxin", 
        "https://www.zhihu.com/people/eta-100a", 
        "https://www.zhihu.com/people/jing-harry", 
        "https://www.zhihu.com/people/cheng-ba-you-er-yuan-28", 
        "https://www.zhihu.com/people/frandy-cheng", 
        "https://www.zhihu.com/people/mel-tor", 
        "https://www.zhihu.com/people/xie-cong-wen", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/dong-feng-66-72"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/81417869", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "Ceph的最佳实践", 
            "content": "<h2><b>背景</b></h2><p>最近在做好几个对象存储。</p><h2>入门条款</h2><p><b>1，判断ceph安装是否成功</b></p><p>首先看pod的情况，有operator、mgr、agent、discover、mon、osd、tools，且osd-prepare是completed的状态，其它是running的状态：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@master:~/rook-ceph/rook/cluster/examples/kubernetes/ceph$ kubectl -n rook-ceph get pods\nNAME                                           READY   STATUS      RESTARTS   AGE\ncsi-cephfsplugin-4f2wl                         3/3     Running     0          3h47m\ncsi-cephfsplugin-5k6z8                         3/3     Running     0          3h47m\ncsi-cephfsplugin-d5rhh                         3/3     Running     0          3h47m\ncsi-cephfsplugin-provisioner-c6b8b6dff-ds56t   4/4     Running     0          3h47m\ncsi-cephfsplugin-provisioner-c6b8b6dff-zjx6x   4/4     Running     0          3h47m\ncsi-cephfsplugin-sw98v                         3/3     Running     0          3h47m\ncsi-cephfsplugin-vsgwq                         3/3     Running     0          3h47m\ncsi-rbdplugin-f8cdm                            3/3     Running     0          3h47m\ncsi-rbdplugin-g7xcf                            3/3     Running     0          3h47m\ncsi-rbdplugin-kvr4m                            3/3     Running     0          3h47m\ncsi-rbdplugin-lc2lp                            3/3     Running     0          3h47m\ncsi-rbdplugin-provisioner-68f5664455-4pjm2     5/5     Running     0          3h47m\ncsi-rbdplugin-provisioner-68f5664455-p9n9r     5/5     Running     0          3h47m\ncsi-rbdplugin-zsdk9                            3/3     Running     0          3h47m\nrook-ceph-agent-6dczj                          1/1     Running     0          3h47m\nrook-ceph-agent-rvvtr                          1/1     Running     0          3h47m\nrook-ceph-agent-t79hz                          1/1     Running     0          3h47m\nrook-ceph-agent-w65x2                          1/1     Running     0          3h47m\nrook-ceph-agent-wbxv4                          1/1     Running     0          3h47m\nrook-ceph-mgr-a-77b8674677-zph5s               1/1     Running     0          3h44m\nrook-ceph-mon-a-578bcdc486-4nfxn               1/1     Running     0          3h45m\nrook-ceph-mon-b-7c5fdd6794-29frc               1/1     Running     0          3h45m\nrook-ceph-mon-c-7d79cf845c-tbdbf               1/1     Running     0          3h45m\nrook-ceph-operator-6dbdbc6b94-dsd6z            1/1     Running     0          3h48m\nrook-ceph-osd-0-7dd859cc77-42gj9               1/1     Running     0          3h43m\nrook-ceph-osd-1-7b48479788-8vq4m               1/1     Running     0          3h43m\nrook-ceph-osd-2-d95cb9479-fpbhd                1/1     Running     0          3h42m\nrook-ceph-osd-3-779699c4fd-82zrl               1/1     Running     0          3h43m\nrook-ceph-osd-4-5c87768ddf-wcsw4               1/1     Running     0          3h43m\nrook-ceph-osd-5-689d78db84-t28qk               1/1     Running     0          3h42m\nrook-ceph-osd-prepare-ai02-r4lg9               0/1     Completed   0          3h44m\nrook-ceph-osd-prepare-ai03-vx6nj               0/1     Completed   0          3h44m\nrook-ceph-osd-prepare-ai04-h69zf               0/1     Completed   0          3h44m\nrook-ceph-tools-7cf4cc7568-6lcgv               1/1     Running     0          6m23s\nrook-discover-flxm2                            1/1     Running     0          3h48m\nrook-discover-h7j2f                            1/1     Running     0          3h48m\nrook-discover-nwsm5                            1/1     Running     0          3h48m\nrook-discover-t6fl7                            1/1     Running     0          3h48m\nrook-discover-t6xgz                            1/1     Running     0          3h48m</code></pre></div><p>其次看ceph status的状态需要是HEALTH：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@master:~/rook-ceph/rook/cluster/examples/kubernetes/ceph$ kubectl -n rook-ceph exec -it rook-ceph-tools-7cf4cc7568-6lcgv bash\n[root@AI03 /]# ceph status\n  cluster:\n    id:     0cf36812-094c-4920-84aa-0c0099b01fe0\n    health: HEALTH_WARN\n            mon b is low on available space\n \n  services:\n    mon: 3 daemons, quorum a,b,c (age 3h)\n    mgr: a(active, since 3h)\n    osd: 6 osds: 6 up (since 3h), 6 in (since 3h)\n \n  data:\n    pools:   0 pools, 0 pgs\n    objects: 0 objects, 0 B\n    usage:   6.0 GiB used, 21 TiB / 21 TiB avail\n    pgs:</code></pre></div><p>然后创建<b><a href=\"https://link.zhihu.com/?target=https%3A//rook.io/docs/rook/master/ceph-block.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Block</a>、<a href=\"https://link.zhihu.com/?target=https%3A//rook.io/docs/rook/master/ceph-object.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Object</a>、<a href=\"https://link.zhihu.com/?target=https%3A//rook.io/docs/rook/master/ceph-filesystem.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Shared File System</a>；</b>最后创建Dashboard。</p><p><b>2，如何重启Dashboard？</b></p><p>Dashboard上enable一些功能后，通常需要重启Dashboard服务才能使用。使用下面的命令来重启Dashboard：</p><div class=\"highlight\"><pre><code class=\"language-text\">#在toolbox容器里执行\n[root@AI03 /]# ceph mgr module disable dashboard\n[root@AI03 /]# ceph mgr module enable dashboard</code></pre></div><h2><b>基础条款</b></h2><p><b>1，需要osd、mon、mds、rbd、rgw、CephFS服务</b></p><p>其中后三者分别提供block、object/gw、fs/shared fs服务。</p><p><b>2，K8s化部署使用Rook</b></p><p>其它情况可以使用官方的ceph-deploy或者docker方式。</p><p><b>3，一个磁盘一个osd</b></p><p><b>4，Ceph的Dashboard用着还不错</b></p><p>但dashboard上看性能数据需要安装prometheus和Grafana，并启用；</p><p><b>5，部署完成后应该立刻做性能测试</b></p><p>基础健康状态确认好，再应用上层业务。我用的机械硬盘，30个OSD测试的写入速度大概是70MB/s。</p><p><b>6，注意检查有些Ceph host或者osd是不是down了</b></p><p>有时候是因为宿主机上的磁盘设备号变了。</p><p><b>7，Ceph的Pool（多租户）</b></p><p>以pool为颗粒度，如果不创建/指定，则数据会存放在默认的pool里。创建pool需要设置pg的数量，一般来说每个OSD为100个PG，也可以按照如下规则配置：</p><div class=\"highlight\"><pre><code class=\"language-console\">若少于5个OSD， 设置pg_num为128。\n5~10个OSD，设置pg_num为512。\n10~50个OSD，设置pg_num为4096。\n超过50个OSD，可以参考pgcalc计算。</code></pre></div><p>Pool上还需要设置<b>CRUSH Rules</b>策略，这是data如何分布式存储的策略。</p><p>此外，针对pool，还可以调整POOL副本数量、删除POOL、设置POOL配额、重命名POOL、查看POOL状态信息。</p><p><b>8，Ceph的backup &amp; Restore</b></p><p>Pool上有创建快照的功能。</p><p><b>9，怎么提高ceph的写入速度？</b></p><p>接入的服务越来越多，每秒钟需要写入的数据将从几十MB慢慢到1GB、10GB...集群如何扩展？</p><p><b>10，Ceph的Pool有2种方式</b></p><p>replicated和erasure两种，默认是replicated。replicated就是多重备份（官方建议是3），好处是数据更安全，功能更全面，坏处是消耗磁盘空间大，成本高；而erasure相当于RAID5，好处是节省空间，坏处是支持的操作有限。</p><p><b>11，replicated的数量</b></p><p>官方建议是3，但我觉得2也可以。并且replica=2节省空间、速度更快。</p><p>如果有25 OSDs ，每个对应一个4TB的磁盘。那么可用的pool的存储量为：</p><p>Raw size: 25*4  = 100TB<br/>replica=2  : 100/2  = 50TB<br/>replica=3  : 100/3  = 33.33TB</p><p><b>12，Ceph可以提供NFS支持</b></p><p>依赖NFS-Ganesha，并且要在Ceph中启用。</p><h2><b>总结</b></h2><p>不定期补充。</p>", 
            "topic": [
                {
                    "tag": "Ceph", 
                    "tagLink": "https://api.zhihu.com/topics/20024764"
                }, 
                {
                    "tag": "分布式存储", 
                    "tagLink": "https://api.zhihu.com/topics/19558640"
                }, 
                {
                    "tag": "云存储", 
                    "tagLink": "https://api.zhihu.com/topics/19552913"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/78174706", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 2, 
            "title": "从Blendshapes到Animoji", 
            "content": "<h2><b>背景</b></h2><p>从某种角度h审视的话，一个做着表情的人脸可以拆分为两部分：identity和expression。identity是某个人脸本质的东西，是区分一个人脸和另一个人脸的本质，是一个人脸在7x24小时的尺度内不会发生变化的东西；对应的，expression就是表情分量了，一张人脸有各种各样的表情，无时无刻都在变化着。这样一来，一个时刻下的人脸就可以看做是本质的identity叠加上此时此刻的expression。这样拆分出来的一个巨大好处就是，可以将一个人脸的expression分量提取出来，叠加到另一张人脸的identity上，让另一个人脸拥有相同的表情。甚至可以将expression分量叠加到另一张动物脸/卡通脸上——这就是Animoji。</p><h2><b>Blendshapes</b></h2><p>但是表情这个东西看起来是一个无限多可能的东西，怎么能够计算expression呢？这就带来了Blendshapes——一组组成整体表情的基准（数量可以有十几个、50个、100+、  200+，越多就越细腻)。我们可以使用这一组基准通过线性组合来计算出整体的expression，用公式来说就是 <img src=\"https://www.zhihu.com/equation?tex=e+%3D+Bd+%2B+b\" alt=\"e = Bd + b\" eeimg=\"1\"/> ，其中e是expression，B是一组表情基准，d是对应的系数（在这一组里面的权重），b是neutral。</p><p>每个人有不同的identity，同样的就有不同的表情基准。根据上面的公式中，在刚开始的鸿蒙时代，一个人脸的B是不知道的，d也是不知道的，b也是不知道的......那我们要干什么？假设，我们先从美好的设想开始，假若我们知道每个人脸自己的B和b，那么把一个人脸的d应用到另一个人脸的B和b上，那么是不是另一个人脸就会露出同样的表情呢？</p><p>总之，上面一段的问题都是可以通过各种算法计算得到的，非常复杂。Blendshapes (Maya里面称之为 blend shapes ，而3DS Max里称之为morph targets) 在3D动画中被广泛使用。</p><h2><b>IPhone X上使用的Animoji</b></h2><p>iphone x上使用的animoji需要52 blendshapes（ARKit 2规范），从苹果ARKit Face模块追踪得到的animation data将会驱动你的模型上的52 blendshapes ，从而线性组合出不同的表情。这52个Blendshapes如下所示：</p><div class=\"highlight\"><pre><code class=\"language-text\">eyeBlinkLeft\neyeLookDownLeft\neyeLookInLeft\neyeLookOutLeft\neyeLookUpLeft\neyeSquintLeft\neyeWideLeft\neyeBlinkRight\neyeLookDownRight\neyeLookInRight\neyeLookOutRight\neyeLookUpRight\neyeSquintRight\neyeWideRight\njawForward\njawLeft\njawRight\njawOpen\nmouthClose\nmouthFunnel\nmouthPucker\nmouthRight\nmouthLeft\nmouthSmileLeft\nmouthSmileRight\nmouthFrownRight\nmouthFrownLeft\nmouthDimpleLeft\nmouthDimpleRight\nmouthStretchLeft\nmouthStretchRight\nmouthRollLower\nmouthRollUpper\nmouthShrugLower\nmouthShrugUpper\nmouthPressLeft\nmouthPressRight\nmouthLowerDownLeft\nmouthLowerDownRight\nmouthUpperUpLeft\nmouthUpperUpRight\nbrowDownLeft\nbrowDownRight\nbrowInnerUp\nbrowOuterUpLeft\nbrowOuterUpRight\ncheekPuff\ncheekSquintLeft\ncheekSquintRight\nnoseSneerLeft\nnoseSneerRight\ntongueOut\ngemfield</code></pre></div><p>三维动画建模师的责任就在于此，他根据你的长相为你的脸建了个模型（scanned head, a photorealistic 3D head模型，甚至是一个卡通人物），并且更重要的是，他帮你的人脸构建了这52个表情基准和一个neutral中性基准——如果参数设计的不好，那可能你的微笑看起来就像是牙疼：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f753b8e1aeab7928802cbf6f2162eda0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"915\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb\" width=\"915\" data-original=\"https://pic1.zhimg.com/v2-f753b8e1aeab7928802cbf6f2162eda0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;915&#39; height=&#39;582&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"915\" data-rawheight=\"582\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"915\" data-original=\"https://pic1.zhimg.com/v2-f753b8e1aeab7928802cbf6f2162eda0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f753b8e1aeab7928802cbf6f2162eda0_b.jpg\"/></figure><p>这些设计好的参数就会封装在业界主流的文件格式中，一般有FBX格式的, Unity的， Maya的。其中FBX是通用的格式，gemfield会使用blender软件打开FBX格式的文件。</p><h2><b>总结</b></h2><p>有了这些后，现在产业界流行使用AI技术（CNN网络）来对一个输入的人脸推理出expression的系数，也就是一组表情基准（比如上面就是52个）中每个基准的每个权重系数。一般也会同时给出头的3D倾角数值，用于在驱动表情的同时还会模拟头部的转动。有时间了gemfield会在gemfield专栏中介绍一个这样的项目：</p><a href=\"https://zhuanlan.zhihu.com/gemfield\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-6a3002a56c12cb481fb3bebce2f83a92_ipico.jpg\" data-image-width=\"640\" data-image-height=\"640\" class=\"internal\">Gemfield</a><p></p>", 
            "topic": [
                {
                    "tag": "Animoji", 
                    "tagLink": "https://api.zhihu.com/topics/20104620"
                }, 
                {
                    "tag": "3D", 
                    "tagLink": "https://api.zhihu.com/topics/19554407"
                }, 
                {
                    "tag": "AI技术", 
                    "tagLink": "https://api.zhihu.com/topics/20106982"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72953129", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 9, 
            "title": "为什么向量化计算(vectorization)会这么快？", 
            "content": "<h2><b>背景</b></h2><p>在一次iOS程序的性能测试过程中，我们发现一个自己写的argmax函数的耗时严重超出预期——这个预期是基于平常神经网络中的argmax op的速度得到的直接感官体验。不过这也不算意外，第一个版本我们只是用了for循环去实现argmax，在那时，我们已经有所预感这会是个性能瓶颈。最终，我们将for循环实现替换成了iOS库中提供的vDSP_maxvi(value, 1, &amp;maxValue, &amp;maxIndex), (vDSP_Length)channel)，性能得到了解放。</p><p>就像这样，时不时的，在使用numpy库或者各种Tensor张量库进行计算的时候，我们都会感叹这些库计算的速度之快，以至于远远超越自己写的for循环。然后，我们就会逐渐并且越来越多的听说到一个词——vectorization（向量化计算）——其带来了巨大的计算性能。</p><h2><b>什么是vectorization？</b></h2><p>向量化计算(vectorization)，也叫vectorized operation，也叫array programming，说的是一个事情：将多次for循环计算变成一次计算。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-9a7ba8aa82ec8d28b6a8f9661186230d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb\" width=\"1151\" data-original=\"https://pic2.zhimg.com/v2-9a7ba8aa82ec8d28b6a8f9661186230d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1151&#39; height=&#39;541&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"541\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1151\" data-original=\"https://pic2.zhimg.com/v2-9a7ba8aa82ec8d28b6a8f9661186230d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-9a7ba8aa82ec8d28b6a8f9661186230d_b.jpg\"/></figure><p>上图中，左侧为vectorization，右侧为寻常的For loop计算。将多次for循环计算变成一次计算完全仰仗于CPU的SIMD指令集，SIMD指令可以在一条cpu指令上处理2、4、8或者更多份的数据。在Intel处理器上，这个称之为SSE以及后来的AVX，在Arm处理上，这个称之为NEON。</p><p>因此简单来说，向量化计算就是将一个loop——处理一个array的时候每次处理1个数据共处理N次，转化为vectorization——处理一个array的时候每次同时处理8个数据共处理N/8次。</p><h2><b>vectorization如何让速度更快？</b></h2><p>我们以x86指令集为例，1997年，x86扩展出了MMX指令集，伴随着80-bit的vector寄存器，首开向量化计算的先河。 之后，x86又扩展出了SSE指令集 (有好几个版本, 从SSE1到SEE4.2)，伴随着128-bit寄存器。而在2011年，Intel发布了Sandy Bridge架构——扩展出了AVX指令集(256-bit寄存器)。在2016年，第一个带有AVX-512寄存器的CPU发布了(512-bit寄存器，可以同时处理16个32-bit的float数)。SSE和AVX各有16个寄存器。SSE的16个寄存器为XMM0-XMM15，AVX的16个寄存器为YMM0-YMM15。XMM registers每个为128 bits，而YMM寄存器每个为256bit（AVX512为512bit）。</p><p>SSE有3个数据类型：__m128 , __m128d 和 __m128i，分别代表Float、double (d) 和integer (i)。AVX也有3个数据类型： __m256 , __m256d 和 __m256i，分别代表Float、double (d) 和 integer (i)。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-94f7b921e07e7240fdf19601a9cda45a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"826\" data-original=\"https://pic3.zhimg.com/v2-94f7b921e07e7240fdf19601a9cda45a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;826&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"826\" data-original=\"https://pic3.zhimg.com/v2-94f7b921e07e7240fdf19601a9cda45a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-94f7b921e07e7240fdf19601a9cda45a_b.jpg\"/></figure><p>Gemfield使用下面一小段C++程序来展示一下AVX带来的计算速度：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;immintrin.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;chrono&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ctime&gt; </span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">8</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">loop_num</span> <span class=\"o\">=</span> <span class=\"mi\">100000000</span><span class=\"p\">;</span>\n<span class=\"kt\">float</span> <span class=\"n\">gemfield_i</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mf\">1.1</span><span class=\"p\">,</span><span class=\"mf\">2.2</span><span class=\"p\">,</span><span class=\"mf\">3.3</span><span class=\"p\">,</span><span class=\"mf\">4.4</span><span class=\"p\">,</span><span class=\"mf\">5.5</span><span class=\"p\">,</span><span class=\"mf\">6.6</span><span class=\"p\">,</span><span class=\"mf\">7.7</span><span class=\"p\">,</span><span class=\"mf\">8.8</span><span class=\"p\">};</span>\n<span class=\"kt\">float</span> <span class=\"n\">gemfield_m</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mf\">2.2</span><span class=\"p\">,</span><span class=\"mf\">3.3</span><span class=\"p\">,</span><span class=\"mf\">4.4</span><span class=\"p\">,</span><span class=\"mf\">5.5</span><span class=\"p\">,</span><span class=\"mf\">6.6</span><span class=\"p\">,</span><span class=\"mf\">7.7</span><span class=\"p\">,</span><span class=\"mf\">8.8</span><span class=\"p\">,</span><span class=\"mf\">9.9</span><span class=\"p\">};</span>\n<span class=\"kt\">float</span> <span class=\"n\">gemfield_a</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mf\">11.1</span><span class=\"p\">,</span><span class=\"mf\">12.2</span><span class=\"p\">,</span><span class=\"mf\">13.3</span><span class=\"p\">,</span><span class=\"mf\">14.4</span><span class=\"p\">,</span><span class=\"mf\">15.5</span><span class=\"p\">,</span><span class=\"mf\">16.6</span><span class=\"p\">,</span><span class=\"mf\">17.7</span><span class=\"p\">,</span><span class=\"mf\">18.8</span><span class=\"p\">};</span>\n<span class=\"kt\">float</span> <span class=\"n\">gemfield_o</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">};</span>\n\n<span class=\"n\">__m256</span> <span class=\"n\">gemfield_v_i</span> <span class=\"o\">=</span> <span class=\"n\">_mm256_set_ps</span><span class=\"p\">(</span><span class=\"mf\">8.8</span><span class=\"p\">,</span><span class=\"mf\">7.7</span><span class=\"p\">,</span><span class=\"mf\">6.6</span><span class=\"p\">,</span><span class=\"mf\">5.5</span><span class=\"p\">,</span><span class=\"mf\">4.4</span><span class=\"p\">,</span><span class=\"mf\">3.3</span><span class=\"p\">,</span><span class=\"mf\">2.2</span><span class=\"p\">,</span><span class=\"mf\">1.1</span><span class=\"p\">);</span>\n<span class=\"n\">__m256</span> <span class=\"n\">gemfield_v_m</span> <span class=\"o\">=</span> <span class=\"n\">_mm256_set_ps</span><span class=\"p\">(</span><span class=\"mf\">9.9</span><span class=\"p\">,</span><span class=\"mf\">8.8</span><span class=\"p\">,</span><span class=\"mf\">7.7</span><span class=\"p\">,</span><span class=\"mf\">6.6</span><span class=\"p\">,</span><span class=\"mf\">5.5</span><span class=\"p\">,</span><span class=\"mf\">4.4</span><span class=\"p\">,</span><span class=\"mf\">3.3</span><span class=\"p\">,</span><span class=\"mf\">2.2</span><span class=\"p\">);</span>\n<span class=\"n\">__m256</span> <span class=\"n\">gemfield_v_a</span> <span class=\"o\">=</span> <span class=\"n\">_mm256_set_ps</span><span class=\"p\">(</span><span class=\"mf\">18.8</span><span class=\"p\">,</span><span class=\"mf\">17.7</span><span class=\"p\">,</span><span class=\"mf\">16.6</span><span class=\"p\">,</span><span class=\"mf\">15.5</span><span class=\"p\">,</span><span class=\"mf\">14.4</span><span class=\"p\">,</span><span class=\"mf\">13.3</span><span class=\"p\">,</span><span class=\"mf\">12.2</span><span class=\"p\">,</span><span class=\"mf\">11.1</span><span class=\"p\">);</span>\n<span class=\"n\">__m256</span> <span class=\"n\">gemfield_v_o</span> <span class=\"o\">=</span> <span class=\"n\">_mm256_set_ps</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n\n<span class=\"kt\">void</span> <span class=\"nf\">syszuxMulAndAddV</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">loop_num</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">gemfield_v_o</span> <span class=\"o\">+=</span> <span class=\"n\">_mm256_fmadd_ps</span><span class=\"p\">(</span><span class=\"n\">gemfield_v_i</span><span class=\"p\">,</span> <span class=\"n\">gemfield_v_m</span><span class=\"p\">,</span> <span class=\"n\">gemfield_v_a</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">elapsed_seconds</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"o\">-</span><span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;resultV: &#34;</span><span class=\"p\">;</span>\n    <span class=\"c1\">// float* f = (float*)&amp;gemfield_v_o;\n</span><span class=\"c1\"></span>    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">gemfield_v_o</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&#34; &#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">elapsed time: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">elapsed_seconds</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">syszuxMulAndAdd</span><span class=\"p\">(){</span>\n    <span class=\"k\">auto</span> <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">&lt;</span><span class=\"n\">loop_num</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n            <span class=\"n\">gemfield_o</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">gemfield_i</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">gemfield_m</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">gemfield_a</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">auto</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">elapsed_seconds</span> <span class=\"o\">=</span> <span class=\"n\">end</span><span class=\"o\">-</span><span class=\"n\">start</span><span class=\"p\">;</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;result: &#34;</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">gemfield_o</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&#34; &#34;</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;</span><span class=\"se\">\\n</span><span class=\"s\">elapsed time: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">elapsed_seconds</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;s</span><span class=\"se\">\\n</span><span class=\"s\">&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">syszuxMulAndAdd</span><span class=\"p\">();</span>\n    <span class=\"n\">syszuxMulAndAddV</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>编译并运行：</p><div class=\"highlight\"><pre><code class=\"language-console\">#compile civilnet.cpp\ngemfield@ThinkPad-X1C:~$ g++ -march=skylake-avx512 civilnet.cpp -o civilnet\n\n#run civilnet\ngemfield@ThinkPad-X1C:~$ ./civilnet\nresult: 2.68435e+08 5.36871e+08 5.36871e+08 1.07374e+09 1.07374e+09 2.14748e+09 2.14748e+09 2.14748e+09 \nelapsed time: 2.39723s\nresultV: 2.68435e+08 5.36871e+08 5.36871e+08 1.07374e+09 1.07374e+09 2.14748e+09 2.14748e+09 2.14748e+09 \nelapsed time: 0.325577s</code></pre></div><p>for loop计算消耗了2.39723秒，而vectorization计算消耗了0.325577s，可以看到AVX的计算速度远超for loop，因为AVX使用了下面这样的并行方式：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-fca2ea122705d18d794508123178b3e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"217\" class=\"origin_image zh-lightbox-thumb\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-fca2ea122705d18d794508123178b3e1_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;764&#39; height=&#39;217&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"217\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-fca2ea122705d18d794508123178b3e1_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-fca2ea122705d18d794508123178b3e1_b.jpg\"/></figure><h2><b>除了vectorization，还有什么可以让CPU计算速度更快？</b></h2><p>如今的CPU并不是大多数程序员所想象的那个黑盒子——按照PC寄存器指向的地址load指令一条一条的执行，这样的CPU在486之后就灭绝了。现代CPU（Intel Core2后，AMDBulldozer后）的管线宽度为4个uops，一个时钟周期内最多可以执行4条指令（如果同时有loads、stores和single-uop的ALU指令）。因此，vectorization并不是CPU唯一一种并行计算的方式 。在指令与指令层面同样有并行机制，可以让一个单独的CPU core在同一时间内执行多条CPU指令。当排队中的多条CPU指令包含了loads、stores、ALU，多数现代的CPU可以在一个时钟周期内同时执行4条指令。平均下来，CPU在每个时钟周期内同时执行2条指令甚至更好——这仰仗于程序如何更好的优化。</p><p>接下来，应用层的程序员还会熟悉这一点：多线程——在多个处理器核上同时运行多个指令序列。比如，在gemfield的机器上，cpu型号为“Core(TM) i9-9820X CPU”，cpu核为10个，使用超线程技术将CPU核扩展为20个逻辑核/线程数：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@AI3:~$ cat /proc/cpuinfo | grep -i &#34;processor&#34;\nprocessor       : 0\nprocessor       : 1\nprocessor       : 2\nprocessor       : 3\nprocessor       : 4\nprocessor       : 5\nprocessor       : 6\nprocessor       : 7\nprocessor       : 8\nprocessor       : 9\nprocessor       : 10\nprocessor       : 11\nprocessor       : 12\nprocessor       : 13\nprocessor       : 14\nprocessor       : 15\nprocessor       : 16\nprocessor       : 17\nprocessor       : 18\nprocessor       : 19\n\ngemfield@AI3:~$ cat /proc/cpuinfo | grep -i &#34;processor&#34; | wc -l\n20</code></pre></div><p>在这台机器上，我们可以同时运行20个线程（因为20个核是由HT扩展出来的，真正能同时运行的线程数量位于10个到20个之间）。只不过20个超线程对计算密集型的加速并非20倍（也即并非超线程数），而是10倍（也即cpu核数）：</p><p>“由于超线程只是为每个核心提供两组线程上下文单元，两个线程其实是共享各种核内运算部件的。超线程的好处是线程之间往往没有各种数据依赖关系，两个线程的指令流可以尽量填充流水线并充分利用乱序多发射能力。互相掩盖对方的各种延迟，提高每个核心的利用效率。这里的向量计算已经完整地利用了浮点乘加的吞吐能力，所以超线程并不带来好处”，出自<a href=\"https://zhuanlan.zhihu.com/p/28226956\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/28</span><span class=\"invisible\">226956</span><span class=\"ellipsis\"></span></a>。</p><p>因此，一个像Gemfield机器上这样的强大CPU，它拥有20个逻辑核、10个CPU核，每个核的每个时钟周期平均执行2个vector计算，每个vector计算可以同时操作8个float数。因此，至少在理论上，gemfield的机器可以在一个时钟周期内执行10 * 2 * 8  = 160个操作（当前，不同的指令有不同的吞吐量）。</p><h2><b>总结</b></h2><p>因此，我们一共在3个层面上通过并行化来提高CPU的计算速度：</p><p>1，vectorization，也就是SIMD指令集；</p><p>2，cpu pipeline width及乱序执行；</p><p>3，多核处理器及多线程；</p><p>CPU通过上述不同层面的并行化来孜孜不倦的提高计算速度，而这种使用并行化来提高计算速度的理念，正是<b>GPU</b>与生俱来的天赋。</p>", 
            "topic": [
                {
                    "tag": "向量化", 
                    "tagLink": "https://api.zhihu.com/topics/20073181"
                }, 
                {
                    "tag": "numpy", 
                    "tagLink": "https://api.zhihu.com/topics/19834165"
                }, 
                {
                    "tag": "并行处理", 
                    "tagLink": "https://api.zhihu.com/topics/19619795"
                }
            ], 
            "comments": [
                {
                    "userName": "ganler", 
                    "userLink": "https://www.zhihu.com/people/08f890d9582e2fed50cd3d244dcc01f4", 
                    "content": "其实对于一些较容易被向量化的程序 直接调编译指令即可让其向量化（-ftree-vectorize -march=native） 显示向量化需要考虑跨平台性质", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "高洋", 
                    "userLink": "https://www.zhihu.com/people/30086f0c7a98672fd94e42a68764e901", 
                    "content": "你对逻辑核心（超线程）的理解有误，可以参考我的文章：<a href=\"https://zhuanlan.zhihu.com/p/28226956\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/28</span><span class=\"invisible\">226956</span><span class=\"ellipsis\"></span></a>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>谢谢指正。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "高洋"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32494452", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "在MNIST数据集上使用SVM", 
            "content": "<h2><b>1, 下载数据</b></h2><p>到Mnist官方网站上（<a href=\"https://link.zhihu.com/?target=http%3A//yann.lecun.com/exdb/mnist/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MNIST handwritten digit database, Yann LeCun, Corinna Cortes and Chris Burges</a>）下载训练集和测试集，一共4个gz压缩包；解压如下所示：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/learning/gemfield_data$ ls -l\n总用量 <span class=\"m\">53672</span>\n-rw-rw-r-- <span class=\"m\">1</span> gemfield gemfield  <span class=\"m\">7840016</span> 12月 <span class=\"m\">30</span> <span class=\"m\">14</span>:17 t10k-images-idx3-ubyte\n-rw-rw-r-- <span class=\"m\">1</span> gemfield gemfield    <span class=\"m\">10008</span> 12月 <span class=\"m\">30</span> <span class=\"m\">14</span>:16 t10k-labels-idx1-ubyte\n-rw-rw-r-- <span class=\"m\">1</span> gemfield gemfield <span class=\"m\">47040016</span> 12月 <span class=\"m\">30</span> <span class=\"m\">14</span>:43 train-images-idx3-ubyte\n-rw-rw-r-- <span class=\"m\">1</span> gemfield gemfield    <span class=\"m\">60008</span> 12月 <span class=\"m\">30</span> <span class=\"m\">14</span>:42 train-labels-idx1-ubyte</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2, 将Mnist的idx格式转化为python numpy的ndarray格式</b></h2><p>参考：<a href=\"https://zhuanlan.zhihu.com/p/32488678\" class=\"internal\">MNIST数据集的Python解析</a></p><p>Gemfield将其封装为了一个函数，代码如下所示：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">timeit</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"k\">import</span> <span class=\"n\">svm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n\n<span class=\"n\">TRAIN_ITEMS</span> <span class=\"o\">=</span> <span class=\"mi\">60000</span>\n<span class=\"n\">TEST_ITEMS</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loadMnistData</span><span class=\"p\">():</span>\n    <span class=\"n\">mnist_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">img_file</span><span class=\"p\">,</span><span class=\"n\">label_file</span><span class=\"p\">,</span><span class=\"n\">items</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">([</span><span class=\"s1\">&#39;gemfield_data/train-images-idx3-ubyte&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;gemfield_data/t10k-images-idx3-ubyte&#39;</span><span class=\"p\">],</span>\n                                   <span class=\"p\">[</span><span class=\"s1\">&#39;gemfield_data/train-labels-idx1-ubyte&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;gemfield_data/t10k-labels-idx1-ubyte&#39;</span><span class=\"p\">],</span>\n                                   <span class=\"p\">[</span><span class=\"n\">TRAIN_ITEMS</span><span class=\"p\">,</span> <span class=\"n\">TEST_ITEMS</span><span class=\"p\">]):</span>\n        <span class=\"n\">data_img</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">img_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">data_label</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">label_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"c1\">#fmt of struct unpack, &gt; means big endian, i means integer, well, iiii mean 4 integers</span>\n        <span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt;iiii&#39;</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">magic_number</span><span class=\"p\">,</span> <span class=\"n\">img_number</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack_from</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">data_img</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;magic number is </span><span class=\"si\">{}</span><span class=\"s1\">, image number is </span><span class=\"si\">{}</span><span class=\"s1\">, height is </span><span class=\"si\">{}</span><span class=\"s1\"> and width is </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">magic_number</span><span class=\"p\">,</span> <span class=\"n\">img_number</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">))</span>\n        <span class=\"c1\">#slide over the 2 numbers above</span>\n        <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">calcsize</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n        <span class=\"c1\">#28x28</span>\n        <span class=\"n\">image_size</span> <span class=\"o\">=</span> <span class=\"n\">height</span> <span class=\"o\">*</span> <span class=\"n\">width</span>\n        <span class=\"c1\">#B means unsigned char</span>\n        <span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt;</span><span class=\"si\">{}</span><span class=\"s1\">B&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">image_size</span><span class=\"p\">)</span>\n        <span class=\"c1\">#because gemfield has insufficient memory resource</span>\n        <span class=\"k\">if</span> <span class=\"n\">items</span> <span class=\"o\">&gt;</span> <span class=\"n\">img_number</span><span class=\"p\">:</span>\n            <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">img_number</span>\n        <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">((</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">image_size</span><span class=\"p\">))</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n            <span class=\"n\">images</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack_from</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">data_img</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">))</span>\n            <span class=\"c1\">#0~255 to 0~1</span>\n            <span class=\"n\">images</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">images</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">/</span><span class=\"mi\">256</span>\n            <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">calcsize</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">#fmt of struct unpack, &gt; means big endian, i means integer, well, ii mean 2 integers</span>\n        <span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt;ii&#39;</span>\n        <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">magic_number</span><span class=\"p\">,</span> <span class=\"n\">label_number</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack_from</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">data_label</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;magic number is </span><span class=\"si\">{}</span><span class=\"s1\"> and label number is </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">magic_number</span><span class=\"p\">,</span> <span class=\"n\">label_number</span><span class=\"p\">))</span>\n        <span class=\"c1\">#slide over the 2 numbers above</span>\n        <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">calcsize</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n        <span class=\"c1\">#B means unsigned char</span>\n        <span class=\"n\">fmt</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&gt;B&#39;</span>\n        <span class=\"c1\">#because gemfield has insufficient memory resource</span>\n        <span class=\"k\">if</span> <span class=\"n\">items</span> <span class=\"o\">&gt;</span> <span class=\"n\">label_number</span><span class=\"p\">:</span>\n            <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">label_number</span>\n        <span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n            <span class=\"n\">labels</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack_from</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">,</span> <span class=\"n\">data_label</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">offset</span> <span class=\"o\">+=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">calcsize</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"p\">)</span>\n        \n        <span class=\"n\">mnist_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">mnist_data</span></code></pre></div><h2><b>3，使用sklearn模块中的svm</b></h2><p>代码如下所示：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"k\">def</span> <span class=\"nf\">forwardWithSVM</span><span class=\"p\">():</span>\n    <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">timeit</span><span class=\"o\">.</span><span class=\"n\">default_timer</span><span class=\"p\">()</span>\n    <span class=\"n\">training_data</span><span class=\"p\">,</span> <span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"n\">loadMnistData</span><span class=\"p\">()</span>\n    <span class=\"c1\"># train</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">svm</span><span class=\"o\">.</span><span class=\"n\">SVC</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">training_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">training_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">train_time</span> <span class=\"o\">=</span> <span class=\"n\">timeit</span><span class=\"o\">.</span><span class=\"n\">default_timer</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;gemfield train cost </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">train_time</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">)</span>\n    <span class=\"c1\"># test</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Begin the test...&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">test_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])]</span>\n    <span class=\"n\">num_correct</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">predictions</span><span class=\"p\">,</span> <span class=\"n\">test_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&#34;</span><span class=\"si\">%s</span><span class=\"s2\"> of </span><span class=\"si\">%s</span><span class=\"s2\"> values correct.&#34;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">num_correct</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])))</span>\n    <span class=\"n\">test_time</span> <span class=\"o\">=</span> <span class=\"n\">timeit</span><span class=\"o\">.</span><span class=\"n\">default_timer</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;gemfield test cost </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">test_time</span> <span class=\"o\">-</span> <span class=\"n\">train_time</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">)</span></code></pre></div><h2><b>4，运行及测试</b></h2><p>整个代码文件参考：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/CivilNet/Gemfield/blob/master/src/python/svm/svm.py\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/CivilNet/Gem</span><span class=\"invisible\">field/blob/master/src/python/svm/svm.py</span><span class=\"ellipsis\"></span></a></p><p>将TRAIN_ITEMS的值设置为10的时候，测试效果如下所示(可以看到正确性和瞎猜差不多)：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/learning$ python3 svm.py \nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">60000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">60000</span>\nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">10000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">10000</span>\ngemfield start the training...\ngemfield train cost <span class=\"m\">0</span>.5457151120062917\nBegin the test...\n<span class=\"m\">1135</span> of <span class=\"m\">10000</span> values correct.\ngemfield <span class=\"nb\">test</span> cost <span class=\"m\">0</span>.1183781250147149</code></pre></div><p>将TRAIN_ITEMS的值设置为100的时候，测试效果如下所示（哇，正确性翻了一番啊）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/learning$ python3 svm.py \nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">60000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">60000</span>\nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">10000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">10000</span>\ngemfield start the training...\ngemfield train cost <span class=\"m\">0</span>.5702047150116414\nBegin the test...\n<span class=\"m\">2563</span> of <span class=\"m\">10000</span> values correct.\ngemfield <span class=\"nb\">test</span> cost <span class=\"m\">1</span>.0582328418968245</code></pre></div><p>将TRAIN_ITEMS的值设置为1000的时候，测试效果如下所示（及格了唉）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/learning$ python3 svm.py \nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">60000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">60000</span>\nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">10000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">10000</span>\ngemfield start the training...\ngemfield train cost <span class=\"m\">1</span>.7026840379694477\nBegin the test...\n<span class=\"m\">8267</span> of <span class=\"m\">10000</span> values correct.\ngemfield <span class=\"nb\">test</span> cost <span class=\"m\">9</span>.486829451052472</code></pre></div><p>将TRAIN_ITEMS的值设置为10000的时候，测试效果如下所示（设为60000的话，在gemfield的PC上需要运行太多的时间）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/learning$ python3 svm.py \nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">60000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">60000</span>\nmagic number is <span class=\"m\">2051</span>, image number is <span class=\"m\">10000</span>, height is <span class=\"m\">28</span> and width is <span class=\"m\">28</span>\nmagic number is <span class=\"m\">2049</span> and label number is <span class=\"m\">10000</span>\ngemfield start the training...\ngemfield train cost <span class=\"m\">46</span>.46685998595785\nBegin the test...\n<span class=\"m\">9214</span> of <span class=\"m\">10000</span> values correct.\ngemfield <span class=\"nb\">test</span> cost <span class=\"m\">57</span>.5887356440071</code></pre></div><h2><b>5，SVM的核心思想是什么？和神经网络的本质区别是什么？</b></h2><p>稍等啊。</p><p>最起码随着训练数据的增加，SVM做forward消耗的时间也明显增加。</p>", 
            "topic": [
                {
                    "tag": "SVM", 
                    "tagLink": "https://api.zhihu.com/topics/19583524"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29335533", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 2, 
            "title": "Docker使用技巧和问题解决方案", 
            "content": "<h2><b>1， 如何在Docker容器中运行GUI程序？</b></h2><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ docker run -it \\\n&gt; --user $(id -u) \\\n&gt; -e DISPLAY=unix$DISPLAY \\\n&gt; --workdir=$(pwd) \\\n&gt; --volume=&#34;/home/$USER:/home/$USER&#34; \\\n&gt; --volume=&#34;/etc/group:/etc/group:ro&#34; \\\n&gt; --volume=&#34;/etc/passwd:/etc/passwd:ro&#34; \\\n&gt; --volume=&#34;/etc/shadow:/etc/shadow:ro&#34; \\\n&gt; --volume=&#34;/etc/sudoers.d:/etc/sudoers.d:ro&#34; \\\n&gt; -v /tmp/.X11-unix:/tmp/.X11-unix \\\n&gt; gemfield/firefox</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2，如何保证Docker的时间和宿主机上的时间一样？</b></h2><p><code>volumes:</code><br/><code>    - &#34;/etc/timezone:/etc/timezone:ro&#34;</code><br/><code>    - &#34;/etc/localtime:/etc/localtime:ro&#34;</code></p><h2><b>3，如何在运行中的Docker容器中映射端口到宿主机？</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">#最简单的方法是直接访问Docker容器的IP，比如wget http://container_ip:8000\n#使用下面的命令来获得容器的IP\n\ngemfield@ai:~$ docker inspect b314ebbf3acc| grep IPAddress\n            &#34;SecondaryIPAddresses&#34;: null,\n            &#34;IPAddress&#34;: &#34;172.17.0.2&#34;,\n                    &#34;IPAddress&#34;: &#34;172.17.0.2&#34;,\n#容器的ID用ps命令拿到\n\ngemfield@ai:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nb314ebbf3acc        ubuntu:16.04        &#34;bash&#34;              About an hour ago   Up About an hour                        blissful_blackwell\n\n#要暴露端口5000到宿主机的7030上\ngemfield@ai:~$ iptables -t nat -A  DOCKER -p tcp --dport 7030 -j DNAT --to-destination 172.17.0.2:5000</code></pre></div><h2><b>4，使用墙内docker镜像服务进行加速</b></h2><p>你懂得，有时候这个墙抽个风，和docker hub 的https连接就会timeout，出现如下所示的错误：error pulling image configuration: Get <a href=\"https://link.zhihu.com/?target=https%3A//dseasb33srnrn.cloudfront.net/registry-v2/docker/registry/v2/blobs/sha256/......%3A\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">dseasb33srnrn.cloudfront.net</span><span class=\"invisible\">/registry-v2/docker/registry/v2/blobs/sha256/......:</span><span class=\"ellipsis\"></span></a> net/http: TLS handshake timeout。</p><p>这个时候，可以使用墙内的docker镜像服务来度过这个难关。以Gemfield使用阿里云为例，在自己的控制台页面，可以看到自己专属的镜像服务器的地址：https://&lt;your_id&gt;.mirror.aliyuncs.com。</p><p>然后你可以通过修改daemon配置文件<code>/etc/docker/daemon.json</code>来使用加速器：</p><p>1，创建docker的配置目录：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo mkdir -p /etc/docker</code></pre></div><p>2，将写入/etc/docker/daemon.json:</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo tee -a /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;\n{\n  &#34;registry-mirrors&#34;: [&#34;https://xxxxxx.mirror.aliyuncs.com&#34;]\n}\nEOF</code></pre></div><p>3，重启load docker 配置，然后重启服务：</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo systemctl daemon-reload\nsudo systemctl restart docker</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>5，解决ubuntu14.04上安装nvidia-docker2时候出现的gnutls_handshake() failed: Handshake failed 错误</b></h2><p><b>注意：这个问题是有时效性的，目前（2018年5月3日，这个问题还没有解决）。</b></p><p>在ubuntu14.04上安装nvidia-docker2的时候，按照官方的步骤：</p><div class=\"highlight\"><pre><code class=\"language-text\"># Add the package repositories\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\n  sudo apt-key add -\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\\n  sudo tee /etc/apt/sources.list.d/nvidia-docker.list\nsudo apt-get update</code></pre></div><p>在最后update的时候，会出现如下错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# apt update\n......\nErr https://nvidia.github.io  Packages                                         \n  gnutls_handshake() failed: Handshake failed\nIgn https://nvidia.github.io  Translation-en_HK                                \nIgn https://nvidia.github.io  Translation-en                                   \nErr https://nvidia.github.io  Packages                                         \n  gnutls_handshake() failed: Handshake failed\nIgn https://nvidia.github.io  Translation-en_HK                                \nIgn https://nvidia.github.io  Translation-en\nErr https://nvidia.github.io  Packages\n  gnutls_handshake() failed: Handshake failed\nIgn https://nvidia.github.io  Translation-en_HK\nIgn https://nvidia.github.io  Translation-en\nW: Failed to fetch https://nvidia.github.io/libnvidia-container/ubuntu14.04/amd64/Packages  gnutls_handshake() failed: Handshake failed\n\nW: Failed to fetch https://nvidia.github.io/nvidia-container-runtime/ubuntu14.04/amd64/Packages  gnutls_handshake() failed: Handshake failed\n\nW: Failed to fetch https://nvidia.github.io/nvidia-docker/ubuntu14.04/amd64/Packages  gnutls_handshake() failed: Handshake failed\n\nE: Some index files failed to download. They have been ignored, or old ones used instead.</code></pre></div><p>继而在安装nvidia-docker2的时候出现找不到包的错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# apt install -y nvidia-docker2\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package nvidia-docker2</code></pre></div><p><b>本质原因是，ubuntu14.04的tls library（libgnutls26？）和apt repo的server没有协商成功密钥算法。</b>对于本例中的<a href=\"https://link.zhihu.com/?target=http%3A//nvidia.github.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">nvidia.github.io</span><span class=\"invisible\"></span></a>来说，如果在ubuntu16.04或以上的发行版上执行nmap --script ssl-enum-ciphers <a href=\"https://link.zhihu.com/?target=http%3A//nvidia.github.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">nvidia.github.io</span><span class=\"invisible\"></span></a>：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ nmap --script ssl-enum-ciphers nvidia.github.io\n\nStarting Nmap 7.60 ( https://nmap.org ) at 2018-05-03 16:27 CST\nNmap scan report for nvidia.github.io (185.199.108.153)\nHost is up (0.20s latency).\nOther addresses for nvidia.github.io (not scanned): 185.199.110.153 185.199.111.153 185.199.109.153\nNot shown: 998 filtered ports\nPORT    STATE SERVICE\n80/tcp  open  http\n443/tcp open  https\n| ssl-enum-ciphers: \n|   TLSv1.2: \n|     ciphers: \n|       TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (rsa 2048) - A\n|       TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (rsa 2048) - A\n|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 (rsa 2048) - A\n|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 (rsa 2048) - A\n|       TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (rsa 2048) - A\n|       TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (rsa 2048) - A\n|     compressors: \n|       NULL\n|     cipher preference: server\n|_  least strength: A\n\nNmap done: 1 IP address (1 host up) scanned in 107.25 seconds</code></pre></div><p>而如果在ubuntu14.04上执行：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:# nmap --script ssl-enum-ciphers nvidia.github.io\n\nStarting Nmap 6.40 ( http://nmap.org ) at 2018-05-03 16:29 CST\nmass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-servers\nNmap scan report for nvidia.github.io (185.199.110.153)\nHost is up (0.18s latency).\nOther addresses for nvidia.github.io (not scanned): 185.199.108.153 185.199.109.153 185.199.111.153\nNot shown: 998 filtered ports\nPORT    STATE SERVICE\n80/tcp  open  http\n443/tcp open  https\n| ssl-enum-ciphers: \n|   SSLv3: No supported ciphers found\n|_  TLSv1.2: No supported ciphers found\n\nNmap done: 1 IP address (1 host up) scanned in 14.88 seconds</code></pre></div><p>结果就一目了然了。</p><p>要解决这个问题，可以自建本地apt repo来临时解决。</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:/etc/apt/sources.list.d# LOCALDIR=/home/gemfield/nvidia-docker-repo  \nroot@gemfield:/etc/apt/sources.list.d# mkdir -p $LOCALDIR &amp;&amp; cd $LOCALDIR\nroot@gemfield:/home/gemfield/nvidia-docker-repo# git clone -b gh-pages https://github.com/NVIDIA/libnvidia-container.git\nCloning into &#39;libnvidia-container&#39;...\nremote: Counting objects: 1227, done.\nremote: Compressing objects: 100% (278/278), done.\nremote: Total 1227 (delta 96), reused 313 (delta 80), pack-reused 865\nReceiving objects: 100% (1227/1227), 9.36 MiB | 806.00 KiB/s, done.\nResolving deltas: 100% (615/615), done.\nChecking connectivity... done.\n\nroot@gemfield:/home/gemfield/nvidia-docker-repo# git clone -b gh-pages https://github.com/NVIDIA/nvidia-container-runtime.git\nCloning into &#39;nvidia-container-runtime&#39;...\nremote: Counting objects: 947, done.\nremote: Compressing objects: 100% (89/89), done.\nremote: Total 947 (delta 16), reused 74 (delta 6), pack-reused 850\nReceiving objects: 100% (947/947), 183.42 MiB | 788.00 KiB/s, done.\nResolving deltas: 100% (372/372), done.\nChecking connectivity... done.\n\nroot@gemfield:/home/gemfield/nvidia-docker-repo# git clone -b gh-pages https://github.com/NVIDIA/nvidia-docker.git\nCloning into &#39;nvidia-docker&#39;...\nremote: Counting objects: 3159, done.\nremote: Compressing objects: 100% (60/60), done.\nremote: Total 3159 (delta 14), reused 49 (delta 6), pack-reused 3092\nReceiving objects: 100% (3159/3159), 17.31 MiB | 463.00 KiB/s, done.\nResolving deltas: 100% (1398/1398), done.\nChecking connectivity... done.</code></pre></div><p>然后新建source list:</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:/home/gemfield/nvidia-docker-repo# tee /etc/apt/sources.list.d/nvidia-docker.list &lt;&lt;&lt; \\\n&#34;deb file://$LOCALDIR/libnvidia-container/ubuntu14.04/amd64 /\ndeb file://$LOCALDIR/nvidia-container-runtime/ubuntu14.04/amd64 /\ndeb file://$LOCALDIR/nvidia-docker/ubuntu14.04/amd64 /&#34;</code></pre></div><p>然后添加gpg key：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:# apt-key add $LOCALDIR/nvidia-docker/gpgkey\nOK</code></pre></div><p>然后update：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:/home/gemfield/nvidia-docker-repo# apt update\nGet:1 file:  InRelease [1,106 B]                                            \nGet:2 file:  InRelease [1,136 B]                                               \nGet:3 file:  InRelease [1,129 B]                                                                                                  \n......</code></pre></div><p>然后安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:/home/gemfield/nvidia-docker-repo# apt-get install -y nvidia-docker2\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following extra packages will be installed:\n  libnvidia-container-tools libnvidia-container1 nvidia-container-runtime\n  nvidia-container-runtime-hook\nThe following NEW packages will be installed:\n  libnvidia-container-tools libnvidia-container1 nvidia-container-runtime\n  nvidia-container-runtime-hook nvidia-docker2\n0 upgraded, 5 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 0 B/2,377 kB of archives.\nAfter this operation, 9,949 kB of additional disk space will be used.\nSelecting previously unselected package libnvidia-container1:amd64.\n(Reading database ... 113064 files and directories currently installed.)\nPreparing to unpack .../libnvidia-container1_1.0.0~rc.1-1_amd64.deb ...\nUnpacking libnvidia-container1:amd64 (1.0.0~rc.1-1) ...\nSelecting previously unselected package libnvidia-container-tools.\nPreparing to unpack .../libnvidia-container-tools_1.0.0~rc.1-1_amd64.deb ...\nUnpacking libnvidia-container-tools (1.0.0~rc.1-1) ...\nSelecting previously unselected package nvidia-container-runtime-hook.\nPreparing to unpack .../nvidia-container-runtime-hook_1.3.0-1_amd64.deb ...\nUnpacking nvidia-container-runtime-hook (1.3.0-1) ...\nSelecting previously unselected package nvidia-container-runtime.\nPreparing to unpack .../nvidia-container-runtime_2.0.0+docker18.03.1-1_amd64.deb ...\nUnpacking nvidia-container-runtime (2.0.0+docker18.03.1-1) ...\nSelecting previously unselected package nvidia-docker2.\nPreparing to unpack .../nvidia-docker2_2.0.3+docker18.03.1-1_all.deb ...\nUnpacking nvidia-docker2 (2.0.3+docker18.03.1-1) ...\nSetting up libnvidia-container1:amd64 (1.0.0~rc.1-1) ...\nSetting up libnvidia-container-tools (1.0.0~rc.1-1) ...\nSetting up nvidia-container-runtime-hook (1.3.0-1) ...\nSetting up nvidia-container-runtime (2.0.0+docker18.03.1-1) ...\nSetting up nvidia-docker2 (2.0.3+docker18.03.1-1) ...\nProcessing triggers for libc-bin (2.19-0ubuntu6.14) ...</code></pre></div><p>然后重新load docker daemon的配置：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:/home/gemfield/nvidia-docker-repo# pkill -SIGHUP dockerd</code></pre></div><p>然后运行一个cuda image，注意，ubuntu14.04上的nvidia驱动不支持cuda9。所以gemfield选择了cuda8的image：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfield:~/github/Gemfield/src/bash/docker/tools$ docker run --runtime=nvidia --rm nvidia/cuda:8.0-cudnn6-devel-ubuntu14.04 nvidia-smi\nThu May  3 09:30:19 2018       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 375.26                 Driver Version: 375.26                    |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  Tesla P40           Off  | 0000:08:00.0     Off |                    0 |\n| N/A   26C    P0    51W / 250W |      0MiB / 22912MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   1  Tesla P40           Off  | 0000:09:00.0     Off |                    0 |\n| N/A   28C    P0    50W / 250W |      0MiB / 22912MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   2  Tesla P40           Off  | 0000:89:00.0     Off |                    0 |\n| N/A   29C    P0    50W / 250W |      0MiB / 22912MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n|   3  Tesla P40           Off  | 0000:8A:00.0     Off |                    0 |\n| N/A   27C    P0    46W / 250W |      0MiB / 22912MiB |      3%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID  Type  Process name                               Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "容器", 
                    "tagLink": "https://api.zhihu.com/topics/19615961"
                }, 
                {
                    "tag": "图形", 
                    "tagLink": "https://api.zhihu.com/topics/19598910"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": [
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "<p>#docker使用非阻塞log模块来加快log的打印</p><p>docker run -it --log-opt mode=non-blocking --log-opt max-buffer-size=4m gemfield/mtcnn ping 127.0.0.1</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "高飞", 
                    "userLink": "https://www.zhihu.com/people/8dece23187c4e0bed25bd14549be96f2", 
                    "content": "都是很好的技巧", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28984594", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "从NVIDIA X Server Settings 带来的灾难中恢复", 
            "content": "<p>今天早上发生了一起悲剧，是关于Gemfield的KUbuntu 16.04.03 LTS 系统的。</p><h2><b>悲剧</b></h2><p>Gemfield用nvidia-settings命令把NVIDIA X Server Settings 的GUI 界面弄出来</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/demo$ nvidia-settings \n** Message: PRIME: Requires offloading\n** Message: PRIME: is it supported? yes\n</code></pre></div><p>然后点击&#34;PRIME Profiles&#34;切换到Intel(Power Saving Mode)上，如下图所</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-1c65fb157dbca479b55ba6a70321e008_b.jpg\" data-rawwidth=\"671\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-1c65fb157dbca479b55ba6a70321e008_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;671&#39; height=&#39;472&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"671\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-1c65fb157dbca479b55ba6a70321e008_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-1c65fb157dbca479b55ba6a70321e008_b.jpg\"/></figure><p>结果，关机的时候就关不了，系统hung住了。于是Gemfield长按电源键强制关机。再次启动的时候，系统同样起不来了，kernel  panic！！！另外我还在konsole的log中看到了如下的信息：</p><div class=\"highlight\"><pre><code class=\"language-text\">[Failed] Failed to start NVIDIA Persistence Daemon.\nSee &#39;systemctl  status nvidia-persistenced.service&#39; for details.</code></pre></div><p>不好的事情发生了。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>恢复</b></h2><p><b>1，进入Kubuntu的recover mode</b></p><p>进入KUbuntu16.04的recovery mode，在开机bios界面快要逝去的时候，按&#34;Shift&#34;键，进入GRUB的 选择菜单，然后选择recover mode的Kernel启动（因为这个模式下kernel</p><p>只会加载最小的功能集，所以一般能进入系统的命令行），然后选择“Drop to root shell prompt&#34;。</p><p><b>2，看/etc/prime-discrete 的值</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">root@ai:~$ cat /etc/prime-discrete \noff\nroot@ai:~$</code></pre></div><p><b>3，重新切换回 NVIDIA(Performance Mode)</b></p><p>运行下面的命令：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@ai:~$ mount -o remount,rw /\nroot@ai:~$ mount --all\nroot@ai:~$ prime-select nvidia\n......</code></pre></div><p><b>4，再看/etc/prime-discrete 的值，然后重启系统</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">root@ai:~$ cat /etc/prime-discrete \non\nroot@ai:~$ reboot</code></pre></div><h2><b>庆祝</b></h2><p>Kubuntu 16.04果然能顺利启动和登陆了。</p>", 
            "topic": [
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "CUDA", 
                    "tagLink": "https://api.zhihu.com/topics/19597236"
                }, 
                {
                    "tag": "Kubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19585277"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29216556", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 9, 
            "title": "使用ffmpeg命令处理音视频", 
            "content": "<p>FFmpeg可以运行音频和视频多种格式的录影、转换、流功能，包含了libavcodec（用于多个项目中音频和视频的解码器库）和libavformat（音频与视频格式转换库）。(关于一些底层方面的东西，可以参考<a href=\"https://zhuanlan.zhihu.com/p/36109778\" class=\"internal\">ffmpeg和H264视频的编解码</a>）</p><p>1，获得一个文件的音视频（编码方面的）信息：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ ffmpeg -i video.flv -hide_banner</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>2，把视频的每帧转换成照片：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ ffmpeg -i video.flv image%d.jpg</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>把视频的一部分截取出来：</p><div class=\"highlight\"><pre><code class=\"language-text\">ffmpeg -i civilnet.MP4 -ss 2000 -t 100 -codec copy gemfield.mp4</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>把视频的一部分截取出来生成图片：</p><div class=\"highlight\"><pre><code class=\"language-text\">ffmpeg -ss 06:07:19 -i civilnet.mp4 -t 719 gemfield%6d.jpg</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>3，把照片(image1.jpg, image2.jpg, image3.jpg...)转换为视频，-f设置输出格式：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ffmpeg -f image2 -i image%d.jpg video.mpg</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>4，把音频剥离出来：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ffmpeg -i video.flv -vn -ar 44100 -ac 2 -ab 192 -f mp3 audio.mp3</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>5，把多个视频合并为1个视频：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ for f in $(ls *.mkv);do echo &#34;file &#39;$f&#39;&#34; &gt;&gt; mylist.txt;done\ngemfield@ai:~$ ffmpeg -f concat -i mylist.txt -c copy myvideo.mkv</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>6，视频格式的转换，比如把mp4格式转换为wmv：</p><div class=\"highlight\"><pre><code class=\"language-text\">#先看格式是否被支持\ngemfield@ai:~$ ffmpeg -formats\n#转换\ngemfield@ai:~$ ffmpeg -i yourvideoname.mp4 -c:v libx264 outputfilename.wmv</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>7，把字幕烧写到视频里（注意是烧写到视频里，而不是运行时加载字幕的方式）</p><div class=\"highlight\"><pre><code class=\"language-text\">#先准备好字幕文件 game.srt\ngemfield@ai:~$ ffmpeg -i game.srt game.ass\ngemfield@ai:~$ ffmpeg -i myvideo.mkv -vf ass=game.ass myvideo_game_caption.mkv</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>备注：字幕文件的基本格式</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads/demo_gemfield$ cat game.srt\n<span class=\"m\">1</span>\n<span class=\"m\">00</span>:00:00,000 --&gt; <span class=\"m\">00</span>:00:27,000 \n第一部分：这里是Gemfield\n\n<span class=\"m\">2</span>\n<span class=\"m\">00</span>:00:27,000 --&gt; <span class=\"m\">00</span>:01:10,000\n第二部分：那里也是Gemfield\n\n<span class=\"m\">3</span>\n<span class=\"m\">00</span>:01:10,000 --&gt; <span class=\"m\">00</span>:02:21,000 \n第三部分：到处都是Gemfield\n\n<span class=\"m\">4</span>\n<span class=\"m\">00</span>:02:21,000 --&gt; <span class=\"m\">00</span>:03:45,000\n第四部分：但你不是Gemfield\n\n<span class=\"m\">5</span>\n<span class=\"m\">00</span>:03:45,000 --&gt; <span class=\"m\">00</span>:04:42,000\n第五部分：他也不是Gemfield\n\n<span class=\"m\">6</span>\n<span class=\"m\">00</span>:04:42,000 --&gt; <span class=\"m\">00</span>:04:52,000\n第六部分：那天下谁人不识Gemfield</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>8，把视频切割成多个</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ffmpeg -i 10.mkv -t 00:00:39 -codec copy 8.mkv -ss 00:01:01 -codec copy 9.mkv</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>10，一些更新</p><div class=\"highlight\"><pre><code class=\"language-console\">#mp4拼接：\nffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts\nffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts\nffmpeg -i &#34;concat:1.ts|2.ts&#34; -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4\n\n#mp3截取：\nffmpeg -ss 00:00:05 -t 00:02:00 -i testmusic.mp3 twomin.mp3\n\n#mp4配mp3音频：\nffmpeg -i test_yueqianlongma.mp4 -vcodec copy -an output.mp4\n#(cut off original audio for original mp4)\nffmpeg -i output.mp4 -i audio.mp3 -vcodec copy -acodec copy result.mp4\n\n#mp4截帧：\nffmpeg -i video.mp4 image%4d.jpg\n\n#单图生成一段视频：\nffmpeg -f concat -safe 0 -i input.txt concat1.mp4\n#input.txt内容（去掉#）：\n#file &#39;./frames/image0101.jpg&#39;\n#duration 3 (单位秒）\n#file &#39;./frames/image0101.jpg&#39;\n\n#截取中间一段视频(-ss 起始时间点 -to 结束时间点)：\nffmpeg  -i source.mp4 -vcodec copy -acodec copy -ss 00:00:10 -to 00:00:15 ./cutout1.mp4</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>Debug章节</b></h2><p><b>参考</b><a href=\"https://link.zhihu.com/?target=https%3A//trac.ffmpeg.org/wiki/Debug/MacroblocksAndMotionVectors\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Debug/MacroblocksAndMotionVectors - FFmpeg</a></p><p><b>1，显示运动向量</b></p><div class=\"highlight\"><pre><code class=\"language-text\">ffplay -flags2 +export_mvs input.mp4 -vf codecview=mv=pf+bf+bb\n或者\nffmpeg -flags2 +export_mvs -i input.mp4 -vf codecview=mv=pf+bf+bb output.mp4</code></pre></div><p>其中：</p><ul><li>pf – forward predicted motion vectors of P pictures</li><li>bf – forward predicted motion vectors of B pictures</li><li>bb – backward predicted motion vectors of B pictures</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，显示宏块类型</b></p><div class=\"highlight\"><pre><code class=\"language-text\">ffplay -debug vis_mb_type input.mp4\nffmpeg -debug vis_mb_type -i input.mp4 output.mp4</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，分析QP Values</b></p><div class=\"highlight\"><pre><code class=\"language-text\">ffplay -debug vis_qp input.mp4\nffmpeg  -debug vis_qp -i input.mp4 output.mp4</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "FFmpeg", 
                    "tagLink": "https://api.zhihu.com/topics/19608940"
                }, 
                {
                    "tag": "视频", 
                    "tagLink": "https://api.zhihu.com/topics/19552153"
                }, 
                {
                    "tag": "音频", 
                    "tagLink": "https://api.zhihu.com/topics/19624412"
                }
            ], 
            "comments": [
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "<p>把AAC音频剥离出来：ffmpeg -i INPUT.mp4 -c copy -map 0:a:0 Output.aac</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "<p>把rtmp流dump为mp4：ffmpeg -i rtmp://<a href=\"http://link.zhihu.com/?target=http%3A//live.gemfield.org/live/2001\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">live.gemfield.org/live/2001</a> -acodec copy -vcodec copy 2001.mp4</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>你好，请教一下如果我想把一个mkv文件的转换成mp4格式，音频编码改成aac（我播ac3音频编码没声），是不是应该这样：ffmpeg -i input.mkv -vcodec copy -acodec aac out.mp4</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29388095", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 5, 
            "title": "从Ubuntu 16.04上远程连接Windows 10 Home Edition（家庭版）", 
            "content": "<p>Windows的远程连接使用的是RDP协议，RDP的全称是远程显示协议（Remote Display Protocol ）。要想从Ubuntu 16.4上远程连接Windows 10家庭版，就得在Ubuntu上配置RDP client，在Windows 10家庭版上配置RDP server。</p><h2><b>RDP Server</b></h2><p>咦？我为什么要特别注明Windows10是家庭版？因为家庭版不像专业版默认带有RDP Server。在专业版Win10上，只需要在远程连接设置中勾选允许远程连接即可（注意不是远程协助！）；而在家庭版Win10上，我们需要先安装rdpwrap（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/stascorp/rdpwrap\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">stascorp/rdpwrap</a>）并运行它来启动RDP Server：</p><p>1， 下载压缩包：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/stascorp/rdpwrap/releases/download/v1.6.1/RDPWrap-v1.6.1.zip\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/stascorp/rdp</span><span class=\"invisible\">wrap/releases/download/v1.6.1/RDPWrap-v1.6.1.zip</span><span class=\"ellipsis\"></span></a> ，当然，你也可以从release页面选择其它的版本： <a href=\"https://link.zhihu.com/?target=https%3A//github.com/stascorp/rdpwrap/releases\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">stascorp/rdpwrap</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p>2，解压压缩包，里面有6个文件：</p><ul><li>RDPWInst.exe （RDP Wrapper Library installer/uninstaller）</li><li>RDPCheck.exe （Local RDP Checker (you can check the RDP is working)   </li><li>RDPConf.exe （RDP Wrapper Configuration）</li><li>install.bat （Quick install batch file）</li><li>uninstall.bat （Quick uninstall batch file） </li><li>update.bat （Quick update batch file）</li></ul><p>3，以Administrator身份运行install.bat即可打开RDP Server 服务。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>RDP Client</b></h2><p>以前的tsclient已经被从Ubuntu软件源中被完全移除了，所以现在推荐的是remmina。</p><p>1，使用下面的命令安装remmina：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get install remmina</code></pre></div><p>2，启动Remmina Remote Desktop Client</p><p>3，连接windows 10家庭版机器的IP：</p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-daae84d1fceccfd1067c12e4c435a38a_b.jpg\" data-caption=\"\" data-rawwidth=\"903\" data-rawheight=\"509\" class=\"origin_image zh-lightbox-thumb\" width=\"903\" data-original=\"https://pic3.zhimg.com/v2-daae84d1fceccfd1067c12e4c435a38a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;903&#39; height=&#39;509&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"903\" data-rawheight=\"509\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"903\" data-original=\"https://pic3.zhimg.com/v2-daae84d1fceccfd1067c12e4c435a38a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-daae84d1fceccfd1067c12e4c435a38a_b.jpg\"/></figure><h2><b>庆祝吧</b></h2><p>注意：好像windows 10机器上只要有人重新操作系统界面，Ubuntu机器上建立的到Win10的连接就会中断。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>Bug fix:</b></p><p>2017年10月7日在另外一台windows 10 Home上安装并运行RDPwrapper的时候，listening state一直是not llistening，因此客户端根本连不上。解决方案如下：</p><p>Try this dll file (for <b>64bit</b> win10 home edition) : <a href=\"https://link.zhihu.com/?target=https%3A//github.com/stascorp/rdpwrap/files/1236856/rfxvmt.zip\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rfxvmt.zip</a>.</p><p>Unzip it into the C:\\windows\\system32 folder (if the file with the same name exists, rename it to rfxvmt.dll.old).</p><p>Reinstall rdpwrap and run update.bat.</p><p></p>", 
            "topic": [
                {
                    "tag": "远程桌面（mstsc）", 
                    "tagLink": "https://api.zhihu.com/topics/19605865"
                }, 
                {
                    "tag": "Windows 10", 
                    "tagLink": "https://api.zhihu.com/topics/20007813"
                }, 
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }
            ], 
            "comments": [
                {
                    "userName": "晴好", 
                    "userLink": "https://www.zhihu.com/people/e58e16bbe5adefeae05beb445ae30926", 
                    "content": "大一的时候安装了 那个时候也下载了rfxvmt  现在大二开学发现又不行了 重新弄了一遍还是不行显示Not listening  求答主指教啊_(:з」∠)_", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29708546", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 5, 
            "title": "Ubuntu上使用letsencrypt获得免费的HTTPS证书", 
            "content": "<h2><b>前言</b></h2><p>一般你的网站会使用Apache或者Nginx对外提供web服务，使用的操作系统也是五花八门，但是没关系，不出意料的话，这些系统都被letsencrypt支持。本文就以Gemfield的个人网站<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>为例来说明。<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>使用了Ubuntu 16.04操作系统，并使用Nginx作为Http server。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@CivilNet:~$ cat /etc/os-release\n<span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;Ubuntu&#34;</span>\n<span class=\"nv\">VERSION</span><span class=\"o\">=</span><span class=\"s2\">&#34;16.04.3 LTS (Xenial Xerus)&#34;</span>\n<span class=\"nv\">ID</span><span class=\"o\">=</span>ubuntu\n<span class=\"nv\">ID_LIKE</span><span class=\"o\">=</span>debian\n<span class=\"nv\">PRETTY_NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;Ubuntu 16.04.3 LTS&#34;</span>\n<span class=\"nv\">VERSION_ID</span><span class=\"o\">=</span><span class=\"s2\">&#34;16.04&#34;</span>\n<span class=\"nv\">HOME_URL</span><span class=\"o\">=</span><span class=\"s2\">&#34;http://www.ubuntu.com/&#34;</span>\n<span class=\"nv\">SUPPORT_URL</span><span class=\"o\">=</span><span class=\"s2\">&#34;http://help.ubuntu.com/&#34;</span>\n<span class=\"nv\">BUG_REPORT_URL</span><span class=\"o\">=</span><span class=\"s2\">&#34;http://bugs.launchpad.net/ubuntu/&#34;</span>\n<span class=\"nv\">VERSION_CODENAME</span><span class=\"o\">=</span>xenial\n<span class=\"nv\">UBUNTU_CODENAME</span><span class=\"o\">=</span>xenial\ngemfield@CivilNet:~$</code></pre></div><h2><b>问题</b></h2><p>在Nginx的配置文件中，我们可以看到</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@CivilNet:/etc/nginx/sites-enabled$ cat gemfield.org\n......\nserver <span class=\"o\">{</span>\n        listen <span class=\"m\">80</span><span class=\"p\">;</span>\n        listen <span class=\"o\">[</span>::<span class=\"o\">]</span>:80<span class=\"p\">;</span>\n        <span class=\"c1\"># SSL configuration</span>\n        listen <span class=\"m\">443</span> default ssl<span class=\"p\">;</span>\n        listen <span class=\"o\">[</span>::<span class=\"o\">]</span>:443 default ssl<span class=\"p\">;</span>\n        <span class=\"c1\">#ssl on;</span>\n        ssl_certificate       /etc/ssl/certs/nginx-gemfield.org-self-signed.crt<span class=\"p\">;</span>\n        ssl_certificate_key   /etc/ssl/private/nginx-gemfield.org-self-signed.key<span class=\"p\">;</span>\n        #</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>问题是这里的ssl_certificate是Gemfield自己给自己签发的，像下面演示的这样：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@CivilNet:~$  sudo openssl req -x509 -nodes -days <span class=\"m\">365</span> -newkey rsa:2048 -keyout /etc/ssl/private/nginx-gemfield.org-self-signed.key -out /etc/ssl/certs/nginx-gemfield.org-self-signed.crt\nsudo: unable to resolve host CivilNet\nGenerating a <span class=\"m\">2048</span> bit RSA private key\n............................................................................................+++\n..........................+++\nwriting new private key to <span class=\"s1\">&#39;/etc/ssl/private/nginx-gemfield.org-self-signed.key&#39;</span>\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter <span class=\"s1\">&#39;.&#39;</span>, the field will be left blank.\n-----\nCountry Name <span class=\"o\">(</span><span class=\"m\">2</span> letter code<span class=\"o\">)</span> <span class=\"o\">[</span>AU<span class=\"o\">]</span>:CN\nState or Province Name <span class=\"o\">(</span>full name<span class=\"o\">)</span> <span class=\"o\">[</span>Some-State<span class=\"o\">]</span>:Beijing\nLocality Name <span class=\"o\">(</span>eg, city<span class=\"o\">)</span> <span class=\"o\">[]</span>:Beijing\nOrganization Name <span class=\"o\">(</span>eg, company<span class=\"o\">)</span> <span class=\"o\">[</span>Internet Widgits Pty Ltd<span class=\"o\">]</span>:CivilNet\nOrganizational Unit Name <span class=\"o\">(</span>eg, section<span class=\"o\">)</span> <span class=\"o\">[]</span>:Gemfield\nCommon Name <span class=\"o\">(</span>e.g. server FQDN or YOUR name<span class=\"o\">)</span> <span class=\"o\">[]</span>:gemfield.org\nEmail Address <span class=\"o\">[]</span>:gemfield@civilnet.cn\ngemfield@CivilNet:~$ </code></pre></div><p>其中，</p><ul><li><b>openssl</b>是创建和管理OpenSSL 证书,、密钥,和其它文件的工具；</li><li><b>req</b>: 子命令指定了我们想要使用的是 X.509 certificate signing request (CSR) 。 &#34;X.509&#34; 是一个公钥设施标准，SSL和 TLS 都使用这个标准进行密钥和证书的管理 。这里Gemfield就是告诉openssl工具我想要的是一个X.509证；</li><li><b>-x509</b>: 这个参数进一步告诉req子命令，Gemfield想要的是自己给自己签发个证书，而不是 生成一个CSR（certificate signing request）；</li><li><b>-nodes</b>: 这个参数（看作no des，不是node s)告诉 OpenSSL忽略使用密码加密证书这一步。因为这个文件要被Nginx使用而无需用户介入去输入这个密码；</li><li><b>-days 365</b>: 证书365天过期；</li><li><b>-newkey rsa:2048</b>: 同时生成新的证书和私钥，也就是同时生成私钥，再用私钥签发新的证书。 rsa:2048 部分说的是使用的是2048位长度的RSA key；</li><li><b>-keyout</b>: 产生的私钥放在哪儿；</li><li><b>-out</b>: 产生的证书放在哪；</li></ul><p>浏览器或者操作系统当然是不信任<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>的，于是访问<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>就会出现：</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-b6a8485c0edadffeec38e3a0b219c727_b.jpg\" data-rawwidth=\"1099\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb\" width=\"1099\" data-original=\"https://pic4.zhimg.com/v2-b6a8485c0edadffeec38e3a0b219c727_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1099&#39; height=&#39;557&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1099\" data-rawheight=\"557\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1099\" data-original=\"https://pic4.zhimg.com/v2-b6a8485c0edadffeec38e3a0b219c727_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6a8485c0edadffeec38e3a0b219c727_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>解决</b></h2><p>要解决这个问题，就得让那些内置在各操作系统或者浏览器中的CA来签发<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>证书。通常这种服务是要收费的，但也有免费的，比如letsencrypt。和正常情况下的 HTTPS TLS X.509 PKI 模型相比，Let&#39;s Encrypt 的特色就是 ACME 协议，这是一个全自动服务器身份验证协议，后面你会感受到到底是哪里自动化了。它使用了Certbot作为该协议的客户端。</p><p><b>1，下载Certbot</b></p><p>到<a href=\"https://link.zhihu.com/?target=https%3A//certbot.eff.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Certbot</a>选择你对应的操作系统和http server ，就会出现相应的下载指令。这里以gemfield.org的Ubuntu 16.04和Nginx为例：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install python-certbot-nginx </code></pre></div><p><b>2，使用certbot命令</b></p><p>Certbot含有Nginx插件（参考上面的安装步骤），因此它不光会获得证书，而且会安装证书到系统目录上再配置Nginx。</p><p>注意，这一步输入的domain name是会被Certbot验证的，比如，你写的domain name是<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>，那么Certbot会检查<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a>解析到的IP是不是你当前使用certbot命令的机器的IP，这样就完成了身份的验证。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@CivilNet:/etc/nginx/sites-enabled$ sudo certbot --nginx\nsudo: unable to resolve host CivilNet\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nEnter email address (used for urgent renewal and security notices) (Enter &#39;c&#39; to\ncancel): gemfield@civilnet.cn\n\n-------------------------------------------------------------------------------\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf. You must agree\nin order to register with the ACME server at\nhttps://acme-v01.api.letsencrypt.org/directory\n-------------------------------------------------------------------------------\n(A)gree/(C)ancel: A\n\n-------------------------------------------------------------------------------\nWould you be willing to share your email address with the Electronic Frontier\nFoundation, a founding partner of the Let&#39;s Encrypt project and the non-profit\norganization that develops Certbot? We&#39;d like to send you email about EFF and\nour work to encrypt the web, protect its users and defend digital rights.\n-------------------------------------------------------------------------------\n(Y)es/(N)o: Y\n\nWhich names would you like to activate HTTPS for?\n-------------------------------------------------------------------------------\n1: civilnet.cn\n2: gemfield.org\n-------------------------------------------------------------------------------\nSelect the appropriate numbers separated by commas and/or spaces, or leave input\nblank to select all options shown (Enter &#39;c&#39; to cancel): 2\nObtaining a new certificate\nPerforming the following challenges:\ntls-sni-01 challenge for gemfield.org\nWaiting for verification...\nCleaning up challenges\nDeployed Certificate to VirtualHost /etc/nginx/sites-enabled/gemfield.org for set([&#39;civilnet.cn&#39;, &#39;gemfield.org&#39;])\n\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n-------------------------------------------------------------------------------\n1: No redirect - Make no further changes to the webserver configuration.\n2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for\nnew sites, or if you&#39;re confident your site works on HTTPS. You can undo this\nchange by editing your web server&#39;s configuration.\n-------------------------------------------------------------------------------\nSelect the appropriate number [1-2] then [enter] (press &#39;c&#39; to cancel): 1\n\n-------------------------------------------------------------------------------\nCongratulations! You have successfully enabled https://gemfield.org\n\nYou should test your configuration at:\nhttps://www.ssllabs.com/ssltest/analyze.html?d=gemfield.org\n-------------------------------------------------------------------------------\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/gemfield.org/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/gemfield.org/privkey.pem\n   Your cert will expire on 2017-12-27. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot again\n   with the &#34;certonly&#34; option. To non-interactively renew *all* of\n   your certificates, run &#34;certbot renew&#34;\n - Your account credentials have been saved in your Certbot\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Certbot so\n   making regular backups of this folder is ideal.\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let&#39;s Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\ngemfield@CivilNet:/etc/nginx/sites-enabled$</code></pre></div><p>这一步成功之后，其实letsencryt签发的证书已经自动注入到了Nginx的配置文件中了，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@CivilNet:/etc/nginx/sites-enabled$ cat gemfield.org\n......\nserver <span class=\"o\">{</span>\n        listen <span class=\"m\">80</span><span class=\"p\">;</span>\n        listen <span class=\"o\">[</span>::<span class=\"o\">]</span>:80<span class=\"p\">;</span>\n\n        #\n        listen <span class=\"m\">443</span> default ssl<span class=\"p\">;</span>\n        listen <span class=\"o\">[</span>::<span class=\"o\">]</span>:443 default ssl<span class=\"p\">;</span>\n        <span class=\"c1\">#ssl on;</span>\nssl_certificate /etc/letsencrypt/live/gemfield.org/fullchain.pem<span class=\"p\">;</span> <span class=\"c1\"># managed by Certbot</span>\nssl_certificate_key /etc/letsencrypt/live/gemfield.org/privkey.pem<span class=\"p\">;</span> <span class=\"c1\"># managed by Certbot</span>\n</code></pre></div><p><b>3，访问<a href=\"https://link.zhihu.com/?target=http%3A//ssllabs.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">ssllabs.com</span><span class=\"invisible\"></span></a>进行验证</b></p><p>访问: <a href=\"https://link.zhihu.com/?target=https%3A//www.ssllabs.com/ssltest/analyze.html%3Fd%3Dgemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">ssllabs.com/ssltest/ana</span><span class=\"invisible\">lyze.html?d=gemfield.org</span><span class=\"ellipsis\"></span></a></p><p>检测会耗时一分钟左，最后得到的分析结果如下图：</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-c136df72676a9d963f93bcd3faaa47eb_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"7554\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-c136df72676a9d963f93bcd3faaa47eb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;7554&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"1920\" data-rawheight=\"7554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-c136df72676a9d963f93bcd3faaa47eb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-c136df72676a9d963f93bcd3faaa47eb_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4，证书更新</b></p><p>Let&#39;s Encrypt 的证书有效期是90天，虽然比一般的证书短，但其实是合理的（很多域名的有效期其实也都不到一年了），遑论现在有了ACME协议，于是证书的更新可以自动化了。你可以使用下面的命令来自动更新证书:</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo certbot renew</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>庆祝</b></h2><p>现在再访问<a href=\"https://link.zhihu.com/?target=https%3A//gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">gemfield.org</span><span class=\"invisible\"></span></a> 就看不到证书告警了，哈哈哈哈哈哈哈哈。</p>", 
            "topic": [
                {
                    "tag": "Nginx", 
                    "tagLink": "https://api.zhihu.com/topics/19574050"
                }, 
                {
                    "tag": "Let's Encrypt", 
                    "tagLink": "https://api.zhihu.com/topics/20033329"
                }, 
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29826214", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 10, 
            "title": "Ubuntu 16.04上配置IKEV2 VPN Server", 
            "content": "<h2><b>问题</b></h2><p>宪法第四十条看不懂了。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>解决：在宪法领土之外的Ubuntu 16.04上配置IKEV2 VPN Server</b></h2><p><b>1，选择VPN协议</b></p><p>打开iOS的vpn配置，你会看到如下界面：</p><figure><noscript><img src=\"https://pic4.zhimg.com/v2-85ad28c710eb8e0c271a95e6eb7b8207_b.jpg\" data-caption=\"\" data-rawwidth=\"1242\" data-rawheight=\"708\" class=\"origin_image zh-lightbox-thumb\" width=\"1242\" data-original=\"https://pic4.zhimg.com/v2-85ad28c710eb8e0c271a95e6eb7b8207_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1242&#39; height=&#39;708&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"1242\" data-rawheight=\"708\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1242\" data-original=\"https://pic4.zhimg.com/v2-85ad28c710eb8e0c271a95e6eb7b8207_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-85ad28c710eb8e0c271a95e6eb7b8207_b.jpg\"/></figure><p>对，这就是主流的VPN协议，Gemfield在本文中选择的就是被主流操作系统所推荐的IKEv2协议。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，选择VPN Server软件</b></p><p>Gemfield选择的是StrongSwan，一个开源的IPSec daemon （没错，daemon进程的名字正是替代了pluto的charon，你可以搜下这两个单词，分别是冥王星及其卫星）。</p><p>我们还将安装StrongSwan的EAP插件，这个插件允许你在VPN客户端上使用用户名密码的方式来登陆，而不是基于证书的方式。比如在KDE的VPN设置界面，你就会看到EAP这样的选项。</p><p>我们还需要配置一些iptables的规则，因此还需要安装一些工具来帮助我们把这些新设置的iptables规则持久化保存下来。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@iZrj9iu3l09ajt2mi6n7pbZ:~$ sudo apt-get install strongswan strongswan-plugin-eap-mschapv2 moreutils iptables-persistent\n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> password <span class=\"k\">for</span> gemfield:</code></pre></div><p><b>3，安装证书</b></p><p>参考CivilNet专栏<a href=\"https://zhuanlan.zhihu.com/p/29708546\" class=\"internal\">Ubuntu上使用letsencrypt获得免费的HTTPS证书</a>，使用<b>certbot</b>工具。在这里有所不同的是，certbot命令不针对任何web server（Apache、Nginx等），而是单独要下载4个letsencrypt证书文件（不过原理都类似，比如校验你的服务器IP等）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ sudo apt-get update\n$ sudo apt-get install software-properties-common\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install certbot \n$ sudo certbot certonly</code></pre></div><p>一切顺利的话，certbot命令会得到4个相关文件：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# ls -l /etc/letsencrypt/live/us.gemfield.org/\ntotal <span class=\"m\">4</span>\nlrwxrwxrwx <span class=\"m\">1</span> root root  <span class=\"m\">39</span> Sep <span class=\"m\">28</span> <span class=\"m\">18</span>:24 cert.pem -&gt; ../../archive/us.gemfield.org/cert1.pem\nlrwxrwxrwx <span class=\"m\">1</span> root root  <span class=\"m\">40</span> Sep <span class=\"m\">28</span> <span class=\"m\">18</span>:24 chain.pem -&gt; ../../archive/us.gemfield.org/chain1.pem\nlrwxrwxrwx <span class=\"m\">1</span> root root  <span class=\"m\">44</span> Sep <span class=\"m\">28</span> <span class=\"m\">18</span>:24 fullchain.pem -&gt; ../../archive/us.gemfield.org/fullchain1.pem\nlrwxrwxrwx <span class=\"m\">1</span> root root  <span class=\"m\">42</span> Sep <span class=\"m\">28</span> <span class=\"m\">18</span>:24 privkey.pem -&gt; ../../archive/us.gemfield.org/privkey1.pem\n-rw-r--r-- <span class=\"m\">1</span> root root <span class=\"m\">543</span> Sep <span class=\"m\">28</span> <span class=\"m\">18</span>:24 README\nroot@us-gemfield-org:~#\n</code></pre></div><p>拷贝其中的privkey.pem文件到/etc/ipsec.d/private/ 目录下：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# cp /etc/letsencrypt/live/us.gemfield.org/privkey.pem /etc/ipsec.d/private/</code></pre></div><p>拷贝其中的fullchain.pem文件到/etc/ipsec.d/certs/ 目录下：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# cp /etc/letsencrypt/live/us.gemfield.org/fullchain.pem /etc/ipsec.d/certs/</code></pre></div><p><b>4，配置StrongSwan的ipsec.conf</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# cp /etc/ipsec.conf /etc/ipsec.conf.original\n\n<span class=\"c1\">#清空ipsec.conf</span>\nroot@us-gemfield-org:~# &gt;/etc/ipsec.conf\n\n<span class=\"c1\">#配置ipsec.conf文件，内容如下所示</span>\nroot@us-gemfield-org:~# cat /etc/ipsec.conf\nconfig setup\n  <span class=\"nv\">charondebug</span><span class=\"o\">=</span><span class=\"s2\">&#34;ike 1, knl 1, cfg 0&#34;</span>\n  <span class=\"nv\">uniqueids</span><span class=\"o\">=</span>no\n\nconn ikev2-vpn\n  <span class=\"nv\">auto</span><span class=\"o\">=</span>add\n  <span class=\"nv\">compress</span><span class=\"o\">=</span>no\n  <span class=\"nv\">type</span><span class=\"o\">=</span>tunnel\n  <span class=\"nv\">keyexchange</span><span class=\"o\">=</span>ikev2\n  <span class=\"nv\">fragmentation</span><span class=\"o\">=</span>yes\n  <span class=\"nv\">forceencaps</span><span class=\"o\">=</span>yes\n  <span class=\"nv\">ike</span><span class=\"o\">=</span>aes256-sha1-modp1024,3des-sha1-modp1024!\n  <span class=\"nv\">esp</span><span class=\"o\">=</span>aes256-sha1,3des-sha1!\n  <span class=\"nv\">dpdaction</span><span class=\"o\">=</span>clear\n  <span class=\"nv\">dpddelay</span><span class=\"o\">=</span>300s\n  <span class=\"nv\">rekey</span><span class=\"o\">=</span>no\n  <span class=\"nv\">left</span><span class=\"o\">=</span>%any\n  <span class=\"nv\">leftid</span><span class=\"o\">=</span>@us.gemfield.org\n  <span class=\"nv\">leftcert</span><span class=\"o\">=</span>/etc/ipsec.d/certs/fullchain.pem\n  <span class=\"nv\">leftsendcert</span><span class=\"o\">=</span>always\n  <span class=\"nv\">leftsubnet</span><span class=\"o\">=</span><span class=\"m\">0</span>.0.0.0/0\n  <span class=\"nv\">right</span><span class=\"o\">=</span>%any\n  <span class=\"nv\">rightid</span><span class=\"o\">=</span>%any\n  <span class=\"nv\">rightauth</span><span class=\"o\">=</span>eap-mschapv2\n  <span class=\"nv\">rightsourceip</span><span class=\"o\">=</span><span class=\"m\">10</span>.10.10.0/24\n  <span class=\"nv\">rightdns</span><span class=\"o\">=</span><span class=\"m\">8</span>.8.8.8,8.8.4.4\n  <span class=\"nv\">rightsendcert</span><span class=\"o\">=</span>never\n  <span class=\"nv\">eap_identity</span><span class=\"o\">=</span>%identity\nroot@us-gemfield-org:~#</code></pre></div><p>其中的leftid改成你自己的主机名，这个名字要和certbot时填的主机名一致。</p><p><b>5，配置VPN的用户名密码</b></p><p>配置/etc/ipsec.secrets文件，这里你又会见到上文中出现过的EAP了。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#配置/etc/ipsec.secrets文件，内容如下所示</span>\nroot@us-gemfield-org:~# cat /etc/ipsec.secrets\n<span class=\"c1\"># This file holds shared secrets or RSA private keys for authentication.</span>\n\n<span class=\"c1\"># RSA private key for this host, authenticating it to any other host</span>\n<span class=\"c1\"># which knows the public part.</span>\n\nus.gemfield.org : RSA <span class=\"s2\">&#34;/etc/ipsec.d/private/privkey.pem&#34;</span>\n你的登录名 %any% : EAP <span class=\"s2\">&#34;你的登陆密码&#34;</span>\nroot@us-gemfield-org:~#\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>6，StrongSwan的systemd service</b></p><p>StrongSwan的systemd service名字是strongswan，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# systemctl status strongswan\n● strongswan.service - strongSwan IPsec services\n   Loaded: loaded <span class=\"o\">(</span>/lib/systemd/system/strongswan.service<span class=\"p\">;</span> enabled<span class=\"p\">;</span> vendor preset: enabled<span class=\"o\">)</span>\n   Active: inactive <span class=\"o\">(</span>dead<span class=\"o\">)</span> since Sun <span class=\"m\">2017</span>-10-01 <span class=\"m\">00</span>:47:26 CST<span class=\"p\">;</span> 8s ago\n  Process: <span class=\"m\">5589</span> <span class=\"nv\">ExecStopPost</span><span class=\"o\">=</span>/bin/rm -f /var/run/charon.pid /var/run/starter.charon.pid <span class=\"o\">(</span><span class=\"nv\">code</span><span class=\"o\">=</span>exited, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"m\">0</span>/SUCCESS<span class=\"o\">)</span>\n  Process: <span class=\"m\">5579</span> <span class=\"nv\">ExecStop</span><span class=\"o\">=</span>/usr/sbin/ipsec stop <span class=\"o\">(</span><span class=\"nv\">code</span><span class=\"o\">=</span>exited, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"m\">0</span>/SUCCESS<span class=\"o\">)</span>\n  Process: <span class=\"m\">5561</span> <span class=\"nv\">ExecStart</span><span class=\"o\">=</span>/usr/sbin/ipsec start <span class=\"o\">(</span><span class=\"nv\">code</span><span class=\"o\">=</span>exited, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"m\">0</span>/SUCCESS<span class=\"o\">)</span>\n  Process: <span class=\"m\">5556</span> <span class=\"nv\">ExecStartPre</span><span class=\"o\">=</span>/bin/mkdir -p /var/lock/subsys <span class=\"o\">(</span><span class=\"nv\">code</span><span class=\"o\">=</span>exited, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"m\">0</span>/SUCCESS<span class=\"o\">)</span>\n Main PID: <span class=\"m\">885</span> <span class=\"o\">(</span><span class=\"nv\">code</span><span class=\"o\">=</span>exited, <span class=\"nv\">status</span><span class=\"o\">=</span><span class=\"m\">0</span>/SUCCESS<span class=\"o\">)</span>\n\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org systemd<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: Starting strongSwan IPsec services...\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec<span class=\"o\">[</span><span class=\"m\">5561</span><span class=\"o\">]</span>: Starting strongSwan <span class=\"m\">5</span>.3.5 IPsec <span class=\"o\">[</span>starter<span class=\"o\">]</span>...\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec_starter<span class=\"o\">[</span><span class=\"m\">5561</span><span class=\"o\">]</span>: Starting strongSwan <span class=\"m\">5</span>.3.5 IPsec <span class=\"o\">[</span>starter<span class=\"o\">]</span>...\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec<span class=\"o\">[</span><span class=\"m\">5561</span><span class=\"o\">]</span>: charon is already running <span class=\"o\">(</span>/var/run/charon.pid exists<span class=\"o\">)</span> -- skipping daemon start\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec_starter<span class=\"o\">[</span><span class=\"m\">5561</span><span class=\"o\">]</span>: charon is already running <span class=\"o\">(</span>/var/run/charon.pid exists<span class=\"o\">)</span> -- skipping daemon start\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec<span class=\"o\">[</span><span class=\"m\">5561</span><span class=\"o\">]</span>: starter is already running <span class=\"o\">(</span>/var/run/starter.charon.pid exists<span class=\"o\">)</span> -- no fork <span class=\"k\">done</span>\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org ipsec<span class=\"o\">[</span><span class=\"m\">5579</span><span class=\"o\">]</span>: Stopping strongSwan IPsec...\nOct <span class=\"m\">01</span> <span class=\"m\">00</span>:47:26 us-gemfield-org systemd<span class=\"o\">[</span><span class=\"m\">1</span><span class=\"o\">]</span>: Started strongSwan IPsec services.\nroot@us-gemfield-org:~#</code></pre></div><p>start、stop、restart、status等常用systemctl操作就可以用上了。</p><p>另外，如果之后再更改了/etc/ipsec.conf或者是/etc/ipsec.secerts文件，可以使用</p><p>ipsec rereadall 命令来重新加载（可能也需要重启ipsec的daemon进程？），ipsec rereadall命令包含了诸多子步骤：</p><ul><li>ipsec rereadaacerts</li><li>ipsec rereadacerts</li><li>ipsec rereadcacerts</li><li>ipsec rereadcrls</li><li>ipsec rereadocspcerts</li><li>ipsec rereadsecrets</li><li>ipsec secrets</li></ul><p>具体可以man一下。</p><p><b>7，配置iptables</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#disable UFW if you&#39;ve set it up, as it can conflict with the rules we need to configure</span>\nroot@us-gemfield-org:~# ufw disable\n\n<span class=\"c1\">#Then remove any remaining firewall rules created by UFW</span>\nroot@us-gemfield-org:~# iptables -P INPUT ACCEPT\nroot@us-gemfield-org:~# iptables -P FORWARD ACCEPT\nroot@us-gemfield-org:~# iptables -F\nroot@us-gemfield-org:~# iptables -Z\n\n<span class=\"c1\">#To prevent us from being locked out of the SSH session, we&#39;ll accept connections that are already accepted.</span> \n<span class=\"c1\">#We&#39;ll also open port 22 (or whichever port you&#39;ve configured) for future SSH connections to the server.</span>\nroot@us-gemfield-org:~# iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\nroot@us-gemfield-org:~# iptables -A INPUT -p tcp --dport <span class=\"m\">22</span> -j ACCEPT\n\n<span class=\"c1\">#We&#39;ll also need to accept connections on the local loopback interface</span>\nroot@us-gemfield-org:~# iptables -A INPUT -i lo -j ACCEPT\n\n<span class=\"c1\">#Then we&#39;ll tell IPTables to accept IPSec connections</span>\n<span class=\"c1\">#ipsec 使用udp协议，端口500和4500</span>\nroot@us-gemfield-org:~# iptables -A INPUT -p udp --dport  <span class=\"m\">500</span> -j ACCEPT\nroot@us-gemfield-org:~# iptables -A INPUT -p udp --dport <span class=\"m\">4500</span> -j ACCEPT\n\n<span class=\"c1\">#we&#39;ll tell IPTables to forward ESP (Encapsulating Security Payload) traffic</span> \n<span class=\"c1\">#so the VPN clients will be able to connect. ESP provides additional security</span> \n<span class=\"c1\">#for our VPN packets as they&#39;re traversing untrusted networks</span>\nroot@us-gemfield-org:~# iptables -A FORWARD --match policy --pol ipsec --dir in  --proto esp -s <span class=\"m\">10</span>.10.10.0/24 -j ACCEPT\nroot@us-gemfield-org:~# iptables -A FORWARD --match policy --pol ipsec --dir out --proto esp -d <span class=\"m\">10</span>.10.10.0/24 -j ACCEPT\n\n<span class=\"c1\">#Our VPN server will act as a gateway between the VPN clients and the internet.</span> \n<span class=\"c1\">#Since the VPN server will only have a single public IP address, we will need</span> \n<span class=\"c1\">#to configure masquerading to allow the server to request data from the internet</span> \n<span class=\"c1\">#on behalf of the clients; this will allow traffic to flow from the VPN clients</span> \n<span class=\"c1\">#to the internet, and vice-versa.</span>\n<span class=\"c1\">#eth0是有公网IP的网卡</span>\nroot@us-gemfield-org:~# iptables -t nat -A POSTROUTING -s <span class=\"m\">10</span>.10.10.0/24 -o eth0 -m policy --pol ipsec --dir out -j ACCEPT\nroot@us-gemfield-org:~# iptables -t nat -A POSTROUTING -s <span class=\"m\">10</span>.10.10.0/24 -o eth0 -j MASQUERADE\n\n<span class=\"c1\">#其实，Gemfield在第一次配置完成后vpn虽然能连接上，但并不能访问网页 ，加了下面这条改动才好了</span>\n<span class=\"c1\">#也就是和上面一条规则相比，去掉了 -s 10.10.10.0/24，你可以先不加试试，也可能是我第一次敲错了字母</span>\n<span class=\"c1\">#root@us-gemfield-org:~# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span>\n\n<span class=\"c1\">#To prevent IP packet fragmentation on some clients, we&#39;ll tell IPTables to reduce the size of packets</span> \n<span class=\"c1\">#by adjusting the packets&#39; maximum segment size. This prevents issues with some VPN clients.</span>\nroot@us-gemfield-org:~# iptables -t mangle -A FORWARD --match policy --pol ipsec --dir in -s <span class=\"m\">10</span>.10.10.0/24 -o eth0 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss <span class=\"m\">1361</span>:1536 -j TCPMSS --set-mss <span class=\"m\">1360</span>\n\n<span class=\"c1\">#持久化存储，即使系统重启后规则依然生效</span>\nroot@us-gemfield-org:~# netfilter-persistent save\nroot@us-gemfield-org:~# netfilter-persistent reload\n</code></pre></div><p><b>8，启动系统的IP转发功能</b></p><p>编辑/etc/sysctl.conf文件，更改以下几项：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#1，First, we&#39;ll enable IPv4 packet forwarding.</span>\n<span class=\"c1\">#2，We&#39;ll disable Path MTU discovery to prevent packet fragmentation problems.</span>\n<span class=\"c1\">#3，We also won&#39;t accept ICMP redirects nor send ICMP redirects to prevent man-in-the-middle attacks.</span>\nroot@us-gemfield-org:~# cat /etc/sysctl.conf\n\n<span class=\"c1\"># Uncomment the next line to enable packet forwarding for IPv4</span>\nnet.ipv4.ip_forward<span class=\"o\">=</span><span class=\"m\">1</span>\n. . .\n<span class=\"c1\"># Do not accept ICMP redirects (prevent MITM attacks)</span>\nnet.ipv4.conf.all.accept_redirects <span class=\"o\">=</span> <span class=\"m\">0</span>\n<span class=\"c1\"># Do not send ICMP redirects (we are not a router)</span>\nnet.ipv4.conf.all.send_redirects <span class=\"o\">=</span> <span class=\"m\">0</span>\n. . .\nnet.ipv4.ip_no_pmtu_disc <span class=\"o\">=</span> <span class=\"m\">1</span></code></pre></div><p><b>9，重启Ubuntu</b></p><p><b>10，配置iOS VPN客户端</b></p><ul><li>到<b>Settings（设置）</b>,<b>General（通用)</b>, <b>VPN</b> 下点击 <b>Add VPN Configuration(添加VPN配置）</b>；</li><li>点击<b>Type（类型）</b> 选择 <b>IKEv2</b>；</li><li><b>Description</b> （描述）输入框输入描述信息，随便填；</li><li><b>Server</b> （服务器）和<b>Remote ID（远程 ID）</b>输入框, 输入domain名字，比如本文中的us.gemfield.org;</li><li><b>Local ID（本地 ID)</b>输入框不填写；</li><li>用户鉴定选择“用户名”，用户名和密码就和你在上面配置的一致；</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>庆祝</b></h2><p>查看IPsec连接的log就位于/var/log/auth.log文件里，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@us-gemfield-org:~# tail -f /var/log/auth.log\nOct  <span class=\"m\">1</span> <span class=\"m\">01</span>:17:12 iZrj9iu3l09ajt2mi6n7pbZ charon: <span class=\"m\">06</span><span class=\"o\">[</span>IKE<span class=\"o\">]</span> <span class=\"m\">111</span>.xxx.xxx.xxx is initiating an IKE_SA\nOct  <span class=\"m\">1</span> <span class=\"m\">01</span>:17:12 iZrj9iu3l09ajt2mi6n7pbZ charon: <span class=\"m\">15</span><span class=\"o\">[</span>IKE<span class=\"o\">]</span> <span class=\"m\">111</span>.xxx.xxx.xxx is initiating an IKE_SA\nOct  <span class=\"m\">1</span> <span class=\"m\">01</span>:17:13 iZrj9iu3l09ajt2mi6n7pbZ charon: <span class=\"m\">02</span><span class=\"o\">[</span>IKE<span class=\"o\">]</span> IKE_SA ikev2-vpn<span class=\"o\">[</span><span class=\"m\">3</span><span class=\"o\">]</span> established between <span class=\"m\">47</span>.88.23.197<span class=\"o\">[</span>us.gemfield.org<span class=\"o\">]</span>...111.xxx.xxx.xxx<span class=\"o\">[</span><span class=\"m\">192</span>.168.0.108<span class=\"o\">]</span>\nOct  <span class=\"m\">1</span> <span class=\"m\">01</span>:17:13 iZrj9iu3l09ajt2mi6n7pbZ charon: <span class=\"m\">02</span><span class=\"o\">[</span>IKE<span class=\"o\">]</span> CHILD_SA ikev2-vpn<span class=\"o\">{</span><span class=\"m\">1</span><span class=\"o\">}</span> established with SPIs xxxxxxxxxx and TS <span class=\"m\">0</span>.0.0.0/0 <span class=\"o\">===</span> <span class=\"m\">10</span>.10.10.1/32</code></pre></div><p><b>当你在iPhone上的VPN开关处轻轻一拨动，远在宪法领土外的<a href=\"https://link.zhihu.com/?target=http%3A//us.gemfield.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">us.gemfield.org</span><span class=\"invisible\"></span></a>上的log就显得很生动了，这是捍卫宪法第四十条款的号角。</b></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-76863c753acf9cfd48f3d838e466bfc4_b.jpg\" data-caption=\"\" data-rawwidth=\"551\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-76863c753acf9cfd48f3d838e466bfc4_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;551&#39; height=&#39;332&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-rawwidth=\"551\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"551\" data-original=\"https://pic1.zhimg.com/v2-76863c753acf9cfd48f3d838e466bfc4_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-76863c753acf9cfd48f3d838e466bfc4_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "VPN", 
                    "tagLink": "https://api.zhihu.com/topics/19551882"
                }, 
                {
                    "tag": "宪法", 
                    "tagLink": "https://api.zhihu.com/topics/19573635"
                }, 
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }
            ], 
            "comments": [
                {
                    "userName": "没气可乐", 
                    "userLink": "https://www.zhihu.com/people/72bc448255c0aa539d3e219b2ea1ed65", 
                    "content": "我想搞个VPN，但是没看懂～～～", 
                    "likes": 3, 
                    "childComments": []
                }, 
                {
                    "userName": "我要30斤不过分吧", 
                    "userLink": "https://www.zhihu.com/people/48cd25f156be288bb5bd9aacdd5c0aad", 
                    "content": "看不懂……", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31031613", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "Ubuntu16.04（及后续版本）上配置NFS分区", 
            "content": "<p><b>我们实验室的一个常见的场景就是把用于机器学习的机器的HOME挂载到VNC服务器的HOME上，好处自然不必多说了。下面Gemfield就来描述下如何配置NFS的服务端和客户端。</b></p><h2><b>1，在NFS Server端安装nfs-kernel-server</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt install nfs-kernel-server\n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> password <span class=\"k\">for</span> gemfield: \nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following packages were automatically installed and are no longer required:\n  libcapture-tiny-perl libconfig-simple-perl libdbd-pg-perl libdbd-sqlite3-perl libdbi-perl libfile-which-perl libnx-x11-6 libnx-xcomposite1 libnx-xdamage1 libnx-xdmcp6 libnx-xext6\n  libnx-xfixes3 libnx-xinerama1 libnx-xpm4 libnx-xrandr2 libnx-xrender1 libnx-xtst6 libpq5 libxcomp3 libxcompext3 libxcompshad3 linux-headers-4.10.0-19 linux-headers-4.10.0-19-generic\n  linux-image-4.10.0-19-generic linux-image-extra-4.10.0-19-generic nx-x11-common nxagent pwgen\nUse <span class=\"s1\">&#39;sudo apt autoremove&#39;</span> to remove them.\nThe following additional packages will be installed:\n  keyutils libnfsidmap2 libtirpc1 nfs-common rpcbind\nSuggested packages:\n  open-iscsi watchdog\nThe following NEW packages will be installed:\n  keyutils libnfsidmap2 libtirpc1 nfs-common nfs-kernel-server rpcbind\n<span class=\"m\">0</span> upgraded, <span class=\"m\">6</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">21</span> not upgraded.\nNeed to get <span class=\"m\">466</span> kB of archives.\nAfter this operation, <span class=\"m\">1</span>,820 kB of additional disk space will be used.\nDo you want to <span class=\"k\">continue</span>? <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\nGet:1 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 keyutils amd64 <span class=\"m\">1</span>.5.9-9ubuntu1 <span class=\"o\">[</span><span class=\"m\">47</span>.3 kB<span class=\"o\">]</span>                                                                                           \nGet:2 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 libnfsidmap2 amd64 <span class=\"m\">0</span>.25-5.1 <span class=\"o\">[</span><span class=\"m\">27</span>.2 kB<span class=\"o\">]</span>                                                                                             \nGet:3 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 libtirpc1 amd64 <span class=\"m\">0</span>.2.5-1.1 <span class=\"o\">[</span><span class=\"m\">75</span>.4 kB<span class=\"o\">]</span>                                                                                               \nGet:4 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 rpcbind amd64 <span class=\"m\">0</span>.2.3-0.5 <span class=\"o\">[</span><span class=\"m\">40</span>.7 kB<span class=\"o\">]</span>                                                                                                 \nGet:5 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 nfs-common amd64 <span class=\"m\">1</span>:1.2.8-9.2ubuntu2 <span class=\"o\">[</span><span class=\"m\">187</span> kB<span class=\"o\">]</span>                                                                                      \nGet:6 http://cn.archive.ubuntu.com/ubuntu zesty/main amd64 nfs-kernel-server amd64 <span class=\"m\">1</span>:1.2.8-9.2ubuntu2 <span class=\"o\">[</span><span class=\"m\">88</span>.2 kB<span class=\"o\">]</span>\nFetched <span class=\"m\">466</span> kB in 0s <span class=\"o\">(</span><span class=\"m\">1</span>,040 kB/s<span class=\"o\">)</span>         \nSelecting previously unselected package keyutils.\n<span class=\"o\">(</span>Reading database ... <span class=\"m\">250704</span> files and directories currently installed.<span class=\"o\">)</span>\nPreparing to unpack .../0-keyutils_1.5.9-9ubuntu1_amd64.deb ...\nUnpacking keyutils <span class=\"o\">(</span><span class=\"m\">1</span>.5.9-9ubuntu1<span class=\"o\">)</span> ...\nSelecting previously unselected package libnfsidmap2:amd64.\nPreparing to unpack .../1-libnfsidmap2_0.25-5.1_amd64.deb ...\nUnpacking libnfsidmap2:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.25-5.1<span class=\"o\">)</span> ...\nSelecting previously unselected package libtirpc1:amd64.\nPreparing to unpack .../2-libtirpc1_0.2.5-1.1_amd64.deb ...\nUnpacking libtirpc1:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.2.5-1.1<span class=\"o\">)</span> ...\nSelecting previously unselected package rpcbind.\nPreparing to unpack .../3-rpcbind_0.2.3-0.5_amd64.deb ...\nUnpacking rpcbind <span class=\"o\">(</span><span class=\"m\">0</span>.2.3-0.5<span class=\"o\">)</span> ...\nSelecting previously unselected package nfs-common.\nPreparing to unpack .../4-nfs-common_1%3a1.2.8-9.2ubuntu2_amd64.deb ...\nUnpacking nfs-common <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9.2ubuntu2<span class=\"o\">)</span> ...\nSelecting previously unselected package nfs-kernel-server.\nPreparing to unpack .../5-nfs-kernel-server_1%3a1.2.8-9.2ubuntu2_amd64.deb ...\nUnpacking nfs-kernel-server <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9.2ubuntu2<span class=\"o\">)</span> ...\nSetting up libnfsidmap2:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.25-5.1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> ureadahead <span class=\"o\">(</span><span class=\"m\">0</span>.100.0-19<span class=\"o\">)</span> ...\nSetting up keyutils <span class=\"o\">(</span><span class=\"m\">1</span>.5.9-9ubuntu1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.24-9ubuntu2.2<span class=\"o\">)</span> ...\nSetting up libtirpc1:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.2.5-1.1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> systemd <span class=\"o\">(</span><span class=\"m\">232</span>-21ubuntu7.1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> man-db <span class=\"o\">(</span><span class=\"m\">2</span>.7.6.1-2<span class=\"o\">)</span> ...\nSetting up rpcbind <span class=\"o\">(</span><span class=\"m\">0</span>.2.3-0.5<span class=\"o\">)</span> ...\nCreated symlink /etc/systemd/system/multi-user.target.wants/rpcbind.service → /lib/systemd/system/rpcbind.service.\nCreated symlink /etc/systemd/system/sockets.target.wants/rpcbind.socket → /lib/systemd/system/rpcbind.socket.\nSetting up nfs-common <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9.2ubuntu2<span class=\"o\">)</span> ...\n\nCreating config file /etc/idmapd.conf with new version\nAdding system user <span class=\"sb\">`</span>statd<span class=\"s1\">&#39; (UID 121) ...\n</span><span class=\"s1\">Adding new user `statd&#39;</span> <span class=\"o\">(</span>UID <span class=\"m\">121</span><span class=\"o\">)</span> with group <span class=\"sb\">`</span>nogroup<span class=\"s1\">&#39; ...\n</span><span class=\"s1\">Not creating home directory `/var/lib/nfs&#39;</span>.\nCreated symlink /etc/systemd/system/multi-user.target.wants/nfs-client.target → /lib/systemd/system/nfs-client.target.\nCreated symlink /etc/systemd/system/remote-fs.target.wants/nfs-client.target → /lib/systemd/system/nfs-client.target.\nnfs-utils.service is a disabled or a static unit, not starting it.\nSetting up nfs-kernel-server <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9.2ubuntu2<span class=\"o\">)</span> ...\nCreated symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /lib/systemd/system/nfs-server.service.\n\nCreating config file /etc/exports with new version\n\nCreating config file /etc/default/nfs-kernel-server with new version\nProcessing triggers <span class=\"k\">for</span> libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.24-9ubuntu2.2<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> systemd <span class=\"o\">(</span><span class=\"m\">232</span>-21ubuntu7.1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> ureadahead <span class=\"o\">(</span><span class=\"m\">0</span>.100.0-19<span class=\"o\">)</span> ...</code></pre></div><h2><b>2, 在NFS客户端安装nfs-common</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfield-ThinkPad-Edge:~$ sudo apt install nfs-common\n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> password <span class=\"k\">for</span> gemfield: \n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n将会同时安装下列软件：\n  keyutils libevent-2.0-5 libnfsidmap2 libtirpc1 rpcbind\n建议安装：\n  open-iscsi watchdog\n下列【新】软件包将被安装：\n  keyutils libevent-2.0-5 libnfsidmap2 libtirpc1 nfs-common rpcbind\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">6</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">0</span> 个软件包未被升级。\n需要下载 <span class=\"m\">493</span> kB 的归档。\n解压缩后会消耗 <span class=\"m\">1</span>,693 kB 的额外空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://cn.archive.ubuntu.com/ubuntu xenial/main amd64 libnfsidmap2 amd64 <span class=\"m\">0</span>.25-5 <span class=\"o\">[</span><span class=\"m\">32</span>.2 kB<span class=\"o\">]</span>\n获取:2 http://cn.archive.ubuntu.com/ubuntu xenial/main amd64 libtirpc1 amd64 <span class=\"m\">0</span>.2.5-1 <span class=\"o\">[</span><span class=\"m\">75</span>.6 kB<span class=\"o\">]</span>\n获取:3 http://cn.archive.ubuntu.com/ubuntu xenial/main amd64 keyutils amd64 <span class=\"m\">1</span>.5.9-8ubuntu1 <span class=\"o\">[</span><span class=\"m\">47</span>.1 kB<span class=\"o\">]</span>\n获取:4 http://cn.archive.ubuntu.com/ubuntu xenial-updates/main amd64 libevent-2.0-5 amd64 <span class=\"m\">2</span>.0.21-stable-2ubuntu0.16.04.1 <span class=\"o\">[</span><span class=\"m\">114</span> kB<span class=\"o\">]</span>\n获取:5 http://cn.archive.ubuntu.com/ubuntu xenial/main amd64 rpcbind amd64 <span class=\"m\">0</span>.2.3-0.2 <span class=\"o\">[</span><span class=\"m\">40</span>.3 kB<span class=\"o\">]</span>\n获取:6 http://cn.archive.ubuntu.com/ubuntu xenial-updates/main amd64 nfs-common amd64 <span class=\"m\">1</span>:1.2.8-9ubuntu12.1 <span class=\"o\">[</span><span class=\"m\">184</span> kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">493</span> kB，耗时 0秒 <span class=\"o\">(</span><span class=\"m\">1</span>,218 kB/s<span class=\"o\">)</span>\n正在选中未选择的软件包 libnfsidmap2:amd64。\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">205322</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../libnfsidmap2_0.25-5_amd64.deb  ...\n正在解包 libnfsidmap2:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.25-5<span class=\"o\">)</span> ...\n正在选中未选择的软件包 libtirpc1:amd64。\n正准备解包 .../libtirpc1_0.2.5-1_amd64.deb  ...\n正在解包 libtirpc1:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.2.5-1<span class=\"o\">)</span> ...\n正在选中未选择的软件包 keyutils。\n正准备解包 .../keyutils_1.5.9-8ubuntu1_amd64.deb  ...\n正在解包 keyutils <span class=\"o\">(</span><span class=\"m\">1</span>.5.9-8ubuntu1<span class=\"o\">)</span> ...\n正在选中未选择的软件包 libevent-2.0-5:amd64。\n正准备解包 .../libevent-2.0-5_2.0.21-stable-2ubuntu0.16.04.1_amd64.deb  ...\n正在解包 libevent-2.0-5:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>.0.21-stable-2ubuntu0.16.04.1<span class=\"o\">)</span> ...\n正在选中未选择的软件包 rpcbind。\n正准备解包 .../rpcbind_0.2.3-0.2_amd64.deb  ...\n正在解包 rpcbind <span class=\"o\">(</span><span class=\"m\">0</span>.2.3-0.2<span class=\"o\">)</span> ...\n正在选中未选择的软件包 nfs-common。\n正准备解包 .../nfs-common_1%3a1.2.8-9ubuntu12.1_amd64.deb  ...\n正在解包 nfs-common <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9ubuntu12.1<span class=\"o\">)</span> ...\n正在处理用于 man-db <span class=\"o\">(</span><span class=\"m\">2</span>.7.5-1<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 systemd <span class=\"o\">(</span><span class=\"m\">229</span>-4ubuntu21<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 ureadahead <span class=\"o\">(</span><span class=\"m\">0</span>.100.0-19<span class=\"o\">)</span> 的触发器 ...\n正在设置 libnfsidmap2:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.25-5<span class=\"o\">)</span> ...\n正在设置 libtirpc1:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.2.5-1<span class=\"o\">)</span> ...\n正在设置 keyutils <span class=\"o\">(</span><span class=\"m\">1</span>.5.9-8ubuntu1<span class=\"o\">)</span> ...\n正在设置 libevent-2.0-5:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>.0.21-stable-2ubuntu0.16.04.1<span class=\"o\">)</span> ...\n正在设置 rpcbind <span class=\"o\">(</span><span class=\"m\">0</span>.2.3-0.2<span class=\"o\">)</span> ...\n正在设置 nfs-common <span class=\"o\">(</span><span class=\"m\">1</span>:1.2.8-9ubuntu12.1<span class=\"o\">)</span> ...\n\nCreating config file /etc/idmapd.conf with new version\n\nCreating config file /etc/default/nfs-common with new version\nAdding system user <span class=\"sb\">`</span>statd<span class=\"s1\">&#39; (UID 122) ...\n</span><span class=\"s1\">Adding new user `statd&#39;</span> <span class=\"o\">(</span>UID <span class=\"m\">122</span><span class=\"o\">)</span> with group <span class=\"sb\">`</span>nogroup<span class=\"s1\">&#39; ...\n</span><span class=\"s1\">Not creating home directory `/var/lib/nfs&#39;</span>.\nnfs-utils.service is a disabled or a static unit, not starting it.\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 systemd <span class=\"o\">(</span><span class=\"m\">229</span>-4ubuntu21<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 ureadahead <span class=\"o\">(</span><span class=\"m\">0</span>.100.0-19<span class=\"o\">)</span> 的触发器 ...\ngemfield@gemfield-ThinkPad-Edge:~$</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>3, 在NFS Server上配置要export的目录</b></h2><p>格式要求为：<b>共享目录 client(选项,...,选项)</b></p><p>Gemfield按照这个格式添加了如下一行（可以看到，客户端用*表示，可以允许任意客户端挂载。而no_root_squash表示登入 NFS 主机使用分享目录的使用者，如果是 root 的话，那么对于这个分享的目录来说，他就具有 root 的权限！这样有安全隐患，可以使用root_squash代替。Gemfield这里为了某个目的就先不安全了......）：</p><p><b>/home       *(rw,sync,no_root_squash,no_subtree_check)</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ cat /etc/exports\n<span class=\"c1\"># /etc/exports: the access control list for filesystems which may be exported</span>\n<span class=\"c1\">#               to NFS clients.  See exports(5).</span>\n#\n<span class=\"c1\"># Example for NFSv2 and NFSv3:</span>\n<span class=\"c1\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span>\n#\n<span class=\"c1\"># Example for NFSv4:</span>\n<span class=\"c1\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span>\n<span class=\"c1\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span>\n#\n/home       *<span class=\"o\">(</span>rw,sync,no_root_squash,no_subtree_check<span class=\"o\">)</span>\ngemfield@ai:~$</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>4，重启NFS Server服务</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo systemctl restart nfs-kernel-server</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>5，在NFS Client机器上挂载</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfield-ThinkPad-Edge:/home$ sudo mount ai.gemfield.org:/home /home                      \n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> password <span class=\"k\">for</span> gemfield: \ngemfield@gemfield-ThinkPad-Edge:/home$</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>6，设置开机自动挂载</b></h2><p>在/etc/fstab文件中添加如下一行挂载记录：</p><p><b>ai.gemfield.org:/home   /home  nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfield-ThinkPad-Edge:~$ cat /etc/fstab \n<span class=\"c1\"># /etc/fstab: static file system information.</span>\n#\n<span class=\"c1\"># Use &#39;blkid&#39; to print the universally unique identifier for a</span>\n<span class=\"c1\"># device; this may be used with UUID= as a more robust way to name devices</span>\n<span class=\"c1\"># that works even if disks are added and removed. See fstab(5).</span>\n#\n<span class=\"c1\"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span>\n<span class=\"c1\"># / was on /dev/sda1 during installation</span>\n<span class=\"nv\">UUID</span><span class=\"o\">=</span>0fb0bb42-b7d0-4d7b-a200-37d18da2f172 /               ext4    <span class=\"nv\">errors</span><span class=\"o\">=</span>remount-ro <span class=\"m\">0</span>       <span class=\"m\">1</span>\n<span class=\"c1\"># swap was on /dev/sda5 during installation</span>\n<span class=\"nv\">UUID</span><span class=\"o\">=</span>e14f4600-7216-429b-8583-b63ead400b3a none            swap    sw              <span class=\"m\">0</span>       <span class=\"m\">0</span>\nai.gemfield.org:/home       /home      nfs auto,nofail,noatime,nolock,intr,tcp,actimeo<span class=\"o\">=</span><span class=\"m\">1800</span> <span class=\"m\">0</span> <span class=\"m\">0</span>\ngemfield@gemfield-ThinkPad-Edge:~$</code></pre></div><h2><b>7，遗漏了什么？</b></h2><p>看起来将NFS Server的Home目录挂载到客户端机器上就这么简单就完成了，不过，<b>你必须要确保两边机器上相同的用户必须拥有相同的uid和gid</b>，否则权限问题会导致前面想要表达的东西化为泡影。</p><h2><b>8，锦上添花</b></h2><p>在/etc/bash.bashrc文件的最后追加下面两行配置，这样就可以使用F1快捷键登陆ai机器了。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">echo</span> <span class=\"s2\">&#34;Press F1 to login ai.gemfield.org...&#34;</span>\n<span class=\"nb\">bind</span> <span class=\"s1\">&#39;&#34;\\eOP&#34;:&#34;ssh -oServerAliveInterval=60 -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null ai.gemfield.org\\n&#34;&#39;</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }, 
                {
                    "tag": "NFS", 
                    "tagLink": "https://api.zhihu.com/topics/19630703"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31074414", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "软件部署的环境问题集锦", 
            "content": "<h2><b>1，Error loading MySQLdb module: No module named &#39;MySQLdb&#39;</b></h2><p>在python3中连接mysql数据库的时候，报这个错误。</p><p><b>解决方案：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo apt-get install python3-dev libmysqlclient-dev\nsudo pip3 install mysqlclient</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>2，Django程序出现 ValueError: Incorrect timezone setting: Asia/Shanghai</b></h2><p>在Ubuntu系统中安装时区支持；</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"nb\">echo</span> <span class=\"s2\">&#34;Asia/Shanghai&#34;</span> &gt; /etc/timezone <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>apt install -y tzdata <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>rm -f /etc/localtime <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>dpkg-reconfigure -f noninteractive tzdata</code></pre></div><p>再在Django的settings.py中配置</p><div class=\"highlight\"><pre><code class=\"language-text\">TIME_ZONE = &#39;Asia/Shanghai&#39;</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>3，Import error: cannot import name &#39;opentype&#39;</b></h2><p>解决方案：</p><p><code>pip install --upgrade google-auth-oauthlib</code> </p><p>（不定期更新）</p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "解决方案", 
                    "tagLink": "https://api.zhihu.com/topics/19605531"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31078295", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 3, 
            "title": "Docker容器中添加中文字符的支持", 
            "content": "<h2><b>背景</b></h2><p>最近在新制作的Docker容器中运行python3 web服务(Django框架)的时候，如果要print的东西含有中文字符的时候，会报如下错误：</p><p>UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position xx-xx: ordinal not in range(128)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果不含中文字符，那么代码会正常运行。很明显，这是缺少了中文字符支持。在docker环境中使用python3打印中文字符的时候报这个错误。这是因为当前系统（或者docker容器环境）没有安装中文字符支持。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>解决方案</b></h2><p><b>1 使用locale -a命令先查看下当前系统（当前容器）支持的字符集</b></p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# locale -a\nlocale: Cannot set LC_CTYPE to default locale: No such file or directory\nlocale: Cannot set LC_MESSAGES to default locale: No such file or directory\nlocale: Cannot set LC_COLLATE to default locale: No such file or directory\nC\nC.UTF-8\nPOSIX</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2 安装locales 包</b></p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# apt-get update\nroot@gemfield:~# apt-get install -y locales\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nThe following NEW packages will be installed:\n  locales\n0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded.\nNeed to get 3220 kB of archives.\nAfter this operation, 14.0 MB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 locales all 2.23-0ubuntu9 [3220 kB]\nFetched 3220 kB in 3s (956 kB/s)   \nperl: warning: Setting locale failed.\nperl: warning: Please check that your locale settings:\n        LANGUAGE = (unset),\n        LC_ALL = (unset),\n        LANG = &#34;zh_CN.UTF-8&#34;\n    are supported and installed on your system.\nperl: warning: Falling back to the standard locale (&#34;C&#34;).\ndebconf: delaying package configuration, since apt-utils is not installed\nSelecting previously unselected package locales.\n(Reading database ... 14628 files and directories currently installed.)\nPreparing to unpack .../locales_2.23-0ubuntu9_all.deb ...\nUnpacking locales (2.23-0ubuntu9) ...\nSetting up locales (2.23-0ubuntu9) ...\ndebconf: unable to initialize frontend: Dialog\ndebconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76.)\ndebconf: falling back to frontend: Readline\nGenerating locales (this might take a while)...\nGeneration complete.</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3 使用locale-gen命令生成中文本地支持</b></p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# locale-gen zh_CN\nGenerating locales (this might take a while)...\n  zh_CN.GB2312... done\nGeneration complete.\nroot@gemfield:~# locale-gen zh_CN.utf8\nGenerating locales (this might take a while)...\n  zh_CN.UTF-8... done\nGeneration complete.</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4 现在来看看，中文支持确实已经添加</b></p><div class=\"highlight\"><pre><code class=\"language-text\">#看看当前启用的本地支持\nroot@gemfield:~# locale -a\nC\nC.UTF-8\nPOSIX\nzh_CN\nzh_CN.gb2312\nzh_CN.utf8</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5  设置当前默认字符集</b></p><p>export LANG=zh_CN.UTF-8</p><p>export LC_ALL=zh_CN.UTF-8</p><p>export LANGUAGE=zh_CN.UTF-8</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@gemfield:~# <span class=\"nb\">export</span> <span class=\"nv\">LANG</span><span class=\"o\">=</span>zh_CN.UTF-8\nroot@gemfield:~# <span class=\"nb\">export</span> <span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>zh_CN.UTF-8\nroot@gemfield:~# <span class=\"nb\">export</span> <span class=\"nv\">LANGUAGE</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"c1\">#现在来看看当前的字符集</span>\nroot@gemfield:~# locale\n<span class=\"nv\">LANG</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"nv\">LANGUAGE</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"nv\">LC_CTYPE</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_NUMERIC</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_TIME</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_COLLATE</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_MONETARY</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_MESSAGES</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_PAPER</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_ADDRESS</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_TELEPHONE</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_MEASUREMENT</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_IDENTIFICATION</span><span class=\"o\">=</span><span class=\"s2\">&#34;zh_CN.UTF-8&#34;</span>\n<span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>zh_CN.UTF-8</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>持久化</b></h2><p>很明显，上面的设置只是更改了当前bash会话中的默认字符集，如何改变Docker容器启动后默认的字符集呢？</p><p>那要看是在哪个层面上了：容器层面还是镜像层面？</p><p><b>容器(container)层面</b>，Gemfield使用 update-locale命令（这个命令会更新/etc/default/locale文件）来全局设置系统的默认字符集，也就是只要这个容器存在（不管是stop再start还是restart），这个设置都会在容器层面生效的：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@gemfield:/# update-locale <span class=\"nv\">LANG</span><span class=\"o\">=</span>zh_CN.UTF-8 <span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>zh_CN.UTF-8 <span class=\"nv\">LANGUAGE</span><span class=\"o\">=</span>zh_CN.UTF-8\nroot@gemfield:/# cat /etc/default/locale\n<span class=\"c1\">#  File generated by update-locale</span>\n<span class=\"nv\">LANGUAGE</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"nv\">LANG</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"nv\">LC_ALL</span><span class=\"o\">=</span>zh_CN.UTF-8</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>但是，如果从image重新启动一个新的容器，那肯定是不会有这个设置的。因为image并没有这样的设置，所以在<b>镜像(Image)层面</b>，正确的做法是在Dockerfile中来进行设置：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># Set the locale</span>\nRUN locale-gen zh_CN.UTF-8  \nENV LANG zh_CN.UTF-8\nENV LANGUAGE zh_CN.UTF-8\nENV LC_ALL zh_CN.UTF-8</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>庆祝</b></h2><p>事实上Gemfield并没有进行Docker容器级别的全局设置，而只是通过supervisor的配置文件将LANG环境变量传递给了python程序。日志里的中文字符已经在哗哗流淌了。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#/etc/supervisor/conf.d/supervisor.conf</span>\n<span class=\"o\">[</span>program:django<span class=\"o\">]</span>\n<span class=\"nv\">environment</span><span class=\"o\">=</span><span class=\"nv\">LANG</span><span class=\"o\">=</span>zh_CN.UTF-8\n<span class=\"nv\">command</span><span class=\"o\">=</span>uwsgi --chdir /home/gemfield/celeryproducer/ --http-workers <span class=\"m\">10</span> --lazy --enable-threads --socket <span class=\"m\">127</span>.0.0.1:4242 --logto /home/gemfield/celeryproducer/logs/uwsgi.log --module celeryproducer.wsgi</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Unicode（统一码）", 
                    "tagLink": "https://api.zhihu.com/topics/19555847"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "sloane", 
                    "userLink": "https://www.zhihu.com/people/0e85cd0a86c524986a59ea5593d40fd9", 
                    "content": "<p>为什么3执行并且成功了，然后再执行 locale -a 还是出现1的信息</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>你把完整的log贴上</p>", 
                            "likes": 0, 
                            "replyToAuthor": "sloane"
                        }
                    ]
                }, 
                {
                    "userName": "sloane", 
                    "userLink": "https://www.zhihu.com/people/0e85cd0a86c524986a59ea5593d40fd9", 
                    "content": "<p>4 步揍运行之前需要重启服务么？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>不需要</p>", 
                            "likes": 0, 
                            "replyToAuthor": "sloane"
                        }
                    ]
                }, 
                {
                    "userName": "李通", 
                    "userLink": "https://www.zhihu.com/people/34dde35b534c56fa560a4ce259c52c8e", 
                    "content": "<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b\" data-hash=\"f8dedf1a968ebab2c312fd734ba88e3b\" data-hovercard=\"p$b$f8dedf1a968ebab2c312fd734ba88e3b\">@Gemfield</a> 我使用的镜像是debian:jessie 不需要安装中文语言支持包?</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "李通", 
                    "userLink": "https://www.zhihu.com/people/34dde35b534c56fa560a4ce259c52c8e", 
                    "content": "<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b\" data-hash=\"f8dedf1a968ebab2c312fd734ba88e3b\" data-hovercard=\"p$b$f8dedf1a968ebab2c312fd734ba88e3b\">@Gemfield</a> 有一个容器是 deiban:jessie,如何给这个容器添加中文支持</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "走心", 
                    "userLink": "https://www.zhihu.com/people/ca9e5f6c3ac2109bc45c9c9d6295afd6", 
                    "content": "<p>perl: warning: Setting locale failed.<br>perl: warning: Please check that your locale settings:<br>\tLANGUAGE = (unset),<br>\tLC_ALL = (unset),<br>\tLANG = \"en_US.UTF-8\"<br>    are supported and installed on your system.<br>perl: warning: Falling back to the standard locale (\"C\").<br>*** update-locale: Error: invalid locale settings:  LC_ADDRESS=\"zh_CN.UTF-8\" LC_TELEPHONE=\"zh_CN.UTF-8\" LC_MONETARY=\"zh_CN.UTF-8\" LC_MEASUREMENT=\"zh_CN.UTF-8\" LC_NAME=\"zh_CN.UTF-8\" LANG=zh_CN.UTF-8 LC_NUMERIC=\"zh_CN.UTF-8\" LC_IDENTIFICATION=\"zh_CN.UTF-8\" LC_PAPER=\"zh_CN.UTF-8\" LC_TIME=\"zh<i>CN.UTF-8\"<br>这是跑了update-locale的结果 已经安装了zh</i>_CN</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31190053", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 1, 
            "title": "Django中使用Celery出现的问题集锦", 
            "content": "<p>首先要说明的一点是，Gemfield是在Django中使用的Celery send_task() API，但出现的问题并非是由Django导致，而是纯粹使用Celery出现的问题。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>1，当在Celery中配置redis为result backend时，producer一方使用多线程时报错：Timeout reading from socket</b></p><div class=\"highlight\"><pre><code class=\"language-text\">Unhandled exception in thread started by &lt;function execute_task at 0x7f8e0d8a3f28&gt;\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/connection.py&#34;, line 174, in _read_from_socket\n    data = recv(self._sock, socket_read_size)\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/_compat.py&#34;, line 79, in recv\n    return sock.recv(*args, **kwargs)\nsocket.timeout: timed out\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &#34;client3.py&#34;, line 18, in execute_task\n    returnValue = my_task.get(timeout=3600 * 2)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/result.py&#34;, line 194, in get\n    on_message=on_message,\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/async.py&#34;, line 189, in wait_for_pending\n    for _ in self._wait_for_pending(result, **kwargs):\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/async.py&#34;, line 256, in _wait_for_pending\n    on_interval=on_interval):\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/async.py&#34;, line 57, in drain_events_until\n    yield self.wait_for(p, wait, timeout=1)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/async.py&#34;, line 66, in wait_for\n    wait(timeout=timeout)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/redis.py&#34;, line 69, in drain_events\n    m = self._pubsub.get_message(timeout=timeout)\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/client.py&#34;, line 2513, in get_message\n    response = self.parse_response(block=False, timeout=timeout)\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/client.py&#34;, line 2430, in parse_response\n    return self._execute(connection, connection.read_response)\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/client.py&#34;, line 2408, in _execute\n    return command(*args)\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/connection.py&#34;, line 624, in read_response\n    response = self._parser.read_response()\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/connection.py&#34;, line 284, in read_response\n    response = self._buffer.readline()\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/connection.py&#34;, line 216, in readline\n    self._read_from_socket()\n  File &#34;/usr/local/lib/python3.6/dist-packages/redis/connection.py&#34;, line 187, in _read_from_socket\n    raise TimeoutError(&#34;Timeout reading from socket&#34;)\nredis.exceptions.TimeoutError: Timeout reading from socket</code></pre></div><p>Gemfield估计是redis多线程share了一个socket，不管了......</p><p><b>解决方案：把backend从数据库类型切换为rpc类型：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">CELERY_RESULT_BACKEND = &#39;redis://gemfield.org:6379/&#39;</code></pre></div><p>切换为</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">CELERY_RESULT_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;amqp://gemfield:123456@gemfield.org//&#39;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，当在Celery中配置rpc为result backend时，producer一方使用多线程去get()时,得不到返回的值，并且即使在consumer（celery worker)已经返回后调用仍被阻塞（实际上consumer一端早已经返回）。</b></p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">my_task</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResult</span><span class=\"p\">(</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n<span class=\"c1\">#下面的代码被阻塞，即使在consumer(celery worker)的task已经返回</span>\n<span class=\"n\">returnValue</span> <span class=\"o\">=</span> <span class=\"n\">my_task</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span></code></pre></div><p>解决方案：不知道，要么不要用rpc，要么不要用多线程。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，当在Celery中配置rabbitmq为result backend时(</b>CELERY_RESULT_BACKEND = &#39;amqp://gemfield:<a href=\"https://link.zhihu.com/?target=http%3A//passwd\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">passwd</span><span class=\"invisible\"></span></a>@gemfield.org//&#39;)<b>，producer一方使用send_task发送任务，然后使用多线程（另起一个线程）去get()时,会阻塞producer调用celery的send_task，直到consumer消费完毕一个，send_task才能往rabbitmq里再放入一个新的task。</b></p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">send_task</span><span class=\"p\">(</span><span class=\"s1\">&#39;Test3&#39;</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{},</span> <span class=\"n\">task_id</span> <span class=\"o\">=</span> <span class=\"n\">the_task_id</span><span class=\"p\">)</span>\n<span class=\"c1\">#we get the task return value in another thread</span>\n<span class=\"n\">_thread</span><span class=\"o\">.</span><span class=\"n\">start_new_thread</span><span class=\"p\">(</span><span class=\"n\">get_task</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">the_task_id</span><span class=\"p\">,</span> <span class=\"p\">)</span> <span class=\"p\">)</span></code></pre></div><p>解决方案：不知道，不要在新的线程中去调用get()去得到celery worker 中task的返回。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4，当celery broker配置域名为地址时，确保DNS服务是可靠的，否则：</b></p><p><b>consumer: Cannot connect to amqp://gemfield:**@<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org%3A5672//%3A\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org:5672//:</span><span class=\"invisible\"></span></a> [Errno -3] Temporary failure in name resolution. </b> </p><p><b>Trying again in 2.00 seconds...</b></p><div class=\"highlight\"><pre><code class=\"language-text\">[2017-11-19 10:16:35,314: INFO/ForkPoolWorker-1] Task Test3[process_017_3202] succeeded in 0.04593399597797543s: 2027\n[2017-11-19 10:16:35,317: WARNING/ForkPoolWorker-1] start Test3\n[2017-11-19 10:16:35,317: WARNING/ForkPoolWorker-1] preparing sleep 2202\n[2017-11-19 10:16:35,318: WARNING/ForkPoolWorker-1] end Test3\n[2017-11-19 10:16:35,347: INFO/ForkPoolWorker-1] Task Test3[process_017_3203] succeeded in 0.03037012499407865s: 2202\n[2017-11-19 10:24:26,021: WARNING/MainProcess] consumer: Connection to broker lost. Trying to re-establish the connection...\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/consumer.py&#34;, line 320, in start\n    blueprint.start(self)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/bootsteps.py&#34;, line 119, in start\n    step.start(parent)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/consumer.py&#34;, line 596, in start\n    c.loop(*c.loop_args())\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/loops.py&#34;, line 88, in asynloop\n    next(loop)\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/async/hub.py&#34;, line 354, in create_loop\n    cb(*cbargs)\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/transport/base.py&#34;, line 236, in on_readable\n    reader(loop)\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/transport/base.py&#34;, line 218, in _read\n    drain_events(timeout=0)\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/connection.py&#34;, line 471, in drain_events\n    while not self.blocking_read(timeout):\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/connection.py&#34;, line 476, in blocking_read\n    frame = self.transport.read_frame()\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/transport.py&#34;, line 226, in read_frame\n    frame_header = read(7, True)\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/transport.py&#34;, line 401, in _read\n    s = recv(n - len(rbuf))\nTimeoutError: [Errno 110] Connection timed out\n[2017-11-19 10:24:26,032: ERROR/MainProcess] consumer: Cannot connect to amqp://gemfield:**@gemfield.org:5672//: [Errno -3] Temporary failure in name resolution.\nTrying again in 2.00 seconds...\n\n[2017-11-19 10:24:28,042: ERROR/MainProcess] consumer: Cannot connect to amqp://gemfield:**@gemfield.org:5672//: [Errno -3] Temporary failure in name resolution.\nTrying again in 4.00 seconds...\n\n[2017-11-19 10:24:32,056: ERROR/MainProcess] consumer: Cannot connect to amqp://gemfield:**@gemfield.org:5672//: [Errno -3] Temporary failure in name resolution.\nTrying again in 6.00 seconds...\n\n[2017-11-19 10:42:02,808: ERROR/MainProcess] consumer: Cannot connect to amqp://gemfield:**@gemfield.org:5672//: [Errno -3] Temporary failure in name resolution.\nTrying again in 8.00 seconds...\n\n[2017-11-19 10:42:10,895: INFO/MainProcess] Connected to amqp://gemfield:**@gemfield.org:5672//\n[2017-11-19 10:42:10,979: INFO/MainProcess] mingle: searching for neighbors\n[2017-11-19 10:42:11,023: WARNING/MainProcess] consumer: Connection to broker lost. Trying to re-establish the connection...\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/consumer.py&#34;, line 320, in start\n    blueprint.start(self)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/bootsteps.py&#34;, line 119, in start\n    step.start(parent)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/mingle.py&#34;, line 38, in start\n    self.sync(c)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/mingle.py&#34;, line 42, in sync\n    replies = self.send_hello(c)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/worker/consumer/mingle.py&#34;, line 55, in send_hello\n    replies = inspect.hello(c.hostname, our_revoked._data) or {}\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/app/control.py&#34;, line 129, in hello\n    return self._request(&#39;hello&#39;, from_node=from_node, revoked=revoked)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/app/control.py&#34;, line 81, in _request\n    timeout=self.timeout, reply=True,\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/app/control.py&#34;, line 436, in broadcast\n    limit, callback, channel=channel,\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/pidbox.py&#34;, line 315, in _broadcast\n    serializer=serializer)\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/pidbox.py&#34;, line 290, in _publish\n    serializer=serializer,\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/messaging.py&#34;, line 181, in publish\n    exchange_name, declare,\n  File &#34;/usr/local/lib/python3.6/dist-packages/kombu/messaging.py&#34;, line 203, in _publish\n    mandatory=mandatory, immediate=immediate,\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/channel.py&#34;, line 1734, in _basic_publish\n    (0, exchange, routing_key, mandatory, immediate), msg\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/abstract_channel.py&#34;, line 50, in send_method\n    conn.frame_writer(1, self.channel_id, sig, args, content)\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/method_framing.py&#34;, line 166, in write_frame\n    write(view[:offset])\n  File &#34;/usr/local/lib/python3.6/dist-packages/amqp/transport.py&#34;, line 258, in write\n    self._write(s)\nTimeoutError: [Errno 110] Connection timed out\n[2017-11-19 10:42:11,088: INFO/MainProcess] Connected to amqp://gemfield:**@gemfield.org:5672//\n[2017-11-19 10:42:11,196: INFO/MainProcess] mingle: searching for neighbors\n[2017-11-19 10:42:12,359: INFO/MainProcess] mingle: all alone</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5, 当调用get(n seconds)调用时，如果被调用的celery work的task在n秒都没有结束，则在producer这端会产生 The operation timed out的异常。</b></p><p>如下所示：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ThinkPad-X1C:~$ python3 client3.py ge                 \nstart...\nMain sleep 0\nget task in thread\npreparing get process_ge_0...\nTraceback (most recent call last):\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/amqp.py&#34;, line 148, in wait_for\n    on_interval=on_interval)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/amqp.py&#34;, line 225, in consume\n    conn, consumer, timeout, on_interval)[task_id]\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/amqp.py&#34;, line 204, in drain_events\n    raise socket.timeout()\nsocket.timeout\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File &#34;client3.py&#34;, line 49, in &lt;module&gt;\n    get_task(the_task_id)\n  File &#34;client3.py&#34;, line 29, in get_task\n    returnValue = my_task.get(10)\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/result.py&#34;, line 194, in get\n    on_message=on_message,\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/base.py&#34;, line 466, in wait_for_pending\n    no_ack=no_ack,\n  File &#34;/usr/local/lib/python3.6/dist-packages/celery/backends/amqp.py&#34;, line 150, in wait_for\n    raise TimeoutError(&#39;The operation timed out.&#39;)\ncelery.exceptions.TimeoutError: The operation timed out.\ngemfield@ThinkPad-X1C:~$</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>6，A node named celery@feadbb97d4c7 is already using this process mailbox</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span><span class=\"m\">2017</span>-12-03 <span class=\"m\">10</span>:08:27,521: WARNING/MainProcess<span class=\"o\">]</span> /usr/local/lib/python3.5/dist-packages/kombu/pidbox.py:71: UserWarning: A node named celery@feadbb97d4c7 is already using this process mailbox!\n\nMaybe you forgot to shutdown the other node or did not <span class=\"k\">do</span> so properly?\nOr <span class=\"k\">if</span> you meant to start multiple nodes on the same host please make sure\nyou give each node a unique node name!\n\n  warnings.warn<span class=\"o\">(</span>W_PIDBOX_IN_USE.format<span class=\"o\">(</span><span class=\"nv\">node</span><span class=\"o\">=</span>self<span class=\"o\">))</span></code></pre></div><p>这是因为你在同一台机器上起了多个celery，如果要这样做，你得给他们分配不同的node name（通过 -n 参数）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">$ celery -A proj worker --loglevel<span class=\"o\">=</span>INFO --concurrency<span class=\"o\">=</span><span class=\"m\">2</span> -n worker1@%h\n$ celery -A proj worker --loglevel<span class=\"o\">=</span>INFO --concurrency<span class=\"o\">=</span><span class=\"m\">4</span> -n worker2@%h</code></pre></div><p><b>（不定期更新）</b></p><p></p>", 
            "topic": [
                {
                    "tag": "celery", 
                    "tagLink": "https://api.zhihu.com/topics/20061668"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "Django（框架）", 
                    "tagLink": "https://api.zhihu.com/topics/19572108"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31267012", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 7, 
            "title": "如何把Django正在使用的数据库从sqlite3切换为mysql", 
            "content": "<p>要把Django正在使用的数据库从sqlite3切换为mysql，基本思路就是先把sqlite3数据库里的数据使用Django的方式导出来，然后将Django的settings文件中的database backend改为mysql，最后再使用Django的方式将数据导入。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>一，安装mysql数据库，Gemfield使用的是Mysql的Docker容器，Gemfield使用的mysql版本是5.7</b></h2><p><b>设置mysql编码为utf8(默认为latin1)</b></p><p><b>1.修改mysql文件夹下： /etc/mysql/mysql.conf.d/mysqld.cnf</b></p><p>① 在[mysqld]上加入：</p><p>[client]</p><p>default-character-set=utf8</p><p class=\"ztext-empty-paragraph\"><br/></p><p>② 在[mysqld]下加入：</p><p>collation-server = utf8_unicode_ci  </p><p>init-connect=&#39;SET NAMES utf8&#39;  </p><p>character-set-server = utf8  </p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2.修改mysql文件夹下： ./conf.d/mysql.cnf</b></p><p>① 在[mysql]下加入：</p><p>default-character-set=utf8</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，验证</b></p><p>在mysql命令提示符中：show variables like &#39;%char%&#39;;</p><p>可以看到除了filesystem为binary外，其它编码都是utf8</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>二，导出数据</b></h2><p><b>1，Django的settings/databases为sqlite3时导出数据：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">python manage.py dumpdata &gt; datadump.json</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，修改settings/databases 成mysql:</b></p><div class=\"highlight\"><pre><code class=\"language-yaml\"><span class=\"s1\">&#39;default&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span>{<span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;ENGINE&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;django.db.backends.mysql&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;NAME&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;gemfield&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;HOST&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;ai.gemfield.org&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;USER&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;gemfield&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;PASSWORD&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;gemfield&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;PORT&#39;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;0&#39;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">       </span><span class=\"s1\">&#39;OPTIONS&#39;</span><span class=\"p\">:</span>{<span class=\"s1\">&#39;charset&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;utf8&#39;</span>}<span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"w\">   </span>}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，启动mysql, 创建一个database ，名为gemfield</b></p><p>注意这个database的编码格式：</p><p><code>CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;</code> </p><p class=\"ztext-empty-paragraph\"><br/></p><p>如果是查看已有数据库的编码格式，可以：</p><p>For Schemas:</p><div class=\"highlight\"><pre><code class=\"language-text\">SELECT default_character_set_name FROM information_schema.SCHEMATA \nWHERE schema_name = &#34;schemaname&#34;;\n</code></pre></div><p>For Tables:</p><div class=\"highlight\"><pre><code class=\"language-text\">SELECT CCSA.character_set_name FROM information_schema.`TABLES` T,\n       information_schema.`COLLATION_CHARACTER_SET_APPLICABILITY` CCSA\nWHERE CCSA.collation_name = T.table_collation\n  AND T.table_schema = &#34;schemaname&#34;\n  AND T.table_name = &#34;tablename&#34;;\n</code></pre></div><p>For Columns:</p><div class=\"highlight\"><pre><code class=\"language-text\">SELECT character_set_name FROM information_schema.`COLUMNS` \nWHERE table_schema = &#34;schemaname&#34;\n  AND table_name = &#34;tablename&#34;\n  AND column_name = &#34;columnname&#34;; </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>还可以：</p><p>For <b>columns</b>:</p><div class=\"highlight\"><pre><code class=\"language-text\">SHOW FULL COLUMNS FROM table_name; </code></pre></div><p><b>4，在数据库gemfield中创建Django表</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">python manage.py makemigrations\npython manage.py migrate</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>5， 删掉mysql中和sqlite3中重复的表</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">root@500fe3d54462:~# python manage.py shell\nPython <span class=\"m\">3</span>.5.2 <span class=\"o\">(</span>default, Sep <span class=\"m\">14</span> <span class=\"m\">2017</span>, <span class=\"m\">22</span>:51:06<span class=\"o\">)</span> \n<span class=\"o\">[</span>GCC <span class=\"m\">5</span>.4.0 <span class=\"m\">20160609</span><span class=\"o\">]</span> on linux\nType <span class=\"s2\">&#34;help&#34;</span>, <span class=\"s2\">&#34;copyright&#34;</span>, <span class=\"s2\">&#34;credits&#34;</span> or <span class=\"s2\">&#34;license&#34;</span> <span class=\"k\">for</span> more information.\n<span class=\"o\">(</span>InteractiveConsole<span class=\"o\">)</span>\n&gt;&gt;&gt; from django.contrib.contenttypes.models import ContentType\n&gt;&gt;&gt; ContentType.objects.all<span class=\"o\">()</span>.delete<span class=\"o\">()</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>三，导入数据</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">python manage.py loaddata datadump.json</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Django（框架）", 
                    "tagLink": "https://api.zhihu.com/topics/19572108"
                }, 
                {
                    "tag": "SQLite3", 
                    "tagLink": "https://api.zhihu.com/topics/19606230"
                }, 
                {
                    "tag": "MySQL", 
                    "tagLink": "https://api.zhihu.com/topics/19554128"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32156619", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 3, 
            "title": "如何根据已有的数据拟合出多项式函数（多项式插值）？", 
            "content": "<p>实际项目中遇到了一个需求，就是根据一堆数据反过来求出一个函数，这个函数要表达的意思总结起来就是下面这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">x为10到无穷大；求一个函数f(x)，满足当\nx=10, f(x) 约等于 0.98\nx=20, f(x) 约等于 0.96\nx=50, f(x) 约等于 0.95\nx=100, f(x) 约等于 0.90\nx=200, f(x) 约等于 0.85\nx=300, f(x) 约等于 0.80\nx=400, f(x) 约等于 0.75\nx=500, f(x) 约等于 0.70\nx&gt;=1000, f(x) 约等于 0.60</code></pre></div><p>有了这个函数后，我们就可以得到当x从10到无穷大的时候对应的f(x)值。那现在的问题就是如何根据这么有限的几个数据来拟合出所需的函数呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>使用一次函数</b></h2><p>我们使用numpy的polyfit函数来进行一次函数的拟合。</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">CALIBRATE_X</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">]</span>\n<span class=\"n\">CALIBRATE_Y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"mf\">0.96</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.85</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.55</span><span class=\"p\">]</span>\n<span class=\"n\">z1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">polyfit</span><span class=\"p\">(</span><span class=\"n\">CALIBRATE_X</span><span class=\"p\">,</span> <span class=\"n\">CALIBRATE_Y</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">poly1d</span><span class=\"p\">(</span><span class=\"n\">z1</span><span class=\"p\">)</span>\n<span class=\"c1\">#begin test</span>\n<span class=\"n\">x</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">6000</span><span class=\"p\">)</span>\n<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">p1</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><p>得出的图像如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-db0952e62364a9c3205f03645a048680_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic1.zhimg.com/v2-db0952e62364a9c3205f03645a048680_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;525&#39; height=&#39;346&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"346\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"525\" data-original=\"https://pic1.zhimg.com/v2-db0952e62364a9c3205f03645a048680_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-db0952e62364a9c3205f03645a048680_b.jpg\"/></figure><p>当然，一次函数是无法有效表达文章开头提到的这些数据的特征的，很明显那些数据并不是线性的。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>使用高次函数来拟合</b></h2><p>我们用一个三次函数来进行拟合，那么就有f(x) =  <img src=\"https://www.zhihu.com/equation?tex=ax%5E%7B3%7D+%2B+bx%5E%7B2%7D+%2B+cx+%2B+d\" alt=\"ax^{3} + bx^{2} + cx + d\" eeimg=\"1\"/> 。</p><p>于是我们得到下面的方程组：</p><p><img src=\"https://www.zhihu.com/equation?tex=a10%5E%7B3%7D+%2B+b10%5E%7B2%7D+%2B+c10+%2B+d+%3D+0.98%5C%5C+a20%5E%7B3%7D+%2B+b20%5E%7B2%7D+%2B+c20+%2B+d+%3D+0.96%5C%5C+a50%5E%7B3%7D+%2B+b50%5E%7B2%7D+%2B+c50+%2B+d+%3D+0.95%5C%5C+a100%5E%7B3%7D+%2B+b100%5E%7B2%7D+%2B+c100+%2B+d+%3D+0.90%5C%5C+a200%5E%7B3%7D+%2B+b200%5E%7B2%7D+%2B+c200+%2B+d+%3D+0.85%5C%5C+a300%5E%7B3%7D+%2B+b300%5E%7B2%7D+%2B+c300+%2B+d+%3D+0.80%5C%5C+a400%5E%7B3%7D+%2B+b400%5E%7B2%7D+%2B+c400+%2B+d+%3D+0.75%5C%5C+a500%5E%7B3%7D+%2B+b500%5E%7B2%7D+%2B+c500+%2B+d+%3D+0.70%5C%5C+a1000%5E%7B3%7D+%2B+b1000%5E%7B2%7D+%2B+c1000+%2B+d+%3D+0.60%5C%5C\" alt=\"a10^{3} + b10^{2} + c10 + d = 0.98\\\\ a20^{3} + b20^{2} + c20 + d = 0.96\\\\ a50^{3} + b50^{2} + c50 + d = 0.95\\\\ a100^{3} + b100^{2} + c100 + d = 0.90\\\\ a200^{3} + b200^{2} + c200 + d = 0.85\\\\ a300^{3} + b300^{2} + c300 + d = 0.80\\\\ a400^{3} + b400^{2} + c400 + d = 0.75\\\\ a500^{3} + b500^{2} + c500 + d = 0.70\\\\ a1000^{3} + b1000^{2} + c1000 + d = 0.60\\\\\" eeimg=\"1\"/> </p><p>然后我们就可以自然而然的使用矩阵运算来计算这个3次函数的系数：a、b、 c、 d。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-57e778092a096ec7841d71bb38bd1f99_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-57e778092a096ec7841d71bb38bd1f99_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-57e778092a096ec7841d71bb38bd1f99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-57e778092a096ec7841d71bb38bd1f99_b.jpg\"/></figure><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">CALIBRATE_X</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">]</span>\n<span class=\"n\">CALIBRATE_Y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.98</span><span class=\"p\">,</span> <span class=\"mf\">0.96</span><span class=\"p\">,</span> <span class=\"mf\">0.95</span><span class=\"p\">,</span> <span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"mf\">0.85</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">]</span>\n\n<span class=\"n\">ORDER</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">CALIBRATE_X</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">CALIBRATE_Y</span><span class=\"p\">)</span>\n<span class=\"n\">input_2d_x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">CALIBRATE_X</span><span class=\"p\">),</span> <span class=\"n\">ORDER</span><span class=\"p\">))</span>\n<span class=\"c1\">#x^3 + x^2 + x^1 + x^0 if ORDER == 4</span>\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ORDER</span><span class=\"p\">):</span>\n    <span class=\"n\">input_2d_x</span><span class=\"p\">[:,</span> <span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"n\">c</span>\n\n<span class=\"n\">x_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mat</span><span class=\"p\">(</span><span class=\"n\">input_2d_x</span><span class=\"p\">)</span>\n<span class=\"n\">y_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mat</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"c1\">#calculate the weigths</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">x_mat</span><span class=\"o\">.</span><span class=\"n\">I</span><span class=\"p\">,</span> <span class=\"n\">y_mat</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#begin the test</span>\n<span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"mf\">0.6</span>\n    <span class=\"nb\">input</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">ORDER</span><span class=\"p\">):</span>\n        <span class=\"nb\">input</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">x_mat</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mat</span><span class=\"p\">(</span> <span class=\"nb\">input</span> <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">matmul</span><span class=\"p\">(</span><span class=\"n\">x_mat</span><span class=\"p\">,</span> <span class=\"n\">W</span><span class=\"p\">))</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n    <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#show the image    </span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span></code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-4a0af2c847029d2723de7ebdfbe04b21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"446\" data-original=\"https://pic2.zhimg.com/v2-4a0af2c847029d2723de7ebdfbe04b21_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;446&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"446\" data-original=\"https://pic2.zhimg.com/v2-4a0af2c847029d2723de7ebdfbe04b21_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-4a0af2c847029d2723de7ebdfbe04b21_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "多项式拟合", 
                    "tagLink": "https://api.zhihu.com/topics/19978618"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32950156", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "Linux上使用GNU parted工具进行大于2GB的分区", 
            "content": "<h2><b>背景</b></h2><p>在当前使用udev的Linux操作系统上，只有当磁盘上的分区确实存在的话，分区设备才会出现，如/dev/sda1。而以前那些使用静态设备号的旧的Linux上，不管分区在不在，都会把可能的分区设备生成出来。</p><p>如果一个磁盘使用的是MBR分区表，那么分区1到分区4是主分区，其余的是逻辑分区。主分区的号不必连续，但逻辑分区的号码必然连续。每个分区的大小不会超过2个GB；如果一个磁盘使用的是GPT分区表，那么可以最多划分为128个分区，所有的都是主分区。分区大小可以超过2GB。</p><p>而使用fdisk不能进行大于2GB的分区。</p><p>另外，当进行mount操作时，相关的文件系统驱动将会从磁盘的固定起始位置去寻找superblock。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>使用GNU parted</b></h2><p>一般Linux发行版都默认安装有这个工具：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:~$ parted --version\nparted <span class=\"o\">(</span>GNU parted<span class=\"o\">)</span> <span class=\"m\">3</span>.2\nCopyright <span class=\"o\">(</span>C<span class=\"o\">)</span> <span class=\"m\">2014</span> Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version <span class=\"m\">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by &lt;http://git.debian.org/?p<span class=\"o\">=</span>parted/parted.git<span class=\"p\">;</span><span class=\"nv\">a</span><span class=\"o\">=</span>blob_plain<span class=\"p\">;</span><span class=\"nv\">f</span><span class=\"o\">=</span>AUTHORS&gt;.</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>parted的用法：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~$ parted --help\nUsage: parted <span class=\"o\">[</span>OPTION<span class=\"o\">]</span>... <span class=\"o\">[</span>DEVICE <span class=\"o\">[</span>COMMAND <span class=\"o\">[</span>PARAMETERS<span class=\"o\">]</span>...<span class=\"o\">]</span>...<span class=\"o\">]</span>\nApply COMMANDs with PARAMETERS to DEVICE.  If no COMMAND<span class=\"o\">(</span>s<span class=\"o\">)</span> are given, run in\ninteractive mode.\n\n选项：\n  -h, --help                      显示此求助信息\n  -l, --list                      lists partition layout on all block devices\n  -m, --machine                   displays machine parseable output\n  -s, --script                    从不提示用户\n  -v, --version                   显示版本\n  -a, --align<span class=\"o\">=[</span>none<span class=\"p\">|</span>cyl<span class=\"p\">|</span>min<span class=\"p\">|</span>opt<span class=\"o\">]</span>  alignment <span class=\"k\">for</span> new partitions\n\n命令：\n  align-check TYPE N                        check partition N <span class=\"k\">for</span> TYPE<span class=\"o\">(</span>min<span class=\"p\">|</span>opt<span class=\"o\">)</span>\n        alignment\n  <span class=\"nb\">help</span> <span class=\"o\">[</span>COMMAND<span class=\"o\">]</span>                           print general help, or <span class=\"nb\">help</span> on\n        COMMAND\n  mklabel,mktable LABEL-TYPE               create a new disklabel <span class=\"o\">(</span>partition\n        table<span class=\"o\">)</span>\n  mkpart 分区类型 <span class=\"o\">[</span>文件系统类型<span class=\"o\">]</span> 起始点 终止点      创建一个分区\n  name NUMBER 名称               将编号为NUMBER 的分区命名为“名称”\n  print <span class=\"o\">[</span>devices<span class=\"p\">|</span>free<span class=\"p\">|</span>list,all<span class=\"p\">|</span>NUMBER<span class=\"o\">]</span>     display the partition table,\n        available devices, free space, all found partitions, or a particular\n        partition\n  quit                          退出程序\n  rescue 起始点 终止点  挽救临近“起始点”、“终止点”的遗失的分区\n  resizepart NUMBER END                    resize partition NUMBER\n  rm MINOR                      删除编号为 MINOR 的分区\n  选择设备  选择要编辑的设备\n  disk_set FLAG STATE                      change the FLAG on selected device\n  disk_toggle <span class=\"o\">[</span>FLAG<span class=\"o\">]</span>                       toggle the state of FLAG on selected\n        device\n  <span class=\"nb\">set</span> NUMBER FLAG STATE                    change the FLAG on partition NUMBER\n  toggle <span class=\"o\">[</span>NUMBER <span class=\"o\">[</span>FLAG<span class=\"o\">]]</span>                   切换分区 NUMBER 的 FLAG 标记\n  unit UNIT                                <span class=\"nb\">set</span> the default unit to UNIT\n  version                                  display the version number and\n        copyright information of GNU Parted\n\nReport bugs to bug-parted@gnu.org</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>parted开始分区</b></h2><p><b>1，找到要分区的设备：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:~$ sudo parted -l\nModel: DELL PERC H330 Adp <span class=\"o\">(</span>scsi<span class=\"o\">)</span>\nDisk /dev/sda: 255GB\nSector size <span class=\"o\">(</span>logical/physical<span class=\"o\">)</span>: 512B/512B\nPartition Table: msdos\nDisk Flags: \n\nNumber  Start   End    Size   Type     File system  Flags\n <span class=\"m\">1</span>      1049kB  255GB  255GB  primary  ext4         boot\n\n\nModel: DELL PERC H330 Adp <span class=\"o\">(</span>scsi<span class=\"o\">)</span>\nDisk /dev/sdb: 4000GB\nSector size <span class=\"o\">(</span>logical/physical<span class=\"o\">)</span>: 512B/512B\nPartition Table: gpt\nDisk Flags: \n\nNumber  Start   End     Size    File system  Name                          Flags\n <span class=\"m\">1</span>      <span class=\"m\">17</span>.4kB  134MB   134MB                Microsoft reserved partition  msftres\n <span class=\"m\">2</span>      135MB   4000GB  4000GB  ntfs         Basic data partition          msftdata\n\n\ngemfield@T630-2nd:~$ </code></pre></div><p>Gemfield要分区的是/dev/sdb设备。</p><p><b>2，启用parted开始对/dev/sdb进行parted分区</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:~$ sudo parted /dev/sdb\nGNU Parted <span class=\"m\">3</span>.2\nUsing /dev/sdb\nWelcome to GNU Parted! Type <span class=\"s1\">&#39;help&#39;</span> to view a list of commands.\n<span class=\"o\">(</span>parted<span class=\"o\">)</span> p                                                                \nModel: DELL PERC H330 Adp <span class=\"o\">(</span>scsi<span class=\"o\">)</span>\nDisk /dev/sdb: 4000GB\nSector size <span class=\"o\">(</span>logical/physical<span class=\"o\">)</span>: 512B/512B\nPartition Table: gpt\nDisk Flags: \n\nNumber  Start   End     Size    File system  Name                          Flags\n <span class=\"m\">1</span>      <span class=\"m\">17</span>.4kB  134MB   134MB                Microsoft reserved partition  msftres\n <span class=\"m\">2</span>      135MB   4000GB  4000GB  ntfs         Basic data partition          msftdata\n\n<span class=\"o\">(</span>parted<span class=\"o\">)</span></code></pre></div><p><b>3，删除当前存在的分区</b></p><p>在parted会话中使用rm命令，参数为分区的number。比如下面gemfield删除了/dev/sdb上的1和2分区：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">(</span>parted<span class=\"o\">)</span> rm <span class=\"m\">2</span>                                                             \n<span class=\"o\">(</span>parted<span class=\"o\">)</span> p\nModel: DELL PERC H330 Adp <span class=\"o\">(</span>scsi<span class=\"o\">)</span>\nDisk /dev/sdb: 4000GB\nSector size <span class=\"o\">(</span>logical/physical<span class=\"o\">)</span>: 512B/512B\nPartition Table: gpt\nDisk Flags: \n\nNumber  Start   End    Size   File system  Name                          Flags\n <span class=\"m\">1</span>      <span class=\"m\">17</span>.4kB  134MB  134MB               Microsoft reserved partition  msftres\n\n<span class=\"o\">(</span>parted<span class=\"o\">)</span> rm <span class=\"m\">1</span>                                                             \n<span class=\"o\">(</span>parted<span class=\"o\">)</span> p                                                                \nModel: DELL PERC H330 Adp <span class=\"o\">(</span>scsi<span class=\"o\">)</span>\nDisk /dev/sdb: 4000GB\nSector size <span class=\"o\">(</span>logical/physical<span class=\"o\">)</span>: 512B/512B\nPartition Table: gpt\nDisk Flags: \n\nNumber  Start  End  Size  File system  Name  Flags\n\n<span class=\"o\">(</span>parted<span class=\"o\">)</span></code></pre></div><p><b>4，创建一个新的分区表</b></p><p>使用mklabel命令创建一个新的分区表，因为/dev/sdb设备大于2个TB，所以要使用gpt分区表。mklabel的参数可以是&#34;bsd&#34;, &#34;dvh&#34;, &#34;gpt&#34;,  &#34;loop&#34;,&#34;mac&#34;, &#34;msdos&#34;, &#34;pc98&#34;或者&#34;sun&#34;， 传统的Linux喜欢使用msdos格式，但若是分区大于2TB则必须使用gpt格式。  </p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">(</span>parted<span class=\"o\">)</span> mklabel gpt                                                      \nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to <span class=\"k\">continue</span>?\nYes/No? yes                                                               \n<span class=\"o\">(</span>parted<span class=\"o\">)</span></code></pre></div><p><b>5，分第一个区</b></p><p>使用mkpart命令进行分区操作，命令格式如下：</p><p><b>mkpart partition-type [fs-type] start end</b></p><p>创建一个partition-type类型的分区，partition-type可以是：&#34;primary&#34;, &#34;logical&#34;, 或者 &#34;extended&#34; 。如果指定fs-type则在创建分区的同时进行格式化。start和end指的是分区的起始位置，单位默认是M。  fs-type可以是：&#34;fat16&#34;, &#34;fat32&#34;, &#34;ext2&#34;, &#34;linux-swap&#34;,&#34;reiserfs&#34; 注意不支持ext3、ext4格式的文件系统，只能先分区然后用Linux上的专用的命令进行格式化分区操作。  </p><p>Gemfield只打算在/dev/sdb上分一个区：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">(</span>parted<span class=\"o\">)</span> mkpart primary <span class=\"m\">0</span> -1                                              \nWarning: The resulting partition is not properly aligned <span class=\"k\">for</span> best performance.\nIgnore/Cancel? Ignore                                                     \n<span class=\"o\">(</span>parted<span class=\"o\">)</span> quit                                                             \nInformation: You may need to update /etc/fstab.</code></pre></div><p>0表示分区的开始， -1表示分区的结尾。 Gemfield把整个/dev/sdb分为了一个区。</p><p>然后quit命令退出。</p><p><b>注意：这个命令会直接分区并保存。</b> </p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>将/dev/sdb1格式化分区为ext4文件格式</b></h2><p>使用Linux上的mkfs.ext4来进行格式化分区：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:~$ sudo mkfs.ext4 /dev/sdb1\nmke2fs <span class=\"m\">1</span>.43.4 <span class=\"o\">(</span><span class=\"m\">31</span>-Jan-2017<span class=\"o\">)</span>\nCreating filesystem with <span class=\"m\">976617223</span> 4k blocks and <span class=\"m\">244154368</span> inodes\nFilesystem UUID: 3ce9802c-9ded-41f1-b88a-f1eacf3fe80c\nSuperblock backups stored on blocks: \n        <span class=\"m\">32768</span>, <span class=\"m\">98304</span>, <span class=\"m\">163840</span>, <span class=\"m\">229376</span>, <span class=\"m\">294912</span>, <span class=\"m\">819200</span>, <span class=\"m\">884736</span>, <span class=\"m\">1605632</span>, <span class=\"m\">2654208</span>, \n        <span class=\"m\">4096000</span>, <span class=\"m\">7962624</span>, <span class=\"m\">11239424</span>, <span class=\"m\">20480000</span>, <span class=\"m\">23887872</span>, <span class=\"m\">71663616</span>, <span class=\"m\">78675968</span>, \n        <span class=\"m\">102400000</span>, <span class=\"m\">214990848</span>, <span class=\"m\">512000000</span>, <span class=\"m\">550731776</span>, <span class=\"m\">644972544</span>\n\nAllocating group tables: <span class=\"k\">done</span>                            \nWriting inode tables: <span class=\"k\">done</span>                            \nCreating journal <span class=\"o\">(</span><span class=\"m\">262144</span> blocks<span class=\"o\">)</span>: <span class=\"k\">done</span>\nWriting superblocks and filesystem accounting information: <span class=\"k\">done</span>       \n\ngemfield@T630-2nd:~$</code></pre></div><h2><b>mount到挂载点</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:/$ sudo mkdir /bigdata\ngemfield@T630-2nd:/$ sudo mount /dev/sdb1 /bigdata</code></pre></div><h2><b>写入fstab，开机自动挂载</b></h2><p>最后一行就是gemfield新加的：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@T630-2nd:/$ cat /etc/fstab\n<span class=\"c1\"># /etc/fstab: static file system information.</span>\n#\n<span class=\"c1\"># Use &#39;blkid&#39; to print the universally unique identifier for a</span>\n<span class=\"c1\"># device; this may be used with UUID= as a more robust way to name devices</span>\n<span class=\"c1\"># that works even if disks are added and removed. See fstab(5).</span>\n#\n<span class=\"c1\"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span>\n<span class=\"c1\"># / was on /dev/sda1 during installation</span>\n<span class=\"nv\">UUID</span><span class=\"o\">=</span><span class=\"m\">95320107</span>-b757-4f07-83f0-b333162d5a57 /               ext4    <span class=\"nv\">errors</span><span class=\"o\">=</span>remount-ro <span class=\"m\">0</span>       <span class=\"m\">1</span>\n/swapfile                                 none            swap    sw              <span class=\"m\">0</span>       <span class=\"m\">0</span>\n/dev/sdb1      /bigdata        ext4    defaults        <span class=\"m\">0</span>       <span class=\"m\">0</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "GPT", 
                    "tagLink": "https://api.zhihu.com/topics/19912106"
                }, 
                {
                    "tag": "硬盘分区", 
                    "tagLink": "https://api.zhihu.com/topics/19581919"
                }, 
                {
                    "tag": "分区表", 
                    "tagLink": "https://api.zhihu.com/topics/19681336"
                }
            ], 
            "comments": [
                {
                    "userName": "王绍阳", 
                    "userLink": "https://www.zhihu.com/people/fa09afeab4595ecf166b7a2d9ae7a2f3", 
                    "content": "<p>分区时 如果start和end指定 0 -1 ,会造成分区未起始于物理边界，会影响磁盘性能。改成0%和100%即可。</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33476723", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 4, 
            "title": "opencv-python 3.3.1.11：Linux平台cv2读视频时代到来", 
            "content": "<h2><b>背景</b></h2><p>那个项目刚开始的时候，也就是大约2017年10月份的时候，我们项目组使用opencv的python接口（也就是opencv-python包或者cv2模块）去读视频的时候，都要提前手工编译这个python模块，因为pip直接安装的包并没有能力读视频。当时，Gemfield团队使用了下面的方式编译python接口（cv2模块）：<a href=\"https://zhuanlan.zhihu.com/p/30413043\" class=\"internal\">opencv读视频时的编码问题</a></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>事情起了变化</b></h2><p>2018年1月份的时候，Gemfield偶然发现pip安装的cv2模块也可以直接读视频。真是奇怪！仅仅2个多月前我们还确信pip安装的cv2模块读视频会返回error，不仅如此，cv2.VideoCapture这个接口压根就不能返回fps、frame count这些信息。这两个多月发生了什么呢？</p><p>Gemfield曾经在ELF的世界里游荡了一年多的时间，养成了一些职业病，比方说遇到这个问题的时候，Gemfield首先做的是：</p><p><b>1，查看opencv-python当前可用的版本：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~$ pip install opencv-python<span class=\"o\">==</span>gemfield\nCollecting opencv-python<span class=\"o\">==</span>gemfield\n  Could not find a version that satisfies the requirement opencv-python<span class=\"o\">==</span>gemfield \n<span class=\"o\">(</span>from versions: <span class=\"m\">3</span>.1.0.0, <span class=\"m\">3</span>.1.0.1, <span class=\"m\">3</span>.1.0.2, <span class=\"m\">3</span>.1.0.3, <span class=\"m\">3</span>.1.0.4, <span class=\"m\">3</span>.1.0.5, <span class=\"m\">3</span>.2.0.6, <span class=\"m\">3</span>.2.0.7, <span class=\"m\">3</span>.2.0.8, <span class=\"m\">3</span>.3.0.9, <span class=\"m\">3</span>.3.0.10, <span class=\"m\">3</span>.3.1.11, <span class=\"m\">3</span>.4.0.12<span class=\"o\">)</span>\nNo matching distribution found <span class=\"k\">for</span> opencv-python<span class=\"o\">==</span>gemfield</code></pre></div><p>在当前这个时间节点（2018年1月31日），opencv_python可用的版本是：3.1.0.0, 3.1.0.1, 3.1.0.2, 3.1.0.3, 3.1.0.4, 3.1.0.5, 3.2.0.6, 3.2.0.7, 3.2.0.8, 3.3.0.9, 3.3.0.10, 3.3.1.11, 3.4.0.12。而最新版本（3.4.0.12）已经被验证可以直接支持读视频了。那么是从哪个版本变化的呢？</p><p><b>2，试验 3.3.0.10</b></p><p>发现该版本并不能读视频。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/dataset$ pip install <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.0.10\nCollecting <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.0.10\n  Downloading opencv_python-3.3.0.10-cp27-cp27mu-manylinux1_x86_64.whl <span class=\"o\">(</span><span class=\"m\">15</span>.4MB<span class=\"o\">)</span>\n    <span class=\"m\">100</span>% <span class=\"p\">|</span>████████████████████████████████<span class=\"p\">|</span> <span class=\"m\">15</span>.5MB 86kB/s \nCollecting numpy&gt;<span class=\"o\">=</span><span class=\"m\">1</span>.11.1 <span class=\"o\">(</span>from <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.0.10<span class=\"o\">)</span>\n  Using cached numpy-1.14.0-cp27-cp27mu-manylinux1_x86_64.whl\nInstalling collected packages: numpy, opencv-python\n\ngemfield@ThinkPad-X1C:~/dataset$ ldd /home/gemfield/.local/lib/python2.7/site-packages/cv2/cv2.so\n        linux-vdso.so.1 <span class=\"o\">=</span>&gt;  <span class=\"o\">(</span>0x00007ffde9d38000<span class=\"o\">)</span>\n        libz-a147dcb0.so.1.2.3 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libz-a147dcb0.so.1.2.3 <span class=\"o\">(</span>0x00007f8c14f27000<span class=\"o\">)</span>\n        libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">(</span>0x00007f8c14096000<span class=\"o\">)</span>\n        libQtTest-1183da5d.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtTest-1183da5d.so.4.8.7 <span class=\"o\">(</span>0x00007f8c13e69000<span class=\"o\">)</span>\n        libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">(</span>0x00007f8c1395d000<span class=\"o\">)</span>\n        libstdc++.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 <span class=\"o\">(</span>0x00007f8c135d7000<span class=\"o\">)</span>\n        libdl.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libdl.so.2 <span class=\"o\">(</span>0x00007f8c133d3000<span class=\"o\">)</span>\n        libpthread.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpthread.so.0 <span class=\"o\">(</span>0x00007f8c131b4000<span class=\"o\">)</span>\n        librt.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/librt.so.1 <span class=\"o\">(</span>0x00007f8c12fac000<span class=\"o\">)</span>\n        libm.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libm.so.6 <span class=\"o\">(</span>0x00007f8c12c56000<span class=\"o\">)</span>\n        libgcc_s.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 <span class=\"o\">(</span>0x00007f8c12a3f000<span class=\"o\">)</span>\n        libc.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>0x00007f8c1265f000<span class=\"o\">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class=\"o\">(</span>0x00007f8c16b54000<span class=\"o\">)</span>\n        libgthread-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0 <span class=\"o\">(</span>0x00007f8c1245d000<span class=\"o\">)</span>\n        libglib-2.0.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 <span class=\"o\">(</span>0x00007f8c12149000<span class=\"o\">)</span>\n        libSM.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 <span class=\"o\">(</span>0x00007f8c11f41000<span class=\"o\">)</span>\n        libICE.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6 <span class=\"o\">(</span>0x00007f8c11d26000<span class=\"o\">)</span>\n        libXrender.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 <span class=\"o\">(</span>0x00007f8c11b1c000<span class=\"o\">)</span>\n        libXext.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 <span class=\"o\">(</span>0x00007f8c1190a000<span class=\"o\">)</span>\n        libX11.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 <span class=\"o\">(</span>0x00007f8c115d1000<span class=\"o\">)</span>\n        libpcre.so.3 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpcre.so.3 <span class=\"o\">(</span>0x00007f8c1135f000<span class=\"o\">)</span>\n        libuuid.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libuuid.so.1 <span class=\"o\">(</span>0x00007f8c1115a000<span class=\"o\">)</span>\n        libbsd.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libbsd.so.0 <span class=\"o\">(</span>0x00007f8c10f45000<span class=\"o\">)</span>\n        libxcb.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 <span class=\"o\">(</span>0x00007f8c10d1e000<span class=\"o\">)</span>\n        libXau.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 <span class=\"o\">(</span>0x00007f8c10b1a000<span class=\"o\">)</span>\n        libXdmcp.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 <span class=\"o\">(</span>0x00007f8c10914000<span class=\"o\">)</span></code></pre></div><p><b>3，试验3.3.1.11</b></p><p>发现该版本可以读视频！！</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~/dataset$ pip install <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.1.11\nCollecting <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.1.11\n  Downloading opencv_python-3.3.1.11-cp27-cp27mu-manylinux1_x86_64.whl <span class=\"o\">(</span><span class=\"m\">24</span>.7MB<span class=\"o\">)</span>\n    <span class=\"m\">100</span>% <span class=\"p\">|</span>████████████████████████████████<span class=\"p\">|</span> <span class=\"m\">24</span>.7MB 54kB/s \nCollecting numpy&gt;<span class=\"o\">=</span><span class=\"m\">1</span>.11.1 <span class=\"o\">(</span>from <span class=\"nv\">opencv_python</span><span class=\"o\">==</span><span class=\"m\">3</span>.3.1.11<span class=\"o\">)</span>\n  Using cached numpy-1.14.0-cp27-cp27mu-manylinux1_x86_64.whl\nInstalling collected packages: numpy, opencv-python\n\ngemfield@ThinkPad-X1C:~/dataset$ ldd /home/gemfield/.local/lib/python2.7/site-packages/cv2/cv2.so\n        linux-vdso.so.1 <span class=\"o\">=</span>&gt;  <span class=\"o\">(</span>0x00007fffc3fb6000<span class=\"o\">)</span>\n        libz-a147dcb0.so.1.2.3 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libz-a147dcb0.so.1.2.3 <span class=\"o\">(</span>0x00007efdd6f27000<span class=\"o\">)</span>\n        libavcodec-7625dabe.so.58.6.103 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavcodec-7625dabe.so.58.6.103 <span class=\"o\">(</span>0x00007efdd57a3000<span class=\"o\">)</span>\n        libavformat-d3ca1b40.so.58.3.100 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavformat-d3ca1b40.so.58.3.100 <span class=\"o\">(</span>0x00007efdd5362000<span class=\"o\">)</span>\n        libavutil-eaec640f.so.56.5.100 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavutil-eaec640f.so.56.5.100 <span class=\"o\">(</span>0x00007efdd50ed000<span class=\"o\">)</span>\n        libswscale-bc8d848b.so.5.0.101 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libswscale-bc8d848b.so.5.0.101 <span class=\"o\">(</span>0x00007efdd4e64000<span class=\"o\">)</span>\n        libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">(</span>0x00007efdd3fd3000<span class=\"o\">)</span>\n        libQtTest-1183da5d.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtTest-1183da5d.so.4.8.7 <span class=\"o\">(</span>0x00007efdd3da6000<span class=\"o\">)</span>\n        libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">(</span>0x00007efdd389a000<span class=\"o\">)</span>\n        libstdc++.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 <span class=\"o\">(</span>0x00007efdd3514000<span class=\"o\">)</span>\n        libdl.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libdl.so.2 <span class=\"o\">(</span>0x00007efdd3310000<span class=\"o\">)</span>\n        libpthread.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpthread.so.0 <span class=\"o\">(</span>0x00007efdd30f1000<span class=\"o\">)</span>\n        librt.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/librt.so.1 <span class=\"o\">(</span>0x00007efdd2ee9000<span class=\"o\">)</span>\n        libm.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libm.so.6 <span class=\"o\">(</span>0x00007efdd2b93000<span class=\"o\">)</span>\n        libgcc_s.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 <span class=\"o\">(</span>0x00007efdd297c000<span class=\"o\">)</span>\n        libc.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>0x00007efdd259c000<span class=\"o\">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class=\"o\">(</span>0x00007efdd9027000<span class=\"o\">)</span>\n        libswresample-81cb7b3e.so.3.0.101 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libswresample-81cb7b3e.so.3.0.101 <span class=\"o\">(</span>0x00007efdd237e000<span class=\"o\">)</span>\n        libgthread-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0 <span class=\"o\">(</span>0x00007efdd217c000<span class=\"o\">)</span>\n        libglib-2.0.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 <span class=\"o\">(</span>0x00007efdd1e68000<span class=\"o\">)</span>\n        libSM.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 <span class=\"o\">(</span>0x00007efdd1c60000<span class=\"o\">)</span>\n        libICE.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6 <span class=\"o\">(</span>0x00007efdd1a45000<span class=\"o\">)</span>\n        libXrender.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 <span class=\"o\">(</span>0x00007efdd183b000<span class=\"o\">)</span>\n        libXext.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 <span class=\"o\">(</span>0x00007efdd1629000<span class=\"o\">)</span>\n        libX11.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 <span class=\"o\">(</span>0x00007efdd12f0000<span class=\"o\">)</span>\n        libpcre.so.3 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpcre.so.3 <span class=\"o\">(</span>0x00007efdd107e000<span class=\"o\">)</span>\n        libuuid.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libuuid.so.1 <span class=\"o\">(</span>0x00007efdd0e79000<span class=\"o\">)</span>\n        libbsd.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libbsd.so.0 <span class=\"o\">(</span>0x00007efdd0c64000<span class=\"o\">)</span>\n        libxcb.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 <span class=\"o\">(</span>0x00007efdd0a3d000<span class=\"o\">)</span>\n        libXau.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 <span class=\"o\">(</span>0x00007efdd0839000<span class=\"o\">)</span>\n        libXdmcp.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 <span class=\"o\">(</span>0x00007efdd0633000<span class=\"o\">)</span></code></pre></div><p>更进一步的，你会看到该版本（3.3.1.11）的cv2.so库相比之前的版本多链接了下面这些库：</p><div class=\"highlight\"><pre><code class=\"language-bash\">libavcodec-7625dabe.so.58.6.103 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavcodec-7625dabe.so.58.6.103 <span class=\"o\">(</span>0x00007efdd57a3000<span class=\"o\">)</span>\nlibavformat-d3ca1b40.so.58.3.100 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavformat-d3ca1b40.so.58.3.100 <span class=\"o\">(</span>0x00007efdd5362000<span class=\"o\">)</span>\nlibavutil-eaec640f.so.56.5.100 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libavutil-eaec640f.so.56.5.100 <span class=\"o\">(</span>0x00007efdd50ed000<span class=\"o\">)</span>\nlibswscale-bc8d848b.so.5.0.101 <span class=\"o\">=</span>&gt; /home/gemfield/.local/lib/python2.7/site-packages/cv2/.libs/libswscale-bc8d848b.so.5.0.101 <span class=\"o\">(</span>0x00007efdd4e64000<span class=\"o\">)</span></code></pre></div><p>这些库不就是ffmpeg的library嘛：</p><p>1，libavcodec包含了所有的FFmpeg 的音频和视频的编码/解码器，其中大多数编解码器都是ffmpeg从头开发的，从而保证代码的复用性和性能；</p><p>2，libavformat包含了用于音视频容器格式的demuxers和muxers；</p><p>3，libavutil包含了一些FFmpeg会用到的通用的算法封装，其中有哈稀算法 (<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Adler-32\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Adler-32</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Cyclic_redundancy_check\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CRC</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/MD5\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MD5</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/RIPEMD\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RIPEMD</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/SHA-1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SHA-1</a>. <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/SHA-2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SHA-2</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/MurmurHash\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MurmurHash</a>3, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Hash-based_message_authentication_code\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HMAC</a> MD-5, HMAC SHA-1 和 HMAC SHA-2)、加密算法 (<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Data_Encryption_Standard\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DES</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/RC4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RC4</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Advanced_Encryption_Standard\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AES</a>, AES-CTR, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Tiny_Encryption_Algorithm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TEA</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/XTEA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">XTEA</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Blowfish_%28cipher%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Blowfish</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/CAST-128\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CAST-128</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Twofish\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Twofish</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Camellia_%28cipher%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Camellia</a>)、<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Lempel%25E2%2580%2593Ziv%25E2%2580%2593Oberhumer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LZO</a> 解码器 以及 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Base64\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Base64</a>的编解码；</p><p>4，libswscale包含了视频图像缩放和colorspace/pixelformat 转换函数。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>寻找（非）官方声明</b></h2><p>所以，我们期望能在opencv_python的项目主页上看到这样的信息：3.3.1.11 release 我们链接了ffmpeg的库，可以直接提供在Linux平台上读视频的功能。</p><p>我们能看到吗？</p><p>是的，我们看到了，在Github的项目release页面上(<a href=\"https://link.zhihu.com/?target=https%3A//github.com/skvark/opencv-python/releases\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">skvark/opencv-python</a>)，我们看到3.3.1.11版本有下面的信息：</p><div class=\"highlight\"><pre><code class=\"language-text\">Changes:\n\nLinux and macOS wheels ship now with FFmpeg (#50, #49, #14)\nLinux wheels ship with libjpeg-turbo (#52)\nHaarcascade xml files ship with the package, their path can be accessed via cv2.data.haarcascades (#48)\nPackage metadata updated (#57)\n__init__.py cleaned up (#55)</code></pre></div><h2><b>为什么没有提到写视频？</b></h2><p>因为Gemfield团队处理的主要是h264编码的视频，我们对其它编码的视频并不关心，所以本篇文章并不予以评价。就h264格式的视频来说，因为ffmpeg的libavcodec库包含了自己实现的h264解码器，但是并没有h264编码器。ffmpeg的h264编码要依靠第三方编码器实现，一般来说有2个，VideoLAN 团队的libx264或者思科的openh264。</p><p>因此，opencv_python 3.3.1.11链接了ffmpeg的库，并不代表可以写h264视频了。</p><p>另外，编码h264视频有2种码率控制方式（<a href=\"https://link.zhihu.com/?target=https%3A//trac.ffmpeg.org/wiki/Encode/H.264%23crf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Constant Rate Factor (CRF)</a> 或者 <a href=\"https://link.zhihu.com/?target=https%3A//trac.ffmpeg.org/wiki/Encode/H.264%23twopass\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Two-Pass ABR</a>）。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>为什么以前不链接ffmpeg的库呢？</b></h2><p>OpenCV video I/O 严重依赖于FFmpeg。在manylinux（PEP-0513）和macOS平台上，OpenCV的二进制文件并没有链接FFmpeg的库，FFmpeg使用的是GPL或者LGPL条款，也就是说在最宽松的条件下，OpenCV也只能使用FFmpeg的动态链接库文件，而不能使用静态链接方式。如果使用动态链接方式，OpenCV又面临着各种Linux平台上的各种情况：是否已经安装了FFmpeg？是否动态库的版本符合要求？在这种情况下，我们的选择有：</p><p>1，由opencv_python来提供预先编译好的ffmpeg库；这样的问题是，预先编译好的ffmpeg库在面对不同种类不同版本的Linux发行版时，会遇到大量兼容性问题；</p><p>2，opencv_python只明确所需的ffmpeg依赖，由用户自己手动在自己的操作系统上安装ffmpeg。这太麻烦！</p><p>因此，添加FFmpeg作为OpenCV的额外依赖需要一个更通用的FFmpeg库。这在开发和维护上都需要工作量。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>为什么现在链接ffmpeg库了呢？</b></h2><p>简单来说，作者有时间搞这些了；</p><p>再进一步，就是opencv_python在windows平台早已链接ffmpeg库，在maxOS平台上不久之前也已经链接了ffmpeg库，那么Linux作为最后的平台也水到渠成了；</p><p>再再进一步来说， PEP 513条款（manylinux1平台）为opencv_python提供预编译的ffmpeg库提供了有力支撑。</p><p>一直以来，通过pip的形式直接提供的预编译二进制文件在Linux平台上都会遇到巨大的困难，一方面发行版众多，另一方面很多软件包都是由用户自行安装升级的。manylinux平台就是为此找到一个公约数，它把琳琅满目的Linux发行版的一个最小子集剥离出来。如果一个python包里面的二进制文件能在这个最小子集上面都没有依赖问题，那大抵它在其它Linux发行版上也不会遇到问题。那么这个最小子集是怎么定义的呢？</p><p>要了解这个最小子集的定义，我们需要了解具体是什么东西在妨碍python二进制文件的兼容性。有2大核心障碍：</p><p>1，二进制文件所依赖的动态库文件在当前系统上并不存在；</p><p>2，虽然依赖的动态库文件存在，但动态库版本并不兼容。</p><p>比方说Linux上的基础库glibc，虽然我们可以静态链接它（愿意遵守GPL），但某些特定但又重要的函数，比如dlopen，只能在动态链接glibc的时候才能被调用。所以最终我们都会动态链接glibc。幸好，GNU C库的维护者遵循了严格的symbol versioning scheme来提供后向兼容能力。链接了旧版本的glibc的二进制文件能够在新版本的glibc环境上运行（反之不然）。</p><p>所以manylinux1（第一代manylinux）是这么做的：</p><p>1，python wheels应该只依赖于那么几个特定的共享库；</p><p>2，只依赖于这些共享库的旧的版本；</p><p>3，只依赖于Linux广泛使用的那些内核ABI。</p><p><b>对于1，manylinux1选择的库是：</b></p><div class=\"highlight\"><pre><code class=\"language-text\">libpanelw.so.5\nlibncursesw.so.5\nlibgcc_s.so.1\nlibstdc++.so.6\nlibm.so.6\nlibdl.so.2\nlibrt.so.1\nlibcrypt.so.1\nlibc.so.6\nlibnsl.so.1\nlibutil.so.1\nlibpthread.so.0\nlibresolv.so.2\nlibX11.so.6\nlibXext.so.6\nlibXrender.so.1\nlibICE.so.6\nlibSM.so.6\nlibGL.so.1\nlibgobject-2.0.so.0\nlibgthread-2.0.so.0\nlibglib-2.0.so.0</code></pre></div><p>在Debian系上，这些库由下面这些包提供：</p><div class=\"highlight\"><pre><code class=\"language-text\">libncurses5\nlibgcc1\nlibstdc++6\nlibc6\nlibx11-6\nlibxext6\nlibxrender1\nlibice6\nlibsm6\nlibgl1-mesa-glx\nlibglib2.0-0</code></pre></div><p>在RPM系上，这些库由下面这些包提供：</p><div class=\"highlight\"><pre><code class=\"language-text\">ncurses\nlibgcc\nlibstdc++\nglibc\nlibXext\nlibXrender\nlibICE\nlibSM\nmesa-libGL\nglib2</code></pre></div><p><b>对于2，manylinux1选择CentOS 5.11 发行版作为足够旧的标志。（是的，你一定已经猜到了，使用docker环境）：</b></p><p>上面所说的大多数库都使用了symbol versioning schemes 来提供后向兼容能力，在CentOS 5.11上，这些库的版本是：</p><div class=\"highlight\"><pre><code class=\"language-text\">GLIBC_2.5\nCXXABI_3.4.8\nGLIBCXX_3.4.9\nGCC_4.2.0</code></pre></div><p>因此，python wheel只能依赖这些库的这些版本：</p><div class=\"highlight\"><pre><code class=\"language-text\">GLIBC &lt;= 2.5\nCXXABI &lt;= 3.4.8\nGLIBCXX &lt;= 3.4.9\nGCC &lt;= 4.2.0</code></pre></div><p><b>最终，python_opencv 3.3.1.11就基于manylinux1编译的wheel来提供pip下载，其提供的预编译的ffmpeg库就基于manylinux1进行编译。</b></p><p>然后再看看本文前述部分提到的cv2.so所链接的那些库，是不是正是这里介绍的这些最小集合呢？！</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>性能！性能！性能！</b></h2><p>Gemfield发现，相比于<a href=\"https://zhuanlan.zhihu.com/p/30413043\" class=\"internal\">opencv读视频时的编码问题</a>这里面编译的cv2.so，在这个pip直接安装的3.3.1.11版本上，读h264视频的性能获得了成倍的提升（不严谨的说法），那么变化是什么呢？</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~$ python3\nPython <span class=\"m\">3</span>.6.3 <span class=\"o\">(</span>default, Oct  <span class=\"m\">3</span> <span class=\"m\">2017</span>, <span class=\"m\">21</span>:45:48<span class=\"o\">)</span> \n<span class=\"o\">[</span>GCC <span class=\"m\">7</span>.2.0<span class=\"o\">]</span> on linux\nType <span class=\"s2\">&#34;help&#34;</span>, <span class=\"s2\">&#34;copyright&#34;</span>, <span class=\"s2\">&#34;credits&#34;</span> or <span class=\"s2\">&#34;license&#34;</span> <span class=\"k\">for</span> more information.\n&gt;&gt;&gt; import cv2\n&gt;&gt;&gt; print<span class=\"o\">(</span>cv2.getBuildInformation<span class=\"o\">())</span>\n\nGeneral configuration <span class=\"k\">for</span> OpenCV <span class=\"m\">3</span>.4.0 <span class=\"o\">=====================================</span>\n  Version control:               <span class=\"m\">3</span>.4.0\n\n  Platform:\n    Timestamp:                   <span class=\"m\">2017</span>-12-28T20:15:36Z\n    Host:                        Linux <span class=\"m\">4</span>.4.0-101-generic x86_64\n    CMake:                       <span class=\"m\">3</span>.9.0\n    CMake generator:             Unix Makefiles\n    CMake build tool:            /usr/bin/gmake\n    Configuration:               Release\n\n  CPU/HW features:\n    Baseline:                    SSE SSE2 SSE3\n      requested:                 SSE3\n    Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2\n      requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2\n      SSE4_1 <span class=\"o\">(</span><span class=\"m\">3</span> files<span class=\"o\">)</span>:          + SSSE3 SSE4_1\n      SSE4_2 <span class=\"o\">(</span><span class=\"m\">1</span> files<span class=\"o\">)</span>:          + SSSE3 SSE4_1 POPCNT SSE4_2\n      FP16 <span class=\"o\">(</span><span class=\"m\">1</span> files<span class=\"o\">)</span>:            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX\n      AVX <span class=\"o\">(</span><span class=\"m\">5</span> files<span class=\"o\">)</span>:             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX\n      AVX2 <span class=\"o\">(</span><span class=\"m\">9</span> files<span class=\"o\">)</span>:            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2\n\n  C/C++:\n    Built as dynamic libs?:      NO\n   ......</code></pre></div><p>Gemfield将2次有区别的地方列出来：</p><p>1，Built as dynamic libs:    pip是NO，之前是YES；</p><p>2，C和C++FLAGS：pip是多了个-fdata-sections；</p><p>3，LINK FLAGS：pip多了-L/root/ffmpeg_build/lib；</p><p>4，Extra dependencies: </p><p>pip是</p><div class=\"highlight\"><pre><code class=\"language-text\">/opt/Qt4.8.7/lib/libQtGui.so\n/opt/Qt4.8.7/lib/libQtTest.so\n/opt/Qt4.8.7/lib/libQtCore.so\n/lib64/libz.so\n/opt/libjpeg-turbo/lib64/libjpeg.a \navcodec\navformat\navutil\nswscale\ndl\nm\npthread\nrt</code></pre></div><p>之前的版本只有</p><div class=\"highlight\"><pre><code class=\"language-text\">dl\nm\npthread\nrt</code></pre></div><p>5，3rdparty dependencies: </p><p>pip是</p><div class=\"highlight\"><pre><code class=\"language-text\">ittnotify libprotobuf libwebp libpng libtiff libjasper IlmImf</code></pre></div><p>之前的版本是空</p><p>总之，看起来，性能的主要差异来自于，一个是静态链接的opencv，一个是动态链接的opencv。</p><h2><b>使用Nvidia显卡进行h264的编解码会得到性能提升吗？</b></h2><p>很难。参考<a href=\"https://link.zhihu.com/?target=https%3A//trac.ffmpeg.org/wiki/HWAccelIntro\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HWAccelIntro - FFmpeg</a></p>", 
            "topic": [
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }, 
                {
                    "tag": "FFmpeg", 
                    "tagLink": "https://api.zhihu.com/topics/19608940"
                }, 
                {
                    "tag": "H.264 (MPEG-4 高级视频编码)", 
                    "tagLink": "https://api.zhihu.com/topics/19553936"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33949377", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "ssh-keygen生成的id_rsa文件的格式", 
            "content": "<h2><b>背景</b></h2><p>在Linux上我们来生成一对RSA的公钥和私钥的时候，我们通常使用下面的命令：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfeld:~$ ssh-keygen \nGenerating public/private rsa key pair.\nEnter file in which to save the key <span class=\"o\">(</span>/home/gemfield/.ssh/id_rsa<span class=\"o\">)</span>: \nCreated directory <span class=\"s1\">&#39;/home/gemfield/.ssh&#39;</span>.\nEnter passphrase <span class=\"o\">(</span>empty <span class=\"k\">for</span> no passphrase<span class=\"o\">)</span>: \nEnter same passphrase again: \nYour identification has been saved in /home/gemfield/.ssh/id_rsa.\nYour public key has been saved in /home/gemfield/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:/R8cHaF/fFHccc3GaPCTqHKpQxTO8mQLtx2wE+U4L3s gemfield@gemfeld.org\nThe key<span class=\"err\">&#39;</span>s randomart image is:\n+---<span class=\"o\">[</span>RSA <span class=\"m\">2048</span><span class=\"o\">]</span>----+\n<span class=\"p\">|</span>        +.. .. B*<span class=\"p\">|</span>\n<span class=\"p\">|</span>       o B   o+.@<span class=\"p\">|</span>\n<span class=\"p\">|</span>      o % o .o++ <span class=\"p\">|</span>\n<span class=\"p\">|</span>       O O +  .+o<span class=\"p\">|</span>\n<span class=\"p\">|</span>        S B   ..<span class=\"o\">=</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>       . * . . .o<span class=\"p\">|</span>\n<span class=\"p\">|</span>        + E . o  <span class=\"p\">|</span>\n<span class=\"p\">|</span>         o   . . <span class=\"p\">|</span>\n<span class=\"p\">|</span>              .  <span class=\"p\">|</span>\n+----<span class=\"o\">[</span>SHA256<span class=\"o\">]</span>-----+</code></pre></div><p>注意输出的内容中有这2句：</p><p>Your identification has been saved in /home/gemfield/.ssh/id_rsa.<br/>Your public key has been saved in /home/gemfield/.ssh/id_rsa.pub</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ ls -l .ssh\ntotal 8\n-rw------- 1 gemfield gemfield 1679 Feb 23 07:34 id_rsa\n-rw-r--r-- 1 gemfield gemfield  402 Feb 23 07:34 id_rsa.pub</code></pre></div><p>其中，/home/gemfield/.ssh/id_rsa.pub就是公钥文件。而/home/gemfield/.ssh/id_rsa文件中则包含了私钥信息。你可以从上面的命令行输出中看到这两个文件的权限都不一样。</p><h2><b>公钥(id_rsa.pub)</b></h2><p>1，首先来看下公钥文件的内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ cat ~/.ssh/id_rsa.pub \nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCd0w3NBkf7qoRIDoIEQslm2Ep3/kp/+U4HDgueJV8LmYSXFvk1VyLmnP8xDStoka8DNOAVFRv+1pR8sJxXlpVH+Ufy8unUBuIgZjjjd/Pt8ZRhXgAh6F0khyQLPt+rP4Wh+U/Z/ETdFsC5WSxuVND+DyZ0/Ez0b+bXolT3TMPWK8VghSoMd4vq5rC+urTLRgv5ULk9lbpmbdIGL8kKpxh0eME7EnEHpp4rkPoLjQ1ftGWJQvoDhal2dlruMsLdLq8WA4wZP6cinx8AKHFxIeBhtlAijvhBxrpr3PitNcV4FKmZcIPD6V8qrS4gguLR/a19wqulRirGlQEmFv3V2uE/ gemfield@gemfeld.org\ngemfield@gemfeld:~$</code></pre></div><p>2，公钥文件的内容由3个字段组成（使用空格分隔），其中第二个字段是公钥本身。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ awk &#39;{print $2}&#39; ~/.ssh/id_rsa.pub\nAAAAB3NzaC1yc2EAAAADAQABAAABAQCd0w3NBkf7qoRIDoIEQslm2Ep3/kp/+U4HDgueJV8LmYSXFvk1VyLmnP8xDStoka8DNOAVFRv+1pR8sJxXlpVH+Ufy8unUBuIgZjjjd/Pt8ZRhXgAh6F0khyQLPt+rP4Wh+U/Z/ETdFsC5WSxuVND+DyZ0/Ez0b+bXolT3TMPWK8VghSoMd4vq5rC+urTLRgv5ULk9lbpmbdIGL8kKpxh0eME7EnEHpp4rkPoLjQ1ftGWJQvoDhal2dlruMsLdLq8WA4wZP6cinx8AKHFxIeBhtlAijvhBxrpr3PitNcV4FKmZcIPD6V8qrS4gguLR/a19wqulRirGlQEmFv3V2uE/\ngemfield@gemfeld:~$</code></pre></div><p>3，id_rsa.pub文件里的公钥已经被base64编码了，gemfield先使用base64命令进行decode</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ awk &#39;{print $2}&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -C\n00000000  00 00 00 07 73 73 68 2d  72 73 61 00 00 00 03 01  |....ssh-rsa.....|\n00000010  00 01 00 00 01 01 00 9d  d3 0d cd 06 47 fb aa 84  |............G...|\n00000020  48 0e 82 04 42 c9 66 d8  4a 77 fe 4a 7f f9 4e 07  |H...B.f.Jw.J..N.|\n00000030  0e 0b 9e 25 5f 0b 99 84  97 16 f9 35 57 22 e6 9c  |...%_......5W&#34;..|\n00000040  ff 31 0d 2b 68 91 af 03  34 e0 15 15 1b fe d6 94  |.1.+h...4.......|\n00000050  7c b0 9c 57 96 95 47 f9  47 f2 f2 e9 d4 06 e2 20  ||..W..G.G...... |\n00000060  66 38 e3 77 f3 ed f1 94  61 5e 00 21 e8 5d 24 87  |f8.w....a^.!.]$.|\n00000070  24 0b 3e df ab 3f 85 a1  f9 4f d9 fc 44 dd 16 c0  |$.&gt;..?...O..D...|\n00000080  b9 59 2c 6e 54 d0 fe 0f  26 74 fc 4c f4 6f e6 d7  |.Y,nT...&amp;t.L.o..|\n00000090  a2 54 f7 4c c3 d6 2b c5  60 85 2a 0c 77 8b ea e6  |.T.L..+.`.*.w...|\n000000a0  b0 be ba b4 cb 46 0b f9  50 b9 3d 95 ba 66 6d d2  |.....F..P.=..fm.|\n000000b0  06 2f c9 0a a7 18 74 78  c1 3b 12 71 07 a6 9e 2b  |./....tx.;.q...+|\n000000c0  90 fa 0b 8d 0d 5f b4 65  89 42 fa 03 85 a9 76 76  |....._.e.B....vv|\n000000d0  5a ee 32 c2 dd 2e af 16  03 8c 19 3f a7 22 9f 1f  |Z.2........?.&#34;..|\n000000e0  00 28 71 71 21 e0 61 b6  50 22 8e f8 41 c6 ba 6b  |.(qq!.a.P&#34;..A..k|\n000000f0  dc f8 ad 35 c5 78 14 a9  99 70 83 c3 e9 5f 2a ad  |...5.x...p..._*.|\n00000100  2e 20 82 e2 d1 fd ad 7d  c2 ab a5 46 2a c6 95 01  |. .....}...F*...|\n00000110  26 16 fd d5 da e1 3f                              |&amp;.....?|\n00000117</code></pre></div><p>好了，现在就直观多了。</p><p>a, 前4个字节 (00 00 00 07) 说明了接下来的数据块是7个字节长，接下来的7个字节的内容就是73 73 68 2d 72 73 61, 正是字符串 &#34;ssh-rsa&#34; 的ASCII编码；</p><p>b, 再接下来4个字节（00 00 00 03）说明了接下来的数据块是3个字节长，接下来的4个字节的内容就是01 00 01，换算成十进制是65537,这个数字正是<b>exponent e</b>（参考<a href=\"https://zhuanlan.zhihu.com/p/33904845\" class=\"internal\">从简单数字到现代密码学</a>），一般来说，e都会选择65537；</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ echo &#34;$((16#010001))&#34;\n65537</code></pre></div><p>c, 再接下来4个字节（00 00 01 01）说明了接下来的数据快是257个字节长，这257个字节的内容是：009dd30dcd0647fbaa84480e820442c966d84a77fe4a7ff94e070e0b9e255f0b99849716f9355722e69cff310d2b6891af0334e015151bfed6947cb09c57969547f947f2f2e9d406e2206638e377f3edf194615e0021e85d2487240b3edfab3f85a1f94fd9fc44dd16c0b9592c6e54d0fe0f2674fc4cf46fe6d7a254f74cc3d62bc560852a0c778beae6b0bebab4cb460bf950b93d95ba666dd2062fc90aa7187478c13b127107a69e2b90fa0b8d0d5fb4658942fa0385a976765aee32c2dd2eaf16038c193fa7229f1f0028717121e061b650228ef841c6ba6bdcf8ad35c57814a9997083c3e95f2aad2e2082e2d1fdad7dc2aba5462ac695012616fdd5dae13f</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ N=$(awk &#39;{print $2}&#39; ~/.ssh/id_rsa.pub | base64 -d | hexdump -ve &#39;1/1 &#34;%.2x&#34;&#39;)\ngemfield@gemfeld:~$ echo ${N: -257*2}\n009dd30dcd0647fbaa84480e820442c966d84a77fe4a7ff94e070e0b9e255f0b99849716f9355722e69cff310d2b6891af0334e015151bfed6947cb09c57969547f947f2f2e9d406e2206638e377f3edf194615e0021e85d2487240b3edfab3f85a1f94fd9fc44dd16c0b9592c6e54d0fe0f2674fc4cf46fe6d7a254f74cc3d62bc560852a0c778beae6b0bebab4cb460bf950b93d95ba666dd2062fc90aa7187478c13b127107a69e2b90fa0b8d0d5fb4658942fa0385a976765aee32c2dd2eaf16038c193fa7229f1f0028717121e061b650228ef841c6ba6bdcf8ad35c57814a9997083c3e95f2aad2e2082e2d1fdad7dc2aba5462ac695012616fdd5dae13f</code></pre></div><p>这个大数字正是modulus N（参考<a href=\"https://zhuanlan.zhihu.com/p/33904845\" class=\"internal\">从简单数字到现代密码学</a>）。因为它是个有符号的数据，所以开头的00表示它是正整数，余下的256个字节说明了这个modulus N的长度有2048位，来自两个大质数p和q的乘积。这个时候，gemfield不禁回想起在本文背景中Linux console上ssh-keygen命令的输出有[RSA 2048]的字样，原来如此。</p><h2><b>私钥(id_rsa）</b></h2><p>私钥文件的内容就不能给人看了，不过gemfield这个是实验环境，就无所谓了。</p><p>id_rsa文件是base64编码的DER-encoded（Distinguished Encoding Rules，使用了 tag-length-value notation，妈呀，开发实现ss7协议的时候天天和这个玩意打交道）字符串，使用了ASN.1语法：</p><div class=\"highlight\"><pre><code class=\"language-text\">Version ::= INTEGER { two-prime(0), multi(1) }\n      (CONSTRAINED BY\n      {-- version must be multi if otherPrimeInfos present --})\n\n  RSAPrivateKey ::= SEQUENCE {\n      version           Version,\n      modulus           INTEGER,  -- n\n      publicExponent    INTEGER,  -- e\n      privateExponent   INTEGER,  -- d\n      prime1            INTEGER,  -- p\n      prime2            INTEGER,  -- q\n      exponent1         INTEGER,  -- d mod (p-1)\n      exponent2         INTEGER,  -- d mod (q-1)\n      coefficient       INTEGER,  -- (inverse of q) mod p\n      otherPrimeInfos   OtherPrimeInfos OPTIONAL\n  }</code></pre></div><p>1，首先来看看私钥文件的内容：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfeld:~$ cat ~/.ssh/id_rsa\n-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAndMNzQZH+6qESA6CBELJZthKd/5Kf/lOBw4LniVfC5mElxb5\nNVci5pz/MQ0raJGvAzTgFRUb/taUfLCcV5aVR/lH8vLp1AbiIGY443fz7fGUYV4A\nIehdJIckCz7fqz+FoflP2fxE3RbAuVksblTQ/g8mdPxM9G/m16JU90zD1ivFYIUq\nDHeL6uawvrq0y0YL+VC5PZW6Zm3SBi/JCqcYdHjBOxJxB6aeK5D6C40NX7RliUL6\nA4WpdnZa7jLC3S6vFgOMGT+nIp8fAChxcSHgYbZQIo74Qca6a9z4rTXFeBSpmXCD\nw+lfKq0uIILi0f2tfcKrpUYqxpUBJhb91drhPwIDAQABAoIBAD+nvXxBGU1vNBVg\nDJ6tVVAu0rJdFS1Sn18HEjaB+jjSfYD3GiKid4guMFtXZXeysrUHYY3/SqBZaeB0\n10oYiTNTXuqlgRwsfo30zOMqIW+KLX+sCz+h2dd+zlHe1RXb9AklZkiUkC3gHHFl\nfx8tBHJEKA2tKVi5vZChf8WS57X8pWT+GAGjJ/Ei3PjrO5OJ8OKemhY1/91S9mMW\nd45dG+/LLRgF7EuTImbhmiQi0nr2S4Xy1WiazweM0EEn9E/XVoSysUDVV2G5aHHA\nE5oHtj/0ZPE7/zTYNKHi2+w1vHMJUfGkOHdw54WKoVKSIBanD6/wHmYK38tVyNkr\nh79ybjECgYEAyZtjTYzn5yp+ACTrX0z905hqqrNCltlXiqmsFPBfNWmpq91GpkgF\nQEyvF9Q0MFA/vflNfZwKrB25INcu/y7+J5BAN6QLAIpMmfGNpnDI071G7aoNDU4I\nuSm34AhcM8ba/i+noz30xBbu5zxhSjSmKl6SYR9ZF+FKeu5L+GqE3AcCgYEAyGew\nH06cu1zolkyA2ktapXuV3nTwk0XHb+RdjuySTW5vnvAdZMCfrAv0pxe3eonRATP8\n7h6g96/sgCkB1SJwvI51PcfNVxncA54ITlY199UxMIAcVrKgexfTtN6r/FqYraQf\n7G3ikC/gVwO1kJaILONHqseJ0y1K3wTWWm7ocwkCgYEAnEzc8w2v6Lc30nLNDCiL\njRVYdRjfIkZEKVub7uvgVG+jvHujv1yMvan2ATpib6Z3lJgILL7iQ0gT89MAO5S6\nNAAQ2VJTuUp/UsZD9GryN75BlBZHYi5CcxNV29l/aiDcPT7C77sj3TaOZzWXk8k3\nnheN0sBT+UCP1riSq3ghotcCgYEAxCbI+julqLXtaX8D96Yd2S83p39qIZwA8wHg\nmQ3wvR1E35pCCuWG44zoL8xE6AmQqs7J1//eqdBleaOpiYWmNshw9MFluMU01c2O\nb65uMF9ZQBGEq083SIQv0S7Jw7yhCARGwtFjGqHhwQl+Y0ETlGv5L60St8HzMIq5\ni9ZWapECgYEAt4jizTpFET+ouSwq3iz5JG+GlB8vFrxKow9s3/fRQLUg7urptB7t\nRwxwXd7fBMdyc8h+OCftiPOHpuA0SY0rVuqv5y2MFXxYcQIeRQzZ69psGbi69/Vw\n6K+1DRknHOSqo8rjTUQb2Nxd38H75IkD6a6+ezvEP1740+iE5V5AzKM<span class=\"o\">=</span>\n-----END RSA PRIVATE KEY-----</code></pre></div><p>呃，我们把中间那部分base64编码的私钥信息decode出来，看看里面都包含了什么。</p><p>2，解码私钥：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ cat ~/.ssh/id_rsa | grep -v -- &#39;--&#39;|  base64 -d | hexdump -C\n00000000  30 82 04 a5 02 01 00 02  82 01 01 00 9d d3 0d cd  |0...............|\n00000010  06 47 fb aa 84 48 0e 82  04 42 c9 66 d8 4a 77 fe  |.G...H...B.f.Jw.|\n00000020  4a 7f f9 4e 07 0e 0b 9e  25 5f 0b 99 84 97 16 f9  |J..N....%_......|\n00000030  35 57 22 e6 9c ff 31 0d  2b 68 91 af 03 34 e0 15  |5W&#34;...1.+h...4..|\n00000040  15 1b fe d6 94 7c b0 9c  57 96 95 47 f9 47 f2 f2  |.....|..W..G.G..|\n00000050  e9 d4 06 e2 20 66 38 e3  77 f3 ed f1 94 61 5e 00  |.... f8.w....a^.|\n00000060  21 e8 5d 24 87 24 0b 3e  df ab 3f 85 a1 f9 4f d9  |!.]$.$.&gt;..?...O.|\n00000070  fc 44 dd 16 c0 b9 59 2c  6e 54 d0 fe 0f 26 74 fc  |.D....Y,nT...&amp;t.|\n00000080  4c f4 6f e6 d7 a2 54 f7  4c c3 d6 2b c5 60 85 2a  |L.o...T.L..+.`.*|\n00000090  0c 77 8b ea e6 b0 be ba  b4 cb 46 0b f9 50 b9 3d  |.w........F..P.=|\n000000a0  95 ba 66 6d d2 06 2f c9  0a a7 18 74 78 c1 3b 12  |..fm../....tx.;.|\n000000b0  71 07 a6 9e 2b 90 fa 0b  8d 0d 5f b4 65 89 42 fa  |q...+....._.e.B.|\n000000c0  03 85 a9 76 76 5a ee 32  c2 dd 2e af 16 03 8c 19  |...vvZ.2........|\n000000d0  3f a7 22 9f 1f 00 28 71  71 21 e0 61 b6 50 22 8e  |?.&#34;...(qq!.a.P&#34;.|\n000000e0  f8 41 c6 ba 6b dc f8 ad  35 c5 78 14 a9 99 70 83  |.A..k...5.x...p.|\n000000f0  c3 e9 5f 2a ad 2e 20 82  e2 d1 fd ad 7d c2 ab a5  |.._*.. .....}...|\n00000100  46 2a c6 95 01 26 16 fd  d5 da e1 3f 02 03 01 00  |F*...&amp;.....?....|\n00000110  01 02 82 01 00 3f a7 bd  7c 41 19 4d 6f 34 15 60  |.....?..|A.Mo4.`|\n00000120  0c 9e ad 55 50 2e d2 b2  5d 15 2d 52 9f 5f 07 12  |...UP...].-R._..|\n00000130  36 81 fa 38 d2 7d 80 f7  1a 22 a2 77 88 2e 30 5b  |6..8.}...&#34;.w..0[|\n00000140  57 65 77 b2 b2 b5 07 61  8d ff 4a a0 59 69 e0 74  |Wew....a..J.Yi.t|\n00000150  d7 4a 18 89 33 53 5e ea  a5 81 1c 2c 7e 8d f4 cc  |.J..3S^....,~...|\n00000160  e3 2a 21 6f 8a 2d 7f ac  0b 3f a1 d9 d7 7e ce 51  |.*!o.-...?...~.Q|\n00000170  de d5 15 db f4 09 25 66  48 94 90 2d e0 1c 71 65  |......%fH..-..qe|\n00000180  7f 1f 2d 04 72 44 28 0d  ad 29 58 b9 bd 90 a1 7f  |..-.rD(..)X.....|\n00000190  c5 92 e7 b5 fc a5 64 fe  18 01 a3 27 f1 22 dc f8  |......d....&#39;.&#34;..|\n000001a0  eb 3b 93 89 f0 e2 9e 9a  16 35 ff dd 52 f6 63 16  |.;.......5..R.c.|\n000001b0  77 8e 5d 1b ef cb 2d 18  05 ec 4b 93 22 66 e1 9a  |w.]...-...K.&#34;f..|\n000001c0  24 22 d2 7a f6 4b 85 f2  d5 68 9a cf 07 8c d0 41  |$&#34;.z.K...h.....A|\n000001d0  27 f4 4f d7 56 84 b2 b1  40 d5 57 61 b9 68 71 c0  |&#39;.O.V...@.Wa.hq.|\n000001e0  13 9a 07 b6 3f f4 64 f1  3b ff 34 d8 34 a1 e2 db  |....?.d.;.4.4...|\n000001f0  ec 35 bc 73 09 51 f1 a4  38 77 70 e7 85 8a a1 52  |.5.s.Q..8wp....R|\n00000200  92 20 16 a7 0f af f0 1e  66 0a df cb 55 c8 d9 2b  |. ......f...U..+|\n00000210  87 bf 72 6e 31 02 81 81  00 c9 9b 63 4d 8c e7 e7  |..rn1......cM...|\n00000220  2a 7e 00 24 eb 5f 4c fd  d3 98 6a aa b3 42 96 d9  |*~.$._L...j..B..|\n00000230  57 8a a9 ac 14 f0 5f 35  69 a9 ab dd 46 a6 48 05  |W....._5i...F.H.|\n00000240  40 4c af 17 d4 34 30 50  3f bd f9 4d 7d 9c 0a ac  |@L...40P?..M}...|\n00000250  1d b9 20 d7 2e ff 2e fe  27 90 40 37 a4 0b 00 8a  |.. .....&#39;.@7....|\n00000260  4c 99 f1 8d a6 70 c8 d3  bd 46 ed aa 0d 0d 4e 08  |L....p...F....N.|\n00000270  b9 29 b7 e0 08 5c 33 c6  da fe 2f a7 a3 3d f4 c4  |.)...\\3.../..=..|\n00000280  16 ee e7 3c 61 4a 34 a6  2a 5e 92 61 1f 59 17 e1  |...&lt;aJ4.*^.a.Y..|\n00000290  4a 7a ee 4b f8 6a 84 dc  07 02 81 81 00 c8 67 b0  |Jz.K.j........g.|\n000002a0  1f 4e 9c bb 5c e8 96 4c  80 da 4b 5a a5 7b 95 de  |.N..\\..L..KZ.{..|\n000002b0  74 f0 93 45 c7 6f e4 5d  8e ec 92 4d 6e 6f 9e f0  |t..E.o.]...Mno..|\n000002c0  1d 64 c0 9f ac 0b f4 a7  17 b7 7a 89 d1 01 33 fc  |.d........z...3.|\n000002d0  ee 1e a0 f7 af ec 80 29  01 d5 22 70 bc 8e 75 3d  |.......)..&#34;p..u=|\n000002e0  c7 cd 57 19 dc 03 9e 08  4e 56 35 f7 d5 31 30 80  |..W.....NV5..10.|\n000002f0  1c 56 b2 a0 7b 17 d3 b4  de ab fc 5a 98 ad a4 1f  |.V..{......Z....|\n00000300  ec 6d e2 90 2f e0 57 03  b5 90 96 88 2c e3 47 aa  |.m../.W.....,.G.|\n00000310  c7 89 d3 2d 4a df 04 d6  5a 6e e8 73 09 02 81 81  |...-J...Zn.s....|\n00000320  00 9c 4c dc f3 0d af e8  b7 37 d2 72 cd 0c 28 8b  |..L......7.r..(.|\n00000330  8d 15 58 75 18 df 22 46  44 29 5b 9b ee eb e0 54  |..Xu..&#34;FD)[....T|\n00000340  6f a3 bc 7b a3 bf 5c 8c  bd a9 f6 01 3a 62 6f a6  |o..{..\\.....:bo.|\n00000350  77 94 98 08 2c be e2 43  48 13 f3 d3 00 3b 94 ba  |w...,..CH....;..|\n00000360  34 00 10 d9 52 53 b9 4a  7f 52 c6 43 f4 6a f2 37  |4...RS.J.R.C.j.7|\n00000370  be 41 94 16 47 62 2e 42  73 13 55 db d9 7f 6a 20  |.A..Gb.Bs.U...j |\n00000380  dc 3d 3e c2 ef bb 23 dd  36 8e 67 35 97 93 c9 37  |.=&gt;...#.6.g5...7|\n00000390  9e 17 8d d2 c0 53 f9 40  8f d6 b8 92 ab 78 21 a2  |.....S.@.....x!.|\n000003a0  d7 02 81 81 00 c4 26 c8  fa 3b a5 a8 b5 ed 69 7f  |......&amp;..;....i.|\n000003b0  03 f7 a6 1d d9 2f 37 a7  7f 6a 21 9c 00 f3 01 e0  |...../7..j!.....|\n000003c0  99 0d f0 bd 1d 44 df 9a  42 0a e5 86 e3 8c e8 2f  |.....D..B....../|\n000003d0  cc 44 e8 09 90 aa ce c9  d7 ff de a9 d0 65 79 a3  |.D...........ey.|\n000003e0  a9 89 85 a6 36 c8 70 f4  c1 65 b8 c5 34 d5 cd 8e  |....6.p..e..4...|\n000003f0  6f ae 6e 30 5f 59 40 11  84 ab 4f 37 48 84 2f d1  |o.n0_Y@...O7H./.|\n00000400  2e c9 c3 bc a1 08 04 46  c2 d1 63 1a a1 e1 c1 09  |.......F..c.....|\n00000410  7e 63 41 13 94 6b f9 2f  ad 12 b7 c1 f3 30 8a b9  |~cA..k./.....0..|\n00000420  8b d6 56 6a 91 02 81 81  00 b7 88 e2 cd 3a 45 11  |..Vj.........:E.|\n00000430  3f a8 b9 2c 2a de 2c f9  24 6f 86 94 1f 2f 16 bc  |?..,*.,.$o.../..|\n00000440  4a a3 0f 6c df f7 d1 40  b5 20 ee ea e9 b4 1e ed  |J..l...@. ......|\n00000450  47 0c 70 5d de df 04 c7  72 73 c8 7e 38 27 ed 88  |G.p]....rs.~8&#39;..|\n00000460  f3 87 a6 e0 34 49 8d 2b  56 ea af e7 2d 8c 15 7c  |....4I.+V...-..||\n00000470  58 71 02 1e 45 0c d9 eb  da 6c 19 b8 ba f7 f5 70  |Xq..E....l.....p|\n00000480  e8 af b5 0d 19 27 1c e4  aa a3 ca e3 4d 44 1b d8  |.....&#39;......MD..|\n00000490  dc 5d df c1 fb e4 89 03  e9 ae be 7b 3b c4 3f 5e  |.].........{;.?^|\n000004a0  f8 d3 e8 84 e5 5e 40 cc  a3                       |.....^@..|\n000004a9</code></pre></div><p>好了，这下又直观多了：</p><p>a，第一个字节为30，这是一个SEQUENCE tag，是ASN.1 中sequence tag的值；</p><p>b，接下来是82,指明后面2个字节的长度信息是long form；</p><p>c，接下来2个字节04a5指明了整个sequence的长度，为1189个字节；也就是说04a5后面还有1189个字节的信息：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ cat ~/.ssh/id_rsa | grep -v -- &#39;--&#39;|  base64 -d | hexdump -ve &#39;1/1 &#34;%.2x&#34;&#39; | wc -c\n2386\ngemfield@gemfeld:~$ echo $((2386/2))\n1193</code></pre></div><p>可以看到私钥信息一共是1193个字节，除去已经说过的4个字节，后面正好就是1189个字节；</p><p>d，接下来一组02 01 00，02是ASN.1 中int tag，01是长度，所以后面的1个字节00就是值，该值为0指明了RSA的版本号，意味着该版本中 RSA的私钥使用了2个质数；</p><p>e，接下来02,同理，表示int tag；接下来82表明后面是long form，该格式一味着后面2个字节是长度信息，于是接下来有01 01，说明后面是257个字节的信息，这个正是我们的modulus N；</p><p>f，modules N之后，根据本节开始部分给出的格式，后面的内容依次是：</p><ul><li>publicExponent    e</li><li>privateExponent   d</li><li>prime1            第一个大质数p</li><li>prime2            第二个大质数q</li><li>exponent1         d mod (p-1)，加密解密无用</li><li>exponent2         d mod (q-1)，加密解密无用</li><li>coefficient      (inverse of q) mod p</li></ul><p>其中，只有N、e、d会被直接用于加密解密，而后面的prime1、prime2、exponent1、exponent2、coefficient只是用来校验。事实上，我们可以使用openssl命令直接看这个文件的结构：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfeld:~$ openssl rsa -text -noout &lt; ~/.ssh/id_rsa\nPrivate-Key: (2048 bit)\nmodulus:\n    00:9d:d3:0d:cd:06:47:fb:aa:84:48:0e:82:04:42:\n    c9:66:d8:4a:77:fe:4a:7f:f9:4e:07:0e:0b:9e:25:\n    5f:0b:99:84:97:16:f9:35:57:22:e6:9c:ff:31:0d:\n    2b:68:91:af:03:34:e0:15:15:1b:fe:d6:94:7c:b0:\n    9c:57:96:95:47:f9:47:f2:f2:e9:d4:06:e2:20:66:\n    38:e3:77:f3:ed:f1:94:61:5e:00:21:e8:5d:24:87:\n    24:0b:3e:df:ab:3f:85:a1:f9:4f:d9:fc:44:dd:16:\n    c0:b9:59:2c:6e:54:d0:fe:0f:26:74:fc:4c:f4:6f:\n    e6:d7:a2:54:f7:4c:c3:d6:2b:c5:60:85:2a:0c:77:\n    8b:ea:e6:b0:be:ba:b4:cb:46:0b:f9:50:b9:3d:95:\n    ba:66:6d:d2:06:2f:c9:0a:a7:18:74:78:c1:3b:12:\n    71:07:a6:9e:2b:90:fa:0b:8d:0d:5f:b4:65:89:42:\n    fa:03:85:a9:76:76:5a:ee:32:c2:dd:2e:af:16:03:\n    8c:19:3f:a7:22:9f:1f:00:28:71:71:21:e0:61:b6:\n    50:22:8e:f8:41:c6:ba:6b:dc:f8:ad:35:c5:78:14:\n    a9:99:70:83:c3:e9:5f:2a:ad:2e:20:82:e2:d1:fd:\n    ad:7d:c2:ab:a5:46:2a:c6:95:01:26:16:fd:d5:da:\n    e1:3f\npublicExponent: 65537 (0x10001)\nprivateExponent:\n    3f:a7:bd:7c:41:19:4d:6f:34:15:60:0c:9e:ad:55:\n    50:2e:d2:b2:5d:15:2d:52:9f:5f:07:12:36:81:fa:\n    38:d2:7d:80:f7:1a:22:a2:77:88:2e:30:5b:57:65:\n    77:b2:b2:b5:07:61:8d:ff:4a:a0:59:69:e0:74:d7:\n    4a:18:89:33:53:5e:ea:a5:81:1c:2c:7e:8d:f4:cc:\n    e3:2a:21:6f:8a:2d:7f:ac:0b:3f:a1:d9:d7:7e:ce:\n    51:de:d5:15:db:f4:09:25:66:48:94:90:2d:e0:1c:\n    71:65:7f:1f:2d:04:72:44:28:0d:ad:29:58:b9:bd:\n    90:a1:7f:c5:92:e7:b5:fc:a5:64:fe:18:01:a3:27:\n    f1:22:dc:f8:eb:3b:93:89:f0:e2:9e:9a:16:35:ff:\n    dd:52:f6:63:16:77:8e:5d:1b:ef:cb:2d:18:05:ec:\n    4b:93:22:66:e1:9a:24:22:d2:7a:f6:4b:85:f2:d5:\n    68:9a:cf:07:8c:d0:41:27:f4:4f:d7:56:84:b2:b1:\n    40:d5:57:61:b9:68:71:c0:13:9a:07:b6:3f:f4:64:\n    f1:3b:ff:34:d8:34:a1:e2:db:ec:35:bc:73:09:51:\n    f1:a4:38:77:70:e7:85:8a:a1:52:92:20:16:a7:0f:\n    af:f0:1e:66:0a:df:cb:55:c8:d9:2b:87:bf:72:6e:\n    31\nprime1:\n    00:c9:9b:63:4d:8c:e7:e7:2a:7e:00:24:eb:5f:4c:\n    fd:d3:98:6a:aa:b3:42:96:d9:57:8a:a9:ac:14:f0:\n    5f:35:69:a9:ab:dd:46:a6:48:05:40:4c:af:17:d4:\n    34:30:50:3f:bd:f9:4d:7d:9c:0a:ac:1d:b9:20:d7:\n    2e:ff:2e:fe:27:90:40:37:a4:0b:00:8a:4c:99:f1:\n    8d:a6:70:c8:d3:bd:46:ed:aa:0d:0d:4e:08:b9:29:\n    b7:e0:08:5c:33:c6:da:fe:2f:a7:a3:3d:f4:c4:16:\n    ee:e7:3c:61:4a:34:a6:2a:5e:92:61:1f:59:17:e1:\n    4a:7a:ee:4b:f8:6a:84:dc:07\nprime2:\n    00:c8:67:b0:1f:4e:9c:bb:5c:e8:96:4c:80:da:4b:\n    5a:a5:7b:95:de:74:f0:93:45:c7:6f:e4:5d:8e:ec:\n    92:4d:6e:6f:9e:f0:1d:64:c0:9f:ac:0b:f4:a7:17:\n    b7:7a:89:d1:01:33:fc:ee:1e:a0:f7:af:ec:80:29:\n    01:d5:22:70:bc:8e:75:3d:c7:cd:57:19:dc:03:9e:\n    08:4e:56:35:f7:d5:31:30:80:1c:56:b2:a0:7b:17:\n    d3:b4:de:ab:fc:5a:98:ad:a4:1f:ec:6d:e2:90:2f:\n    e0:57:03:b5:90:96:88:2c:e3:47:aa:c7:89:d3:2d:\n    4a:df:04:d6:5a:6e:e8:73:09\nexponent1:\n    00:9c:4c:dc:f3:0d:af:e8:b7:37:d2:72:cd:0c:28:\n    8b:8d:15:58:75:18:df:22:46:44:29:5b:9b:ee:eb:\n    e0:54:6f:a3:bc:7b:a3:bf:5c:8c:bd:a9:f6:01:3a:\n    62:6f:a6:77:94:98:08:2c:be:e2:43:48:13:f3:d3:\n    00:3b:94:ba:34:00:10:d9:52:53:b9:4a:7f:52:c6:\n    43:f4:6a:f2:37:be:41:94:16:47:62:2e:42:73:13:\n    55:db:d9:7f:6a:20:dc:3d:3e:c2:ef:bb:23:dd:36:\n    8e:67:35:97:93:c9:37:9e:17:8d:d2:c0:53:f9:40:\n    8f:d6:b8:92:ab:78:21:a2:d7\nexponent2:\n    00:c4:26:c8:fa:3b:a5:a8:b5:ed:69:7f:03:f7:a6:\n    1d:d9:2f:37:a7:7f:6a:21:9c:00:f3:01:e0:99:0d:\n    f0:bd:1d:44:df:9a:42:0a:e5:86:e3:8c:e8:2f:cc:\n    44:e8:09:90:aa:ce:c9:d7:ff:de:a9:d0:65:79:a3:\n    a9:89:85:a6:36:c8:70:f4:c1:65:b8:c5:34:d5:cd:\n    8e:6f:ae:6e:30:5f:59:40:11:84:ab:4f:37:48:84:\n    2f:d1:2e:c9:c3:bc:a1:08:04:46:c2:d1:63:1a:a1:\n    e1:c1:09:7e:63:41:13:94:6b:f9:2f:ad:12:b7:c1:\n    f3:30:8a:b9:8b:d6:56:6a:91\ncoefficient:\n    00:b7:88:e2:cd:3a:45:11:3f:a8:b9:2c:2a:de:2c:\n    f9:24:6f:86:94:1f:2f:16:bc:4a:a3:0f:6c:df:f7:\n    d1:40:b5:20:ee:ea:e9:b4:1e:ed:47:0c:70:5d:de:\n    df:04:c7:72:73:c8:7e:38:27:ed:88:f3:87:a6:e0:\n    34:49:8d:2b:56:ea:af:e7:2d:8c:15:7c:58:71:02:\n    1e:45:0c:d9:eb:da:6c:19:b8:ba:f7:f5:70:e8:af:\n    b5:0d:19:27:1c:e4:aa:a3:ca:e3:4d:44:1b:d8:dc:\n    5d:df:c1:fb:e4:89:03:e9:ae:be:7b:3b:c4:3f:5e:\n    f8:d3:e8:84:e5:5e:40:cc:a3</code></pre></div><h2><b>最后</b></h2><p>这个星球上使用最多的加密算法，就是仰仗于大质数很难分解，真是神奇的数学！</p>", 
            "topic": [
                {
                    "tag": "RSA 加密", 
                    "tagLink": "https://api.zhihu.com/topics/19713362"
                }, 
                {
                    "tag": "Keygen", 
                    "tagLink": "https://api.zhihu.com/topics/19670955"
                }, 
                {
                    "tag": "非对称式加密", 
                    "tagLink": "https://api.zhihu.com/topics/20025123"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33978760", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 2, 
            "title": "使用ssh进行X协议的转发（和NX的比较）", 
            "content": "<h2><b>背景</b></h2><p>至少到目前为止（2018年2月24日），Linux上的图形系统都依赖于X。gemfield预计各个发行版到wayland的迁移还得到2020年才成熟，那时候我们就是全面小康社会了。X是个CS架构，有客户端和服务端。这就神奇了，因为这种架构的存在，X的客户端和服务端可以不在同一台机器上。有的时候这种能力非常有用。</p><p>一般来说，X的客户端部分一般都使用的是libxcb（更早些时候是xlib）这样的库，其实主要的图形程序也不是直接使用libxcb或者xlib的，而是使用更流行的封装，比如Qt或者gtk。而服务端则是Xorg进程：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ThinkPad-X1C:~$ ps -ef |grep Xorg\nroot      1002   807  0 2月16 tty7    01:23:43 /usr/lib/xorg/Xorg -nolisten tcp -auth /var/run/sddm/{ab81e385-8f3c-4f6c-881d-a2c8d17bbbef} -background none -noreset -displayfd 17 vt7</code></pre></div><p>X采用C/S模型实现了一个X server 和多个应用程序（client）通信。server接收client的请求绘制窗口，并将来自鼠标、键盘等设备的输入传递给client。</p><p>现在的发行版默认情况下，Xorg这个server进程只接收本机的client。但是通过ssh建立隧道进行X协议的转发就可以克服这个障碍。要转发X11，我们需要在ssh的客户端和服务端都开启支持x11的功能，注意了，是ssh的客户端和服务端，从X协议的视角出发，它们正好是相反的。</p><h2><b>设置</b></h2><p><b>在ssh客户端部分(也就是X的Server端)</b>，如果是Linux系统的话，事情就简单了。直接使用ssh -X参数即可。如果想要省掉每次都敲-X这个麻烦，则可以在~/.ssh/config中配置ForwardX11使得-X变成默认行为。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ssh -X ai.gemfield.org\nWelcome to Ubuntu 17.10 (GNU/Linux 4.13.0-32-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n * Meltdown, Spectre and Ubuntu: What are the attack vectors,\n   how the fixes work, and everything else you need to know\n   - https://ubu.one/u2Know\n\n0 packages can be updated.\n0 updates are security updates.\n\nLast login: Sat Feb 24 09:52:30 2018 from 192.168.1.119\n/usr/bin/xauth:  /home/gemfield/.Xauthority not writable, changes will be ignored\ngemfield@ai:~$ which xauth\n/usr/bin/xauth</code></pre></div><p>如果是Windows系统，麻烦就来了。因为。。。windows没有X Server 啊，所以你得安装个X Server在Windows上的实现，比如Xming, 然后启动X server；另外，windows没有原生的ssh啊，所以你还得安装个ssh的客户端，比如putty。然后相关的设置你自己搜下吧，原理类似。</p><p><b>在ssh的服务端部分（也就是X的客户端）</b>，必须保证xauth是在PATH中的，一般情况下都是满足的。然后必须在/etc/ssh/sshd_config文件中将X11Forwarding打开（默认是不打开的）。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ grep X11 -n /etc/ssh/sshd_config\n89:X11Forwarding yes</code></pre></div><p>使用ssh -X登陆后，ssh会在当前的会话中自动设置环境变量：DISPLAY=localhost:10.0，不需要我们手动介入。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ echo $DISPLAY\nlocalhost:10.0</code></pre></div><p>现在就可以启动个图形程序试试了：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ kinfocenter</code></pre></div><h2><b>错误处理</b></h2><p>当然有时候不会这么顺利，比如会出现下面这样的情况：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ kinfocenter \nX11 connection rejected because of wrong authentication.\nQXcbConnection: Could not connect to display localhost:10.0\nAborted (core dumped)</code></pre></div><p>那么为什么会报错：X11 connection rejected because of wrong authentication ？</p><p>我们可以使用-v参数来进行debug：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ssh -X -v ai.gemfield.org\nOpenSSH_7.5p1 Ubuntu-10ubuntu0.1, OpenSSL 1.0.2g  1 Mar 2016\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: /etc/ssh/ssh_config line 19: Applying options for *\ndebug1: Connecting to ai.gemfield.org [192.168.1.188] port 22.\ndebug1: Connection established.\n......\nLast login: Sat Feb 24 16:03:05 2018 from 192.168.1.119\n\n/usr/bin/xauth:  timeout in locking authority file /home/gemfield/.Xauthority\ngemfield@ai:~$</code></pre></div><p>可以看到问题就出现在：/usr/bin/xauth:  timeout in locking authority file /home/gemfield/.Xauthority，这一定是权限问题了。立马查看这个文件的权限：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ls -l /home/gemfield/.Xauthority\n-rw------- 1 root root 96 1月   5 11:42 /home/gemfield/.Xauthority</code></pre></div><p>我的天啊，这个文件怎么是root产生的呢？过去肯定发生了什么混乱不堪的事情，所以才有今天的错误！把/home/gemfield/.Xauthority删除掉出新使用gemfield用户进行touch，结果就好了。</p><p>有个诀窍，如果还是各种出错的花，可以使用strace命令探测哪个系统调用出错了：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ strace xauth list 2&gt;&amp;1 |grep -E &#34;^stat|^access&#34;\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.preload&#34;, R_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\naccess(&#34;/etc/ld.so.nohwcap&#34;, F_OK)      = -1 ENOENT (No such file or directory)\nstat(&#34;/home/gemfield/.Xauthority-c&#34;, 0x7ffc764cd060) = -1 ENOENT (No such file or directory)\nstatfs(&#34;/home/gemfield/.Xauthority-c&#34;, {f_type=EXT2_SUPER_MAGIC, f_bsize=4096, f_blocks=59699623, f_bfree=13717887, f_bavail=10667878, f_files=15237120, f_ffree=13507556, f_fsid={val=[776034305, 2830689012]}, f_namelen=255, f_frsize=4096, f_flags=ST_VALID|ST_RELATIME}) = 0\nstat(&#34;/home/gemfield/.Xauthority-c&#34;, {st_mode=S_IFREG|0600, st_size=0, ...}) = 0\naccess(&#34;/sys/fs/ext4/nvme0n1p2&#34;, F_OK)  = 0\naccess(&#34;/home/gemfield/.Xauthority&#34;, F_OK) = 0\naccess(&#34;/home/gemfield/.Xauthority&#34;, W_OK) = 0\ngemfield@ai:~$</code></pre></div><p>但是你要能够区分出哪个是真正的致命的错误。</p><h2><b>速度问题</b></h2><p>当然了，在欢呼图形程序能够显示在另外的机器上的时候，悲伤也一并来了：它太慢了！！！这个时候，我们有几种方案：</p><p><b>1，还是X over ssh，但是我们启用压缩：</b></p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ThinkPad-X1C:~$ ssh -X -C  ai.gemfield.org</code></pre></div><p>再进一步的话（当然这是可选的），在登录到服务器后，我们启动图形程序的时候，将标准错误扔掉：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ dolphin 2&gt;/dev/null</code></pre></div><p>或者在ssh客户端机器上直接这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ssh -X -C -n ai.gemfield.org dolphin 2&gt;/dev/null</code></pre></div><p><b>2，使用vnc：</b></p><p>gemfield一般使用tigervncserver，但是不知道为什么，在安装有NVIDIA专属驱动的机器上，vncserver不能启动X会话，至今还没找到原因。</p><p>另外，chrome浏览器商店里可以下载安装realvnc的客户端！</p><p>另外，KDE自带KRDC也支持VNC！</p><p><b>3，使用NoMachine的NX：</b></p><p>下载NoMachine 客户端：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ThinkPad-X1C:~$ wget http://download.nomachine.com/download/6.0/Linux/nomachine-enterprise-client_6.0.78_1_amd64.deb</code></pre></div><p>安装客户端：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~/下载$ sudo dpkg -i nomachine-enterprise-client_6.0.78_1_amd64.deb\n[sudo] gemfield 的密码： \n正在选中未选择的软件包 nomachine-enterprise-client。\n(正在读取数据库 ... 系统当前共安装有 462343 个文件和目录。)\n正准备解包 nomachine-enterprise-client_6.0.78_1_amd64.deb  ...\n正在解包 nomachine-enterprise-client (6.0.78-1) ...\n正在设置 nomachine-enterprise-client (6.0.78-1) ...\nNX&gt; 700 Starting install at: 六 2月 24 17:36:19 2018.\nNX&gt; 700 Installing: nxclient version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 Compiling the USB module.\nNX&gt; 700 Installing: nxplayer version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 To connect the remote printer to the local desktop,\nNX&gt; 700 the user account must be a member of the CUPS System Group: lpadmin.\nNX&gt; 700 Install completed at: 六 2月 24 17:36:23 2018.</code></pre></div><p>下载NoMachine 服务端：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@edge:~$ wget http://download.nomachine.com/download/6.0/Linux/nomachine_6.0.78_1_amd64.deb</code></pre></div><p>安装服务端：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@edge:~$ sudo dpkg -i nomachine_6.0.78_1_amd64.deb\n[sudo] password for gemfield: \n正在选中未选择的软件包 nomachine。\n(正在读取数据库 ... 系统当前共安装有 284060 个文件和目录。)\n正准备解包 nomachine_6.0.78_1_amd64.deb  ...\n正在解包 nomachine (6.0.78-1) ...\n正在设置 nomachine (6.0.78-1) ...\nNX&gt; 700 Starting install at: 六 2月 24 17:23:08 2018.\nNX&gt; 700 Installing: nxclient version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 Compiling the USB module.\nNX&gt; 700 Installing: nxplayer version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 To connect the remote printer to the local desktop,\nNX&gt; 700 the user account must be a member of the CUPS System Group: lpadmin.\nNX&gt; 700 Installing: nxnode version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 Creating configuration in: /usr/NX/etc/node.cfg.\nNX&gt; 700 Installing: nxserver version: 6.0.78.\nNX&gt; 700 Using installation profile: Ubuntu.\nNX&gt; 700 Install log is: /usr/NX/var/log/nxinstall.log.\nNX&gt; 700 Creating configuration in: /usr/NX/etc/server.cfg.\nNX&gt; 700 Install completed at: 六 2月 24 17:23:56 2018.\nNX&gt; 700 NoMachine was configured to run the following services:\nNX&gt; 700 NX service on port: 4000</code></pre></div><p>NX服务监听在4000端口上：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@edge:~$ sudo netstat -antp |grep 4000\ntcp        0      0 0.0.0.0:4000            0.0.0.0:*               LISTEN      10441/nxd       \ntcp6       0      0 :::4000                 :::*                    LISTEN      10441/nxd</code></pre></div><p>然后启动客户端程序，在系统的开始菜单里有（/usr/NX/bin/nxplayer.bin）。</p><p><b>4，使用x2go（基于ssh）。</b></p><p></p>", 
            "topic": [
                {
                    "tag": "SSH(Secure Shell)", 
                    "tagLink": "https://api.zhihu.com/topics/19557973"
                }, 
                {
                    "tag": "Xorg", 
                    "tagLink": "https://api.zhihu.com/topics/19577854"
                }, 
                {
                    "tag": "Wayland", 
                    "tagLink": "https://api.zhihu.com/topics/19660639"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/56789466", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 4, 
            "title": "使用微软OpenPAI来作为深度学习训练平台", 
            "content": "<h2><b>背景</b></h2><p>最近决定使用微软开源的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/pai\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Microsoft/pai</a>来作为我们平常深度算法模型的训练平台。 要部署pai（本文时的版本是v0.9.0），按照官方文档的说法，需要以下软硬件资源：</p><div class=\"highlight\"><pre><code class=\"language-text\">1，Ubuntu 16.04；\n2，机器需要联网并且有静态IP；\n3，机器可以访问Docker registry service (e.g., Docker hub)；\n4，机器的SSH service需要运行，username需要有sudo权限；\n5，如果有多台机器的话，使用同样的username/password，并且username都需要有sudo权限；\n6，（非单机版）开启NTP服务；\n7，没有安装Docker，或者安装的Docker的api version &gt;= 1.26；没有安装nvidia驱动。\n8，机器需要有至少40G内存（单机）或者16G内存（集群方式部署）；内存主要提供给K8s和PAI服务。</code></pre></div><p>因为Gemfield目前手头上只有一台机器可用，所以下列安装步骤是按照官方的文档：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/pai%23how-to-deploy\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Microsoft/pai</a> 中的<b>单机版</b>来安装的。另外，Gemfield没有使用Ubuntu 16.04, 而是Kubuntu 18.04。</p><h2><b>OpenPAI部署简介</b></h2><p>OpenPAI基于Kubernetes，因此OpenPAI的安装脚本会自动安装Kubernetes。具体来说，就是要安装组件kube-scheduler、kube-controller-manager、kube-apiserver、kubernetes-dashboard、kube-proxy、etcd。注意，这些组件本身也是Docker化的。</p><p>在安装完K8s后，OpenPAI就要部署自己的服务了，服务的组件是frameworklauncher、hadoop-name-node、hadoop-jobhistory-service、hadoop-resource-manager、pylon、rest-server、webportal、zookeeper、end-to-end-test-deployment、grafana、prometheus、watchdog、drivers、node-exporter、hadoop-data-node、hadoop-node-manager。注意，这些组件本身也是Docker化的。</p><p>就像上文说的那样，Gemfield部署的是单机版。原本，按照官方的readme进行部署是非常容易的，但是因为以下两个原因，这个部署还是颇费周折的：</p><p>1，中国大陆境内需要科学上网；</p><p>2，部署单机版的OpenPAI需要40GB的内存（实际上经gemfield计算，最好大于64GB)，而Gemfield的机器只有31GB。这里的40GB真的是最少值，不然你都不知道yarn服务是怎么死的。</p><h2><b>开始部署安装</b></h2><p><b>1，禁掉nouveau驱动</b></p><p>因为这个驱动和即将安装的Nvidia驱动（会由OpenPAI的部署脚本自动安装）会冲突，必须禁止掉！否则会报下面的错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">ERROR: The Nouveau kernel driver is currently in use by your system.  This\n       driver is incompatible with the NVIDIA driver, and must be disabled\n       before proceeding.  Please consult the NVIDIA driver README and your\n       Linux distribution&#39;s documentation for details on how to correctly\n       disable the Nouveau kernel driver.</code></pre></div><p>在Kubuntu18.04上，使用下面的命令来禁止nouveau：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ sudo bash -c &#34;echo blacklist nouveau &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&#34;\n$ sudo bash -c &#34;echo options nouveau modeset=0 &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&#34;\n$ sudo update-initramfs -u\n$ sudo reboot</code></pre></div><p>重启完系统后继续下面的步骤。</p><p><b>2，安装依赖</b></p><p>因为使用的是Kubuntu18.04，把官方文档中的realpath包去掉，替换成coreutils（是的，realpath包含在了coreutils软件包中了）：</p><div class=\"highlight\"><pre><code class=\"language-console\">apt-get -y update \n\napt-get -y install \\\n      nano \\\n      vim \\\n      joe \\\n      wget \\\n      curl \\\n      jq \\\n      gawk \\\n      psmisc \\\n      python \\\n      python-yaml \\\n      python-jinja2 \\\n      python-paramiko \\\n      python-urllib3 \\\n      python-tz \\\n      python-nose \\\n      python-prettytable \\\n      python-netifaces \\\n      python-dev \\\n      python-pip \\\n      python-mysqldb \\\n      openjdk-8-jre \\\n      openjdk-8-jdk \\\n      openssh-server \\\n      openssh-client \\\n      git \\\n      bash-completion \\\n      inotify-tools \\\n      rsync \\\n      coreutils \\\n      net-tools\n\npip install python-etcd docker kubernetes GitPython</code></pre></div><p>本来不需要自己安装的，但是因为墙的存在，我们无法直接安装K8s的一些命令。以及要配置一些软件源，因此在这里借助国内镜像先行安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo apt-get update\nsudo apt-get install -y apt-transport-https\n#使用阿里云镜像\ncurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -\nsudo apt-add-repository &#34;deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&#34;\n\n#安装 nvidia-docker\ncurl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | sudo apt-key add -\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list\n\n#安装k8s的工具\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl</code></pre></div><p><b>3，克隆openpai项目</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ML:~/github$ git clone https://github.com/Microsoft/pai.git</code></pre></div><p><b>4，配置</b></p><p>修改deployment/quick-start/quick-start-example.yaml文件，配置IP和ssh用户密码：</p><div class=\"highlight\"><pre><code class=\"language-text\">diff --git a/deployment/quick-start/quick-start-example.yaml b/deployment/quick-start/quick-start-example.yaml\nindex 69df7f9b..91126520 100644\n--- a/deployment/quick-start/quick-start-example.yaml\n+++ b/deployment/quick-start/quick-start-example.yaml\n@@ -20,14 +20,12 @@\n # Special case: If this list contains only one machine, then this machine will be the master\n # and the worker at the same time.\n machines:\n-  - &lt;ip-of-master&gt;\n-  - &lt;ip-of-worker1&gt;\n-  - &lt;ip-of-worder2&gt;\n+  - 192.168.1.121\n \n # (Required) Log-in info of all machines. System administrator should guarantee\n # that the username/password pair or username/key-filename is valid and has sudo privilege.\n-ssh-username: &lt;username&gt;\n-ssh-password: &lt;password&gt;\n+ssh-username: gemfield\n+ssh-password: civilnet.cn</code></pre></div><p>然后使用下面的命令生成真正的配置文件：~/pai-config</p><div class=\"highlight\"><pre><code class=\"language-text\">python paictl.py config generate -i deployment/quick-start/quick-start-example.yaml -o ~/pai-config -f</code></pre></div><p>然后遍历下~/pai-config下生成的yaml配置文件，看看有什么需要更改的（可参考：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/pai/blob/pai-0.9.y/docs/pai-management/doc/how-to-generate-cluster-config.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Microsoft/pai</a>）。</p><p><b>5，更改一些源文件（可选，因为Gemfield的机器内存不够）</b></p><p>主要改两类，一是k8s的yaml，另外一个是shell启动脚本。</p><p>更改以下的k8s yaml模板文件：</p><div class=\"highlight\"><pre><code class=\"language-text\">deployment/k8sPaiLibrary/template/apiserver.yaml.template\ndeployment/k8sPaiLibrary/template/controller-manager.yaml.template\ndeployment/k8sPaiLibrary/template/dashboard-deployment.yaml.template\ndeployment/k8sPaiLibrary/template/etcd.yaml.template\ndeployment/k8sPaiLibrary/template/scheduler.yaml.template\nsrc/cleaner/deploy/cleaner.yaml.template\nsrc/hadoop-jobhistory/deploy/hadoop-jobhistory.yaml.template\nsrc/hadoop-name-node/deploy/hadoop-name-node.yaml.template\nsrc/hadoop-node-manager/deploy/hadoop-node-manager.yaml.template\nsrc/hadoop-resource-manager/deploy/hadoop-resource-manager.yaml.template\nsrc/pylon/deploy/pylon.yaml.template\nsrc/yarn-frameworklauncher/deploy/yarn-frameworklauncher.yaml.template\nsrc/zookeeper/deploy/zookeeper.yaml.template</code></pre></div><p>将其中的memory request适当减少(再次强调，这一步只是因为gemfield的机器内存不够，是可选项），以其中一个文件举例如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ML:~/github/pai$ git diff deployment/k8sPaiLibrary/template/apiserver.yaml.template\ndiff --git a/deployment/k8sPaiLibrary/template/apiserver.yaml.template b/deployment/k8sPaiLibrary/template/apiserver.yaml.template\nindex 8c49b1ad..01224d63 100644\n--- a/deployment/k8sPaiLibrary/template/apiserver.yaml.template\n+++ b/deployment/k8sPaiLibrary/template/apiserver.yaml.template\n@@ -50,6 +50,6 @@ spec:\n     {%- if cluster_cfg[&#39;kubernetes&#39;][&#39;qos-switch&#39;] == &#34;true&#34; %}\n     resources:\n       requests:\n-        memory: &#34;1Gi&#34;\n+        memory: &#34;512Mi&#34;\n         cpu: &#34;1000m&#34;</code></pre></div><p>另外，更改shell脚本src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh，将其中的保留内存从40G改为20G：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ML:~/github/pai$ git diff src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh\ndiff --git a/src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh b/src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh\nindex 286443df..7cf3a501 100644\n--- a/src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh\n+++ b/src/hadoop-node-manager/deploy/hadoop-node-manager-configuration/nodemanager-generate-script.sh\n@@ -67,7 +67,7 @@ then\n     let mem_reserved=16*1024\n else\n     echo &#34;Node role is &#39;Master &amp; Worker&#39;. Reserve 40G for os and k8s.&#34;\n-    let mem_reserved=40*1024\n+    let mem_reserved=20*1024\n fi\n let mem_total=(mem_total/1024/1024*1024)-mem_reserved\n sed  -i &#34;s/{mem_total}/${mem_total}/g&#34; $HADOOP_CONF_DIR/yarn-site.xml</code></pre></div><p>否则，在gemfield只有31GB内存的机器上，会报如下错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">19/02/15 10:06:54 ERROR nodemanager.NodeManager: Error starting NodeManager\norg.apache.hadoop.yarn.exceptions.YarnRuntimeException: org.apache.hadoop.yarn.exceptions.YarnRuntimeException: Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, Message from ResourceManager: NodeManager from  192.168.1.121 doesn&#39;t satisfy minimum allocations, Sending SHUTDOWN signal to the NodeManager.\n        at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.serviceStart(NodeStatusUpdaterImpl.java:295)\n        at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)\n        at org.apache.hadoop.service.CompositeService.serviceStart(CompositeService.java:121)\n        at org.apache.hadoop.yarn.server.nodemanager.NodeManager.serviceStart(NodeManager.java:454)\n        at org.apache.hadoop.service.AbstractService.start(AbstractService.java:194)\n        at org.apache.hadoop.yarn.server.nodemanager.NodeManager.initAndStartNodeManager(NodeManager.java:837)\n        at org.apache.hadoop.yarn.server.nodemanager.NodeManager.main(NodeManager.java:897)\nCaused by: org.apache.hadoop.yarn.exceptions.YarnRuntimeException: Recieved SHUTDOWN signal from Resourcemanager, Registration of NodeManager failed, Message from ResourceManager: NodeManager from  192.168.1.121 doesn&#39;t satisfy minimum allocations, Sending SHUTDOWN signal to the NodeManager.\n        at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.registerWithRM(NodeStatusUpdaterImpl.java:416)\n        at org.apache.hadoop.yarn.server.nodemanager.NodeStatusUpdaterImpl.serviceStart(NodeStatusUpdaterImpl.java:289)\n        ... 6 more\n19/02/15 10:06:54 INFO nodemanager.NodeManager: SHUTDOWN_MSG: </code></pre></div><p><b>6，安装并启动K8s</b></p><div class=\"highlight\"><pre><code class=\"language-text\">sudo python paictl.py cluster k8s-bootup -p ~/pai-config</code></pre></div><p>这一步会自动做以下事情：</p><div class=\"highlight\"><pre><code class=\"language-text\">1，安装kubectl(前面因为墙的缘故已经提前做了)；\n\n2，基于cluster-configuration.yaml, kubernetes-configuration.yaml和\n   k8s-role-definition.yaml生成K8s相关的配置文件；\n\n3，使用kubectl启动Kubernetes；</code></pre></div><p>安装成功后可以通过浏览器访问K8s的dashboard来验证：http://&lt;master&gt;:9090。</p><p>如果想回退这一步的话，可以使用下面的命令来清理掉刚才的安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo python paictl.py cluster k8s-clean -p ~/pai-config/</code></pre></div><p><b>7，更新cluster配置信息</b></p><div class=\"highlight\"><pre><code class=\"language-text\">sudo python paictl.py config push -p ~/pai-config/</code></pre></div><p><b>8，安装并启动OpenPAI的服务</b></p><div class=\"highlight\"><pre><code class=\"language-text\">sudo python paictl.py service start</code></pre></div><p>安装并启动成功后，可以通过访问dashboard的这个页面也加以验证：http://&lt;master&gt;:9090/#!/pod?namespace=default</p><p>如果想回退这一步的话，可以使用下面的命令清理掉刚才的安装：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo python paictl.py service stop</code></pre></div><p><b>9，安装完成</b></p><p>此时你可以通过http://&lt;master&gt; 来访问OpenPAI的GUI界面了。如下所示：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-06b63e52f7881277503f6f25d35c6824_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1909\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb\" width=\"1909\" data-original=\"https://pic1.zhimg.com/v2-06b63e52f7881277503f6f25d35c6824_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1909&#39; height=&#39;974&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1909\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1909\" data-original=\"https://pic1.zhimg.com/v2-06b63e52f7881277503f6f25d35c6824_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-06b63e52f7881277503f6f25d35c6824_b.jpg\"/></figure><h2><b>总结</b></h2><p>不多说了，Gemfield现在要去买内存条了（咦，16G的降到800块左右了...）。</p><p></p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "Visual Studio Code", 
                    "tagLink": "https://api.zhihu.com/topics/20017183"
                }, 
                {
                    "tag": "YARN", 
                    "tagLink": "https://api.zhihu.com/topics/20041614"
                }
            ], 
            "comments": [
                {
                    "userName": "Ted Li", 
                    "userLink": "https://www.zhihu.com/people/045d2b4696da9136145c4b5cc08b9c86", 
                    "content": "<p>怎么样，好用么</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "极北", 
                    "userLink": "https://www.zhihu.com/people/52e8268a9ac965d21019b0294df6032a", 
                    "content": "<p>最后一步安装并启动openpai服务时有几个服务一直下载失败怎么办</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31398416", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 21, 
            "title": "使用kubeadm创建一个K8s 1.10的Cluster", 
            "content": "<p>我们有很多种方式在很多种环境下安装配置Kubernetes的cluster（包含master和worker nodes），如 <a href=\"https://link.zhihu.com/?target=https%3A//kubernetes.io/docs/setup/pick-right-solution/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Picking the Right Solution</a>所展示的这样。 本文中，Gemfield将演示如何使用kubeadm在Bare metal的Ubuntu操作系统中创建一个K8s的Cluster，版本为1.10。</p><p>注意：1.11已经发布，关于1.11的部署可以参考专栏文章：</p><a href=\"https://zhuanlan.zhihu.com/p/40931670\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-4a207aa06bfb4df20dc7c71afc61225f_180x120.jpg\" data-image-width=\"575\" data-image-height=\"431\" class=\"internal\">Gemfield：使用kubeadm安装Kubernetes 1.11</a><h2><b>一，为每个node安装kubeadm</b></h2><p><b>1，禁掉swap分区</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@sl:~$ sudo swapoff -a\n\n<span class=\"c1\">#要永久禁掉swap分区，打开如下文件注释掉swap那一行</span>\ngemfield@sl:~$ sudo vi /etc/fstab</code></pre></div><p>这一步是为了让kubelet正常工作，否则会报错：</p><div class=\"highlight\"><pre><code class=\"language-text\">11月 25 16:52:38 sl kubelet[2856]: error: failed to run Kubelet: Running with swap on is not supported, please disable swap! or set --fail-swap-on\n11月 25 16:52:38 sl systemd[1]: kubelet.service: Main process exited, code=exited, status=1/FAILURE\n11月 25 16:52:38 sl systemd[1]: kubelet.service: Unit entered failed state.\n11月 25 16:52:38 sl systemd[1]: kubelet.service: Failed with result &#39;exit-code&#39;.</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，可以得到机器的MAC和product_uuid</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@sl:~$ ip link\n<span class=\"m\">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class=\"m\">65536</span> qdisc noqueue state UNKNOWN mode DEFAULT group default qlen <span class=\"m\">1000</span>\n    link/loopback <span class=\"m\">00</span>:00:00:00:00:00 brd <span class=\"m\">00</span>:00:00:00:00:00\n<span class=\"m\">2</span>: enp8s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class=\"m\">1500</span> qdisc pfifo_fast state UP mode DEFAULT group default qlen <span class=\"m\">1000</span>\n    link/ether <span class=\"m\">60</span>:eb:69:af:b2:76 brd ff:ff:ff:ff:ff:ff\n<span class=\"m\">3</span>: wlp5s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class=\"m\">1500</span> qdisc mq state UP mode DORMANT group default qlen <span class=\"m\">1000</span>\n    link/ether 5c:ac:4c:bf:6d:12 brd ff:ff:ff:ff:ff:ff\n<span class=\"m\">4</span>: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu <span class=\"m\">1500</span> qdisc noqueue state DOWN mode DEFAULT group default \n    link/ether <span class=\"m\">02</span>:42:d2:2f:a7:0b brd ff:ff:ff:ff:ff:ff\n\ngemfield@sl:~$ sudo cat /sys/class/dmi/id/product_uuid\n20FD5881-4A7E-11CB-A0FC-C6E1CB03C2A6</code></pre></div><p>确保Kubunetes能正确使用机器的网卡设备，在多网卡的环境下，有必要的时候你要设置路由。</p><p>另外，需要以下TCP端口：</p><div class=\"highlight\"><pre><code class=\"language-text\">#Master Node上\n6443*，Kubernetes API server\n2379-2380， etcd server client API\n10250， Kubelet API\n10251，kube-scheduler\n10252，kube-controller-manager\n10255，Read-only Kubelet API\n\n#worker node上需要以下TCP端口：\n10250，Kubelet API\n10255，Read-only Kubelet API\n30000-32767，NodePort Services**</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，安装Docker</b></p><p>在每台机器上安装docker，在今天（2018年4月27日）这个时刻，这些docker版本是验证过的：v1.12、 v1.11、v1.13和17.03。使用下面的命令来安装docker。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@sl:~$ sudo apt-get update\ngemfield@sl:~$ sudo apt-get install -y docker.io</code></pre></div><p>更多docker详情，请参考Gemfield专栏的前述文章</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4，安装kubeadm、kubelet、kubectl</b></p><p><b>这3个包要在所有的机器上安装。</b></p><ul><li><code>kubeadm</code>:从零开始配置K8s cluster的tool。目前kubeadm整体还是beta状态，官方宣称的是在2018年结束之前变为General Availability (GA)状态。</li><li><code>kubelet</code>: 集群的每个机器上都需要运行的组件，用来启动pods和containers。</li><li><code>kubectl</code>: 用来和集群交互的命令行工具。</li></ul><p><b>配置如下apt源</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ cat /etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main </code></pre></div><p><b>配置apt的proxy来翻墙</b></p><p>因为下载的package都在<a href=\"https://link.zhihu.com/?target=http%3A//packages.cloud.google.com/apt\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">packages.cloud.google.com</span><span class=\"invisible\">/apt</span><span class=\"ellipsis\"></span></a> 下，你懂的。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@sl:~$ cat /etc/apt/apt.conf\nAcquire::http::Proxy <span class=\"s2\">&#34;http://gemfield.org:7030&#34;</span><span class=\"p\">;</span>\nAcquire::https::Proxy <span class=\"s2\">&#34;http://gemfield.org:7030&#34;</span><span class=\"p\">;</span>\ngemfield@sl:~$</code></pre></div><p><b>安装这个源的公钥</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#配置代理，mmp你懂的</span>\ngemfield@edge:~$ <span class=\"nb\">export</span> <span class=\"nv\">http_proxy</span><span class=\"o\">=</span>gemfield.org:7030\ngemfield@edge:~$ <span class=\"nb\">export</span> <span class=\"nv\">https_proxy</span><span class=\"o\">=</span>gemfield.org:7030\n\n<span class=\"c1\">#安装</span>\ngemfield@sl:~$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg <span class=\"p\">|</span> sudo apt-key add -</code></pre></div><p>否则无法验证签名，会出现如下错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">获取:3 https://packages.cloud.google.com/apt kubernetes-xenial InRelease [8,942 B]\n错误:3 https://packages.cloud.google.com/apt kubernetes-xenial InRelease\n  由于没有公钥，无法验证下列签名： NO_PUBKEY 3746C208A7317B0F\n正在读取软件包列表... 完成   \nW: GPG 错误：https://packages.cloud.google.com/apt kubernetes-xenial InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY 3746C208A7317B0F\nE: 仓库 “http://apt.kubernetes.io kubernetes-xenial InRelease” 没有数字签名。\nN: 无法安全地用该源进行更新，所以默认禁用该源。\nN: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</code></pre></div><p>值得再次强调的是，这个代理不止在这里起作用，而且在下面运行kubeadm init的时候也需要。继续看吧。</p><p><b>运行apt update更新源</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfield:~$ sudo apt update</code></pre></div><p><b>9，安装kubeadm, kubelet 和 kubectl</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@gemfield:~$ sudo apt install -y kubelet kubeadm kubectl   \n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n将会同时安装下列软件：\n  ebtables kubernetes-cni\n下列【新】软件包将被安装：\n  ebtables kubeadm kubectl kubelet kubernetes-cni\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">5</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">0</span> 个软件包未被升级。\n需要下载 <span class=\"m\">51</span>.5 MB/51.6 MB 的归档。\n解压缩后会消耗 <span class=\"m\">369</span> MB 的额外空间。\n......</code></pre></div><p>master node 就是运行了control plane组件的机器， 包括etcd (the cluster database)和 API server (也就是kube-apiserver，让kubectl命令交互的)。也就是说，<code>kubectl</code> 和<code>kube-apiserver</code> 交互来进行集群的管理。 发出的命令将实际工作在master node上，这是因为kube-apiserver运行在master node上。而在worker nodes上，将只运行<code>kubelet</code> 和 <code>kube-proxy</code> 。</p><h2><b>二，初始化master node</b></h2><p><b>1，使用kubeadm init 去初始化master node</b></p><p>kubeadm init的时候要先想好使用什么网络插件，gemfield选择的是Calico插件，所以init时候的命令就是（注意：确保--pod-network-cidr的值不要和宿主机的局域网网段冲突）：</p><div class=\"highlight\"><pre><code class=\"language-text\">#In order for Network Policy to work correctly, you need to pass --pod-network-cidr=172.16.0.0/16 to kubeadm init\nkubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.1.118</code></pre></div><p>这一步首先要配置好代理(export http_proxy=<a href=\"https://link.zhihu.com/?target=http%3A//gemfield.org%3A17030\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">gemfield.org:17030</span><span class=\"invisible\"></span></a>)，否则会报getsockopt: connection timed out错误：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.1.118\nunable to get URL &#34;https://dl.k8s.io/release/stable-1.10.txt&#34;: Get https://storage.googleapis.com/kubernetes-release/release/stable-1.10.txt: dial tcp 172.217.160.112:443: getsockopt: connection timed out</code></pre></div><p>但是后面你又得去掉这个代理(unset http_proxy https_proxy，否则。。。继续看吧)。</p><p><b>2，设置好代理继续kubeadm init</b></p><div class=\"highlight\"><pre><code class=\"language-text\">#要用root账户去弄\nroot@gemfield:~# kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.1.118             \n[init] Using Kubernetes version: v1.10.2\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n......\nUnfortunately, an error has occurred:\n        timed out waiting for the condition\n\nThis error is likely caused by:\n        - The kubelet is not running\n        - The kubelet is unhealthy due to a misconfiguration of the node in some way (required cgroups disabled)\n        - Either there is no internet connection, or imagePullPolicy is set to &#34;Never&#34;,\n          so the kubelet cannot pull or find the following control plane images:\n                - k8s.gcr.io/kube-apiserver-amd64:v1.10.2\n                - k8s.gcr.io/kube-controller-manager-amd64:v1.10.2\n                - k8s.gcr.io/kube-scheduler-amd64:v1.10.2\n                - k8s.gcr.io/etcd-amd64:3.1.12 (only if no external etcd endpoints are configured)\n\nIf you are on a systemd-powered system, you can try to troubleshoot the error with the following commands:\n        - &#39;systemctl status kubelet&#39;\n        - &#39;journalctl -xeu kubelet&#39;\ncouldn&#39;t initialize a Kubernetes cluster</code></pre></div><p>上面的错误一定是墙的问题了，哼！不信你手工执行：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@gemfield:~# docker pull k8s.gcr.io/kube-apiserver-amd64:v1.10.2\nError response from daemon: Get https://k8s.gcr.io/v1/_ping: dial tcp <span class=\"m\">64</span>.233.189.82:443: i/o timeout</code></pre></div><p>所以，为了docker pull能够正常工作，gemfield需要设置docker server的proxy。</p><p><b>3，设置docker server代理</b></p><p>注意啊，有2种代理，一种是docker client的，一种是docker server的，不要搞混了。这里设置的是docker server的：</p><div class=\"highlight\"><pre><code class=\"language-text\">#为docker service创建一个systemd drop-in 目录\nmkdir -p /etc/systemd/system/docker.service.d\n\n#使用下面内容创建文件/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=&#34;HTTP_PROXY=http://gemfield.org:17030/&#34;\n\n#使用下面内容创建文件/etc/systemd/system/docker.service.d/https-proxy.conf\n[Service]\nEnvironment=&#34;HTTPS_PROXY=http://gemfield.org:17030/&#34;\n\n#写入改动\nsudo systemctl daemon-reload\n\n#重启docker服务\nsudo systemctl restart docker\n\n#验证配置已经生效\nroot@gemfield:~# systemctl show --property=Environment docker\nEnvironment=HTTP_PROXY=http://gemfield.org:17030/ HTTPS_PROXY=http://gemfield.org:17030/</code></pre></div><p>重新pull：</p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# docker pull k8s.gcr.io/kube-apiserver-amd64:v1.10.2\nv1.10.2: Pulling from kube-apiserver-amd64\nf70adabe43c0: Pull complete \naaa6c3636312: Pull complete \nDigest: sha256:1ba863c8e9b9edc6d1329ebf966e4aa308ca31b42a937b4430caf65aa11bdd12\nStatus: Downloaded newer image for k8s.gcr.io/kube-apiserver-amd64:v1.10.2</code></pre></div><p>好了吧。好了我们就继续kubeadm init。</p><p><b>4，设置好docker server proxy后再次kubeadm init</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">root@gemfield:~# kubeadm init --pod-network-cidr<span class=\"o\">=</span><span class=\"m\">172</span>.16.0.0/16 --apiserver-advertise-address<span class=\"o\">=</span><span class=\"m\">192</span>.168.1.118\n<span class=\"o\">[</span>init<span class=\"o\">]</span> Using Kubernetes version: v1.10.2\n<span class=\"o\">[</span>init<span class=\"o\">]</span> Using Authorization modes: <span class=\"o\">[</span>Node RBAC<span class=\"o\">]</span>\n<span class=\"o\">[</span>preflight<span class=\"o\">]</span> Running pre-flight checks.\n......\n<span class=\"o\">[</span>init<span class=\"o\">]</span> This might take a minute or longer <span class=\"k\">if</span> the control plane images have to be pulled.\n......\n完蛋了！死在这里了</code></pre></div><p>使用journalctl -xeu kubelet 命令查看下log：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfield:~$ journalctl -xeu kubelet\n......\n4月 28 17:13:29 sl kubelet[28886]: W0428 17:13:29.441478   28886 cni.go:171] Unable to update cni config: No networks found in /etc/cni/net.d\n4月 28 17:13:29 sl kubelet[28886]: E0428 17:13:29.442451   28886 kubelet.go:2125] Container runtime network not ready: NetworkReady=false reason:NetworkPlugin\n4月 28 17:13:34 sl kubelet[28886]: W0428 17:13:34.444718   28886 cni.go:171] Unable to update cni config: No networks found in /etc/cni/net.d\n4月 28 17:13:34 sl kubelet[28886]: E0428 17:13:34.445849   28886 kubelet.go:2125] Container runtime network not ready: NetworkReady=false reason:NetworkPlugin\n......</code></pre></div><p>程序一直在循环报这个错误：Unable to update cni config: No networks found in /etc/cni/net.d。这是为什么呢？这是因为前面设置了代理，导致kubelet访问API Server不通，所以需要关闭http proxy。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ unset http_proxy https_proxy\n#或者下面这个更优雅的方法\ngemfield@sl:~$ export no_proxy=192.168.1.118</code></pre></div><p><b>5，关闭http proxy后再次kubeadm init</b></p><div class=\"highlight\"><pre><code class=\"language-text\">root@sl:~# kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.1.118\n[init] Using Kubernetes version: v1.10.2\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n        [WARNING FileExisting-crictl]: crictl not found in system path\nSuggestion: go get github.com/kubernetes-incubator/cri-tools/cmd/crictl\n[preflight] Some fatal errors occurred:\n        [ERROR Port-6443]: Port 6443 is in use\n        [ERROR Port-10250]: Port 10250 is in use\n        [ERROR Port-10251]: Port 10251 is in use\n        [ERROR Port-10252]: Port 10252 is in use\n        [ERROR FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists\n        [ERROR FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml]: /etc/kubernetes/manifests/kube-controller-manager.yaml already exists\n        [ERROR FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml]: /etc/kubernetes/manifests/kube-scheduler.yaml already exists\n        [ERROR FileAvailable--etc-kubernetes-manifests-etcd.yaml]: /etc/kubernetes/manifests/etcd.yaml already exists\n        [ERROR Port-2379]: Port 2379 is in use\n        [ERROR DirAvailable--var-lib-etcd]: /var/lib/etcd is not empty</code></pre></div><p>这是因为前面已经执行过一次kubeadm init了（其实是好几次...）。这个时候需要加个参数来忽略到这些：--ignore-preflight-errors=all</p><p><b>6，忽略所有前置检查错误后kubeadm init </b></p><div class=\"highlight\"><pre><code class=\"language-text\">root@gemfield:~# kubeadm init --pod-network-cidr=172.16.0.0/16 --apiserver-advertise-address=192.168.1.118 --ignore-preflight-errors=all\n[init] Using Kubernetes version: v1.10.2\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n......\n[addons] Applied essential addon: kube-dns\n[addons] Applied essential addon: kube-proxy\n\nYour Kubernetes master has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n  mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun &#34;kubectl apply -f [podnetwork].yaml&#34; with one of the options listed at:\n  https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nYou can now join any number of machines by running the following on each node\nas root:\n\n  kubeadm join 192.168.1.118:6443 --token 9frx62.qp99ri6ds8mo6p41 --discovery-token-ca-cert-hash sha256:a7cff4b98899bcc0a4d5d9eae41648a8f42d4e7334ae52a3ec17910b7e4869af</code></pre></div><p>终于成功了。注意最后的这3段输入，分别是：为正常非root用户所做的配置；部署pod network；添加其它node到这个集群（注意token是保密的，不要泄露给别人）。下面会继续提到。</p><p><b>7，去掉kubenetes配置文件中的http_proxy：</b></p><p>这些ENV变量都是从当前的会话中继承过去的（前面的步骤为了翻墙）, 把这些值删掉：</p><div class=\"highlight\"><pre><code class=\"language-console\">root@master:~# find /etc/kubernetes/ -type f -exec grep -n 17030 {} \\+\n/etc/kubernetes/manifests/kube-controller-manager.yaml:30:      value: http://localhost:17030\n/etc/kubernetes/manifests/kube-controller-manager.yaml:32:      value: http://localhost:17030\n/etc/kubernetes/manifests/kube-apiserver.yaml:45:      value: http://localhost:17030\n/etc/kubernetes/manifests/kube-apiserver.yaml:47:      value: http://localhost:17030\n/etc/kubernetes/manifests/kube-scheduler.yaml:21:      value: http://localhost:17030\n/etc/kubernetes/manifests/kube-scheduler.yaml:23:      value: http://localhost:17030</code></pre></div><p>然后重启kubelet service：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@master:~$ sudo systemctl restart kubelet.service</code></pre></div><p><b>8，使用非root的正常用户执行以下配置</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ mkdir -p $HOME/.kube\ngemfield@sl:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n[sudo] gemfield 的密码： \ngemfield@sl:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre></div><h2><b>三，部署pod network</b></h2><p><b>1，安装Calico pod network</b></p><p>注意修改官方的calico.yaml 中的CALICO_IPV4POOL_CIDR的值来避免和宿主机所在的局域网段冲突（gemfield就是把原始的192.168.0.0/16 修改成了172.16.0.0/16）：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml\nUnable to connect to the server: Access violation</code></pre></div><p>这是因为当前的terminal的会话里设置了http_proxy和https_proxy，使得kubectl不能访问kube-apiserve。使用下面的命令来修复这个问题：</p><div class=\"highlight\"><pre><code class=\"language-text\">#kube-apiserve的IP为192.168.1.118\ngemfield@sl:~$ export no_proxy=192.168.1.118</code></pre></div><p><b>2，再次安装Calico pod network</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ kubectl apply -f https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubeadm/1.7/calico.yaml\nconfigmap &#34;calico-config&#34; created\ndaemonset.extensions &#34;calico-etcd&#34; created\nservice &#34;calico-etcd&#34; created\ndaemonset.extensions &#34;calico-node&#34; created\ndeployment.extensions &#34;calico-kube-controllers&#34; created\nclusterrolebinding.rbac.authorization.k8s.io &#34;calico-cni-plugin&#34; created\nclusterrole.rbac.authorization.k8s.io &#34;calico-cni-plugin&#34; created\nserviceaccount &#34;calico-cni-plugin&#34; created\nclusterrolebinding.rbac.authorization.k8s.io &#34;calico-kube-controllers&#34; created\nclusterrole.rbac.authorization.k8s.io &#34;calico-kube-controllers&#34; created\nserviceaccount &#34;calico-kube-controllers&#34; created</code></pre></div><p><b>3, 确保所有的pod此刻都是running</b></p><p>使用kubectl get pods --all-namespaces来查看。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ watch kubectl get pods --all-namespaces\n#输出\nNAMESPACE     NAME                                       READY     STATUS              RESTARTS   AGE\nkube-system   calico-etcd-z4vwl                          1/1       Running             0          9m\nkube-system   calico-kube-controllers-685755779f-tkssx   0/1       Pending             0          9m\nkube-system   calico-node-2fw5b                          0/2       ContainerCreating   0          9m\nkube-system   etcd-sl                                    1/1       Running             0          47m\nkube-system   kube-apiserver-sl                          1/1       Running             0          47m\nkube-system   kube-controller-manager-sl                 1/1       Running             0          47m\nkube-system   kube-dns-86f4d74b45-psbkm                  0/3       Pending             0          46m\nkube-system   kube-proxy-qsf27                           1/1       Running             0          46m\nkube-system   kube-scheduler-sl                          1/1       Running             0          47m</code></pre></div><p>就在这里看着，直到所有的状态都变成Running。Gemfield大约等了20分钟，可能是在pull image吧。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ watch kubectl get pods --all-namespaces\n#输出\nNAMESPACE     NAME                                       READY     STATUS    RESTARTS   AGE\nkube-system   calico-etcd-z4vwl                          1/1       Running   0          21m\nkube-system   calico-kube-controllers-685755779f-tkssx   1/1       Running   0          21m\nkube-system   calico-node-2fw5b                          2/2       Running   0          21m\nkube-system   etcd-sl                                    1/1       Running   0          59m\nkube-system   kube-apiserver-sl                          1/1       Running   0          59m\nkube-system   kube-controller-manager-sl                 1/1       Running   0          59m\nkube-system   kube-dns-86f4d74b45-psbkm                  3/3       Running   1          59m\nkube-system   kube-proxy-qsf27                           1/1       Running   0          59m\nkube-system   kube-scheduler-sl                          1/1       Running   0          59m</code></pre></div><p><b>4，确定你的集群里现在有node了</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@sl:~$ kubectl get nodes -o wide\nNAME      STATUS    ROLES     AGE       VERSION   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME\nsl        Ready     master    1h        v1.10.1   &lt;none&gt;        Ubuntu 16.04.3 LTS   4.13.0-38-generic   docker://1.13.1</code></pre></div><h2><b>四，添加其它node</b></h2><p>登陆到需要添加的node上，切换到root账户（注意：如果你在墙内，这个node也需要配置docker server的代理）。</p><div class=\"highlight\"><pre><code class=\"language-console\">#切换到root账户下\nroot@ai:~# kubeadm join 192.168.1.118:6443 --token 9frx62.qp99ri6ds8mo6p41 --discovery-token-ca-cert-hash sha256:a7cff4b98899bcc0a4d5d9eae41648a8f42d4e7334ae52a3ec17910b7e4869af\n[preflight] Running pre-flight checks.\n        [WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 17.12.0-ce. Max validated version: 17.03\n        [WARNING FileExisting-crictl]: crictl not found in system path\nSuggestion: go get github.com/kubernetes-incubator/cri-tools/cmd/crictl\n[discovery] Trying to connect to API Server &#34;192.168.1.118:6443&#34;\n[discovery] Created cluster-info discovery client, requesting info from &#34;https://192.168.1.118:6443&#34;\n[discovery] Requesting info from &#34;https://192.168.1.118:6443&#34; again to validate TLS against the pinned public key\n[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server &#34;192.168.1.118:6443&#34;\n[discovery] Successfully established connection with API Server &#34;192.168.1.118:6443&#34;\n\nThis node has joined the cluster:\n* Certificate signing request was sent to master and a response\n  was received.\n* The Kubelet was informed of the new secure connection details.\n\nRun &#39;kubectl get nodes&#39; on the master to see this node join the cluster.</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Kubernetes", 
                    "tagLink": "https://api.zhihu.com/topics/20018384"
                }, 
                {
                    "tag": "Ubuntu", 
                    "tagLink": "https://api.zhihu.com/topics/19557067"
                }, 
                {
                    "tag": "容器虚拟化", 
                    "tagLink": "https://api.zhihu.com/topics/20046238"
                }
            ], 
            "comments": [
                {
                    "userName": "亚当", 
                    "userLink": "https://www.zhihu.com/people/5fcce7370bb173287f50f99da69b6ef0", 
                    "content": "最后一步报错了，你为啥不管！", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "我错了，我日子最近过得有点艰难，还没时间回来弄...", 
                            "likes": 0, 
                            "replyToAuthor": "亚当"
                        }, 
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>现在好了</p>", 
                            "likes": 0, 
                            "replyToAuthor": "亚当"
                        }
                    ]
                }, 
                {
                    "userName": "精兵拒敌", 
                    "userLink": "https://www.zhihu.com/people/6163eb9b6bbeb56a76456289a6d63a28", 
                    "content": "这么好的帖子竟然没人赞！！！", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "杨健邦", 
                            "userLink": "https://www.zhihu.com/people/4b79d30e86cc3c72c9a4c22b9b02a306", 
                            "content": "<p>我也觉得很好</p>", 
                            "likes": 0, 
                            "replyToAuthor": "精兵拒敌"
                        }
                    ]
                }, 
                {
                    "userName": "迷途中的求知者", 
                    "userLink": "https://www.zhihu.com/people/996505d46099f9a81cbbb116ffa3938c", 
                    "content": "docker版本高了，kubeadm最高只支持17.03系列以及以下版本", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>并不是，昨天成功安装了18.06版本的</p>", 
                            "likes": 0, 
                            "replyToAuthor": "迷途中的求知者"
                        }
                    ]
                }, 
                {
                    "userName": "千军易买", 
                    "userLink": "https://www.zhihu.com/people/e7066271ca25b35f662d924ffdd221e3", 
                    "content": "<p>谢谢老铁， 有帮助</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "寻先", 
                    "userLink": "https://www.zhihu.com/people/918c0a5a0db52aebdc0c662d8c1068fe", 
                    "content": "<p>thanks a lot! it works!</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31781281", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 11, 
            "title": "CentOS 7.3 上安装Nvidia驱动", 
            "content": "<p><b>Gemfield目前有一台CentOS服务器，因为要做深度学习，需要安装Nvidia驱动。系统为CentOS 7.3版本，详情如下所示：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># cat /etc/os-release</span> \n<span class=\"nv\">NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;CentOS Linux&#34;</span>\n<span class=\"nv\">VERSION</span><span class=\"o\">=</span><span class=\"s2\">&#34;7 (Core)&#34;</span>\n<span class=\"nv\">ID</span><span class=\"o\">=</span><span class=\"s2\">&#34;centos&#34;</span>\n<span class=\"nv\">ID_LIKE</span><span class=\"o\">=</span><span class=\"s2\">&#34;rhel fedora&#34;</span>\n<span class=\"nv\">VERSION_ID</span><span class=\"o\">=</span><span class=\"s2\">&#34;7&#34;</span>\n<span class=\"nv\">PRETTY_NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;CentOS Linux 7 (Core)&#34;</span>\n<span class=\"nv\">ANSI_COLOR</span><span class=\"o\">=</span><span class=\"s2\">&#34;0;31&#34;</span>\n<span class=\"nv\">CPE_NAME</span><span class=\"o\">=</span><span class=\"s2\">&#34;cpe:/o:centos:centos:7&#34;</span>\n<span class=\"nv\">HOME_URL</span><span class=\"o\">=</span><span class=\"s2\">&#34;https://www.centos.org/&#34;</span>\n<span class=\"nv\">BUG_REPORT_URL</span><span class=\"o\">=</span><span class=\"s2\">&#34;https://bugs.centos.org/&#34;</span>\n\n<span class=\"nv\">CENTOS_MANTISBT_PROJECT</span><span class=\"o\">=</span><span class=\"s2\">&#34;CentOS-7&#34;</span>\n<span class=\"nv\">CENTOS_MANTISBT_PROJECT_VERSION</span><span class=\"o\">=</span><span class=\"s2\">&#34;7&#34;</span>\n<span class=\"nv\">REDHAT_SUPPORT_PRODUCT</span><span class=\"o\">=</span><span class=\"s2\">&#34;centos&#34;</span>\n<span class=\"nv\">REDHAT_SUPPORT_PRODUCT_VERSION</span><span class=\"o\">=</span><span class=\"s2\">&#34;7&#34;</span>\n\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># cat /etc/centos-release</span>\nCentOS Linux release <span class=\"m\">7</span>.3.1611 <span class=\"o\">(</span>Core<span class=\"o\">)</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>1，配置DNS服务</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># cat /etc/resolv.conf</span> \nnameserver <span class=\"m\">8</span>.8.8.8</code></pre></div><h2><b>2，配置第三方RPM源</b></h2><p>Gemfield使用的是通过一个三方源的方式来安装，这个三方源的项目地址是：</p><p><a href=\"https://link.zhihu.com/?target=http%3A//elrepo.org/tiki/tiki-index.php\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ELRepo : HomePage</a></p><div class=\"highlight\"><pre><code class=\"language-bash\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span>\n获取http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm\n准备中...                          <span class=\"c1\">################################# [100%]</span>\n正在升级/安装...\n   <span class=\"m\">1</span>:elrepo-release-7.0-3.el7.elrepo  <span class=\"c1\">################################# [100%]</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>3，禁掉系统默认带的nouveau驱动</b></h2><p>在/lib/modprobe.d/dist-blacklist.conf中，将nvidiafb注释掉：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#blacklist nvidiafb</span> </code></pre></div><p>再在该文件中添加一下配置：</p><div class=\"highlight\"><pre><code class=\"language-bash\">blacklist nouveau  \noptions nouveau <span class=\"nv\">modeset</span><span class=\"o\">=</span><span class=\"m\">0</span> </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>最后整个文件看起来就像下面这样</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># cat /lib/modprobe.d/dist-blacklist.conf</span>\n#\n<span class=\"c1\"># Listing a module here prevents the hotplug scripts from loading it.</span>\n<span class=\"c1\"># Usually that&#39;d be so that some other driver will bind it instead,</span>\n<span class=\"c1\"># no matter which driver happens to get probed first.  Sometimes user</span>\n<span class=\"c1\"># mode tools can also control driver binding.</span>\n#\n<span class=\"c1\"># Syntax: see modprobe.conf(5).</span>\n#\n\n<span class=\"c1\"># watchdog drivers</span>\nblacklist i8xx_tco\n\n<span class=\"c1\"># framebuffer drivers</span>\nblacklist aty128fb\nblacklist atyfb\nblacklist radeonfb\nblacklist i810fb\nblacklist cirrusfb\nblacklist intelfb\nblacklist kyrofb\nblacklist i2c-matroxfb\nblacklist hgafb\n<span class=\"c1\">#blacklist nvidiafb</span>\nblacklist nouveau  \noptions nouveau <span class=\"nv\">modeset</span><span class=\"o\">=</span><span class=\"m\">0</span>\nblacklist rivafb\nblacklist savagefb\nblacklist sstfb\nblacklist neofb\nblacklist tridentfb\nblacklist tdfxfb\nblacklist virgefb\nblacklist vga16fb\nblacklist viafb\n\n<span class=\"c1\"># ISDN - see bugs 154799, 159068</span>\nblacklist hisax\nblacklist hisax_fcpcipnp\n\n<span class=\"c1\"># sound drivers</span>\nblacklist snd-pcsp\n\n<span class=\"c1\"># I/O dynamic configuration support for s390x (bz #563228)</span>\nblacklist chsc_sch\n\n<span class=\"c1\"># crypto algorithms</span>\nblacklist sha1-mb</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>4，重建initramfs image</b></h2><p>如果/boot 分区大小不够，可以备份到其他目录</p><div class=\"highlight\"><pre><code class=\"language-bash\">mv /boot/initramfs-<span class=\"k\">$(</span>uname -r<span class=\"k\">)</span>.img /boot/initramfs-<span class=\"k\">$(</span>uname -r<span class=\"k\">)</span>.img.bak  \ndracut /boot/initramfs-<span class=\"k\">$(</span>uname -r<span class=\"k\">)</span>.img <span class=\"k\">$(</span>uname -r<span class=\"k\">)</span> </code></pre></div><h2><b>5，重启系统</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">reboot</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>6，系统重启后，查看nouveau驱动是否已经被禁止掉</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># lsmod | grep nouveau</span> \n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span>#</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>7，通过yum安装Nvidia 驱动</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># yum -y install kmod-nvidia</span>\n已加载插件：fastestmirror, langpacks\nLoading mirror speeds from cached hostfile\n * base: mirrors.zju.edu.cn\n * elrepo: mirrors.tuna.tsinghua.edu.cn\n * extras: mirrors.zju.edu.cn\n * updates: mirrors.zju.edu.cn\n正在解决依赖关系\n--&gt; 正在检查事务\n---&gt; 软件包 kmod-nvidia.x86_64.0.384.98-1.el7_4.elrepo 将被 安装\n--&gt; 正在处理依赖关系 nvidia-x11-drv <span class=\"o\">=</span> <span class=\"m\">384</span>.98，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>reservation_object_add_excl_fence<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0afefde4，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_vblank_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xd594e463，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_universal_plane_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0x66bc7079，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_printk<span class=\"o\">)</span> <span class=\"o\">=</span> 0xf3207539，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_plane_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0x993b0648，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_object_property_set_value<span class=\"o\">)</span> <span class=\"o\">=</span> 0xda980fae，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_modeset_unlock_all<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0e3b5f46，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_modeset_lock_all<span class=\"o\">)</span> <span class=\"o\">=</span> 0x4d82712c，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_validate_size<span class=\"o\">)</span> <span class=\"o\">=</span> 0x59f75768，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_set_name<span class=\"o\">)</span> <span class=\"o\">=</span> 0x68b96c96，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_prune_invalid<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0be80b87，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_probed_add<span class=\"o\">)</span> <span class=\"o\">=</span> 0x3c7e12fa，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_object_find<span class=\"o\">)</span> <span class=\"o\">=</span> 0xcd45520d，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_create_dvi_i_properties<span class=\"o\">)</span> <span class=\"o\">=</span> 0x97b982aa，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_create<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0a488c2e，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_connector_update_edid_property<span class=\"o\">)</span> <span class=\"o\">=</span> 0x85c884c2，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_connector_list_update<span class=\"o\">)</span> <span class=\"o\">=</span> 0xf719e9fa，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_connector_attach_encoder<span class=\"o\">)</span> <span class=\"o\">=</span> 0xc542c1b2，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_config_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xc62e5245，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_mode_config_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0x373bd683，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_kms_helper_poll_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xc584cf3b，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_kms_helper_poll_fini<span class=\"o\">)</span> <span class=\"o\">=</span> 0xb54dc905，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_kms_helper_poll_disable<span class=\"o\">)</span> <span class=\"o\">=</span> 0x486dd196，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_kms_helper_hotplug_event<span class=\"o\">)</span> <span class=\"o\">=</span> 0xba22491c，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_helper_mode_fill_fb_struct<span class=\"o\">)</span> <span class=\"o\">=</span> 0xb62aeac2，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_helper_hpd_irq_event<span class=\"o\">)</span> <span class=\"o\">=</span> 0xdef9ef66，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_private_object_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xdfd2d95f，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_prime_handle_to_fd<span class=\"o\">)</span> <span class=\"o\">=</span> 0xec097b40，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_prime_export<span class=\"o\">)</span> <span class=\"o\">=</span> 0x87fc4b9b，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_object_unreference_unlocked<span class=\"o\">)</span> <span class=\"o\">=</span> 0xe40a4bd7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_object_unreference<span class=\"o\">)</span> <span class=\"o\">=</span> 0xdc0d14b6，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_object_release<span class=\"o\">)</span> <span class=\"o\">=</span> 0xe2f2760b，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_object_lookup<span class=\"o\">)</span> <span class=\"o\">=</span> 0xbcc057f9，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_handle_create<span class=\"o\">)</span> <span class=\"o\">=</span> 0x631e7f31，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_dumb_destroy<span class=\"o\">)</span> <span class=\"o\">=</span> 0xb71186e7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_gem_create_mmap_offset<span class=\"o\">)</span> <span class=\"o\">=</span> 0xa72d43b0，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_framebuffer_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0x82b4d0d8，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_framebuffer_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0xadf23615，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_encoder_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xa7939cf7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_encoder_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0x02f3cb0d，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_dev_unregister<span class=\"o\">)</span> <span class=\"o\">=</span> 0xd121aff7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_dev_unref<span class=\"o\">)</span> <span class=\"o\">=</span> 0x9123d855，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_dev_register<span class=\"o\">)</span> <span class=\"o\">=</span> 0x81442116，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_dev_alloc<span class=\"o\">)</span> <span class=\"o\">=</span> 0x5cc0510c，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_crtc_send_vblank_event<span class=\"o\">)</span> <span class=\"o\">=</span> 0x7637a0fb，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_crtc_init_with_planes<span class=\"o\">)</span> <span class=\"o\">=</span> 0xd4135bb0，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_crtc_commit_put<span class=\"o\">)</span> <span class=\"o\">=</span> 0xa6554f5e，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_crtc_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0x168006bb，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_connector_unregister<span class=\"o\">)</span> <span class=\"o\">=</span> 0x82047981，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_connector_register<span class=\"o\">)</span> <span class=\"o\">=</span> 0xee00aa43，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_connector_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0x8bb27319，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_connector_cleanup<span class=\"o\">)</span> <span class=\"o\">=</span> 0xe5a37e6e，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_state_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0x143eedc9，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_state_default_release<span class=\"o\">)</span> <span class=\"o\">=</span> 0x3b8f81de，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_state_default_clear<span class=\"o\">)</span> <span class=\"o\">=</span> 0x7284375f，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_state_alloc<span class=\"o\">)</span> <span class=\"o\">=</span> 0x3fb631ad，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_set_mode_for_crtc<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0f693614，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_set_fb_for_plane<span class=\"o\">)</span> <span class=\"o\">=</span> 0x91405854，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_set_crtc_for_plane<span class=\"o\">)</span> <span class=\"o\">=</span> 0x2c641309，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_set_crtc_for_connector<span class=\"o\">)</span> <span class=\"o\">=</span> 0x48bc72e3，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_update_plane<span class=\"o\">)</span> <span class=\"o\">=</span> 0x5ce73dbe，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_set_config<span class=\"o\">)</span> <span class=\"o\">=</span> 0xe20392ec，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_plane_reset<span class=\"o\">)</span> <span class=\"o\">=</span> 0xdef27818，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_plane_duplicate_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0xdcab9d56，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_plane_destroy_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0xb36559fe，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_page_flip<span class=\"o\">)</span> <span class=\"o\">=</span> 0x9b84343a，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_disable_plane<span class=\"o\">)</span> <span class=\"o\">=</span> 0x19cd14ce，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_crtc_reset<span class=\"o\">)</span> <span class=\"o\">=</span> 0x0a7c963d，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_crtc_duplicate_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0x97d1bf38，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_crtc_destroy_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0xc2f62e7f，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_connector_reset<span class=\"o\">)</span> <span class=\"o\">=</span> 0x1037b81c，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_connector_duplicate_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0xa629d2cc，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_connector_destroy_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0xca876bf4，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_commit_hw_done<span class=\"o\">)</span> <span class=\"o\">=</span> 0xaa839b9b，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_commit<span class=\"o\">)</span> <span class=\"o\">=</span> 0x431b772e，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_helper_check<span class=\"o\">)</span> <span class=\"o\">=</span> 0x3486cc38，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_get_plane_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0x21556155，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_get_crtc_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0x246e4ff2，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_get_connector_state<span class=\"o\">)</span> <span class=\"o\">=</span> 0x87c19ffc，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_commit<span class=\"o\">)</span> <span class=\"o\">=</span> 0x2d1ffe4f，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>drm_atomic_clean_old_fb<span class=\"o\">)</span> <span class=\"o\">=</span> 0x6e9a1104，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>dma_fence_signal<span class=\"o\">)</span> <span class=\"o\">=</span> 0x6711ecba，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>dma_fence_release<span class=\"o\">)</span> <span class=\"o\">=</span> 0x91feedc2，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>dma_fence_init<span class=\"o\">)</span> <span class=\"o\">=</span> 0xc3d8f553，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>dma_fence_default_wait<span class=\"o\">)</span> <span class=\"o\">=</span> 0x50bb2571，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>dma_fence_context_alloc<span class=\"o\">)</span> <span class=\"o\">=</span> 0x3c9684fe，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>_raw_qspin_lock<span class=\"o\">)</span> <span class=\"o\">=</span> 0x4b7dcf38，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel<span class=\"o\">(</span>__drm_atomic_state_free<span class=\"o\">)</span> <span class=\"o\">=</span> 0xf169fcc7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在处理依赖关系 kernel &gt;<span class=\"o\">=</span> <span class=\"m\">3</span>.10.0-693.el7，它被软件包 kmod-nvidia-384.98-1.el7_4.elrepo.x86_64 需要\n--&gt; 正在检查事务\n---&gt; 软件包 kernel.x86_64.0.3.10.0-693.11.1.el7 将被 安装\n--&gt; 正在处理依赖关系 linux-firmware &gt;<span class=\"o\">=</span> <span class=\"m\">20170606</span>-55，它被软件包 kernel-3.10.0-693.11.1.el7.x86_64 需要\n--&gt; 正在处理依赖关系 dracut &gt;<span class=\"o\">=</span> <span class=\"m\">033</span>-502，它被软件包 kernel-3.10.0-693.11.1.el7.x86_64 需要\n---&gt; 软件包 nvidia-x11-drv.x86_64.0.384.98-2.el7.elrepo 将被 安装\n--&gt; 正在处理依赖关系 yum-plugin-nvidia &gt;<span class=\"o\">=</span> <span class=\"m\">1</span>.0.2，它被软件包 nvidia-x11-drv-384.98-2.el7.elrepo.x86_64 需要\n--&gt; 正在检查事务\n---&gt; 软件包 dracut.x86_64.0.033-463.el7 将被 升级\n--&gt; 正在处理依赖关系 <span class=\"nv\">dracut</span> <span class=\"o\">=</span> <span class=\"m\">033</span>-463.el7，它被软件包 dracut-network-033-463.el7.x86_64 需要\n--&gt; 正在处理依赖关系 <span class=\"nv\">dracut</span> <span class=\"o\">=</span> <span class=\"m\">033</span>-463.el7，它被软件包 dracut-config-rescue-033-463.el7.x86_64 需要\n---&gt; 软件包 dracut.x86_64.0.033-502.el7 将被 更新\n---&gt; 软件包 linux-firmware.noarch.0.20160830-49.git7534e19.el7 将被 升级\n---&gt; 软件包 linux-firmware.noarch.0.20170606-56.gitc990aae.el7 将被 更新\n---&gt; 软件包 yum-plugin-nvidia.noarch.0.1.0.2-1.el7.elrepo 将被 安装\n--&gt; 正在检查事务\n---&gt; 软件包 dracut-config-rescue.x86_64.0.033-463.el7 将被 升级\n---&gt; 软件包 dracut-config-rescue.x86_64.0.033-502.el7 将被 更新\n---&gt; 软件包 dracut-network.x86_64.0.033-463.el7 将被 升级\n---&gt; 软件包 dracut-network.x86_64.0.033-502.el7 将被 更新\n--&gt; 处理 kernel-3.10.0-693.11.1.el7.x86_64 与 kexec-tools &lt; <span class=\"m\">2</span>.0.14-3 的冲突\n--&gt; 正在使用新的信息重新解决依赖关系\n--&gt; 正在检查事务\n---&gt; 软件包 kexec-tools.x86_64.0.2.0.7-50.el7 将被 升级\n---&gt; 软件包 kexec-tools.x86_64.0.2.0.14-17.2.el7 将被 更新\n--&gt; 解决依赖关系完成\n\n<span class=\"nv\">依赖关系解决</span>\n\n<span class=\"o\">=======================================================================================================================================</span>\n Package                              架构                   版本                                        源                       <span class=\"nv\">大小</span>\n<span class=\"o\">=======================================================================================================================================</span>\n正在安装:\n kernel                               x86_64                 <span class=\"m\">3</span>.10.0-693.11.1.el7                         updates                  <span class=\"m\">43</span> M\n kmod-nvidia                          x86_64                 <span class=\"m\">384</span>.98-1.el7_4.elrepo                       elrepo                   <span class=\"m\">12</span> M\n正在更新:\n kexec-tools                          x86_64                 <span class=\"m\">2</span>.0.14-17.2.el7                             updates                 <span class=\"m\">333</span> k\n为依赖而安装:\n nvidia-x11-drv                       x86_64                 <span class=\"m\">384</span>.98-2.el7.elrepo                         elrepo                   <span class=\"m\">43</span> M\n yum-plugin-nvidia                    noarch                 <span class=\"m\">1</span>.0.2-1.el7.elrepo                          elrepo                   <span class=\"m\">12</span> k\n为依赖而更新:\n dracut                               x86_64                 <span class=\"m\">033</span>-502.el7                                 base                    <span class=\"m\">321</span> k\n dracut-config-rescue                 x86_64                 <span class=\"m\">033</span>-502.el7                                 base                     <span class=\"m\">55</span> k\n dracut-network                       x86_64                 <span class=\"m\">033</span>-502.el7                                 base                     <span class=\"m\">97</span> k\n linux-firmware                       noarch                 <span class=\"m\">20170606</span>-56.gitc990aae.el7                  base                     <span class=\"m\">35</span> M\n\n<span class=\"nv\">事务概要</span>\n<span class=\"o\">=======================================================================================================================================</span>\n安装  <span class=\"m\">2</span> 软件包 <span class=\"o\">(</span>+2 依赖软件包<span class=\"o\">)</span>\n升级  <span class=\"m\">1</span> 软件包 <span class=\"o\">(</span>+4 依赖软件包<span class=\"o\">)</span>\n\n总下载量：134 M\nDownloading packages:\nNo Presto metadata available <span class=\"k\">for</span> base\nupdates/7/x86_64/prestodelta                                                                                    <span class=\"p\">|</span> <span class=\"m\">566</span> kB  <span class=\"m\">00</span>:00:06     \n<span class=\"o\">(</span><span class=\"m\">1</span>/9<span class=\"o\">)</span>: dracut-033-502.el7.x86_64.rpm                                                                            <span class=\"p\">|</span> <span class=\"m\">321</span> kB  <span class=\"m\">00</span>:00:00     \n<span class=\"o\">(</span><span class=\"m\">2</span>/9<span class=\"o\">)</span>: dracut-network-033-502.el7.x86_64.rpm                                                                    <span class=\"p\">|</span>  <span class=\"m\">97</span> kB  <span class=\"m\">00</span>:00:05     \n<span class=\"o\">(</span><span class=\"m\">3</span>/9<span class=\"o\">)</span>: dracut-config-rescue-033-502.el7.x86_64.rpm                                                              <span class=\"p\">|</span>  <span class=\"m\">55</span> kB  <span class=\"m\">00</span>:00:05     \n<span class=\"o\">(</span><span class=\"m\">4</span>/9<span class=\"o\">)</span>: kexec-tools-2.0.14-17.2.el7.x86_64.rpm                                                                   <span class=\"p\">|</span> <span class=\"m\">333</span> kB  <span class=\"m\">00</span>:00:06     \n<span class=\"o\">(</span><span class=\"m\">5</span>/9<span class=\"o\">)</span>: kmod-nvidia-384.98-1.el7_4.elrepo.x86_64.rpm                                                             <span class=\"p\">|</span>  <span class=\"m\">12</span> MB  <span class=\"m\">00</span>:00:10     \n<span class=\"o\">(</span><span class=\"m\">6</span>/9<span class=\"o\">)</span>: yum-plugin-nvidia-1.0.2-1.el7.elrepo.noarch.rpm                                                          <span class=\"p\">|</span>  <span class=\"m\">12</span> kB  <span class=\"m\">00</span>:00:05     \n<span class=\"o\">(</span><span class=\"m\">7</span>/9<span class=\"o\">)</span>: nvidia-x11-drv-384.98-2.el7.elrepo.x86_64.rpm                                                            <span class=\"p\">|</span>  <span class=\"m\">43</span> MB  <span class=\"m\">00</span>:00:11     \n<span class=\"o\">(</span><span class=\"m\">8</span>/9<span class=\"o\">)</span>: linux-firmware-20170606-56.gitc990aae.el7.noarch.rpm                                                     <span class=\"p\">|</span>  <span class=\"m\">35</span> MB  <span class=\"m\">00</span>:00:27     \nkernel-3.10.0-693.11.1.el7.x86 <span class=\"nv\">FAILED</span>                                          <span class=\"o\">=========</span>             <span class=\"o\">]</span> <span class=\"m\">259</span> kB/s <span class=\"p\">|</span>  <span class=\"m\">94</span> MB  <span class=\"m\">00</span>:02:36 ETA \nhttp://mirror.lzu.edu.cn/centos/7.4.1708/updates/x86_64/Packages/kernel-3.10.0-693.11.1.el7.x86_64.rpm: <span class=\"o\">[</span>Errno <span class=\"m\">12</span><span class=\"o\">]</span> Timeout on http://mirror.lzu.edu.cn/centos/7.4.1708/updates/x86_64/Packages/kernel-3.10.0-693.11.1.el7.x86_64.rpm: <span class=\"o\">(</span><span class=\"m\">28</span>, <span class=\"s1\">&#39;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#39;</span><span class=\"o\">)</span>\n正在尝试其它镜像。\nkernel-3.10.0-693.11.1.el7.x86 <span class=\"nv\">FAILED</span>                                          <span class=\"o\">=========</span>-            <span class=\"o\">]</span>   <span class=\"m\">68</span> B/s <span class=\"p\">|</span>  <span class=\"m\">95</span> MB <span class=\"m\">166</span>:24:38 ETA \nhttp://mirrors.zju.edu.cn/centos/7.4.1708/updates/x86_64/Packages/kernel-3.10.0-693.11.1.el7.x86_64.rpm: <span class=\"o\">[</span>Errno <span class=\"m\">12</span><span class=\"o\">]</span> Timeout on http://mirrors.zju.edu.cn/centos/7.4.1708/updates/x86_64/Packages/kernel-3.10.0-693.11.1.el7.x86_64.rpm: <span class=\"o\">(</span><span class=\"m\">28</span>, <span class=\"s1\">&#39;Operation too slow. Less than 1000 bytes/sec transferred the last 30 seconds&#39;</span><span class=\"o\">)</span>\n正在尝试其它镜像。\n<span class=\"o\">(</span><span class=\"m\">9</span>/9<span class=\"o\">)</span>: kernel-3.10.0-693.11.1.el7.x86_64.rpm                                                                    <span class=\"p\">|</span>  <span class=\"m\">43</span> MB  <span class=\"m\">00</span>:00:07     \n---------------------------------------------------------------------------------------------------------------------------------------\n总计                                                                                                   <span class=\"m\">1</span>.4 MB/s <span class=\"p\">|</span> <span class=\"m\">134</span> MB  <span class=\"m\">00</span>:01:33     \nRunning transaction check\nRunning transaction <span class=\"nb\">test</span>\nTransaction <span class=\"nb\">test</span> succeeded\nRunning transaction\n  正在更新    : dracut-033-502.el7.x86_64                                                                                         <span class=\"m\">1</span>/14 \n  正在更新    : dracut-network-033-502.el7.x86_64                                                                                 <span class=\"m\">2</span>/14 \n  正在更新    : linux-firmware-20170606-56.gitc990aae.el7.noarch                                                                  <span class=\"m\">3</span>/14 \n  正在安装    : kernel-3.10.0-693.11.1.el7.x86_64                                                                                 <span class=\"m\">4</span>/14 \n  正在安装    : yum-plugin-nvidia-1.0.2-1.el7.elrepo.noarch                                                                       <span class=\"m\">5</span>/14 \n  正在安装    : kmod-nvidia-384.98-1.el7_4.elrepo.x86_64                                                                          <span class=\"m\">6</span>/14 \nWorking. This may take some <span class=\"nb\">time</span> ...\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nvidia_register_module\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nv_kthread_q_schedule_q_item\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nvidia_get_rm_ops\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nv_kthread_q_item_init\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nv_kthread_q_stop\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nvidia_unregister_module\ndepmod: WARNING: /lib/modules/3.10.0-514.el7.x86_64/weak-updates/nvidia/nvidia-modeset.ko needs unknown symbol nv_kthread_q_init\nDone.\n  正在安装    : nvidia-x11-drv-384.98-2.el7.elrepo.x86_64                                                                         <span class=\"m\">7</span>/14 \n  正在更新    : kexec-tools-2.0.14-17.2.el7.x86_64                                                                                <span class=\"m\">8</span>/14 \n  正在更新    : dracut-config-rescue-033-502.el7.x86_64                                                                           <span class=\"m\">9</span>/14 \n  清理        : kexec-tools-2.0.7-50.el7.x86_64                                                                                  <span class=\"m\">10</span>/14 \n  清理        : dracut-network-033-463.el7.x86_64                                                                                <span class=\"m\">11</span>/14 \n  清理        : dracut-config-rescue-033-463.el7.x86_64                                                                          <span class=\"m\">12</span>/14 \n  清理        : linux-firmware-20160830-49.git7534e19.el7.noarch                                                                 <span class=\"m\">13</span>/14 \n  清理        : dracut-033-463.el7.x86_64                                                                                        <span class=\"m\">14</span>/14 \n\nBroadcast message from systemd-journald@gemfield.org <span class=\"o\">(</span>Thu <span class=\"m\">2017</span>-12-07 <span class=\"m\">11</span>:28:54 CST<span class=\"o\">)</span>:\n\ndracut<span class=\"o\">[</span><span class=\"m\">47542</span><span class=\"o\">]</span>: dracut: creation of /boot/initramfs-0-rescue-8e7c99366c8d4271afd50c6812a8fe06.img failed\n\n\nMessage from syslogd@gemfield.org at Dec  <span class=\"m\">7</span> <span class=\"m\">11</span>:28:54 ...\n dracut:dracut: creation of /boot/initramfs-0-rescue-8e7c99366c8d4271afd50c6812a8fe06.img failed\ncp: error writing <span class=\"s1\">&#39;/boot/initramfs-0-rescue-8e7c99366c8d4271afd50c6812a8fe06.img&#39;</span>: No space left on device\ncp: failed to extend <span class=\"s1\">&#39;/boot/initramfs-0-rescue-8e7c99366c8d4271afd50c6812a8fe06.img&#39;</span>: No space left on device\ndracut: creation of /boot/initramfs-0-rescue-8e7c99366c8d4271afd50c6812a8fe06.img failed\n  验证中      : kmod-nvidia-384.98-1.el7_4.elrepo.x86_64                                                                          <span class=\"m\">1</span>/14 \n  验证中      : yum-plugin-nvidia-1.0.2-1.el7.elrepo.noarch                                                                       <span class=\"m\">2</span>/14 \n  验证中      : kexec-tools-2.0.14-17.2.el7.x86_64                                                                                <span class=\"m\">3</span>/14 \n  验证中      : dracut-network-033-502.el7.x86_64                                                                                 <span class=\"m\">4</span>/14 \n  验证中      : dracut-033-502.el7.x86_64                                                                                         <span class=\"m\">5</span>/14 \n  验证中      : linux-firmware-20170606-56.gitc990aae.el7.noarch                                                                  <span class=\"m\">6</span>/14 \n  验证中      : nvidia-x11-drv-384.98-2.el7.elrepo.x86_64                                                                         <span class=\"m\">7</span>/14 \n  验证中      : dracut-config-rescue-033-502.el7.x86_64                                                                           <span class=\"m\">8</span>/14 \n  验证中      : kernel-3.10.0-693.11.1.el7.x86_64                                                                                 <span class=\"m\">9</span>/14 \n  验证中      : kexec-tools-2.0.7-50.el7.x86_64                                                                                  <span class=\"m\">10</span>/14 \n  验证中      : dracut-033-463.el7.x86_64                                                                                        <span class=\"m\">11</span>/14 \n  验证中      : dracut-config-rescue-033-463.el7.x86_64                                                                          <span class=\"m\">12</span>/14 \n  验证中      : dracut-network-033-463.el7.x86_64                                                                                <span class=\"m\">13</span>/14 \n  验证中      : linux-firmware-20160830-49.git7534e19.el7.noarch                                                                 <span class=\"m\">14</span>/14 \n\n已安装:\n  kernel.x86_64 <span class=\"m\">0</span>:3.10.0-693.11.1.el7                            kmod-nvidia.x86_64 <span class=\"m\">0</span>:384.98-1.el7_4.elrepo                           \n\n作为依赖被安装:\n  nvidia-x11-drv.x86_64 <span class=\"m\">0</span>:384.98-2.el7.elrepo                       yum-plugin-nvidia.noarch <span class=\"m\">0</span>:1.0.2-1.el7.elrepo                      \n\n更新完毕:\n  kexec-tools.x86_64 <span class=\"m\">0</span>:2.0.14-17.2.el7                                                                                                 \n\n作为依赖被升级:\n  dracut.x86_64 <span class=\"m\">0</span>:033-502.el7                         dracut-config-rescue.x86_64 <span class=\"m\">0</span>:033-502.el7  dracut-network.x86_64 <span class=\"m\">0</span>:033-502.el7 \n  linux-firmware.noarch <span class=\"m\">0</span>:20170606-56.gitc990aae.el7 \n\n完毕！</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>8，重启系统</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">reboot</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>9，查看驱动是否正常工作</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># nvidia-smi</span> \nThu Dec  <span class=\"m\">7</span> <span class=\"m\">11</span>:36:31 <span class=\"m\">2017</span>       \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> NVIDIA-SMI <span class=\"m\">384</span>.98                 Driver Version: <span class=\"m\">384</span>.98                    <span class=\"p\">|</span>\n<span class=\"p\">|</span>-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span> GPU  Name        Persistence-M<span class=\"p\">|</span> Bus-Id        Disp.A <span class=\"p\">|</span> Volatile Uncorr. ECC <span class=\"p\">|</span>\n<span class=\"p\">|</span> Fan  Temp  Perf  Pwr:Usage/Cap<span class=\"p\">|</span>         Memory-Usage <span class=\"p\">|</span> GPU-Util  Compute M. <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">===============================</span>+<span class=\"o\">======================</span>+<span class=\"o\">======================</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>   <span class=\"m\">0</span>  Tesla P40           Off  <span class=\"p\">|</span> <span class=\"m\">00000000</span>:08:00.0 Off <span class=\"p\">|</span>                    <span class=\"m\">0</span> <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   27C    P0    50W / 250W <span class=\"p\">|</span>      0MiB / 22912MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span>   <span class=\"m\">1</span>  Tesla P40           Off  <span class=\"p\">|</span> <span class=\"m\">00000000</span>:09:00.0 Off <span class=\"p\">|</span>                    <span class=\"m\">0</span> <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   26C    P0    50W / 250W <span class=\"p\">|</span>      0MiB / 22912MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span>   <span class=\"m\">2</span>  Tesla P40           Off  <span class=\"p\">|</span> <span class=\"m\">00000000</span>:89:00.0 Off <span class=\"p\">|</span>                    <span class=\"m\">0</span> <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   28C    P0    50W / 250W <span class=\"p\">|</span>      0MiB / 22912MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span>   <span class=\"m\">3</span>  Tesla P40           Off  <span class=\"p\">|</span> <span class=\"m\">00000000</span>:8A:00.0 Off <span class=\"p\">|</span>                    <span class=\"m\">0</span> <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   25C    P0    50W / 250W <span class=\"p\">|</span>      0MiB / 22912MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> Processes:                                                       GPU Memory <span class=\"p\">|</span>\n<span class=\"p\">|</span>  GPU       PID   Type   Process name                             Usage      <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">=============================================================================</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>  No running processes found                                                 <span class=\"p\">|</span>\n+-----------------------------------------------------------------------------+</code></pre></div><h2><b>10, 安装Docker CE</b></h2><p>参考：<a href=\"https://link.zhihu.com/?target=https%3A//docs.docker.com/engine/installation/linux/docker-ce/centos/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Get Docker CE for CentOS</a></p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>11,安装Nvidia-docker</b></h2><p>Nvidia-docker1的安装步骤：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/nvidia/nvidia-docker/wiki/Installation-%28version-1.0%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NVIDIA/nvidia-docker</a></p><p>Nvidia-docker2的安装步骤：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/nvidia/nvidia-docker/wiki/Installation-%28version-2.0%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NVIDIA/nvidia-docker</a></p><p><b>注意，nvidia-docker2在gemfield写此文时才发布不到一个月，docker-compose还不支持，因为nvidia-docker2将驱动volume去掉了。预计将在gemfield写此文的一个月后，docker-compose将会支持nvidia-docker2。</b></p><h2><b>12,安装docker-compose</b></h2><p>对于docker-compose的安装，Gemfield选择了pip3的方式安装，CentOS 7上安装这个有点曲折：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># yum -y install epel-release</span>\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># yum install python34-pip</span>\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># easy_install-3.4 pip</span>\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># pip3</span>\n<span class=\"o\">[</span>root@gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># pip3 install docker-compose</span></code></pre></div><p>（完）</p>", 
            "topic": [
                {
                    "tag": "CentOS", 
                    "tagLink": "https://api.zhihu.com/topics/19577255"
                }, 
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "suanfalalala", 
                    "userLink": "https://www.zhihu.com/people/d01d91cb68cca33da1df031e5b59f521", 
                    "content": "你好，我这边按照步骤来，但是没办法自动更新kernel，分析依赖之后就报错了，请问怎么办啊？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "wordcount", 
                            "userLink": "https://www.zhihu.com/people/7e1afb51d732e3957b27e795e5bb4189", 
                            "content": "<p>降级，换个不那么新的nvidia驱动</p>", 
                            "likes": 0, 
                            "replyToAuthor": "suanfalalala"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/32276041", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 2, 
            "title": "OpenCV读视频性能测试：python和C++ API比较", 
            "content": "<h2><b>[重要更新]</b></h2><p><b>2017年12月23日，opencv</b> <b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/skvark/opencv-python/releases/tag/11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3.3.1.11</a></b> <b>发布。首次在Linux平台上带来了读视频的功能，详情参考Gemfield专栏文章：</b></p><h2><a href=\"https://zhuanlan.zhihu.com/p/33476723\" class=\"internal\">opencv-python 3.3.1.11：Linux平台cv2读视频时代到来</a></h2><p>基于pip下载的opencv_python包中的opencv库为静态编译，同本文所使用的动态编译opencv库相比，读视频的速度获得了成倍提升！</p><h2><b>背景</b></h2><p>在使用Caffe库对视频进行特征分析时，一般的做法就是逐帧（或者每n帧取1帧），然后将这一帧图像送给Caffe的Net去做分类或者目标检测。项目中使用Python代码较多，从python代码实施的角度来讲，取帧的方式一般就是ffmpeg和OpenCV。Gemfield在项目中选用的就是python的openCV模块： import cv2。</p><p><b>备注：以下测试基于的是x99硬件平台，OpenCV基于<a href=\"https://zhuanlan.zhihu.com/p/30413043\" class=\"internal\">opencv读视频时的编码问题</a> 进行编译。</b></p><h2><b>问题</b></h2><p>在该项目中，我们读取帧的产生的性能问题让Gemfield深感忧虑。具体来说，就是在针对一个视频（mp4容器、h264编码）读帧（read Frame）的操作时，平均下来，每帧要耗费大约0.139秒的时间（Intel Xeon CPU E5-2620 v3 @ 2.40GHz，16GB RAM）。而Caffe Model的Net分析一帧的时间也才0.1秒左右...</p><p>上述读帧的python代码(gemfield_seek.py)如下：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">time_start_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">time_cost_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">time_times</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">def</span> <span class=\"nf\">logTime</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">global</span> <span class=\"n\">time_times</span>\n    <span class=\"k\">if</span> <span class=\"n\">loc</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;Whole&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">time_times</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">time_cost_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">time_start_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">loc</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">cost</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">time_start_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span>\n        <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">cost</span>\n        <span class=\"n\">average</span> <span class=\"o\">=</span> <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">time_times</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\">: </span><span class=\"si\">{}</span><span class=\"s1\"> - </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">))</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;-----------------------&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unsupported loc: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cvPt</span><span class=\"p\">(</span><span class=\"n\">local_filename</span><span class=\"p\">):</span>\n    <span class=\"n\">video_cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_filename</span><span class=\"p\">))</span>\n    <span class=\"n\">fps</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FPS</span> <span class=\"p\">))</span>\n    <span class=\"n\">frame_cnt</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FRAME_COUNT</span> <span class=\"p\">))</span>\n    <span class=\"n\">sample_frames</span> <span class=\"o\">=</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">frame_cnt</span><span class=\"p\">)</span>\n    <span class=\"n\">ERROR_FRAMES</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n    <span class=\"c1\"># create image directory if not exist</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">frame_index</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">sample_frames</span><span class=\"p\">):</span>\n        <span class=\"n\">is_print</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;Whole&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;setFrame&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_POS_FRAMES</span><span class=\"p\">,</span> <span class=\"n\">frame_index</span><span class=\"p\">)</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;setFrame&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;readFrame&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;readFrame&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n            <span class=\"n\">ERROR_FRAMES</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;[CVWARING] fetch frame </span><span class=\"si\">{}</span><span class=\"s1\"> failed, total frames is </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">frame_index</span><span class=\"p\">,</span> <span class=\"n\">frame_cnt</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"n\">ERROR_FRAMES</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span> <span class=\"s1\">&#39;fetch frame </span><span class=\"si\">{}</span><span class=\"s1\"> failed, total frames is </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">frame_index</span><span class=\"p\">,</span> <span class=\"n\">frame_cnt</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n    <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">abs_video_f</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/gemfield/test/test222.mp4&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">abs_video_f</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">cvPt</span><span class=\"p\">(</span><span class=\"n\">abs_video_f</span><span class=\"p\">)</span></code></pre></div><p>输出结果如下：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@scene:/home/gemfield/test/opencv# python3 gemfield_seek.py ../test/test222.mp4 \n......（刚开始的帧）\nsetFrame: <span class=\"m\">0</span>.051221370697021484 - <span class=\"m\">0</span>.04456290602684021\n-----------------------\nreadFrame: <span class=\"m\">0</span>.008270025253295898 - <span class=\"m\">0</span>.012707263231277466\n-----------------------\nsetFrame: <span class=\"m\">0</span>.0626213550567627 - <span class=\"m\">0</span>.04562516773448271\n-----------------------\nreadFrame: <span class=\"m\">0</span>.01091456413269043 - <span class=\"m\">0</span>.012601810343125287\n......（读了一会儿之后的数据）\nsetFrame: <span class=\"m\">0</span>.0783698558807373 - <span class=\"m\">0</span>.13035893788972755\n-----------------------\nreadFrame: <span class=\"m\">0</span>.009439706802368164 - <span class=\"m\">0</span>.009669762560732095\n-----------------------\nsetFrame: <span class=\"m\">0</span>.08253788948059082 - <span class=\"m\">0</span>.13032215246787437\n-----------------------\nreadFrame: <span class=\"m\">0</span>.00872659683227539 - <span class=\"m\">0</span>.009669037048633282\n</code></pre></div><p>可以看到2点信息，一是代码中使用OpenCV seek某一帧的时间约为0.13秒，而读这一帧的时间约为0.01秒。二是，seek  frame的时间在刚开始是比较快的，大概读个100帧左右，速度就缓慢下降并稳定在了0.13秒。所以大部分的损耗竟然发生在seek frame上。</p><h2><b>猜测</b></h2><p>现在的猜测出现了2个分支：一是seek再read的方式和按视频流顺序读的方式之间的差别；二是python API和C++ API的方式之间的区别，会不会是python API的performance天然的就差呢？如果换成C++的API，那么情况会好转吗？</p><p><b>那就动手比较这4种情况吧。</b></p><h2><b>1，Python API：Seek + Read</b></h2><p>参考上面的[<b>问题]</b></p><h2><b>2，Python API：按顺序读</b></h2><p>代码如下(gemfield_read.py)：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n\n<span class=\"n\">time_start_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">time_cost_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"n\">time_times</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"k\">def</span> <span class=\"nf\">logTime</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"s1\">&#39;B&#39;</span><span class=\"p\">):</span>\n    <span class=\"k\">global</span> <span class=\"n\">time_times</span>\n    <span class=\"k\">if</span> <span class=\"n\">loc</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;Whole&#39;</span><span class=\"p\">:</span>\n            <span class=\"n\">time_times</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">time_cost_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">time_start_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"n\">loc</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">:</span>\n        <span class=\"n\">cost</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">time_start_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span>\n        <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">cost</span>\n        <span class=\"n\">average</span> <span class=\"o\">=</span> <span class=\"n\">time_cost_dict</span><span class=\"p\">[</span><span class=\"n\">op</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"n\">time_times</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">{}</span><span class=\"s1\"> | </span><span class=\"si\">{}</span><span class=\"s1\">: </span><span class=\"si\">{}</span><span class=\"s1\"> - </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">time_times</span><span class=\"p\">,</span> <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"n\">average</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Unsupported loc: </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"p\">))</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cvPt</span><span class=\"p\">(</span><span class=\"n\">local_filename</span><span class=\"p\">):</span>\n    <span class=\"n\">video_cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_filename</span><span class=\"p\">))</span>\n    <span class=\"n\">fps</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FPS</span> <span class=\"p\">))</span>\n    <span class=\"n\">frame_cnt</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FRAME_COUNT</span> <span class=\"p\">))</span>\n    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">):</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;Whole&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;readFrame&#39;</span><span class=\"p\">)</span> \n        <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"n\">logTime</span><span class=\"p\">(</span><span class=\"s1\">&#39;readFrame&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">release</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">abs_video_f</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/home/gemfield/test/test222.mp4&#39;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">abs_video_f</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">cvPt</span><span class=\"p\">(</span><span class=\"n\">abs_video_f</span><span class=\"p\">)</span></code></pre></div><p>程序执行输出如下：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@scene:/home/gemfield/test# python3 gemfield_read.py ../test/test222.mp4\n<span class=\"m\">1</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.053015947341918945 - <span class=\"m\">0</span>.053015947341918945\n<span class=\"m\">2</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.008069515228271484 - <span class=\"m\">0</span>.030542731285095215\n<span class=\"m\">3</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0064580440521240234 - <span class=\"m\">0</span>.022514502207438152\n<span class=\"m\">4</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.006206035614013672 - <span class=\"m\">0</span>.01843738555908203\n<span class=\"m\">5</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.006482124328613281 - <span class=\"m\">0</span>.01604633331298828\n<span class=\"m\">6</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.009226799011230469 - <span class=\"m\">0</span>.014909744262695312\n<span class=\"m\">7</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005541324615478516 - <span class=\"m\">0</span>.013571398598807198\n<span class=\"m\">8</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005561351776123047 - <span class=\"m\">0</span>.01257014274597168\n<span class=\"m\">9</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005191326141357422 - <span class=\"m\">0</span>.011750274234347872\n<span class=\"m\">10</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005190134048461914 - <span class=\"m\">0</span>.011094260215759277\n......\n<span class=\"m\">2748</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0060291290283203125 - <span class=\"m\">0</span>.006067558146980652\n<span class=\"m\">2749</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.006089687347412109 - <span class=\"m\">0</span>.006067566196889867\n<span class=\"m\">2750</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005376338958740234 - <span class=\"m\">0</span>.0060673148415305396\n<span class=\"m\">2751</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0051801204681396484 - <span class=\"m\">0</span>.0060669923426670755\n<span class=\"m\">2752</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0056912899017333984 - <span class=\"m\">0</span>.006066855822884759\n<span class=\"m\">2753</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.009527206420898438 - <span class=\"m\">0</span>.006068112760987924\n<span class=\"m\">2754</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.007679939270019531 - <span class=\"m\">0</span>.006068698028420398\n<span class=\"m\">2755</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005699634552001953 - <span class=\"m\">0</span>.006068564067085945\n<span class=\"m\">2756</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0061647891998291016 - <span class=\"m\">0</span>.006068598981865605\n<span class=\"m\">2757</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0057332515716552734 - <span class=\"m\">0</span>.006068477346968902\n<span class=\"m\">2758</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005670785903930664 - <span class=\"m\">0</span>.006068333151376792\n<span class=\"m\">2759</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0054531097412109375 - <span class=\"m\">0</span>.006068110163551433\n......\n<span class=\"m\">3710</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.007841825485229492 - <span class=\"m\">0</span>.005905142434523755\n<span class=\"m\">3711</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.007093906402587891 - <span class=\"m\">0</span>.005905462769734767\n<span class=\"m\">3712</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0071887969970703125 - <span class=\"m\">0</span>.00590580849555032\n<span class=\"m\">3713</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.006438016891479492 - <span class=\"m\">0</span>.005905951832042625\n<span class=\"m\">3714</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005589008331298828 - <span class=\"m\">0</span>.005905866494535694\n<span class=\"m\">3715</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005753993988037109 - <span class=\"m\">0</span>.005905825613645653\n<span class=\"m\">3716</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005844593048095703 - <span class=\"m\">0</span>.005905809135560199\n<span class=\"m\">3717</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005541324615478516 - <span class=\"m\">0</span>.005905711076770831\n<span class=\"m\">3718</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005610942840576172 - <span class=\"m\">0</span>.005905631795373253\n<span class=\"m\">3719</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0050907135009765625 - <span class=\"m\">0</span>.005905412672411597\n<span class=\"m\">3720</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.005651712417602539 - <span class=\"m\">0</span>.0059053444734183695</code></pre></div><p>可以看到，按照读文件流的方式，每帧的读取时间约为0.006秒。</p><h2><b>3，C++ API：Seek + Read</b></h2><p>代码如下（gemfield_seek.cpp）:</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/core/core.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;opencv2/highgui/highgui.hpp&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;iostream&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;chrono&gt;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;ctime&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">cv</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span> <span class=\"n\">argv</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">string</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"s\">&#34;/home/gemfield/test/test222.mp4&#34;</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">){</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">VideoCapture</span> <span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">);</span>\n    <span class=\"n\">Mat</span> <span class=\"n\">frame</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"n\">capture</span><span class=\"p\">.</span><span class=\"n\">isOpened</span><span class=\"p\">()</span> <span class=\"p\">)</span>\n        <span class=\"k\">throw</span> <span class=\"s\">&#34;Error when reading mp4&#34;</span><span class=\"p\">;</span>\n    \n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">time_point</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">&gt;</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">middle</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">frame_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">total_time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"p\">;</span> <span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n       <span class=\"n\">frame_index</span> <span class=\"o\">++</span><span class=\"p\">;</span>\n       <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n       <span class=\"cm\">/* set pointer to frame index i */</span>\n       <span class=\"n\">capture</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">CV_CAP_PROP_POS_FRAMES</span><span class=\"p\">,</span> <span class=\"n\">frame_index</span><span class=\"p\">);</span>\n       <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n       <span class=\"cm\">/* capture the frame and do sth with it */</span>\n       <span class=\"n\">capture</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">frame</span><span class=\"p\">;</span>\n       <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"n\">frame</span><span class=\"p\">.</span><span class=\"n\">empty</span><span class=\"p\">()){</span>\n           <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&#34;Finished.&#34;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n           <span class=\"k\">break</span><span class=\"p\">;</span>\n       <span class=\"p\">}</span>\n       <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">system_clock</span><span class=\"o\">::</span><span class=\"n\">now</span><span class=\"p\">();</span>\n       <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">seconds_total</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n       <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">seconds_seek</span> <span class=\"o\">=</span> <span class=\"n\">middle</span> <span class=\"o\">-</span> <span class=\"n\">start</span><span class=\"p\">;</span>\n       <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">chrono</span><span class=\"o\">::</span><span class=\"n\">duration</span><span class=\"o\">&lt;</span><span class=\"kt\">double</span><span class=\"o\">&gt;</span> <span class=\"n\">seconds_read</span> <span class=\"o\">=</span> <span class=\"n\">end</span> <span class=\"o\">-</span> <span class=\"n\">middle</span><span class=\"p\">;</span>\n       <span class=\"n\">total_time</span> <span class=\"o\">+=</span> <span class=\"n\">seconds_total</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">();</span>\n       <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span><span class=\"s\">&#34;Index: &#34;</span><span class=\"o\">&lt;&lt;</span> <span class=\"n\">frame_index</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; | seek: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">seconds_seek</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;s&#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; | read: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">seconds_read</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;s&#34;</span><span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34; | total: &#34;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">seconds_total</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&#34;s&#34;</span><span class=\"o\">&lt;&lt;</span><span class=\"s\">&#34; | aver: &#34;</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">total_time</span><span class=\"o\">/</span><span class=\"n\">frame_index</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>编译：</p><div class=\"highlight\"><pre><code class=\"language-bash\">g++ -std<span class=\"o\">=</span>c++11 gemfield_seek.cpp -lopencv_core -lopencv_videoio -o gemfield_seek</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>运行：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@scene:/home/gemfield/test# ./gemfield_seek ../test/test222.mp4\nIndex: <span class=\"m\">1</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0995976s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.019335s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.118933s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.118933\nIndex: <span class=\"m\">2</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0330427s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00800924s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0410519s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0799923\nIndex: <span class=\"m\">3</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0464318s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00794659s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0543784s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0714543\nIndex: <span class=\"m\">4</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0431533s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0111978s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0543512s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0671785\nIndex: <span class=\"m\">5</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0481438s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00774463s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0558885s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0649205\nIndex: <span class=\"m\">6</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0494663s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0102679s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0597342s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0640561\nIndex: <span class=\"m\">7</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0495316s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00924286s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0587744s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0633016\nIndex: <span class=\"m\">8</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0511648s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00957251s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0607373s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0629811\nIndex: <span class=\"m\">9</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0507133s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00756003s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0582734s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.062458\nIndex: <span class=\"m\">10</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0383379s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00898075s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0473187s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0609441\nIndex: <span class=\"m\">11</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.0623336s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0105759s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.0729096s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.0620318\n......\nIndex: <span class=\"m\">650</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.153053s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00679515s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.159848s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138271\nIndex: <span class=\"m\">651</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.13733s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0124941s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.149824s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138289\nIndex: <span class=\"m\">652</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.139874s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00714733s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.147022s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138302\nIndex: <span class=\"m\">653</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.155352s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0135669s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.168919s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138349\nIndex: <span class=\"m\">654</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.151458s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00796778s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.159426s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138381\nIndex: <span class=\"m\">655</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.13896s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0128386s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.151799s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138402\nIndex: <span class=\"m\">656</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.142042s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00912114s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.151163s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138421\nIndex: <span class=\"m\">657</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.151733s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00909946s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.160833s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138455\nIndex: <span class=\"m\">658</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.152458s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00739748s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.159856s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138488\nIndex: <span class=\"m\">659</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.152881s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0110096s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.163891s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.138526\nIndex: <span class=\"m\">660</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.151401s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00618463s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.157586s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.13855\n......\nIndex: <span class=\"m\">1260</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.135438s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00870509s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.144144s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139064\nIndex: <span class=\"m\">1261</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.150076s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0107371s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.160813s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139081\nIndex: <span class=\"m\">1262</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.136285s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00718818s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.143473s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139084\nIndex: <span class=\"m\">1263</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.168572s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00631354s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.174885s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139113\nIndex: <span class=\"m\">1264</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.165383s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00813947s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.173522s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.13914\nIndex: <span class=\"m\">1265</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.156136s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.0109173s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.167054s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139162\nIndex: <span class=\"m\">1266</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.175051s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00858275s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.183634s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139197\nIndex: <span class=\"m\">1267</span> <span class=\"p\">|</span> seek: <span class=\"m\">0</span>.163603s <span class=\"p\">|</span> read: <span class=\"m\">0</span>.00805248s <span class=\"p\">|</span> total: <span class=\"m\">0</span>.171655s <span class=\"p\">|</span> aver: <span class=\"m\">0</span>.139223</code></pre></div><p>可以看到，seek花的时间也很长，和python相差无几。</p><h2><b>4，C++ API：按顺序读</b></h2><p>代码如下（gemfield_read.cpp）:</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;opencv2/core/core.hpp&gt;\n#include &lt;opencv2/highgui/highgui.hpp&gt;\n#include &lt;iostream&gt;\n#include &lt;chrono&gt;\n#include &lt;ctime&gt;\nusing namespace cv;\nusing namespace std;\nint main(int argc, char** argv)\n{\n    string filename = &#34;/home/gemfield/test/test222.mp4&#34;;\n    if(argc == 2){\n        filename = argv[1];\n    }\n    VideoCapture capture(filename);\n    Mat frame;\n    std::chrono::time_point&lt;std::chrono::system_clock&gt; start, end;\n    if( !capture.isOpened() )\n        throw &#34;Error when reading mp4&#34;;\n    \n    int frame_index = 0;\n    float total_time = 0;\n    for( ; ;){\n        start = std::chrono::system_clock::now();\n        frame_index ++;\n        capture &gt;&gt; frame;\n        if(frame.empty())\n            break;\n        end = std::chrono::system_clock::now();\n        std::chrono::duration&lt;double&gt; seconds_total = end - start;\n        total_time += seconds_total.count();\n        //std::time_t start_time = std::chrono::system_clock::to_time_t(start);\n        //std::time_t end_time = std::chrono::system_clock::to_time_t(end);\n        //std::cout &lt;&lt;&#34;Index: &#34;&lt;&lt; frame_index &lt;&lt; &#34; | Finished at &#34; &lt;&lt; std::ctime(&amp;end_time) &lt;&lt; &#34; | Start at &#34;&lt;&lt;std::ctime(&amp;start_time) &lt;&lt; &#34; | elapsed time: &#34; &lt;&lt; elapsed_seconds.count()&lt;&lt; std::endl;\n        std::cout &lt;&lt;&#34;Index: &#34;&lt;&lt; frame_index &lt;&lt; &#34; | readFrame: &#34; &lt;&lt; seconds_total.count() &lt;&lt; &#34;s&#34;&lt;&lt;&#34; | average: &#34;&lt;&lt;total_time/frame_index&lt;&lt;std::endl;\n    }\n    // releases and window destroy are automatic in C++ interface\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>编译：</p><div class=\"highlight\"><pre><code class=\"language-bash\">g++ -std<span class=\"o\">=</span>c++11 gemfield_read.cpp -lopencv_core -lopencv_videoio -o gemfield_read</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>运行：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@scene:/home/gemfield/test# ./gemfield_read ../test/test222.mp4\nIndex: <span class=\"m\">1</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0663819s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.066382\nIndex: <span class=\"m\">2</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00535328s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0358676\nIndex: <span class=\"m\">3</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00565319s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0257961\nIndex: <span class=\"m\">4</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00526596s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0206636\nIndex: <span class=\"m\">5</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00532343s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0175956\nIndex: <span class=\"m\">6</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0084277s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0160676\nIndex: <span class=\"m\">7</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00700944s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0147736\nIndex: <span class=\"m\">8</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.0078517s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0139083\nIndex: <span class=\"m\">9</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00649891s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.0130851\n......\nIndex: <span class=\"m\">9130</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00512566s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578302\nIndex: <span class=\"m\">9131</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00461669s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578289\nIndex: <span class=\"m\">9132</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00452525s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578276\nIndex: <span class=\"m\">9133</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00463961s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578263\nIndex: <span class=\"m\">9134</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00446446s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578249\nIndex: <span class=\"m\">9135</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00693344s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578261\nIndex: <span class=\"m\">9136</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00604796s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578264\nIndex: <span class=\"m\">9137</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00522689s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578258\nIndex: <span class=\"m\">9138</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00446979s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578244\nIndex: <span class=\"m\">9139</span> <span class=\"p\">|</span> readFrame: <span class=\"m\">0</span>.00439828s <span class=\"p\">|</span> average: <span class=\"m\">0</span>.00578229</code></pre></div><p>可以看到，读帧的时间比python的稍微快一点，但也只是快一点点。</p><h2><b>总结</b></h2><p>所以性能方面来讲，问题并不是出在是选用OpenCV的python API还是C++ API上，而是，为什么seek的模式会比按顺序读取慢这么多呢（数量级的差别）？这是因为，现代的视频编码技术为了得到更高的压缩比，使得一个帧会对其前后的帧有依赖关系。这就使得seek+read的操作方式并不像数组那样对起始地址加上一个offset，而是引入了大量的计算。这一点一定要清楚的意识到。</p><p></p>", 
            "topic": [
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "C++", 
                    "tagLink": "https://api.zhihu.com/topics/19584970"
                }
            ], 
            "comments": [
                {
                    "userName": "LostFrequency", 
                    "userLink": "https://www.zhihu.com/people/3e7dcb3b899f9d0da33b8f2031fda6c8", 
                    "content": "<p>多谢，很有帮助。最近在用opencv处理视频，也发现了seek+read的方式特别慢。请教一下lz，除了opencv，还有其他库可以处理视频吗，我想将一个视频分成10段，每段取32帧，现在效率特别慢。</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "峻许", 
                    "userLink": "https://www.zhihu.com/people/e27a91db7f6d234aaa7a111cfddc8933", 
                    "content": "python顺序读也要算10帧的时间和吧", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30413043", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 1, 
            "title": "opencv读视频时的编码问题", 
            "content": "<h2><b>[重要更新]</b></h2><p><b>2017年12月23日，opencv <a href=\"https://link.zhihu.com/?target=https%3A//github.com/skvark/opencv-python/releases/tag/11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3.3.1.11</a> 发布。首次在Linux平台上带来了读视频的功能，详情参考Gemfield专栏文章：</b></p><h2><a href=\"https://zhuanlan.zhihu.com/p/33476723\" class=\"internal\">opencv-python 3.3.1.11：Linux平台cv2读视频时代到来</a></h2><h2><b>背景</b></h2><p>在视频标注系统上，标注人员在视频上使用矩形框选中目标对象来进行数据的标注，如何验证标注工作的质量就成为了当务之急。</p><p>Gemfield设计的验证流程就是，从JSON格式的标注结果中解析出每个annotation所在的视频时间（因为html5拿不到video的帧，只能拿到时间，fix me?）以及矩形框的x, y, w, h。然后使用opencv从视频中将照片抓取出来生成在和目标同名的目录中。核心代码如下：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">sqlite3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">import</span> <span class=\"nn\">cv2</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">video_cap</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">VideoCapture</span><span class=\"p\">(</span><span class=\"n\">h264_video_file</span><span class=\"p\">)</span>\n<span class=\"n\">fps</span> <span class=\"o\">=</span> <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FPS</span><span class=\"p\">)</span>\n<span class=\"n\">video_size</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FRAME_WIDTH</span><span class=\"p\">)),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_FRAME_HEIGHT</span><span class=\"p\">)))</span>  \n<span class=\"c1\"># json_result is the annotations with json format</span>\n<span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">json_result</span><span class=\"p\">:</span>\n    <span class=\"n\">hero_time</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n    <span class=\"n\">hero_frame</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"o\">*</span> <span class=\"n\">fps</span><span class=\"p\">))</span>\n    <span class=\"c1\"># extract form specified frame</span>\n    <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">CAP_PROP_POS_FRAMES</span><span class=\"p\">,</span> <span class=\"n\">hero_frame</span><span class=\"p\">)</span>\n    <span class=\"n\">got_frame</span><span class=\"p\">,</span> <span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">video_cap</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n    <span class=\"c1\"># mmp, something wrong</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">got_frame</span><span class=\"p\">:</span>\n        <span class=\"k\">continue</span>\n\n    <span class=\"c1\"># cut the desired area</span>\n    <span class=\"n\">crop_img</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"p\">[</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">),</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">w</span><span class=\"p\">)]</span>\n    <span class=\"n\">crop_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;./annotation_output/</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">/&#39;</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(),</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">hero_name</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">crop_path</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">crop_path</span><span class=\"p\">)</span>\n\n    <span class=\"n\">crop_fname</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s</span><span class=\"s2\">.jpg&#34;</span> <span class=\"o\">%</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">hero_time</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">w</span><span class=\"p\">),</span>  <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">h</span><span class=\"p\">))</span>\n    <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">crop_path</span> <span class=\"o\">+</span> <span class=\"n\">crop_fname</span><span class=\"p\">,</span> <span class=\"n\">crop_img</span><span class=\"p\">)</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>问题</b></h2><p>这个代码执行的时候，输入是H264格式的视频，但是代码到 video_cap.read() 调用的时候，总是返回false。值得注意的是：Gemfield所用的opencv库是用pip安装的。</p><h2><b>思考</b></h2><p>1， 很快排除掉视频文件的路径有问题；</p><p>2，开始考虑视频编码的格式 ； 最讨厌的一点就是opencv的read返回是false的时候，不报告具体的错误信息，而且google了下也没找到怎么开启log的方法，害得我只能瞎猜； </p><p>3，一小时后，偶然发现之前一个用opencv生成的视频可以被此程序解析；更加坚信了本文中要验证的视频是因为编码问题才导致read调用返回False；</p><p>4，一天后，发现该带检测的H264格式的mp4视频必须在经过从h264转码至mjpeg后，并且容器格式从mp4到avi，并且去掉音频后，opencv才能read该视频：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#视频编码从h264转换为mjpeg</span>\n<span class=\"c1\">#容器封装格式从mp4转化为avi</span>\ngemfield@ai:~/Downloads$ ffmpeg -i ry1.mp4 -c:v mjpeg ry1.avi\n<span class=\"c1\">#去掉音频</span>\ngemfield@ai:~/Downloads$ ffmpeg -i ry1.avi -c copy -an ry2.avi\n</code></pre></div><p>5，决定从源代码编译opencv库</p><h2><b>解决</b></h2><p>从github上下载opencv的最新源码，重新编译：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads$ wget https://github.com/opencv/opencv/archive/3.3.0.tar.gz\ngemfield@ai:~/Downloads$ tar zxvf <span class=\"m\">3</span>.3.0.tar.gz\ngemfield@ai:~/Downloads$ <span class=\"nb\">cd</span> opencv-3.3.0/\ngemfield@ai:~/Downloads/opencv-3.3.0$ mkdir build\n\n<span class=\"c1\">#CUDA要求gcc版本不能高于5，禁掉它</span>\ngemfield@ai:~/Downloads/opencv-3.3.0/build$ cmake -D <span class=\"nv\">WITH_CUDA</span><span class=\"o\">=</span>OFF ../\ngemfield@ai:~/Downloads/opencv-3.3.0/build$ make -j <span class=\"m\">8</span></code></pre></div><p>编译完成后，会生成为python cv2 module服务的Linux共享库，共2个（cv2.so 和 python3/cv2.cpython-35m-x86_64-linux-gnu.so），一个给python2用，一个给python3用，它们的命名习惯不一样：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads/opencv-3.3.0/build$ find . -name <span class=\"s2\">&#34;*.so&#34;</span>\n./lib/libopencv_dnn.so\n./lib/libopencv_highgui.so\n./lib/libopencv_superres.so\n./lib/libopencv_ml.so\n./lib/libopencv_cudev.so\n./lib/libopencv_calib3d.so\n./lib/libopencv_imgproc.so\n./lib/libopencv_videoio.so\n./lib/libopencv_videostab.so\n./lib/libopencv_shape.so\n./lib/libopencv_flann.so\n./lib/libopencv_features2d.so\n./lib/libopencv_video.so\n./lib/libopencv_objdetect.so\n./lib/libopencv_core.so\n./lib/libopencv_stitching.so\n./lib/libopencv_photo.so\n./lib/python3/cv2.cpython-35m-x86_64-linux-gnu.so\n./lib/libopencv_imgcodecs.so\n./lib/cv2.so\ngemfield@ai:~/Downloads/opencv-3.3.0/build$</code></pre></div><p>然后将这两个so文件分别拷贝至python的库目录中并覆盖之前的cv2.so文件：</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo cp lib/cv2.so /usr/local/lib/python2.7/dist-packages/cv2/cv2.so\nsudo cp ./lib/python3/cv2.cpython-35m-x86_64-linux-gnu.so /usr/local/lib/python3.5/dist-packages/cv2/</code></pre></div><p>然后前文的python程序就可以正常的read了，那么为什么呢？只要看下之前使用pip安装的cv2.so和现在新编译的cv2.so文件的依赖有什么不同就豁然开朗了：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads/opencv-3.3.0/build$ ldd /usr/local/lib/python2.7/dist-packages/cv2/cv2.so.bk\n        linux-vdso.so.1 <span class=\"o\">=</span>&gt;  <span class=\"o\">(</span>0x00007ffd45ffd000<span class=\"o\">)</span>\n        libz-a147dcb0.so.1.2.3 <span class=\"o\">=</span>&gt; /usr/local/lib/python2.7/dist-packages/cv2/.libs/libz-a147dcb0.so.1.2.3 <span class=\"o\">(</span>0x00007f2d7c87a000<span class=\"o\">)</span>\n        libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">=</span>&gt; /usr/local/lib/python2.7/dist-packages/cv2/.libs/libQtGui-6d0f14dd.so.4.8.7 <span class=\"o\">(</span>0x00007f2d7b9e9000<span class=\"o\">)</span>\n        libQtTest-1183da5d.so.4.8.7 <span class=\"o\">=</span>&gt; /usr/local/lib/python2.7/dist-packages/cv2/.libs/libQtTest-1183da5d.so.4.8.7 <span class=\"o\">(</span>0x00007f2d7b7bc000<span class=\"o\">)</span>\n        libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">=</span>&gt; /usr/local/lib/python2.7/dist-packages/cv2/.libs/libQtCore-ba1dc80c.so.4.8.7 <span class=\"o\">(</span>0x00007f2d7b2b0000<span class=\"o\">)</span>\n        libstdc++.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 <span class=\"o\">(</span>0x00007f2d7aef7000<span class=\"o\">)</span>\n        libdl.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libdl.so.2 <span class=\"o\">(</span>0x00007f2d7acf1000<span class=\"o\">)</span>\n        libpthread.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpthread.so.0 <span class=\"o\">(</span>0x00007f2d7aad3000<span class=\"o\">)</span>\n        librt.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/librt.so.1 <span class=\"o\">(</span>0x00007f2d7a8cb000<span class=\"o\">)</span>\n        libm.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libm.so.6 <span class=\"o\">(</span>0x00007f2d7a5c2000<span class=\"o\">)</span>\n        libgcc_s.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 <span class=\"o\">(</span>0x00007f2d7a3ab000<span class=\"o\">)</span>\n        libc.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>0x00007f2d79fe4000<span class=\"o\">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class=\"o\">(</span>0x0000555932e58000<span class=\"o\">)</span>\n        libgthread-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgthread-2.0.so.0 <span class=\"o\">(</span>0x00007f2d79de0000<span class=\"o\">)</span>\n        libglib-2.0.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 <span class=\"o\">(</span>0x00007f2d79acc000<span class=\"o\">)</span>\n        libSM.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 <span class=\"o\">(</span>0x00007f2d798c4000<span class=\"o\">)</span>\n        libICE.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6 <span class=\"o\">(</span>0x00007f2d796aa000<span class=\"o\">)</span>\n        libXrender.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 <span class=\"o\">(</span>0x00007f2d794a0000<span class=\"o\">)</span>\n        libXext.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 <span class=\"o\">(</span>0x00007f2d7928e000<span class=\"o\">)</span>\n        libX11.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 <span class=\"o\">(</span>0x00007f2d78f53000<span class=\"o\">)</span>\n        libpcre.so.3 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpcre.so.3 <span class=\"o\">(</span>0x00007f2d78ce1000<span class=\"o\">)</span>\n        libuuid.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libuuid.so.1 <span class=\"o\">(</span>0x00007f2d78adc000<span class=\"o\">)</span>\n        libxcb.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 <span class=\"o\">(</span>0x00007f2d788ba000<span class=\"o\">)</span>\n        libXau.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 <span class=\"o\">(</span>0x00007f2d786b6000<span class=\"o\">)</span>\n        libXdmcp.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 <span class=\"o\">(</span>0x00007f2d784ae000<span class=\"o\">)</span>\ngemfield@ai:~/Downloads/opencv-3.3.0/build$\n\n\ngemfield@ai:~/Downloads/opencv-3.3.0/build$ ldd /usr/local/lib/python2.7/dist-packages/cv2/cv2.so\n        linux-vdso.so.1 <span class=\"o\">=</span>&gt;  <span class=\"o\">(</span>0x00007ffdd57fb000<span class=\"o\">)</span>\n        libopencv_ml.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_ml.so.3.3 <span class=\"o\">(</span>0x00007f390a892000<span class=\"o\">)</span>\n        libopencv_objdetect.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_objdetect.so.3.3 <span class=\"o\">(</span>0x00007f390a2be000<span class=\"o\">)</span>\n        libopencv_dnn.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_dnn.so.3.3 <span class=\"o\">(</span>0x00007f3909a35000<span class=\"o\">)</span>\n        libopencv_shape.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_shape.so.3.3 <span class=\"o\">(</span>0x00007f3909803000<span class=\"o\">)</span>\n        libopencv_stitching.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_stitching.so.3.3 <span class=\"o\">(</span>0x00007f390957d000<span class=\"o\">)</span>\n        libopencv_photo.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_photo.so.3.3 <span class=\"o\">(</span>0x00007f3908f3a000<span class=\"o\">)</span>\n        libopencv_video.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_video.so.3.3 <span class=\"o\">(</span>0x00007f3908968000<span class=\"o\">)</span>\n        libopencv_calib3d.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_calib3d.so.3.3 <span class=\"o\">(</span>0x00007f39085e3000<span class=\"o\">)</span>\n        libopencv_features2d.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_features2d.so.3.3 <span class=\"o\">(</span>0x00007f390831e000<span class=\"o\">)</span>\n        libopencv_flann.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_flann.so.3.3 <span class=\"o\">(</span>0x00007f39080c8000<span class=\"o\">)</span>\n        libopencv_highgui.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_highgui.so.3.3 <span class=\"o\">(</span>0x00007f3907eb6000<span class=\"o\">)</span>\n        libopencv_videoio.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_videoio.so.3.3 <span class=\"o\">(</span>0x00007f3907c7e000<span class=\"o\">)</span>\n        libopencv_imgcodecs.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_imgcodecs.so.3.3 <span class=\"o\">(</span>0x00007f390763c000<span class=\"o\">)</span>\n        libopencv_imgproc.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_imgproc.so.3.3 <span class=\"o\">(</span>0x00007f390390e000<span class=\"o\">)</span>\n        libopencv_core.so.3.3 <span class=\"o\">=</span>&gt; /home/gemfield/Downloads/opencv-3.3.0/build/lib/libopencv_core.so.3.3 <span class=\"o\">(</span>0x00007f3902587000<span class=\"o\">)</span>\n        libstdc++.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 <span class=\"o\">(</span>0x00007f39021ce000<span class=\"o\">)</span>\n        libm.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libm.so.6 <span class=\"o\">(</span>0x00007f3901ec5000<span class=\"o\">)</span>\n        libgcc_s.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 <span class=\"o\">(</span>0x00007f3901cac000<span class=\"o\">)</span>\n        libc.so.6 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span class=\"o\">(</span>0x00007f39018e5000<span class=\"o\">)</span>\n        libpthread.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpthread.so.0 <span class=\"o\">(</span>0x00007f39016c7000<span class=\"o\">)</span>\n        /lib64/ld-linux-x86-64.so.2 <span class=\"o\">(</span>0x00005638f156f000<span class=\"o\">)</span>\n        libgtk-x11-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgtk-x11-2.0.so.0 <span class=\"o\">(</span>0x00007f390107d000<span class=\"o\">)</span>\n        libgdk-x11-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgdk-x11-2.0.so.0 <span class=\"o\">(</span>0x00007f3900dc8000<span class=\"o\">)</span>\n        libcairo.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libcairo.so.2 <span class=\"o\">(</span>0x00007f3900ab2000<span class=\"o\">)</span>\n        libgdk_pixbuf-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0 <span class=\"o\">(</span>0x00007f390088f000<span class=\"o\">)</span>\n        libgobject-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgobject-2.0.so.0 <span class=\"o\">(</span>0x00007f390063c000<span class=\"o\">)</span>\n        libglib-2.0.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 <span class=\"o\">(</span>0x00007f3900328000<span class=\"o\">)</span>\n        librt.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/librt.so.1 <span class=\"o\">(</span>0x00007f3900120000<span class=\"o\">)</span>\n        libdc1394.so.22 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libdc1394.so.22 <span class=\"o\">(</span>0x00007f38ffeaa000<span class=\"o\">)</span>\n        libavcodec.so.57 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libavcodec.so.57 <span class=\"o\">(</span>0x00007f38fe8d6000<span class=\"o\">)</span>\n        libavformat.so.57 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libavformat.so.57 <span class=\"o\">(</span>0x00007f38fe49c000<span class=\"o\">)</span>\n        libavutil.so.55 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libavutil.so.55 <span class=\"o\">(</span>0x00007f38fe219000<span class=\"o\">)</span>\n        libswscale.so.4 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libswscale.so.4 <span class=\"o\">(</span>0x00007f38fdf88000<span class=\"o\">)</span>\n        libjpeg.so.8 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libjpeg.so.8 <span class=\"o\">(</span>0x00007f38fdd1e000<span class=\"o\">)</span>\n        libpng16.so.16 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libpng16.so.16 <span class=\"o\">(</span>0x00007f38fdaec000<span class=\"o\">)</span>\n        libtiff.so.5 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libtiff.so.5 <span class=\"o\">(</span>0x00007f38fd876000<span class=\"o\">)</span>\n        libjasper.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libjasper.so.1 <span class=\"o\">(</span>0x00007f38fd621000<span class=\"o\">)</span>\n        libIlmImf-2_2.so.22 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libIlmImf-2_2.so.22 <span class=\"o\">(</span>0x00007f38fd15d000<span class=\"o\">)</span>\n        libHalf.so.12 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libHalf.so.12 <span class=\"o\">(</span>0x00007f38fcf1a000<span class=\"o\">)</span>\n        libdl.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libdl.so.2 <span class=\"o\">(</span>0x00007f38fcd16000<span class=\"o\">)</span>\n        libz.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libz.so.1 <span class=\"o\">(</span>0x00007f38fcafa000<span class=\"o\">)</span>\n        libgmodule-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgmodule-2.0.so.0 <span class=\"o\">(</span>0x00007f38fc8f4000<span class=\"o\">)</span>\n        libpangocairo-1.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libpangocairo-1.0.so.0 <span class=\"o\">(</span>0x00007f38fc6e7000<span class=\"o\">)</span>\n        libX11.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 <span class=\"o\">(</span>0x00007f38fc3ae000<span class=\"o\">)</span>\n        libXfixes.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXfixes.so.3 <span class=\"o\">(</span>0x00007f38fc1a8000<span class=\"o\">)</span>\n        libatk-1.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libatk-1.0.so.0 <span class=\"o\">(</span>0x00007f38fbf83000<span class=\"o\">)</span>\n        libgio-2.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgio-2.0.so.0 <span class=\"o\">(</span>0x00007f38fbbee000<span class=\"o\">)</span>\n        libpangoft2-1.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libpangoft2-1.0.so.0 <span class=\"o\">(</span>0x00007f38fb9d7000<span class=\"o\">)</span>\n        libpango-1.0.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libpango-1.0.so.0 <span class=\"o\">(</span>0x00007f38fb78b000<span class=\"o\">)</span>\n        libfontconfig.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 <span class=\"o\">(</span>0x00007f38fb548000<span class=\"o\">)</span>\n        libXrender.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 <span class=\"o\">(</span>0x00007f38fb33e000<span class=\"o\">)</span>\n        libXinerama.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXinerama.so.1 <span class=\"o\">(</span>0x00007f38fb13b000<span class=\"o\">)</span>\n        libXi.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXi.so.6 <span class=\"o\">(</span>0x00007f38faf2b000<span class=\"o\">)</span>\n        libXrandr.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXrandr.so.2 <span class=\"o\">(</span>0x00007f38fad1e000<span class=\"o\">)</span>\n        libXcursor.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXcursor.so.1 <span class=\"o\">(</span>0x00007f38fab14000<span class=\"o\">)</span>\n        libXcomposite.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXcomposite.so.1 <span class=\"o\">(</span>0x00007f38fa911000<span class=\"o\">)</span>\n        libXdamage.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXdamage.so.1 <span class=\"o\">(</span>0x00007f38fa70e000<span class=\"o\">)</span>\n        libXext.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 <span class=\"o\">(</span>0x00007f38fa4fc000<span class=\"o\">)</span>\n        libpixman-1.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libpixman-1.so.0 <span class=\"o\">(</span>0x00007f38fa256000<span class=\"o\">)</span>\n        libfreetype.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libfreetype.so.6 <span class=\"o\">(</span>0x00007f38f9fa7000<span class=\"o\">)</span>\n        libxcb-shm.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb-shm.so.0 <span class=\"o\">(</span>0x00007f38f9da3000<span class=\"o\">)</span>\n        libxcb-render.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb-render.so.0 <span class=\"o\">(</span>0x00007f38f9b99000<span class=\"o\">)</span>\n        libxcb.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 <span class=\"o\">(</span>0x00007f38f9977000<span class=\"o\">)</span>\n        libffi.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libffi.so.6 <span class=\"o\">(</span>0x00007f38f976f000<span class=\"o\">)</span>\n        libpcre.so.3 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libpcre.so.3 <span class=\"o\">(</span>0x00007f38f94fd000<span class=\"o\">)</span>\n        libraw1394.so.11 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libraw1394.so.11 <span class=\"o\">(</span>0x00007f38f92ec000<span class=\"o\">)</span>\n        libusb-1.0.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libusb-1.0.so.0 <span class=\"o\">(</span>0x00007f38f90d4000<span class=\"o\">)</span>\n        libswresample.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libswresample.so.2 <span class=\"o\">(</span>0x00007f38f8eb5000<span class=\"o\">)</span>\n        libva.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libva.so.1 <span class=\"o\">(</span>0x00007f38f8c95000<span class=\"o\">)</span>\n        libzvbi.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libzvbi.so.0 <span class=\"o\">(</span>0x00007f38f8a0a000<span class=\"o\">)</span>\n        libxvidcore.so.4 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxvidcore.so.4 <span class=\"o\">(</span>0x00007f38f86f6000<span class=\"o\">)</span>\n        libx265.so.110 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libx265.so.110 <span class=\"o\">(</span>0x00007f38f7a97000<span class=\"o\">)</span>\n        libx264.so.148 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libx264.so.148 <span class=\"o\">(</span>0x00007f38f76f5000<span class=\"o\">)</span>\n        libwebpmux.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libwebpmux.so.2 <span class=\"o\">(</span>0x00007f38f74eb000<span class=\"o\">)</span>\n        libwebp.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libwebp.so.6 <span class=\"o\">(</span>0x00007f38f728b000<span class=\"o\">)</span>\n        libwavpack.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libwavpack.so.1 <span class=\"o\">(</span>0x00007f38f7060000<span class=\"o\">)</span>\n        libvpx.so.4 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvpx.so.4 <span class=\"o\">(</span>0x00007f38f6c23000<span class=\"o\">)</span>\n        libvorbisenc.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvorbisenc.so.2 <span class=\"o\">(</span>0x00007f38f6978000<span class=\"o\">)</span>\n        libvorbis.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvorbis.so.0 <span class=\"o\">(</span>0x00007f38f674d000<span class=\"o\">)</span>\n        libvo-amrwbenc.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvo-amrwbenc.so.0 <span class=\"o\">(</span>0x00007f38f6533000<span class=\"o\">)</span>\n        libtwolame.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libtwolame.so.0 <span class=\"o\">(</span>0x00007f38f6310000<span class=\"o\">)</span>\n        libtheoraenc.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libtheoraenc.so.1 <span class=\"o\">(</span>0x00007f38f60d1000<span class=\"o\">)</span>\n        libtheoradec.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libtheoradec.so.1 <span class=\"o\">(</span>0x00007f38f5eb3000<span class=\"o\">)</span>\n        libspeex.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libspeex.so.1 <span class=\"o\">(</span>0x00007f38f5c98000<span class=\"o\">)</span>\n        libsnappy.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libsnappy.so.1 <span class=\"o\">(</span>0x00007f38f5a90000<span class=\"o\">)</span>\n        libshine.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libshine.so.3 <span class=\"o\">(</span>0x00007f38f5883000<span class=\"o\">)</span>\n        libopus.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libopus.so.0 <span class=\"o\">(</span>0x00007f38f5639000<span class=\"o\">)</span>\n        libopenjp2.so.7 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libopenjp2.so.7 <span class=\"o\">(</span>0x00007f38f53fe000<span class=\"o\">)</span>\n        libopencore-amrwb.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libopencore-amrwb.so.0 <span class=\"o\">(</span>0x00007f38f51ea000<span class=\"o\">)</span>\n        libopencore-amrnb.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libopencore-amrnb.so.0 <span class=\"o\">(</span>0x00007f38f4fbd000<span class=\"o\">)</span>\n        libmp3lame.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libmp3lame.so.0 <span class=\"o\">(</span>0x00007f38f4d48000<span class=\"o\">)</span>\n        libgsm.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgsm.so.1 <span class=\"o\">(</span>0x00007f38f4b3a000<span class=\"o\">)</span>\n        libcrystalhd.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libcrystalhd.so.3 <span class=\"o\">(</span>0x00007f38f491f000<span class=\"o\">)</span>\n        liblzma.so.5 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/liblzma.so.5 <span class=\"o\">(</span>0x00007f38f46f9000<span class=\"o\">)</span>\n        libssh-gcrypt.so.4 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libssh-gcrypt.so.4 <span class=\"o\">(</span>0x00007f38f448b000<span class=\"o\">)</span>\n        libopenmpt.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libopenmpt.so.0 <span class=\"o\">(</span>0x00007f38f40fc000<span class=\"o\">)</span>\n        libgme.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgme.so.0 <span class=\"o\">(</span>0x00007f38f3eaf000<span class=\"o\">)</span>\n        libbluray.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libbluray.so.2 <span class=\"o\">(</span>0x00007f38f3c63000<span class=\"o\">)</span>\n        libgnutls.so.30 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgnutls.so.30 <span class=\"o\">(</span>0x00007f38f3903000<span class=\"o\">)</span>\n        libchromaprint.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libchromaprint.so.1 <span class=\"o\">(</span>0x00007f38f36ef000<span class=\"o\">)</span>\n        libbz2.so.1.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libbz2.so.1.0 <span class=\"o\">(</span>0x00007f38f34df000<span class=\"o\">)</span>\n        libvdpau.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvdpau.so.1 <span class=\"o\">(</span>0x00007f38f32d9000<span class=\"o\">)</span>\n        libva-drm.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libva-drm.so.1 <span class=\"o\">(</span>0x00007f38f30d6000<span class=\"o\">)</span>\n        libva-x11.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libva-x11.so.1 <span class=\"o\">(</span>0x00007f38f2ed0000<span class=\"o\">)</span>\n        libjbig.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libjbig.so.0 <span class=\"o\">(</span>0x00007f38f2cc2000<span class=\"o\">)</span>\n        libIex-2_2.so.12 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libIex-2_2.so.12 <span class=\"o\">(</span>0x00007f38f2aa4000<span class=\"o\">)</span>\n        libIlmThread-2_2.so.12 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libIlmThread-2_2.so.12 <span class=\"o\">(</span>0x00007f38f289d000<span class=\"o\">)</span>\n        libselinux.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libselinux.so.1 <span class=\"o\">(</span>0x00007f38f2673000<span class=\"o\">)</span>\n        libresolv.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libresolv.so.2 <span class=\"o\">(</span>0x00007f38f2458000<span class=\"o\">)</span>\n        libmount.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libmount.so.1 <span class=\"o\">(</span>0x00007f38f220d000<span class=\"o\">)</span>\n        libharfbuzz.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libharfbuzz.so.0 <span class=\"o\">(</span>0x00007f38f1f79000<span class=\"o\">)</span>\n        libthai.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libthai.so.0 <span class=\"o\">(</span>0x00007f38f1d70000<span class=\"o\">)</span>\n        libexpat.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libexpat.so.1 <span class=\"o\">(</span>0x00007f38f1b44000<span class=\"o\">)</span>\n        libXau.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 <span class=\"o\">(</span>0x00007f38f1940000<span class=\"o\">)</span>\n        libXdmcp.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 <span class=\"o\">(</span>0x00007f38f173a000<span class=\"o\">)</span>\n        libudev.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libudev.so.1 <span class=\"o\">(</span>0x00007f38f1719000<span class=\"o\">)</span>\n        libsoxr.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libsoxr.so.0 <span class=\"o\">(</span>0x00007f38f14b7000<span class=\"o\">)</span>\n        libnuma.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libnuma.so.1 <span class=\"o\">(</span>0x00007f38f12aa000<span class=\"o\">)</span>\n        libogg.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libogg.so.0 <span class=\"o\">(</span>0x00007f38f10a1000<span class=\"o\">)</span>\n        libgcrypt.so.20 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgcrypt.so.20 <span class=\"o\">(</span>0x00007f38f0d91000<span class=\"o\">)</span>\n        libgssapi_krb5.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 <span class=\"o\">(</span>0x00007f38f0b47000<span class=\"o\">)</span>\n        libmpg123.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libmpg123.so.0 <span class=\"o\">(</span>0x00007f38f08e9000<span class=\"o\">)</span>\n        libvorbisfile.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libvorbisfile.so.3 <span class=\"o\">(</span>0x00007f38f06de000<span class=\"o\">)</span>\n        libxml2.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libxml2.so.2 <span class=\"o\">(</span>0x00007f38f0324000<span class=\"o\">)</span>\n        libp11-kit.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 <span class=\"o\">(</span>0x00007f38f00bf000<span class=\"o\">)</span>\n        libidn.so.11 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libidn.so.11 <span class=\"o\">(</span>0x00007f38efe8c000<span class=\"o\">)</span>\n        libtasn1.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libtasn1.so.6 <span class=\"o\">(</span>0x00007f38efc79000<span class=\"o\">)</span>\n        libnettle.so.6 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.6 <span class=\"o\">(</span>0x00007f38efa43000<span class=\"o\">)</span>\n        libgmp.so.10 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgmp.so.10 <span class=\"o\">(</span>0x00007f38ef7c1000<span class=\"o\">)</span>\n        libhogweed.so.4 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libhogweed.so.4 <span class=\"o\">(</span>0x00007f38ef58e000<span class=\"o\">)</span>\n        libdrm.so.2 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libdrm.so.2 <span class=\"o\">(</span>0x00007f38ef37d000<span class=\"o\">)</span>\n        libblkid.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libblkid.so.1 <span class=\"o\">(</span>0x00007f38ef138000<span class=\"o\">)</span>\n        libgraphite2.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgraphite2.so.3 <span class=\"o\">(</span>0x00007f38eef12000<span class=\"o\">)</span>\n        libdatrie.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libdatrie.so.1 <span class=\"o\">(</span>0x00007f38eed09000<span class=\"o\">)</span>\n        libgomp.so.1 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 <span class=\"o\">(</span>0x00007f38eeadb000<span class=\"o\">)</span>\n        libgpg-error.so.0 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libgpg-error.so.0 <span class=\"o\">(</span>0x00007f38ee8c7000<span class=\"o\">)</span>\n        libkrb5.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 <span class=\"o\">(</span>0x00007f38ee5f2000<span class=\"o\">)</span>\n        libk5crypto.so.3 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 <span class=\"o\">(</span>0x00007f38ee3c0000<span class=\"o\">)</span>\n        libcom_err.so.2 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libcom_err.so.2 <span class=\"o\">(</span>0x00007f38ee1bc000<span class=\"o\">)</span>\n        libkrb5support.so.0 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 <span class=\"o\">(</span>0x00007f38edfaf000<span class=\"o\">)</span>\n        libicuuc.so.57 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libicuuc.so.57 <span class=\"o\">(</span>0x00007f38edc07000<span class=\"o\">)</span>\n        libuuid.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libuuid.so.1 <span class=\"o\">(</span>0x00007f38eda02000<span class=\"o\">)</span>\n        libkeyutils.so.1 <span class=\"o\">=</span>&gt; /lib/x86_64-linux-gnu/libkeyutils.so.1 <span class=\"o\">(</span>0x00007f38ed7fe000<span class=\"o\">)</span>\n        libicudata.so.57 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libicudata.so.57 <span class=\"o\">(</span>0x00007f38ebd81000<span class=\"o\">)</span>\ngemfield@ai:~/Downloads/opencv-3.3.0/build$\n</code></pre></div><p>上下一对比就能看到差了多少插件啊！</p><p>尤其对于Gemfield本文一直在讨论的h264编码的视频来说，下面这个libx264.so的区别就异常显眼了：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads/opencv-3.3.0/build$ ldd /usr/local/lib/python2.7/dist-packages/cv2/cv2.so <span class=\"p\">|</span> grep <span class=\"m\">264</span>\n        libx264.so.148 <span class=\"o\">=</span>&gt; /usr/lib/x86_64-linux-gnu/libx264.so.148 <span class=\"o\">(</span>0x00007fdd21ec0000<span class=\"o\">)</span>\ngemfield@ai:~/Downloads/opencv-3.3.0/build$</code></pre></div><h2><b>在一个崭新的环境里如何编译opencv</b></h2><p>那么如何在一个fresh的环境里编译opencv让其支持H264格式呢？</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@b4616b4e805b:~# apt install python3-dev cmake pkg-config python3-numpy libavcodec-dev libavformat-dev libswscale-dev\nroot@b4616b4e805b:~# wget https://github.com/opencv/opencv/archive/3.3.1.tar.gz\nroot@b4616b4e805b:~# tar zxvf <span class=\"m\">3</span>.3.1.tar.gz\nroot@b4616b4e805b:~# <span class=\"nb\">cd</span> opencv-3.3.1\nroot@b4616b4e805b:~/opencv-3.3.1# mkdir build\nroot@b4616b4e805b:~/opencv-3.3.1# <span class=\"nb\">cd</span> build\nroot@b4616b4e805b:~/opencv-3.3.1# cmake -DWITH_CUDA<span class=\"o\">=</span>off -DCMAKE_INSTALL_PREFIX<span class=\"o\">=</span>/bigdata/gemfield/gemfieldlib/cv2 -DPYTHON_INCLUDE_DIR<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;from distutils.sysconfig import get_python_inc; print(get_python_inc())&#34;</span><span class=\"k\">)</span>  -DPYTHON_LIBRARY<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var(&#39;LIBDIR&#39;))&#34;</span><span class=\"k\">)</span> ../\nroot@b4616b4e805b:~/opencv-3.3.1/build# make\nroot@b4616b4e805b:~/opencv-3.3.1/build# make install</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>下面是Gemfield编译opencv的输出：</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@gemfieldlib:/bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build# cmake -DWITH_CUDA<span class=\"o\">=</span>off -DCMAKE_INSTALL_PREFIX<span class=\"o\">=</span>/bigdata/gemfield/gemfieldlib/cv2 -DPYTHON_INCLUDE_DIR<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;from distutils.sysconfig import get_python_inc; print(get_python_inc())&#34;</span><span class=\"k\">)</span>  -DPYTHON_LIBRARY<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var(&#39;LIBDIR&#39;))&#34;</span><span class=\"k\">)</span> ../ <span class=\"m\">2</span>&gt;<span class=\"p\">&amp;</span><span class=\"m\">1</span> <span class=\"p\">|</span> tee /tmp/gemfield1\n......\n-- Checking <span class=\"k\">for</span> modules <span class=\"s1\">&#39;libavcodec;libavformat;libavutil;libswscale&#39;</span>\n--   Found libavcodec, version <span class=\"m\">56</span>.60.100\n--   Found libavformat, version <span class=\"m\">56</span>.40.101\n--   Found libavutil, version <span class=\"m\">54</span>.31.100\n--   Found libswscale, version <span class=\"m\">3</span>.1.101\n-- Checking <span class=\"k\">for</span> module <span class=\"s1\">&#39;libavresample&#39;</span>\n--   No package <span class=\"s1\">&#39;libavresample&#39;</span> found\n-- Checking <span class=\"k\">for</span> module <span class=\"s1\">&#39;libgphoto2&#39;</span>\n--   No package <span class=\"s1\">&#39;libgphoto2&#39;</span> found\n-- IPPICV: Download: ippicv_2017u3_lnx_intel64_general_20170822.tgz\n-- found Intel IPP <span class=\"o\">(</span>ICV version<span class=\"o\">)</span>: <span class=\"m\">2017</span>.0.3 <span class=\"o\">[</span><span class=\"m\">2017</span>.0.3<span class=\"o\">]</span>\n-- at: /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build/3rdparty/ippicv/ippicv_lnx\n-- found Intel IPP IW sources: <span class=\"m\">2017</span>.0.3\n-- at: /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build/3rdparty/ippicv/ippiw_lnx\n-- Could not find OpenBLAS include. Turning OpenBLAS_FOUND off\n-- Could not find OpenBLAS lib. Turning OpenBLAS_FOUND off\n-- Could NOT find Atlas <span class=\"o\">(</span>missing:  Atlas_CBLAS_INCLUDE_DIR Atlas_CLAPACK_INCLUDE_DIR Atlas_CBLAS_LIBRARY Atlas_BLAS_LIBRARY Atlas_LAPACK_LIBRARY<span class=\"o\">)</span> \n......\n-- \n-- General configuration <span class=\"k\">for</span> OpenCV <span class=\"m\">3</span>.3.1 <span class=\"o\">=====================================</span>\n--   Version control:               unknown\n-- \n--   Platform:\n--     Timestamp:                   <span class=\"m\">2018</span>-01-23T09:28:59Z\n--     Host:                        Linux <span class=\"m\">4</span>.10.0-42-generic x86_64\n--     CMake:                       <span class=\"m\">3</span>.5.1\n--     CMake generator:             Unix Makefiles\n--     CMake build tool:            /usr/bin/make\n--     Configuration:               Release\n-- \n--   CPU/HW features:\n--     Baseline:                    SSE SSE2 SSE3\n--       requested:                 SSE3\n--     Dispatched code generation:  SSE4_1 SSE4_2 FP16 AVX AVX2\n--       requested:                 SSE4_1 SSE4_2 AVX FP16 AVX2\n--       SSE4_1 <span class=\"o\">(</span><span class=\"m\">3</span> files<span class=\"o\">)</span>:          + SSSE3 SSE4_1\n--       SSE4_2 <span class=\"o\">(</span><span class=\"m\">1</span> files<span class=\"o\">)</span>:          + SSSE3 SSE4_1 POPCNT SSE4_2\n--       FP16 <span class=\"o\">(</span><span class=\"m\">2</span> files<span class=\"o\">)</span>:            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 AVX\n--       AVX <span class=\"o\">(</span><span class=\"m\">5</span> files<span class=\"o\">)</span>:             + SSSE3 SSE4_1 POPCNT SSE4_2 AVX\n--       AVX2 <span class=\"o\">(</span><span class=\"m\">8</span> files<span class=\"o\">)</span>:            + SSSE3 SSE4_1 POPCNT SSE4_2 FP16 FMA3 AVX AVX2\n-- \n--   C/C++:\n--     Built as dynamic libs?:      YES\n--     C++ Compiler:                /usr/bin/c++  <span class=\"o\">(</span>ver <span class=\"m\">5</span>.4.0<span class=\"o\">)</span>\n--     C++ flags <span class=\"o\">(</span>Release<span class=\"o\">)</span>:         -fsigned-char -W -Wall -Werror<span class=\"o\">=</span><span class=\"k\">return</span>-type -Werror<span class=\"o\">=</span>non-virtual-dtor -Werror<span class=\"o\">=</span>address -Werror<span class=\"o\">=</span>sequence-point -Wformat -Werror<span class=\"o\">=</span>format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility<span class=\"o\">=</span>hidden -fvisibility-inlines-hidden -O3 -DNDEBUG  -DNDEBUG\n--     C++ flags <span class=\"o\">(</span>Debug<span class=\"o\">)</span>:           -fsigned-char -W -Wall -Werror<span class=\"o\">=</span><span class=\"k\">return</span>-type -Werror<span class=\"o\">=</span>non-virtual-dtor -Werror<span class=\"o\">=</span>address -Werror<span class=\"o\">=</span>sequence-point -Wformat -Werror<span class=\"o\">=</span>format-security -Wmissing-declarations -Wundef -Winit-self -Wpointer-arith -Wshadow -Wsign-promo -Wuninitialized -Winit-self -Wno-narrowing -Wno-delete-non-virtual-dtor -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility<span class=\"o\">=</span>hidden -fvisibility-inlines-hidden -g  -O0 -DDEBUG -D_DEBUG\n--     C Compiler:                  /usr/bin/cc\n--     C flags <span class=\"o\">(</span>Release<span class=\"o\">)</span>:           -fsigned-char -W -Wall -Werror<span class=\"o\">=</span><span class=\"k\">return</span>-type -Werror<span class=\"o\">=</span>non-virtual-dtor -Werror<span class=\"o\">=</span>address -Werror<span class=\"o\">=</span>sequence-point -Wformat -Werror<span class=\"o\">=</span>format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility<span class=\"o\">=</span>hidden -O3 -DNDEBUG  -DNDEBUG\n--     C flags <span class=\"o\">(</span>Debug<span class=\"o\">)</span>:             -fsigned-char -W -Wall -Werror<span class=\"o\">=</span><span class=\"k\">return</span>-type -Werror<span class=\"o\">=</span>non-virtual-dtor -Werror<span class=\"o\">=</span>address -Werror<span class=\"o\">=</span>sequence-point -Wformat -Werror<span class=\"o\">=</span>format-security -Wmissing-declarations -Wmissing-prototypes -Wstrict-prototypes -Wundef -Winit-self -Wpointer-arith -Wshadow -Wuninitialized -Winit-self -Wno-narrowing -Wno-comment -fdiagnostics-show-option -Wno-long-long -pthread -fomit-frame-pointer -ffunction-sections  -msse -msse2 -msse3 -fvisibility<span class=\"o\">=</span>hidden -g  -O0 -DDEBUG -D_DEBUG\n--     Linker flags <span class=\"o\">(</span>Release<span class=\"o\">)</span>:\n--     Linker flags <span class=\"o\">(</span>Debug<span class=\"o\">)</span>:\n--     ccache:                      NO\n--     Precompiled headers:         YES\n--     Extra dependencies:          dl m pthread rt\n--     3rdparty dependencies:\n-- \n--   OpenCV modules:\n--     To be built:                 core flann imgproc ml objdetect photo video dnn imgcodecs shape videoio highgui superres ts features2d calib3d stitching videostab python3\n--     Disabled:                    js world\n--     Disabled by dependency:      -\n--     Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python2 viz\n-- \n--   GUI: \n--     QT:                          NO\n--     GTK+:                        NO\n--     GThread :                    NO\n--     GtkGlExt:                    NO\n--     OpenGL support:              NO\n--     VTK support:                 NO\n-- \n--   Media I/O: \n--     ZLib:                        zlib <span class=\"o\">(</span>ver <span class=\"m\">1</span>.2.8<span class=\"o\">)</span>\n--     JPEG:                        libjpeg <span class=\"o\">(</span>ver <span class=\"m\">90</span><span class=\"o\">)</span>\n--     WEBP:                        build <span class=\"o\">(</span>ver encoder: 0x020e<span class=\"o\">)</span>\n--     PNG:                         build <span class=\"o\">(</span>ver <span class=\"m\">1</span>.6.24<span class=\"o\">)</span>\n--     TIFF:                        build <span class=\"o\">(</span>ver <span class=\"m\">42</span> - <span class=\"m\">4</span>.0.2<span class=\"o\">)</span>\n--     JPEG <span class=\"m\">2000</span>:                   build <span class=\"o\">(</span>ver <span class=\"m\">1</span>.900.1<span class=\"o\">)</span>\n--     OpenEXR:                     build <span class=\"o\">(</span>ver <span class=\"m\">1</span>.7.1<span class=\"o\">)</span>\n--     GDAL:                        NO\n--     GDCM:                        NO\n-- \n--   Video I/O:\n--     DC1394 <span class=\"m\">1</span>.x:                  NO\n--     DC1394 <span class=\"m\">2</span>.x:                  NO\n--     FFMPEG:                      YES\n--       avcodec:                   YES <span class=\"o\">(</span>ver <span class=\"m\">56</span>.60.100<span class=\"o\">)</span>\n--       avformat:                  YES <span class=\"o\">(</span>ver <span class=\"m\">56</span>.40.101<span class=\"o\">)</span>\n--       avutil:                    YES <span class=\"o\">(</span>ver <span class=\"m\">54</span>.31.100<span class=\"o\">)</span>\n--       swscale:                   YES <span class=\"o\">(</span>ver <span class=\"m\">3</span>.1.101<span class=\"o\">)</span>\n--       avresample:                NO\n--     GStreamer:                   NO\n--     OpenNI:                      NO\n--     OpenNI PrimeSensor Modules:  NO\n--     OpenNI2:                     NO\n--     PvAPI:                       NO\n--     GigEVisionSDK:               NO\n--     Aravis SDK:                  NO\n--     UniCap:                      NO\n--     UniCap ucil:                 NO\n--     V4L/V4L2:                    NO/YES\n--     XIMEA:                       NO\n--     Xine:                        NO\n--     Intel Media SDK:             NO\n--     gPhoto2:                     NO\n-- \n--   Parallel framework:            pthreads\n-- \n--   Trace:                         YES <span class=\"o\">(</span>with Intel ITT<span class=\"o\">)</span>\n-- \n--   Other third-party libraries:\n--     Use Intel IPP:               <span class=\"m\">2017</span>.0.3 <span class=\"o\">[</span><span class=\"m\">2017</span>.0.3<span class=\"o\">]</span>\n--                at:               /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build/3rdparty/ippicv/ippicv_lnx\n--     Use Intel IPP IW:            sources <span class=\"o\">(</span><span class=\"m\">2017</span>.0.3<span class=\"o\">)</span>\n--                   at:            /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build/3rdparty/ippicv/ippiw_lnx\n--     Use VA:                      NO\n--     Use Intel VA-API/OpenCL:     NO\n--     Use Lapack:                  NO\n--     Use Eigen:                   NO\n--     Use Cuda:                    NO\n--     Use OpenCL:                  YES\n--     Use OpenVX:                  NO\n--     Use custom HAL:              NO\n-- \n--   OpenCL:                        &lt;Dynamic loading of OpenCL library&gt;\n--     Include path:                /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/3rdparty/include/opencl/1.2\n--     Use AMDFFT:                  NO\n--     Use AMDBLAS:                 NO\n-- \n--   Python <span class=\"m\">2</span>:\n--     Interpreter:                 NO\n-- \n--   Python <span class=\"m\">3</span>:\n--     Interpreter:                 /usr/bin/python3 <span class=\"o\">(</span>ver <span class=\"m\">3</span>.5.2<span class=\"o\">)</span>\n--     Libraries:                   /usr/lib <span class=\"o\">(</span>ver <span class=\"m\">3</span>.5.2<span class=\"o\">)</span>\n--     numpy:                       /usr/lib/python3/dist-packages/numpy/core/include <span class=\"o\">(</span>ver <span class=\"m\">1</span>.11.0<span class=\"o\">)</span>\n--     packages path:               lib/python3.5/dist-packages\n-- \n--   Python <span class=\"o\">(</span><span class=\"k\">for</span> build<span class=\"o\">)</span>:            /usr/bin/python3\n-- \n--   Java:\n--     ant:                         NO\n--     JNI:                         NO\n--     Java wrappers:               NO\n--     Java tests:                  NO\n-- \n--   Matlab:                        Matlab not found or implicitly disabled\n-- \n--   Documentation:\n--     Doxygen:                     NO\n-- \n--   Tests and samples:\n--     Tests:                       YES\n--     Performance tests:           YES\n--     C/C++ Examples:              NO\n-- \n--   Install path:                  /bigdata/gemfield/gemfieldlib/cv2\n-- \n--   cvconfig.h is in:              /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build\n-- -----------------------------------------------------------------\n-- \n-- Configuring <span class=\"k\">done</span>\n-- Generating <span class=\"k\">done</span>\n-- Build files have been written to: /bigdata/gemfield/gemfieldlib/opencv/opencv-3.3.1/build</code></pre></div><p><b>尤其是注意下面这段输出，表明opencv将产生出python3的模块。</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">--   OpenCV modules:\n--     To be built:                 core flann imgproc ml objdetect photo video dnn imgcodecs shape videoio highgui superres ts features2d calib3d stitching videostab python3\n--     Disabled:                    js world\n--     Disabled by dependency:      -\n--     Unavailable:                 cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev java python2 viz</code></pre></div><h2><b>庆祝</b></h2><p><b>前文的程序已经愉快的开跑了，验证结果正在源源不断的输出到各个目标对应的目录中，预览模式也已经打开，目标已经开始有规律的展现在面前了。</b></p>", 
            "topic": [
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }, 
                {
                    "tag": "annotation", 
                    "tagLink": "https://api.zhihu.com/topics/20061568"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/31629476", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 0, 
            "title": "使用docker（非Nvidia-docker）在基于CentOS image的容器中测试cuda", 
            "content": "<p><b>1，找到宿主机的nvidia驱动设备</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ ls -la /dev <span class=\"p\">|</span> grep nvidia\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">195</span>,   <span class=\"m\">0</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidia0\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">195</span>,   <span class=\"m\">1</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidia1\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">195</span>, <span class=\"m\">255</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidiactl\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">195</span>, <span class=\"m\">254</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidia-modeset\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">240</span>,   <span class=\"m\">0</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidia-uvm\ncrw-rw-rw-   <span class=\"m\">1</span> root root    <span class=\"m\">240</span>,   <span class=\"m\">1</span> 10月 <span class=\"m\">27</span> <span class=\"m\">13</span>:31 nvidia-uvm-tools</code></pre></div><p><b>2，起docker并挂载nvidia驱动设备</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ docker run -itd --name centos -v nvidia_driver_384.90:/usr/local/nvidia:ro --device /dev/nvidia0:/dev/nvidia0 --device /dev/nvidiactl:/dev/nvidiactl --device /dev/nvidia-uvm:/dev/nvidia-uvm --device /dev/nvidia1:/dev/nvidia1 --device /dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools gemfield/centos:7.3 bash</code></pre></div><p><b>3，在docker容器中安装gcc c++编译器</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@db041e9301af /<span class=\"o\">]</span><span class=\"c1\"># yum install gcc gcc-c++</span></code></pre></div><p><b>4，安装bzip2，为了Anaconda</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># yum install bzip2.x86_64</span></code></pre></div><p><b>5,安装外部源用来安装nvidia需要的商业驱动</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># yum install epel-release</span>\n<span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># yum install dkms</span></code></pre></div><p><b>6, 下载cuda</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#cuda 8.0</span>\n<span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># wget https://developer.nvidia.com/compute/cuda/8.0/prod/local_installers/cuda-repo-rhel7-8-0-local-8.0.44-1.x86_64-rpm</span></code></pre></div><p><b>7，安装cuda</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># rpm -i cuda-repo-rhel7-8-0-local-8.0.44-1.x86_64-rpm</span>\n<span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># yum clean all</span>\n<span class=\"o\">[</span>root@db041e9301af ~<span class=\"o\">]</span><span class=\"c1\"># yum install cuda</span></code></pre></div><p><b>8, 安装ffmpeg</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\nyum install ffmpeg ffmpeg-devel -y</code></pre></div><p><b>9，安装gtk</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">yum install gtk+-devel gtk2-devel</code></pre></div><p><b>10，编译opencv</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">yum install cmake\nrm -f /usr/bin/python\nln -s /opt/tool/anaconda3/bin/python /usr/bin/python\ncmake -DWITH_CUDA<span class=\"o\">=</span>off -DCMAKE_INSTALL_PREFIX<span class=\"o\">=</span>/opt/tool/gemfield/opencv/ -DPYTHON_INCLUDE_DIR<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;from distutils.sysconfig import get_python_inc; print(get_python_inc())&#34;</span><span class=\"k\">)</span>  -DPYTHON_LIBRARY<span class=\"o\">=</span><span class=\"k\">$(</span>python -c <span class=\"s2\">&#34;import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var(&#39;LIBDIR&#39;))&#34;</span><span class=\"k\">)</span> ../ <span class=\"m\">2</span>&gt;<span class=\"p\">&amp;</span><span class=\"m\">1</span> <span class=\"p\">|</span> tee /tmp/gemfield1</code></pre></div><p><b>11, 编译Caffe</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">yum install protobuf-devel hdf5-devel leveldb-devel opencv-devel\nyum install boost-devel gflags-devel glog-devel lmdb-devel\nyum install atlas-devel snappy-devel\n\n<span class=\"c1\">#库的版本名字似乎有变化，建立以下软链接</span>\nln -s /usr/lib64/atlas/libtatlas.so /usr/lib64/atlas/libatlas.so\nln -s /usr/lib64/atlas/libtatlas.so /usr/lib64/atlas/libcblas.so\n\n<span class=\"c1\">#python库，这个是import caffe的时候需要的</span>\npip install scikit-image numpy protobuf\n\n<span class=\"c1\">#这个faster-rcnn需要</span>\npip install easydict\npip install pyyaml\nyum install tkinter\n</code></pre></div><p>（不定期更新）</p>", 
            "topic": [
                {
                    "tag": "CentOS", 
                    "tagLink": "https://api.zhihu.com/topics/19577255"
                }, 
                {
                    "tag": "TensorFlow", 
                    "tagLink": "https://api.zhihu.com/topics/20032249"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": [
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "<p>如果你遇到 \"fatal error: Python.h: No such file or directory\"，那么</p><p>yum install python-devel</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28916121", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 10, 
            "title": "在Ubuntu 16.04上制作 NVIDIA CUDA Docker image", 
            "content": "<blockquote>本文讲述了如何在Kde Ubuntu 16.04.03 (LTS发行版）上制作（编译）NVIDIA CUDA Docker image文件。</blockquote><h2><b>第一步：安装Docker CE （社区发行版）：</b></h2><p><b>1，更新apt软件包索引：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get update</code></pre></div><p><b>2，安装必备的软件包：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</code></pre></div><p><b>3，添加Docker官方GPG key：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class=\"p\">|</span> sudo apt-key add -</code></pre></div><p><b>4，验证key的指纹是9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-key fingerprint 0EBFCD88\n\npub   4096R/0EBFCD88 <span class=\"m\">2017</span>-02-22\n      Key <span class=\"nv\">fingerprint</span> <span class=\"o\">=</span> 9DC8 <span class=\"m\">5822</span> 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release <span class=\"o\">(</span>CE deb<span class=\"o\">)</span> &lt;docker@docker.com&gt;\nsub   4096R/F273FCD8 <span class=\"m\">2017</span>-02-22</code></pre></div><p><b>5，添加稳定版的repository：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo add-apt-repository <span class=\"s2\">&#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu </span><span class=\"k\">$(</span>lsb_release -cs<span class=\"k\">)</span><span class=\"s2\"> stable&#34;</span></code></pre></div><p><b>6，再次更新apt软件包索引：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get update</code></pre></div><p><b>7，安装Docker CE的最新稳定版：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get install docker-ce</code></pre></div><p><b>8，通过运行Docker的hello world来验证此次安装是否成功：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo docker run hello-world</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>第二步：如何卸载Docker CE （以后不用Docker了再卸载）：</b></h2><p><b>1，卸载Docker CE 软件包：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo apt-get purge docker-ce</code></pre></div><p>2，系统上的Images, containers, volumes, 和自定义的配置文件不会自动被删除，可以使用下面的命令删除这些images, containers, and volumes和自定义配置文件：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo rm -rf /var/lib/docker</code></pre></div><h2><b>第三步：把当前用户加入到Docker组，这样以后就不用使用sudo来获得Docker的权限了：</b></h2><p><b>1，添加当前用户到docker组，假定当前用户是gemfield：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ sudo usermod -aG docker gemfield</code></pre></div><p>2，logout再login，让改动生效；也可以使用下面命令来直接生效（会进入新的会话）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ newgrp docker </code></pre></div><h2><b>第四步：build NVIDIA CUDA runtime版本的 Docker image：</b></h2><p><b>1，取得Ubuntu版的NVIDIA CUDA 8.0 runtime版本的Dockerfile：</b></p><p>下载：<a href=\"https://link.zhihu.com/?target=https%3A//gitlab.com/nvidia/cuda/blob/ubuntu16.04/8.0/runtime/Dockerfile\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">gitlab.com/nvidia/cuda/</span><span class=\"invisible\">blob/ubuntu16.04/8.0/runtime/Dockerfile</span><span class=\"ellipsis\"></span></a></p><p>然后放置到当前目录（本步骤没有使用上面的官方版本，而是使用了下面的版本），这个Dockerfile使用了 &#34;ubuntu:16.04&#34; 作为base image。</p><div class=\"highlight\"><pre><code class=\"language-docker\"><span class=\"c\">#https://gitlab.com/nvidia/cuda/blob/ubuntu16.04/8.0/runtime/Dockerfile</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">FROM</span><span class=\"s\"> ubuntu:16.04</span><span class=\"err\">\n</span><span class=\"err\"></span>LABEL maintainer <span class=\"s2\">&#34;Gemfield &lt;gemfield@civilnet.cn&gt;&#34;</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">RUN</span> <span class=\"nv\">NVIDIA_GPGKEY_SUM</span><span class=\"o\">=</span>d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    <span class=\"nv\">NVIDIA_GPGKEY_FPR</span><span class=\"o\">=</span>ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    apt-key adv --export --no-emit-version -a <span class=\"nv\">$NVIDIA_GPGKEY_FPR</span> <span class=\"p\">|</span> tail -n +5 &gt; cudasign.pub <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    <span class=\"nb\">echo</span> <span class=\"s2\">&#34;</span><span class=\"nv\">$NVIDIA_GPGKEY_SUM</span><span class=\"s2\">  cudasign.pub&#34;</span> <span class=\"p\">|</span> sha256sum -c --strict - <span class=\"o\">&amp;&amp;</span> rm cudasign.pub <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    <span class=\"nb\">echo</span> <span class=\"s2\">&#34;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /&#34;</span> &gt; /etc/apt/sources.list.d/cuda.list<span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> CUDA_VERSION 8.0.61</span><span class=\"err\">\n</span><span class=\"err\"></span>LABEL com.nvidia.cuda.version<span class=\"o\">=</span><span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">CUDA_VERSION</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> NVIDIA_CUDA_VERSION $CUDA_VERSION</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> CUDA_PKG_VERSION 8-0=$CUDA_VERSION-1</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">RUN</span> apt-get update <span class=\"o\">&amp;&amp;</span> apt-get install -y --no-install-recommends <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-nvrtc-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-nvgraph-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cusolver-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cublas-8-0<span class=\"o\">=</span><span class=\"m\">8</span>.0.61.2-1 <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cufft-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-curand-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cusparse-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-npp-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cudart-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    ln -s cuda-8.0 /usr/local/cuda <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    rm -rf /var/lib/apt/lists/*<span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">RUN</span> <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/cuda/lib64&#34;</span> &gt;&gt; /etc/ld.so.conf.d/cuda.conf <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    ldconfig<span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"c\"># nvidia-docker 1.0</span><span class=\"err\">\n</span><span class=\"err\"></span>LABEL com.nvidia.volumes.needed<span class=\"o\">=</span><span class=\"s2\">&#34;nvidia_driver&#34;</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">RUN</span> <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/nvidia/lib&#34;</span> &gt;&gt; /etc/ld.so.conf.d/nvidia.conf <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/nvidia/lib64&#34;</span> &gt;&gt; /etc/ld.so.conf.d/nvidia.conf<span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"c\"># nvidia-container-runtime</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> NVIDIA_VISIBLE_DEVICES all</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> NVIDIA_DRIVER_CAPABILITIES compute,utility</span></code></pre></div><p><b>2，在包含上面Dockerfile的当前目录，执行Docker build命令来生成&#34;gemfield/ubuntu-runtime-cuda:8.0&#34; Docker image：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/AI/game$ sudo docker build --pull -t <span class=\"s2\">&#34;gemfield/ubuntu-runtime-cuda:8.0&#34;</span> . \n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> gemfield 的密码： \nSending build context to Docker daemon  <span class=\"m\">3</span>.584kB\nStep <span class=\"m\">1</span>/15 : FROM ubuntu:16.04\n<span class=\"m\">16</span>.04: Pulling from library/ubuntu\nd5c6f90da05d: Already exists \n1300883d87d5: Already exists \nc220aa3cfc1b: Already exists \n2e9398f099dc: Already exists \ndc27a084064f: Already exists \nDigest: sha256:34471448724419596ca4e890496d375801de21b0e67b81a77fd6155ce001edad\nStatus: Downloaded newer image <span class=\"k\">for</span> ubuntu:16.04\n ---&gt; ccc7a11d65b1\nStep <span class=\"m\">2</span>/15 : LABEL maintainer <span class=\"s2\">&#34;NVIDIA CORPORATION &lt;cudatools@nvidia.com&gt;&#34;</span>\n ---&gt; Running in 975b47024f69\n ---&gt; a87b81384c9d\nRemoving intermediate container 975b47024f69\nStep <span class=\"m\">3</span>/15 : RUN <span class=\"nv\">NVIDIA_GPGKEY_SUM</span><span class=\"o\">=</span>d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 <span class=\"o\">&amp;&amp;</span>     <span class=\"nv\">NVIDIA_GPGKEY_FPR</span><span class=\"o\">=</span>ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 <span class=\"o\">&amp;&amp;</span>     apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub <span class=\"o\">&amp;&amp;</span>     apt-key adv --export --no-emit-version -a <span class=\"nv\">$NVIDIA_GPGKEY_FPR</span> <span class=\"p\">|</span> tail -n +5 &gt; cudasign.pub <span class=\"o\">&amp;&amp;</span>     <span class=\"nb\">echo</span> <span class=\"s2\">&#34;</span><span class=\"nv\">$NVIDIA_GPGKEY_SUM</span><span class=\"s2\">  cudasign.pub&#34;</span> <span class=\"p\">|</span> sha256sum -c --strict - <span class=\"o\">&amp;&amp;</span> rm cudasign.pub <span class=\"o\">&amp;&amp;</span>     <span class=\"nb\">echo</span> <span class=\"s2\">&#34;deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /&#34;</span> &gt; /etc/apt/sources.list.d/cuda.list\n ---&gt; Running in 84b025004c42\nExecuting: /tmp/tmp.IwPgwSC6xT/gpg.1.sh --fetch-keys\nhttp://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub\ngpg: key 7FA2AF80: public key <span class=\"s2\">&#34;cudatools &lt;cudatools@nvidia.com&gt;&#34;</span> imported\ngpg: Total number processed: <span class=\"m\">1</span>                                                                                                                                \ngpg:               imported: <span class=\"m\">1</span>  <span class=\"o\">(</span>RSA: <span class=\"m\">1</span><span class=\"o\">)</span>                                                                                                                      \ncudasign.pub: OK\n ---&gt; f6818206dd4a\nRemoving intermediate container 84b025004c42\nStep <span class=\"m\">4</span>/15 : ENV CUDA_VERSION <span class=\"m\">8</span>.0.61\n ---&gt; Running in 0eec0d5f5cd5\n ---&gt; 66ce45765c4a\nRemoving intermediate container 0eec0d5f5cd5\nStep <span class=\"m\">5</span>/15 : LABEL com.nvidia.cuda.version <span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">CUDA_VERSION</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span>\n ---&gt; Running in 055b6e0f8b18\n ---&gt; 13b2a7be054c\nRemoving intermediate container 055b6e0f8b18\nStep <span class=\"m\">6</span>/15 : ENV NVIDIA_CUDA_VERSION <span class=\"nv\">$CUDA_VERSION</span>\n ---&gt; Running in 1c2adf7e726b\n ---&gt; f255f2ea3541\nRemoving intermediate container 1c2adf7e726b\nStep <span class=\"m\">7</span>/15 : ENV CUDA_PKG_VERSION <span class=\"m\">8</span>-0<span class=\"o\">=</span><span class=\"nv\">$CUDA_VERSION</span>-1\n ---&gt; Running in 11358e055e46\n ---&gt; fee68a3a223b\nRemoving intermediate container 11358e055e46\nStep <span class=\"m\">8</span>/15 : RUN apt-get update <span class=\"o\">&amp;&amp;</span> apt-get install -y --no-install-recommends         cuda-nvrtc-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-nvgraph-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cusolver-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cublas-8-0<span class=\"o\">=</span><span class=\"m\">8</span>.0.61.2-1         cuda-cufft-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-curand-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cusparse-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-npp-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cudart-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"o\">&amp;&amp;</span>     ln -s cuda-8.0 /usr/local/cuda <span class=\"o\">&amp;&amp;</span>     rm -rf /var/lib/apt/lists/*\n ---&gt; Running in fadbc0180d26\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nIgn:2 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  InRelease\nGet:3 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Release <span class=\"o\">[</span><span class=\"m\">564</span> B<span class=\"o\">]</span>\nGet:4 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Release.gpg <span class=\"o\">[</span><span class=\"m\">801</span> B<span class=\"o\">]</span>\nGet:5 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages <span class=\"o\">[</span><span class=\"m\">66</span>.0 kB<span class=\"o\">]</span>\nGet:6 http://archive.ubuntu.com/ubuntu xenial InRelease <span class=\"o\">[</span><span class=\"m\">247</span> kB<span class=\"o\">]</span>\nGet:7 http://archive.ubuntu.com/ubuntu xenial-updates InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:8 http://archive.ubuntu.com/ubuntu xenial-backports InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:9 http://archive.ubuntu.com/ubuntu xenial/universe Sources <span class=\"o\">[</span><span class=\"m\">9802</span> kB<span class=\"o\">]</span>\nGet:10 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">1558</span> kB<span class=\"o\">]</span>\nGet:11 http://archive.ubuntu.com/ubuntu xenial/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">14</span>.1 kB<span class=\"o\">]</span>\nGet:12 http://archive.ubuntu.com/ubuntu xenial/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">9827</span> kB<span class=\"o\">]</span>\nGet:13 http://archive.ubuntu.com/ubuntu xenial/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">176</span> kB<span class=\"o\">]</span>\nGet:14 http://archive.ubuntu.com/ubuntu xenial-updates/universe Sources <span class=\"o\">[</span><span class=\"m\">214</span> kB<span class=\"o\">]</span>\nGet:15 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">799</span> kB<span class=\"o\">]</span>\nGet:16 http://archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">13</span>.6 kB<span class=\"o\">]</span>\nGet:17 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">666</span> kB<span class=\"o\">]</span>\nGet:18 http://archive.ubuntu.com/ubuntu xenial-updates/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">17</span>.5 kB<span class=\"o\">]</span>\nGet:19 http://archive.ubuntu.com/ubuntu xenial-backports/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">5177</span> B<span class=\"o\">]</span>\nGet:20 http://archive.ubuntu.com/ubuntu xenial-backports/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">6236</span> B<span class=\"o\">]</span>\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:21 http://security.ubuntu.com/ubuntu xenial-security/universe Sources <span class=\"o\">[</span><span class=\"m\">46</span>.8 kB<span class=\"o\">]</span>\nGet:22 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">440</span> kB<span class=\"o\">]</span>\nGet:23 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">12</span>.8 kB<span class=\"o\">]</span>\nGet:24 http://security.ubuntu.com/ubuntu xenial-security/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">204</span> kB<span class=\"o\">]</span>\nGet:25 http://security.ubuntu.com/ubuntu xenial-security/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">2935</span> B<span class=\"o\">]</span>\nFetched <span class=\"m\">24</span>.4 MB in 6min 52s <span class=\"o\">(</span><span class=\"m\">59</span>.2 kB/s<span class=\"o\">)</span>\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  cuda-license-8-0\nThe following NEW packages will be installed:\n  cuda-cublas-8-0 cuda-cudart-8-0 cuda-cufft-8-0 cuda-curand-8-0\n  cuda-cusolver-8-0 cuda-cusparse-8-0 cuda-license-8-0 cuda-npp-8-0\n  cuda-nvgraph-8-0 cuda-nvrtc-8-0\n<span class=\"m\">0</span> upgraded, <span class=\"m\">10</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">0</span> not upgraded.\nNeed to get <span class=\"m\">447</span> MB of archives.\nAfter this operation, <span class=\"m\">660</span> MB of additional disk space will be used.\nGet:1 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-license-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">27</span>.6 kB<span class=\"o\">]</span>\nGet:2 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cublas-8-0 <span class=\"m\">8</span>.0.61.2-1 <span class=\"o\">[</span><span class=\"m\">58</span>.1 MB<span class=\"o\">]</span>\nGet:3 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cudart-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">135</span> kB<span class=\"o\">]</span>\nGet:4 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cufft-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">117</span> MB<span class=\"o\">]</span>\nGet:5 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-curand-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">43</span>.7 MB<span class=\"o\">]</span>\nGet:6 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cusolver-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">29</span>.3 MB<span class=\"o\">]</span>\nGet:7 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cusparse-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">28</span>.8 MB<span class=\"o\">]</span>\nGet:8 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-npp-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">157</span> MB<span class=\"o\">]</span>\nGet:9 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-nvgraph-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">2948</span> kB<span class=\"o\">]</span>\nGet:10 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-nvrtc-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">9585</span> kB<span class=\"o\">]</span>\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched <span class=\"m\">447</span> MB in 8min 20s <span class=\"o\">(</span><span class=\"m\">894</span> kB/s<span class=\"o\">)</span>\nSelecting previously unselected package cuda-license-8-0.\n<span class=\"o\">(</span>Reading database ... <span class=\"m\">4768</span> files and directories currently installed.<span class=\"o\">)</span>\nPreparing to unpack .../cuda-license-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-license-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cublas-8-0.\nPreparing to unpack .../cuda-cublas-8-0_8.0.61.2-1_amd64.deb ...\nUnpacking cuda-cublas-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61.2-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cudart-8-0.\nPreparing to unpack .../cuda-cudart-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cudart-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cufft-8-0.\nPreparing to unpack .../cuda-cufft-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cufft-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-curand-8-0.\nPreparing to unpack .../cuda-curand-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-curand-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cusolver-8-0.\nPreparing to unpack .../cuda-cusolver-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cusolver-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cusparse-8-0.\nPreparing to unpack .../cuda-cusparse-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cusparse-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-npp-8-0.\nPreparing to unpack .../cuda-npp-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-npp-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-nvgraph-8-0.\nPreparing to unpack .../cuda-nvgraph-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-nvgraph-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-nvrtc-8-0.\nPreparing to unpack .../cuda-nvrtc-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-nvrtc-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-license-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\n*** LICENSE AGREEMENT ***\nBy using this software you agree to fully comply with the terms and \nconditions of the EULA <span class=\"o\">(</span>End User License Agreement<span class=\"o\">)</span>. The EULA is located\nat /usr/local/cuda-8.0/doc/EULA.txt. The EULA can also be found at\nhttp://docs.nvidia.com/cuda/eula/index.html. If you <span class=\"k\">do</span> not agree to the\nterms and conditions of the EULA, <span class=\"k\">do</span> not use the software.\n\nSetting up cuda-cublas-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61.2-1<span class=\"o\">)</span> ...\nSetting up cuda-cudart-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cufft-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-curand-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cusolver-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cusparse-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-npp-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-nvgraph-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-nvrtc-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\n ---&gt; c27357aec7be\nRemoving intermediate container fadbc0180d26\nStep <span class=\"m\">9</span>/15 : RUN <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/cuda/lib64&#34;</span> &gt;&gt; /etc/ld.so.conf.d/cuda.conf <span class=\"o\">&amp;&amp;</span>     ldconfig\n ---&gt; Running in 1cd110bdaff3\n ---&gt; 96faaa1cff8b\nRemoving intermediate container 1cd110bdaff3\nStep <span class=\"m\">10</span>/15 : LABEL com.nvidia.volumes.needed <span class=\"s2\">&#34;nvidia_driver&#34;</span>\n ---&gt; Running in a03977aa0f43\n ---&gt; 9adb7b757e5f\nRemoving intermediate container a03977aa0f43\nStep <span class=\"m\">11</span>/15 : RUN <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/nvidia/lib&#34;</span> &gt;&gt; /etc/ld.so.conf.d/nvidia.conf <span class=\"o\">&amp;&amp;</span>     <span class=\"nb\">echo</span> <span class=\"s2\">&#34;/usr/local/nvidia/lib64&#34;</span> &gt;&gt; /etc/ld.so.conf.d/nvidia.conf\n ---&gt; Running in 44f3a2d2d357\n ---&gt; 3d6aa5306f78\nRemoving intermediate container 44f3a2d2d357\nStep <span class=\"m\">12</span>/15 : ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:<span class=\"si\">${</span><span class=\"nv\">PATH</span><span class=\"si\">}</span>\n ---&gt; Running in 08f77599aaf8\n ---&gt; 557c9d58dea6\nRemoving intermediate container 08f77599aaf8\nStep <span class=\"m\">13</span>/15 : ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64\n ---&gt; Running in 6bab4bfbc4e6\n ---&gt; cd031b377698\nRemoving intermediate container 6bab4bfbc4e6\nStep <span class=\"m\">14</span>/15 : ENV NVIDIA_VISIBLE_DEVICES all\n ---&gt; Running in b77822802f15\n ---&gt; 251a82db874b\nRemoving intermediate container b77822802f15\nStep <span class=\"m\">15</span>/15 : ENV NVIDIA_DRIVER_CAPABILITIES compute,utility\n ---&gt; Running in 0a44d49249be\n ---&gt; d0b82ef8f4d2\nRemoving intermediate container 0a44d49249be\nSuccessfully built d0b82ef8f4d2\nSuccessfully tagged gemfield/ubuntu-runtime-cuda:8.0\ngemfield@ai:~/AI/game$\n</code></pre></div><p><b>3，运行docker images命令来查看生成的image：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/AI/game$ docker images\nREPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE\ngemfield/ubuntu-runtime-cuda   <span class=\"m\">8</span>.0                 d0b82ef8f4d2        <span class=\"m\">34</span> minutes ago      780MB\nnvidia/cuda                    latest              f1193af0e70e        <span class=\"m\">2</span> weeks ago         <span class=\"m\">1</span>.68GB\nubuntu                         <span class=\"m\">16</span>.04               ccc7a11d65b1        <span class=\"m\">2</span> weeks ago         120MB\nhello-world                    latest              1815c82652c0        <span class=\"m\">2</span> months ago        <span class=\"m\">1</span>.84kB\ngemfield@ai:~/AI/game$ </code></pre></div><h2><b>第五步：build NVIDIA CUDA 开发版本的 Docker image：</b></h2><p><b>1，取得Ubuntu版的NVIDIA CUDA 8.0 devel 版本的Dockerfile：</b></p><p>下载：<a href=\"https://link.zhihu.com/?target=https%3A//gitlab.com/nvidia/cuda/blob/ubuntu16.04/8.0/devel/Dockerfile\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">8.0/devel/Dockerfile · ubuntu16.04 · nvidia / cuda</a></p><p>然后放置到当前目录（本步骤没有使用上面的官方版本，而是使用了下面的版本），这个Dockerfile使用了第四步制作的image作为父 image。</p><div class=\"highlight\"><pre><code class=\"language-docker\"><span class=\"k\">FROM</span><span class=\"s\"> gemfield/ubuntu-runtime-cuda:8.0</span><span class=\"err\">\n</span><span class=\"err\"></span>LABEL maintainer <span class=\"s2\">&#34;Gemfield &lt;gemfield@civilnet.cn&gt;&#34;</span><span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">RUN</span> apt-get update <span class=\"o\">&amp;&amp;</span> apt-get install -y --no-install-recommends <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-core-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-misc-headers-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-command-line-tools-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-nvrtc-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-nvml-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-nvgraph-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cusolver-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cublas-dev-8-0<span class=\"o\">=</span><span class=\"m\">8</span>.0.61.2-1 <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cufft-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-curand-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cusparse-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-npp-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-cudart-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>        cuda-driver-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\\n</span><span class=\"se\"></span>    rm -rf /var/lib/apt/lists/*<span class=\"err\">\n</span><span class=\"err\">\n</span><span class=\"err\"></span><span class=\"k\">ENV</span><span class=\"s\"> LIBRARY_PATH /usr/local/cuda/lib64/stubs:${LIBRARY_PATH}</span></code></pre></div><p><b>2，在包含上面Dockerfile的当前目录，执行Docker build命令来生成&#34;gemfield/ubuntu-devel-cuda:8.0&#34; Docker image：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/AI/game2$ sudo docker build -t <span class=\"s2\">&#34;gemfield/ubuntu-devel-cuda:8.0&#34;</span> .             \n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> gemfield 的密码： \nSending build context to Docker daemon   <span class=\"m\">2</span>.56kB\nStep <span class=\"m\">1</span>/4 : FROM gemfield/ubuntu-runtime-cuda:8.0\n ---&gt; d0b82ef8f4d2\nStep <span class=\"m\">2</span>/4 : LABEL maintainer <span class=\"s2\">&#34;Gemfield &lt;gemfield@civilnet.cn&gt;&#34;</span>\n ---&gt; Running in c6b340504d34\n ---&gt; c103d5ca0de3\nRemoving intermediate container c6b340504d34\nStep <span class=\"m\">3</span>/4 : RUN apt-get update <span class=\"o\">&amp;&amp;</span> apt-get install -y --no-install-recommends         cuda-core-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-misc-headers-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-command-line-tools-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-nvrtc-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-nvml-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-nvgraph-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cusolver-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cublas-dev-8-0<span class=\"o\">=</span><span class=\"m\">8</span>.0.61.2-1         cuda-cufft-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-curand-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cusparse-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-npp-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-cudart-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span>         cuda-driver-dev-<span class=\"nv\">$CUDA_PKG_VERSION</span> <span class=\"o\">&amp;&amp;</span>     rm -rf /var/lib/apt/lists/*\n ---&gt; Running in 72774b2842f3\nGet:1 http://security.ubuntu.com/ubuntu xenial-security InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:2 http://archive.ubuntu.com/ubuntu xenial InRelease <span class=\"o\">[</span><span class=\"m\">247</span> kB<span class=\"o\">]</span>\nIgn:3 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  InRelease\nGet:4 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Release <span class=\"o\">[</span><span class=\"m\">564</span> B<span class=\"o\">]</span>\nGet:5 http://archive.ubuntu.com/ubuntu xenial-updates InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:6 http://archive.ubuntu.com/ubuntu xenial-backports InRelease <span class=\"o\">[</span><span class=\"m\">102</span> kB<span class=\"o\">]</span>\nGet:7 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Release.gpg <span class=\"o\">[</span><span class=\"m\">801</span> B<span class=\"o\">]</span>\nGet:8 http://security.ubuntu.com/ubuntu xenial-security/universe Sources <span class=\"o\">[</span><span class=\"m\">46</span>.8 kB<span class=\"o\">]</span>\nGet:9 http://archive.ubuntu.com/ubuntu xenial/universe Sources <span class=\"o\">[</span><span class=\"m\">9802</span> kB<span class=\"o\">]</span>\nGet:10 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages <span class=\"o\">[</span><span class=\"m\">66</span>.0 kB<span class=\"o\">]</span>\nGet:11 http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">440</span> kB<span class=\"o\">]</span>\nGet:12 http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">12</span>.8 kB<span class=\"o\">]</span>\nGet:13 http://security.ubuntu.com/ubuntu xenial-security/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">204</span> kB<span class=\"o\">]</span>\nGet:14 http://security.ubuntu.com/ubuntu xenial-security/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">2935</span> B<span class=\"o\">]</span>\nGet:15 http://archive.ubuntu.com/ubuntu xenial/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">1558</span> kB<span class=\"o\">]</span>\nGet:16 http://archive.ubuntu.com/ubuntu xenial/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">14</span>.1 kB<span class=\"o\">]</span>\nGet:17 http://archive.ubuntu.com/ubuntu xenial/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">9827</span> kB<span class=\"o\">]</span>\nGet:18 http://archive.ubuntu.com/ubuntu xenial/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">176</span> kB<span class=\"o\">]</span>\nGet:19 http://archive.ubuntu.com/ubuntu xenial-updates/universe Sources <span class=\"o\">[</span><span class=\"m\">214</span> kB<span class=\"o\">]</span>\nGet:20 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">799</span> kB<span class=\"o\">]</span>\nGet:21 http://archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages <span class=\"o\">[</span><span class=\"m\">13</span>.6 kB<span class=\"o\">]</span>\nGet:22 http://archive.ubuntu.com/ubuntu xenial-updates/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">666</span> kB<span class=\"o\">]</span>\nGet:23 http://archive.ubuntu.com/ubuntu xenial-updates/multiverse amd64 Packages <span class=\"o\">[</span><span class=\"m\">17</span>.5 kB<span class=\"o\">]</span>\nGet:24 http://archive.ubuntu.com/ubuntu xenial-backports/main amd64 Packages <span class=\"o\">[</span><span class=\"m\">5177</span> B<span class=\"o\">]</span>\nGet:25 http://archive.ubuntu.com/ubuntu xenial-backports/universe amd64 Packages <span class=\"o\">[</span><span class=\"m\">6236</span> B<span class=\"o\">]</span>\nFetched <span class=\"m\">24</span>.4 MB in 39s <span class=\"o\">(</span><span class=\"m\">621</span> kB/s<span class=\"o\">)</span>\nReading package lists...\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following additional packages will be installed:\n  binutils build-essential bzip2 cpp cpp-5 dpkg-dev g++ g++-5 gcc gcc-5\n  libasan2 libatomic1 libc-dev-bin libc6-dev libcc1-0 libcilkrts5 libdpkg-perl\n  libgcc-5-dev libgdbm3 libgmp10 libgomp1 libisl15 libitm1 liblsan0 libmpc3\n  libmpfr4 libmpx0 libperl5.22 libquadmath0 libstdc++-5-dev libtsan0 libubsan0\n  linux-libc-dev make patch perl perl-modules-5.22 xz-utils\nSuggested packages:\n  binutils-doc bzip2-doc cpp-doc gcc-5-locales debian-keyring g++-multilib\n  g++-5-multilib gcc-5-doc libstdc++6-5-dbg gcc-multilib manpages-dev autoconf\n  automake libtool flex bison gdb gcc-doc gcc-5-multilib libgcc1-dbg\n  libgomp1-dbg libitm1-dbg libatomic1-dbg libasan2-dbg liblsan0-dbg\n  libtsan0-dbg libubsan0-dbg libcilkrts5-dbg libmpx0-dbg libquadmath0-dbg\n  glibc-doc libstdc++-5-doc make-doc ed diffutils-doc perl-doc\n  libterm-readline-gnu-perl <span class=\"p\">|</span> libterm-readline-perl-perl\nRecommended packages:\n  fakeroot libalgorithm-merge-perl manpages manpages-dev\n  libfile-fcntllock-perl netbase rename\nThe following NEW packages will be installed:\n  binutils build-essential bzip2 cpp cpp-5 cuda-command-line-tools-8-0\n  cuda-core-8-0 cuda-cublas-dev-8-0 cuda-cudart-dev-8-0 cuda-cufft-dev-8-0\n  cuda-curand-dev-8-0 cuda-cusolver-dev-8-0 cuda-cusparse-dev-8-0\n  cuda-driver-dev-8-0 cuda-misc-headers-8-0 cuda-npp-dev-8-0\n  cuda-nvgraph-dev-8-0 cuda-nvml-dev-8-0 cuda-nvrtc-dev-8-0 dpkg-dev g++ g++-5\n  gcc gcc-5 libasan2 libatomic1 libc-dev-bin libc6-dev libcc1-0 libcilkrts5\n  libdpkg-perl libgcc-5-dev libgdbm3 libgmp10 libgomp1 libisl15 libitm1\n  liblsan0 libmpc3 libmpfr4 libmpx0 libperl5.22 libquadmath0 libstdc++-5-dev\n  libtsan0 libubsan0 linux-libc-dev make patch perl perl-modules-5.22 xz-utils\n<span class=\"m\">0</span> upgraded, <span class=\"m\">52</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">0</span> not upgraded.\nNeed to get <span class=\"m\">442</span> MB of archives.\nAfter this operation, <span class=\"m\">905</span> MB of additional disk space will be used.\nGet:1 http://archive.ubuntu.com/ubuntu xenial/main amd64 libgdbm3 amd64 <span class=\"m\">1</span>.8.3-13.1 <span class=\"o\">[</span><span class=\"m\">16</span>.9 kB<span class=\"o\">]</span>\nGet:2 http://archive.ubuntu.com/ubuntu xenial/main amd64 perl-modules-5.22 all <span class=\"m\">5</span>.22.1-9 <span class=\"o\">[</span><span class=\"m\">2641</span> kB<span class=\"o\">]</span>\nGet:3 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-misc-headers-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">1077</span> kB<span class=\"o\">]</span>\nGet:4 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-core-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">20</span>.0 MB<span class=\"o\">]</span>\nGet:5 http://archive.ubuntu.com/ubuntu xenial/main amd64 libperl5.22 amd64 <span class=\"m\">5</span>.22.1-9 <span class=\"o\">[</span><span class=\"m\">3371</span> kB<span class=\"o\">]</span>\nGet:6 http://archive.ubuntu.com/ubuntu xenial/main amd64 perl amd64 <span class=\"m\">5</span>.22.1-9 <span class=\"o\">[</span><span class=\"m\">237</span> kB<span class=\"o\">]</span>\nGet:7 http://archive.ubuntu.com/ubuntu xenial/main amd64 libgmp10 amd64 <span class=\"m\">2</span>:6.1.0+dfsg-2 <span class=\"o\">[</span><span class=\"m\">240</span> kB<span class=\"o\">]</span>\nGet:8 http://archive.ubuntu.com/ubuntu xenial/main amd64 libmpfr4 amd64 <span class=\"m\">3</span>.1.4-1 <span class=\"o\">[</span><span class=\"m\">191</span> kB<span class=\"o\">]</span>\nGet:9 http://archive.ubuntu.com/ubuntu xenial/main amd64 libmpc3 amd64 <span class=\"m\">1</span>.0.3-1 <span class=\"o\">[</span><span class=\"m\">39</span>.7 kB<span class=\"o\">]</span>\nGet:10 http://archive.ubuntu.com/ubuntu xenial/main amd64 bzip2 amd64 <span class=\"m\">1</span>.0.6-8 <span class=\"o\">[</span><span class=\"m\">32</span>.7 kB<span class=\"o\">]</span>\nGet:11 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 binutils amd64 <span class=\"m\">2</span>.26.1-1ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">2311</span> kB<span class=\"o\">]</span>\nGet:12 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc-dev-bin amd64 <span class=\"m\">2</span>.23-0ubuntu9 <span class=\"o\">[</span><span class=\"m\">68</span>.6 kB<span class=\"o\">]</span>\nGet:13 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 linux-libc-dev amd64 <span class=\"m\">4</span>.4.0-93.116 <span class=\"o\">[</span><span class=\"m\">836</span> kB<span class=\"o\">]</span>\nGet:14 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libc6-dev amd64 <span class=\"m\">2</span>.23-0ubuntu9 <span class=\"o\">[</span><span class=\"m\">2082</span> kB<span class=\"o\">]</span>\nGet:15 http://archive.ubuntu.com/ubuntu xenial/main amd64 libisl15 amd64 <span class=\"m\">0</span>.16.1-1 <span class=\"o\">[</span><span class=\"m\">524</span> kB<span class=\"o\">]</span>\nGet:16 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 cpp-5 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">7653</span> kB<span class=\"o\">]</span>\nGet:17 http://archive.ubuntu.com/ubuntu xenial/main amd64 cpp amd64 <span class=\"m\">4</span>:5.3.1-1ubuntu1 <span class=\"o\">[</span><span class=\"m\">27</span>.7 kB<span class=\"o\">]</span>\nGet:18 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libcc1-0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">38</span>.8 kB<span class=\"o\">]</span>\nGet:19 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libgomp1 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">55</span>.0 kB<span class=\"o\">]</span>\nGet:20 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libitm1 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">27</span>.4 kB<span class=\"o\">]</span>\nGet:21 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libatomic1 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">8912</span> B<span class=\"o\">]</span>\nGet:22 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libasan2 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">264</span> kB<span class=\"o\">]</span>\nGet:23 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 liblsan0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">105</span> kB<span class=\"o\">]</span>\nGet:24 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libtsan0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">244</span> kB<span class=\"o\">]</span>\nGet:25 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libubsan0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">95</span>.3 kB<span class=\"o\">]</span>\nGet:26 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libcilkrts5 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">40</span>.1 kB<span class=\"o\">]</span>\nGet:27 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libmpx0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">9766</span> B<span class=\"o\">]</span>\nGet:28 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libquadmath0 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">131</span> kB<span class=\"o\">]</span>\nGet:29 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libgcc-5-dev amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">2237</span> kB<span class=\"o\">]</span>\nGet:30 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 gcc-5 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">8577</span> kB<span class=\"o\">]</span>\nGet:31 http://archive.ubuntu.com/ubuntu xenial/main amd64 gcc amd64 <span class=\"m\">4</span>:5.3.1-1ubuntu1 <span class=\"o\">[</span><span class=\"m\">5244</span> B<span class=\"o\">]</span>\nGet:32 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libstdc++-5-dev amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">1426</span> kB<span class=\"o\">]</span>\nGet:33 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 g++-5 amd64 <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4 <span class=\"o\">[</span><span class=\"m\">8300</span> kB<span class=\"o\">]</span>\nGet:34 http://archive.ubuntu.com/ubuntu xenial/main amd64 g++ amd64 <span class=\"m\">4</span>:5.3.1-1ubuntu1 <span class=\"o\">[</span><span class=\"m\">1504</span> B<span class=\"o\">]</span>\nGet:35 http://archive.ubuntu.com/ubuntu xenial/main amd64 make amd64 <span class=\"m\">4</span>.1-6 <span class=\"o\">[</span><span class=\"m\">151</span> kB<span class=\"o\">]</span>\nGet:36 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 libdpkg-perl all <span class=\"m\">1</span>.18.4ubuntu1.2 <span class=\"o\">[</span><span class=\"m\">195</span> kB<span class=\"o\">]</span>\nGet:37 http://archive.ubuntu.com/ubuntu xenial/main amd64 xz-utils amd64 <span class=\"m\">5</span>.1.1alpha+20120614-2ubuntu2 <span class=\"o\">[</span><span class=\"m\">78</span>.8 kB<span class=\"o\">]</span>\nGet:38 http://archive.ubuntu.com/ubuntu xenial/main amd64 patch amd64 <span class=\"m\">2</span>.7.5-1 <span class=\"o\">[</span><span class=\"m\">90</span>.4 kB<span class=\"o\">]</span>\nGet:39 http://archive.ubuntu.com/ubuntu xenial-updates/main amd64 dpkg-dev all <span class=\"m\">1</span>.18.4ubuntu1.2 <span class=\"o\">[</span><span class=\"m\">584</span> kB<span class=\"o\">]</span>\nGet:40 http://archive.ubuntu.com/ubuntu xenial/main amd64 build-essential amd64 <span class=\"m\">12</span>.1ubuntu2 <span class=\"o\">[</span><span class=\"m\">4758</span> B<span class=\"o\">]</span>\nGet:41 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-driver-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">14</span>.1 kB<span class=\"o\">]</span>\nGet:42 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cudart-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">1071</span> kB<span class=\"o\">]</span>\nGet:43 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-command-line-tools-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">26</span>.1 MB<span class=\"o\">]</span>\nGet:44 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cublas-dev-8-0 <span class=\"m\">8</span>.0.61.2-1 <span class=\"o\">[</span><span class=\"m\">66</span>.6 MB<span class=\"o\">]</span>\nGet:45 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cufft-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">94</span>.8 MB<span class=\"o\">]</span>\nGet:46 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-curand-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">67</span>.7 MB<span class=\"o\">]</span>\nGet:47 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cusolver-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">6816</span> kB<span class=\"o\">]</span>\nGet:48 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-cusparse-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">29</span>.6 MB<span class=\"o\">]</span>\nGet:49 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-npp-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">82</span>.3 MB<span class=\"o\">]</span>\nGet:50 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-nvgraph-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">3028</span> kB<span class=\"o\">]</span>\nGet:51 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-nvml-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">48</span>.4 kB<span class=\"o\">]</span>\nGet:52 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  cuda-nvrtc-dev-8-0 <span class=\"m\">8</span>.0.61-1 <span class=\"o\">[</span><span class=\"m\">10</span>.8 kB<span class=\"o\">]</span>\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched <span class=\"m\">442</span> MB in 8min 37s <span class=\"o\">(</span><span class=\"m\">854</span> kB/s<span class=\"o\">)</span>\nSelecting previously unselected package libgdbm3:amd64.\n<span class=\"o\">(</span>Reading database ... <span class=\"m\">4887</span> files and directories currently installed.<span class=\"o\">)</span>\nPreparing to unpack .../libgdbm3_1.8.3-13.1_amd64.deb ...\nUnpacking libgdbm3:amd64 <span class=\"o\">(</span><span class=\"m\">1</span>.8.3-13.1<span class=\"o\">)</span> ...\nSelecting previously unselected package perl-modules-5.22.\nPreparing to unpack .../perl-modules-5.22_5.22.1-9_all.deb ...\nUnpacking perl-modules-5.22 <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nSelecting previously unselected package libperl5.22:amd64.\nPreparing to unpack .../libperl5.22_5.22.1-9_amd64.deb ...\nUnpacking libperl5.22:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nSelecting previously unselected package perl.\nPreparing to unpack .../perl_5.22.1-9_amd64.deb ...\nUnpacking perl <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nSelecting previously unselected package libgmp10:amd64.\nPreparing to unpack .../libgmp10_2%3a6.1.0+dfsg-2_amd64.deb ...\nUnpacking libgmp10:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>:6.1.0+dfsg-2<span class=\"o\">)</span> ...\nSelecting previously unselected package libmpfr4:amd64.\nPreparing to unpack .../libmpfr4_3.1.4-1_amd64.deb ...\nUnpacking libmpfr4:amd64 <span class=\"o\">(</span><span class=\"m\">3</span>.1.4-1<span class=\"o\">)</span> ...\nSelecting previously unselected package libmpc3:amd64.\nPreparing to unpack .../libmpc3_1.0.3-1_amd64.deb ...\nUnpacking libmpc3:amd64 <span class=\"o\">(</span><span class=\"m\">1</span>.0.3-1<span class=\"o\">)</span> ...\nSelecting previously unselected package bzip2.\nPreparing to unpack .../bzip2_1.0.6-8_amd64.deb ...\nUnpacking bzip2 <span class=\"o\">(</span><span class=\"m\">1</span>.0.6-8<span class=\"o\">)</span> ...\nSelecting previously unselected package binutils.\nPreparing to unpack .../binutils_2.26.1-1ubuntu1~16.04.4_amd64.deb ...\nUnpacking binutils <span class=\"o\">(</span><span class=\"m\">2</span>.26.1-1ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libc-dev-bin.\nPreparing to unpack .../libc-dev-bin_2.23-0ubuntu9_amd64.deb ...\nUnpacking libc-dev-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\nSelecting previously unselected package linux-libc-dev:amd64.\nPreparing to unpack .../linux-libc-dev_4.4.0-93.116_amd64.deb ...\nUnpacking linux-libc-dev:amd64 <span class=\"o\">(</span><span class=\"m\">4</span>.4.0-93.116<span class=\"o\">)</span> ...\nSelecting previously unselected package libc6-dev:amd64.\nPreparing to unpack .../libc6-dev_2.23-0ubuntu9_amd64.deb ...\nUnpacking libc6-dev:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\nSelecting previously unselected package libisl15:amd64.\nPreparing to unpack .../libisl15_0.16.1-1_amd64.deb ...\nUnpacking libisl15:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.16.1-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cpp-5.\nPreparing to unpack .../cpp-5_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking cpp-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package cpp.\nPreparing to unpack .../cpp_4%3a5.3.1-1ubuntu1_amd64.deb ...\nUnpacking cpp <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nSelecting previously unselected package libcc1-0:amd64.\nPreparing to unpack .../libcc1-0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libcc1-0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libgomp1:amd64.\nPreparing to unpack .../libgomp1_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libgomp1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libitm1:amd64.\nPreparing to unpack .../libitm1_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libitm1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libatomic1:amd64.\nPreparing to unpack .../libatomic1_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libatomic1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libasan2:amd64.\nPreparing to unpack .../libasan2_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libasan2:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package liblsan0:amd64.\nPreparing to unpack .../liblsan0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking liblsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libtsan0:amd64.\nPreparing to unpack .../libtsan0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libtsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libubsan0:amd64.\nPreparing to unpack .../libubsan0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libubsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libcilkrts5:amd64.\nPreparing to unpack .../libcilkrts5_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libcilkrts5:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libmpx0:amd64.\nPreparing to unpack .../libmpx0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libmpx0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libquadmath0:amd64.\nPreparing to unpack .../libquadmath0_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libquadmath0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package libgcc-5-dev:amd64.\nPreparing to unpack .../libgcc-5-dev_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libgcc-5-dev:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package gcc-5.\nPreparing to unpack .../gcc-5_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking gcc-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package gcc.\nPreparing to unpack .../gcc_4%3a5.3.1-1ubuntu1_amd64.deb ...\nUnpacking gcc <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nSelecting previously unselected package libstdc++-5-dev:amd64.\nPreparing to unpack .../libstdc++-5-dev_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking libstdc++-5-dev:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package g++-5.\nPreparing to unpack .../g++-5_5.4.0-6ubuntu1~16.04.4_amd64.deb ...\nUnpacking g++-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSelecting previously unselected package g++.\nPreparing to unpack .../g++_4%3a5.3.1-1ubuntu1_amd64.deb ...\nUnpacking g++ <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nSelecting previously unselected package make.\nPreparing to unpack .../archives/make_4.1-6_amd64.deb ...\nUnpacking make <span class=\"o\">(</span><span class=\"m\">4</span>.1-6<span class=\"o\">)</span> ...\nSelecting previously unselected package libdpkg-perl.\nPreparing to unpack .../libdpkg-perl_1.18.4ubuntu1.2_all.deb ...\nUnpacking libdpkg-perl <span class=\"o\">(</span><span class=\"m\">1</span>.18.4ubuntu1.2<span class=\"o\">)</span> ...\nSelecting previously unselected package xz-utils.\nPreparing to unpack .../xz-utils_5.1.1alpha+20120614-2ubuntu2_amd64.deb ...\nUnpacking xz-utils <span class=\"o\">(</span><span class=\"m\">5</span>.1.1alpha+20120614-2ubuntu2<span class=\"o\">)</span> ...\nSelecting previously unselected package patch.\nPreparing to unpack .../patch_2.7.5-1_amd64.deb ...\nUnpacking patch <span class=\"o\">(</span><span class=\"m\">2</span>.7.5-1<span class=\"o\">)</span> ...\nSelecting previously unselected package dpkg-dev.\nPreparing to unpack .../dpkg-dev_1.18.4ubuntu1.2_all.deb ...\nUnpacking dpkg-dev <span class=\"o\">(</span><span class=\"m\">1</span>.18.4ubuntu1.2<span class=\"o\">)</span> ...\nSelecting previously unselected package build-essential.\nPreparing to unpack .../build-essential_12.1ubuntu2_amd64.deb ...\nUnpacking build-essential <span class=\"o\">(</span><span class=\"m\">12</span>.1ubuntu2<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-misc-headers-8-0.\nPreparing to unpack .../cuda-misc-headers-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-misc-headers-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-core-8-0.\nPreparing to unpack .../cuda-core-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-core-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-driver-dev-8-0.\nPreparing to unpack .../cuda-driver-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-driver-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cudart-dev-8-0.\nPreparing to unpack .../cuda-cudart-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cudart-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-command-line-tools-8-0.\nPreparing to unpack .../cuda-command-line-tools-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-command-line-tools-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cublas-dev-8-0.\nPreparing to unpack .../cuda-cublas-dev-8-0_8.0.61.2-1_amd64.deb ...\nUnpacking cuda-cublas-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61.2-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cufft-dev-8-0.\nPreparing to unpack .../cuda-cufft-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cufft-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-curand-dev-8-0.\nPreparing to unpack .../cuda-curand-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-curand-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cusolver-dev-8-0.\nPreparing to unpack .../cuda-cusolver-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cusolver-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-cusparse-dev-8-0.\nPreparing to unpack .../cuda-cusparse-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-cusparse-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-npp-dev-8-0.\nPreparing to unpack .../cuda-npp-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-npp-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-nvgraph-dev-8-0.\nPreparing to unpack .../cuda-nvgraph-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-nvgraph-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-nvml-dev-8-0.\nPreparing to unpack .../cuda-nvml-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-nvml-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSelecting previously unselected package cuda-nvrtc-dev-8-0.\nPreparing to unpack .../cuda-nvrtc-dev-8-0_8.0.61-1_amd64.deb ...\nUnpacking cuda-nvrtc-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\nSetting up libgdbm3:amd64 <span class=\"o\">(</span><span class=\"m\">1</span>.8.3-13.1<span class=\"o\">)</span> ...\nSetting up perl-modules-5.22 <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nSetting up libperl5.22:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nSetting up perl <span class=\"o\">(</span><span class=\"m\">5</span>.22.1-9<span class=\"o\">)</span> ...\nupdate-alternatives: using /usr/bin/prename to provide /usr/bin/rename <span class=\"o\">(</span>rename<span class=\"o\">)</span> in auto mode\nSetting up libgmp10:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>:6.1.0+dfsg-2<span class=\"o\">)</span> ...\nSetting up libmpfr4:amd64 <span class=\"o\">(</span><span class=\"m\">3</span>.1.4-1<span class=\"o\">)</span> ...\nSetting up libmpc3:amd64 <span class=\"o\">(</span><span class=\"m\">1</span>.0.3-1<span class=\"o\">)</span> ...\nSetting up bzip2 <span class=\"o\">(</span><span class=\"m\">1</span>.0.6-8<span class=\"o\">)</span> ...\nSetting up binutils <span class=\"o\">(</span><span class=\"m\">2</span>.26.1-1ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libc-dev-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\nSetting up linux-libc-dev:amd64 <span class=\"o\">(</span><span class=\"m\">4</span>.4.0-93.116<span class=\"o\">)</span> ...\nSetting up libc6-dev:amd64 <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\nSetting up libisl15:amd64 <span class=\"o\">(</span><span class=\"m\">0</span>.16.1-1<span class=\"o\">)</span> ...\nSetting up cpp-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up cpp <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nSetting up libcc1-0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libgomp1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libitm1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libatomic1:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libasan2:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up liblsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libtsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libubsan0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libcilkrts5:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libmpx0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libquadmath0:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up libgcc-5-dev:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up gcc-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up gcc <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nSetting up libstdc++-5-dev:amd64 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up g++-5 <span class=\"o\">(</span><span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> ...\nSetting up g++ <span class=\"o\">(</span><span class=\"m\">4</span>:5.3.1-1ubuntu1<span class=\"o\">)</span> ...\nupdate-alternatives: using /usr/bin/g++ to provide /usr/bin/c++ <span class=\"o\">(</span>c++<span class=\"o\">)</span> in auto mode\nSetting up make <span class=\"o\">(</span><span class=\"m\">4</span>.1-6<span class=\"o\">)</span> ...\nSetting up libdpkg-perl <span class=\"o\">(</span><span class=\"m\">1</span>.18.4ubuntu1.2<span class=\"o\">)</span> ...\nSetting up xz-utils <span class=\"o\">(</span><span class=\"m\">5</span>.1.1alpha+20120614-2ubuntu2<span class=\"o\">)</span> ...\nupdate-alternatives: using /usr/bin/xz to provide /usr/bin/lzma <span class=\"o\">(</span>lzma<span class=\"o\">)</span> in auto mode\nSetting up patch <span class=\"o\">(</span><span class=\"m\">2</span>.7.5-1<span class=\"o\">)</span> ...\nSetting up dpkg-dev <span class=\"o\">(</span><span class=\"m\">1</span>.18.4ubuntu1.2<span class=\"o\">)</span> ...\nSetting up build-essential <span class=\"o\">(</span><span class=\"m\">12</span>.1ubuntu2<span class=\"o\">)</span> ...\nSetting up cuda-misc-headers-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-core-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-driver-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cudart-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-command-line-tools-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cublas-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61.2-1<span class=\"o\">)</span> ...\nSetting up cuda-cufft-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-curand-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cusolver-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-cusparse-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-npp-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-nvgraph-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-nvml-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nSetting up cuda-nvrtc-dev-8-0 <span class=\"o\">(</span><span class=\"m\">8</span>.0.61-1<span class=\"o\">)</span> ...\nProcessing triggers <span class=\"k\">for</span> libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> ...\n ---&gt; 6e69311d73f8\nRemoving intermediate container 72774b2842f3\nStep <span class=\"m\">4</span>/4 : ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs:<span class=\"si\">${</span><span class=\"nv\">LIBRARY_PATH</span><span class=\"si\">}</span>\n ---&gt; Running in 06ca54c2f35f\n ---&gt; ab0c5b19d347\nRemoving intermediate container 06ca54c2f35f\nSuccessfully built ab0c5b19d347\nSuccessfully tagged gemfield/ubuntu-devel-cuda:8.0\ngemfield@ai:~/AI/game2$ </code></pre></div><p><b>3，运行docker images命令来查看生成的image：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ docker images\nREPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE\ngemfield/ubuntu-devel-cuda     <span class=\"m\">8</span>.0                 ab0c5b19d347        <span class=\"m\">31</span> minutes ago      <span class=\"m\">1</span>.68GB\ngemfield/ubuntu-runtime-cuda   <span class=\"m\">8</span>.0                 d0b82ef8f4d2        <span class=\"m\">2</span> hours ago         780MB\nnvidia/cuda                    latest              f1193af0e70e        <span class=\"m\">2</span> weeks ago         <span class=\"m\">1</span>.68GB\nubuntu                         <span class=\"m\">16</span>.04               ccc7a11d65b1        <span class=\"m\">2</span> weeks ago         120MB\nhello-world                    latest              1815c82652c0        <span class=\"m\">2</span> months ago        <span class=\"m\">1</span>.84kB\ngemfield@ai:~$ \n</code></pre></div><h2><b>第六步：上传这两个CUDA Docker image到Docker Hub：</b></h2><p><b>1，到Docker Hub官网上注册帐号并邮件激活</b></p><p><a href=\"https://link.zhihu.com/?target=https%3A//hub.docker.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">hub.docker.com/</span><span class=\"invisible\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，回到Konsole界面，登陆：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ docker login -u gemfield -p gemfield_password\nLogin Succeeded\ngemfield@ai:~$ </code></pre></div><p><b>3, 上传到Docker Hub：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ docker push gemfield/ubuntu-runtime-cuda\nThe push refers to a repository <span class=\"o\">[</span>docker.io/gemfield/ubuntu-runtime-cuda<span class=\"o\">]</span>\nb7fd0c9a3353: Pushed \n919ae00566cb: Pushed \n0bef4fc85d27: Pushing <span class=\"o\">[=========</span>&gt;                                         <span class=\"o\">]</span>  <span class=\"m\">131</span>.4MB/660MB\nc31ab6414389: Pushed \na09947e71dc0: Mounted from library/ubuntu \n9c42c2077cde: Mounted from library/ubuntu \n625c7a2a783b: Mounted from library/ubuntu \n25e0901a71b8: Mounted from library/ubuntu \n8aa4fcad5eeb: Mounted from library/ubuntu \n......\n                                          </code></pre></div><h2><b>第七步：使用这些Docker image</b></h2><p><b>1，为什么不使用原生的docker命令？</b></p><p>上面的NVIDIA CUDA image，不论是runtime版本的还是devel版本的（开发版本），都需要使用nvidia-docker命令来替代原生的docker命令来运行它们。为什么这么做？当然是和使用GPU设备有关了。Gemfield从官方文档(<a href=\"https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/nvidia-docker/wiki/Motivation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NVIDIA/nvidia-docker</a>)摘取了下面这段：</p><div class=\"highlight\"><pre><code class=\"language-text\">Docker® containers are often used to seamlessly deploy CPU-based applications on multiple machines. \nWith this use case, containers are both hardware-agnostic and platform-agnostic. \nThis is obviously not the case when using NVIDIA GPUs since it is using specialized hardware \nand it requires the installation of the NVIDIA driver. \n\nAs a result, Docker Engine does not natively support NVIDIA GPUs with containers.\n\nTo solve this problem, one of the early solutions that emerged was to fully reinstall the NVIDIA driver \ninside the container and then pass the character devices corresponding to the NVIDIA GPUs (e.g. /dev/nvidia0) \nwhen starting the container. However, this solution was brittle: \nthe version of the host driver had to exactly match driver version installed in the container. \nThe Docker images could not be shared and had to be built locally on each machine, \ndefeating one of the main advantages of Docker.\n\nTo make the Docker images portable while still leveraging NVIDIA GPUs, \nthe solution used by nvidia-docker is to make the images agnostic of the NVIDIA driver. \nThe required character devices and driver files are mounted when starting the container on the target machine.</code></pre></div><p>重点是可移植性啊。</p><p><b>2，宿主机上安装nvidia-docker</b></p><p>你可能需要设置代理：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ wget -P /tmp https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb\n--2017-08-31 <span class=\"m\">18</span>:08:05--  https://github.com/NVIDIA/nvidia-docker/releases/download/v1.0.1/nvidia-docker_1.0.1-1_amd64.deb\nnvidia-docker_1.0.1-1_amd64.deb         <span class=\"m\">100</span>%<span class=\"o\">[=============================================================================</span>&gt;<span class=\"o\">]</span>   <span class=\"m\">2</span>.16M   146KB/s    in 15s     \n\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">18</span>:08:24 <span class=\"o\">(</span><span class=\"m\">144</span> KB/s<span class=\"o\">)</span> - 已保存 “/tmp/nvidia-docker_1.0.1-1_amd64.deb” <span class=\"o\">[</span><span class=\"m\">2266050</span>/2266050<span class=\"o\">])</span>\n\ngemfield@ai:~$ sudo dpkg -i /tmp/nvidia-docker*.deb\n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> gemfield 的密码： \n正在选中未选择的软件包 nvidia-docker。\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../nvidia-docker_1.0.1-1_amd64.deb  ...\n正在解包 nvidia-docker <span class=\"o\">(</span><span class=\"m\">1</span>.0.1-1<span class=\"o\">)</span> ...\n正在设置 nvidia-docker <span class=\"o\">(</span><span class=\"m\">1</span>.0.1-1<span class=\"o\">)</span> ...\nConfiguring user\nSetting up permissions\n正在处理用于 ureadahead <span class=\"o\">(</span><span class=\"m\">0</span>.100.0-19<span class=\"o\">)</span> 的触发器 ...\nureadahead will be reprofiled on next reboot\ngemfield@ai:~$</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>注意：在ubuntu16.10、17.04、以及之后的Ubuntu版本中，安装Nvidia-docker这个deb包会报包依赖错误。</p><p>讨论帖（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/nvidia-docker/issues/234\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cannot install on Ubuntu 16.10 Yakkety - dependency issues · Issue #234 · NVIDIA/nvidia-docker</a>）对这个问题进行了讨论；该帖的讨论中也提供了一个workaround: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/nvidia-docker/files/818401/nvidia-docker_1.0.1-yakkety_amd64.deb.zip\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/NVIDIA/nvidi</span><span class=\"invisible\">a-docker/files/818401/nvidia-docker_1.0.1-yakkety_amd64.deb.zip</span><span class=\"ellipsis\"></span></a> </p><p><b>3，用nvidia-docker 运行docker image:</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ nvidia-docker run -ti gemfield/ubuntu-devel-cuda:8.0 bash\nroot@9f0f7c786280:/# nvidia-smi\nThu Aug <span class=\"m\">31</span> <span class=\"m\">10</span>:40:39 <span class=\"m\">2017</span>       \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> NVIDIA-SMI <span class=\"m\">375</span>.66                 Driver Version: <span class=\"m\">375</span>.66                    <span class=\"p\">|</span>\n<span class=\"p\">|</span>-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span> GPU  Name        Persistence-M<span class=\"p\">|</span> Bus-Id        Disp.A <span class=\"p\">|</span> Volatile Uncorr. ECC <span class=\"p\">|</span>\n<span class=\"p\">|</span> Fan  Temp  Perf  Pwr:Usage/Cap<span class=\"p\">|</span>         Memory-Usage <span class=\"p\">|</span> GPU-Util  Compute M. <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">===============================</span>+<span class=\"o\">======================</span>+<span class=\"o\">======================</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>   <span class=\"m\">0</span>  GeForce GTX <span class=\"m\">1050</span>    Off  <span class=\"p\">|</span> <span class=\"m\">0000</span>:01:00.0     Off <span class=\"p\">|</span>                  N/A <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   41C    P0    N/A /  N/A <span class=\"p\">|</span>    385MiB /  4041MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> Processes:                                                       GPU Memory <span class=\"p\">|</span>\n<span class=\"p\">|</span>  GPU       PID  Type  Process name                               Usage      <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">=============================================================================</span><span class=\"p\">|</span>                                                                               \n+-----------------------------------------------------------------------------+\nroot@9f0f7c786280:/# </code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>4，用原生docker 运行docker image:</b></p><p>当然就无法使用NVIDIA GPU了。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ docker run -ti gemfield/ubuntu-devel-cuda:8.0 bash\nroot@06b6827e4570:/# nvidia-smi\nbash: nvidia-smi: <span class=\"nb\">command</span> not found\nroot@06b6827e4570:/# </code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "CUDA", 
                    "tagLink": "https://api.zhihu.com/topics/19597236"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28786117", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 4, 
            "title": "Ubuntu 16.04上安装Nvidia GPU驱动 + CUDA + cuDNN", 
            "content": "<h2><b>背景</b></h2><p>本文关于如何在Ubuntu16.04上安装Nvidia GPU驱动。如果要使用docker容器来起AI服务的话，则无需安装CUDA和cuDNN（这是推荐的方式）；而如果需要在宿主机上直接启动AI服务，则还需要安装CUDA和cuDNN（这是不推荐的方式）。</p><p>Gemfield使用的操作系统是Kubuntu 16.04.02，而Kubuntu 16.04是一个LTS版本，所以后续还会有新的patch release。</p><p>告警1：有的机器需要禁止掉bios的seurity功能才能重新启动，否则重启进入不了系统（尚不知道原因）。</p><h2><b>安装Nvidia GPU驱动</b></h2><p>无论是否使用Docker化的方式，都必须进行这一步。有两种方式：离线安装和在线安装：</p><p><b>1，在线安装（推荐）</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@localhost:~$ sudo apt install nvidia-384-dev nvidia-modprobe</code></pre></div><p><b>2，离线安装（不推荐）</b></p><p>安装Nvidia GPU 驱动，从其官网上下载安装程序（一段shell），我下载的时候是NVIDIA-Linux-x86_64-381.22.run，下载后运行。</p><p><b>一个错误分享</b></p><p>今天按照直接apt的方式直接在线安装nvidia-384-dev，出现错误：NVIDIA-SMI has failed because it couldn&#39;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running. </p><p>本质错误其实是nvidia驱动没有被内核加载：modprobe: ERROR: could not insert &#39;nvidia_384&#39;: Unknown symbol in module, or unknown parameter (see dmesg)。</p><p>命令行安装完成后看看驱动是否已经到位，下面这种情况就没有nvidia.ko：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:/lib/modules# find . -name &#34;*.ko&#34; | grep -i nvidia\n./4.4.0-127-generic/kernel/drivers/video/fbdev/nvidia/nvidiafb.ko\n./4.4.0-127-generic/kernel/drivers/net/ethernet/nvidia/forcedeth.ko</code></pre></div><p>那是因为apt的时候已经提示了：没有安装kernel source!</p><div class=\"highlight\"><pre><code class=\"language-text\">Module build for the currently running kernel was skipped since the\nkernel source for this kernel does not seem to be installed.</code></pre></div><p>安装kernel source的方法：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo apt-get install linux-source\nsudo apt-get install linux-headers-4.4.0-127-generic\n其中：4.4.0-127-generic来自于uname -r的输出</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>安装了kernel source后再apt install nvidia-384，然后模块就有了：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:/lib/modules# find . -name &#34;*.ko&#34; | grep -i nvidia\n./4.4.0-127-generic/kernel/drivers/video/fbdev/nvidia/nvidiafb.ko\n./4.4.0-127-generic/kernel/drivers/net/ethernet/nvidia/forcedeth.ko\n./4.4.0-127-generic/updates/dkms/nvidia_384_drm.ko\n./4.4.0-127-generic/updates/dkms/nvidia_384.ko\n./4.4.0-127-generic/updates/dkms/nvidia_384_uvm.ko\n./4.4.0-127-generic/updates/dkms/nvidia_384_modeset.ko</code></pre></div><h2><b>安装CUDA（Docker化的话不需要）</b></h2><p>安装CUDA开发库，从官网上选择对应的操作系统和安装方式，我是通过deb的网络方式安装的，先下载了20K的cuda-repo-ubuntu1604_8.0.61-1_amd64.deb包，安装这个包来添加Nvidia的源，然后再apt通过网络大概下载了一个多G：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads$ sudo dpkg -i cuda-repo-ubuntu1604_8.0.61-1_amd64.deb </code></pre></div><h2><b>安装cuDNN开发库（Docker化的话不需要）</b></h2><p>还是去官网上下载一个压缩包，解压放到相应的目录里即可：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/Downloads$ ls cuda-repo-ubuntu1604_8.0.61-1_amd64.deb  \ncudnn-8.0-linux-x64-v5.1.tgz  NVIDIA-Linux-x86_64-381.22.run \ngemfield@ai:~/Downloads$ tar zxvf cudnn-8.0-linux-x64-v5.1.tgz \ncuda/include/cudnn.h\ncuda/lib64/libcudnn.so\ncuda/lib64/libcudnn.so.5\ncuda/lib64/libcudnn.so.5.1.10\ncuda/lib64/libcudnn_static.a\n\ngemfield@ai:~/Downloads/cuda$ sudo cp ./include/cudnn.h /usr/local/cuda/include/\ngemfield@ai:~/Downloads/cuda$ ls -l lib64/libcudnn*\nlrwxrwxrwx <span class=\"m\">1</span> gemfield gemfield       <span class=\"m\">13</span> 11月  <span class=\"m\">7</span>  <span class=\"m\">2016</span> lib64/libcudnn.so -&gt; libcudnn.so.5\nlrwxrwxrwx <span class=\"m\">1</span> gemfield gemfield       <span class=\"m\">18</span> 11月  <span class=\"m\">7</span>  <span class=\"m\">2016</span> lib64/libcudnn.so.5 -&gt; libcudnn.so.5.1.10\n-rwxr-xr-x <span class=\"m\">1</span> gemfield gemfield <span class=\"m\">84163560</span> 11月  <span class=\"m\">7</span>  <span class=\"m\">2016</span> lib64/libcudnn.so.5.1.10                                                                                                               \n-rw-r--r-- <span class=\"m\">1</span> gemfield gemfield <span class=\"m\">70364814</span> 11月  <span class=\"m\">7</span>  <span class=\"m\">2016</span> lib64/libcudnn_static.a\n                                                                                                               \ngemfield@ai:~/Downloads/cuda$ sudo cp lib64/libcudnn.so.5.1.10 /usr/local/cuda/lib64/                                                                                                        \ngemfield@ai:~/Downloads/cuda$ sudo cp lib64/libcudnn_static.a /usr/local/cuda/lib64/\ngemfield@ai:/usr/local/cuda/lib64$ sudo ln -s libcudnn.so.5.1.10 libcudnn.so.5\ngemfield@ai:/usr/local/cuda/lib64$ sudo ln -s libcudnn.so.5 libcudnn.so\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>如果使用的是Docker化的方式，则无需安装CUDA和cuDNN，可以参考<a href=\"https://zhuanlan.zhihu.com/p/37519492\" class=\"internal\">Gemfield：使用nvidia-docker2</a> 来使用Docker。</p><p>好了，至此，Nvidia GPU 驱动 + CUDN + cuDNN 安装完毕，好像听说重启的时候驱动冲突什么的会导致系统重启失败。好怕怕啊，我现在在重启之前先把这篇文章发表出来，发表后我就要重启了，有可能就看不到这篇文章了。</p><h2><b>=======后记=============</b></h2><p><b>今天在一台新的机器上重新安装的kubuntu 17.04 和Nvidia驱动，结果驱动安装的时候报错：The distribution-provided pre-install script failed! 下面是Log：（如果你忽视这个错误继续强行安装的话，系统下次重启后是不会加载新的nvidia驱动的）</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@civilnet:~/Downloads$ cat /var/log/nvidia-installer.log\nnvidia-installer log file <span class=\"s1\">&#39;/var/log/nvidia-installer.log&#39;</span>\ncreation time: Fri Oct <span class=\"m\">20</span> <span class=\"m\">10</span>:37:18 <span class=\"m\">2017</span>\ninstaller version: <span class=\"m\">384</span>.90\n\nPATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n\nnvidia-installer <span class=\"nb\">command</span> line:\n    ./nvidia-installer\n\nUnable to load: nvidia-installer ncurses v6 user interface\n\nUsing: nvidia-installer ncurses user interface\n-&gt; Detected <span class=\"m\">12</span> CPUs online<span class=\"p\">;</span> setting concurrency level to <span class=\"m\">12</span>.\n-&gt; License accepted.\n-&gt; Installing NVIDIA driver version <span class=\"m\">384</span>.90.\n-&gt; There appears to already be a driver installed on your system <span class=\"o\">(</span>version: <span class=\"m\">384</span>.90<span class=\"o\">)</span>.  As part of installing this driver <span class=\"o\">(</span>version: <span class=\"m\">384</span>.90<span class=\"o\">)</span>, the existing driver will be uninstalled.  Are you sure you want to <span class=\"k\">continue</span>? <span class=\"o\">(</span>Answer: Continue installation<span class=\"o\">)</span>\n-&gt; Running distribution scripts\n   executing: <span class=\"s1\">&#39;/usr/lib/nvidia/pre-install&#39;</span>...\n-&gt; <span class=\"k\">done</span>.\n-&gt; The distribution-provided pre-install script failed!  Are you sure you want to <span class=\"k\">continue</span>? <span class=\"o\">(</span>Answer: Abort installation<span class=\"o\">)</span>\nERROR: Installation has failed.  Please see the file <span class=\"s1\">&#39;/var/log/nvidia-installer.log&#39;</span> <span class=\"k\">for</span> details.  You may find suggestions on fixing installation problems in the README available on the Linux driver download page at www.nvidia.com.</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>原因是Linux kernel已经加载了nouveau驱动了：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@civilnet:~/Downloads$ lsmod <span class=\"p\">|</span>grep nouv\nnouveau              <span class=\"m\">1601536</span>  <span class=\"m\">3</span>\nmxm_wmi                <span class=\"m\">16384</span>  <span class=\"m\">1</span> nouveau\nvideo                  <span class=\"m\">40960</span>  <span class=\"m\">1</span> nouveau\ni2c_algo_bit           <span class=\"m\">16384</span>  <span class=\"m\">1</span> nouveau\nttm                    <span class=\"m\">98304</span>  <span class=\"m\">1</span> nouveau\ndrm_kms_helper        <span class=\"m\">151552</span>  <span class=\"m\">1</span> nouveau\ndrm                   <span class=\"m\">352256</span>  <span class=\"m\">6</span> nouveau,ttm,drm_kms_helper\nwmi                    <span class=\"m\">16384</span>  <span class=\"m\">2</span> mxm_wmi,nouveau\ngemfield@civilnet:~/Downloads$</code></pre></div><p><b>得需要把安装后的Kubuntu里自带的nouveau驱动禁止掉，如下所示：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">vi /etc/modprobe.d/blacklist-nouveau.conf</code></pre></div><p>写上下面两行：</p><div class=\"highlight\"><pre><code class=\"language-bash\">blacklist nouveau\noptions nouveau <span class=\"nv\">modeset</span><span class=\"o\">=</span><span class=\"m\">0</span></code></pre></div><p>重新产生kernel initramfs:</p><div class=\"highlight\"><pre><code class=\"language-bash\">sudo update-initramfs -u</code></pre></div><p>最后再重启这个系统：</p><div class=\"highlight\"><pre><code class=\"language-text\">sudo reboot</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p><b>=======后记2=============</b></p><p><b>今天运行nvidia-smi的时候，莫名就出现了如下错误：</b>Failed to initialize NVML: Driver/library version mismatch。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~$  nvidia-smi\nFailed to initialize NVML: Driver/library version mismatch</code></pre></div><p>原因是ubuntu上的nvidia驱动又偷偷更新了：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ThinkPad-X1C:~$ cat /var/log/dpkg.log <span class=\"p\">|</span> grep nvidia-384\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:23 upgrade nvidia-384:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:23 status half-configured nvidia-384:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:26 status unpacked nvidia-384:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:26 status half-installed nvidia-384:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:39 status half-installed nvidia-384:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:39 status unpacked nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:39 status unpacked nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:41 upgrade nvidia-384-dev:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:41 status half-configured nvidia-384-dev:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:41 status unpacked nvidia-384-dev:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:41 status half-installed nvidia-384-dev:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:44 status half-installed nvidia-384-dev:amd64 <span class=\"m\">384</span>.90-0ubuntu0.17.04.2\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:44 status unpacked nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:44 status unpacked nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:45 configure nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1 &lt;无&gt;\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:45 status unpacked nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:45 status unpacked nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:45 status half-configured nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:19:59 status installed nvidia-384:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:20:00 configure nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1 &lt;无&gt;\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:20:00 status unpacked nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:20:00 status half-configured nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1\n<span class=\"m\">2018</span>-01-10 <span class=\"m\">06</span>:20:00 status installed nvidia-384-dev:amd64 <span class=\"m\">384</span>.111-0ubuntu0.17.04.1</code></pre></div><p><b>怎么解决呢？重启。</b></p><p><b>怎么禁止掉ubuntu的自动更新呢？</b></p><p>sudo vi /etc/apt/apt.conf.d/50unattended-upgrades</p><p>然后把下面的这一段注释掉：</p><div class=\"highlight\"><pre><code class=\"language-bash\">Unattended-Upgrade::Allowed-Origins <span class=\"o\">{</span>\n        //<span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span><span class=\"p\">;</span>\n        //<span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">-security&#34;</span><span class=\"p\">;</span>\n        // Extended Security Maintenance<span class=\"p\">;</span> doesn<span class=\"err\">&#39;</span>t necessarily exist <span class=\"k\">for</span>\n        // every release and this system may not have it installed, but <span class=\"k\">if</span>\n        // available, the policy <span class=\"k\">for</span> updates is such that unattended-upgrades\n        // should also install from here by default.\n        //<span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">ESM:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">&#34;</span><span class=\"p\">;</span>\n//      <span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">-updates&#34;</span><span class=\"p\">;</span>\n//      <span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">-proposed&#34;</span><span class=\"p\">;</span>\n//      <span class=\"s2\">&#34;</span><span class=\"si\">${</span><span class=\"nv\">distro_id</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">${</span><span class=\"nv\">distro_codename</span><span class=\"si\">}</span><span class=\"s2\">-backports&#34;</span><span class=\"p\">;</span>\n<span class=\"o\">}</span><span class=\"p\">;</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "图形处理器（GPU）", 
                    "tagLink": "https://api.zhihu.com/topics/19570894"
                }, 
                {
                    "tag": "CUDA", 
                    "tagLink": "https://api.zhihu.com/topics/19597236"
                }, 
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28954367", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 11, 
            "title": "CUDA driver version is insufficient for CUDA runtime version 的解决方案", 
            "content": "<p>今天照常打开我的Kde Ubuntu 16.04.03 LTS 操作系统，然后运行我的Caffe程序，程序不正常了：程序检测不到GPU的number！！</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>第一步：用NVIDIA GPU的deviceQuery检测一下：</b></h2><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ./deviceQuery \n./deviceQuery Starting...\n\n CUDA Device Query <span class=\"o\">(</span>Runtime API<span class=\"o\">)</span> version <span class=\"o\">(</span>CUDART static linking<span class=\"o\">)</span>\n\ncudaGetDeviceCount returned <span class=\"m\">35</span>\n-&gt; CUDA driver version is insufficient <span class=\"k\">for</span> CUDA runtime version\n<span class=\"nv\">Result</span> <span class=\"o\">=</span> FAIL\ngemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$</code></pre></div><p>看来确实出问题了。</p><h2><b>第二步：Google解决方案：</b></h2><p>漫无目的的在google的指引下搜寻一个一个的解决方案，发现都不行。不过也试了试一些有趣的命令，也就是下面的命令都是在此刻GPU程序不能正常运行的情况下执行的。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/demo$ nvidia-smi\nThu Aug <span class=\"m\">31</span> <span class=\"m\">10</span>:24:44 <span class=\"m\">2017</span>       \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> NVIDIA-SMI <span class=\"m\">375</span>.66                 Driver Version: <span class=\"m\">375</span>.66                    <span class=\"p\">|</span>\n<span class=\"p\">|</span>-------------------------------+----------------------+----------------------+\n<span class=\"p\">|</span> GPU  Name        Persistence-M<span class=\"p\">|</span> Bus-Id        Disp.A <span class=\"p\">|</span> Volatile Uncorr. ECC <span class=\"p\">|</span>\n<span class=\"p\">|</span> Fan  Temp  Perf  Pwr:Usage/Cap<span class=\"p\">|</span>         Memory-Usage <span class=\"p\">|</span> GPU-Util  Compute M. <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">===============================</span>+<span class=\"o\">======================</span>+<span class=\"o\">======================</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>   <span class=\"m\">0</span>  GeForce GTX <span class=\"m\">1050</span>    Off  <span class=\"p\">|</span> <span class=\"m\">0000</span>:01:00.0     Off <span class=\"p\">|</span>                  N/A <span class=\"p\">|</span>\n<span class=\"p\">|</span> N/A   39C    P0    N/A /  N/A <span class=\"p\">|</span>    413MiB /  4041MiB <span class=\"p\">|</span>      <span class=\"m\">0</span>%      Default <span class=\"p\">|</span>\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n<span class=\"p\">|</span> Processes:                                                       GPU Memory <span class=\"p\">|</span>\n<span class=\"p\">|</span>  GPU       PID  Type  Process name                               Usage      <span class=\"p\">|</span>\n<span class=\"p\">|</span><span class=\"o\">=============================================================================</span><span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">1486</span>    G   /usr/lib/xorg/Xorg                             228MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">2241</span>    G   kwin_x11                                        21MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">2253</span>    G   /usr/bin/krunner                                 9MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">2257</span>    G   /usr/bin/plasmashell                            66MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">2289</span>    G   fcitx-qimpanel                                   7MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">2641</span>    G   /usr/lib/firefox/firefox                         1MiB <span class=\"p\">|</span>\n<span class=\"p\">|</span>    <span class=\"m\">0</span>      <span class=\"m\">3038</span>    G   ...el-token<span class=\"o\">=</span>BACFFC474EE8C0E8F21E72B32DD7BF37    78MiB <span class=\"p\">|</span>\n+-----------------------------------------------------------------------------+\ngemfield@ai:~/demo$</code></pre></div><p>下面命令输出的375.66很重要啊！</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$ nvidia-settings -q NvidiaDriverVersion\n\n  Attribute <span class=\"s1\">&#39;NvidiaDriverVersion&#39;</span> <span class=\"o\">(</span>ai:0.0<span class=\"o\">)</span>: <span class=\"m\">375</span>.66\n  Attribute <span class=\"s1\">&#39;NvidiaDriverVersion&#39;</span> <span class=\"o\">(</span>ai:0<span class=\"o\">[</span>gpu:0<span class=\"o\">])</span>: <span class=\"m\">375</span>.66\n\ngemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$</code></pre></div><p>下面命令又出现了375.66啊</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ cat /proc/driver/nvidia/version \nNVRM version: NVIDIA UNIX x86_64 Kernel Module  <span class=\"m\">375</span>.66  Mon May  <span class=\"m\">1</span> <span class=\"m\">15</span>:29:16 PDT <span class=\"m\">2017</span>\nGCC version:  gcc version <span class=\"m\">5</span>.4.0 <span class=\"m\">20160609</span> <span class=\"o\">(</span>Ubuntu <span class=\"m\">5</span>.4.0-6ubuntu1~16.04.4<span class=\"o\">)</span> \ngemfield@ai:~$</code></pre></div><p>下面的命令列出已经加载的nvidia驱动</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~$ lsmod <span class=\"p\">|</span> grep -i nvidia\nnvidia_uvm            <span class=\"m\">647168</span>  <span class=\"m\">0</span>\nnvidia_drm             <span class=\"m\">45056</span>  <span class=\"m\">2</span>\nnvidia_modeset        <span class=\"m\">790528</span>  <span class=\"m\">8</span> nvidia_drm\nnvidia              <span class=\"m\">12304384</span>  <span class=\"m\">160</span> nvidia_modeset,nvidia_uvm\ndrm_kms_helper        <span class=\"m\">151552</span>  <span class=\"m\">2</span> i915,nvidia_drm\ndrm                   <span class=\"m\">352256</span>  <span class=\"m\">6</span> i915,nvidia_drm,drm_kms_helper\ngemfield@ai:~$ </code></pre></div><p>下面的命令列出正在使用中的intel和nvidia驱动</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/demo$ lspci -v <span class=\"p\">|</span>grep -B <span class=\"m\">10</span> i915\n\n<span class=\"m\">00</span>:02.0 VGA compatible controller: Intel Corporation Device 591b <span class=\"o\">(</span>rev <span class=\"m\">04</span><span class=\"o\">)</span> <span class=\"o\">(</span>prog-if <span class=\"m\">00</span> <span class=\"o\">[</span>VGA controller<span class=\"o\">])</span>\n        DeviceName:  Onboard IGD\n        Subsystem: Dell Device 07e1\n        Flags: bus master, fast devsel, latency <span class=\"m\">0</span>, IRQ <span class=\"m\">320</span>\n        Memory at dd000000 <span class=\"o\">(</span><span class=\"m\">64</span>-bit, non-prefetchable<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>16M<span class=\"o\">]</span>\n        Memory at b0000000 <span class=\"o\">(</span><span class=\"m\">64</span>-bit, prefetchable<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>256M<span class=\"o\">]</span>\n        I/O ports at f000 <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span><span class=\"m\">64</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span>virtual<span class=\"o\">]</span> Expansion ROM at 000c0000 <span class=\"o\">[</span>disabled<span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>128K<span class=\"o\">]</span>\n        Capabilities: &lt;access denied&gt;\n        Kernel driver in use: i915\n        Kernel modules: i915\ngemfield@ai:~/demo$\n\ngemfield@ai:~/demo$ lspci -v <span class=\"p\">|</span>grep -B <span class=\"m\">10</span> nvidia\n\n<span class=\"m\">01</span>:00.0 3D controller: NVIDIA Corporation Device 1c8d <span class=\"o\">(</span>rev a1<span class=\"o\">)</span>\n        Subsystem: Dell Device 07e1\n        Flags: bus master, fast devsel, latency <span class=\"m\">0</span>, IRQ <span class=\"m\">324</span>\n        Memory at de000000 <span class=\"o\">(</span><span class=\"m\">32</span>-bit, non-prefetchable<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>16M<span class=\"o\">]</span>\n        Memory at c0000000 <span class=\"o\">(</span><span class=\"m\">64</span>-bit, prefetchable<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>256M<span class=\"o\">]</span>\n        Memory at d0000000 <span class=\"o\">(</span><span class=\"m\">64</span>-bit, prefetchable<span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>32M<span class=\"o\">]</span>\n        I/O ports at e000 <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span><span class=\"m\">128</span><span class=\"o\">]</span>\n        <span class=\"o\">[</span>virtual<span class=\"o\">]</span> Expansion ROM at df000000 <span class=\"o\">[</span>disabled<span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"nv\">size</span><span class=\"o\">=</span>512K<span class=\"o\">]</span>\n        Capabilities: &lt;access denied&gt;\n        Kernel driver in use: nvidia\n        Kernel modules: nvidiafb, nouveau, nvidia_375_drm, nvidia_375</code></pre></div><h2><b>第三步：再思考</b></h2><p>google无果，只能自己解决了。重新看了一下错误：</p><p>CUDA driver version is insufficient for CUDA runtime version</p><p>翻译一下：CUDA驱动版本不匹配CUDA运行时的版本！！！</p><p>那肯定是版本问题啊！！！</p><p>那Gemfield干了啥导致版本从本来好好的变成现在的不匹配？！！！</p><p><b>1，看看哪些最近和Nvidia相关的package版本被动过了</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/github$ grep <span class=\"s2\">&#34; upgrade &#34;</span> /var/log/dpkg.log <span class=\"p\">|</span>grep <span class=\"m\">375</span>\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:15:55 upgrade libcuda1-375:amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">375</span>.74-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:00 upgrade libxnvctrl0:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:30 upgrade nvidia-opencl-icd-375:amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">375</span>.74-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:31 upgrade nvidia-settings:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:32 upgrade nvidia-modprobe:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\ngemfield@ai:~/github$ </code></pre></div><p>果然，有5个package的版本都被升级过了。比如从375.66升级到了375.74。</p><p>蓦然想起，之前运行dist-upgrade的时候提示过一些东西的：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/github/openpose$ sudo apt-get dist-upgrade\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nCalculating upgrade... Done\nThe following packages were automatically installed and are no longer required:\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\nUse <span class=\"s1\">&#39;sudo apt autoremove&#39;</span> to remove them.\nThe following packages have been kept back:\n  cuda-drivers nvidia-375 nvidia-375-dev\n<span class=\"m\">0</span> upgraded, <span class=\"m\">0</span> newly installed, <span class=\"m\">0</span> to remove and <span class=\"m\">3</span> not upgraded.\ngemfield@ai:~/github/openpose$ </code></pre></div><p>下面这句话方法在抗议之前曾经发生过了什么：</p><p>The following packages have been kept back:<br/>  cuda-drivers nvidia-375 nvidia-375-dev</p><p>那就查看这3个包的相关版本信息：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/github/openpose$ apt-cache policy cuda-drivers\ncuda-drivers:\n  已安装：375.51-1\n  候选： <span class=\"m\">384</span>.66-1\n  版本列表：\n     <span class=\"m\">384</span>.66-1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n     <span class=\"m\">375</span>.74-1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n *** <span class=\"m\">375</span>.51-1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n        <span class=\"m\">100</span> /var/lib/dpkg/status\n     <span class=\"m\">375</span>.26-1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n     <span class=\"m\">367</span>.48-1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\ngemfield@ai:~/github/openpose$ apt-cache policy nvidia-375\nnvidia-375:\n  已安装：375.66-0ubuntu0.16.04.1\n  候选： <span class=\"m\">375</span>.74-0ubuntu1\n  版本列表：\n     <span class=\"m\">375</span>.74-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n *** <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://cn.archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages\n        <span class=\"m\">500</span> http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages\n        <span class=\"m\">100</span> /var/lib/dpkg/status\n     <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n     <span class=\"m\">375</span>.26-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\ngemfield@ai:~/github/openpose$ apt-cache policy nvidia-375-dev\nnvidia-375-dev:\n  已安装：375.66-0ubuntu0.16.04.1\n  候选： <span class=\"m\">375</span>.74-0ubuntu1\n  版本列表：\n     <span class=\"m\">375</span>.74-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n *** <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://cn.archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 Packages\n        <span class=\"m\">500</span> http://security.ubuntu.com/ubuntu xenial-security/restricted amd64 Packages\n        <span class=\"m\">100</span> /var/lib/dpkg/status\n     <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\n     <span class=\"m\">375</span>.26-0ubuntu1 <span class=\"m\">500</span>\n        <span class=\"m\">500</span> http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  Packages\ngemfield@ai:~/github/openpose$</code></pre></div><p>哈哈，这3个package的版本都是375.66，但是上面那5个包的版本却从375.66升级到了其它版本！！！</p><p>那就恢复原貌！</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，降级这些升级过的package</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/AI/dockerfiles/cuda/runtime$ sudo apt-get install libcuda1-375<span class=\"o\">=</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1\n<span class=\"o\">[</span>sudo<span class=\"o\">]</span> gemfield 的密码： \n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\n使用<span class=\"s1\">&#39;sudo apt autoremove&#39;</span>来卸载它<span class=\"o\">(</span>它们<span class=\"o\">)</span>。\n下列软件包将被【降级】：\n  libcuda1-375\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">0</span> 个软件包，降级了 <span class=\"m\">1</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">3</span> 个软件包未被升级。\n需要下载 <span class=\"m\">2</span>,728 kB 的归档。\n解压缩后会消耗 <span class=\"m\">0</span> B 的额外空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://cn.archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 libcuda1-375 amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"o\">[</span><span class=\"m\">2</span>,728 kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">2</span>,728 kB，耗时 5秒 <span class=\"o\">(</span><span class=\"m\">463</span> kB/s<span class=\"o\">)</span>      \ndpkg：警告：即将把 libcuda1-375 从 <span class=\"m\">375</span>.74-0ubuntu1 降级到 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../libcuda1-375_375.66-0ubuntu0.16.04.1_amd64.deb  ...\n正在将 libcuda1-375 <span class=\"o\">(</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1<span class=\"o\">)</span> 解包到 <span class=\"o\">(</span><span class=\"m\">375</span>.74-0ubuntu1<span class=\"o\">)</span> 上 ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\n正在设置 libcuda1-375 <span class=\"o\">(</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1<span class=\"o\">)</span> ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ sudo apt-get install <span class=\"nv\">libxnvctrl0</span><span class=\"o\">=</span><span class=\"m\">375</span>.51-0ubuntu1      \n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\n使用<span class=\"s1\">&#39;sudo apt autoremove&#39;</span>来卸载它<span class=\"o\">(</span>它们<span class=\"o\">)</span>。\n下列软件包将被【降级】：\n  libxnvctrl0\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">0</span> 个软件包，降级了 <span class=\"m\">1</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">4</span> 个软件包未被升级。\n需要下载 <span class=\"m\">19</span>.1 kB 的归档。\n解压缩后会消耗 <span class=\"m\">0</span> B 的额外空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  libxnvctrl0 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"o\">[</span><span class=\"m\">19</span>.1 kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">19</span>.1 kB，耗时 11秒 <span class=\"o\">(</span><span class=\"m\">1</span>,720 B/s<span class=\"o\">)</span>\ndpkg：警告：即将把 libxnvctrl0 从 <span class=\"m\">384</span>.66-0ubuntu1 降级到 <span class=\"m\">375</span>.51-0ubuntu1\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../libxnvctrl0_375.51-0ubuntu1_amd64.deb  ...\n正在将 libxnvctrl0 <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> 解包到 <span class=\"o\">(</span><span class=\"m\">384</span>.66-0ubuntu1<span class=\"o\">)</span> 上 ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\n正在设置 libxnvctrl0 <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ sudo apt-get install nvidia-opencl-icd-375<span class=\"o\">=</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1      \n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\n使用<span class=\"s1\">&#39;sudo apt autoremove&#39;</span>来卸载它<span class=\"o\">(</span>它们<span class=\"o\">)</span>。\n下列软件包将被【降级】：\n  nvidia-opencl-icd-375\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">0</span> 个软件包，降级了 <span class=\"m\">1</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">5</span> 个软件包未被升级。\n需要下载 <span class=\"m\">2</span>,919 kB 的归档。\n解压缩后会消耗 <span class=\"m\">0</span> B 的额外空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://cn.archive.ubuntu.com/ubuntu xenial-updates/restricted amd64 nvidia-opencl-icd-375 amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"o\">[</span><span class=\"m\">2</span>,919 kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">2</span>,919 kB，耗时 2秒 <span class=\"o\">(</span><span class=\"m\">1</span>,013 kB/s<span class=\"o\">)</span>             \ndpkg：警告：即将把 nvidia-opencl-icd-375 从 <span class=\"m\">375</span>.74-0ubuntu1 降级到 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../nvidia-opencl-icd-375_375.66-0ubuntu0.16.04.1_amd64.deb  ...\n正在将 nvidia-opencl-icd-375 <span class=\"o\">(</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1<span class=\"o\">)</span> 解包到 <span class=\"o\">(</span><span class=\"m\">375</span>.74-0ubuntu1<span class=\"o\">)</span> 上 ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\n正在设置 nvidia-opencl-icd-375 <span class=\"o\">(</span><span class=\"m\">375</span>.66-0ubuntu0.16.04.1<span class=\"o\">)</span> ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ sudo apt-get install nvidia-settings<span class=\"o\">=</span><span class=\"m\">375</span>.51-0ubuntu1\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\n使用<span class=\"s1\">&#39;sudo apt autoremove&#39;</span>来卸载它<span class=\"o\">(</span>它们<span class=\"o\">)</span>。\n下列软件包将被【降级】：\n  nvidia-settings\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">0</span> 个软件包，降级了 <span class=\"m\">1</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">6</span> 个软件包未被升级。\n需要下载 <span class=\"m\">876</span> kB 的归档。\n解压缩后将会空出 <span class=\"m\">46</span>.1 kB 的空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  nvidia-settings <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"o\">[</span><span class=\"m\">876</span> kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">876</span> kB，耗时 1秒 <span class=\"o\">(</span><span class=\"m\">557</span> kB/s<span class=\"o\">)</span>       \ndpkg：警告：即将把 nvidia-settings 从 <span class=\"m\">384</span>.66-0ubuntu1 降级到 <span class=\"m\">375</span>.51-0ubuntu1\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../nvidia-settings_375.51-0ubuntu1_amd64.deb  ...\n正在将 nvidia-settings <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> 解包到 <span class=\"o\">(</span><span class=\"m\">384</span>.66-0ubuntu1<span class=\"o\">)</span> 上 ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\n正在处理用于 man-db <span class=\"o\">(</span><span class=\"m\">2</span>.7.5-1<span class=\"o\">)</span> 的触发器 ...\n正在处理用于 mime-support <span class=\"o\">(</span><span class=\"m\">3</span>.59ubuntu1<span class=\"o\">)</span> 的触发器 ...\n正在设置 nvidia-settings <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> ...\n正在处理用于 libc-bin <span class=\"o\">(</span><span class=\"m\">2</span>.23-0ubuntu9<span class=\"o\">)</span> 的触发器 ...\n/sbin/ldconfig.real: /usr/lib/nvidia-375/libEGL.so.1 is not a symbolic link\n\n/sbin/ldconfig.real: /usr/lib32/nvidia-375/libEGL.so.1 is not a symbolic link\n\ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ \ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ \ngemfield@ai:~/AI/dockerfiles/cuda/runtime$ sudo apt-get install nvidia-modprobe<span class=\"o\">=</span><span class=\"m\">375</span>.51-0ubuntu1\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-4.8.0-36 linux-headers-4.8.0-36-generic linux-headers-4.8.0-58 linux-headers-4.8.0-58-generic linux-image-4.8.0-36-generic\n  linux-image-4.8.0-58-generic linux-image-extra-4.8.0-36-generic linux-image-extra-4.8.0-58-generic snap-confine\n使用<span class=\"s1\">&#39;sudo apt autoremove&#39;</span>来卸载它<span class=\"o\">(</span>它们<span class=\"o\">)</span>。\n下列软件包将被【降级】：\n  nvidia-modprobe\n升级了 <span class=\"m\">0</span> 个软件包，新安装了 <span class=\"m\">0</span> 个软件包，降级了 <span class=\"m\">1</span> 个软件包，要卸载 <span class=\"m\">0</span> 个软件包，有 <span class=\"m\">7</span> 个软件包未被升级。\n需要下载 <span class=\"m\">17</span>.1 kB 的归档。\n解压缩后会消耗 <span class=\"m\">0</span> B 的额外空间。\n您希望继续执行吗？ <span class=\"o\">[</span>Y/n<span class=\"o\">]</span> y\n获取:1 http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64  nvidia-modprobe <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"o\">[</span><span class=\"m\">17</span>.1 kB<span class=\"o\">]</span>\n已下载 <span class=\"m\">17</span>.1 kB，耗时 8秒 <span class=\"o\">(</span><span class=\"m\">2</span>,080 B/s<span class=\"o\">)</span>   \ndpkg：警告：即将把 nvidia-modprobe 从 <span class=\"m\">384</span>.66-0ubuntu1 降级到 <span class=\"m\">375</span>.51-0ubuntu1\n<span class=\"o\">(</span>正在读取数据库 ... 系统当前共安装有 <span class=\"m\">309273</span> 个文件和目录。<span class=\"o\">)</span>\n正准备解包 .../nvidia-modprobe_375.51-0ubuntu1_amd64.deb  ...\n正在将 nvidia-modprobe <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> 解包到 <span class=\"o\">(</span><span class=\"m\">384</span>.66-0ubuntu1<span class=\"o\">)</span> 上 ...\n正在处理用于 man-db <span class=\"o\">(</span><span class=\"m\">2</span>.7.5-1<span class=\"o\">)</span> 的触发器 ...\n正在设置 nvidia-modprobe <span class=\"o\">(</span><span class=\"m\">375</span>.51-0ubuntu1<span class=\"o\">)</span> ...\ngemfield@ai:~/AI/dockerfiles/cuda/runtime$</code></pre></div><p><b>3，降级这些升级过的package</b></p><p>用下面的命令确认降级是否成功：</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:~/github$ grep <span class=\"s2\">&#34; upgrade &#34;</span> /var/log/dpkg.log <span class=\"p\">|</span>grep <span class=\"m\">375</span>\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:15:55 upgrade libcuda1-375:amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">375</span>.74-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:00 upgrade libxnvctrl0:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:30 upgrade nvidia-opencl-icd-375:amd64 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1 <span class=\"m\">375</span>.74-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:31 upgrade nvidia-settings:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\n<span class=\"m\">2017</span>-08-30 <span class=\"m\">13</span>:16:32 upgrade nvidia-modprobe:amd64 <span class=\"m\">375</span>.51-0ubuntu1 <span class=\"m\">384</span>.66-0ubuntu1\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">17</span>:50:52 upgrade libcuda1-375:amd64 <span class=\"m\">375</span>.74-0ubuntu1 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">17</span>:51:48 upgrade libxnvctrl0:amd64 <span class=\"m\">384</span>.66-0ubuntu1 <span class=\"m\">375</span>.51-0ubuntu1\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">17</span>:52:15 upgrade nvidia-opencl-icd-375:amd64 <span class=\"m\">375</span>.74-0ubuntu1 <span class=\"m\">375</span>.66-0ubuntu0.16.04.1\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">17</span>:53:10 upgrade nvidia-settings:amd64 <span class=\"m\">384</span>.66-0ubuntu1 <span class=\"m\">375</span>.51-0ubuntu1\n<span class=\"m\">2017</span>-08-31 <span class=\"m\">17</span>:53:41 upgrade nvidia-modprobe:amd64 <span class=\"m\">384</span>.66-0ubuntu1 <span class=\"m\">375</span>.51-0ubuntu1\ngemfield@ai:~/github$</code></pre></div><p>可以5个upgrade操作都被逆转了回去。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>第四步：庆祝</b></h2><p><b>赶紧用NVIDIA的命令测试一下：</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$ ./deviceQuery \n./deviceQuery Starting...\n\n CUDA Device Query <span class=\"o\">(</span>Runtime API<span class=\"o\">)</span> version <span class=\"o\">(</span>CUDART static linking<span class=\"o\">)</span>\n\nDetected <span class=\"m\">1</span> CUDA Capable device<span class=\"o\">(</span>s<span class=\"o\">)</span>\n\nDevice <span class=\"m\">0</span>: <span class=\"s2\">&#34;GeForce GTX 1050&#34;</span>\n  CUDA Driver Version / Runtime Version          <span class=\"m\">8</span>.0 / <span class=\"m\">8</span>.0\n  CUDA Capability Major/Minor version number:    <span class=\"m\">6</span>.1\n  Total amount of global memory:                 <span class=\"m\">4041</span> MBytes <span class=\"o\">(</span><span class=\"m\">4237426688</span> bytes<span class=\"o\">)</span>\n  <span class=\"o\">(</span> <span class=\"m\">5</span><span class=\"o\">)</span> Multiprocessors, <span class=\"o\">(</span><span class=\"m\">128</span><span class=\"o\">)</span> CUDA Cores/MP:     <span class=\"m\">640</span> CUDA Cores\n  GPU Max Clock rate:                            <span class=\"m\">1493</span> MHz <span class=\"o\">(</span><span class=\"m\">1</span>.49 GHz<span class=\"o\">)</span>\n  Memory Clock rate:                             <span class=\"m\">3504</span> Mhz\n  Memory Bus Width:                              <span class=\"m\">128</span>-bit\n  L2 Cache Size:                                 <span class=\"m\">524288</span> bytes\n  Maximum Texture Dimension Size <span class=\"o\">(</span>x,y,z<span class=\"o\">)</span>         <span class=\"nv\">1D</span><span class=\"o\">=(</span><span class=\"m\">131072</span><span class=\"o\">)</span>, <span class=\"nv\">2D</span><span class=\"o\">=(</span><span class=\"m\">131072</span>, <span class=\"m\">65536</span><span class=\"o\">)</span>, <span class=\"nv\">3D</span><span class=\"o\">=(</span><span class=\"m\">16384</span>, <span class=\"m\">16384</span>, <span class=\"m\">16384</span><span class=\"o\">)</span>\n  Maximum Layered 1D Texture Size, <span class=\"o\">(</span>num<span class=\"o\">)</span> layers  <span class=\"nv\">1D</span><span class=\"o\">=(</span><span class=\"m\">32768</span><span class=\"o\">)</span>, <span class=\"m\">2048</span> layers\n  Maximum Layered 2D Texture Size, <span class=\"o\">(</span>num<span class=\"o\">)</span> layers  <span class=\"nv\">2D</span><span class=\"o\">=(</span><span class=\"m\">32768</span>, <span class=\"m\">32768</span><span class=\"o\">)</span>, <span class=\"m\">2048</span> layers\n  Total amount of constant memory:               <span class=\"m\">65536</span> bytes\n  Total amount of shared memory per block:       <span class=\"m\">49152</span> bytes\n  Total number of registers available per block: <span class=\"m\">65536</span>\n  Warp size:                                     <span class=\"m\">32</span>\n  Maximum number of threads per multiprocessor:  <span class=\"m\">2048</span>\n  Maximum number of threads per block:           <span class=\"m\">1024</span>\n  Max dimension size of a thread block <span class=\"o\">(</span>x,y,z<span class=\"o\">)</span>: <span class=\"o\">(</span><span class=\"m\">1024</span>, <span class=\"m\">1024</span>, <span class=\"m\">64</span><span class=\"o\">)</span>\n  Max dimension size of a grid size    <span class=\"o\">(</span>x,y,z<span class=\"o\">)</span>: <span class=\"o\">(</span><span class=\"m\">2147483647</span>, <span class=\"m\">65535</span>, <span class=\"m\">65535</span><span class=\"o\">)</span>\n  Maximum memory pitch:                          <span class=\"m\">2147483647</span> bytes\n  Texture alignment:                             <span class=\"m\">512</span> bytes\n  Concurrent copy and kernel execution:          Yes with <span class=\"m\">2</span> copy engine<span class=\"o\">(</span>s<span class=\"o\">)</span>\n  Run <span class=\"nb\">time</span> limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement <span class=\"k\">for</span> Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing <span class=\"o\">(</span>UVA<span class=\"o\">)</span>:      Yes\n  Device PCI Domain ID / Bus ID / location ID:   <span class=\"m\">0</span> / <span class=\"m\">1</span> / <span class=\"m\">0</span>\n  Compute Mode:\n     &lt; Default <span class=\"o\">(</span>multiple host threads can use ::cudaSetDevice<span class=\"o\">()</span> with device simultaneously<span class=\"o\">)</span> &gt;\n\ndeviceQuery, CUDA <span class=\"nv\">Driver</span> <span class=\"o\">=</span> CUDART, CUDA Driver <span class=\"nv\">Version</span> <span class=\"o\">=</span> <span class=\"m\">8</span>.0, CUDA Runtime <span class=\"nv\">Version</span> <span class=\"o\">=</span> <span class=\"m\">8</span>.0, <span class=\"nv\">NumDevs</span> <span class=\"o\">=</span> <span class=\"m\">1</span>, <span class=\"nv\">Device0</span> <span class=\"o\">=</span> GeForce GTX <span class=\"m\">1050</span>\n<span class=\"nv\">Result</span> <span class=\"o\">=</span> PASS\ngemfield@ai:/usr/local/cuda/samples/1_Utilities/deviceQuery$</code></pre></div><p>哈哈，解决了。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>第五步：重启电脑</b></h2><p>重启我的Kde Ubuntu 16.04.03 LTS 系统，看看这次的解决是否持久化了。</p><p>不写了，重启指令已经发出，系统此刻正在重</p>", 
            "topic": [
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "CUDA", 
                    "tagLink": "https://api.zhihu.com/topics/19597236"
                }, 
                {
                    "tag": "Caffe（深度学习框架）", 
                    "tagLink": "https://api.zhihu.com/topics/20019488"
                }
            ], 
            "comments": [
                {
                    "userName": "海雅古慕", 
                    "userLink": "https://www.zhihu.com/people/a19e709e21a073d2e5538e531d1617ac", 
                    "content": "你好，请问我用apt-get install old version 的时候准备退回老版本，可是显示的是找不到原来的版本？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "<p>贴一下你的命令和输出</p>", 
                            "likes": 0, 
                            "replyToAuthor": "海雅古慕"
                        }
                    ]
                }, 
                {
                    "userName": "13056665160", 
                    "userLink": "https://www.zhihu.com/people/e8904fb0f5288b5de74a3d488bd71798", 
                    "content": "<p>您好，我的系统配置信息是deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 9.0, CUDA Runtime Version = 9.0, NumDevs = 1</p><p>Result = PASS</p><p>| NVIDIA-SMI 384.130 Driver Version: 384.130 </p><p>但是我在运行我的代码时候还是提示说Status: CUDA driver version is insufficient for CUDA runtime version</p><p>请问是怎么回事呢</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "小纠结", 
                            "userLink": "https://www.zhihu.com/people/9fd4afd46381669b729a01e1006c78bf", 
                            "content": "今天刚装的cuda9.0……384.81 这个384.81是要求的最低版本还是最高版本?驱动390没有报错<br>小白，不太懂😁😁", 
                            "likes": 0, 
                            "replyToAuthor": "13056665160"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33983810", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 7, 
            "title": "安装Nvidia GPU专属驱动后Xorg的变化", 
            "content": "<h2><b>背景</b></h2><p>安装Nvidia GPU专属驱动后（<a href=\"https://zhuanlan.zhihu.com/p/28786117\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/28</span><span class=\"invisible\">786117</span><span class=\"ellipsis\"></span></a>），Linux系统在启动桌面系统（当然说的就是老旧的X Server）的时候会和之前有什么变化吗？gemfield本文以kUbuntu 17.10为例。</p><h2><b>配置文件的变化</b></h2><p><b>1，/etc/X11/xorg.conf</b></p><p>安装Nvidia驱动后，会生成/etc/X11/xorg.conf配置文件（默认是没有的），这样，X Server在启动的时候，就会首先从/etc/X11/xorg.conf 读取配置来改变自己的行为：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ai:~$ cat /etc/X11/xorg.conf\n# nvidia-xconfig: X configuration file generated by nvidia-xconfig\n# nvidia-xconfig:  version 384.90  (buildmeister@swio-display-x86-rhel47-05)  Tue Sep 19 18:13:03 PDT 2017\n\nSection &#34;ServerLayout&#34;\n    Identifier     &#34;Layout0&#34;\n    Screen      0  &#34;Screen0&#34;\n    InputDevice    &#34;Keyboard0&#34; &#34;CoreKeyboard&#34;\n    InputDevice    &#34;Mouse0&#34; &#34;CorePointer&#34;\nEndSection\n\nSection &#34;Files&#34;\nEndSection\n\nSection &#34;InputDevice&#34;\n    # generated from default\n    Identifier     &#34;Mouse0&#34;\n    Driver         &#34;mouse&#34;\n    Option         &#34;Protocol&#34; &#34;auto&#34;\n    Option         &#34;Device&#34; &#34;/dev/psaux&#34;\n    Option         &#34;Emulate3Buttons&#34; &#34;no&#34;\n    Option         &#34;ZAxisMapping&#34; &#34;4 5&#34;\nEndSection\n\nSection &#34;InputDevice&#34;\n    # generated from default\n    Identifier     &#34;Keyboard0&#34;\n    Driver         &#34;kbd&#34;\nEndSection\n\nSection &#34;Monitor&#34;\n    Identifier     &#34;Monitor0&#34;\n    VendorName     &#34;Unknown&#34;\n    ModelName      &#34;Unknown&#34;\n    HorizSync       28.0 - 33.0\n    VertRefresh     43.0 - 72.0\n    Option         &#34;DPMS&#34;\nEndSection\n\nSection &#34;Device&#34;\n    Identifier     &#34;Device0&#34;\n    Driver         &#34;nvidia&#34;\n    VendorName     &#34;NVIDIA Corporation&#34;\nEndSection\n\nSection &#34;Screen&#34;\n    Identifier     &#34;Screen0&#34;\n    Device         &#34;Device0&#34;\n    Monitor        &#34;Monitor0&#34;\n    DefaultDepth    24\n    SubSection     &#34;Display&#34;\n        Depth       24\n    EndSubSection\nEndSection</code></pre></div><p>这个配置文件的ServerLayout section会在X Server启动的时候产生一些效果，就是下面log中有(**) 前缀的：</p><div class=\"highlight\"><pre><code class=\"language-text\">[    42.691] Markers: (--) probed, (**) from config file, (==) default setting,\n        (++) from command line, (!!) notice, (II) informational,\n        (WW) warning, (EE) error, (NI) not implemented, (??) unknown.\n[    42.691] (==) Log file: &#34;/var/log/Xorg.0.log&#34;, Time: Sat Feb 24 09:52:05 2018\n[    42.691] (==) Using config file: &#34;/etc/X11/xorg.conf&#34;\n[    42.691] (==) Using system config directory &#34;/usr/share/X11/xorg.conf.d&#34;\n[    42.692] (==) ServerLayout &#34;Layout0&#34;\n[    42.692] (**) |--&gt;Screen &#34;Screen0&#34; (0)\n[    42.692] (**) |   |--&gt;Monitor &#34;Monitor0&#34;\n[    42.692] (**) |   |--&gt;Device &#34;Device0&#34;\n[    42.692] (**) |--&gt;Input Device &#34;Keyboard0&#34;\n[    42.692] (**) |--&gt;Input Device &#34;Mouse0&#34;\n[    42.692] (==) Automatically adding devices\n[    42.692] (==) Automatically enabling devices\n[    42.692] (==) Automatically adding GPU devices\n[    42.692] (==) Automatically binding GPU devices</code></pre></div><p>而InputDevice section会在X server启动的时候产生下面的效果：</p><div class=\"highlight\"><pre><code class=\"language-text\">[    42.692] (WW) Hotplugging is on, devices using drivers &#39;kbd&#39;, &#39;mouse&#39; or &#39;vmmouse&#39; will be disabled.\n[    42.692] (WW) Disabling Keyboard0\n[    42.692] (WW) Disabling Mouse0</code></pre></div><p>重要的来了，Device section会产生下面的效果：</p><div class=\"highlight\"><pre><code class=\"language-text\">[    42.697] (II) &#34;glx&#34; will be loaded by default.\n[    42.697] (II) LoadModule: &#34;glx&#34;\n[    42.697] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/libglx.so\n[    42.703] (II) Module glx: vendor=&#34;NVIDIA Corporation&#34;\n[    42.703]    compiled for 4.0.2, module version = 1.0.0\n[    42.703]    Module class: X.Org Server Extension\n[    42.703] (II) NVIDIA GLX Module  384.111  Tue Dec 19 22:51:13 PST 2017\n[    42.703] (II) LoadModule: &#34;nvidia&#34;\n[    42.703] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/nvidia_drv.so\n[    42.703] (II) Module nvidia: vendor=&#34;NVIDIA Corporation&#34;\n[    42.703]    compiled for 4.0.2, module version = 1.0.0\n[    42.703]    Module class: X.Org Video Driver\n[    42.703] (II) NVIDIA dlloader X Driver  384.111  Tue Dec 19 22:25:34 PST 2017\n[    42.703] (II) NVIDIA Unified Driver for all Supported NVIDIA GPUs\n[    42.703] (II) Loading sub module &#34;fb&#34;\n[    42.703] (II) LoadModule: &#34;fb&#34;\n[    42.703] (II) Loading /usr/lib/xorg/modules/libfb.so\n[    42.704] (II) Module fb: vendor=&#34;X.Org Foundation&#34;\n[    42.704]    compiled for 1.19.5, module version = 1.0.0\n[    42.704]    ABI class: X.Org ANSI C Emulation, version 0.4\n[    42.704] (II) Loading sub module &#34;wfb&#34;\n[    42.704] (II) LoadModule: &#34;wfb&#34;\n[    42.704] (II) Loading /usr/lib/xorg/modules/libwfb.so\n[    42.704] (II) Module wfb: vendor=&#34;X.Org Foundation&#34;\n[    42.704]    compiled for 1.19.5, module version = 1.0.0\n[    42.704]    ABI class: X.Org ANSI C Emulation, version 0.4\n[    42.704] (II) Loading sub module &#34;ramdac&#34;\n[    42.704] (II) LoadModule: &#34;ramdac&#34;\n[    42.704] (II) Module &#34;ramdac&#34; already built-in\n[    42.704] (**) NVIDIA(0): Depth 24, (--) framebuffer bpp 32\n[    42.704] (==) NVIDIA(0): RGB weight 888\n[    42.704] (==) NVIDIA(0): Default visual is TrueColor\n[    42.704] (==) NVIDIA(0): Using gamma correction (1.0, 1.0, 1.0)\n[    42.704] (**) NVIDIA(0): Enabling 2D acceleration\n[    42.737] (--) NVIDIA(0): Valid display device(s) on GPU-0 at PCI:76:0:0\n[    42.737] (--) NVIDIA(0):     DFP-0\n[    42.737] (--) NVIDIA(0):     DFP-1\n[    42.737] (--) NVIDIA(0):     DFP-2\n[    42.737] (--) NVIDIA(0):     DFP-3\n[    42.737] (--) NVIDIA(0):     DFP-4\n[    42.737] (--) NVIDIA(0):     DFP-5\n[    42.737] (--) NVIDIA(0):     DFP-6 (boot)\n[    42.739] (II) NVIDIA(0): NVIDIA GPU GeForce GTX 1080 Ti (GP102-A) at PCI:76:0:0\n[    42.739] (II) NVIDIA(0):     (GPU-0)\n[    42.739] (--) NVIDIA(0): Memory: 11534336 kBytes\n[    42.739] (--) NVIDIA(0): VideoBIOS: 86.02.40.00.3c\n[    42.739] (II) NVIDIA(0): Detected PCI Express Link width: 16X\n[    42.739] (--) NVIDIA(GPU-0): DFP-0: disconnected\n[    42.739] (--) NVIDIA(GPU-0): DFP-0: Internal TMDS\n[    42.739] (--) NVIDIA(GPU-0): DFP-0: 165.0 MHz maximum pixel clock\n[    42.739] (--) NVIDIA(GPU-0): \n[    42.739] (--) NVIDIA(GPU-0): DFP-1: disconnected\n[    42.739] (--) NVIDIA(GPU-0): DFP-1: Internal DisplayPort\n[    42.739] (--) NVIDIA(GPU-0): DFP-1: 1440.0 MHz maximum pixel clock\n[    42.739] (--) NVIDIA(GPU-0): \n[    42.739] (--) NVIDIA(GPU-0): DFP-2: disconnected\n[    42.739] (--) NVIDIA(GPU-0): DFP-2: Internal TMDS\n[    42.739] (--) NVIDIA(GPU-0): DFP-2: 165.0 MHz maximum pixel clock\n[    42.739] (--) NVIDIA(GPU-0): \n[    42.739] (--) NVIDIA(GPU-0): DFP-3: disconnected\n[    42.739] (--) NVIDIA(GPU-0): DFP-3: Internal DisplayPort\n[    42.739] (--) NVIDIA(GPU-0): DFP-3: 1440.0 MHz maximum pixel clock\n[    42.739] (--) NVIDIA(GPU-0): \n[    42.740] (--) NVIDIA(GPU-0): DFP-4: disconnected\n[    42.740] (--) NVIDIA(GPU-0): DFP-4: Internal TMDS\n[    42.740] (--) NVIDIA(GPU-0): DFP-4: 165.0 MHz maximum pixel clock\n[    42.740] (--) NVIDIA(GPU-0): \n[    42.740] (--) NVIDIA(GPU-0): DFP-5: disconnected\n[    42.740] (--) NVIDIA(GPU-0): DFP-5: Internal DisplayPort\n[    42.740] (--) NVIDIA(GPU-0): DFP-5: 1440.0 MHz maximum pixel clock\n[    42.740] (--) NVIDIA(GPU-0): \n[    42.740] (--) NVIDIA(GPU-0): DFP-6: disconnected\n[    42.740] (--) NVIDIA(GPU-0): DFP-6: Internal TMDS\n[    42.740] (--) NVIDIA(GPU-0): DFP-6: 165.0 MHz maximum pixel clock\n[    42.740] (--) NVIDIA(GPU-0): \n[    42.740] (EE) NVIDIA(0): Failed to assign any connected display devices to X screen 0. \n[    42.740] (EE) NVIDIA(0):     Set AllowEmptyInitialConfiguration if you want the server\n[    42.740] (EE) NVIDIA(0):     to start anyway\n[    42.740] (EE) NVIDIA(0): Failing initialization of X screen 0\n[    43.386] (II) UnloadModule: &#34;nvidia&#34;\n[    43.386] (II) UnloadSubModule: &#34;wfb&#34;\n[    43.386] (II) UnloadSubModule: &#34;fb&#34;\n[    43.386] (EE) Screen(s) found, but none have a usable configuration.\n[    43.386] (EE) \nFatal server error:\n[    43.386] (EE) no screens found(EE) \n[    43.386] (EE) \nPlease consult the The X.Org Foundation support \n         at http://wiki.x.org\n for help. \n[    43.386] (EE) Please also check the log file at &#34;/var/log/Xorg.0.log&#34; for additional information.\n[    43.386] (EE) \n[    43.387] (EE) Server terminated with error (1). Closing log file.</code></pre></div><p>因为Xorg检测到Nvidia驱动给Xorg提供的配置文件，所以就会装载下面的module：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:/var/log$ cat Xorg.0.log |grep &#34; Load&#34;\n[    42.692] (II) Loader magic: 0x558da6b83020\n[    42.697] (II) LoadModule: &#34;glx&#34;\n[    42.697] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/libglx.so\n[    42.703] (II) LoadModule: &#34;nvidia&#34;\n[    42.703] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/nvidia_drv.so\n[    42.703] (II) Loading sub module &#34;fb&#34;\n[    42.703] (II) LoadModule: &#34;fb&#34;\n[    42.703] (II) Loading /usr/lib/xorg/modules/libfb.so\n[    42.704] (II) Loading sub module &#34;wfb&#34;\n[    42.704] (II) LoadModule: &#34;wfb&#34;\n[    42.704] (II) Loading /usr/lib/xorg/modules/libwfb.so\n[    42.704] (II) Loading sub module &#34;ramdac&#34;\n[    42.704] (II) LoadModule: &#34;ramdac&#34;</code></pre></div><p>你会看到装载了Nvidia驱动的模块：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ldd /usr/lib/x86_64-linux-gnu/xorg/extra-modules/libglx.so\n        linux-vdso.so.1 =&gt;  (0x00007ffe91398000)\n        libnvidia-tls.so.384.111 =&gt; /usr/lib/nvidia-384/tls/libnvidia-tls.so.384.111 (0x00007f5de7f84000)\n        libnvidia-glcore.so.384.111 =&gt; /usr/lib/nvidia-384/libnvidia-glcore.so.384.111 (0x00007f5de60c7000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5de5ce7000)\n        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5de5ae3000)\n        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f5de578d000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f5de90f0000)\n\ngemfield@ai:~$ ldd /usr/lib/x86_64-linux-gnu/xorg/extra-modules/nvidia_drv.so\n        linux-vdso.so.1 =&gt;  (0x00007ffe9e5c3000)\n        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f0da8157000)\n        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f0da7d77000)\n        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f0da7b73000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f0da8f95000)</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p>而在一个没有安装Nvidia驱动的系统上，Xorg的启动则会装载下面的模块：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:/var/log$ cat Xorg.0.log |grep &#34; Load&#34;\n[     6.155] (II) Loader magic: 0x5639b7085020\n[     6.169] (II) LoadModule: &#34;glx&#34;\n[     6.171] (II) Loading /usr/lib/xorg/modules/extensions/libglx.so\n[     6.178] (II) LoadModule: &#34;modesetting&#34;\n[     6.178] (II) Loading /usr/lib/xorg/modules/drivers/modesetting_drv.so\n[     6.179] (II) LoadModule: &#34;fbdev&#34;\n[     6.179] (II) Loading /usr/lib/xorg/modules/drivers/fbdev_drv.so\n[     6.180] (II) LoadModule: &#34;vesa&#34;\n[     6.180] (II) Loading /usr/lib/xorg/modules/drivers/vesa_drv.so\n[     6.184] (II) Loading sub module &#34;fbdevhw&#34;\n[     6.184] (II) LoadModule: &#34;fbdevhw&#34;\n[     6.184] (II) Loading /usr/lib/xorg/modules/libfbdevhw.so\n[     6.185] (II) Loading sub module &#34;glamoregl&#34;\n[     6.185] (II) LoadModule: &#34;glamoregl&#34;\n[     6.185] (II) Loading /usr/lib/xorg/modules/libglamoregl.so\n[     6.305] (II) Loading sub module &#34;fb&#34;\n[     6.305] (II) LoadModule: &#34;fb&#34;\n[     6.305] (II) Loading /usr/lib/xorg/modules/libfb.so\n[     6.457] (II) AIGLX: Loaded and initialized i965\n[     6.504] (II) LoadModule: &#34;libinput&#34;\n[     6.504] (II) Loading /usr/lib/xorg/modules/input/libinput_drv.so</code></pre></div><p>现在只剩一个问题了，X Server没有起来，你只要ps -ef | grep Xorg就可以看到Xorg这个进程并不存在。这是因为，就像上面的log显示的那样：Failed to assign any connected display devices to X screen 0。这是因为我们的系统没有外接显示器所致。所以要想让Xorg进程（也就是X Server）起来，要么接个显示器，要么...就像log里说的，加个AllowEmptyInitialConfiguration选项。下文里Gemfield有专门的章节来介绍。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>2，目录/usr/share/X11/xorg.conf.d/</b></p><p>Xorg接下来会从/usr/share/X11/xorg.conf.d/下面读取配置文件，安装Nvidia专属驱动后会在这个目录下产生新的配置文件：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:~$ ls /usr/share/X11/xorg.conf.d\n10-amdgpu.conf  10-quirks.conf  10-radeon.conf  40-libinput.conf  70-wacom.conf\n#安装后\ngemfield@ai:~$ ls /usr/share/X11/xorg.conf.d/\n10-amdgpu.conf  10-radeon.conf    50-nvidia-drm-outputclass.conf  70-synaptics.conf  glamoregl.conf\n10-quirks.conf  40-libinput.conf  51-synaptics-quirks.conf        70-wacom.conf</code></pre></div><p>可以看到，主要是多出来Nvidia的配置文件50-nvidia-drm-outputclass.conf/nvidia-drm-outputclass.conf：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:/usr/share/X11/xorg.conf.d$ cat 50-nvidia-drm-outputclass.conf/nvidia-drm-outputclass.conf \n# This xorg.conf.d configuration snippet configures the X server to\n# automatically load the nvidia X driver when it detects a device driven by the\n# nvidia-drm.ko kernel module.  Please note that this only works on Linux kernels\n# version 3.9 or higher with CONFIG_DRM enabled, and only if the nvidia-drm.ko\n# kernel module is loaded before the X server is started.\n\nSection &#34;OutputClass&#34;\n    Identifier     &#34;nvidia&#34;\n    MatchDriver    &#34;nvidia-drm&#34;\n    Driver         &#34;nvidia&#34;\nEndSection</code></pre></div><h2><b>3 无显示器启动X Server</b></h2><p>安装Nvidia驱动后，如果没有接显示器，那么X Server在启动的时候会报错：NVIDIA(0): Failed to assign any connected display devices to X screen 0. Set AllowEmptyInitialConfiguration if you want the server to start anyway</p><p>NVIDIA(0): Failing initialization of X screen 0</p><p>这个时候，根据错误提示，可以通过</p><div class=\"highlight\"><pre><code class=\"language-console\">sudo nvidia-xconfig --allow-empty-initial-configuration</code></pre></div><p>来进行设置。该命令会修改文件/etc/X11/xorg.conf：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:/usr/NX/var/log$ diff -u /etc/X11/xorg.conf.backup /etc/X11/xorg.conf\n--- /etc/X11/xorg.conf.gemfield 2018-02-26 11:17:31.966258143 +0800\n+++ /etc/X11/xorg.conf  2018-02-26 11:17:45.830258784 +0800\n@@ -1,9 +1,10 @@\n # nvidia-xconfig: X configuration file generated by nvidia-xconfig\n-# nvidia-xconfig:  version 384.90  (buildmeister@swio-display-x86-rhel47-05)  Tue Sep 19 18:13:03 PDT 2017\n+# nvidia-xconfig:  version 384.111  (buildmeister@swio-display-x86-rhel47-01)  Wed Dec 20 00:05:28 PST 2017\n+\n \n Section &#34;ServerLayout&#34;\n     Identifier     &#34;Layout0&#34;\n-    Screen      0  &#34;Screen0&#34;\n+    Screen      0  &#34;Screen0&#34; 0 0\n     InputDevice    &#34;Keyboard0&#34; &#34;CoreKeyboard&#34;\n     InputDevice    &#34;Mouse0&#34; &#34;CorePointer&#34;\n EndSection\n@@ -12,6 +13,7 @@\n EndSection\n \n Section &#34;InputDevice&#34;\n+\n     # generated from default\n     Identifier     &#34;Mouse0&#34;\n     Driver         &#34;mouse&#34;\n@@ -22,6 +24,7 @@\n EndSection\n \n Section &#34;InputDevice&#34;\n+\n     # generated from default\n     Identifier     &#34;Keyboard0&#34;\n     Driver         &#34;kbd&#34;\n@@ -47,6 +50,7 @@\n     Device         &#34;Device0&#34;\n     Monitor        &#34;Monitor0&#34;\n     DefaultDepth    24\n+    Option         &#34;AllowEmptyInitialConfiguration&#34; &#34;True&#34;\n     SubSection     &#34;Display&#34;\n         Depth       24\n     EndSubSection</code></pre></div><p>你可以看到添加了这一行配置：Option         &#34;AllowEmptyInitialConfiguration&#34; &#34;True&#34;。</p><p>进行了这个设置后，重启系统，查看X Server的log：</p><div class=\"highlight\"><pre><code class=\"language-console\">gemfield@ai:/var/log$ cat Xorg.0.log |grep &#34; Load&#34;\n[    12.607] (II) Loader magic: 0x56096dfb6020\n[    12.612] (II) LoadModule: &#34;glx&#34;\n[    12.612] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/libglx.so\n[    12.635] (II) LoadModule: &#34;nvidia&#34;\n[    12.635] (II) Loading /usr/lib/x86_64-linux-gnu/xorg/extra-modules/nvidia_drv.so\n[    12.641] (II) Loading sub module &#34;fb&#34;\n[    12.641] (II) LoadModule: &#34;fb&#34;\n[    12.642] (II) Loading /usr/lib/xorg/modules/libfb.so\n[    12.643] (II) Loading sub module &#34;wfb&#34;\n[    12.643] (II) LoadModule: &#34;wfb&#34;\n[    12.643] (II) Loading /usr/lib/xorg/modules/libwfb.so\n[    12.643] (II) Loading sub module &#34;ramdac&#34;\n[    12.643] (II) LoadModule: &#34;ramdac&#34;\n[    12.861] (II) Loading sub module &#34;dri2&#34;\n[    12.861] (II) LoadModule: &#34;dri2&#34;\n[    12.911] (II) LoadModule: &#34;libinput&#34;\n[    12.911] (II) Loading /usr/lib/xorg/modules/input/libinput_drv.so</code></pre></div><p>这次很明显启动完整了，再看看Xorg进程，也有了：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ai:/var/log$ ps -ef |grep Xorg\nroot      1122  1014  0 11:23 tty7     00:00:00 /usr/lib/xorg/Xorg -nolisten tcp -auth /var/run/sddm/{b54247e5-6e6b-4d5e-96a3-083cf09a6782} -background none -noreset -displayfd 17 vt7</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "Xorg", 
                    "tagLink": "https://api.zhihu.com/topics/19577854"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33714726", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 4, 
            "title": "使用NCCL进行NVIDIA GPU卡之间的通信", 
            "content": "<h2><b>背景</b></h2><p>最初的Caffe只支持单块GPU卡，后来就增加了NCCL的feature，可以支持多GPU卡。对于多个GPU卡之间相互通信，硬件层面上的实现有Nvlink、PCIe switch（不经过CPU）、Infiniband、以及PCIe Host Bridge（通常就是借助CPU进行交换）这4种方式。而NCCL是Nvidia在软件层面对这些通信方式的封装。</p><p>如何知道当前GPU服务器上Nvidia显卡之间的（硬件层面）通信方式呢？可以使用nvidia-smi topo -m 命令。</p><div class=\"highlight\"><pre><code class=\"language-bash\">gemfield@ai:/bigdata/gemfield$ nvidia-smi topo -m\n        GPU0    GPU1    CPU Affinity\nGPU0     X      PHB     <span class=\"m\">0</span>-11\nGPU1    PHB      X      <span class=\"m\">0</span>-11\n\nLegend:\n\n  <span class=\"nv\">X</span>    <span class=\"o\">=</span> Self\n  <span class=\"nv\">SYS</span>  <span class=\"o\">=</span> Connection traversing PCIe as well as the SMP interconnect between NUMA nodes <span class=\"o\">(</span>e.g., QPI/UPI<span class=\"o\">)</span>\n  <span class=\"nv\">NODE</span> <span class=\"o\">=</span> Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node\n  <span class=\"nv\">PHB</span>  <span class=\"o\">=</span> Connection traversing PCIe as well as a PCIe Host Bridge <span class=\"o\">(</span>typically the CPU<span class=\"o\">)</span>\n  <span class=\"nv\">PXB</span>  <span class=\"o\">=</span> Connection traversing multiple PCIe switches <span class=\"o\">(</span>without traversing the PCIe Host Bridge<span class=\"o\">)</span>\n  <span class=\"nv\">PIX</span>  <span class=\"o\">=</span> Connection traversing a single PCIe switch\n  NV#  <span class=\"o\">=</span> Connection traversing a bonded <span class=\"nb\">set</span> of <span class=\"c1\"># NVLinks</span></code></pre></div><p>可以看到，上述服务器上有2块GPU卡，12个CPU核。2个GPU之间通过PHB（PCIe Host Bridge，一般是集成在CPU内部的）来进行通信，可以说这个硬件平台比较弱。</p><p>再比如下面这个服务器，有4个GPU，48个CPU核。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>root@ai.gemfield.org ~<span class=\"o\">]</span><span class=\"c1\"># nvidia-smi topo -m</span>\n        GPU0    GPU1    GPU2    GPU3    mlx5_0  mlx5_1  CPU Affinity\nGPU0     X      PIX     SYS     SYS     SYS     SYS     <span class=\"m\">0</span>-11,24-35\nGPU1    PIX      X      SYS     SYS     SYS     SYS     <span class=\"m\">0</span>-11,24-35\nGPU2    SYS     SYS      X      PIX     PHB     PHB     <span class=\"m\">12</span>-23,36-47\nGPU3    SYS     SYS     PIX      X      PHB     PHB     <span class=\"m\">12</span>-23,36-47\nmlx5_0  SYS     SYS     PHB     PHB      X      PIX\nmlx5_1  SYS     SYS     PHB     PHB     PIX      X \n\nLegend:\n\n  <span class=\"nv\">X</span>    <span class=\"o\">=</span> Self\n  <span class=\"nv\">SYS</span>  <span class=\"o\">=</span> Connection traversing PCIe as well as the SMP interconnect between NUMA nodes <span class=\"o\">(</span>e.g., QPI/UPI<span class=\"o\">)</span>\n  <span class=\"nv\">NODE</span> <span class=\"o\">=</span> Connection traversing PCIe as well as the interconnect between PCIe Host Bridges within a NUMA node\n  <span class=\"nv\">PHB</span>  <span class=\"o\">=</span> Connection traversing PCIe as well as a PCIe Host Bridge <span class=\"o\">(</span>typically the CPU<span class=\"o\">)</span>\n  <span class=\"nv\">PXB</span>  <span class=\"o\">=</span> Connection traversing multiple PCIe switches <span class=\"o\">(</span>without traversing the PCIe Host Bridge<span class=\"o\">)</span>\n  <span class=\"nv\">PIX</span>  <span class=\"o\">=</span> Connection traversing a single PCIe switch\n  NV#  <span class=\"o\">=</span> Connection traversing a bonded <span class=\"nb\">set</span> of <span class=\"c1\"># NVLinks</span></code></pre></div><p>GPU0和GPU1之间是通过PCIe switch通信的（不经过cpu）；</p><p>GPU2和GPU3之间也是通过PCIe switch通信的；</p><p>其它的GPU卡两两之间是通过QPI通信的（PCIe + QPI总线）；</p><p>而mlx5_0 和mlx5_1是Mellanox ConnectX-4 PCIe网卡设备(10/25/40/50千兆以太网适配器，另外该公司是IBA芯片的主要厂商)。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>NCCL</b></h2><p>1，下载NCCL</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@ai.gemfield.org:~# git clone https://github.com/NVIDIA/nccl.git\nCloning into <span class=\"s1\">&#39;nccl&#39;</span>...\nremote: Counting objects: <span class=\"m\">651</span>, <span class=\"k\">done</span>.\nremote: Total <span class=\"m\">651</span> <span class=\"o\">(</span>delta <span class=\"m\">0</span><span class=\"o\">)</span>, reused <span class=\"m\">0</span> <span class=\"o\">(</span>delta <span class=\"m\">0</span><span class=\"o\">)</span>, pack-reused <span class=\"m\">651</span>\nReceiving objects: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">651</span>/651<span class=\"o\">)</span>, <span class=\"m\">1</span>.38 MiB <span class=\"p\">|</span> <span class=\"m\">619</span>.00 KiB/s, <span class=\"k\">done</span>.\nResolving deltas: <span class=\"m\">100</span>% <span class=\"o\">(</span><span class=\"m\">411</span>/411<span class=\"o\">)</span>, <span class=\"k\">done</span>.\nChecking connectivity... <span class=\"k\">done</span>.</code></pre></div><p>2，编译NCCL库</p><div class=\"highlight\"><pre><code class=\"language-bash\">root@ai.gemfield.org:~# <span class=\"nb\">cd</span> nccl/\nroot@ai.gemfield.org:~/nccl# make <span class=\"nv\">CUDA_HOME</span><span class=\"o\">=</span>/usr/local/cuda <span class=\"nb\">test</span>\nGrabbing  src/nccl.h                          &gt; /root/nccl/build/include/nccl.h\nCompiling src/libwrap.cu                      &gt; /root/nccl/build/obj/libwrap.o\nCompiling src/core.cu                         &gt; /root/nccl/build/obj/core.o\nCompiling src/all_gather.cu                   &gt; /root/nccl/build/obj/all_gather.o\nCompiling src/all_reduce.cu                   &gt; /root/nccl/build/obj/all_reduce.o\nCompiling src/broadcast.cu                    &gt; /root/nccl/build/obj/broadcast.o\nCompiling src/reduce.cu                       &gt; /root/nccl/build/obj/reduce.o\nCompiling src/reduce_scatter.cu               &gt; /root/nccl/build/obj/reduce_scatter.o\nLinking   libnccl.so.1.3.5                    &gt; /root/nccl/build/lib/libnccl.so.1.3.5\nBuilding  test/single/all_gather_test.cu      &gt; /root/nccl/build/test/single/all_gather_test\nBuilding  test/single/all_gather_scan.cu      &gt; /root/nccl/build/test/single/all_gather_scan\nBuilding  test/single/all_reduce_test.cu      &gt; /root/nccl/build/test/single/all_reduce_test\nBuilding  test/single/all_reduce_scan.cu      &gt; /root/nccl/build/test/single/all_reduce_scan\nBuilding  test/single/broadcast_test.cu       &gt; /root/nccl/build/test/single/broadcast_test\nBuilding  test/single/broadcast_scan.cu       &gt; /root/nccl/build/test/single/broadcast_scan\nBuilding  test/single/reduce_test.cu          &gt; /root/nccl/build/test/single/reduce_test\nBuilding  test/single/reduce_scan.cu          &gt; /root/nccl/build/test/single/reduce_scan\nBuilding  test/single/reduce_scatter_test.cu  &gt; /root/nccl/build/test/single/reduce_scatter_test\nBuilding  test/single/reduce_scatter_scan.cu  &gt; /root/nccl/build/test/single/reduce_scatter_scan\n\nroot@ai.gemfield.org:~/nccl# find . -name <span class=\"s2\">&#34;*.so&#34;</span>\n./build/lib/libnccl.so\n\nroot@ai.gemfield.org:~/nccl# make install\nremoved <span class=\"s1\">&#39;/usr/local/lib/libnccl.so&#39;</span>\n<span class=\"s1\">&#39;/root/nccl/build/lib/libnccl.so&#39;</span> -&gt; <span class=\"s1\">&#39;/usr/local/lib/libnccl.so&#39;</span>\nremoved <span class=\"s1\">&#39;/usr/local/lib/libnccl.so.1&#39;</span>\n<span class=\"s1\">&#39;/root/nccl/build/lib/libnccl.so.1&#39;</span> -&gt; <span class=\"s1\">&#39;/usr/local/lib/libnccl.so.1&#39;</span>\n<span class=\"s1\">&#39;/root/nccl/build/lib/libnccl.so.1.3.5&#39;</span> -&gt; <span class=\"s1\">&#39;/usr/local/lib/libnccl.so.1.3.5&#39;</span>\n<span class=\"s1\">&#39;/root/nccl/build/include/nccl.h&#39;</span> -&gt; <span class=\"s1\">&#39;/usr/local/include/nccl.h&#39;</span></code></pre></div><h2><b>如何让Caffe使用NCCL</b></h2><p><b>修改Makefile.config，将USE_NCCL注释掉。</b></p><div class=\"highlight\"><pre><code class=\"language-text\"># NCCL acceleration switch (uncomment to build with NCCL)\n# https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0)\nUSE_NCCL := 1</code></pre></div><p>重新编译出来的caffe就可以在命令行上指定多个GPU了。</p>", 
            "topic": [
                {
                    "tag": "Caffe（深度学习框架）", 
                    "tagLink": "https://api.zhihu.com/topics/20019488"
                }, 
                {
                    "tag": "图形处理器（GPU）", 
                    "tagLink": "https://api.zhihu.com/topics/19570894"
                }, 
                {
                    "tag": "PCI-E", 
                    "tagLink": "https://api.zhihu.com/topics/20043406"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36109778", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 40, 
            "title": "ffmpeg和H264视频的编解码", 
            "content": "<h2><b>背景</b></h2><p>做CV的人经常面对的东西之一就是用ffmpeg处理视频，本文聚焦的就是ffmpeg和H264视频编码的一些概念和命令。因为实际使用的时候大多数的人都会遇到一些比较困惑的问题，比如ffmpeg截取视频为什么做不到帧级的精确。不管怎样，本文还是属于偏工程方面的论述。</p><p>在专栏文章<a href=\"https://zhuanlan.zhihu.com/p/29216556\" class=\"internal\">使用ffmpeg命令处理音视频</a>中，Gemfield也介绍了一些基本的ffmpeg命令，而本文还将继续介绍一些不那么基本的命令。</p><h2><b>为什么视频需要编解码？</b></h2><p>首先要解码是因为要编码，那为什么要编码呢？因为要压缩。假设看一部电影2小时的25fps的1080p视频，假设每个像素用1个字节存储（不准确哈，就是给个数量级，RGB是3个字节，但视频用的也不是RGB信息）。那么信息量就是 1920 x 1080 x 25 x 3600 x 2 =  373248000000 个字节，约为347 GB。现在清楚了吧。为了减少这个信息量，我们需要引入压缩算法，在2个维度上进行压缩，一是帧内压缩，一是帧间压缩。这个帧间压缩就是说，帧与帧之间的变化其实也没有那么大嘛，那就只在这帧图像上保留变化的信息，这就大大的减少的了信息量。这样的帧有2种：P-Frame 和 B-Frame。</p><h2><b>P-Frame 、B-Frame、I-Frame、GOP、IDR</b></h2><p><b>P-Frame</b> （Predictive-Frame），利用之前的I帧或P帧，采用运动预测的方式进行帧间预测编码；</p><p><b>B-Frame</b> （bi predictive-Frame），bi双向的意思，双向预测编码图像帧)，提供最高的压缩比，它既需要之前的图像帧(I帧或P帧)，也需要后来的图像帧(P帧)，采用运动预测的方式进行帧间双向预测编码。</p><p>所以P帧和B帧只包含变化的信息。</p><p>但是啊，有的时候，比如镜头切换等，变化的信息量反而更大，那使用P帧或者B帧反而得不偿失。怎么办呢？干脆算了，h264编码这个时候就会插入key frame（关键帧），也就是不依赖前后帧的独立的一帧图像。key frame也叫<b>I-Frame</b>，也就是intra-frame。只有这个时候需要插入key frame吗？不是的！假设一个视频从头到尾都没有这样的剧烈变化的镜头，那就只有第一帧是key frame了，那么我做seek的时候（你想快进啊，或者想从中间看视频啊），那就灾难了，比方你要seek到第1小时，那程序就得先decode 1小时的视频才能计算出你要播放的帧...卒！</p><p>所以啊，一般都是以有规律的interval来插入key frame，这个有规律的interval就叫做I-Frame interval ，或者叫做I-Frame distance，或者叫做GOP length/size（Group Of Images），这个值一般是10倍的fps（libx264默认将这个interval设置为250，另外，x264编码器在检测到大的场景变化时，会在变化开始处插入key frame)  。另外，ESPN是每10秒插入一个key frame，YouTube每2秒插入一个关键帧，Apple每3秒到每10秒插入一个key frame。</p><p>再详细一点说说<b>GOP</b>这个概念，GOP结构一般会使用2个数字来描述，比如, M=3, N=12。第一个数字3表示的是2个anchor frame(I帧 或者 P帧)之间的距离，第二个数字12表示2个key frame之间的距离（也就是GOP size或者GOP length），那么对于这个例子来说， GOP结构就是IBBPBBPBBPBBI。</p><p>IDR(instantaneous decoder refresh) frame首先是 keyframe，对于普通的keyframe（non-IDR keyframe）来说，其后的P-Frame和B-Frame可以引用此keyframe之前的帧，但是IDR就不行，IDR后的 P-Frame和B-Frame不能引用此IDR之前的帧。所以decoder遇到IDR后，就可以毫不犹豫的抛弃之前的解码序列，从新开始(refresh)。这样当遇到解码错误的时候，错误不会影响太远，将止步于IDR。</p><p>下面的伪代码展示了如何生成I-Frame和P-Frame：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"k\">if</span> <span class=\"o\">((</span>distance from previous keyframe<span class=\"o\">)</span> &gt; keyint<span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"nb\">set</span> IDR-frame\n<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"m\">1</span> - <span class=\"o\">(</span>bit size of P-frame<span class=\"o\">)</span> / <span class=\"o\">(</span>bit size of I-frame<span class=\"o\">)</span> &lt; <span class=\"o\">(</span>scenecut / <span class=\"m\">100</span><span class=\"o\">)</span> * <span class=\"o\">(</span>distance from previous keyframe<span class=\"o\">)</span> / keyint<span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"o\">((</span>distance from previous keyframe<span class=\"o\">)</span> &gt;<span class=\"o\">=</span> minkeyint<span class=\"o\">)</span> <span class=\"k\">then</span>\n        <span class=\"nb\">set</span> IDR-frame\n    <span class=\"k\">else</span>\n        <span class=\"nb\">set</span> I-frame\n<span class=\"k\">else</span>\n    <span class=\"nb\">set</span> P-frame</code></pre></div><p>scenecut变量指的是场景变化的阈值，0表示当前帧和前面一帧完全一样, 100表示当前帧和前面一帧完全不一样。keyint是两个keyframe之间的最大距离，minkeyint是两个keyframe之间的最小距离。</p><p>执行下面的ffprobe命令</p><div class=\"highlight\"><pre><code class=\"language-text\">ffprobe -v error -show_frames gemfield.mp4 </code></pre></div><p>输入中截取如下片段：</p><div class=\"highlight\"><pre><code class=\"language-text\">[FRAME]\nmedia_type=video\nstream_index=0\nkey_frame=1\npkt_pts=104000\npkt_pts_time=4.160000\npkt_dts=103000\npkt_dts_time=4.120000\nbest_effort_timestamp=104000\nbest_effort_timestamp_time=4.160000\npkt_duration=1000\npkt_duration_time=0.040000\npkt_pos=33599\npkt_size=77692\nwidth=1280\nheight=720\npix_fmt=yuv420p\nsample_aspect_ratio=N/A\npict_type=I\ncoded_picture_number=0\ndisplay_picture_number=0\ninterlaced_frame=0\ntop_field_first=0\nrepeat_pict=0\n[/FRAME]</code></pre></div><p>从pict_type=I可以看出这是个关键帧，然后key_frame=1 表示这是IDR frame，如果key_frame=0表示这是Non-IDR frame。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>FFMPEG</b></h2><p>在继续之前，gemfield先强调三下ffmpeg的一个参数惯例：</p><p><b>注意：ffmpeg所有的参数都是作用于紧跟其后的文件，因此参数的顺序相当重要！！！</b></p><p><b>注意：ffmpeg所有的参数都是作用于紧跟其后的文件，因此参数的顺序相当重要！！！</b></p><p><b>注意：ffmpeg所有的参数都是作用于紧跟其后的文件，因此参数的顺序相当重要！！！</b></p><p>ffmpeg的seeking有2种方式，input seeking （使用I-Frame）和output seeking（逐帧decode）。</p><p><b>1，先说图片</b></p><p>比方说我要把gemfield.mp4视频的第1分05秒的一帧图像截取出来，就有2种方法，如下所示：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># input seeking</span>\nffmpeg -ss <span class=\"m\">00</span>:1:05 -i gemfield.mp4 -frames:v <span class=\"m\">1</span> out.jpg\n<span class=\"c1\"># output seeking</span>\nffmpeg -i gemfield.mp4 -ss <span class=\"m\">00</span>:1:05 -frames:v <span class=\"m\">1</span> out1.jpg</code></pre></div><p>-frame:v 1的意思是说在video stream上截取1帧。</p><p>好了，这两种seeking有什么区别呢？input seeking使用的是key frames，所以速度很快；而output seeking是逐帧decode，直到1分05秒，所以速度很慢。当1分05秒变为1小时1分05秒的时候，这个差距就更大了。那么这两者产生的output有什么区别呢？没有！因为不管是哪种seeking，这中间（从视频抽帧成jpg图片）必然涉及到transcoding（decoding再encoding）。</p><p><b>2，再说视频</b></p><p>ffmpeg截取视频的时候，照样有2种seeking了，但是此外还有2种coding模式：transcoding 和 stream copying（ffmpeg -c copy）。因为是从视频到视频，并不必然需要decoding + encoding（比方说我从原始的h264视频截取出来一小段h264视频）。</p><p>transcoding就是先decoding再encoding（输入是容器level，所以其实顺序是demuxing、decoding、filter、encoding、muxing），decoding和encoding可以加入filter（因为filter只能工作在未压缩的data上）；</p><p>而stream copying 则是不需要decoding + encoding的模式，由命令行选项-codec加上参数copy来指定（-c:v copy ）。在这种模式下，ffmpeg在video stream上就会忽略 decoding 和 encoding步骤，从而只做demuxing和muxing。通常是用来修改容器（container） level的元数据，如下图所示：</p><div class=\"highlight\"><pre><code class=\"language-text\">_______              ______________            ________\n|       |            |              |          |        |\n| input |  demuxer   | encoded data |  muxer   | output |\n| file  | ---------&gt; | packets      | -------&gt; | file   |\n|_______|            |______________|          |________|</code></pre></div><p>因为没有transcoding的过程，所以速度非常快（相比于有transcoding的过程）。</p><p>再来说说2种seeking模式，对于截取视频来说，<b>input seeking使用的是keyframe，output seeking使用的也是key frame！</b>再来说说2种模式，当使用transcoding的时候，是frame-accurate的。而当使用stream copying的方式时，这种方式就不是frame-accurate的。为什么呢？<b>对于ffmpeg来说，当使用-ss 和-c:v copy 时， ffmpeg将只会使用i-frames</b>。比方说（当output seeking +  stream copying的时候）你指定起始点是719秒，而直到721秒才有个key frame，那么cut产生的视频在前2秒就只有声音，过了2秒后才会有视频（刚好到了key frame），所以一定要小心啊（注意啊，mplayer软件可能会把2秒空白期挪到后面）。</p><p>以截取一段4秒长的视频为例（选取00:01:01，也就是起始点为61秒，是因为此处最近的关键帧位于58.56秒和64.56秒）：</p><div class=\"highlight\"><pre><code class=\"language-text\">#1, use stream copying &amp; input seeking\nffmpeg -ss 00:01:01 -i gemfield.mp4 -t 4 -c copy cut1.mp4\n\n#2 use stream copying &amp; output seeking\nffmpeg -i gemfield.mp4 -ss 00:01:01  -t 4 -c:v copy cut2.mp4\n\n#3 use transcoding &amp; input seeking\nffmpeg -ss 00:01:01 -i gemfield.mp4  -t 4 -c:v libx264 cut3.mp4\n\n#4 use transcoding &amp; output seeking\nffmpeg -i gemfield.mp4 -ss 00:01:01 -t 4 -c:v libx264 cut4.mp4</code></pre></div><p>这#1、#2、#3、#4分别表现是什么呢？</p><p>#1，当为Input seeking + stream copying的时候，我们想截取的是[61, 65)的片段，实际截取的是<b>[58.56, 65)</b>的片段，是的，ffmpeg往前移动到了一个I-Frame；</p><p>#2，当为output seeking + stream copying的时候，我们想截取的是[61, 65)的片段，实际截取的是<b>[64.56, 65) </b>的画面，<b>再加上 (4 - 0.44)秒的空白片段</b>，生成长度为4秒的视频。播放器在播放的时候，这个空白片段怎么播放是由播放器自定义的。总之，画面的有效信息只有后面的关键帧开始的一小段信息；</p><p>#3，当为input seeking + transcoding  的时候，我们想截取的是[61, 65)的片段，实际截取的是<b>[61, 65)</b>的片段，是的，frame-accurate；</p><p>#4，当为output seeking + transcoding 的时候，我们想截取的是[61, 65)的片段，实际截取的是<b>[61, 65)</b>的片段，是的，frame-accurate。</p><p>可以看到，#3和#4是一样的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>3，最后给出一些命令</b></p><p><b>a, 怎么得到一个视频的总的帧数呢？</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_frames -of default=nokey=1:noprint_wrappers=1 gemfield.mp4\n2399</code></pre></div><p>gemfield.mp4有2399帧。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 gemfield.mp4\n2398</code></pre></div><p>gemfield.mp4有2398帧。</p><p><b>b, 怎么得到一个视频的key frame的帧数呢？</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 -skip_frame nokey gemfield.mp4\n21</code></pre></div><p>gemfield.mp4有21个关键帧。</p><p><b>c, 怎么得到一个视频的key frame所在的时间呢？</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -skip_frame nokey -select_streams v:0 -show_entries frame=pkt_pts_time -of csv=print_section=0 gemfield.mp4\n4.160000\n8.640000\n13.760000\n18.080000\n24.080000\n26.080000\n28.120000\n......</code></pre></div><p><b>d, 看一个视频中关键帧的分布情况</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -show_frames gemfield.mp4 | grep pict_type\npict_type=I\npict_type=P\npict_type=B\npict_type=B\npict_type=B\npict_type=B\npict_type=P\npict_type=P\npict_type=B\n......</code></pre></div><p><b>e, 看一个视频中关键帧所在的帧数</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffprobe -v error -select_streams v -show_frames -show_entries frame=pict_type -of csv gemfield.mp4 | grep -n I | cut -d &#39;:&#39; -f 1\n1\n113\n241\n349\n499\n549\n600\n......</code></pre></div><p><b>f, 重新设置key frame interval</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~$ ffmpeg -i gemfield.mp4 -vcodec libx264 -x264-params keyint=1:scenecut=0 -acodec copy out.mp4\n......\n#看看视频的大小变化\ngemfield@ThinkPad-X1C:~$ ls -lh gemfield.mp4 out.mp4\n-rw-rw-r-- 1 gemfield gemfield 13M 4月   3 11:49 gemfield.mp4\n-rw-rw-r-- 1 gemfield gemfield 97M 4月  25 21:10 out.mp4\n\n#看看波特率的变化\ngemfield@ThinkPad-X1C:~$ ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 gemfield.mp4\n1033337\ngemfield@ThinkPad-X1C:~$ ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 out.mp4 \n7985842</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "视频格式", 
                    "tagLink": "https://api.zhihu.com/topics/19553479"
                }, 
                {
                    "tag": "FFmpeg", 
                    "tagLink": "https://api.zhihu.com/topics/19608940"
                }, 
                {
                    "tag": "H.264 (MPEG-4 高级视频编码)", 
                    "tagLink": "https://api.zhihu.com/topics/19553936"
                }
            ], 
            "comments": [
                {
                    "userName": "clover978", 
                    "userLink": "https://www.zhihu.com/people/c348f122b73c2fe29616014e5b14a87d", 
                    "content": "能不能加上 reference", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "李大脸", 
                    "userLink": "https://www.zhihu.com/people/e8dff46c5ef1c19fc95f37327baad15f", 
                    "content": "博主你这边有相关源码吗？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "都是开源软件啊", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "LShi", 
                    "userLink": "https://www.zhihu.com/people/bf404e20ebc5cf802cd44edbc0efb2b7", 
                    "content": "您好，想请教一下，如果我想以最快速度获得视频文件的第一帧，应该怎么做呢？", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37016944", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 16, 
            "title": "KAFKA的最佳实践", 
            "content": "<h2><b>背景</b></h2><p>一个Python项目中要使用kafka去deliver log，1个producer，5个consumer。单条消息的大小是100KB ～ 500KB，producer要在1秒钟之内能够发送30个这样的message。然后每个consumer也要在1秒钟之内消费30个这样的message。另外，消息不需要持久化（好像kafka没法关闭数据的落盘），消息不需要设置replica。所以你可以看到，这个场景还是比较简单的，非得说一些特点的话，那就是单条消息比较大（但是还没有超越kafka默认的1MB）、实时性要求比较高、数据量比较大（1秒钟平均可能产生200KB * 30 = 6MB的数据量，1秒钟可能要消费6MB * 5 = 30MB的数据量）。</p><h2><b>JVM级别的优化</b></h2><p>因为kafka是java写的，所以JVM还是要考虑一些参数设置的。</p><p>下面是一个推荐的配置，你可以自己斟酌：</p><div class=\"highlight\"><pre><code class=\"language-bash\">-Xmx8g -Xms8g -XX:MetaspaceSize<span class=\"o\">=</span>96m -XX:+UseG1GC-XX:MaxGCPauseMillis<span class=\"o\">=</span><span class=\"m\">20</span> -XX:InitiatingHeapOccupancyPercent<span class=\"o\">=</span><span class=\"m\">35</span> -XX:G1HeapRegionSize<span class=\"o\">=</span>16M-XX:MinMetaspaceFreeRatio<span class=\"o\">=</span><span class=\"m\">50</span> -XX:MaxMetaspaceFreeRatio<span class=\"o\">=</span><span class=\"m\">80</span></code></pre></div><p>Xmx8g：最大堆大小是8G，gemfield设置的是16G，有钱任性，哼；</p><p>Xms8g：起始堆大小是8G。</p><p>在Gemfield的机器上，启动的服务带的参数如下所示：</p><div class=\"highlight\"><pre><code class=\"language-text\">/usr/lib/jvm/java-1.8-openjdk/jre/bin/java -Xmx16G -Xms16G \\\n-server -XX:+UseG1GC -XX:MaxGCPauseMillis=20 \\\n-XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent \\\n-Djava.awt.headless=true -Xloggc:/opt/kafka/bin/../logs/kafkaServer-gc.log \\\n......</code></pre></div><h2><b>OS级别的优化</b></h2><p>1，磁盘的读写性能通常是个瓶颈，多个磁盘或者更快的磁盘是个更好的选择。可以通过server.properties中的 log.dirs来配置多个硬盘。</p><p>2，增大socket buffer size，可以提高kafka的吞吐量：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ cat  /proc/sys/net/core/wmem_max\n212992\ngemfield@ubuntu:~$ cat /proc/sys/net/core/rmem_max\n212992</code></pre></div><p>Gemfield没有更改。更详细的设置请参考：<a href=\"https://link.zhihu.com/?target=https%3A//www.psc.edu/index.php/networking/641-tcp-tune\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TCP Tune</a></p><h2><b>Log flush管理</b></h2><p>这个决定消息如何同步到磁盘上。</p><div class=\"highlight\"><pre><code class=\"language-text\"># The number of messages to accept before forcing a flush of data to disk                           \n#log.flush.interval.messages=10000                                                                                                       \n                                                                                                                                \n# The maximum amount of time a message can sit in a log before we force a flush                     \n#log.flush.interval.ms=1000</code></pre></div><p>根据Gemfield的实践，动这些配置没有什么用。还是省省吧。</p><h2><b>Log Retention Policy 消息保留策略</b></h2><p>也就是消息保留多久会被清除掉。</p><div class=\"highlight\"><pre><code class=\"language-text\"># The following configurations control the disposal of log segments. The policy can                                             \n# be set to delete segments after a period of time, or after a given size has accumulated.                               \n# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens                                         \n# from the end of the log.                                                                                                      \n                                                                                                    \n# The minimum age of a log file to be eligible for deletion due to age                                                                   \n#log.retention.hours=168\nlog.retention.hours=1                                                                                                         \n                                                                                 \n# A size-based retention policy for logs. Segments are pruned from the log unless the remaining                                          \n# segments drop below log.retention.bytes. Functions independently of log.retention.hours.                                      \n#log.retention.bytes=1073741824                                                                                                        \n                                                                                                                                                                \n# The maximum size of a log segment file. When this size is reached a new log segment will be created.                          \nlog.segment.bytes=1073741824                                                                                                           \n                                                                                                                                                                                             \n# The interval at which log segments are checked to see if they can be deleted according                                        \n# to the retention policies                                                                                                            \nlog.retention.check.interval.ms=300000     </code></pre></div><p>gemfield将log.retention.hours设置为了1，并不需要将消息保留多久。</p><h2><b>使用的文件系统</b></h2><p>1，推荐EXT4 或者 XFS，XFS文件系统上Kafka会有更好的performance表现；</p><p>2，不要使用网络分区；</p><p>3，如果对持久化不做要求的话，可以使用内存文件系统，避免在磁盘IO上的浪费。比如gemfield就在某docker compose编排的系统中使用tmpfs文件系统（使用的是目前排名第一的wurstmeister/kafka做的docker镜像）：</p><div class=\"highlight\"><pre><code class=\"language-bash\">version: <span class=\"s1\">&#39;3&#39;</span>\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    restart: always\n    ports:\n      - <span class=\"s2\">&#34;2181:2181&#34;</span>\n  kafka:\n    image: wurstmeister/kafka\n    restart: always\n    ports:\n      - <span class=\"s2\">&#34;9092:9092&#34;</span>\n    environment:\n      KAFKA_MESSAGE_MAX_BYTES: <span class=\"m\">5000000</span>\n      KAFKA_AUTO_CREATE_TOPICS_ENABLE: <span class=\"s1\">&#39;false&#39;</span>\n      KAFKA_ADVERTISED_HOST_NAME: localhost\n      KAFKA_CREATE_TOPICS: <span class=\"s2\">&#34;football_live_1:1:1&#34;</span>\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_LOG_DIRS: <span class=\"s1\">&#39;/kafka/gemfield&#39;</span>\n    tmpfs:\n      - /kafka/gemfield\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock</code></pre></div><p>注意啊，tmpfs内存型文件系统上的数据在容器重启后就丢了。</p><h2><b>Zookeeper</b></h2><p>不要把zookeeper部署到和kafka broker同一台机器上。</p><h2><b>Topic/Partitions</b></h2><p>1，增加partitions增加并行吞吐量；</p><p>2，但是增加partition会（轻微）增加延迟。</p><p>3，Message.max.bytes 设置单条消息的最大字节，特别重要的是，如果你设置了replica，确保replica.fetch.max.bytes要大于或者等于message.max.bytes。</p><h2><b>Producer</b></h2><p>1，Batch.size ，多少个消息发送一次。</p><p>2，<a href=\"https://link.zhihu.com/?target=http%3A//linger.ms/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Linger.ms</a> ，多长时间发送一次。</p><p>3，Compression.type，压缩类型，这是producer端的一个主要工作。</p><p>4，Max.in.flight.requests.per.connection； </p><p>5，Acks；比方说0表示无需应答，所以速度很快（但是稍微不那么可靠点）。</p><p>6，更大的消息体积可以提高吞吐量。</p><h2><b>Consumer</b></h2><p>好像没啥需要设置的。Consumer的速度一般是producer的好几倍，所以不是什么瓶颈。</p><h2><b>KAFKA的python客户端</b></h2><p>好了，重点来了。上面说了那么多看似有道理的配置，但其实你只要知道，90%的情况下上面的配置对提高performance没什么卵用。比方说在Python社区最流行的3个kafka客户端分别是pykafka、kafka-python、confluent-kafka-python。这里有一篇文章<a href=\"https://link.zhihu.com/?target=http%3A//activisiongamescience.github.io/2016/06/15/Kafka-Client-Benchmarking/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python Kafka Client Benchmarking</a>，介绍了这三者之间的性能比较（PK的版本是pykafka 2.3.1、kafka-python 1.1.1和confluent-kafka-python 0.9.1)。</p><p>以三者的<b>producer</b>为例，confluent-kafka-python &gt;&gt; pykafka(librdkafka backend) &gt;&gt; pykafka &gt; kafka-python；以三者的<b>consumer</b>为例，confluent-kafka-python &gt;&gt; pykafka(librdkafka backend)  &gt;&gt; kafka-python &gt; pykafka。</p><p><b>1，kafka-python</b></p><p>最初在调研的时候，因为kafka-python排在搜索结果的第一名，并且github上的star数量最多，所以首先选择了kafka-python。在最新的kafka-python 1.4.2版本中，本来预期producer一秒能发送20MB的数据（基于本文开始背景中的上下文），但实际上只能发送3~4MB左右。这就导致一种情况，就是producer异步发送的东西cache在一个buffer里，由于网路来不及将其发送出去，于是导致buffer越攒越多，当达到buffer_memory的限制时，数据会被清空（也就是还未发送就被扔掉了），并且producer会阻塞住好一会儿......</p><div class=\"highlight\"><pre><code class=\"language-text\">buffer_memory (int) – The total bytes of memory the producer should use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block up to max_block_ms, raising an exception on timeout. In the current implementation, this setting is an approximation. Default: 33554432 (32MB)</code></pre></div><p>在kafka-python的github上找到了这么一条issue：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/dpkp/kafka-python/issues/1412\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Slower producer throughput on 1.4.1 than on 1.3.5 · Issue #1412 · dpkp/kafka-python</a></p><p>这个问题在1.4.1中出现，有人解释了原因是因为没有crc32的硬解码。</p><p>在最新版（截止2018年5月15日）的1.4.2中可以通过安装crc32来解决这个performance问题：</p><div class=\"highlight\"><pre><code class=\"language-text\">pip install crc32</code></pre></div><p>安装了crc32之后，这个问题就解决了。然而Gemfield要转向confluent了。</p><p><b>2，confluent-kafka-python</b></p><p>在最新版的confluent-kafka-python 上（反正2018年5月已经是了），pip install安装confluent-kafka-python时使用的 manylinux wheels中已经嵌入了librdkafka的so库了，比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@gemfield.org:~# find / -name &#34;librdkafka*&#34; \n/usr/local/lib/python2.7/dist-packages/confluent_kafka/.libs/librdkafka-6f63ed6f.so.1</code></pre></div><p>在使用的时候，因为速度太他瞄的快了，所以很可能会看到“BufferError: Local: Queue full”这样的错误，这就是本地的producer的buffer满了，为什么满了？因为网络来不及将越攒越多的数据送出去。这个buffer是靠两个config属性来指定的：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">gemfield_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;bootstrap.servers&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;kafka&#39;</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;queue.buffering.max.kbytes&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2000000</span><span class=\"p\">,</span>\n                   <span class=\"s1\">&#39;queue.buffering.max.messages&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1000000</span><span class=\"p\">}</span></code></pre></div><p>queue.buffering.max.kbytes 来指定能够缓存多大的信息，默认是400MB，最大能提高到2097151KB，也就是大约2GB（因为缓存不是100%你的消息，还有key或者其他meta信息，所以实际可用的到不了2GB）。</p><p>queue.buffering.max.messages来指定能够缓存多少个信息，默认是10万个吧，够用了。</p><p>可以通过更改这两个属性和优化程序的流程控制来避免BufferError: Local: Queue full这样的错误。</p><p><b>3，Gemfield自己的比较</b></p><p>下面是发送3000个200KB的消息的PK结果：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\">#这个使用的是confluent-kafka-python</span>\ngemfield@gemfield.org:~# <span class=\"nb\">time</span> python kf_producer.py \nreal    0m3.609s\nuser    0m0.360s\nsys     0m0.684s\n\n<span class=\"c1\">#这个使用的是kafka-python</span>\ngemfield@gemfield.org:~# <span class=\"nb\">time</span> python producer.py \nreal    0m7.121s\nuser    0m3.976s\nsys     0m2.392s</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "分布式系统", 
                    "tagLink": "https://api.zhihu.com/topics/19570823"
                }, 
                {
                    "tag": "Kafka", 
                    "tagLink": "https://api.zhihu.com/topics/20012159"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }
            ], 
            "comments": [
                {
                    "userName": "haitian huang", 
                    "userLink": "https://www.zhihu.com/people/1072e4ba3f11cb8803f32011a4a45f3d", 
                    "content": "你这个为什么不用redis", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "redis吞吐量不够", 
                            "likes": 0, 
                            "replyToAuthor": "haitian huang"
                        }, 
                        {
                            "userName": "Paco Li", 
                            "userLink": "https://www.zhihu.com/people/4b48da324b79213be162920f2dc9cb5a", 
                            "content": "redis不支持多组consumer获取同一份数据", 
                            "likes": 0, 
                            "replyToAuthor": "haitian huang"
                        }
                    ]
                }, 
                {
                    "userName": "罗匀岭", 
                    "userLink": "https://www.zhihu.com/people/1de6ad4bf40a7347a5ae31d70bc71049", 
                    "content": "我在使用python-Kafka时也碰到了效率问题。pip install crc32提示找不到module，是python3版本没有吗？", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "风筝有风", 
                    "userLink": "https://www.zhihu.com/people/5ba5507ab7b45526f511a90b706cc5f5", 
                    "content": "<p>'queue.buffering.max.kbytes': 2000000,<br>'queue.buffering.max.messages': 1000000<br>请问这两项是在哪里配置的呢</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37339237", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 3, 
            "title": "编译ffmpeg以获得极佳性能", 
            "content": "<h2><b>背景</b></h2><p>Gemfield最近尝试使用python封装的ffmpeg库（PyAV）来进行mp4文件、rtmp协议及其它协议的decode，具体来说就是将mp4文件（或者rtmp协议的数据，下同）进行demux并逐帧decode。然而在这期间发现了一些decode的性能问题。这些问题概括起来就是2点：python封装的ffmpeg是否能够利用到多核CPU的并发优势？不同的编译参数能带来ffmpeg性能怎样的提升？gemfield本文就是从这2个角度出发来进行各种性能测试，并最终得出一个结论。</p><p>本文使用的测试程序是remux.py。该程序已经开源在了：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/CivilNet/Gemfield/blob/master/src/python/ffmpeg/remux.py\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/CivilNet/Gem</span><span class=\"invisible\">field/blob/master/src/python/ffmpeg/remux.py</span><span class=\"ellipsis\"></span></a>。</p><h2><b>多线程</b></h2><p>可以从下面的输出看到，程序是1个进程8个线程（Linux上称之为轻量级进程），其中，python程序本身只有一个线程，在import numpy之后，多了3个线程，而在ffmpeg开始decode之后，线程数量又增加了4个。至此，整个程序的线程数量为8个。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~/github/tmp$ ps -eL -o %cpu,%mem,lwp,pid,ppid,cmd | grep remux | grep -v code | grep -v watch | grep -v grep\n 104  1.4 16595 16595 19441 python remux.py\n 1.8  1.4 16596 16595 19441 python remux.py\n 1.8  1.4 16597 16595 19441 python remux.py\n 1.6  1.4 16598 16595 19441 python remux.py\n 0.0  1.4 16599 16595 19441 python remux.py\n 0.0  1.4 16600 16595 19441 python remux.py\n 0.0  1.4 16601 16595 19441 python remux.py\n 0.0  1.4 16602 16595 19441 python remux.py</code></pre></div><p>在程序执行的时候，自始至终都只有一个线程在使用CPU，并且cpu使用率基本是100%，因此可以说，程序在decode的过程中并没有利用到多核的并发优势。众所周知，Python自身的字节码在执行的时候由于GIL的机制，是无法同时利用多CPU的计算资源的；但是对于python封装的C库、并且线程是在C库中创建并维护的、并且线程并不需要callback Python的代码的情况下，还是能利用的多核的并发优势的。因此，这里尚不清楚是否是python封装的原因。不过没关系，和编译参数比起来，这里只能算是开胃菜。</p><h2><b>编译参数的调试</b></h2><p><b>1，安装依赖</b></p><div class=\"highlight\"><pre><code class=\"language-text\">sudo apt-get update -qq &amp;&amp; sudo apt-get -y install \\\n  autoconf \\\n  automake \\\n  build-essential \\\n  cmake \\\n  git \\\n  libass-dev \\\n  libfreetype6-dev \\\n  libsdl2-dev \\\n  libtool \\\n  libva-dev \\\n  libvdpau-dev \\\n  libvorbis-dev \\\n  libxcb1-dev \\\n  libxcb-shm0-dev \\\n  libxcb-xfixes0-dev \\\n  pkg-config \\\n  texinfo \\\n  wget \\\n  zlib1g-dev \\\n  nasm</code></pre></div><p><b>2，PyAV选用的默认ffmpeg编译参数</b></p><div class=\"highlight\"><pre><code class=\"language-text\">./configure --disable-static --enable-shared --disable-doc --enable-libx264 --enable-gpl --disable-optimizations --disable-mmx --enable-debug=3 --disable-stripping\ninstall prefix            /home/gemfield/test/PyAV/vendor/build/ffmpeg-4.0\nsource path               .\nC compiler                gcc\nC library                 glibc\nARCH                      x86 (generic)\nbig-endian                no\nruntime cpu detection     yes\nstandalone assembly       no\nx86 assembler             nasm\nMMX enabled               no\nMMXEXT enabled            no\n3DNow! enabled            no\n3DNow! extended enabled   no\nSSE enabled               no\nSSSE3 enabled             no\nAESNI enabled             no\nAVX enabled               no\nAVX2 enabled              no\nAVX-512 enabled           no\nXOP enabled               no\nFMA3 enabled              no\nFMA4 enabled              no\ni686 features enabled     yes\nCMOV is fast              yes\nEBX available             yes\nEBP available             no\ndebug symbols             yes\nstrip symbols             no\noptimize for size         no\noptimizations             no\nstatic                    no\nshared                    yes\npostprocessing support    yes\nnetwork support           yes\nthreading support         pthreads\nsafe bitstream reader     yes\ntexi2html enabled         no\nperl enabled              yes\npod2man enabled           yes\nmakeinfo enabled          no\nmakeinfo supports HTML    no\n\nExternal libraries:\niconv                   libx264                 lzma                    xlib                    zlib\n\nExternal libraries providing hardware acceleration:\nv4l2_m2m\n\nLibraries:\navcodec                 avfilter                avformat                avutil                  postproc                swresample              swscale\navdevice\n\nPrograms:\nffmpeg                  ffprobe\n\nEnabled decoders:\naac                     asv2                    eacmv                   jv                      pcm_bluray              roq_dpcm                v210x\naac_fixed               atrac1                  eamad                   kgv1                    pcm_dvd                 rpza                    v308\naac_latm                atrac3                  eatgq                   kmvc                    pcm_f16le               rscc                    v408\naasc                    atrac3al                eatgv                   lagarith                pcm_f24le               rv10                    v410\nac3                     atrac3p                 eatqi                   loco                    pcm_f32be               rv20                    vb\nac3_fixed               atrac3pal               eightbps                m101                    pcm_f32le               rv30                    vble\nadpcm_4xm               aura                    eightsvx_exp            mace3                   pcm_f64be               rv40                    vc1\nadpcm_adx               aura2                   eightsvx_fib            mace6                   pcm_f64le               s302m                   vc1_v4l2m2m\nadpcm_afc               avrn                    escape124               magicyuv                pcm_lxf                 sami                    vc1image\nadpcm_aica              avrp                    escape130               mdec                    pcm_mulaw               sanm                    vcr1\nadpcm_ct                avs                     evrc                    metasound               pcm_s16be               sbc                     vmdaudio\nadpcm_dtk               avui                    exr                     microdvd                pcm_s16be_planar        scpr                    vmdvideo\nadpcm_ea                ayuv                    ffv1                    mimic                   pcm_s16le               screenpresso            vmnc\nadpcm_ea_maxis_xa       bethsoftvid             ffvhuff                 mjpeg                   pcm_s16le_planar        sdx2_dpcm               vorbis\nadpcm_ea_r1             bfi                     ffwavesynth             mjpegb                  pcm_s24be               sgi                     vp3\nadpcm_ea_r2             bink                    fic                     mlp                     pcm_s24daud             sgirle                  vp5\nadpcm_ea_r3             binkaudio_dct           fits                    mmvideo                 pcm_s24le               sheervideo              vp6\nadpcm_ea_xas            binkaudio_rdft          flac                    motionpixels            pcm_s24le_planar        shorten                 vp6a\nadpcm_g722              bintext                 flashsv                 movtext                 pcm_s32be               sipr                    vp6f\nadpcm_g726              bitpacked               flashsv2                mp1                     pcm_s32le               smackaud                vp7\nadpcm_g726le            bmp                     flic                    mp1float                pcm_s32le_planar        smacker                 vp8\nadpcm_ima_amv           bmv_audio               flv                     mp2                     pcm_s64be               smc                     vp8_v4l2m2m\nadpcm_ima_apc           bmv_video               fmvc                    mp2float                pcm_s64le               smvjpeg                 vp9\nadpcm_ima_dat4          brender_pix             fourxm                  mp3                     pcm_s8                  snow                    vp9_v4l2m2m\nadpcm_ima_dk3           c93                     fraps                   mp3adu                  pcm_s8_planar           sol_dpcm                vplayer\nadpcm_ima_dk4           cavs                    frwu                    mp3adufloat             pcm_u16be               sonic                   vqa\nadpcm_ima_ea_eacs       ccaption                g2m                     mp3float                pcm_u16le               sp5x                    wavpack\nadpcm_ima_ea_sead       cdgraphics              g723_1                  mp3on4                  pcm_u24be               speedhq                 webp\nadpcm_ima_iss           cdxl                    g729                    mp3on4float             pcm_u24le               srgc                    webvtt\nadpcm_ima_oki           cfhd                    gdv                     mpc7                    pcm_u32be               srt                     wmalossless\nadpcm_ima_qt            cinepak                 gif                     mpc8                    pcm_u32le               ssa                     wmapro\nadpcm_ima_rad           clearvideo              gremlin_dpcm            mpeg1_v4l2m2m           pcm_u8                  stl                     wmav1\nadpcm_ima_smjpeg        cljr                    gsm                     mpeg1video              pcm_zork                subrip                  wmav2\nadpcm_ima_wav           cllc                    gsm_ms                  mpeg2_v4l2m2m           pcx                     subviewer               wmavoice\nadpcm_ima_ws            comfortnoise            h261                    mpeg2video              pgm                     subviewer1              wmv1\nadpcm_ms                cook                    h263                    mpeg4                   pgmyuv                  sunrast                 wmv2\nadpcm_mtaf              cpia                    h263_v4l2m2m            mpeg4_v4l2m2m           pgssub                  svq1                    wmv3\nadpcm_psx               cscd                    h263i                   mpegvideo               pictor                  svq3                    wmv3image\nadpcm_sbpro_2           cyuv                    h263p                   mpl2                    pixlet                  tak                     wnv1\nadpcm_sbpro_3           dca                     h264                    msa1                    pjs                     targa                   wrapped_avframe\nadpcm_sbpro_4           dds                     h264_v4l2m2m            mscc                    png                     targa_y216              ws_snd1\nadpcm_swf               dfa                     hap                     msmpeg4v1               ppm                     tdsc                    xan_dpcm\nadpcm_thp               dirac                   hevc                    msmpeg4v2               prores                  text                    xan_wc3\nadpcm_thp_le            dnxhd                   hnm4_video              msmpeg4v3               prores_lgpl             theora                  xan_wc4\nadpcm_vima              dolby_e                 hq_hqa                  msrle                   psd                     thp                     xbin\nadpcm_xa                dpx                     hqx                     mss1                    ptx                     tiertexseqvideo         xbm\nadpcm_yamaha            dsd_lsbf                huffyuv                 mss2                    qcelp                   tiff                    xface\naic                     dsd_lsbf_planar         iac                     msvideo1                qdm2                    tmv                     xl\nalac                    dsd_msbf                idcin                   mszh                    qdmc                    truehd                  xma1\nalias_pix               dsd_msbf_planar         idf                     mts2                    qdraw                   truemotion1             xma2\nals                     dsicinaudio             iff_ilbm                mvc1                    qpeg                    truemotion2             xpm\namrnb                   dsicinvideo             imc                     mvc2                    qtrle                   truemotion2rt           xsub\namrwb                   dss_sp                  indeo2                  mxpeg                   r10k                    truespeech              xwd\namv                     dst                     indeo3                  nellymoser              r210                    tscc                    y41p\nanm                     dvaudio                 indeo4                  nuv                     ra_144                  tscc2                   ylc\nansi                    dvbsub                  indeo5                  on2avc                  ra_288                  tta                     yop\nape                     dvdsub                  interplay_acm           opus                    ralf                    twinvq                  yuv4\napng                    dvvideo                 interplay_dpcm          paf_audio               rawvideo                txd                     zero12v\naptx                    dxa                     interplay_video         paf_video               realtext                ulti                    zerocodec\naptx_hd                 dxtory                  jacosub                 pam                     rl2                     utvideo                 zlib\nass                     dxv                     jpeg2000                pbm                     roq                     v210                    zmbv\nasv1                    eac3                    jpegls                  pcm_alaw\n\nEnabled encoders:\na64multi                avrp                    h261                    msvideo1                pcm_s64le               rawvideo                v210\na64multi5               avui                    h263                    nellymoser              pcm_s8                  roq                     v308\naac                     ayuv                    h263_v4l2m2m            opus                    pcm_s8_planar           roq_dpcm                v408\nac3                     bmp                     h263p                   pam                     pcm_u16be               rv10                    v410\nac3_fixed               cinepak                 h264_v4l2m2m            pbm                     pcm_u16le               rv20                    vc2\nadpcm_adx               cljr                    huffyuv                 pcm_alaw                pcm_u24be               s302m                   vorbis\nadpcm_g722              comfortnoise            jpeg2000                pcm_f32be               pcm_u24le               sbc                     vp8_v4l2m2m\nadpcm_g726              dca                     jpegls                  pcm_f32le               pcm_u32be               sgi                     wavpack\nadpcm_g726le            dnxhd                   libx264                 pcm_f64be               pcm_u32le               snow                    webvtt\nadpcm_ima_qt            dpx                     libx264rgb              pcm_f64le               pcm_u8                  sonic                   wmav1\nadpcm_ima_wav           dvbsub                  ljpeg                   pcm_mulaw               pcx                     sonic_ls                wmav2\nadpcm_ms                dvdsub                  magicyuv                pcm_s16be               pgm                     srt                     wmv1\nadpcm_swf               dvvideo                 mjpeg                   pcm_s16be_planar        pgmyuv                  ssa                     wmv2\nadpcm_yamaha            eac3                    mlp                     pcm_s16le               png                     subrip                  wrapped_avframe\nalac                    ffv1                    movtext                 pcm_s16le_planar        ppm                     sunrast                 xbm\nalias_pix               ffvhuff                 mp2                     pcm_s24be               prores                  svq1                    xface\namv                     fits                    mp2fixed                pcm_s24daud             prores_aw               targa                   xsub\napng                    flac                    mpeg1video              pcm_s24le               prores_ks               text                    xwd\naptx                    flashsv                 mpeg2video              pcm_s24le_planar        qtrle                   tiff                    y41p\naptx_hd                 flashsv2                mpeg4                   pcm_s32be               r10k                    truehd                  yuv4\nass                     flv                     mpeg4_v4l2m2m           pcm_s32le               r210                    tta                     zlib\nasv1                    g723_1                  msmpeg4v2               pcm_s32le_planar        ra_144                  utvideo                 zmbv\nasv2                    gif                     msmpeg4v3               pcm_s64be\n\nEnabled hwaccels:\n\nEnabled parsers:\naac                     cook                    dvbsub                  h261                    mpeg4video              rv30                    vorbis\naac_latm                dca                     dvd_nav                 h263                    mpegaudio               rv40                    vp3\nac3                     dirac                   dvdsub                  h264                    mpegvideo               sbc                     vp8\nadx                     dnxhd                   flac                    hevc                    opus                    sipr                    vp9\nbmp                     dpx                     g729                    mjpeg                   png                     tak                     xma\ncavsvideo               dvaudio                 gsm                     mlp                     pnm                     vc1\n\nEnabled demuxers:\naa                      caf                     gdv                     image_webp_pipe         mtv                     rawvideo                tedcaptions\naac                     cavsvideo               genh                    image_xpm_pipe          musx                    realtext                thp\nac3                     cdg                     gif                     ingenient               mv                      redspark                threedostr\nacm                     cdxl                    gsm                     ipmovie                 mvi                     rl2                     tiertexseq\nact                     cine                    gxf                     ircam                   mxf                     rm                      tmv\nadf                     codec2                  h261                    iss                     mxg                     roq                     truehd\nadp                     codec2raw               h263                    iv8                     nc                      rpl                     tta\nads                     concat                  h264                    ivf                     nistsphere              rsd                     tty\nadx                     data                    hevc                    ivr                     nsp                     rso                     txd\naea                     daud                    hls                     jacosub                 nsv                     rtp                     ty\nafc                     dcstr                   hnm                     jv                      nut                     rtsp                    v210\naiff                    dfa                     ico                     live_flv                nuv                     s337m                   v210x\naix                     dirac                   idcin                   lmlm4                   ogg                     sami                    vag\namr                     dnxhd                   idf                     loas                    oma                     sap                     vc1\namrnb                   dsf                     iff                     lrc                     paf                     sbc                     vc1t\namrwb                   dsicin                  ilbc                    lvf                     pcm_alaw                sbg                     vivo\nanm                     dss                     image2                  lxf                     pcm_f32be               scc                     vmd\napc                     dts                     image2_alias_pix        m4v                     pcm_f32le               sdp                     vobsub\nape                     dtshd                   image2_brender_pix      matroska                pcm_f64be               sdr2                    voc\napng                    dv                      image2pipe              mgsts                   pcm_f64le               sds                     vpk\naptx                    dvbsub                  image_bmp_pipe          microdvd                pcm_mulaw               sdx                     vplayer\naptx_hd                 dvbtxt                  image_dds_pipe          mjpeg                   pcm_s16be               segafilm                vqf\naqtitle                 dxa                     image_dpx_pipe          mjpeg_2000              pcm_s16le               shorten                 w64\nasf                     ea                      image_exr_pipe          mlp                     pcm_s24be               siff                    wav\nasf_o                   ea_cdata                image_j2k_pipe          mlv                     pcm_s24le               sln                     wc3\nass                     eac3                    image_jpeg_pipe         mm                      pcm_s32be               smacker                 webm_dash_manifest\nast                     epaf                    image_jpegls_pipe       mmf                     pcm_s32le               smjpeg                  webvtt\nau                      ffmetadata              image_pam_pipe          mov                     pcm_s8                  smush                   wsaud\navi                     filmstrip               image_pbm_pipe          mp3                     pcm_u16be               sol                     wsd\navr                     fits                    image_pcx_pipe          mpc                     pcm_u16le               sox                     wsvqa\navs                     flac                    image_pgm_pipe          mpc8                    pcm_u24be               spdif                   wtv\nbethsoftvid             flic                    image_pgmyuv_pipe       mpegps                  pcm_u24le               srt                     wv\nbfi                     flv                     image_pictor_pipe       mpegts                  pcm_u32be               stl                     wve\nbfstm                   fourxm                  image_png_pipe          mpegtsraw               pcm_u32le               str                     xa\nbink                    frm                     image_ppm_pipe          mpegvideo               pcm_u8                  subviewer               xbin\nbintext                 fsb                     image_psd_pipe          mpjpeg                  pjs                     subviewer1              xmv\nbit                     g722                    image_qdraw_pipe        mpl2                    pmp                     sup                     xvag\nbmv                     g723_1                  image_sgi_pipe          mpsub                   pva                     svag                    xwma\nboa                     g726                    image_sunrast_pipe      msf                     pvf                     swf                     yop\nbrstm                   g726le                  image_svg_pipe          msnwc_tcp               qcp                     tak                     yuv4mpegpipe\nc93                     g729                    image_tiff_pipe         mtaf                    r3d\n\nEnabled muxers:\na64                     data                    gsm                     md5                     nut                     pcm_u32be               stream_segment\nac3                     daud                    gxf                     microdvd                oga                     pcm_u32le               sup\nadts                    dirac                   h261                    mjpeg                   ogg                     pcm_u8                  swf\nadx                     dnxhd                   h263                    mkvtimestamp_v2         ogv                     psp                     tee\naiff                    dts                     h264                    mlp                     oma                     rawvideo                tg2\namr                     dv                      hash                    mmf                     opus                    rm                      tgp\napng                    eac3                    hds                     mov                     pcm_alaw                roq                     truehd\naptx                    f4v                     hevc                    mp2                     pcm_f32be               rso                     tta\naptx_hd                 ffmetadata              hls                     mp3                     pcm_f32le               rtp                     uncodedframecrc\nasf                     fifo                    ico                     mp4                     pcm_f64be               rtp_mpegts              vc1\nasf_stream              fifo_test               ilbc                    mpeg1system             pcm_f64le               rtsp                    vc1t\nass                     filmstrip               image2                  mpeg1vcd                pcm_mulaw               sap                     voc\nast                     fits                    image2pipe              mpeg1video              pcm_s16be               sbc                     w64\nau                      flac                    ipod                    mpeg2dvd                pcm_s16le               scc                     wav\navi                     flv                     ircam                   mpeg2svcd               pcm_s24be               segafilm                webm\navm2                    framecrc                ismv                    mpeg2video              pcm_s24le               segment                 webm_chunk\nbit                     framehash               ivf                     mpeg2vob                pcm_s32be               singlejpeg              webm_dash_manifest\ncaf                     framemd5                jacosub                 mpegts                  pcm_s32le               smjpeg                  webp\ncavsvideo               g722                    latm                    mpjpeg                  pcm_s8                  smoothstreaming         webvtt\ncodec2                  g723_1                  lrc                     mxf                     pcm_u16be               sox                     wtv\ncodec2raw               g726                    m4v                     mxf_d10                 pcm_u16le               spdif                   wv\ncrc                     g726le                  matroska                mxf_opatom              pcm_u24be               spx                     yuv4mpegpipe\ndash                    gif                     matroska_audio          null                    pcm_u24le               srt\n\nEnabled protocols:\nasync                   data                    gopher                  icecast                 pipe                    rtp                     tee\ncache                   ffrtmphttp              hls                     md5                     prompeg                 srtp                    udp\nconcat                  file                    http                    mmsh                    rtmp                    subfile                 udplite\ncrypto                  ftp                     httpproxy               mmst                    rtmpt                   tcp                     unix\n\nEnabled filters:\nabench                  asendcmd                cover_rect              flanger                 lutyuv                  realtime                split\nabitscope               asetnsamples            crop                    floodfill               mandelbrot              remap                   spp\nacompressor             asetpts                 cropdetect              format                  maskedclamp             removegrain             ssim\nacontrast               asetrate                crossfeed               fps                     maskedmerge             removelogo              stereo3d\nacopy                   asettb                  crystalizer             framepack               mcdeint                 repeatfields            stereotools\nacrossfade              ashowinfo               curves                  framerate               mcompand                replaygain              stereowiden\nacrusher                asidedata               datascope               framestep               mergeplanes             reverse                 streamselect\nadelay                  asplit                  dcshift                 fspp                    mestimate               rgbtestsrc              super2xsai\nadrawgraph              astats                  dctdnoiz                gblur                   metadata                roberts                 superequalizer\naecho                   astreamselect           deband                  geq                     midequalizer            rotate                  surround\naemphasis               atadenoise              decimate                gradfun                 minterpolate            sab                     swaprect\naeval                   atempo                  deconvolve              haas                    mix                     scale                   swapuv\naevalsrc                atrim                   deflate                 haldclut                movie                   scale2ref               tblend\nafade                   avectorscope            deflicker               haldclutsrc             mpdecimate              select                  telecine\nafftfilt                avgblur                 dejudder                hdcd                    mptestsrc               selectivecolor          testsrc\nafifo                   bandpass                delogo                  headphone               negate                  sendcmd                 testsrc2\nafir                    bandreject              deshake                 hflip                   nlmeans                 separatefields          threshold\naformat                 bass                    despill                 highpass                nnedi                   setdar                  thumbnail\nagate                   bbox                    detelecine              hilbert                 noformat                setfield                tile\nahistogram              bench                   dilation                histeq                  noise                   setpts                  tinterlace\naiir                    biquad                  displace                histogram               normalize               setrange                tlut2\nainterleave             bitplanenoise           doubleweave             hqdn3d                  null                    setsar                  tonemap\nalimiter                blackdetect             drawbox                 hqx                     nullsink                settb                   transpose\nallpass                 blackframe              drawgraph               hstack                  nullsrc                 showcqt                 treble\nallrgb                  blend                   drawgrid                hue                     oscilloscope            showfreqs               tremolo\nallyuv                  boxblur                 drmeter                 hwdownload              overlay                 showinfo                trim\naloop                   bwdif                   dynaudnorm              hwmap                   owdenoise               showpalette             unpremultiply\nalphaextract            cellauto                earwax                  hwupload                pad                     showspectrum            unsharp\nalphamerge              channelmap              ebur128                 hysteresis              palettegen              showspectrumpic         uspp\namerge                  channelsplit            edgedetect              idet                    paletteuse              showvolume              vaguedenoiser\nametadata               chorus                  elbg                    il                      pan                     showwaves               vectorscope\namix                    chromakey               entropy                 inflate                 perms                   showwavespic            vflip\namovie                  ciescope                eq                      interlace               perspective             shuffleframes           vfrdet\nanequalizer             codecview               equalizer               interleave              phase                   shuffleplanes           vibrato\nanoisesrc               color                   erosion                 join                    pixdesctest             sidechaincompress       vignette\nanull                   colorbalance            extractplanes           kerndeint               pixscope                sidechaingate           vmafmotion\nanullsink               colorchannelmixer       extrastereo             lenscorrection          pp                      sidedata                volume\nanullsrc                colorkey                fade                    life                    pp7                     signalstats             volumedetect\napad                    colorlevels             fftfilt                 limiter                 premultiply             signature               vstack\naperms                  colormatrix             field                   loop                    prewitt                 silencedetect           w3fdif\naphasemeter             colorspace              fieldhint               loudnorm                pseudocolor             silenceremove           waveform\naphaser                 compand                 fieldmatch              lowpass                 psnr                    sine                    weave\napulsator               compensationdelay       fieldorder              lumakey                 pullup                  smartblur               xbr\narealtime               concat                  fifo                    lut                     qp                      smptebars               yadif\naresample               convolution             fillborders             lut2                    random                  smptehdbars             yuvtestsrc\nareverse                convolve                find_rect               lut3d                   readeia608              sobel                   zoompan\naselect                 copy                    firequalizer            lutrgb                  readvitc                spectrumsynth\n\nEnabled bsfs:\naac_adtstoasc           eac3_core               h264_mp4toannexb        hevc_mp4toannexb        mov2textsub             noise                   trace_headers\nchomp                   extract_extradata       h264_redundant_pps      imx_dump_header         mp3_header_decompress   null                    vp9_raw_reorder\ndca_core                filter_units            hapqa_extract           mjpeg2jpeg              mpeg2_metadata          remove_extradata        vp9_superframe\ndump_extradata          h264_metadata           hevc_metadata           mjpega_dump_header      mpeg4_unpack_bframes    text2movsub             vp9_superframe_split\n\nEnabled indevs:\nfbdev                   lavfi                   oss                     v4l2\n\nEnabled outdevs:\nfbdev                   oss                     v4l2</code></pre></div><p><b>总结下来就是以下几点：</b></p><p>1，启用了几个输入输出设备；启用了（很）多个bsfs、protocol、filter、muxer、demuxer、parser、encoder、decoder；</p><p>2，没有启用hwaccels；</p><p>3，编译完要产出的库：avcodec、avfilter、avformat、avutil 、postproc、swresample、swscale、avdevice；要产出的可执行文件：ffmpeg、ffprobe；</p><p>4，使用了这些三方库：iconv、libx264、lzma、xlib、zlib；</p><p>5，因为要使用libx264编码库，所以加上了--enable-libx264；又因为libx264是GPL条款，比ffmpeg的LGPL更加严格，所以还需要加上--enable-gpl。</p><p>6，启用了pthreads线程支持；没有去掉符号表；禁用了编译优化；禁用了大量x86之上的强大指令集（编译时间因此而大大减少）：</p><div class=\"highlight\"><pre><code class=\"language-text\">MMX enabled               no\nMMXEXT enabled            no\n3DNow! enabled            no\n3DNow! extended enabled   no\nSSE enabled               no\nSSSE3 enabled             no\nAESNI enabled             no\nAVX enabled               no\nAVX2 enabled              no\nAVX-512 enabled           no\nXOP enabled               no\nFMA3 enabled              no\nFMA4 enabled              no\ni686 features enabled     yes\nCMOV is fast              yes\nEBX available             yes\nEBP available             no\ndebug symbols             yes\nstrip symbols             no\noptimize for size         no\noptimizations             no\nstatic                    no\nshared                    yes\npostprocessing support    yes\nnetwork support           yes\nthreading support         pthreads</code></pre></div><p>基于此编译参数，gemfield得出了一个初步的性能报告。注意，下面的结果只具有参考意义（因为不同的硬件平台等，Gemfield使用的CPU是Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz）：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~/test/PyAV$ python remux.py \ntry to open stream /home/gemfield/gemfield.mp4\nbefore av open\nafter av open\n(&#39;start_time: &#39;, 1527351675.136291)\n(&#39;end_time: &#39;, 1527351717.412348)\n(4554, 2398, 2153, 42.27605700492859)\n(&#39;time per video frame: &#39;, 0.017629715181371387)\n(&#39;video frames per second: &#39;, 56.722413817363304)</code></pre></div><p>一秒中大约decode 56个视频帧。</p><p><b>3，更改ffmpeg的编译参数</b></p><p>去掉configure中任何不利于性能提升的参数，得到新的编译参数：</p><div class=\"highlight\"><pre><code class=\"language-text\"> ./configure --disable-static --enable-shared --disable-doc --enable-libx264 --enable-gpl\n......\nMMX enabled               yes\nMMXEXT enabled            yes\n3DNow! enabled            yes\n3DNow! extended enabled   yes\nSSE enabled               yes\nSSSE3 enabled             yes\nAESNI enabled             yes\nAVX enabled               yes\nAVX2 enabled              yes\nAVX-512 enabled           yes\nXOP enabled               yes\nFMA3 enabled              yes\nFMA4 enabled              yes\ni686 features enabled     yes\nCMOV is fast              yes\nEBX available             yes\nEBP available             yes\ndebug symbols             yes\nstrip symbols             yes\noptimize for size         no\noptimizations             yes\nstatic                    no\nshared                    yes\npostprocessing support    yes\nnetwork support           yes\nthreading support         pthreads</code></pre></div><p>基于此编译参数，gemfield得出了又一个初步的性能报告。注意，下面的结果只具有参考意义（因为不同的硬件平台等，Gemfield使用的CPU是Intel(R) Core(TM) i5-7200U CPU @ 2.50GHz）：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ThinkPad-X1C:~/test/PyAV$ python remux.py \ntry to open stream /home/gemfield/gemfield.mp4\nbefore av open\nafter av open\n(&#39;start_time: &#39;, 1527384957.096571)\n(&#39;end_time: &#39;, 1527384963.782417)\n(4554, 2398, 2153, 6.6858460903167725)\n(&#39;time per video frame: &#39;, 0.0027880926148109975)\n(&#39;video frames per second: &#39;, 358.66814276102843)</code></pre></div><p>一秒中大约decode 358个视频帧。</p><p><b>4，启用--enable-static</b></p><p>不可以，python封装需要动态库。</p><p><b>5，让ffmpeg只静态链接第三方库</b></p><p>configure的时候添加--pkg-config-flags=&#34;--static&#34; 和 --extra-libs=&#34;-lpthread -lm&#34;（如果能检测pthreads，默认就有）：</p><div class=\"highlight\"><pre><code class=\"language-text\">./configure \\\n    --disable-static \\\n    --enable-shared \\\n    --disable-doc \\\n    --enable-libx264 \\\n    --enable-gpl \\\n    --pkg-config-flags=&#34;--static&#34;\\\n    --extra-libs=&#34;-lpthread -lm&#34; \\\n......</code></pre></div><p>测试效果：没有什么变化。</p><p><b>6，使用官方提供的优化tips</b></p><p> configure的时候添加 --extra-cflags=&#34;-march=native&#34;  和 --enable-hardcoded-tables </p><div class=\"highlight\"><pre><code class=\"language-text\">./configure \\\n    --disable-static \\\n    --enable-shared \\\n    --disable-doc \\\n    --enable-libx264 \\\n    --enable-gpl \\\n    --pkg-config-flags=&#34;--static&#34; \\\n    --extra-libs=&#34;-lpthread -lm&#34; \\\n    --extra-cflags=&#34;-march=native&#34; \\\n    --enable-hardcoded-tables \\\n......</code></pre></div><p>测试效果：没有什么变化。</p>", 
            "topic": [
                {
                    "tag": "FFmpeg", 
                    "tagLink": "https://api.zhihu.com/topics/19608940"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "编译", 
                    "tagLink": "https://api.zhihu.com/topics/19629384"
                }
            ], 
            "comments": [
                {
                    "userName": "关中刀客在青岛", 
                    "userLink": "https://www.zhihu.com/people/c31da1c57386a9bf1159a9ce4829c6cf", 
                    "content": "很专业了啊", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "啊？你怎麼看到這篇文章的？", 
                            "likes": 0, 
                            "replyToAuthor": "关中刀客在青岛"
                        }, 
                        {
                            "userName": "关中刀客在青岛", 
                            "userLink": "https://www.zhihu.com/people/c31da1c57386a9bf1159a9ce4829c6cf", 
                            "content": "<p>知乎消息提醒</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Gemfield"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>我用conda安装pyav，conda会自动安装ffmpeg，运行ffmpeg看到的编译选项是--disable-doc --disable-openssl --enable-shared --enable-static --extra-cflags='-Wall -g -m64 -pipe -O3 -march=x86-64 -fPIC' --extra-cxxflags='-Wall -g -m64 -pipe -O3 -march=x86-64 -fPIC' --extra-libs='-lpthread -lm -lz' --enable-zlib --enable-pic --enable-pthreads --enable-gpl --enable-version3 --enable-hardcoded-tables --enable-avresample --enable-libfreetype --enable-gnutls --enable-libx264 --enable-libopenh264</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "Gemfield", 
                            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                            "content": "👍", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "Gemfield", 
                    "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
                    "content": "<p>默认的configure选项是 ./configure --disable-static --enable-shared --disable-doc --disable-optimizations --disable-mmx --enable-debug=3 --enable-gpl --enable-libx264 --disable-stripping --prefix=/opt/PyAV/vendor/build/ffmpeg-4.0，可以看到禁止掉了各种优化</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/37519492", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 11, 
            "title": "使用nvidia-docker2", 
            "content": "<h2><b>背景</b></h2><p>最近要使用nvidia-docker2，并且使用docker-compose来编排nvidia-docker2的容器。</p><p>按照本文步骤执行前，你需要安装好:</p><ul><li>nvidia驱动：<a href=\"https://zhuanlan.zhihu.com/p/28786117\" class=\"internal\">Kubuntu 16.04上安装Nvidia GPU驱动 + CUDA + cuDNN</a></li><li>docker：<a href=\"https://link.zhihu.com/?target=https%3A//docs.docker.com/install/linux/docker-ce/ubuntu/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Get Docker CE for Ubuntu</a></li><li>还需要安装好docker-compose: <a href=\"https://link.zhihu.com/?target=https%3A//docs.docker.com/compose/install/%23install-compose\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Install Docker Compose</a></li></ul><h2><b>安装nvidia-docker2 的repo</b></h2><p><b>1，安装nvidia-docker2的repo</b></p><p>其实，nvidia-docker 1.0也是同样的repo。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\ngemfield@ubuntu:~$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ngemfield@ubuntu:~$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list\ngemfield@ubuntu:~$ sudo apt-get update</code></pre></div><p><b>2，安装nvidia-docker2软件包</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ sudo apt-get install nvidia-docker2\ngemfield@ubuntu:~$ sudo pkill -SIGHUP dockerd</code></pre></div><p><b>3，配置daemon的默认运行时</b></p><p>因为gemfield需要在docker-compose中去编排nvidia docker 容器，因此需要设置docker的默认runtime为nvidia。在/etc/docker/daemon.json 文件中配置如下内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~# cat /etc/docker/daemon.json\n{\n    &#34;default-runtime&#34;: &#34;nvidia&#34;,\n    &#34;runtimes&#34;: {\n        &#34;nvidia&#34;: {\n            &#34;path&#34;: &#34;/usr/bin/nvidia-container-runtime&#34;,\n            &#34;runtimeArgs&#34;: []\n        }\n    }\n}</code></pre></div><p>其实，在安装完成nvidia-docker2之后，nvidia-docker2已经默认在/etc/docker/daemon.json文件中写入了以下内容：</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;runtimes&#34;: {\n        &#34;nvidia&#34;: {\n            &#34;path&#34;: &#34;/usr/bin/nvidia-container-runtime&#34;,\n            &#34;runtimeArgs&#34;: []\n        }\n    }\n}</code></pre></div><p>我们所做的工作其实就是在第一行加上了&#34;default-runtime&#34;: &#34;nvidia&#34;。</p><p>你也可以设置代理来加快在国内的使用：</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;default-runtime&#34;: &#34;nvidia&#34;,\n    &#34;runtimes&#34;: {\n        &#34;nvidia&#34;: {\n            &#34;path&#34;: &#34;/usr/bin/nvidia-container-runtime&#34;,\n            &#34;runtimeArgs&#34;: [],\n            &#34;registry-mirrors&#34;: [&#34;https://gemfield.mirror.aliyuncs.com&#34;]\n        }\n    }\n}</code></pre></div><p><b>4，重启docker服务</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ sudo systemctl restart docker\n#再次检查状态\ngemfield@ubuntu:~$ systemctl status docker\n● docker.service - Docker Application Container Engine\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2018-05-31 03:40:26 UTC; 40min ago\n     Docs: https://docs.docker.com\n Main PID: 6514 (dockerd)\n    Tasks: 92\n   Memory: 44.2M\n      CPU: 36.471s\n   CGroup: /system.slice/docker.service\n           ├─6514 /usr/bin/dockerd -H fd://\n           └─6527 docker-containerd --config /var/run/docker/containerd/containerd.toml</code></pre></div><h2><b>重创到来</b></h2><p><b>1，错误信息</b></p><p>正当我们满欢喜悦准备庆祝的时候，灾难来了。在执行docker命令的时候：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ docker run --runtime=nvidia --rm nvidia/cuda:8.0-cudnn6-runtime-ubuntu16.04 bash\ndocker: Error response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused &#34;process_linux.go:402: container init caused \\&#34;process_linux.go:385: running prestart hook 1 caused \\\\\\&#34;error running hook: exit status 1, stdout: , stderr: exec command: [/usr/bin/nvidia-container-cli --load-kmods configure --ldconfig=@/sbin/ldconfig.real --device=all --compute --utility --require=cuda&gt;=8.0 --pid=3741 /var/lib/docker/overlay2/4a727d26774c8508ad065790aa669d57f3a627c3664a8dc528d8b5967cad986c/merged]\\\\\\\\nnvidia-container-cli: initialization error: driver error: failed to process request\\\\\\\\n\\\\\\&#34;\\&#34;&#34;: unknown.</code></pre></div><p>错误信息：nvidia-container-cli: initialization error: driver error: failed to process request。</p><p><b>2，看log信息</b></p><p>遇到这种问题，我们可以使用nvidia-container-cli -k -d /dev/tty info 来查看下具体的问题（或者使用命令nvidia-container-cli --debug=/dev/stdout list --compute）：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ sudo nvidia-container-cli -k -d /dev/tty info    \n\n-- WARNING, the following logs are for debugging purposes only --\n\nI0531 09:38:43.912579 7397 nvc.c:274] initializing library context (version=1.0.0, build=163054a04b21c4455c8cae7e47873d9f2a091f55)\n......\nnvidia-container-cli: initialization error: load library failed: libcuda.so.1: cannot open shared object file: no such file or directory\n......</code></pre></div><p>很明显，错误原因就是libcuda.so.1: cannot open shared object file: no such file or directory。</p><p><b>3，确认错误</b></p><p>那么这个libcuda.so.1到底有没有呢？我们使用如下命令进行检查：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ ldconfig -p | grep cuda\n        libicudata.so.55 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libicudata.so.55</code></pre></div><p>果然没有这个库。libcuda.so.1这个库是来自于nvidia驱动，那为什么该系统上缺失呢？我们在有这个库的Ubuntu上使用dpkg -S命令来检查下它属于哪个package：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ dpkg -S /usr/lib/x86_64-linux-gnu/libcuda.so.1\nlibcuda1-384: /usr/lib/x86_64-linux-gnu/libcuda.so.1</code></pre></div><p>按道理说，安装驱动的时候会自动安装这个libcuda1-384包的，估计是什么历史遗留问题，或者是purge 又install把包的依赖关系搞坏了，因此现在需要重新安装。</p><h2><b>庆祝</b></h2><p>在经过手工安装libcuda1-384 package后，nvidia-docker命令可以愉快的运行了。我们又可以去解决下一个问题了。</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield@ubuntu:~$ sudo apt install libcuda1-384</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "NVIDIA（英伟达）", 
                    "tagLink": "https://api.zhihu.com/topics/19562754"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Docker Compose", 
                    "tagLink": "https://api.zhihu.com/topics/20104983"
                }
            ], 
            "comments": [
                {
                    "userName": "关中刀客在青岛", 
                    "userLink": "https://www.zhihu.com/people/c31da1c57386a9bf1159a9ce4829c6cf", 
                    "content": "博主这个头像很年轻啊", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "BobDu", 
                    "userLink": "https://www.zhihu.com/people/24494c5dd714f4020c5a0ea45b77dada", 
                    "content": "<p>此文质量相当之高  </p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-fa3cb6bc9ec57da84ab53a60f48d0c6f.gif\" data-width=\"\" data-height=\"\">[棒]</a>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "突袭Kernel", 
                    "userLink": "https://www.zhihu.com/people/57ab8fd55dfde2f9fd3b91990a1248e8", 
                    "content": "<p>楼主，我想问一下，配这个环境需要什么硬件配置啊？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "cheri", 
                    "userLink": "https://www.zhihu.com/people/86d8649b562f637efcad167d43c19be8", 
                    "content": "<p>通过博主这篇文章，我把nvidia-docker装上了，感谢！！！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/53305541", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 7, 
            "title": "使用ffmpeg库进行YUV420到RGB的转化", 
            "content": "<h2><b>背景</b></h2><p>最近使用ffmpeg库在进行一个视频分析的相关项目。因为这个行业内原始视频的编码原因（从历史到硬件到存储空间，各种原因），使用ffmpeg在decode H264的视频的时候，一般都会decode为YUV420格式的raw data。这就需要进一步转换到RGB颜色空间，方便各种python的库或者是神经网络框架做分析。</p><h2><b>YUV420格式的raw data在哪里呢？</b></h2><p>经过ffmpeg相关的API进行解码后，YUV420的data就存放在AVFrame结构体里的data成员中，data成员是个指针数组，一共有8个元素（也就是8个指针），其中，每个指针指向的都是一个unsigned char* 的buffer。</p><p>当decode为YUV420格式的时候，data只有前3个unsigned char* 指针被使用了，分别存放的是Y、U、V的raw data，其中U、V的raw data长度是Y的四分之一；</p><p>当decode为RGB或者BGR的时候，data只有第一个unsigned char* 指针被使用了，存放的就是RGB或者BGR的raw data。</p><h2><b>转换方式一：逐像素替换</b></h2><p>因为YUV和RGB的相关性是可以通过简单的线性公式计算出来的（很容易搜索到相关的介绍）。相关的代码如下所示：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"n\">buffer_len</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">height</span><span class=\"p\">;</span>\n<span class=\"n\">img_width</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">width</span><span class=\"p\">;</span>\n<span class=\"n\">img_height</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">height</span><span class=\"p\">;</span>\n<span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"p\">)</span><span class=\"o\">*</span> <span class=\"n\">buffer_len</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n<span class=\"kt\">int</span> <span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">img_height</span><span class=\"p\">;</span> <span class=\"n\">y</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">img_width</span><span class=\"p\">;</span> <span class=\"n\">x</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"kt\">int</span> <span class=\"n\">indexY</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">*</span> <span class=\"n\">img_width</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">indexU</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">img_width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">indexV</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">img_width</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n        <span class=\"n\">uint8_t</span> <span class=\"n\">Y</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">indexY</span><span class=\"p\">];</span>\n        <span class=\"n\">uint8_t</span> <span class=\"n\">U</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">indexU</span><span class=\"p\">];</span>\n        <span class=\"n\">uint8_t</span> <span class=\"n\">V</span> <span class=\"o\">=</span> <span class=\"n\">pFrame</span><span class=\"o\">-&gt;</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">][</span><span class=\"n\">indexV</span><span class=\"p\">];</span>\n        \n        <span class=\"kt\">int</span> <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">+</span> <span class=\"mf\">1.402</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">V</span> <span class=\"o\">-</span> <span class=\"mi\">128</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">-</span> <span class=\"mf\">0.34413</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">U</span> <span class=\"o\">-</span> <span class=\"mi\">128</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.71414</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">V</span> <span class=\"o\">-</span> <span class=\"mi\">128</span><span class=\"p\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">Y</span> <span class=\"o\">+</span> <span class=\"mf\">1.772</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">U</span> <span class=\"o\">-</span> <span class=\"mi\">128</span><span class=\"p\">);</span>\n        <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"p\">;</span>\n        <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">G</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"p\">;</span>\n        <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">B</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"p\">;</span>\n        <span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">R</span> <span class=\"o\">&gt;</span> <span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">255</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"p\">;</span>\n        <span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">G</span> <span class=\"o\">&gt;</span> <span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">255</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"p\">;</span>\n        <span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">B</span> <span class=\"o\">&gt;</span> <span class=\"mi\">255</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"mi\">255</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"p\">;</span>\n        <span class=\"n\">buffer</span><span class=\"p\">[(</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"n\">img_width</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">channels</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"p\">)</span><span class=\"n\">R</span><span class=\"p\">;</span>\n        <span class=\"n\">buffer</span><span class=\"p\">[(</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"n\">img_width</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">channels</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"p\">)</span><span class=\"n\">G</span><span class=\"p\">;</span>\n        <span class=\"n\">buffer</span><span class=\"p\">[(</span><span class=\"n\">y</span><span class=\"o\">*</span><span class=\"n\">img_width</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">channels</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"p\">)</span><span class=\"n\">B</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这种方式优点是看起来简单，缺点是慢！想想看，1080p的图片还不得循环百万次以上！还有，鲁棒性差！</p><h2><b>转换方式二：使用矩阵</b></h2><p>这种方式使用矩阵运算来加快运行速度，这种方式速度可以快点，但鲁棒性和上面的一样：</p><div class=\"highlight\"><pre><code class=\"language-text\">def ConvertYUVtoRGB(yuv_planes)\n    plane_y  = yuv_planes[0]\n    plane_u  = yuv_planes[1]\n    plane_v  = yuv_planes[2]\n     \n    height = plane_y.shape[0]\n    width  = plane_y.shape[1]\n     \n    # upsample if YV12\n    plane_u = ndimage.zoom(plane_u, 2, order=0)\n    plane_v = ndimage.zoom(plane_v, 2, order=0)\n    # alternativelly can perform upsampling with numpy.repeat()\n     \n    # reshape\n    plane_y  = plane_y.reshape((plane_y.shape[0], plane_y.shape[1], 1))\n    plane_u  = plane_u.reshape((plane_u.shape[0], plane_u.shape[1], 1))\n    plane_v  = plane_v.reshape((plane_v.shape[0], plane_v.shape[1], 1))\n     \n    # make YUV of shape [height, width, color_plane]\n    yuv = np.concatenate((plane_y, plane_u, plane_v), axis=2)\n     \n    # according to ITU-R BT.709\n    yuv[:,:, 0] = yuv[:,:, 0].clip(16, 235).astype(yuv.dtype) - 16\n    yuv[:,:,1:] = yuv[:,:,1:].clip(16, 240).astype(yuv.dtype) - 128\n     \n    A = np.array([[1.164,  0.000,  1.793],\n                  [1.164, -0.213, -0.533],\n                  [1.164,  2.112,  0.000]])\n     \n    # our result\n    rgb = np.dot(yuv, A.T).clip(0, 255).astype(&#39;uint8&#39;)\n     \n    return rgb</code></pre></div><h2><b>转换方式三：使用OpenCV</b></h2><p>使用opencv的cvtColor函数进行颜色空间的转换：</p><div class=\"highlight\"><pre><code class=\"language-python3\"><span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">crs</span><span class=\"p\">,</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">COLOR_YUV2BGR</span><span class=\"p\">)</span></code></pre></div><h2><b>转换方式四：ffmpeg自身的sws_scale</b></h2><p>使用sws_scale函数进行转换的效率是极高的。</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;libswscale/swscale.h&gt;\nSwsContext* swsContext = swsContext = sws_getContext(pFrame-&gt;width, pFrame-&gt;height, AV_PIX_FMT_YUV420P,pFrame-&gt;width, pFrame-&gt;height, AV_PIX_FMT_BGR24,\n                          NULL, NULL, NULL, NULL);\n\nint linesize[8] = {pFrame-&gt;linesize[0] * 3};\nint num_bytes = av_image_get_buffer_size(AV_PIX_FMT_BGR24, pFrame-&gt;width, pFrame-&gt;height, 1);\np_global_bgr_buffer = (uint8_t*) malloc(num_bytes * sizeof(uint8_t));\nuint8_t* bgr_buffer[8] = {p_global_bgr_buffer};\n\nsws_scale(swsContext, pFrame-&gt;data, pFrame-&gt;linesize, 0, pFrame-&gt;height, bgr_buffer, linesize);\n//bgr_buffer[0] is the BGR raw data</code></pre></div><h2><b>庆祝</b></h2><p>有了RGB或者BGR颜色空间的raw data后，我们就可以为所欲为了。可以送给CV的Mat结构体，可以使用numpy进行构造，也可以啥都不干。</p>", 
            "topic": [
                {
                    "tag": "颜色空间", 
                    "tagLink": "https://api.zhihu.com/topics/19794669"
                }, 
                {
                    "tag": "FFmpeg", 
                    "tagLink": "https://api.zhihu.com/topics/19608940"
                }, 
                {
                    "tag": "RGB", 
                    "tagLink": "https://api.zhihu.com/topics/19592921"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>感谢, 博主写的很通俗易懂.<br><br>我有一点没看懂, int indexU = y / 2 * img_width / 2 + x / 2;<br>如果y=0, x=1, indexU就是0.5, indexU是小数, pFrame-&gt;data[0][indexY]这可以从pFrame里面获取到数据吗, indexY 不是数组下标吗?</p><p></p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54859580", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 1, 
            "title": "从程序到进程", 
            "content": "<h2><b>背景</b></h2><p>本文很久之前（2010年左右）由Gemfield发表于CivilNet Blog，2017年的时候CivilNet Blog停止服务，于是gemfield迁移本文至此。</p><h2><b>正文</b></h2><p>本文以《<a href=\"https://zhuanlan.zhihu.com/p/54857629\" class=\"internal\">从代码到可执行文件</a>》为基础，阅读本文前确保你熟悉了《<a href=\"https://zhuanlan.zhihu.com/p/54857629\" class=\"internal\">从代码到可执行文件</a>》中提到的概念。</p><a href=\"https://zhuanlan.zhihu.com/p/54857629\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">Gemfield：从代码到可执行文件</a><p>本文中的示例程序仍是《从代码到可执行文件》中的gemfield.c。代码如下：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span> <span class=\"n\">gemfield</span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">];</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"n\">input</span> <span class=\"n\">gemfield</span><span class=\"err\">’</span><span class=\"n\">s</span> <span class=\"nl\">blog</span><span class=\"p\">:</span> <span class=\"err\">“</span><span class=\"p\">);</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"o\">%</span><span class=\"n\">s</span><span class=\"err\">”</span><span class=\"p\">,</span><span class=\"n\">gemfield</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"n\">gemfield</span><span class=\"err\">’</span><span class=\"n\">s</span> <span class=\"n\">blog</span> <span class=\"n\">is</span> <span class=\"o\">%</span><span class=\"n\">s</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">”</span><span class=\"p\">,</span><span class=\"n\">gemfield</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><b>第一步：编译</b></p><div class=\"highlight\"><pre><code class=\"language-text\">gcc gemfield.c -o gemfield</code></pre></div><p><b>第二步：运行</b></p><div class=\"highlight\"><pre><code class=\"language-text\">./gemfield &amp;</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">[1] 19649\ngemfield@gemfield:~$ input gemfield’s blog:</code></pre></div><p><b>第三步：ps命令</b></p><div class=\"highlight\"><pre><code class=\"language-text\">ps -e|grep gemfield</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">19649 00:00:00 gemfield</code></pre></div><p>表明进程id为19649的gemfield进程已经产生了。</p><p><b>第四步：查看进程gemfield的cmdline</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat cmdline</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">./gemfield</code></pre></div><p>正是程序运行的参数</p><p><b>第五步：查看进程gemfield的环境参数</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat environ</code></pre></div><p>输出一堆环境变量</p><p><b>第六步：查看进程gemfield所使用的文件</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\nls fd</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">0 1 2</code></pre></div><p>说明目前gemfield进程只使用了标准输入、输出、错误。</p><p><b>第七步、查看进程gemfield所使用的io</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat io</code></pre></div><p>请访问相关文档来查看输出的含义</p><p><b>第八步：查看进程gemfield的内存映射</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat maps</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">08048000-08049000 r-xp 00000000 fc:00 12845748 /home/gemfield/gemfield\n08049000-0804a000 r–p 00000000 fc:00 12845748 /home/gemfield/gemfield\n0804a000-0804b000 rw-p 00001000 fc:00 12845748 /home/gemfield/gemfield\nb75c0000-b75c1000 rw-p 00000000 00:00 0 \nb75c1000-b7737000 r-xp 00000000 fc:00 10747923 /lib/i386-linux-gnu/libc-2.13.so\nb7737000-b7739000 r–p 00176000 fc:00 10747923 /lib/i386-linux-gnu/libc-2.13.so\nb7739000-b773a000 rw-p 00178000 fc:00 10747923 /lib/i386-linux-gnu/libc-2.13.so\nb773a000-b773d000 rw-p 00000000 00:00 0 \nb7741000-b7745000 rw-p 00000000 00:00 0 \nb7745000-b7746000 r-xp 00000000 00:00 0 [vdso]\nb7746000-b7764000 r-xp 00000000 fc:00 10747920 /lib/i386-linux-gnu/ld-2.13.so\nb7764000-b7765000 r–p 0001d000 fc:00 10747920 /lib/i386-linux-gnu/ld-2.13.so\nb7765000-b7766000 rw-p 0001e000 fc:00 10747920 /lib/i386-linux-gnu/ld-2.13.so\nbfd61000-bfd82000 rw-p 00000000 00:00 0 [stack]</code></pre></div><p>cat smaps</p><p>输出相关信息。</p><p><b>第九步：查看进程gemfield的状态</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat status</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">Name: gemfield\nState: T (stopped)\nTgid: 19649\nPid: 19649\nPPid: 19548\nTracerPid: 0\nUid: 1000 1000 1000 1000\nGid: 1000 1000 1000 1000\nFDSize: 256\nGroups: 4 20 24 46 112 113 114 1000 \nVmPeak: 1836 kB\nVmSize: 1820 kB\nVmLck: 0 kB\nVmHWM: 248 kB\nVmRSS: 248 kB\nVmData: 36 kB\nVmStk: 136 kB\nVmExe: 4 kB\nVmLib: 1616 kB\nVmPTE: 16 kB\nVmSwap: 0 kB\nThreads: 1\nSigQ: 0/31392\nSigPnd: 0000000000000000\nShdPnd: 0000000000000000\nSigBlk: 0000000000000000\nSigIgn: 0000000000000000\nSigCgt: 0000000000000000\nCapInh: 0000000000000000\nCapPrm: 0000000000000000\nCapEff: 0000000000000000\nCapBnd: ffffffffffffffff\nCpus_allowed: f\nCpus_allowed_list: 0-3\nMems_allowed: 1\nMems_allowed_list: 0\nvoluntary_ctxt_switches: 1\nnonvoluntary_ctxt_switches: 3</code></pre></div><p><b>第十步、查看进程gemfield的调度信息</b></p><p>切换到内核映像 proc目录下：</p><div class=\"highlight\"><pre><code class=\"language-text\">cd /proc/19649\ncat sched</code></pre></div><p>当查看这个文件时， 定义在kernel/sched_debug.c中的proc_sched_show_task() 函数将会被调用。输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield (19649, #threads: 1)\n———————————————————\nse.exec_start : 2573022261.330409\nse.vruntime : 271.916852\nse.sum_exec_runtime : 0.569372\nse.statistics.wait_start : 0.000000\nse.statistics.sleep_start : 0.000000\nse.statistics.block_start : 0.000000\nse.statistics.sleep_max : 0.000000\nse.statistics.block_max : 0.000000\nse.statistics.exec_max : 0.384138\nse.statistics.slice_max : 0.000000\nse.statistics.wait_max : 0.024456\nse.statistics.wait_sum : 0.030986\nse.statistics.wait_count : 5\nse.statistics.iowait_sum : 0.000000\nse.statistics.iowait_count : 0\nse.nr_migrations : 2\nse.statistics.nr_migrations_cold : 0\nse.statistics.nr_failed_migrations_affine: 0\nse.statistics.nr_failed_migrations_running: 0\nse.statistics.nr_failed_migrations_hot: 0\nse.statistics.nr_forced_migrations : 0\nse.statistics.nr_wakeups : 1\nse.statistics.nr_wakeups_sync : 0\nse.statistics.nr_wakeups_migrate : 0\nse.statistics.nr_wakeups_local : 1\nse.statistics.nr_wakeups_remote : 0\nse.statistics.nr_wakeups_affine : 0\nse.statistics.nr_wakeups_affine_attempts: 0\nse.statistics.nr_wakeups_passive : 0\nse.statistics.nr_wakeups_idle : 0\navg_atom : 0.142343\navg_per_cpu : 0.284686\nnr_switches : 4\nnr_voluntary_switches : 1\nnr_involuntary_switches : 3\nse.load.weight : 1024\npolicy : 0\nprio : 120\nclock-delta : 49\n</code></pre></div><p><b>第十一步、粗略描述</b></p><p>我们还可以从</p><p>/proc/mount* 查看进程gemifeld使用的分区信息</p><p>/proc/net/* 查看进程gemfield使用的网络设备情况</p><p>步骤先放一放，那究竟什么是进程呢？</p><p>进程就是程序在计算机系统上运行时的一个实例，管理着计算机系统分配给它的各种资源，如：</p><p>1、程序的可运行机器码的一个在内存中的映像；</p><p>2、分配到的内存，包括可运行代码、特定于进程的数据（输入、输出）、堆、栈（用于保存运行时运输中途产生的数据）；</p><p>3、分配给该进程的资源的操作系统描述子，诸如文件描述子（Unix 术语）或文件句柄（Windows）、数据源和数据终端；</p><p>4、安全特性，诸如进程拥有者和进程的权限集（可以容许的操作）；</p><p>5、处理器状态（上下文），如寄存器内容等。当进程正在运行时，状态通常存储在cpu的寄存器，其他情况则在内存中。</p><p>先在清除为什么本文要花费大片费来介绍/proc/pid下面的内容了吧，在建立了一个直观的印象后，我们深入到Linux的内核中来看看进程，在内核中，进程是由一个叫作task_struct的结构体来维护的。</p><p><b>第十二步，分析task_struct结构体</b></p><p>让我们先行猜测下这个结构体应该有什么内容吧，从前十一步得知，它应该有下面的内容：</p><p>1、进程的id什么的；</p><p>2、进程的状态，在等待,运行,或死锁；</p><p>3、进程的家族，像吸血鬼家族一样，有吸血鬼祖先、后代、还有僵尸；</p><p>4、进程的内存映射；</p><p>5、时间片信息，以便cpu调度；</p><p>6、使用的文件描述符；</p><p>7、处理器寄存器的上下文。</p><p>那我们来实际看看这个结构体，在/include/linux/sched.h中有task_struct的定义：</p><div class=\"highlight\"><pre><code class=\"language-text\">struct task_struct {\n    volatile long state;//运行时状态，-1不可运行，0可运行，&gt;0已停止 \n    unsigned long flags; //flage是当前的进程标志，有正在被创建、正准备退出、被fork出但是没有执行exec、由于其他进程发送相关信号而被杀死 \n    int sigpending; //进程上是否有待处理的信号\n    mm_segment_t addr_limit; \n    volatile long need_resched;//调度标志,表示该进程是否需要重新调度.\n    int lock_depth; //锁深度\n    long nice; //进程的基本时间片\n    unsigned long policy;//调度策略有三种,实时进程:SCHED_FIFO,SCHED_RR, 分时进程:SCHED_OTHER\n    struct mm_struct *mm; //进程内存信息\n    int processor;\n    unsigned long cpus_runnable, cpus_allowed;//若进程不在任何CPU上运行, cpus_runnable 的值是0，否则是1 这个值在运行队列被锁时更新\n    struct list_head run_list; //指向运行队列的指针\n    unsigned long sleep_time; //进程的睡眠时间\n    struct task_struct *next_task, *prev_task;//用于将系统中所有的进程连成一个双向循环链表, 其根是init_task\n    struct mm_struct *active_mm;\n    struct list_head local_pages;//指向本地页面 \n    unsigned int allocation_order, nr_local_pages;\n    struct linux_binfmt *binfmt;//进程所运行的可执行文件的格式\n    int exit_code, exit_signal;\n    int pdeath_signal; //父进程终止是向子进程发送的信号\n    unsigned long personality;\n    int did_exec:1; \n    pid_t pid; //进程号\n    pid_t pgrp; //进程组标识,表示进程所属的进程组\n    pid_t tty_old_pgrp; //进程控制终端所在的组标识\n    pid_t session; //进程的会话标识\n    pid_t tgid;//进程组号\n    int leader; //表示进程是否为会话主管\n    struct task_struct *p_opptr,*p_pptr,*p_cptr,*p_ysptr,*p_osptr;\n    struct list_head thread_group; //线程链表\n    struct task_struct *pidhash_next; //用于将进程链入HASH表\n    struct task_struct **pidhash_pprev;\n    wait_queue_head_t wait_chldexit; //供wait4()使用\n    struct completion *vfork_done; //供vfork() 使用\n    unsigned long rt_priority; //实时优先级，用它计算实时进程调度时的weight值\n    unsigned long it_real_value, it_prof_value, it_virt_value;\n    unsigned long it_real_incr, it_prof_incr, it_virt_value;\n    struct timer_list real_timer; //指向实时定时器的指针\n    struct tms times; //记录进程消耗的时间\n    unsigned long start_time; //进程创建的时间\n    long per_cpu_utime[NR_CPUS], per_cpu_stime[NR_CPUS]; \n    unsigned long min_flt, maj_flt, nswap, cmin_flt, cmaj_flt, cnswap;//参考下面\n    int swappable:1; //表示进程的虚拟地址空间是否允许换出\n    uid_t uid,euid,suid,fsuid;\n    gid_t gid,egid,sgid,fsgid;\n    int ngroups; //记录进程在多少个用户组中\n    gid_t groups[NGROUPS]; //记录进程所在的组\n    kernel_cap_t cap_effective, cap_inheritable, cap_permitted;\n    int keep_capabilities:1;\n    struct user_struct *user;\n    struct rlimit rlim[RLIM_NLIMITS]; //与进程相关的资源限制信息\n    unsigned short used_math; //是否使用FPU\n    char comm[16]; //进程正在运行的可执行文件名\n    int link_count, total_link_count;\n    struct tty_struct *tty;//NULL if no tty \n    unsigned int locks;\n    struct sem_undo *semundo; //进程在信号灯上的所有undo操作\n    struct sem_queue *semsleeping; //当进程因为信号灯操作而挂起时，他在该队列中记录等待的操作\n    struct thread_struct thread;//存放cpu寄存器的上下文，参考下面。\n    struct fs_struct *fs; //文件系统信息\n    struct files_struct *files;//打开文件信息\n    spinlock_t sigmask_lock; //信号处理函数\n    struct signal_struct *sig; //信号处理函数\n    sigset_t blocked; //进程当前要阻塞的信号，每个信号对应一位\n    struct sigpending pending; //进程上是否有待处理的信号\n    unsigned long sas_ss_sp;\n    size_t sas_ss_size;\n    int (*notifier)(void *priv);\n    void *notifier_data;\n    sigset_t *notifier_mask;\n    u32 parent_exec_id;\n    u32 self_exec_id;\n    spinlock_t alloc_lock;\n    void *journal_info;\n};</code></pre></div><p>内存缺页和交换信息:min_flt, maj_flt累计进程的次缺页数（Copy on　Write页和匿名页）和主缺页数（从映射文件或交换设备读入的页面数）； nswap记录进程累计换出的页面数，即写到交换设备上的页面数。cmin_flt, cmaj_flt, cnswap记录本进程为祖先的所有子孙进程的累计次缺页数，主缺页数和换出页面数。在父进程回收终止的子进程时，父进程会将子进程的这些信息累计到自己结构的这些域中。</p><div class=\"highlight\"><pre><code class=\"language-text\">struct thread_struct {\n    struct desc_struct tls_array[GDT_ENTRY_TLS_ENTRIES]; TLS？\n    unsigned long esp0;\n    unsigned long sysenter_cs;\n    unsigned long eip;\n    unsigned long esp;\n    unsigned long fs;\n    unsigned long gs;\n    unsigned long debugreg[8]; 调试相关的寄存器内容\n    unsigned long cr2, trap_no, error_code;\n    union i387_union i387; 保存数学协处理器相关寄存器的内容\n    struct vm86_struct __user * vm86_info;\n    unsigned long screen_bitmap;\n    unsigned long v86flags, v86mask, saved_esp0;\n    unsigned int saved_fs, saved_gs;\n    unsigned long *io_bitmap_ptr; 保存当前进程的I/O权限位图\n    unsigned long io_bitmap_max;\n};</code></pre></div><p><b>第十三步、从ELF启航——fork</b></p><p>话说gemfield.c被编译为gemfield之后，./gemfield 是怎样将gemfield这个ELF文件装入到内存中的呢？</p><p>1、首先,不管你是在程序中产生子进程,还是在shell中启动程序,都会使用fork系统调用.</p><p>2、fork函数调用的过程大致如下：</p><p>程序调用fork()–&gt;库函数fork()–&gt;系统调用(fork功能号)–&gt;由功能号在 sys_call_table[]中寻到sys_fork()函数地址–&gt;调用sys_fork()–〉do_fork()，这就完成拉从用户态到内核态的变化过程。</p><p>3、do_fork的实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">p = copy_process(clone_flags, stack_start, regs, stack_size,child_tidptr, NULL, trace);\nwake_up_new_task(p, clone_flags);</code></pre></div><p>第一步是调用copy_process函数来复制一个进程，并对相应的标志位等进行设置，接下来，如果copy_process调用成功的话，那么系统会有意让新开辟的进程运行，这是因为子进程一般都会 马上调用exec()函数来执行其他的任务。</p><p>4、copy_process的实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">1、p = dup_task_struct(current);\n2、为新进程创建一个内核栈、thread_iofo和task_struct,这里完全copy父进程的内容（相当于把上文中的的task_struct内容完整的拷贝了一份），到目前为止，父进程和子进程是没有任何区别的。\n3、检查所有的进程数目是否已经超出了系统规定的最大进程数，如果没有的话，那么就开始设置进程描述符中的初始值，从这开始，父进程和子进程就开始区别开了。\n4、设置子进程的状态为不可被TASK_UNINTERRUPTIBLE，从而保证这个进程现在不能被投入运行，因为还有很多的标志位、数据等没有被设置。\n5、复制标志位（falgs成员）以及权限位(PE_SUPERPRIV)和其他的一些标志。\n6、调用get_pid()给子进程获取一个有效的并且是唯一的进程标识符PID。\n7、根据传入的cloning flags对相应的内容进行copy。比如说打开的文件符号、信号等。\n8、父子进程平分父进程剩余的时间片。\n9、return p;返回一个指向子进程的指针。</code></pre></div><p><b>第十四步：exec()函数家族</b></p><p>在第十三步中的fork虽然在系统中产生了一个新的进程，但基本没什么用；因为新的进程的逻辑和数据还在gemfield这个二进制文件中，所以，这里肯定是怎么把gemfield这个ELF文件填充到新的task_struct中了。这就是exec()家族的作用了。</p><p>1、exec家族的各个函数的调用最终会调用c函数库中的 execve(),这个函数的原型如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">int execve(const char * filename,char * const argv[],char * const envp[]);</code></pre></div><p>可以看出来其接受3个参数，分别是：程序文件名、程序参数、程序环境变量，这个在第一~十三步中都有提及；同时，第一个参数为程序文件名的事实告诉我们，gemfield可执行文件将要依靠这个函数被装入了；</p><p>2、execve()使用系统调用sys_execve()，后者进行参数检查后，再使用do_execve()系统调用；</p><p>3、do_execve()根据传过来的参数寻找gemfield程序。</p><p><b>第十五步：do_execve()系统调用</b></p><p>1、开辟一个linux_binprm结构体（在/usr/src/linux/include/linux/binfmts.h中），根据gemfield这个二进制文件来进行填充；</p><div class=\"highlight\"><pre><code class=\"language-text\">struct linux_binprm{\n    char buf[BINPRM_BUF_SIZE];\n    struct page * page[MAX_ARG_PAGES];//#ifdef __KERNEL__#define MAX_ARG_PAGES 32\n    struct mm_struct * mm;\n    unsigned long p; //current top of mem\n    int sh_bang;\n    struct file * file;\n    int e_uid, e_gid;\n    kernel_cap_t cap_inheritable, cap_permitted, cap_effective;\n    void * security;\n    int argc, envc;\n    char * filename; //Name of binary as seen by procps \n    char * interp; //Name of the binary really executed\n    unsigned interp_flags;\n    unsigned interp_data;\n    unsigned long loader, exec;\n};</code></pre></div><p>2、调用path_lookup(), dentry_open(), and path_release() 来获得和gemfield文件相关的dentry object、file object、inode object。</p><p>3、通过查看inode结构的i_writecount域来检查gemfield没有被正在写入，然后在i_writecount存入-1来防止其他写入；</p><p>4、在多cpu系统中，通过sched_exec()来判断使用哪个cpu来执行gemfield；</p><p>5、调用init_new_context() 来判断当前进程是否在使用自定义的Local Descriptor Table，如果是的话, 这个函数为gemfield分配并填充一个新的LDT；</p><p>6、调用prepare_binprm() 函数来填充linux_binprm 数据结构：</p><div class=\"highlight\"><pre><code class=\"language-text\">1，检查gemfield是否是可执行的；\n2，初始化linux_binprm 结构的e_uid 和 e_gid 域 ；\n3，使用gemfield的前128个字节填充linux_binprm结构的buf域 . 这128个字节包含了魔数和其他辨别可执行文件身份的信息（参考：从代码到可执行文件）</code></pre></div><p>7、拷贝gemfield文件路径名、命令行参数、环境参数到一个或多个新分配的page frames. (它们将最终被赋值给用户空间)；</p><p>8、调用search_binary_handler() 函数, 这个函数扫描可执行格式的链表，来判断是否有适用于gemfield这种ELF格式的load_binary函数，如果找到的话，就将linux_binprm这个结构体传给 load_binary函数，最后再释放linux_binprm 数据结构；</p><p><b>第十六步、load_binary的工作</b></p><p>load_binary 函数的实施按照以下步骤：</p><p>1、判断gemfield的魔数是否匹配；</p><p>2、通过kernel_read()读取gemfield的ELF header，ELF的头包含了程序的段和共享库信息，代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">size = loc-&gt;elf_ex.e_phnum　*　sizeof(struct　elf_phdr);\nretval　=　-ENOMEM;\nelf_phdata　=　(struct elf_phdr *)　kmalloc(size,　GFP_KERNEL);\nif　(!elf_phdata)\ngoto　out;\nretval　=　kernel_read(bprm-&gt;file,　loc-&gt;elf_ex.e_phoff,　(char　*)　elf_phdata,　size);\n……\n……\nfiles　=　current-&gt;files;　　\n……\n……\nretval　=　get_unused_fd();\n……\n……\nget_file(bprm-&gt;file);\nfd_install(elf_exec_fileno　=　retval,　bprm-&gt;file);\nelf_ppnt　=　elf_phdata;\nelf_bss　=　0;\nelf_brk　=　0;\nstart_code　=　~0UL;\nend_code　=　0;\nstart_data　=　0;\nend_data　=　0;</code></pre></div><p>还为已打开的gemfield映像文件在当前进程的打开文件表中另外分配一个表项，类似于执行了一次dup()，目的在于为gemfield维持两个不同的上下文，以便从不同的位置上读出；</p><p>接着是对elf_bss 、elf_brk、start_code、end_code等等变量的初始化。这些变量分别纪录着当前(到此刻为止)目标映像的bss段、代码段、数据段、以及动态分配“堆” 在用户空间的位置 。除start_code的初始值为0xffffffff外，其余均为0。随着映像内容的装入，这些变量也会逐步得到调整。</p><p>3、获取dynamic linker的路径名（比如/lib/ld-linux.so.2），dynamic linker将把共享库映射到内存中；ELF格式的二进制映像在装入和启动的过程中需要得到一个工具软件的协助，其主要的目的在于为目标映像建立起跟共享库的动态连接。这个工具称为“dynamic linker”。一个ELF映像在装入时需要用什么dynamic linker是在编译/连接是就决定好了的，这信息就保存在映像的“解释器”部中。“解释器”部的类型为PT_INTERP，找到后就根据其位置p_offset和大小p_filesz把整个“dynamic linker”部读入缓冲区。整个“解释器”部实际上只是一个字符串，即解释器的文件名，例如“/lib/ld-linux.so.2”。有了解释器的文件名以后，就通过open_exec()打开这个文件，再通过kernel_read()读入其开头128个字节，这就是映像的头部。早期的dynamic linker映像是a.out格式的，现在已经都是ELF格式的了，/lib/ld-linux.so.2就是个ELF映像。</p><p>4、获取dynamic linker的dentry object 、inode object、file object；</p><p>5、检查dynamic linker的执行权限；</p><p>6、将dynamic linker的前128个字节拷贝到一个buffer中；</p><p>7、实施一些dynamic linker类型的一致性检查；</p><p>8、至此，我们已为目标映像和dynamic linker映像的装入作好了准备。可以让当前进程(线程)与其父进程分道扬镳，转化成真正意义上的进程，走自己的路了：</p><div class=\"highlight\"><pre><code class=\"language-text\">retval　=　flush_old_exec(bprm);\n……\n/*　OK,　This　is　the　point　of　no　return　*/\ncurrent-&gt;mm-&gt;start_data　=　0;\ncurrent-&gt;mm-&gt;end_data　=　0;\ncurrent-&gt;mm-&gt;end_code　=　0;\ncurrent-&gt;mm-&gt;mmap　=　NULL;\ncurrent-&gt;flags　&amp;=　~PF_FORKNOEXEC;\ncurrent-&gt;mm-&gt;def_flags　=　def_flags;\n……\nretval　=　setup_arg_pages(bprm,　randomize_stack_top(STACK_TOP),　executable_stack);</code></pre></div><p>调用flush_old_exec() 函数释放之前使用的资源，并且通过flush_old_exec()函数实施以下步骤：</p><p>a、如果信号处理表是和其他进程共享的, 这个函数就分配一个新表并将旧的进程的相关计数器减一;并且，它从旧的进程组中分离 ，所有这些是通过调用de_thread()函数完成的；</p><p>b、调用unshare_files() 来复制一份files_struct 结构，里面包含了进程打开的文件的信息；</p><p>c、调用exec_mmap() 函数释放掉内存描述符、所有的内存区域、所有分配给gemfield进程的page frames ，并且将进程的页表清空；</p><p>d、将gemfield进程描述符中的comm域设置为gemfield可执行文件的路径名；</p><p>e、调用flush_thread() 函数保存在TSS段中的浮点寄存器和调试寄存器的值清空；</p><p>f、通过调用flush_signal_handlers()函数来重新设置信号处理表为默认值；</p><p>g、调用flush_old_files() 函数，将“程描述符中的files-&gt;close_on_exec域使能”的文件全部关掉；</p><p>通过上面的步骤，flush_old_exec()把当前进程用户空间的页面都释放了。这么一来，当前进程的用户空间是全新的。接下来要重建用户空间的映射了。一个新的映像要能运行，用户空间堆栈是必须的，所以首先要把用户空间的一个虚拟地址区间划出来用于堆栈。进一步，当CPU进入新映像的程序入口时，堆栈上应该有argc、argv[]、envc、envp[]等参数。这些参数来自老的程序，需要通过堆栈把它们传递给新的映像。实际上，argv[]和envp[]中是一些字符串指针，光把指针传给新映像，而不把相应的字符串传递给新映像，那是毫无意义的。为此，在进入search_binary_handler()、从而进入load_elf_binary()之前，do_execve()已经为这些字符串分配了若干页面，并通过copy_strings()从用户空间把这些字符串拷贝到了这些页面中。现在则要把这些页面再映射回用户空间(当然是在不同的地址上)，这就是这里setup_arg_pages()要做的事。这些页面映射的地址是在用户空间堆栈的最顶部。对于x86处理器，用户空间堆栈是从3GB</p><p>边界开始向下伸展的，首先就是存放着这些字符串的页面，再往下才是真正意义上的用户空间堆栈。而argc、argv[]这些参数，则就在这真正意义上的用户空间堆栈上。</p><p>下面就可以装入新映像了。所谓“装入”，实际上就是将映像的(部分)内容映射到用户(虚拟地址)空间的某些区间中去。在MMU的swap机制的作用下，这个过程甚至并不需要真的把映像的内容读入物理页面，而把实际的读入留待将来的缺页中断。</p><div class=\"highlight\"><pre><code class=\"language-text\">for(i = 0, elf_ppnt　=　elf_phdata;　i　&lt;　loc-&gt;elf_ex.e_phnum;　i++,　elf_ppnt++)　{\n    int　elf_prot　=　0,　elf_flags;\n    unsigned　long　k,　vaddr;\n\n    if　(elf_ppnt-&gt;p_type　!=　PT_LOAD)\n        continue;\n    ……\n\n    vaddr　=　elf_ppnt-&gt;p_vaddr;\n    if　(loc-&gt;elf_ex.e_type　==　ET_EXEC　||　load_addr_set)　{\n        elf_flags　|=　MAP_FIXED;\n    }　else　if　(loc-&gt;elf_ex.e_type　==　ET_DYN)　{\n        /*　Try　and　get　dynamic　programs　out　of　the　way　of　the　default　mmap\n        base,　as　well　as　whatever　program　they　might　try　to　exec.　　This\n        is　because　the　brk　will　follow　the　loader,　and　is　not　movable.　　*/\n        load_bias　=　ELF_PAGESTART(ELF_ET_DYN_BASE　-　vaddr);\n    }\n\n    error　=　elf_map(bprm-&gt;file,　load_bias　+　vaddr,　elf_ppnt,　elf_prot,　elf_flags);\n    ……\n\n    if　(!load_addr_set)　{\n        load_addr_set　=　1;\n        load_addr　=　(elf_ppnt-&gt;p_vaddr　-　elf_ppnt-&gt;p_offset);\n        if　(loc-&gt;elf_ex.e_type　==　ET_DYN)　{\n            load_bias　+=　error　- ELF_PAGESTART(load_bias　+　vaddr);\n            load_addr　+=　load_bias;\n            reloc_func_desc　=　load_bias;\n        }\n    }\n    k　=　elf_ppnt-&gt;p_vaddr;\n    if　(k　&lt;　start_code)　start_code　=　k;\n    if　(start_data　&lt;　k)　start_data　=　k;\n    ……\n    k　=　elf_ppnt-&gt;p_vaddr　+　elf_ppnt-&gt;p_filesz;\n\n    if　(k　&gt;　elf_bss)\n    elf_bss　=　k;\n    if　((elf_ppnt-&gt;p_flags　&amp;　PF_X)　&amp;&amp;　end_code　&lt;　k)\n        end_code　=　k;\n    if　(end_data　&lt;　k)\n        end_data　=　k;\n    k　=　elf_ppnt-&gt;p_vaddr　+　elf_ppnt-&gt;p_memsz;\n    if　(k　&gt;　elf_brk)\n        elf_brk　=　k;\n}　//end　for()　loop\nloc-&gt;elf_ex.e_entry　+=　load_bias;\nelf_bss　+=　load_bias;\nelf_brk　+=　load_bias;\nstart_code　+=　load_bias;\nend_code　+=　load_bias;\nstart_data　+=　load_bias;\nend_data　+=　load_bias;\n\n/*　Calling　set_brk　effectively　mmaps　the　pages　that　we　need\n*　for　the　bss　and　break　sections.　　We　must　do　this　before\n*　mapping　in　the　interpreter,　to　make　sure　it　doesn’t　wind\n*　up　getting　placed　where　the　bss　needs　to　go.\n*/\nretval　=　set_brk(elf_bss,　elf_brk);\n……</code></pre></div><p>9、将gemfield进程描述符中的PF_FORKNOEXEC标志清零，这个标志在gemfield进程被forked的时候置位，而在执行新的代码后被清零；</p><p>10、设置进程描述符中personality域以新的值；</p><p>11、调用arch_pick_mmap_layout() 来选择gemfield进程的内存区域布局；</p><p>12、调用setup_arg_pages() 函数为gemfield进程的用空空间栈分配一个新的memory region描述符，并将这个memory region 插入到gemfield进程的地址空间；setup_arg_pages() 同时将含有命令行参数和环境参数的page frames分配到这个新的memory region上；</p><p>13、调用do_mmap()函数来创建一个新的memory region，并映射到gemfield可执行文件的代码段，这个memory region的初始线形地址取决于可执行文件的格式，因为程序的代码段通常是不能重定位的，因此，do_mmap()认为代码段是从特定的地址开始的，ELF格式的（就像gemfield）是从线形地址0×08048000处开始的；</p><p>14、调用do_mmap()函数来创建一个新的memory region，并映射到gemfield可执行文件的数据段，这个memory region的初始线形地址取决于可执行文件的格式，因为可执行代码期望从特定的偏移处找到所需的变量，ELF格式的（就像gemfield）是数据段是刚好在代码段之后装入的；</p><p>15、为gemfield可执行文件的其他可装入段分配额外的memory regions ；</p><p>16、调用load_elf_interp()函数装入dynamic linker，通常这个步骤和12~14步是类似的， 为了防止和gemfield这种可执行文件在内存上的冲突，dynamic linker的初始地址是在</p><p>0×40000000之上，代码如下 ：</p><div class=\"highlight\"><pre><code class=\"language-text\">if　(elf_interpreter)　{\n    if　(interpreter_type　==　INTERPRETER_AOUT)\n　      elf_entry　=　load_aout_interp(&amp;loc-&gt;interp_ex,　interpreter);\n    else\n　      elf_entry　=　load_elf_interp(&amp;loc-&gt;interp_elf_ex,　interpreter,　&amp;interp_load_addr);\n　　 ……\n　　 reloc_func_desc　=　interp_load_addr;\n\n　　 allow_write_access(interpreter);\n　　 fput(interpreter);\n　　 kfree(elf_interpreter);\n}　else　{\n　　 elf_entry　=　loc-&gt;elf_ex.e_entry;\n}</code></pre></div><p>如果需要装入dynamic linker，并且dynamic linker的映像是ELF格式的，就通过load_elf_interp()装入其映像，并把将来进入用户空间时的入口地址设置成load_elf_interp()的返回值，那显然是dynamic linker的程序入口；而若不装入dynamic linker，那么这个地址就是目标映像本身的程序入口。</p><p>17、Stores in the binfmt field of the process descriptor the address of the linux_binfmt object of the executable format.</p><p>18、决定gemfield进程的新capabilities；</p><p>19、创建特定的动态链接表并放在用户态栈的命令行参数和环境字符串指针数组的中间(参考下图)；</p><p>20、设置gemfield进程的内存描述符中的start_code, end_code, start_data, end_data, start_brk, brk, start_stack 这些域的值；</p><div class=\"highlight\"><pre><code class=\"language-text\">struct mm_struct {\n    struct vm_area_struct * mmap;//指向虚拟区间（VMA）链表 \n    rb_root_t mm_rb; //指向red_black树\n    struct vm_area_struct * mmap_cache; //指向最近找到的虚拟区间\n    pgd_t * pgd; //指向进程的页目录\n    atomic_t mm_users;//用户空间中的有多少用户 \n    atomic_t mm_count; //对”struct mm_struct”有多少引用 \n    int map_count; //虚拟区间的个数\n    struct rw_semaphore mmap_sem;\n    spinlock_t page_table_lock;//保护任务页表和 mm-&gt;rss \n    struct list_head mmlist; //所有活动（active）mm的链表 \n    unsigned long start_code, end_code, start_data, end_data;\n    unsigned long start_brk, brk, start_stack;\n    unsigned long arg_start, arg_end, env_start, env_end;\n    unsigned long rss, total_vm, locked_vm;\n    unsigned long def_flags;\n    unsigned long cpu_vm_mask;\n    unsigned long swap_address;\n    unsigned dumpable:1;\n    /* Architecture-specific MM context */\n    mm_context_t context;\n};</code></pre></div><p>21、调用do_brk()函数来创建一个新的匿名的memory region，并映射到gemfield文件的bss段，当gemfield写一个变量时, 将触发缺页中断，从而导致一个page frame的分配； 这个新的memory region的大小是在程序链接的时候计算好的，并且初始的线形地址必须是指定的，在ELF格式的程序中（如gemfield）, bss 装载在数据段之后；</p><p>22、调用start_thread() 宏来设置用户态寄存器eip和esp的值，这些值保存在内核态堆栈上，以使它们分别指向dynamic linker的入口点和新的用户态栈的顶点；start_thread()是个宏操作 ，其定义如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define　start_thread(regs,　new_eip,　new_esp)　do　{　　\\\n　　　　　　　__asm__(“movl　%0,%%fs　;　movl　%0,%%gs”:　:”r”　(0));　　\\\n　　　　　　　set_fs(USER_DS);　　　　　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;xds　=　__USER_DS;　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;xes　=　__USER_DS;　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;xss　=　__USER_DS;　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;xcs　=　__USER_CS;　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;eip　=　new_eip;　　　　　　　　　　　　　　　　\\\n　　　　　　　regs-&gt;esp　=　new_esp;　　　　　　　　　　　　　　　　\\\n}　while　(0)</code></pre></div><p>这几条指令把作为参数传下来的用户空间程序入口和堆栈指针设置到regs数据结构中，这个数据结构实际上在系统堆栈中，是在当前进程通过系统调用进入内核时由SAVE_ALL形成的，而指向所保存现场的指针regs则作为参数传给了sys_execve()，并逐层传了下来。把所保存现场中的eip和esp改成了新的地址，就使得CPU在返回用户空间时进入新的程序入口。如果有dynamic linker映像存在，那么这就是dynamic linker映像的程序入口，否则就是目标映像的程序入口。</p><p>23、如果gemfield这个进程是被追踪的, 它将通知调试器execve()系统调用已经完成；</p><p>24、如果成功的话，返回零值。</p><p><b>第十七步、回到用户态</b></p><p>当返回到用户态后，因为EIP寄存器的值在22中已经被设置为dynamic linker的入口点，于是程序开始从dynamic linker启动，最终新的进程开始运行。</p>", 
            "topic": [
                {
                    "tag": "进程", 
                    "tagLink": "https://api.zhihu.com/topics/19634510"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "程序", 
                    "tagLink": "https://api.zhihu.com/topics/19565652"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54857629", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 7, 
            "title": "从代码到可执行文件", 
            "content": "<h2><b>背景</b></h2><p>本文很久之前（2010年左右）由Gemfield发表于CivilNet Blog，2017年的时候CivilNet Blog停止服务，于是gemfield迁移本文至此。</p><h2><b>正文</b></h2><p>正如题目所说的那样，我们得先从一段程序代码开始——gemfield.c。又正如程序的名字所说的，这是个c语言文件，极其简单。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">argv</span><span class=\"p\">[])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">char</span> <span class=\"n\">gemfield</span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">];</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"n\">input</span> <span class=\"n\">gemfield</span><span class=\"err\">’</span><span class=\"n\">s</span> <span class=\"nl\">blog</span><span class=\"p\">:</span> <span class=\"err\">“</span><span class=\"p\">);</span>\n    <span class=\"n\">scanf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"o\">%</span><span class=\"n\">s</span><span class=\"err\">”</span><span class=\"p\">,</span><span class=\"n\">gemfield</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"err\">“</span><span class=\"n\">gemfield</span><span class=\"err\">’</span><span class=\"n\">s</span> <span class=\"n\">blog</span> <span class=\"n\">is</span> <span class=\"o\">%</span><span class=\"n\">s</span><span class=\"err\">\\</span><span class=\"n\">n</span><span class=\"err\">”</span><span class=\"p\">,</span><span class=\"n\">gemfield</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>正如代码量所揭示的，这真的是个简单的c程序，但gemfield还是要强调一点——main函数书写的规范性。 从gemfield.c的代码可以看出：</p><p>1、main函数是有返回值的，为int型，操作系统可以感知这个值。</p><p>2、main函数的第一个参数 argc，是argument count的缩写，意思是参数数量；</p><p>3、main函数的第二个参数 argv，是argument vector的缩写，意思是存放参数的vector。</p><p>下面的研究步骤展示了从程序(gemfield.c)代码到可执行文件（gemfield）的一步步变化。</p><p><b>第一步：编译</b></p><div class=\"highlight\"><pre><code class=\"language-console\">gcc gemfield.c -o gemfield</code></pre></div><p>可执行文件gemfield在GCC的帮助下诞生了。那么这个gemfield文件究竟是什么？</p><p><b>第二步：可执行文件</b></p><div class=\"highlight\"><pre><code class=\"language-text\">objdump -f gemfield</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">gemfield: file format elf32-i386\narchitecture: i386, flags 0×00000112:\nEXEC_P, HAS_SYMS, D_PAGED\nstart address 0x080483d0</code></pre></div><p>上面的信息明确的告诉我们，gemfield文件是elf可执行文件格式（什么是elf可执行格式？看下面！），起始地址是0x080483d0（这个地址是什么含意？继续看）。</p><p><b>第三步：什么是ELF格式</b></p><p>ELF是“Executable and Linking Format”首字母的缩写，也就是上文中gemfield这个可执行文件的格式。这种格式主要用于UNIX家族中。对于本文的讨论，将关注ELF的三大部分：</p><div class=\"highlight\"><pre><code class=\"language-text\">1、ELF头\n2、节(section)头表\n3、程序头表</code></pre></div><p>一个ELF文件（比如gemfield）是由若干个Segment构成的。有些Segment需要被装入、即被映射到用户空间，有些则不需要被装入(只有类型为PT_LOAD的Segment才需要被装入，参考第七部分)。所以，ELF文件被操作系统装入的过程只“管”到Segment为止。而从ELF文件的动态连接、重定位(即浮动)、和启动运行的角度看，ELF文件是由若干个“节(Section)”构成的。我们通常所说映像中的“代码段”、“数据段”等等都是Section。所以，动态连接和启动运行的过程所涉及的则是Section。</p><p>一个Segment可以包含多个Section。其实，Segment和Section都是从操作/处理的角度对ELF的划分；对于不同的操作/处理，划分的方式也就可以不同。</p><p><b>第四步：ELF头</b></p><p>我们首先关注ELF文件头格式，因为 ELF文件头(header)位于文件的最开始处，包含整个文件（如gemfield可执行文件）的结构信息（使用二进制编辑器察看可执行文件的数据）：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">typedef</span> <span class=\"k\">struct</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">unsigned</span> <span class=\"kt\">char</span> <span class=\"n\">e_ident</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">];</span> <span class=\"cm\">/* Magic number and other info */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_type</span><span class=\"p\">;</span> <span class=\"cm\">/* Object file type */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_machine</span><span class=\"p\">;</span> <span class=\"cm\">/* Architecture */</span>\n    <span class=\"n\">Elf32_Word</span> <span class=\"n\">e_version</span><span class=\"p\">;</span> <span class=\"cm\">/* Object file version */</span>\n    <span class=\"n\">Elf32_Addr</span> <span class=\"n\">e_entry</span><span class=\"p\">;</span> <span class=\"cm\">/* Entry point virtual address */</span>\n    <span class=\"n\">Elf32_Off</span> <span class=\"n\">e_phoff</span><span class=\"p\">;</span> <span class=\"cm\">/* Program header table file offset */</span>\n    <span class=\"n\">Elf32_Off</span> <span class=\"n\">e_shoff</span><span class=\"p\">;</span> <span class=\"cm\">/* Section header table file offset */</span>\n    <span class=\"n\">Elf32_Word</span> <span class=\"n\">e_flags</span><span class=\"p\">;</span> <span class=\"cm\">/* Processor-specific flags */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_ehsize</span><span class=\"p\">;</span> <span class=\"cm\">/* ELF header size in bytes */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_phentsize</span><span class=\"p\">;</span> <span class=\"cm\">/* Program header table entry size */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_phnum</span><span class=\"p\">;</span> <span class=\"cm\">/* Program header table entry count */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_shentsize</span><span class=\"p\">;</span> <span class=\"cm\">/* Section header table entry size */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_shnum</span><span class=\"p\">;</span> <span class=\"cm\">/* Section header table entry count */</span>\n    <span class=\"n\">Elf32_Half</span> <span class=\"n\">e_shstrndx</span><span class=\"p\">;</span> <span class=\"cm\">/* Section header string table index */</span>\n<span class=\"p\">}</span> <span class=\"n\">Elf32_Ehdr</span><span class=\"p\">;</span><span class=\"c1\">//52个字节\n</span></code></pre></div><p>一、e_ident数组，16个字节。</p><p>1、前4个字节被称为魔数，值是固定的，并且是：0x7f,’E&#39;,’L&#39;,’F&#39;。表明这是个ELF文件；</p><p>2、第5个字节有三种值：0，非法目标文件；1，32位目标文件；2，64位目标文件。</p><p>3、第6个字节指定编码格式，有3种值：0，非法编码；1，LSB编码（小端格式）；2，MSB编码（大端格式）。</p><p>4、第7个字节指定ELF头版本，值为1；</p><p>5、第8~16为保留字节，默认填充零；</p><p>可执行文件gemfield的此处值是：7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00。</p><p>二、e_type，2个字节，指明文件类型：0，未知文件类型；1，可重定位文件；2，可执行文件；3，动态链接库文件；4，Core 文件；0xff00，特定处理器文件扩展下边界 ；0xffff 特定处 理器文件扩展上边界 。</p><p>可执行文件gemfield的此处值是：02 00。</p><p>三、e_machine，2个字节，指明cpu架构：如intel的是3，其他的去CivilNet BBS上自行查找；可执行文件gemfield的此处值是：03 00。</p><p>四、e_version，4个字节，指明版本：0，非法版本号；1，当前版本号；可执行文件gemfield的此处值是：01 00 00 00。</p><p>五、e_entry，4个字节，程序入口的虚拟地址；可执行文件gemfield的此处值是：d0 83 04 08。</p><p>六、e_phoff，4个字节，程序头表在文件中的偏移量；可执行文件gemfield的此处值是：34 00 00 00。</p><p>七、e_shoff，4个字节，节头表的起始地址；可执行文件gemfield的此处值是：44 11 00 00。</p><p>八、e_flags，4个字节，处理器特定标志位，intel为0；可执行文件gemfield的此处值是：00 00 00 00。</p><p>九、e_ehsize，2个字节，ELF文件头大小(52字节)；可执行文件gemfield的此处值是：34 00。</p><p>十、e_phentsize，2个字节，程序头表中每一个表项的大小；可执行文件gemfield的此处值是：20 00。</p><p>十一、e_phnum，2个字节，程序头表中表项的数目；可执行文件gemfield的此处值是：09 00。</p><p>十二、e_shentsize，2个字节，节头表中每一个表项的大小(40个字节)；可执行文件gemfield的此处值是：28 00。</p><p>十三、e_shnum，2个字节，节头表中的表项的数目；可执行文件gemfield的此处值是：1e 00。</p><p>十四、e_shstrndx，2个字节，Section header string table index（节头字符串表的索引）；可执行文件gemfield的此处值是：1b 00。</p><p><b>第五步、ELF文件中的节头表</b></p><p>节头表的作用是什么呢？</p><p>像gemfield这样的可执行文件里，包含了多个节，其中每个节的信息都登记在这个节头表中（30个），用一个Elf32_Shdr结构体来描述：</p><div class=\"highlight\"><pre><code class=\"language-text\">typedef struct { \n    Elf32_Word sh_name; //本节的名字。\n    Elf32_Word sh_type; //类型。\n    Elf32_Word sh_flags ; \n    Elf32_Addr sh_addr; \n    Elf32_Off sh_offset; \n    Elf32_Word sh_size; \n    Elf32_Word sh_link; \n    Elf32_Word sh_info; \n    Elf32_Word sh_addralign; \n    Elf32_Word sh_entsize; \n} Elf32_Shdr; //刚好4×10=40个字节。</code></pre></div><p>1、sh_name存放的是个索引号，指向“字符串表”中的相对位置。在字符串中才有真正的以“\\0”结束的字符串。</p><p>2、sh_type，</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值\nSHT_NULL 0 //无效的节头\nSHT_PROGBITS 1 //程序定义\nSHT_SYMTAB 2 //完整的符号表，往往会包含很多在运行期间( 动态连接) 用不到的符号\nSHT_STRTAB 3 //表明本节是字符串表\nSHT_RELA 4 //重定位节\nSHT_HASH 5 //符号哈希表\nSHT_DYNAMIC 6 //本节包含的是动态连接信息\nSHT_NOTE 7 //本节包含的信息用于以某种方式来标记本文件\nSHT_NOBITS 8 //这一节的内容是空的\nSHT_REL 9 //一个重定位节，含有带明确加数的重定位项\nSHT_SHLIB 0xa //一个保留值，暂未指定语义\nSHT_DYNSYM 0xb //本节是符号表，含有一个较小的符号表，专门用于动态连接\nSHT_LOPROC 0×70000000 //为特殊处理器保留的节类型索引值的下边界\nSHT_HIPROC 0x7fffffff //为特殊处理器保留的节类型索引值的上边界\nSHT_LOUSER 0×80000000 //为应用程序保留节类型索引值的下边界\nSHT_HIUSER 0xffffffff //为应用程序保留节类型索引值的下边界</code></pre></div><p>3、sh_flags ，</p><p>本节的一些属性，各个位定义了节的不同属性，当某种属性被设置时，相应的标志位被设为1，反之则设为0。未定义的标志位被全部置0。</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值\nSHF_WRITE 0×1 //表示本节所包含的内容在进程运行过程中是可写的\nSHF_ALLOC 0×2 //表示本节内容在进程运行过程中要占用内存单元\nSHF_EXECINSTR 0×4 //表示此节内容是指令代码\nSHF_MASHPROC 0xf0000000 //所有被此值所覆盖的位都是保留做特殊处理器扩展用的</code></pre></div><p>4、sh_addr，</p><p>如果本节的内容需要映射到进程空间中去，此成员指定映射的起始地址；如果不需要映射，此值为0。</p><p>5、sh_offset，</p><p>指明了本节所在的位置，该值是节的第一个字节在文件中的位置，即相对于文件开头的偏移量。单位是字节。如果该节的类型为SHT_NOBITS 的话，表明这一节的内容是空的，节并不占用实际 的空间，这时sh_offset 只代表一个逻辑上的位置概念，并不代表实际的内容。</p><p>6、sh_size，</p><p>指明节的大小，单位是字节。如果该节的类型为SHT_NOBITS，此值仍然可能为非零，但没有实际的意义。</p><p>7、sh_link，</p><p>此成员是一个索引值，指向节头表中本节所对应的位置。根据节的类型不同，本成员的意义也有所不同。</p><p>8、sh_info，</p><p>此成员含有此节的附加信息，根据节的类型不同，本成员的意义也有所不同。 对于某些节类型来说，sh_link 和sh_info 含有特殊的信息。</p><div class=\"highlight\"><pre><code class=\"language-text\">sh_type sh_link sh_info \nSHT_DYNAMIC 用于本节中项目的字符串表在节头表中相应的索引值 0 \nSHT_HASH 用于本节中哈希表的符号表在节头表中相应的索引值 0 \nSHT_REL/SHT_RELA 相应符号表在节头表中的索引值 本重定位节所应用到目标节在节头表中的索引值\nSHT_SYMTAB/SHT_DYNSYM 相关字符串表的节头索引 符号表中最后一个本地符号的索引值加1 \n其它 SHN_UNDEF 0</code></pre></div><p>9、sh_addralign，</p><p>此成员指明本节内容如何对齐字节，即该节的地址应该向多少个字节对齐。</p><p>比如，在这个节中如果含有一个双字(doubleword) ，系统必须保证整个节的内容向双字对齐。也就是说，本节内容在进程空间中的映射地址sh_addr必须是一个向sh_addralign对齐，即能被 sh_addralign整除的值。目前，sh_addralign只能取0、1或者2 的正整数倍。如果该值为0 或1，表明本节没有字节对齐约束。</p><p>10、sh_entsize，</p><p>有一些节的内容是一张表，其中每一个表项的大小是固定的，比如符号表。对于这种表来说，本成员指定其每一个表项的大小。如果此值为0 ，则表明本节内容不是这种表格。</p><p>从e_shoff处我们知道这个节头表起始地址是：0×1144，表中有0x1e项（e_shnum），每一项大小40个字节（e_shentsize）。那么这个节头表的大小为30×40=1200个字节(0x4b0)，因此，节头表的地址范围是：0×1144~0x15f3。数据摘录如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">//空节\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n//.interp\n1b 00 00 00 01 00 00 00 02 00 00 00 54 81 04 08 54 01 00 00 \n13 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \n//.note.ABI-tag\n23 00 00 00 07 00 00 00 02 00 00 00 68 81 04 08 68 01 00 00 \n20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.note.gnu.build-id\n31 00 00 00 07 00 00 00 02 00 00 00 88 81 04 08 88 01 00 00 \n24 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.gnu.hash\n44 00 00 00 f6 ff ff 6f 02 00 00 00 ac 81 04 08 ac 01 00 00 \n20 00 00 00 05 00 00 00 00 00 00 00 04 00 00 00 04 00 00 00 \n//.dynsym\n4e 00 00 00 0b 00 00 00 02 00 00 00 cc 81 04 08 cc 01 00 00 \n70 00 00 00 06 00 00 00 01 00 00 00 04 00 00 00 10 00 00 00 \n//.dynstr\n56 00 00 00 03 00 00 00 02 00 00 00 3c 82 04 08 3c 02 00 00 \n80 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \n//.gnu.version\n5e 00 00 00 ff ff ff 6f 02 00 00 00 bc 82 04 08 bc 02 00 00 \n0e 00 00 00 05 00 00 00 00 00 00 00 02 00 00 00 02 00 00 00 \n//.gnu.version_r \n6b 00 00 00 fe ff ff 6f 02 00 00 00 cc 82 04 08 cc 02 00 00 \n40 00 00 00 06 00 00 00 01 00 00 00 04 00 00 00 00 00 00 00 \n//.rel.dyn \n7a 00 00 00 09 00 00 00 02 00 00 00 0c 83 04 08 0c 03 00 00 \n08 00 00 00 05 00 00 00 00 00 00 00 04 00 00 00 08 00 00 00 \n//.rel.plt \n83 00 00 00 09 00 00 00 02 00 00 00 14 83 04 08 14 03 00 00 \n28 00 00 00 05 00 00 00 0c 00 00 00 04 00 00 00 08 00 00 00 \n//.init \n8c 00 00 00 01 00 00 00 06 00 00 00 3c 83 04 08 3c 03 00 00 \n2e 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n.plt\n87 00 00 00 01 00 00 00 06 00 00 00 70 83 04 08 70 03 00 00 \n60 00 00 00 00 00 00 00 00 00 00 00 10 00 00 00 04 00 00 00 \n//.text \n92 00 00 00 01 00 00 00 06 00 00 00 d0 83 04 08 d0 03 00 00 \ndc 01 00 00 00 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 \n//.fini\n98 00 00 00 01 00 00 00 06 00 00 00 ac 85 04 08 ac 05 00 00 \n1a 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.rodata\n9e 00 00 00 01 00 00 00 02 00 00 00 c8 85 04 08 c8 05 00 00 \n3b 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.eh_frame_hdr \na6 00 00 00 01 00 00 00 02 00 00 00 04 86 04 08 04 06 00 00 \n34 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.eh_frame \nb4 00 00 00 01 00 00 00 02 00 00 00 38 86 04 08 38 06 00 00 \nc4 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.ctors \nbe 00 00 00 01 00 00 00 03 00 00 00 14 9f 04 08 14 0f 00 00 \n08 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.dtors\nc5 00 00 00 01 00 00 00 03 00 00 00 1c 9f 04 08 1c 0f 00 00 \n08 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.jcr \ncc 00 00 00 01 00 00 00 03 00 00 00 24 9f 04 08 24 0f 00 00 \n04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.dynamic\nd1 00 00 00 06 00 00 00 03 00 00 00 28 9f 04 08 28 0f 00 00 \nc8 00 00 00 06 00 00 00 00 00 00 00 04 00 00 00 08 00 00 00 \n//.got \nda 00 00 00 01 00 00 00 03 00 00 00 f0 9f 04 08 f0 0f 00 00 \n04 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 04 00 00 00 \n//.got.plt\ndf 00 00 00 01 00 00 00 03 00 00 00 f4 9f 04 08 f4 0f 00 00 \n20 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 04 00 00 00 \n//.data \ne8 00 00 00 01 00 00 00 03 00 00 00 14 a0 04 08 14 10 00 00 \n08 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.bss\nee 00 00 00 08 00 00 00 03 00 00 00 1c a0 04 08 1c 10 00 00 \n08 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 \n//.comment\nf3 00 00 00 01 00 00 00 30 00 00 00 00 00 00 00 1c 10 00 00 \n2a 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 00 00 00 \n//.shstrtab\n11 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 46 10 00 00 \nfc 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \n//.symtab\n01 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 f4 15 00 00 \n30 04 00 00 1d 00 00 00 2d 00 00 00 04 00 00 00 10 00 00 00 \n//.strtab\n09 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 24 1a 00 00 \n32 02 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00</code></pre></div><p><b>第六步、摘选几个节来研究下</b></p><p>那我们就摘选出4个关键的节来探讨一下:节头字符串表（节）、字符串表（节）、代码节、符号表（节）。</p><p><b>第一部分、节头字符串表（节，.shstrtab）。</b></p><p>一个明显的疑问就是:一个可执行文件(gemfield)中可能会有多个字符串节区,怎么确定哪个就是和sh_name这个索引相关的字符串表呢（也就是节名字表(.shstrtab)）?谜底就在本文开始介绍 的第一个结构体中。e_shstrndx代表了该字符串表的索引，该值为：0x1b。上面不是说gemfield中一共有0x1e个节区吗，那么这个特殊的字符串表就是第0x1b个，起始地址就应该是：0×1144+ （0x1b）*0×28 = 0×1554。从gemfield中把这它复制出来，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">11 00 00 00 03 00 00 00 00 00 00 00 00 00 00 00 46 10 00 00 fc 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00</code></pre></div><p>从中我们可以看出，起始地址（偏移）是0×1046，大小是0xfc，也就是这个特定的字符串表的地址范围是：0×1046 ~ 0×1141</p><p>我们再从gemfield文件中把0×1046 ~ 0×1141处的数据拿出来，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">00 2e 73 79 6d 74 61 62 00 2e 73 74 72 74 61 62 00 2e 73 68 73 74 72 74 61 62 00 2e 69 6e 74 65 72 70 00 2e 6e 6f 74 65 2e 41 42 49 2d 74 61 67 00 2e 6e 6f 74 65 2e 67 \n6e 75 2e 62 75 69 6c 64 2d 69 64 00 2e 67 6e 75 2e 68 61 73 68 00 2e 64 79 6e 73 79 6d 00 2e 64 79 6e 73 74 72 00 2e 67 6e 75 2e 76 65 72 73 69 6f 6e 00 2e 67 6e 75 2e \n76 65 72 73 69 6f 6e 5f 72 00 2e 72 65 6c 2e 64 79 6e 00 2e 72 65 6c 2e 70 6c 74 00 2e 69 6e 69 74 00 2e 74 65 78 74 00 2e 66 69 6e 69 00 2e 72 6f 64 61 74 61 00 2e 65 \n68 5f 66 72 61 6d 65 5f 68 64 72 00 2e 65 68 5f 66 72 61 6d 65 00 2e 63 74 6f 72 73 00 2e 64 74 6f 72 73 00 2e 6a 63 72 00 2e 64 79 6e 61 6d 69 63 00 2e 67 6f 74 00 2e \n67 6f 74 2e 70 6c 74 00 2e 64 61 74 61 00 2e 62 73 73 00 2e 63 6f 6d 6d 65 6e 74 00</code></pre></div><p>既然上面的是字符串表，那么我再把它翻译成ASCII字符的形式：</p><div class=\"highlight\"><pre><code class=\"language-text\">.symtab .strtab .shstrtab .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .text .fini .rodata \n.eh_frame_hdr .eh_frame .ctors .dtors .jcr .dynamic .got .got.plt .data .bss .comment</code></pre></div><p>从这些熟悉的名字中，我们已经知道了gemfield中包含的各种各样的节区的名字了。这些节区的属性如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 类型 属性\n.bss SHT_NOBITS SHF_ALLOC+SHF_WRITE\n.comment SHT_PROGBITS 无\n.data SHT_PROGBITS SHF_ALLOC+SHF_WRITE\n.data1 SHT_PROGBITS SHF_ALLOC+SHF_WRITE\n.debug SHT_PROGBITS 无\n.dynamic SHT_DYNAMIC 见下文\n.dynstr SHT_STRTAB SHF_ALLOC\n.dynsym SHT_DYNSYM SHF_ALLOC\n.fini SHT_PROGBITS SHF_ALLOC + SHF_EXECINSTR\n.got SHT_PROGBITS SHF_ALLOC + SHF_WRITE\n.hash SHT_HASH SHF_ALLOC\n.init SHT_PROGBITS SHF_ALLOC + SHF_EXECINSTR\n.interp SHT_PROGBITS 见下文\n.line SHT_PROGBITS 无\n.note SHT_NOTE 无\n.plt SHT_PROGBITS SHF_ALLOC + SHF_EXECINSTR\n.relname SHT_REL 见下文\n.relaname SHT_RELA 见下文\n.rodata SHT_PROGBITS SHF_ALLOC\n.rodata1 SHT_PROGBITS SHF_ALLOC\n.shstrtab SHT_STRTAB 无\n.strtab SHT_STRTAB 见下文\n.symtab SHT_SYMTAB 见下文\n.text SHT_PROGBITS SHF_ALLOC + SHF_EXECINSTR</code></pre></div><p>1、.bss</p><p>本节中包含目标文件中未初始化的全局变量。一般情况下，可执行程序在开始运行的时候，系统会把这一段内容清零。但是，在运行期间的bss段是由系统初始化而成的，在目标文件中.bss 节并不包含任何内容，其长度为0，所以它的节类型为SHT_NOBITS 。</p><p>2、.comment</p><p>本节包含版本控制信息。</p><p>3、.data/.data1</p><p>这两个节用于存放程序中被初始化过的全局变量。在目标文件中，它们是占用实际的存储空间的，与.bss 节不同。</p><p>4、.debug</p><p>本节中含有调试信息，内容格式没有统一规定。所有以”.debug” 为前缀的节名字都是保留的。</p><p>5、.dynamic</p><p>本节包含动态连接信息，并且可能有SHF_ALLOC 和SHF_WRITE 等属性。是否具有SHF_WRITE 属性取决于操作系统和处理器。</p><p>6、.dynstr</p><p>此节含有用于动态连接的字符串，一般是那些与符号表相关的名字。</p><p>7、.dynsym</p><p>此节含有动态连接符号表。</p><p>8、.fini</p><p>此节包含进程终止时要执行的程序指令。当程序正常退出时，系统会执行这一节中的代码。</p><p>9、.got</p><p>此节包含全局偏移量表。</p><p>10、.hash</p><p>本节包含一张符号哈希表。</p><p>11、.init</p><p>此节包含进程初始化时要执行的程序指令。当程序开始运行时，系统会在进入主函数之前执行这一节中的代码。</p><p>12、.interp</p><p>此节含有ELF 程序解析器的路径名。如果此节被包含在某个可装载的段中，那么本节的属性中应置SHF_ALLOC 标志位，否则不置此标志。</p><p>13、.line</p><p>本节也是一个用于调试的节，它包含那些调试符号的行号，为程序指令码与源文件的行号建立起联系。其内容格式没有统一规定。</p><p>14、.note</p><p>注释节(note section)。</p><p>15、.plt</p><p>此节包含函数连接表。</p><p>16、.relname 和.relaname</p><p>这两个节含有重定位信息。如果此节被包含在某个可装载的段中，那么本节的属性中应置SHF_ALLOC 标志位，否则不置此标志。注意，这两个节的名字中”name”是可替换的部分，执照惯例 ，对哪一节做重定位就把”name”换成哪一节的名字。比如，.text 节的重定位节的名字将是.rel.text 或.rela.text 。</p><p>17、.rodata/.rodata1</p><p>本节包含程序中的只读数据，在程序装载时，它们一般会被装入进程空间中那些只读的段中去。</p><p>18、.shstrtab</p><p>本节是“节名字表”，含有所有其它节的名字。</p><p>19、.strtab</p><p>本节用于存放字符串，主要是那些符号表项的名字。如果一个目标文件有一个可装载的段，并且其中含有符号表，那么本节的属性中应该有SHF_ALLOC 。</p><p>20、.symtab</p><p>本节用于存放符号表。如果一个目标文件有一个可载入的段，并且其中含有符号表，那么本节的属性中应该有SHF_ALLOC 。</p><p>21、.text</p><p>本节包含程序指令代码。</p><p>以点号”.”为前缀的节名字是为系统保留的。应用程序也可以构造自己的段，但最好不要取与上述系统已定义的节相同的名字，也不要取以点号开头的名字，以避免潜在的冲突。注意，目标文件中节的名字并不具有唯一性，可以存在多个相同名字的节。</p><p><b>第二部分、字符串表（节，.strtab）</b></p><div class=\"highlight\"><pre><code class=\"language-text\">09 00 00 00 //.strtab\n03 00 00 00 //3 ,表明本节是字符串表\n00 00 00 00 //标志\n00 00 00 00 //还没重定位，所以为0\n24 1a 00 00 //起始地址：0x1a24\n32 02 00 00 //大小 0×232\n00 00 00 00 \n00 00 00 00 \n01 00 00 00 //对齐\n00 00 00 00 //指向的不是表</code></pre></div><p>根据上面的解析，把字符串表拿出来，地址为0x1a24~0x1c55</p><div class=\"highlight\"><pre><code class=\"language-text\">00 63 72 74 73 74 75 66 66 2e 63 00 5f 5f 43 54 4f 52 5f 4c 49 53 54 5f 5f 00 5f 5f 44 54 4f 52 5f 4c 49 53 54 5f 5f 00 5f 5f 4a 43 52 5f 4c 49 53 54 5f 5f 00 5f 5f 64 \n6f 5f 67 6c 6f 62 61 6c 5f 64 74 6f 72 73 5f 61 75 78 00 63 6f 6d 70 6c 65 74 65 64 2e 36 30 38 36 00 64 74 6f 72 5f 69 64 78 2e 36 30 38 38 00 66 72 61 6d 65 5f 64 75 \n6d 6d 79 00 5f 5f 43 54 4f 52 5f 45 4e 44 5f 5f 00 5f 5f 46 52 41 4d 45 5f 45 4e 44 5f 5f 00 5f 5f 4a 43 52 5f 45 4e 44 5f 5f 00 5f 5f 64 6f 5f 67 6c 6f 62 61 6c 5f 63 \n74 6f 72 73 5f 61 75 78 00 6c 65 61 66 2e 63 00 5f 5f 69 6e 69 74 5f 61 72 72 61 79 5f 65 6e 64 00 5f 44 59 4e 41 4d 49 43 00 5f 5f 69 6e 69 74 5f 61 72 72 61 79 5f 73 \n74 61 72 74 00 5f 47 4c 4f 42 41 4c 5f 4f 46 46 53 45 54 5f 54 41 42 4c 45 5f 00 5f 5f 6c 69 62 63 5f 63 73 75 5f 66 69 6e 69 00 5f 5f 69 36 38 36 2e 67 65 74 5f 70 63 \n5f 74 68 75 6e 6b 2e 62 78 00 64 61 74 61 5f 73 74 61 72 74 00 70 72 69 6e 74 66 40 40 47 4c 49 42 43 5f 32 2e 30 00 5f 65 64 61 74 61 00 5f 66 69 6e 69 00 5f 5f 73 74 \n61 63 6b 5f 63 68 6b 5f 66 61 69 6c 40 40 47 4c 49 42 43 5f 32 2e 34 00 5f 5f 44 54 4f 52 5f 45 4e 44 5f 5f 00 5f 5f 64 61 74 61 5f 73 74 61 72 74 00 5f 5f 67 6d 6f 6e \n5f 73 74 61 72 74 5f 5f 00 5f 5f 64 73 6f 5f 68 61 6e 64 6c 65 00 5f 49 4f 5f 73 74 64 69 6e 5f 75 73 65 64 00 5f 5f 6c 69 62 63 5f 73 74 61 72 74 5f 6d 61 69 6e 40 40 \n47 4c 49 42 43 5f 32 2e 30 00 5f 5f 6c 69 62 63 5f 63 73 75 5f 69 6e 69 74 00 5f 65 6e 64 00 5f 73 74 61 72 74 00 5f 66 70 5f 68 77 00 5f 5f 62 73 73 5f 73 74 61 72 74 \n00 6d 61 69 6e 00 5f 4a 76 5f 52 65 67 69 73 74 65 72 43 6c 61 73 73 65 73 00 5f 5f 69 73 6f 63 39 39 5f 73 63 61 6e 66 40 40 47 4c 49 42 43 5f 32 2e 37 00 5f 69 6e 69 74 00</code></pre></div><p>既然是字符串表，那就翻译成ASCII字符串，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">crtstuff.c __CTOR_LIST__ __DTOR_LIST__ __JCR_LIST__ __do_global_dtors_aux completed.6086 dtor_idx.6088 frame_dummy __CTOR_END__ __FRAME_END__ __JCR_END__ __do_global_ctors_aux leaf.c __init_array_end _DYNAMIC __init_array_start _GLOBAL_OFFSET_TABLE_ __libc_csu_fini __i686.get_pc_thunk.bx data_start printf@@GLIBC_2.0 _edata _fini __stack_chk_fail@@GLIBC_2.4 __DTOR_END__ __data_start __gmon_start__ __dso_handle _IO_stdin_used __libc_start_main@@GLIBC_2.0 __libc_csu_init _end _start _fp_hw __bss_start main _Jv_RegisterClasses __isoc99_scanf@@GLIBC_2.7 _init</code></pre></div><p>仔细看看上面的字符串，我们会发现我们定义的全局变量和函数的名字都在这里，像printf、scanf、main等。但是printf() 函数调用中用到的字符串（像”input gemfield’s blog:”）却没有发现，它们被定义在.rodata 节中，因为它们是字符串常量。</p><p><b>第三部分、代码节（.text）</b></p><p>数据如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">92 00 00 00 //.text\n01 00 00 00 //1 ,程序定义\n06 00 00 00 /表示此节内容是指令代码,并且要使用内存单元\nd0 83 04 08 //代码映射到虚拟内存中的起始地址，为0x080483d0，记住这个数字。\nd0 03 00 00 //在gemfield中的偏移地址 0x03d0\ndc 01 00 00 //大小 0x1dc个字节\n00 00 00 00 //\n00 00 00 00 \n10 00 00 00 //对齐\n00 00 00 00 //指向的不是表</code></pre></div><p>我们把这个代码段的数据拿出来，地址为0x3d0~0x5ab,如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">31 ed 5e 89 e1 83 e4 f0 50 54 52 68 70 85 04 08 68 00 85 04 08 51 56 68 84 84 04 08 e8 bf ff ff ff f4 90 90 90 90 90 90 90 90 90 90 90 90 90 90 55 89 e5 53 83 ec 04 80 \n3d 1c a0 04 08 00 75 3f a1 20 a0 04 08 bb 20 9f 04 08 81 eb 1c 9f 04 08 c1 fb 02 83 eb 01 39 d8 73 1e 8d b6 00 00 00 00 83 c0 01 a3 20 a0 04 08 ff 14 85 1c 9f 04 08 a1 \n20 a0 04 08 39 d8 72 e8 c6 05 1c a0 04 08 01 83 c4 04 5b 5d c3 8d 74 26 00 8d bc 27 00 00 00 00 55 89 e5 83 ec 18 a1 24 9f 04 08 85 c0 74 12 b8 00 00 00 00 85 c0 74 09 \nc7 04 24 24 9f 04 08 ff d0 c9 c3 90 55 89 e5 83 e4 f0 83 ec 50 8b 45 0c 89 44 24 1c 65 a1 14 00 00 00 89 44 24 4c 31 c0 c7 44 24 28 00 00 00 00 b8 d0 85 04 08 89 04 24 \ne8 cb fe ff ff b8 e8 85 04 08 8d 54 24 2c 89 54 24 04 89 04 24 e8 f6 fe ff ff b8 eb 85 04 08 8d 54 24 2c 89 54 24 04 89 04 24 e8 a1 fe ff ff 8b 54 24 4c 65 33 15 14 00 \n00 00 74 05 e8 9f fe ff ff c9 c3 90 90 90 90 90 90 90 90 90 90 90 90 90 55 57 56 53 e8 69 00 00 00 81 c3 eb 1a 00 00 83 ec 1c 8b 6c 24 30 8d bb 20 ff ff ff e8 1b fe ff \nff 8d 83 20 ff ff ff 29 c7 c1 ff 02 85 ff 74 29 31 f6 8d b6 00 00 00 00 8b 44 24 38 89 2c 24 89 44 24 08 8b 44 24 34 89 44 24 04 ff 94 b3 20 ff ff ff 83 c6 01 39 fe 75 \ndf 83 c4 1c 5b 5e 5f 5d c3 eb 0d 90 90 90 90 90 90 90 90 90 90 90 90 90 f3 c3 8b 1c 24 c3 90 90 90 90 90 90 90 90 90 90 55 89 e5 53 83 ec 04 a1 14 9f 04 08 83 f8 ff 74 \n13 bb 14 9f 04 08 66 90 83 eb 04 ff d0 8b 03 83 f8 ff 75 f4 83 c4 04 5b 5d c3 90 90</code></pre></div><p>我们使用反汇编 指令：</p><div class=\"highlight\"><pre><code class=\"language-text\">objdump –disassemble gemfield</code></pre></div><p>输出如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">Disassembly of section .text:\n\n080483d0 &lt;_start&gt;:\n80483d0: 31 ed xor %ebp,%ebp\n80483d2: 5e pop %esi\n80483d3: 89 e1 mov %esp,%ecx\n80483d5: 83 e4 f0 and $0xfffffff0,%esp\n80483d8: 50 push %eax\n80483d9: 54 push %esp\n80483da: 52 push %edx\n80483db: 68 70 85 04 08 push $0×8048570\n80483e0: 68 00 85 04 08 push $0×8048500\n80483e5: 51 push %ecx\n80483e6: 56 push %esi\n80483e7: 68 84 84 04 08 push $0×8048484\n80483ec: e8 bf ff ff ff call 80483b0 &lt;__libc_start_main@plt&gt;\n80483f1: f4 hlt \n80483f2: 90 nop\n80483f3: 90 nop\n80483f4: 90 nop\n80483f5: 90 nop\n80483f6: 90 nop\n80483f7: 90 nop\n80483f8: 90 nop\n80483f9: 90 nop\n80483fa: 90 nop\n80483fb: 90 nop\n80483fc: 90 nop\n80483fd: 90 nop\n80483fe: 90 nop\n80483ff: 90 nop\n\n08048400 &lt;__do_global_dtors_aux&gt;:\n8048400: 55 push %ebp\n8048401: 89 e5 mov %esp,%ebp\n8048403: 53 push %ebx\n8048404: 83 ec 04 sub $0×4,%esp\n8048407: 80 3d 1c a0 04 08 00 cmpb $0×0,0x804a01c\n804840e: 75 3f jne 804844f &lt;__do_global_dtors_aux+0x4f&gt;\n8048410: a1 20 a0 04 08 mov 0x804a020,%eax\n8048415: bb 20 9f 04 08 mov $0x8049f20,%ebx\n804841a: 81 eb 1c 9f 04 08 sub $0x8049f1c,%ebx\n8048420: c1 fb 02 sar $0×2,%ebx\n8048423: 83 eb 01 sub $0×1,%ebx\n8048426: 39 d8 cmp %ebx,%eax\n8048428: 73 1e jae 8048448 &lt;__do_global_dtors_aux+0×48&gt;\n804842a: 8d b6 00 00 00 00 lea 0×0(%esi),%esi\n8048430: 83 c0 01 add $0×1,%eax\n8048433: a3 20 a0 04 08 mov %eax,0x804a020\n8048438: ff 14 85 1c 9f 04 08 call *0x8049f1c(,%eax,4)\n804843f: a1 20 a0 04 08 mov 0x804a020,%eax\n8048444: 39 d8 cmp %ebx,%eax\n8048446: 72 e8 jb 8048430 &lt;__do_global_dtors_aux+0×30&gt;\n8048448: c6 05 1c a0 04 08 01 movb $0×1,0x804a01c\n804844f: 83 c4 04 add $0×4,%esp\n8048452: 5b pop %ebx\n8048453: 5d pop %ebp\n8048454: c3 ret \n8048455: 8d 74 26 00 lea 0×0(%esi,%eiz,1),%esi\n8048459: 8d bc 27 00 00 00 00 lea 0×0(%edi,%eiz,1),%edi\n\n08048460 &lt;frame_dummy&gt;:\n8048460: 55 push %ebp\n8048461: 89 e5 mov %esp,%ebp\n8048463: 83 ec 18 sub $0×18,%esp\n8048466: a1 24 9f 04 08 mov 0x8049f24,%eax\n804846b: 85 c0 test %eax,%eax\n804846d: 74 12 je 8048481 &lt;frame_dummy+0×21&gt;\n804846f: b8 00 00 00 00 mov $0×0,%eax\n8048474: 85 c0 test %eax,%eax\n8048476: 74 09 je 8048481 &lt;frame_dummy+0×21&gt;\n8048478: c7 04 24 24 9f 04 08 movl $0x8049f24,(%esp)\n804847f: ff d0 call *%eax\n8048481: c9 leave \n8048482: c3 ret \n8048483: 90 nop\n\n08048484 &lt;main&gt;:\n8048484: 55 push %ebp\n8048485: 89 e5 mov %esp,%ebp\n8048487: 83 e4 f0 and $0xfffffff0,%esp\n804848a: 83 ec 50 sub $0×50,%esp\n804848d: 8b 45 0c mov 0xc(%ebp),%eax\n8048490: 89 44 24 1c mov %eax,0x1c(%esp)\n8048494: 65 a1 14 00 00 00 mov %gs:0×14,%eax\n804849a: 89 44 24 4c mov %eax,0x4c(%esp)\n804849e: 31 c0 xor %eax,%eax\n80484a0: c7 44 24 28 00 00 00 movl $0×0,0×28(%esp)\n80484a7: 00 \n80484a8: b8 d0 85 04 08 mov $0x80485d0,%eax\n80484ad: 89 04 24 mov %eax,(%esp)\n80484b0: e8 cb fe ff ff call 8048380 &lt;printf@plt&gt;\n80484b5: b8 e8 85 04 08 mov $0x80485e8,%eax\n80484ba: 8d 54 24 2c lea 0x2c(%esp),%edx\n80484be: 89 54 24 04 mov %edx,0×4(%esp)\n80484c2: 89 04 24 mov %eax,(%esp)\n80484c5: e8 f6 fe ff ff call 80483c0 &lt;__isoc99_scanf@plt&gt;\n80484ca: b8 eb 85 04 08 mov $0x80485eb,%eax\n80484cf: 8d 54 24 2c lea 0x2c(%esp),%edx\n80484d3: 89 54 24 04 mov %edx,0×4(%esp)\n80484d7: 89 04 24 mov %eax,(%esp)\n80484da: e8 a1 fe ff ff call 8048380 &lt;printf@plt&gt;\n80484df: 8b 54 24 4c mov 0x4c(%esp),%edx\n80484e3: 65 33 15 14 00 00 00 xor %gs:0×14,%edx\n80484ea: 74 05 je 80484f1 &lt;main+0x6d&gt;\n80484ec: e8 9f fe ff ff call 8048390 &lt;__stack_chk_fail@plt&gt;\n80484f1: c9 leave \n80484f2: c3 ret \n80484f3: 90 nop\n80484f4: 90 nop\n80484f5: 90 nop\n80484f6: 90 nop\n80484f7: 90 nop\n80484f8: 90 nop\n80484f9: 90 nop\n80484fa: 90 nop\n80484fb: 90 nop\n80484fc: 90 nop\n80484fd: 90 nop\n80484fe: 90 nop\n80484ff: 90 nop\n\n08048500 &lt;__libc_csu_init&gt;:\n8048500: 55 push %ebp\n8048501: 57 push %edi\n8048502: 56 push %esi\n8048503: 53 push %ebx\n8048504: e8 69 00 00 00 call 8048572 &lt;__i686.get_pc_thunk.bx&gt;\n8048509: 81 c3 eb 1a 00 00 add $0x1aeb,%ebx\n804850f: 83 ec 1c sub $0x1c,%esp\n8048512: 8b 6c 24 30 mov 0×30(%esp),%ebp\n8048516: 8d bb 20 ff ff ff lea -0xe0(%ebx),%edi\n804851c: e8 1b fe ff ff call 804833c &lt;_init&gt;\n8048521: 8d 83 20 ff ff ff lea -0xe0(%ebx),%eax\n8048527: 29 c7 sub %eax,%edi\n8048529: c1 ff 02 sar $0×2,%edi\n804852c: 85 ff test %edi,%edi\n804852e: 74 29 je 8048559 &lt;__libc_csu_init+0×59&gt;\n8048530: 31 f6 xor %esi,%esi\n8048532: 8d b6 00 00 00 00 lea 0×0(%esi),%esi\n8048538: 8b 44 24 38 mov 0×38(%esp),%eax\n804853c: 89 2c 24 mov %ebp,(%esp)\n804853f: 89 44 24 08 mov %eax,0×8(%esp)\n8048543: 8b 44 24 34 mov 0×34(%esp),%eax\n8048547: 89 44 24 04 mov %eax,0×4(%esp)\n804854b: ff 94 b3 20 ff ff ff call *-0xe0(%ebx,%esi,4)\n8048552: 83 c6 01 add $0×1,%esi\n8048555: 39 fe cmp %edi,%esi\n8048557: 75 df jne 8048538 &lt;__libc_csu_init+0×38&gt;\n8048559: 83 c4 1c add $0x1c,%esp\n804855c: 5b pop %ebx\n804855d: 5e pop %esi\n804855e: 5f pop %edi\n804855f: 5d pop %ebp\n8048560: c3 ret \n8048561: eb 0d jmp 8048570 &lt;__libc_csu_fini&gt;\n8048563: 90 nop\n8048564: 90 nop\n8048565: 90 nop\n8048566: 90 nop\n8048567: 90 nop\n8048568: 90 nop\n8048569: 90 nop\n804856a: 90 nop\n804856b: 90 nop\n804856c: 90 nop\n804856d: 90 nop\n804856e: 90 nop\n804856f: 90 nop\n\n08048570 &lt;__libc_csu_fini&gt;:\n8048570: f3 c3 repz ret\n\n08048572 &lt;__i686.get_pc_thunk.bx&gt;:\n8048572: 8b 1c 24 mov (%esp),%ebx\n8048575: c3 ret \n8048576: 90 nop\n8048577: 90 nop\n8048578: 90 nop\n8048579: 90 nop\n804857a: 90 nop\n804857b: 90 nop\n804857c: 90 nop\n804857d: 90 nop\n804857e: 90 nop\n804857f: 90 nop\n\n08048580 &lt;__do_global_ctors_aux&gt;:\n8048580: 55 push %ebp\n8048581: 89 e5 mov %esp,%ebp\n8048583: 53 push %ebx\n8048584: 83 ec 04 sub $0×4,%esp\n8048587: a1 14 9f 04 08 mov 0x8049f14,%eax\n804858c: 83 f8 ff cmp $0xffffffff,%eax\n804858f: 74 13 je 80485a4 &lt;__do_global_ctors_aux+0×24&gt;\n8048591: bb 14 9f 04 08 mov $0x8049f14,%ebx\n8048596: 66 90 xchg %ax,%ax\n8048598: 83 eb 04 sub $0×4,%ebx\n804859b: ff d0 call *%eax\n804859d: 8b 03 mov (%ebx),%eax\n804859f: 83 f8 ff cmp $0xffffffff,%eax\n80485a2: 75 f4 jne 8048598 &lt;__do_global_ctors_aux+0×18&gt;\n80485a4: 83 c4 04 add $0×4,%esp\n80485a7: 5b pop %ebx\n80485a8: 5d pop %ebp\n80485a9: c3 ret \n80485aa: 90 nop\n80485ab: 90 nop</code></pre></div><p>可以看出和我们自己解析的数据是完全匹配的。</p><p><b>第四部分：符号表（.symtab）</b></p><p>数据如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">01 00 00 00 //.symtab\n02 00 00 00 //完整的符号表，它往往会包含很多在运行期间( 动态连接) 用不到的符号。\n00 00 00 00 //flag\n00 00 00 00 //因为没有重定位，地址为0\nf4 15 00 00 //在gemfield文件中的偏移：0x15f4\n30 04 00 00 //大小：0×0430\n1d 00 00 00 //相关字符串表的节头索引 \n2d 00 00 00 //符号表中最后一个本地符号的索引值加1\n04 00 00 00 //对齐 4个字节\n10 00 00 00 //指向的是表（没错，符号表），每一个表项大小为0×10个字节。</code></pre></div><p>数据摘录如下，地址范围为0x15f4~1a23，一共67项：</p><div class=\"highlight\"><pre><code class=\"language-text\">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n00 00 00 00 54 81 04 08 00 00 00 00 03 00 01 00 \n00 00 00 00 68 81 04 08 00 00 00 00 03 00 02 00 \n00 00 00 00 88 81 04 08 00 00 00 00 03 00 03 00 \n00 00 00 00 ac 81 04 08 00 00 00 00 03 00 04 00 \n00 00 00 00 cc 81 04 08 00 00 00 00 03 00 05 00 \n00 00 00 00 3c 82 04 08 00 00 00 00 03 00 06 00 \n00 00 00 00 bc 82 04 08 00 00 00 00 03 00 07 00 \n00 00 00 00 cc 82 04 08 00 00 00 00 03 00 08 00 \n00 00 00 00 0c 83 04 08 00 00 00 00 03 00 09 00 \n00 00 00 00 14 83 04 08 00 00 00 00 03 00 0a 00 \n00 00 00 00 3c 83 04 08 00 00 00 00 03 00 0b 00 \n00 00 00 00 70 83 04 08 00 00 00 00 03 00 0c 00 \n00 00 00 00 d0 83 04 08 00 00 00 00 03 00 0d 00 \n00 00 00 00 ac 85 04 08 00 00 00 00 03 00 0e 00 \n00 00 00 00 c8 85 04 08 00 00 00 00 03 00 0f 00 \n00 00 00 00 04 86 04 08 00 00 00 00 03 00 10 00 \n00 00 00 00 38 86 04 08 00 00 00 00 03 00 11 00 \n00 00 00 00 14 9f 04 08 00 00 00 00 03 00 12 00 \n00 00 00 00 1c 9f 04 08 00 00 00 00 03 00 13 00 \n00 00 00 00 24 9f 04 08 00 00 00 00 03 00 14 00 \n00 00 00 00 28 9f 04 08 00 00 00 00 03 00 15 00 \n00 00 00 00 f0 9f 04 08 00 00 00 00 03 00 16 00 \n00 00 00 00 f4 9f 04 08 00 00 00 00 03 00 17 00 \n00 00 00 00 14 a0 04 08 00 00 00 00 03 00 18 00 \n00 00 00 00 1c a0 04 08 00 00 00 00 03 00 19 00 \n00 00 00 00 00 00 00 00 00 00 00 00 03 00 1a 00 \n01 00 00 00 00 00 00 00 00 00 00 00 04 00 f1 ff \n0c 00 00 00 14 9f 04 08 00 00 00 00 01 00 12 00 \n1a 00 00 00 1c 9f 04 08 00 00 00 00 01 00 13 00 \n28 00 00 00 24 9f 04 08 00 00 00 00 01 00 14 00 \n35 00 00 00 00 84 04 08 00 00 00 00 02 00 0d 00 \n4b 00 00 00 1c a0 04 08 01 00 00 00 01 00 19 00 \n5a 00 00 00 20 a0 04 08 04 00 00 00 01 00 19 00 \n68 00 00 00 60 84 04 08 00 00 00 00 02 00 0d 00 \n01 00 00 00 00 00 00 00 00 00 00 00 04 00 f1 ff \n74 00 00 00 18 9f 04 08 00 00 00 00 01 00 12 00 \n81 00 00 00 f8 86 04 08 00 00 00 00 01 00 11 00 \n8f 00 00 00 24 9f 04 08 00 00 00 00 01 00 14 00 \n9b 00 00 00 80 85 04 08 00 00 00 00 02 00 0d 00 \nb1 00 00 00 00 00 00 00 00 00 00 00 04 00 f1 ff \nb8 00 00 00 14 9f 04 08 00 00 00 00 00 00 12 00 \nc9 00 00 00 28 9f 04 08 00 00 00 00 01 00 15 00 \nd2 00 00 00 14 9f 04 08 00 00 00 00 00 00 12 00 \ne5 00 00 00 f4 9f 04 08 00 00 00 00 01 00 17 00 \nfb 00 00 00 70 85 04 08 02 00 00 00 12 00 0d 00 \n0b 01 00 00 72 85 04 08 00 00 00 00 12 02 0d 00 \n22 01 00 00 14 a0 04 08 00 00 00 00 20 00 18 00 \n2d 01 00 00 00 00 00 00 00 00 00 00 12 00 00 00 \n3f 01 00 00 1c a0 04 08 00 00 00 00 10 00 f1 ff \n46 01 00 00 ac 85 04 08 00 00 00 00 12 00 0e 00 \n4c 01 00 00 00 00 00 00 00 00 00 00 12 00 00 00 \n68 01 00 00 20 9f 04 08 00 00 00 00 11 02 13 00 \n75 01 00 00 14 a0 04 08 00 00 00 00 10 00 18 00 \n82 01 00 00 00 00 00 00 00 00 00 00 20 00 00 00 \n91 01 00 00 18 a0 04 08 00 00 00 00 11 02 18 00 \n9e 01 00 00 cc 85 04 08 04 00 00 00 11 00 0f 00 \nad 01 00 00 00 00 00 00 00 00 00 00 12 00 00 00 \nca 01 00 00 00 85 04 08 61 00 00 00 12 00 0d 00 \nda 01 00 00 24 a0 04 08 00 00 00 00 10 00 f1 ff \ndf 01 00 00 d0 83 04 08 00 00 00 00 12 00 0d 00 \ne6 01 00 00 c8 85 04 08 04 00 00 00 11 00 0f 00 \ned 01 00 00 1c a0 04 08 00 00 00 00 10 00 f1 ff \nf9 01 00 00 84 84 04 08 6f 00 00 00 12 00 0d 00 \nfe 01 00 00 00 00 00 00 00 00 00 00 20 00 00 00 \n12 02 00 00 00 00 00 00 00 00 00 00 12 00 00 00 \n2c 02 00 00 3c 83 04 08 00 00 00 00 12 00 0b 00</code></pre></div><p>符号表(symbol table) 所包含的信息用于定位和重定位程序中的符号定义和引用。目标文件的其它部分通过一个符号在这个表中的索引值来使用该符号。索引值从0 开始计数，但值为0 的表项（即第一项）并没有实际的意义，它表示未定义的符号。这里用常量STN_UNDEF 来表示未定义的符号。</p><p>一个符号表项的格式定义如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">typedef struct { \nElf32_Word st_name; //符号的名字\nElf32_Addr st_value ; //符号的值\nElf32_Word st_size; //符号的大小\nunsigned char st_info; \nunsigned char st_other ; \nElf32_Half st_shndx ; \n} Elf32_Sym;//恰好16个字节</code></pre></div><p>1、st_name,</p><p>符号的名字。但它并不是一个字符串，而是一个指向字符串表（.strtab）的索引值，在字符串表中对应位置上的字符串就是该符号名字的实际文本。如果此值为非0，它代表符号名在字符串 表中的索引值。如果此值为0，那么此符号无名字。</p><p>2、符号的值，</p><p>这个值其实没有固定的类型，它可能代表一个数值，也可以是一个地址，具体是什么要看上下文。对于不同的目标文件类型，符号表项的st_value 的含义略有不同：</p><p>*在重定位文件中，如果一个符号对应的节的索引值是SHN_COMMON，st_value 值是这个节内容的字节对齐数。 </p><p>*在重定位文件中，如果一个符号是已定义的，那么它的st_value 值是该符号的起始地址在其所在节中的偏移量，而其所在的节的索引由st_shndx 给出。</p><p>*在可执行文件和共享库文件中，st_value 不再是一个节内的偏移量，而是一个虚拟地址，直接指向符号所在的内存位置。这种情况下，st_shndx就不再需要了。</p><p>如果一个可执行文件中含有一个函数的引用，而这个函数是定义在一个共享目标文件中，那么在可执行文件中，针对那个共享目标文件的符号表应该含有这个函数的符号。符号表的st_shndx 成员值为SHN_UNDEF ，这就告诉了动态连接器，这个函数的符号定义并不在可执行文件中。如果已经在可执行文件中给这个符号申请了一个函数连接表项，而且符号表项的st_value 成员不是 0，那么st_value值就将是函数连接表项中第一条指令的地址。否则，st_value 成员是0。这个函数连接表项地址被动态连接器用来解析函数地址。</p><p>3、st_size，</p><p>符号的大小。各种符号的大小各不相同，比如一个对象的大小就是它实际占用的字节数。如果一个符号的大小为0 或者大小未知，则这个值为0。</p><p>4、st_info，</p><p>符号的类型和属性。st_info 由一系列的比特位构成，标识了“符号绑定(symbol binding) ”、“符号类型(symbol type) ”和“符号信息(symbol infomation)”三种属性。下面几个宏分别用于读取这三种属性值。</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ELF32_ST_BIND( i ) ((i)&gt;&gt;4) \n#define ELF32_ST_TYPE( i ) ((i)&amp;0xf) \n#define ELF32_ST_INFO( b,t ) (((b)&lt;&lt;4)+((t)&amp;0xf))</code></pre></div><p>下面分别说明：</p><p>符号绑定(Symbol Binding) 属性由ELF32_ST_BIND指定。</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值 \nSTB_LOCAL 0 \nSTB_GLOBAL 1 \nSTB_WEAK 2 \nSTB_LOPROC 13 \nSTB_HIPROC 15</code></pre></div><p>STB_LOCAL</p><p>表明本符号是一个本地符号。它只出现在本文件中，在本文件外该符号无效。所以在不同的文件中可以定义相同的符号名，它们之间不会互相影响。</p><p>STB_GLOBAL</p><p>表明本符号是一个全局符号。当有多个文件被连接在一起时，在所有文件中该符号都是可见的。正常情况下，在一个文件中定义的全局符号，一定是在其它文件中需要被引用，否则无须定义为全局。</p><p>STB_WEAK</p><p>类似于全局符号，但是相对于STB_GLOBAL，它们的优先级更低。 全局符号(global symbol) 和弱符号(weak symbol) 在以下两方面有区别：</p><p>*当连接编辑器把若干个可重定位目标文件连接起来时，同名的STB_GLOBAL 符号不允许出现多次。而如果在一个目标文件中已经定义了一个全局的符号(global symbol) ，当一个同名的弱符 号(weak symbol) 出现时，并不会发生错误。连接编辑器会以全局符号为准，忽略弱符号。与全局符号相似，如果已经存在的是一个公用符号，即st_shndx 域为SHN_COMMON值的符号，当一个同名的弱符号(weak symbol) 出现时，也不会发生错误。连接编辑器会以公用符号为准，忽略弱符号。</p><p>*在查找符号定义时，连接编辑器可能会搜索存档的库文件。如果是查找全局符号，连接编辑器会提取包含该未定义的全局符号的存档成员，存档成员可能是一个全局的符号，也可能是弱符号 ；而如果是查找弱符号，连接编辑器不会去提取存档成员。未解析的弱符号值为0。</p><p>STB_LOPROC ~ STB_HIPROC</p><p>为特殊处理器保留的属性区间。 在符号表中，不同属性的符号所在位置也有不同，本地符号(STB_LOCAL)排在前面，全局符号(STB_GLOBAL/STB_WEAK) 排在后面。</p><p>符号类型(Symbol Types) 属性由ELF32_ST_TYPE 指定：</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值 \nSTT_NOTYPE 0 \nSTT_OBJECT 1 \nSTT_FUNC 2 \nSTT_SECTION 3 \nSTT_FILE 4 \nSTT_LOPROC 13 \nSTT_HIPROC 15\nSTT_NOTYPE\n本符号类型未指定。\nSTT_OBJECT\n本符号是一个数据对象，比如变量、数组等。\nSTT_FUNC\n本符号是一个函数，或者其它的可执行代码。函数符号在共享目标文件中有特殊的意义。当另外一个目标文件引用一个共享目标文件中的函数符号时，连接编辑器为被引用符号自动创建一个连接表项。非STT_FUNC类型的共享目标符号不会通过这种连接表项被自动引用。\nSTT_SECTION\n本符号与一个节相关联，用于重定位，通常具有STB_LOCAL 属性。\nSTT_FILE\n本符号是一个文件符号，它具有STB_LOCAL 属性，它的节索引值是SHN_ABS。在符号表中如果存在本类符号的话，它会出现在所有STB_LOCAL 类符号的前部。\nSTT_LOPROC ~ STT_HIPROC\n这一区间的符号类型为特殊处理器保留。</code></pre></div><p>5、st_other，</p><p>本数据成员目前暂未使用，在目标文件中一律赋值为0。</p><p>6、st_shndx，</p><p>任何一个符号表项的定义都与某一个“节”相联系，因为符号是为节而定义，在节中被引用。本数据成员即指明了相关联的节。本数据成员是一个索引值，它指向相关联的节在节头表中的索引。在重定位过程中，节的位置会改变，本数据成员的值也随之改变，继续指向节的新位置。当本数据成员指向下面三种特殊的节索引值时，本符号具有如下特别的意义：</p><p>SHN_ABS</p><p>符号的值是绝对的，具有常量性，在重定位过程中，此值不需要改变。</p><p>SHN_COMMON</p><p>本符号所关联的是一个还没有分配的公共节，本符号的值规定了其内容的字节对齐规则，与sh_addralign相似。也就是说，连接器会为本符号分配存储空间，而且其起始地址是向st_value 对 齐的。本符号的值指明了要分配的字节数。</p><p>SHN_UNDEF</p><p>当一个符号指向第1 节(SHN_UNDEF) 时，表明本符号在当前目标文件中未定义，在连接过程中，连接器会找到此符号被定义的文件，并把这些文件连接在一起。本文件中对该符号的引用会被连接到实际的定义上去。</p><p><b>第七步、程序头表（Program header table）</b></p><p>在gemfield中，程序头表的偏移是0×34，表中每一项（一个程序头）的大小是0×20，表项的数目是0×09，也就是程序头表的地址范围是：0×34~0×153，其中结束地址是通过0×34+0×20*0×09-1 的出来的。</p><p>那我们先从gemfield将这一块的数据拿出来：</p><div class=\"highlight\"><pre><code class=\"language-text\">06 00 00 00 34 00 00 00 34 80 04 08 34 80 04 08 20 01 00 00 20 01 00 00 05 00 00 00 04 00 00 00 \n03 00 00 00 54 01 00 00 54 81 04 08 54 81 04 08 13 00 00 00 13 00 00 00 04 00 00 00 01 00 00 00\n01 00 00 00 00 00 00 00 00 80 04 08 00 80 04 08 fc 06 00 00 fc 06 00 00 05 00 00 00 00 10 00 00 \n01 00 00 00 14 0f 00 00 14 9f 04 08 14 9f 04 08 08 01 00 00 10 01 00 00 06 00 00 00 00 10 00 00 \n02 00 00 00 28 0f 00 00 28 9f 04 08 28 9f 04 08 c8 00 00 00 c8 00 00 00 06 00 00 00 04 00 00 00 \n04 00 00 00 68 01 00 00 68 81 04 08 68 81 04 08 44 00 00 00 44 00 00 00 04 00 00 00 04 00 00 00 \n50 e5 74 64 04 06 00 00 04 86 04 08 04 86 04 08 34 00 00 00 34 00 00 00 04 00 00 00 04 00 00 00 \n51 e5 74 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04 00 00 00 \n52 e5 74 64 14 0f 00 00 14 9f 04 08 14 9f 04 08 ec 00 00 00 ec 00 00 00 04 00 00 00 01 00 00 00</code></pre></div><p>每个程序头表项通过下面的结构体描述：</p><div class=\"highlight\"><pre><code class=\"language-text\">typedef struct { \n    Elf32_Word p_type; \n    Elf32_Off p_offset ; \n    Elf32_Addr p_vaddr; \n    Elf32_Addr p_paddr; \n    Elf32_Word p_filesz ; \n    Elf32_Word p_memsz; \n    Elf32_Word p_flags; \n    Elf32_Word p_align; \n} Elf32_Phdr;//刚好0×20个字节</code></pre></div><p>每一个程序头描述了一个“段(segment)”或者一块用于准备执行程序的信息。一个目标文件中的“段(segment) ”包含一个或者多个“节(section) ”。程序头只对可执行文件或共享目标文件有意义，对于其它类型的目标文件，该信息可以忽略。</p><p>下面来解释一下Elf32_Phdr每一个成员的意义。</p><p>1、p_type</p><p>此数据成员说明了本程序头所描述的段的类型，或者如何解析本程序头的信息。</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值\nPT_NULL 0 //没有意义\nPT_LOAD 1 //见下面\nPT_DYNAMIC 2 //表明本段指明了动态连接的信息\nPT_INTERP 3 //指向一个以”null” 结尾的字符串，该字符串是一个ELF 解析器的路径。\nPT_NOTE 4 //指向一个以”null” 结尾的字符串，字符串包含附加的信息。\nPT_SHLIB 5 //该段类型是保留的，而且未定义语法\nPT_PHDR 6 //表明的是其自身所在的程序头表在文件或内存中的位置和大小\nPT_LOPROC 0×70000000 //为特定处理器保留\nPT_HIPROC 0x7fffffff //为特定处理器保留</code></pre></div><p>其中，PT_LOAD是个比较关键的成员，表明本程序头指向的是一个可装载的段。段的内容会被从文件中拷贝到内存中。段在文件中的大小是p_filesz，在内存中的大小是p_memsz 。如果 p_memsz 大于p_filesz，在内存中多出的存储空间应填 0 填充，也就是说，段在内存中可以比在文件中占用空间更大；而相反，p_filesz永远不应该比p_memsz 大，因为这样的话，内存中就将无法完整地映射段的内容。在程序头表中，所有PT_LOAD 类型的程序头按照p_vaddr的值做升序排列。</p><p>2、p_offset</p><p>本段内容在文件中(gemfield)的位置，即段内容的开始位置相对于文件开头的偏移量。</p><p>3、p_vaddr</p><p>本段内容的开始位置在进程空间中的虚拟地址。</p><p>4、p_paddr</p><p>本段内容的开始位置在进程空间中的物理地址。对于目前大多数现代操作系统而言，应用程序中段的物理地址事先是不可知的，所以目前这个成员多数情况下保留不用，或者被操作系统改作它用。</p><p>5、p_filesz</p><p>本段内容在文件中的大小，单位是字节，可以是0。</p><p>6、p_memsz</p><p>本段内容在内存镜像中的大小，单位是字节，可以是0。</p><p>7、p_flags</p><p>本段内容的属性。虽然ELF 文件格式中没有规定，但是一个可执行程序至少会有一个可加载的段。当为可加载段创建内存镜像时，系统会按照p_flags 的指示给段赋予一定的权限。</p><div class=\"highlight\"><pre><code class=\"language-text\">名字 值 含义 \nPF_X 0×1 可执行 \nPF_W 0×2 只写 \nPF_R 0×4 只读 \nPF_MASKPROC 0xf0000000 未指定\n\n果p_flags 中没有指定PF_W 的话，系统一定不会给出写权限。其他的情况就不一定了，可以参考下表：\n\n标志位 值 所需权限 实际权限 \nnone 0 无任何权限 无任何权限 \nPF_X 1 可执行 可读，可执行 \nPF_W 2 可写 可读，可写，可执行 \nPF_W + PF_X 3 可写，可执行 可读，可写，可执行 \nPF_R 4 可读 可读，可执行 \nPF_R + PF_X 5 可读，可执行 可读，可执行 \nPF_R + PF_W 6 可读，可写 可读，可写，可执行 \nPF_R + PF_W + PF_X 7 可读，可写，可执行 可读，可写，可执行</code></pre></div><p>8、p_align</p><p>对于可装载的段来说，其p_vaddr和p_offset的值至少要向内存页面大小对齐。此数据成员指明本段内容如何在内存和文件中对齐。如果该值为0 或1，表明没有对齐要求；否则，p_align应该是一个正整数，并且是 2 的幂次数。p_vaddr和p_offset在对p_align取模后应该相等。</p><p><b>第八步、摘录一个段的内容进行分析</b></p><p>下面我们分析一个类型为PT_LOAD的段，数据为：</p><div class=\"highlight\"><pre><code class=\"language-text\">01 00 00 00 //类型\n14 0f 00 00 //在gemfield中的偏移\n14 9f 04 08 //虚拟地址\n14 9f 04 08 //物理地址\n08 01 00 00 //本段在文件（gemfield）中的大小\n10 01 00 00 //本段在内存中的大小\n06 00 00 00 //可读，可写 可读，可写，可执行\n00 10 00 00 //以0×1000（也就使4096个字节）字节对齐</code></pre></div><p>我们从gemfield将这一段数据拿出来，地址为0x0f14~0x101b，数据如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 01 00 00 00 10 00 00 00 0c 00 00 00 3c 83 04 08 0d 00 00 00 ac 85 04 08 f5 fe ff 6f ac 81 04 08 05 00 00 00 \n3c 82 04 08 06 00 00 00 cc 81 04 08 0a 00 00 00 80 00 00 00 0b 00 00 00 10 00 00 00 15 00 00 00 00 00 00 00 03 00 00 00 f4 9f 04 08 02 00 00 00 28 00 00 00 14 00 00 00 \n11 00 00 00 17 00 00 00 14 83 04 08 11 00 00 00 0c 83 04 08 12 00 00 00 08 00 00 00 13 00 00 00 08 00 00 00 fe ff ff 6f cc 82 04 08 ff ff ff 6f 01 00 00 00 f0 ff ff 6f \nbc 82 04 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n28 9f 04 08 00 00 00 00 00 00 00 00 86 83 04 08 96 83 04 08 a6 83 04 08 b6 83 04 08 c6 83 04 08 00 00 00 00 00 00 00</code></pre></div><p>通过第七步，我们知道了gemfield中一共有9个程序头表项指定的段，但是每个段还是分成好几个节的,因为段指向的文件地址包含了各种节，我们也可以通过readelf来获得这种包含关系：</p><div class=\"highlight\"><pre><code class=\"language-text\">Section to Segment mapping:\nSegment Sections…\n00 \n01 .interp \n02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr \n.eh_frame \n03 .ctors .dtors .jcr .dynamic .got .got.plt .data .bss \n04 .dynamic \n05 .note.ABI-tag .note.gnu.build-id \n06 .eh_frame_hdr \n07 \n08 .ctors .dtors .jcr .dynamic .got</code></pre></div><p><b>第九步：readelf工具</b></p><p>最后，我们通过readelf -a gemfield 来获得关于这个gemfield可执行文件的所有信息，然后和本文前面讲述的人工解析对比下，作为最后的总结：</p><div class=\"highlight\"><pre><code class=\"language-text\">ELF Header:\nMagic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 \nClass: ELF32\nData: 2′s complement, little endian\nVersion: 1 (current)\nOS/ABI: UNIX – System V\nABI Version: 0\nType: EXEC (Executable file)\nMachine: Intel 80386\nVersion: 0×1\nEntry point address: 0x80483d0\nStart of program headers: 52 (bytes into file)\nStart of section headers: 4420 (bytes into file)\nFlags: 0×0\nSize of this header: 52 (bytes)\nSize of program headers: 32 (bytes)\nNumber of program headers: 9\nSize of section headers: 40 (bytes)\nNumber of section headers: 30\nSection header string table index: 27\n\nSection Headers:\n[Nr] Name Type Addr Off Size ES Flg Lk Inf Al\n[ 0] NULL 00000000 000000 000000 00 0 0 0\n[ 1] .interp PROGBITS 08048154 000154 000013 00 A 0 0 1\n[ 2] .note.ABI-tag NOTE 08048168 000168 000020 00 A 0 0 4\n[ 3] .note.gnu.build-i NOTE 08048188 000188 000024 00 A 0 0 4\n[ 4] .gnu.hash GNU_HASH 080481ac 0001ac 000020 04 A 5 0 4\n[ 5] .dynsym DYNSYM 080481cc 0001cc 000070 10 A 6 1 4\n[ 6] .dynstr STRTAB 0804823c 00023c 000080 00 A 0 0 1\n[ 7] .gnu.version VERSYM 080482bc 0002bc 00000e 02 A 5 0 2\n[ 8] .gnu.version_r VERNEED 080482cc 0002cc 000040 00 A 6 1 4\n[ 9] .rel.dyn REL 0804830c 00030c 000008 08 A 5 0 4\n[10] .rel.plt REL 08048314 000314 000028 08 A 5 12 4\n[11] .init PROGBITS 0804833c 00033c 00002e 00 AX 0 0 4\n[12] .plt PROGBITS 08048370 000370 000060 04 AX 0 0 16\n[13] .text PROGBITS 080483d0 0003d0 0001dc 00 AX 0 0 16\n[14] .fini PROGBITS 080485ac 0005ac 00001a 00 AX 0 0 4\n[15] .rodata PROGBITS 080485c8 0005c8 00003b 00 A 0 0 4\n[16] .eh_frame_hdr PROGBITS 08048604 000604 000034 00 A 0 0 4\n[17] .eh_frame PROGBITS 08048638 000638 0000c4 00 A 0 0 4\n[18] .ctors PROGBITS 08049f14 000f14 000008 00 WA 0 0 4\n[19] .dtors PROGBITS 08049f1c 000f1c 000008 00 WA 0 0 4\n[20] .jcr PROGBITS 08049f24 000f24 000004 00 WA 0 0 4\n[21] .dynamic DYNAMIC 08049f28 000f28 0000c8 08 WA 6 0 4\n[22] .got PROGBITS 08049ff0 000ff0 000004 04 WA 0 0 4\n[23] .got.plt PROGBITS 08049ff4 000ff4 000020 04 WA 0 0 4\n[24] .data PROGBITS 0804a014 001014 000008 00 WA 0 0 4\n[25] .bss NOBITS 0804a01c 00101c 000008 00 WA 0 0 4\n[26] .comment PROGBITS 00000000 00101c 00002a 01 MS 0 0 1\n[27] .shstrtab STRTAB 00000000 001046 0000fc 00 0 0 1\n[28] .symtab SYMTAB 00000000 0015f4 000430 10 29 45 4\n[29] .strtab STRTAB 00000000 001a24 000232 00 0 0 1\nKey to Flags:\nW (write), A (alloc), X (execute), M (merge), S (strings)\nI (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)\nO (extra OS processing required) o (OS specific), p (processor specific)\n\nThere are no section groups in this file.\n\nProgram Headers:\nType Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align\nPHDR 0×000034 0×08048034 0×08048034 0×00120 0×00120 R E 0×4\nINTERP 0×000154 0×08048154 0×08048154 0×00013 0×00013 R 0×1\n[Requesting program interpreter: /lib/ld-linux.so.2]\nLOAD 0×000000 0×08048000 0×08048000 0x006fc 0x006fc R E 0×1000\nLOAD 0x000f14 0x08049f14 0x08049f14 0×00108 0×00110 RW 0×1000\nDYNAMIC 0x000f28 0x08049f28 0x08049f28 0x000c8 0x000c8 RW 0×4\nNOTE 0×000168 0×08048168 0×08048168 0×00044 0×00044 R 0×4\nGNU_EH_FRAME 0×000604 0×08048604 0×08048604 0×00034 0×00034 R 0×4\nGNU_STACK 0×000000 0×00000000 0×00000000 0×00000 0×00000 RW 0×4\nGNU_RELRO 0x000f14 0x08049f14 0x08049f14 0x000ec 0x000ec R 0×1\n\nSection to Segment mapping:\nSegment Sections…\n00 \n01 .interp \n02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr \n.eh_frame \n03 .ctors .dtors .jcr .dynamic .got .got.plt .data .bss \n04 .dynamic \n05 .note.ABI-tag .note.gnu.build-id \n06 .eh_frame_hdr \n07 \n08 .ctors .dtors .jcr .dynamic .got\n\nDynamic section at offset 0xf28 contains 20 entries:\nTag Type Name/Value\n0×00000001 (NEEDED) Shared library: [libc.so.6]\n0x0000000c (INIT) 0x804833c\n0x0000000d (FINI) 0x80485ac\n0x6ffffef5 (GNU_HASH) 0x80481ac\n0×00000005 (STRTAB) 0x804823c\n0×00000006 (SYMTAB) 0x80481cc\n0x0000000a (STRSZ) 128 (bytes)\n0x0000000b (SYMENT) 16 (bytes)\n0×00000015 (DEBUG) 0×0\n0×00000003 (PLTGOT) 0x8049ff4\n0×00000002 (PLTRELSZ) 40 (bytes)\n0×00000014 (PLTREL) REL\n0×00000017 (JMPREL) 0×8048314\n0×00000011 (REL) 0x804830c\n0×00000012 (RELSZ) 8 (bytes)\n0×00000013 (RELENT) 8 (bytes)\n0x6ffffffe (VERNEED) 0x80482cc\n0x6fffffff (VERNEEDNUM) 1\n0x6ffffff0 (VERSYM) 0x80482bc\n0×00000000 (NULL) 0×0\n\nRelocation section ‘.rel.dyn’ at offset 0x30c contains 1 entries:\nOffset Info Type Sym.Value Sym. Name\n08049ff0 00000306 R_386_GLOB_DAT 00000000 __gmon_start__\n\nRelocation section ‘.rel.plt’ at offset 0×314 contains 5 entries:\nOffset Info Type Sym.Value Sym. Name\n0804a000 00000107 R_386_JUMP_SLOT 00000000 printf\n0804a004 00000207 R_386_JUMP_SLOT 00000000 __stack_chk_fail\n0804a008 00000307 R_386_JUMP_SLOT 00000000 __gmon_start__\n0804a00c 00000407 R_386_JUMP_SLOT 00000000 __libc_start_main\n0804a010 00000507 R_386_JUMP_SLOT 00000000 __isoc99_scanf\n\nThere are no unwind sections in this file.\n\nSymbol table ‘.dynsym’ contains 7 entries:\nNum: Value Size Type Bind Vis Ndx Name\n0: 00000000 0 NOTYPE LOCAL DEFAULT UND \n1: 00000000 0 FUNC GLOBAL DEFAULT UND printf@GLIBC_2.0 (2)\n2: 00000000 0 FUNC GLOBAL DEFAULT UND __stack_chk_fail@GLIBC_2.4 (3)\n3: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__\n4: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@GLIBC_2.0 (2)\n5: 00000000 0 FUNC GLOBAL DEFAULT UND __isoc99_scanf@GLIBC_2.7 (4)\n6: 080485cc 4 OBJECT GLOBAL DEFAULT 15 _IO_stdin_used\n\nSymbol table ‘.symtab’ contains 67 entries:\nNum: Value Size Type Bind Vis Ndx Name\n0: 00000000 0 NOTYPE LOCAL DEFAULT UND \n1: 08048154 0 SECTION LOCAL DEFAULT 1 \n2: 08048168 0 SECTION LOCAL DEFAULT 2 \n3: 08048188 0 SECTION LOCAL DEFAULT 3 \n4: 080481ac 0 SECTION LOCAL DEFAULT 4 \n5: 080481cc 0 SECTION LOCAL DEFAULT 5 \n6: 0804823c 0 SECTION LOCAL DEFAULT 6 \n7: 080482bc 0 SECTION LOCAL DEFAULT 7 \n8: 080482cc 0 SECTION LOCAL DEFAULT 8 \n9: 0804830c 0 SECTION LOCAL DEFAULT 9 \n10: 08048314 0 SECTION LOCAL DEFAULT 10 \n11: 0804833c 0 SECTION LOCAL DEFAULT 11 \n12: 08048370 0 SECTION LOCAL DEFAULT 12 \n13: 080483d0 0 SECTION LOCAL DEFAULT 13 \n14: 080485ac 0 SECTION LOCAL DEFAULT 14 \n15: 080485c8 0 SECTION LOCAL DEFAULT 15 \n16: 08048604 0 SECTION LOCAL DEFAULT 16 \n17: 08048638 0 SECTION LOCAL DEFAULT 17 \n18: 08049f14 0 SECTION LOCAL DEFAULT 18 \n19: 08049f1c 0 SECTION LOCAL DEFAULT 19 \n20: 08049f24 0 SECTION LOCAL DEFAULT 20 \n21: 08049f28 0 SECTION LOCAL DEFAULT 21 \n22: 08049ff0 0 SECTION LOCAL DEFAULT 22 \n23: 08049ff4 0 SECTION LOCAL DEFAULT 23 \n24: 0804a014 0 SECTION LOCAL DEFAULT 24 \n25: 0804a01c 0 SECTION LOCAL DEFAULT 25 \n26: 00000000 0 SECTION LOCAL DEFAULT 26 \n27: 00000000 0 FILE LOCAL DEFAULT ABS crtstuff.c\n28: 08049f14 0 OBJECT LOCAL DEFAULT 18 __CTOR_LIST__\n29: 08049f1c 0 OBJECT LOCAL DEFAULT 19 __DTOR_LIST__\n30: 08049f24 0 OBJECT LOCAL DEFAULT 20 __JCR_LIST__\n31: 08048400 0 FUNC LOCAL DEFAULT 13 __do_global_dtors_aux\n32: 0804a01c 1 OBJECT LOCAL DEFAULT 25 completed.6086\n33: 0804a020 4 OBJECT LOCAL DEFAULT 25 dtor_idx.6088\n34: 08048460 0 FUNC LOCAL DEFAULT 13 frame_dummy\n35: 00000000 0 FILE LOCAL DEFAULT ABS crtstuff.c\n36: 08049f18 0 OBJECT LOCAL DEFAULT 18 __CTOR_END__\n37: 080486f8 0 OBJECT LOCAL DEFAULT 17 __FRAME_END__\n38: 08049f24 0 OBJECT LOCAL DEFAULT 20 __JCR_END__\n39: 08048580 0 FUNC LOCAL DEFAULT 13 __do_global_ctors_aux\n40: 00000000 0 FILE LOCAL DEFAULT ABS leaf.c\n41: 08049f14 0 NOTYPE LOCAL DEFAULT 18 __init_array_end\n42: 08049f28 0 OBJECT LOCAL DEFAULT 21 _DYNAMIC\n43: 08049f14 0 NOTYPE LOCAL DEFAULT 18 __init_array_start\n44: 08049ff4 0 OBJECT LOCAL DEFAULT 23 _GLOBAL_OFFSET_TABLE_\n45: 08048570 2 FUNC GLOBAL DEFAULT 13 __libc_csu_fini\n46: 08048572 0 FUNC GLOBAL HIDDEN 13 __i686.get_pc_thunk.bx\n47: 0804a014 0 NOTYPE WEAK DEFAULT 24 data_start\n48: 00000000 0 FUNC GLOBAL DEFAULT UND printf@@GLIBC_2.0\n49: 0804a01c 0 NOTYPE GLOBAL DEFAULT ABS _edata\n50: 080485ac 0 FUNC GLOBAL DEFAULT 14 _fini\n51: 00000000 0 FUNC GLOBAL DEFAULT UND __stack_chk_fail@@GLIBC_2\n52: 08049f20 0 OBJECT GLOBAL HIDDEN 19 __DTOR_END__\n53: 0804a014 0 NOTYPE GLOBAL DEFAULT 24 __data_start\n54: 00000000 0 NOTYPE WEAK DEFAULT UND __gmon_start__\n55: 0804a018 0 OBJECT GLOBAL HIDDEN 24 __dso_handle\n56: 080485cc 4 OBJECT GLOBAL DEFAULT 15 _IO_stdin_used\n57: 00000000 0 FUNC GLOBAL DEFAULT UND __libc_start_main@@GLIBC_\n58: 08048500 97 FUNC GLOBAL DEFAULT 13 __libc_csu_init\n59: 0804a024 0 NOTYPE GLOBAL DEFAULT ABS _end\n60: 080483d0 0 FUNC GLOBAL DEFAULT 13 _start\n61: 080485c8 4 OBJECT GLOBAL DEFAULT 15 _fp_hw\n62: 0804a01c 0 NOTYPE GLOBAL DEFAULT ABS __bss_start\n63: 08048484 111 FUNC GLOBAL DEFAULT 13 main\n64: 00000000 0 NOTYPE WEAK DEFAULT UND _Jv_RegisterClasses\n65: 00000000 0 FUNC GLOBAL DEFAULT UND __isoc99_scanf@@GLIBC_2.7\n66: 0804833c 0 FUNC GLOBAL DEFAULT 11 _init\n\nHistogram for `.gnu.hash’ bucket list length (total of 2 buckets):\nLength Number % of total Coverage\n0 1 ( 50.0%)\n1 1 ( 50.0%) 100.0%\n\nVersion symbols section ‘.gnu.version’ contains 7 entries:\nAddr: 00000000080482bc Offset: 0x0002bc Link: 5 (.dynsym)\n000: 0 (*local*) 2 (GLIBC_2.0) 3 (GLIBC_2.4) 0 (*local*) \n004: 2 (GLIBC_2.0) 4 (GLIBC_2.7) 1 (*global*)\n\nVersion needs section ‘.gnu.version_r’ contains 1 entries:\nAddr: 0x00000000080482cc Offset: 0x0002cc Link: 6 (.dynstr)\n000000: Version: 1 File: libc.so.6 Cnt: 3\n0×0010: Name: GLIBC_2.7 Flags: none Version: 4\n0×0020: Name: GLIBC_2.4 Flags: none Version: 3\n0×0030: Name: GLIBC_2.0 Flags: none Version: 2\n\nNotes at offset 0×00000168 with length 0×00000020:\nOwner Data size Description\nGNU 0×00000010 NT_GNU_ABI_TAG (ABI version tag)\nOS: Linux, ABI: 2.6.15\n\nNotes at offset 0×00000188 with length 0×00000024:\nOwner Data size Description\nGNU 0×00000014 NT_GNU_BUILD_ID (unique build ID bitstring)\nBuild ID: 2aebea6a183e8ffe7ab9fcbd7155670c8ce1429c</code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "ELF", 
                    "tagLink": "https://api.zhihu.com/topics/20012726"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "linux编译", 
                    "tagLink": "https://api.zhihu.com/topics/19761818"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54853214", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 2, 
            "title": "带你到Linux最开始的地方", 
            "content": "<h2><b>背景</b></h2><p>本文很久之前（2009年左右）由Gemfield发表于CivilNet Blog，2017年的时候CivilNet Blog停止服务，于是gemfield迁移本文至此。在Linux系统启动之前，传统上，是一个叫GRUB的bootloader来载入Linux kernel。而随着时代变迁，GRUB自身也经历过多次变革。本文Gemfield将对GRUB进行简单介绍。Grub分为2个或3个阶段：包括stage1、1.5、stage2。</p><h2><b>Stage1</b></h2><p>Stage1.s源文件是用古老的 at&amp;t汇编编写而成，是大名鼎鼎的unix家族操作系统引导程序GRUB中的第一个文件。它编译后产生的二进制代码正好是512字节（故意的， 也是必须的），刚好填充满硬盘初始的一个扇区，也即0柱面、0磁道、1扇区。人们称之为MBR——主引导记录。它的作用是载入stage2文件。</p><p>程序刚开始处的宏定义使用了和gcc相同的规范，定义的3个宏变量在后面用到的地方再由gemfield详细阐述。在定义了一个全局变量_start后， 程序的真正入口就到了。事实上，在二进制代码中，开始部分的代码是eb48，其中eb就是jmp的机器码，在标号_start后，紧跟着的就是这个jmp 指令，跳转到after_BPB处。Jmp后的nop指令，恐怕永远也不会执行了。注意,刚开机时cpu会调用int19h将第一个扇区的内容调到内存地 址为0x0000:0x7coo处,你要问为什么是这个地址或者为什么会发生这样的调用,原因就是历史上的机缘巧合，没什么特别的原因。</p><div class=\"highlight\"><pre><code class=\"language-ca65\">.=_start + 4</code></pre></div><p>是一个让人困惑的语句，其实这个dot是一个特殊的标号，在as汇编规范中，就代表当前的地址。从开始处的_start处填充空间至_start+4处，相当于4个字节的空间。但是，从_start开始后的jmp nop 和jmp的参数已经占用了3个字节的空间，相当于在它们的后面再用0填充1个字节的空间即可。</p><p>后面紧跟的是一系列称之为汇编directive的“伪指令”。这一部分是对磁盘等一些参数进行设置。像起始的扇区、磁道和柱面以及它们的起始地址、还有 stage1的版本号、boot_drive变量、force_lba变量、stage2的地址、扇区、段等参数，这在后面的代码中涉及的时候再由 gemfield阐述，到时候gemfield会称这部分为初始化参数部分，切记。但在这一系列的参数设置中，还有个相似的语句，就 是.=_start+STAGE1_BPBEND，照样是从上一条指令处填充0直至到达_start+0x3e处。</p><p>在jmp之后，清中断允许位，然后陈列80ca这个二进制代码。80ca就相当于orb $ox80,%dl,意思是给dl寄存器赋值80，要知道，在开机初始， BIOS加载完启动代码会把%dl寄存器设置成启动盘号(boot drive number)：</p><div class=\"highlight\"><pre><code class=\"language-text\">DL = 00h 1st floppy disk ( &#34;drive A:&#34; )\nDL = 01h 2nd floppy disk ( &#34;drive B:&#34; )\nDL = 80h 1st hard disk\nDL = 81h 2nd hard disk</code></pre></div><p>硬盘的代号是80，所以上面代表的是stage1装到硬盘上的情形，如果是软盘的话，就是orb $0x00，%dl，很显然，软驱代号是0x00。</p><p>关于boot_drive_mask这一部分，包含的ljmp $0,ABS(real_start)指令的意思是，跳转到cs:ip = 0x0000:$ABS(real_start)这个地方执行指令。程序的开头部分定义了ABS这个宏，在此处就相当于real_start- _start+0x7c00。如果是“正常的”int19h中断，这句就是废话。因为物理地址是(Segment value * 16) + Offset value，正常情况下MBR被加载到cs:ip = 0x0000:0x7c00上，而有些糟糕的BIOS会将其加载到07c0：0000上，其实这两个代表的物理地址是完全一样的（你可以用上上行的公式计 算）。有些人从来就不考虑这种事实，那就是大多数人常常把segment值设为0，这样引导代码就可以假定任何段寄存器都是0从而只对付ip里的偏移量。 所以，在grub里，加上这么一个长转移，就防止了这类糟糕的BIOS带来的大麻烦。</p><p>接着进入real_start了，ax清零，ds赋值0，ss赋值0，将STAGE1_STACKSEG（0x2000）赋值给sp，这样就设置了实模式 下的堆栈段地址（栈顶位置）ss:sp = 0x0000:0x2000。接着置中断允许位，然后检查是否设置了启动的磁盘。先用MOV_MEM_TO_AL宏将boot_drive量存到al中， 然后与0xff进行比较，用的是cmpb $0xff,%al ;je 1f。cmpb指令是将两个操作数进行相减，对标志位的影响同sub指令，但是不保存结果。其中，此处用到的是zf标志位（因为是je指令），这样，当操 作数相等（即相减为零时）zf被置1。所以，cmpb和je一起使用时，就是指，当操作数相等时，跳转至je制定的标号。所以，在这里，若 boot_drive等于0xff，则使用BIOS传递过来的默认的驱动器进行启动；如果不是，movb %al,%dl，将boot_drive的值保存至dl中，表示由boot_drive的值确定启动设备。不管怎么样，现在开始正式启动了……</p><p>驱动器号信息压栈、输出信息“GRUB”，注意，在屏幕上输出信息时调用了MSG宏。下面分析一下这个宏：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define MSG(X)  movw $ABS(x),%si ;call message</code></pre></div><p>输出GRUB字样时，变量是 notification_string，相当于将notification_string地址上的16位内容送入si寄存器，然后调用message函 数，而message函数使用了int10中断来在屏幕上显示字符。涉及到串操作指令。message函数：lodsb，从%si指向的源地址中逐一读取 一个字符，送入al中，然后检查al是否为零，如果为零，表示字符已经传输完成了（.string伪指令会在指定的字符串后加入一个字节的0），此时调用 ret返回。而若不为零，表明字符还未传输完，此时跳转到int 10h“中断前夕”，用int 10h 的oeh子功能在屏幕上以telemode模式写字符，其中，ah是子功能号，al是字符，bh是页，bl是前背景色（在图形模式下）。所以这里movw $0x0001,%bx ; movb $0x0e,%ah ;int $0x10(显示一个字符)就ok了。</p><p>在屏幕上显示完GRUB后，要来决定是进入chs模式还是lba模式（也就是看硬盘是否支持LBA模式，因为两种模式对硬盘的读写等操作有很不一样的地 方），但在这之前，你得首先判断这里是硬盘而不是软盘或者根本就没有盘（言下之意就是，如果不是硬盘，判断LBA或者CHS模式就没有意义了），所以，在 判断硬盘是否支持LBA时，先判断是不是硬盘。这里用testb $STAGE1_BIOS_HD_FLAG,%dl来判断，dl寄存器里装载的是磁盘号，有三大类情况：硬盘（0x80、0x81）、软盘（0x00、 0x01）、无效的盘（0xff）。而前面的宏就是0x80，所以通过testb和jz指令判断，如果dl中不是80或81（也就是不是硬盘），就跳转到 chs_mode函数下面。另外，如果此处判断出是硬盘的话，再接着判断是否支持LBA，使用的工具就是BIOS的int 13h中断。通过 BIOS 调用 INT 0x13 来确定是否支持扩展，</p><p>LBA 扩展功能分两个子集 , 如下 :</p><p>第一个子集提供了访问大硬盘所必须的功能 , 包括：</p><div class=\"highlight\"><pre><code class=\"language-text\">1.检查扩展是否存在 : ah = 41h , bx = 0x55aa , dl = drive( 0x80 ~ 0xff )\n2.扩展读  : ah = 42h\n3.扩展写  : ah = 43h\n4.校验扇区  : ah = 44h\n5.扩展定位  : ah = 47h\n6.取得驱动器参数 : ah = 48h</code></pre></div><p>第二个子集提供了对软件控制驱动器锁定和弹出的支持 ,包括</p><div class=\"highlight\"><pre><code class=\"language-text\">1.检查扩展  : ah = 41h\n2.锁定/解锁驱动器 : ah = 45h\n3.弹出驱动器  : ah = 46h\n4.取得驱动器参数 : ah = 48h\n5.取得扩展驱动器改变状态: ah = 49h</code></pre></div><p>下面开始具体检测 , 首先检测扩展是否存在。此时寄存器的值和 BIOS 调用分别是：AH = 0x41，BX = 0x55AA，DL = driver( 0x80 ~ 0xFF )，然后INT  13H，看返回结果：如果支持CF= 0；否则 CF = 1；CF = 0 (支持LBA) 时的寄存器值代表含义：</p><div class=\"highlight\"><pre><code class=\"language-text\">ah：扩展功能的主版本号( major version of extensions )\nal：内部使用( internal use )\nbx ：AA55h ( magic number )\ncx：Bits  Description\n0  extended disk access functions\n1  removable drive controller functions supported\n2  enhanced disk drive (EDD) functions (AH=48h,AH=4Eh) supported.\nExtended drive parameter table is valid\n3~15  reserved (0)\nCF = 1 (不支持LBA) 时的寄存器值 :\nah = 0x01 ( invalid function )</code></pre></div><p>现在stage1.s使用movb $0x41, %ah；movw $0x55aa, %bx；int $0x13； jc chs_mode来进行上述判断。如果不支持LBA，则cf就是1，跳转到chs_mode函数运行。有的bios的int 13h中断会影响到dl，所以此处用pop和push指令将其保护起来。然而cf不等于1也不表示就支持LBA了，还得再判断bx是不是aa55h，使用 cmpb $0xaa55,%bx ;jne chs_mode再判断一次，如果bx里存的不是预期的返回值，同样不支持lba，也要进入chs_mode函数。这里有个强制LBA模式要注意下，就是 说，当cf是1，bx也是aa55，那么可以不用在判断就进入强制LBA模式，代码是这样写的，使用MOV_MEM_TO_AL宏将force_lba变 量值传递到al，判断是否为0。不为零强行进入lba_mode函数。然后判断cx，如果cx为0的话表明不支持扩展第一子集，这时也进入 chs_mode函数。所以总结进入chs_mode的情况，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">第一、   磁盘号非80h或81h，进入chs_mode\n第二、   int13h,41h子功能，返回cf为0，进入进入chs_mode\n第三、   int13h,41h子功能，返回bx不为aa55，进入chs_mode\n第四、   如果没有设置强制LBA，而且也不支持扩展第一子集，进入chs_mode\n第五、   其它情况，进入lba模式</code></pre></div><p>那我们就先来分析进入chs模式的代码，你看，我们是以以上种种情况的发生而进入chs模式的，所以进入chs模式时，再来进行一些检测，来确定具体的情况。首先就是int13h的08功能号的使用。使用08功能可以检测chs模式中硬盘的参数，保存在各寄存器里：</p><div class=\"highlight\"><pre><code class=\"language-text\">DL:本机软盘驱动器的数目\nDH:最大磁头号（或说磁面数目）。0表示有1个磁面，1表示有2个磁面\nCH:存放10位磁道柱面数的低8位（高2位在CL的D7、D6中）。1表示有1个柱面，2表示有2个柱面，依次类推。\nCL:0~5位存放每磁道的扇区数目。6和7位表示10位磁道柱面数的高2位。\nAX=0\nBH=0\nBL表示驱动器类型：\n1=360K 5.25\n2=1.2M 5.25\n3=720K 3.5\n4=1.44M 3.5\nES:SI 指向软盘参数表</code></pre></div><p>如果成功返回参数，则进入final_init函数；但是如果调用失败，进位标志CF=1，AH存放错误信息码。表明不支持硬盘的chs模式（前面也判断 了不支持lba），那就要考虑是不是软盘了。再使用testb和jz指令，若dl是00或01，则认为是软盘，就跳转到floppy_probe函数执行 （后文讨论此函数）。但是若连软盘也不是，只好准备报错了。跳转到hd_probe_error函数，这个函数调用MSG函数连同 general_error函数一道输出“hard disk error”的字符。</p><p>好了，现在我们回来。刚开始经过一些列的判断，我们进入了LBA模式。然后，代码做了以下工作，movl 0x10（%si），%ecx，这个代码就是个废话，ecx寄存器被置入了一个无意义的值；然后将标号disk_address_packet处的地址赋 给si，再接着将[si-1]内存处置1（也就是mode被置1，表示LBA扩展读；如果是0，就是CHS寻址读）、将stage2的扇区数赋予ebx、 在[si]和[si+1]处存放10和00（movw $0x0010,(si)）、在[si+2]和[si+3]处存放01和00、在[si+4]和[si+5]处存放00和00、在[si+6]和 [si+7]处存放0x00和0x70（这是stage1_bufferseg的值）、在[si+8][si+9][si+A][si+B]处存放 0x01/0x00/0x00/0x00、在[si+c][si+d][si+e][si+f]处存放0x00/0x00/0x00/0x00。设置完毕 后，开始调用int 13h的42功能中断。如果出错，就跳转到chs_mode处。那么中断执行成功呢？</p><p>由si及其偏移量指向的内存保存着磁盘参数块，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">偏移量     大小       位数       描述\n00h       BYTE        8        数据块的大小 (10h or 18h)\n01h       BYTE        8        保留，必须为0\n02h       WORD      16       传输数据块数，传输完成后保存传输的块数\n04h       DWORD     32       传输时的数据缓存地址\n08h       QWORD     64       起始绝对扇区号（即起始扇区的LBA号码）</code></pre></div><p>所以，通过int13h（42）中断的作用，硬盘上第二个扇区上的内容就被读到由si偏移量为4h、5h、6h、7h确定的内存区域上了，此处是0x7000：0x0000。执行成功，将bx赋值0x7000，然后跳至copy_buffer子函数处。</p><p>LBA已完，gemfield在阅读copy_buffer前再回头看当初程序跳至chs_mode后是怎么运行的。上文中已经指出了，到达 chs_mode后经过条件判断，一共产生了三种情况，第一是进入硬盘的chs子函数（final_init）；第二是进入软盘子程序 （floppy_probe）；第三种情况是进入报错子函数，在屏幕上输出一系列错误。那就由gemfield从第一种情况开始吧。程序运行到 final_init后，将扇区数保存到si、设置mode为0、eax清零为存放磁头数做准备、将dh中存放的磁头数保存到al中、使用incw %ax指令（因为磁头数是以0~n-1方式排列的，所以增1后才是真正的磁头数）、将磁头数保存至[si+4][si+5][si+6][si+7]内存 地址上、清dx为存放扇区数做准备、cl中的0~5位存放的是扇区数，所以dx逻辑左移2位后在dh中出现的两位就是柱面数的高2位，并且把这2位移到 ah中，而ch存放的柱面数低8为移至al中，这样ax里就是柱面数了，这里因为同样的道理要进行incw %ax操作，并且把真正的柱面数放到地址为[si+8][si+9]的内存上、然后用同样的移动方法产生真正的扇区数并保存在地址为[si][si+1] [si+2][si+3]的内存上。</p><p>然后在使用int 13h（0x02）功能前要进行必备的参数设置：eax存放stage2的扇区编号（stage2_sector，默认为1）、清edx寄存器、然后通过 （stage2扇区数）/（扇区数）获得引导扇区数。注意对于div指令来说，eax恒定存放被除数，div后面的寄存器存放的是除数。余数在edx中存 放，第一个余数（扇区数）放到地址为[si+10]的内存上并将edx清零、再用(上一步除法的商) /（磁头数）得到的余数为磁头数，存放在[si+11]内存地址上。商为柱面数并存放在eax中并同时保存至[si+12][si+13]内存地址上。然 后将之前中断获得的柱面数与此处stage2所占柱面数相比较，如果stage2柱面数大，那么明显错误，程序将跳至geometry_error处。</p><p>现在，将[si+13]的内容赋值给dl（柱面数的高2位）并且左移6位、将扇区数放到cl中再增1、然后通过orb %dl，%cl和movb 12（%si），%dh指令达到这么一种情况，即：cl中存放的是扇区数和柱面数的高2位，ch中存放的是柱面数的低8位、然后恢复驱动器号（popw %dx）、然后将磁头数放置到dh中，然后将0x7000赋值给es并将bx清零，赋值0x0201给ax（获得中断功能号），参数现在设置完毕，开始调用int 13h中断：</p><div class=\"highlight\"><pre><code class=\"language-text\">%al = number of sectors（需要读的扇区数）\n%ah= 0x02（功能号）\n%ch = cylinder（起始柱面数）\n%cl = sector (bits 6-7 are high bits of &#34;cylinder&#34;)\n%dh = head\n%dl = drive (0x80 for hard disk, 0x0 for floppy disk)\n%es:%bx = segment:offset of buffer</code></pre></div><p>调用中断后，将0柱面、0磁道、2扇区的内容读到0x7000：0x0000内存处。然后程序跳转至copy_buffer处，和LBA殊途同归呀。</p><p>我们看看copy_buffer做了什么。将0x8000赋值给es、给cx赋值0x100、给ds赋值0x7000、si和di清零、方向标志DF置 零，然后使用rep和movsw指令将ds:si处连续的512字节内容传输到es:di指定的内存地址（0x8000:0x0000）。其中，rep指 令的含义就是重复执行后一句指令，没执行一次。cx减1，直至cx为0。这也是前面cx赋值0x100（256）的原因。movsw每次传输一个 字，256次就是512字节。然后popw %ds; popa还原寄存器。</p><p>接着，程序跳转到0x8000处继续执行，到此就开始执行新的模块了，stage1的任务也已经结束了。代码中*（stage2_address）的星号是at&amp;t汇编的规范：绝对跳转/调用（相对于与程序计数器有关的跳转/调用）操作数前面要加星号&#34;*&#34;。</p><p>然而，前面所述的chs模式中的第二种情况——软驱情况将会带领gemfield进入floppy_probe子函数，此处要使用int 13h（0x00功能号）来进行软驱的复位。成功的话cf=0； 然后准备调用int 13h（功能号是0x02），这和chs中的int 13h，ah=0x02是一样的。所以，先来为中断准备必须的参数：软驱复位后，将[si]处的值赋给cl（cl是起始扇区数），我们知道，由于循环，我们给了cl 4次机会，因为循环中有incw %si指令，所以si中的值是递增的，从probe_values开始，在每一次的机会中依次给cl赋予了0x24、0x12、0x0f、0x09这几种值，当然，试完后还不对的话就要执行报错函数了。</p><p>像以前那样，依次准备好bx、ah、al、ch、cl、dh的值后，就要int 13h了。成功后，dh赋值1、ch赋值0x4f，dh 设置为 79 , 表示柱面最大值为 79(80柱:0~79)，dh 设置为 1 , 表示磁头数最大值为 1(2头:0~1)，然后跳转至 final_init，在上文中关于final_init的分析 , 我们知道保存时会把柱面和磁头分别加 1 , 扇区不变，因此 , 在软盘加载时 , 将设置 Cylinder : Head : Sector = 80 : 2 : start_sector。最终就跳转至final_init函数处执行了。</p><p>gemfield的本文中，依然要注意的还有为了兼容性而设置的windows nt魔术头标识的偏移、part_start作为标识的分区表起始地址的标记的偏移、以及引导扇区结束标志0xaa55。</p><p>总的说来，在gemfield这篇稍显凌乱的文章里，主要介绍了stage1.s的使命，简介来说，就是开机时首先被BIOS INT19H装载到内存0x7c00处，然后判断chs和lba模式，然后使用int13h中断将磁盘上第二扇区的内容读到0x7000处，然后通过子函 数copy_buffer再将其调到0x8000的位置上，这个第二扇区的内容就是以后gemfield的嵌入系统版块中将要介绍的start.s模块。</p><h2><b>GRUB中实模式与保护模式的切换</b></h2><p>在stage2开始的活动中，我们一定要设置好C环境。GRUB下可以自由输入的指令，像kernel、boot、initrd等，都是由C来实现的。这样对保护模式的需求就呼之欲出了，最起码的，C语言通过保护模式实现了更大范围的硬件支持。 位于stage2中的asm.s汇编文件更多的是提供了一些基本的汇编子程序，可以称之为GRUB基本函数库。而实模式切换到保护模式的函数ENTRY(real_to_prot)以及保护模式到实模式的ENTRY（prot_to_real）就位于asm.s中。 </p><p>如果程序通过调用ENTRY(real_to_prot)函数切入到保护模式下，那么这个子函数ENTRY(real_to_prot)是怎样具体工作的呢？首要的，是要建立合适的全局描述符表GDT，不要忘了，保护模式之所以不同于实模式首先在于寻址模式的变化。保护模式通过GDT来间接寻找内存地址。GDT标号位于asm.s的末尾，内容当然是要包含各种门描述符和段的描述符。其第一个8字节的位置并不使用。GDT的内容如下： </p><div class=\"highlight\"><pre><code class=\"language-text\">gdt： \n.word 0, 0 \n.byte 0, 0, 0, 0 ；(GDT的第一个8字节不使用) \n.word 0xFFFF, 0 ；代码段描述符，可以看到段界限低16位为0xFFFF \n.byte 0, 0x9A, 0xCF, 0 ；第6、7字节为1100111110011010，段界限粒度G为1，段界限高四位都为1，可寻址到0xFFFFF*4K，即4G字节；段基址为0；权限为执行/读， \n.word 0xFFFF, 0 ；数据段描述符 \n.byte 0, 0x92, 0xCF, 0 ；权限为读/写 \n.word 0xFFFF, 0 ；16位实模式代码段描述符 \n.byte 0, 0x9E, 0, 0 ；段界限粒度G为0，段界限为0xFFFF，可寻址到0xFFFF，即64K字节；段基址为0；权限为执行/读、一致码段 \n.word 0xFFFF, 0 ；16位实模式数据段描述符 \n.byte 0, 0x92, 0, 0 ；权限为读/写 </code></pre></div><p>可以看到，GDT一共包含了4个有效的段描述符（包含空描述符的话，一共是5个）。一个段描述符会指出段的32位基地址和20位段界限（即段长）。以第一个有效的段描述符为例，它的形式应该是： </p><div class=\"highlight\"><pre><code class=\"language-text\">字节             二进制码 \n0            1 1 1 1 1 1 1 1 \n1           1 1 1 1 1 1 1 1 \n2           0 0 0 0 0 0 0 0 \n3           0 0 0 0 0 0 0 0 \n4           0 0 0 0 0 0 0 0 \n5           1 0 0 1 1 0 1 0 \n6           1 1 0 0 1 1 1 1 \n7           0 0 0 0 0 0 0 0 </code></pre></div><p>它的含义或者它描述了一个段基址为0x00000000（32位）、段长为0xF0000乘以4k（20位长度在此处表示一个段中的页数，此刻相当于4GB）、存在于内存中、特权级为2的、可读的、系统代码段。更详细的情况可以参考段描述符的格式。其中，第6字节的D位表示缺省操作数的大小。这也是我们称后两个段描述符为伪实模式代码段或数据段的原因。 </p><p>ENTRY(real_to_prot)函数还使用48位指针gdtdesc指向该GDT。gdtdesc是在asm.s的最后部分，内容如下： </p><div class=\"highlight\"><pre><code class=\"language-text\">gdtdesc： \n.word 0x27 ；GDTR界限，可以描述(0x27+1)/8=5个描述符，和上面一致 \n.long gdt ；GDTR基地址，指向gdt </code></pre></div><p>因为我们在ENTRY(real_to_prot)函数中使用lgdt gdtdesc指令将这个gdtdesc（GDT descriptor，GDT描述符）装入到GDTR寄存器中，这是一个48位的寄存器，用来保存GDT的32位基地址和16位GDT的界限（也即长度，除以8字节就得到描述符的数目），此处gdtdesc的内容被装载到GDTR中，含义在上面的注释中。 </p><p>那么现在实模式到保护模式的第一步（加载全局描述符表）就完成了，接下来需要设置cr0寄存器。其中，cr0的0位是PE位（protected enable），如果置1，则保护模式启动。很明显的，ENTRY(real_to_prot)函数要这么做。通过movl %cro,%eax;orl $CR0_PE_ON,%eax; movl %eax,%cr0来使cr0寄存器变为0。 </p><p>看样子，保护模式已经ok了。然而，gemfield不得不提醒的是，实模式和保护模式中的段寄存器——虽然都为16位，但含义却是不一样的。实模式下，段寄存器装载的是段基址，而在保护模式下，却装载的是索引，对于全局描述符表GDT的索引。因此，如果不对各段寄存器从新设置的话，怎么能够想象保护模式已经诞生了呢？ </p><p>首先cs寄存器比较特殊，它不能通过直接赋值的方法来改变值，一般是通过跳转指令来实现。所以在实模式的最后一条指令执行的时候，其实跳转指令已经被预取到队列中了。在执行完实模式的最后一条指令后，程序切换到保护模式，这条跳转指令就是执行的第一条指令。  </p>", 
            "topic": [
                {
                    "tag": "Grub", 
                    "tagLink": "https://api.zhihu.com/topics/19594006"
                }, 
                {
                    "tag": "bootloader (Android)", 
                    "tagLink": "https://api.zhihu.com/topics/19620646"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": [
                {
                    "userName": "曹婉晴", 
                    "userLink": "https://www.zhihu.com/people/f65f572edd3e3ff5210648ace9ef2d27", 
                    "content": "为什么我装了win10个ubantu18.04的双系统。开机后自动切到grub命令行。但是如果我进efi引导选择ubantu就会进入grub图形选项", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54821702", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 1, 
            "title": "AT&T的汇编世界", 
            "content": "<h2><b>背景</b></h2><p>本文很久之前（2010年左右）由Gemfield发表于CivilNet Blog，2017年的时候CivilNet Blog停止服务，于是gemfield迁移本文至此。</p><h2><b>正文</b></h2><p>就像软件的真谛——“给我一个标准，我用我的逻辑舞动世界”一样，AT&amp;T 汇编是汇编语言里的另一种标准，这是相对于鼎鼎大名的intel的x86汇编来说。即使对于电子专业的学生来说，一旦掌握了c51单片机的汇编，x86的汇编也已经入门了，但x86毕竟有着强大的寄存器，在串操作指令和操作系统类指令方面，单片机还是望尘莫及的。</p><p>下面的两段话就轻易的涉及到了关于前缀、操作数的方向、操作码的后缀这些概念的不同。关于前缀，AT&amp;T 汇编中，寄存器前被冠以“%”，立即数前被冠以“$”，十六进制数前被冠以“0x”。所以，如果gemfield在AT&amp;T 语境中说到386的通用寄存器时，会这样描述：8个32-bit寄存器 %eax，%ebx，%ecx，%edx，%edi，%esi，%ebp，%esp。比如：在stage1.s中，有这么一个定义：</p><div class=\"highlight\"><pre><code class=\"language-text\">#define ABS(x) （x-_start+0x7c00）</code></pre></div><p>那么你就会知到0x7c00是个十六进制数（_start函数的入口地址就位于内存的0x7c00处）。而在设置int 0x13的0x42功能号时，它是这么说的：</p><div class=\"highlight\"><pre><code class=\"language-text\">movb $0x42,%ah</code></pre></div><p>这句告诉了我们一些不同之处：首先，操作码的后缀l表示的是操作码的大小，l是长整数32位，那么相应的，movw是16位，movb是8位；其次，立即数是用$前缀来表示的，就像$0x42；再次，寄存器的名字是有%前缀的，像例子中的%ah；最后，操作数的方向有点不一样，比如把立即数$0x42放 到寄存器%ah中，用的是movb $0x42,%ah，也即源操作数在前，目的操作数在后，这一点和intel汇编语法正好相反。</p><p>对于内存单元操作数来说，在AT&amp;T 中是把寄存器用（）括起来，而非[]。比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">movl %ebx,8（%si）</code></pre></div><p>将ebx寄存器里的值放到内存地址是8（%si）的内存单元上。正好，这里同时遇到了另一个问题，就是在AT&amp;T 汇编中，间接寻址方式是有别于x86的。上例中的8（%si）就相当于x86中的[si+8]。</p><p>还有一种叫做label（标号）的程序控制语句，比如，在stage1.s中，有这么一段指令：</p><div class=\"highlight\"><pre><code class=\"language-text\">cmpb $GRUB_INVALID_DRIVE,%al\n    je 1f\n    movb %al,%dl\n1:\n    pushw %dx</code></pre></div><p>上面就用到了标号，je 1f，前面的两个数进行比较，如果相等就跳转到1的位置。注意，1后面的f表示的是forward，即从je指令后继续往前走来寻找1这个标号。所以，如果程序中有好几个叫做1的标号，就要看是1f还是1b了，b代表backward，方向和f相反。CivilNet BBS里有这么一个例子可以更好的帮助我们理解：</p><div class=\"highlight\"><pre><code class=\"language-text\">1:    cmp  $0,  (%si)  \n      je  1f            ///////跳转到后面的1标示的地方，也就是第6行\n      movsb  \n      stosb  \n      jmp  1b       ////////跳转到前面1表示的地方  ，也就是第1行\n1:    jmp  1b        ////////跳转到前面1表示的地方，第6行，其实就是个死循环</code></pre></div><p>然后，在AT&amp;T 汇编中出现最多的大概就是称作assembler directive的东西了，我们称作“AT&amp;T 汇编程序代码控制”。 所有的汇编器命令名都由句号（&#39;.&#39;）开头。命令名的其余是字母,通常使用小写。下面gemfield只挑出几个常用的来说明一下:</p><p><b>1，.byte 表达式（expression_rs）</b></p><p>.byte可不带参数或者带多个表达式参数，表达式之间由逗点分隔。每个表达式参数都被汇编成下一个字节。在stage1.s中，有这么一段代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">after_BPB:\nCLI\n.byte 0x80,0xca</code></pre></div><p>那么编译器在编译时，就会在cli指令的下面接着放上0x80和0xca，因为每个表达式要占用1个字节，所以此处一共占用2个字节。</p><p><b>2，.word 表达式</b></p><p>这个表达式表示任意一节中的一个或多个表达式（同样用逗号分开），表达式占一个字（两个字节）。类似的还有.long。例：</p><div class=\"highlight\"><pre><code class=\"language-text\">.word 0x800</code></pre></div><p><b>3，.file 字符（string）</b></p><p>.file 通告编译器我们准备开启一个新的逻辑文件。 string 是新文件名。总的来说，文件名是否使用引号‘&#34;’都可以；但如果您希望规定一个空文件名时，必须使用引号&#34;&#34;。本语句将来可能不再使用—允许使用它只是为了与旧版本的as编译器程序兼容。在as的一些配置中，已经删除了.file以避免与其它的汇编器冲突。例如stage1.s中：</p><div class=\"highlight\"><pre><code class=\"language-text\">.file ”stage1.s”</code></pre></div><p><b>4，.text 小节（subsection）</b></p><p>通知as编译器把后续语句汇编到编号为subsection的正文子段的末尾，subsection是一个纯粹的表达式。如果省略了参数subsection，则使用编号为0的子段。例：</p><div class=\"highlight\"><pre><code class=\"language-text\">.text</code></pre></div><p><b>5，.code16</b></p><p>告诉编译器生成16位的指令</p><p><b>6，.globl</b></p><p>.globl使得连接程序（ld）能够看到symbol，如果gemfield在局部程序中定义了symbol，那么与这个局部程序链接的局部程序也能存取symbol，例：</p><div class=\"highlight\"><pre><code class=\"language-text\">.globl SYMBOL_NAME(idt) </code></pre></div><p>定义idt为全局符号。</p><p><b>7，.fill repeat , size , value</b></p><p>repeat, size 和value都必须是纯粹的表达式。本命令生成size个字节的repeat个副本。Repeat可以是0或更大的值。Size 可以是0或更大的值, 但即使size大于8,也被视作8，以兼容其它的汇编器。各个副本中的内容取自一个8字节长的数。最高4个字节为零，最低的4个字节是value，它以as正在汇编的目标计算机的整数字节顺序排列。每个副本中的size个字节都取值于这个数最低的size个字节。再次说明，这个古怪的动作只是为了兼容其他的汇编器。size参数和value参数是可选的。如果不存在第2个逗号和value参数，则假定value为零。如果不存在第1个逗号和其后的参数，则假定size为1。</p><p>例如，在linux初始化的过程中，对全局描述符表GDT进行设置的最后一句为：</p><div class=\"highlight\"><pre><code class=\"language-text\">.fill NR_CPUS*4,8,0</code></pre></div><p>意思是.fill给每个cpu留有存放4个描述符的位置，并且每个描述符是8个字节。不过要注意的是，这种包含程序已初始化数据的节（.data）和包含程序程序还未初始化的数据的节（.bss），编译器会把它们在4字节上对齐，例如，.data是25字节，那么编译器会将它放在28个字节上。当这种以后缀名.s编写的A T&amp;T格式的汇编代码完成后，就是编译和链接了。</p><p>链接</p><p>linux下有两种方式，一种是使用汇编程序GAS和连接程序ld：</p><div class=\"highlight\"><pre><code class=\"language-text\">as filename.s –o filename.o\nld filename.o –o filename </code></pre></div><p>最终将源代码转换为目标文件.o再连接为可执行文件filename。另一种就是大名鼎鼎的被gemfield提到过的gcc：</p><div class=\"highlight\"><pre><code class=\"language-text\">gcc –o gemfield gemfield.S</code></pre></div><p>源程序gemfield.S的后缀名可以使用大写，是因为这样可以使gcc自动识别汇编程序中的c预处理命令，包括头文件中的情况，像#include、#define 、#ifdef等。</p><p>本文少了嵌入式汇编的形式，才使得AT&amp;T 汇编看起来井井有条，而非想象中的艰难。如果想要真正锻炼一下这种汇编，grub源代码stage1.s就是一个绝佳的习题。</p>", 
            "topic": [
                {
                    "tag": "汇编语言", 
                    "tagLink": "https://api.zhihu.com/topics/19565122"
                }, 
                {
                    "tag": "AT&T", 
                    "tagLink": "https://api.zhihu.com/topics/19553849"
                }, 
                {
                    "tag": "x86", 
                    "tagLink": "https://api.zhihu.com/topics/19553308"
                }
            ], 
            "comments": [
                {
                    "userName": "流水晓春叶知秋", 
                    "userLink": "https://www.zhihu.com/people/3c9805840ddd74a8f420d33c21400f40", 
                    "content": "<p>gcc的汇编器好像就是as</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/29322817", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 3, 
            "title": "带你到汉字库最近的地方", 
            "content": "<p>屏幕上的汉字是依据什么显示的？阅读本文前，gemfield先假设你已经知晓了字符编码的学问。即你已经懂得字符编码从ASCII到ANSI再到UNICODE的演变，以及gb2312／gbk等汉字编码国家标准是ANSI标准在中国大陆地区的反映。</p><p>这里有个古老传说：关于windows记事本的bug。如果你在记事本输入“联通”这个字符，以ANSI编码保存。再打开，看看该文件变成什么了。很简单，就是个编码问题，你在保存的时侯换成UNICODE或者UTF-8，就不会出这个问题了。同样的BUG：输入“AAAA BBB CCC DDDDD”(或者任何其它4-3-3-5的字母组合) 看到的都是一个个黑色的格子。输入“this app can break”（不含双引号，仅输入英文内容）； “this app can break”变成了乱码：桴獩愠灰挠湡戠敲歡。这些BUG都是ANSI编码的BUG导致的。</p><p>当我们的输出函数调用字符库时，字符库究竟是怎么把汉字的形状显示在屏幕上的呢？比如这列字符串“我今天gemfield”，它的ANSI编码（不论是GB2312，GB18030还是GBK）是 “ced2 bdf1 ccec 6765 6d66 6965 6c64”。其中，汉字是区位码的形式，这些16进制的数表示的是”我今天“这些汉字在字符库中的位置。区位码的位置与GB2312这些内码的对应关系或者算法非常简单，但不是本文的内容。这里Gemfield要说的就是，电脑上存储”我今天“的时候，实际上存放的是它对应的内码信息，而内码信息对应区位码，表示的是该汉字在字符库中的相对位置。</p><p>当我们可以在操作系统里随自己的意愿输出楷体或者隶书等汉字时，汉字的形状分明不一样，这就表明这个系统上拥有不止一个字符库，甚至可以多达上百个。我们以dos纯真年代的火爆的ucdos软件采用的hzk16字符库举例。hzk16是万千汉字库中的一个，是“汉字库16×16点阵“的意思。这个字符库大约262KB，那么它里面放的什么东西，可以让程序根据内码给出的地址到自身中调取汉字形状？</p><p>gemfield花费了一个小时的时间探究了其内部，现在得出了一些直观的结果来和一支GELE盛开之葩(如今的CivilNet社区 :-) )的网友分享。首先假设这个hzk16文件摆在了你的面前，如果你用的是windows系统，这个连后缀名都没有文件是不是让你难以下手？没错的，即使你用记事本程序将其打开，得到的不过是一对乱码而已。这些乱码根本反应不出汉字库的信息。（那么这些乱码是什么含义？如果你实在不懂的话就在下面留言）我们需要一个能以二进制（16进制）形式阅读其内容的软件。Gemfield用的是ubuntu linux系统，自带的gvim文本编辑器我很喜欢，用它可以轻松阅读hzk16中的二进制信息（你可以用任何二进制编辑器）。打开后的截图如下：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic3.zhimg.com/v2-13e444caf7a7cb6f8021b6977a744a9e_b.jpg\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-13e444caf7a7cb6f8021b6977a744a9e_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-13e444caf7a7cb6f8021b6977a744a9e_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-13e444caf7a7cb6f8021b6977a744a9e_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>hzk16这个文件很有意思，我们看到每一行二进制数据一共有16个字节，而hzk16一共有16727行二进制信息，你可以算一下这个文件多大。对，刚好和文中开头说的262KB吻合。</p><p>hzk16一共有94个区，而每个区有94个位。其中，1～9区是符号字母数字区（也就是ascii字符区）,10～15是空白（你可以从文件里看到，在2000多行时候，一连出现了7页的空白信息区，也就是00000000……）。真正的汉字区是从第2821行开始的。对于hzk16来说，因为表示一个汉字需要16×16的点阵，也就是需要16×16位的信息才能存储下一个汉字的字模。16×16位就是32字节。前面说了，一行二进制信息是16字节大。那么表示出一个汉字的字模需要2行二进制（16进制）信息。也就是说2821行和2822行表示的是这个字库中的第一个汉字。</p><p>这个汉字是什么呢？自己画……</p><p>这里以第三个汉字举例，让你能尽快的了解这个过程。第三个汉字对应第2825和2826行16进制数据。数据形式如下：</p><p>104010401090110813fcfc04111011f81240104417fe1c40f0a04090010e0604</p><p>接下来当然是化成二进制的形式，并且在数字电路中，1代表高电平，0代表低电平，也就是说1对应的液晶显示器亮，0对应的灭（一种模型而已，真实的要复杂）。好，现在把上面的16进制换成2进制，注意是16×16点阵，也就是每一行只需要4个16进制数就表示完毕了。顺便说一句，汉字字模是从左到右，从上到下的顺序表示的。换算开始：</p><p>0001000001000000</p><p>0001000001000000</p><p>0001000010010000</p><p>0001000100001000</p><p>0001001111111100</p><p>1111110000000100</p><p>0001000100010000</p><p>0001000111111000</p><p>0001001001000000</p><p>0001000001000100</p><p>0001011111111110</p><p>0001110001000000</p><p>1111000010100000</p><p>0100000010010000</p><p>0000000100001110</p><p>0000011000000100</p><p class=\"ztext-empty-paragraph\"><br/></p><p>也许你还没发现什么，这怪1长的太瘦了。我们把1换成O（不是零），再将0（零）换成空格，看看，是不是“埃”出来了。</p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-53f96cfaabcbb969a74bb5800e7a2310_b.png\" data-rawwidth=\"409\" data-rawheight=\"430\" class=\"content_image\" width=\"409\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;409&#39; height=&#39;430&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"409\" data-rawheight=\"430\" class=\"content_image lazy\" width=\"409\" data-actualsrc=\"https://pic1.zhimg.com/v2-53f96cfaabcbb969a74bb5800e7a2310_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>下面的图是Gemfield手工画出的（右边的字正好是“埃”）：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure><noscript><img src=\"https://pic1.zhimg.com/v2-7e21d6d24485b5538b9da8246b71b988_b.jpg\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-7e21d6d24485b5538b9da8246b71b988_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;375&#39;&gt;&lt;/svg&gt;\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-7e21d6d24485b5538b9da8246b71b988_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-7e21d6d24485b5538b9da8246b71b988_b.jpg\"/></figure><p>今天gemfield带领大家到了离字符库最近的地方，如果你也画出了文中提到的第一个汉字，请将答案留在留言簿上，在这离汉字库最近的地方留个纪念吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>[ 此文于2009年2月19日被Gemfield22.6.0发表于CivilNet BLOG（那时的CivilNet社区还叫做一支GELE盛开之葩）。随着CivilNet BLOG今年初停止服务，Gemfield将本文迁移至此专栏。]</p><p></p>", 
            "topic": [
                {
                    "tag": "字体", 
                    "tagLink": "https://api.zhihu.com/topics/19551016"
                }, 
                {
                    "tag": "编码", 
                    "tagLink": "https://api.zhihu.com/topics/19590100"
                }, 
                {
                    "tag": "字符编码", 
                    "tagLink": "https://api.zhihu.com/topics/19566921"
                }
            ], 
            "comments": [
                {
                    "userName": "林洪义", 
                    "userLink": "https://www.zhihu.com/people/4984508d43708c179d935b0f846d510d", 
                    "content": "<p>真棒！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/54862295", 
            "userName": "Gemfield", 
            "userLink": "https://www.zhihu.com/people/f8dedf1a968ebab2c312fd734ba88e3b", 
            "upvote": 1, 
            "title": "从进程到线程", 
            "content": "<h2><b>背景</b></h2><p>本文很久之前（2010年左右）由Gemfield发表于CivilNet Blog，2017年的时候CivilNet Blog停止服务，于是gemfield迁移本文至此。首先声明,gemfield本文以Linux为基础,所涉及到的线程概念以Linux为准，避免对于windows下可怜的你产生困扰。</p><h2><b>正文</b></h2><p>在《从程序到进程》一文中，我们知道了进程在内核中是以一个task_struct结构来描述和维护的，那么，我们编程中使用的线程概念，在内核中是怎么维护的呢？和进程有什么区别？</p><p>真相是：进程和线程没有什么大的区别；在Linux内核中，内核将用户进程、用户线程和内核线程一视同仁，即内核使用唯一的数据结构task_struct来分别表示他们；内核使用相同的调度算法对这三者进行调度；为什么没有内核进程呢？gemfield说，你可以把内核线程叫作内核进程！这又是为什么呢？</p><p>因为在Linux下，进程和线程都是由task_struct结构描述的，要说区别，就是线程是共享一个进程的内存资源的（所以也被称为轻量级进程）。而在内核中，内存本来就是共享的，所以你可以叫它内核线程，也可以叫它内核进程，不过习惯上称之为kernel threads(内核线程)。</p><p>gemfield通过ps -ef 命令来给你一个直观的印象：</p><div class=\"highlight\"><pre><code class=\"language-console\">ps -ef</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">UID PID PPID C STIME TTY TIME CMD\nroot 1 0 0 2011 ? 00:00:01 /sbin/init\nroot 2 0 0 2011 ? 00:00:00 [kthreadd]\nroot 3 2 0 2011 ? 00:00:06 [ksoftirqd/0]\nroot 6 2 0 2011 ? 00:00:00 [migration/0]\nroot 7 2 0 2011 ? 00:00:00 [migration/1]\n……\nroot 515 2 0 2011 ? 00:00:00 [hd-audio0]\nroot 560 1 0 2011 ? 00:00:00 upstart-socket-bridge –daemon\nroot 602 2 0 2011 ? 00:00:00 [kpsmoused]\nroot 603 2 0 2011 ? 00:00:00 [kworker/2:2]\nroot 15752 2 0 Jan17 ? 00:00:00 [kworker/u:1]\ngemfield 17080 1 99 Jan19 ? 4-21:15:03 ./gemfield.c\nroot 21503 667 0 12:10 ? 00:00:00 sshd: gemfield [priv]\ngemfield 21530 21503 0 12:10 ? 00:00:00 sshd: gemfield@pts/1\ngemfield 21533 21530 0 12:10 pts/1 00:00:00 -bash\ngemfield 21635 21533 0 12:11 pts/1 00:00:00 ps -ef</code></pre></div><p>上面输出的就是一系列的用户和内核进程，其中内核线程使用方括号[]括起来。pid是当前进程的id，ppid是父进程的id。 比如：[ksoftirqd/0] 内核线程是用来实施软中断的。</p><p>要了解线程（下面只介绍用户线程，所以提到线程，指的就是用户线程）的这些内容，我们先来看看线程是怎么产生的？Linux上使用pthread这个POSIX的线程库来创建线程。如下：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">pthread_create</span><span class=\"p\">(</span><span class=\"n\">pthread_t</span> <span class=\"o\">*</span><span class=\"kr\">thread</span><span class=\"p\">,</span> <span class=\"n\">pthread_attr_t</span> <span class=\"o\">*</span><span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">*</span> <span class=\"n\">start_routine</span><span class=\"p\">)(</span><span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"p\">),</span> <span class=\"kt\">void</span> <span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">);</span>\n</code></pre></div><p>若成功则返回0，否则返回出错编号；返回成功时，由thread指向的内存单元被设置为新创建线程的线程ID；attr参数用于初始化线程属性；新创建的线程从start_routine函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。在编译时注意加上 -lpthread参数，以调用静态链接库。因为pthread并非Linux系统的默认库。</p><p>因此，创建线程的pthread_create就相当于创建进程的程序中的main()函数。</p><p>而pthread_create的库函数调用最终调用了clone()系统调用。现在情况有点明了了：创建进程用的是fork系统调用，而创建线程用的是clone系统调用。焦点就集中在这里了：fork和clone这两个系统调用的区别是什么？在内核中这2个调用分别调用sys_fork(),sys_clone()，然后又都调用do_fork()去做具体的创建进程的工作。如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">asmlinkage int sys_fork(struct pt_regs regs)\n{\n    return do_fork(SIGCHLD, regs.esp, &amp;regs, 0);\n}\n\nasmlinkage int sys_clone(struct pt_regs regs)\n{\n    unsigned long clone_flags;\n    unsigned long newsp;\n    clone_flags = regs.ebx;\n    newsp = regs.ecx;\n    if (!newsp)\n        newsp = regs.esp;//子进程在用户态时使用的栈低，由clone中的child_stack参数指定\n    return do_fork(clone_flags, newsp, &amp;regs, 0);\n}</code></pre></div><p>这么说来，创建进程和创建线程的工作最终都归于do_fork系统调用了？那不是没有区别了吗？gemfield说，别急，do_fork系统调用还有参数呢，这个参数是从clone传过来的。如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">标志 含义\nCLONE_PARENT 创建的子进程的父进程是调用者的父进程，新进程与创建它的进程成了“兄弟”而不是“父子”\nCLONE_FS 子进程与父进程共享相同的文件系统，包括root、当前目录、umask\nCLONE_FILES 子进程与父进程共享相同的文件描述符（file descriptor）表\nCLONE_NEWNS 在新的namespace启动子进程，namespace描述了进程的文件hierarchy\nCLONE_SIGHAND 子进程与父进程共享相同的信号处理（signal handler）表\nCLONE_PTRACE 若父进程被trace，子进程也被trace\nCLONE_VFORK 父进程被挂起，直至子进程释放虚拟内存资源\nCLONE_VM 子进程与父进程运行于相同的内存空间\nCLONE_PID 子进程在创建时PID与父进程一致\nCLONE_THREAD Linux 2.4中增加以支持POSIX线程标准，子进程与父进程共享相同的线程群</code></pre></div><p>下面clone调用里的fn是函数指针，我们知道进程的4要素，这个就是指向程序的指针, child_stack明显是为子进程分配系统堆栈空间,flags就是标志用来描述你需要从父进程继承那些资源， arg就是传给子进程的参数）。而flags可以取的值就是上面表中所介绍的。</p><div class=\"highlight\"><pre><code class=\"language-text\">int clone(int (*fn)(void *), void *child_stack, int flags, void *arg);</code></pre></div><p>现在我们知道了这两者的本质区别是参数的不同，现在就要去do_fork中去看看是如何处理这些参数的。do_fork的原型：</p><div class=\"highlight\"><pre><code class=\"language-text\">int do_fork(unsigned int clone_flags, unsigned long stack_start, struct pt_regs * regs, unsigned long stack_size)</code></pre></div><p>1、clone_flags是由2部分组成，最低字节为信号类型，用于规定子进程去世时向父进程发出的信号，fork中这个信号就是SIGCHLD；</p><p>2、clone则可以由用户自己定义信号类型。第2部分是表示资源和特性的标志位（标志参考上表）；</p><p>3、对于fork我们可以看出第2部分全部是0，也就是对有关资源都要复制，而不是通过指针共享；</p><p>do_fork的代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">int do_fork(unsigned int clone_flags, unsigned long stack_start, struct pt_regs * regs, unsigned long stack_size) {\n    int retval = -ENOMEM;//将可能返回的值error初始值置为-ENOMEM（error no mem，没有内存）\n    struct task_struct *p;//创建一个进程描述符的指针\n    DECLARE_MUTEX_LOCKED(sem); //定义和创建了一个用于进程互斥和同步的信号量\n\n    //CLONE_PID是子进程和父进程拥有相同的PID号，这只有一种情况可以使用，就是父进程的PID为0\n    if(clone_flags &amp; CLONE_PID)\n    { \n        if(current-&gt;pid)\n            return -EPERM;\n    }\n\n    current-&gt;vfork_sem = sem;\n    p = alloc_task_struct();//为子进程分配2个页面(用来做系统栈和存放task_struct的)\n\n    if(!p)\n        goto fork_out;\n\n    *p = *current; //将父进程的task_struct赋值到2个页面中\n    retval = -EAGAIN;\n\n    //p-&gt;user 指向该进程所属用户的数据结构\n    //内核进程不属于任何用户，所以它的p-&gt;user = 0)，p-&gt;rlim是对进程资源的限制，\n    //而p-&gt;rlim[RLIMIT_NPROC]则规定了该进程所属用户可以拥有的进程数量，如果超过这个数量就不可以再fork了。\n\n    if(atomic_read(&amp;p-&gt;user-&gt;processes) &gt;= p-&gt;rlim[RLIMIT_NPROC].rlim_cur) \n        goto bad_fork_free;\n\n    atomic_inc(&amp;p-&gt;user-&gt;__count);\n    atomic_inc(&amp;p-&gt;user-&gt;processes);\n\n    //上面是对用户进程的限制，这里是对内核进程的数量限制\n    if(nr_threads &gt;= max_threads) \n        goto bad_fork_cleanup_count;\n\n    //p-&gt;exec_domain指向一个exec_domain结构\n    get_exec_domain(p-&gt;exec_domain);\n\n    //每个进程都属于某种可执行的印象格式如a.out或者elf，\n    //对这些格式的支持都是通过动态安装驱动模块来实现的，binfmt就是用来指向这些格式驱动。\n    if(p-&gt;binfmt &amp;&amp; p-&gt;binfmt-&gt;module) \n        __MOD_INC_USE_COUNT(p-&gt;binfmt-&gt;module);\n\n    p-&gt;did_exec = 0;//表示进程未被执行过\n    p-&gt;swappable = 0;//由于是新建进程，暂时拒绝被调用出内存\n    //表示本进程将被置于等待队列中，由于资源未分配好，\n    //因此置为不可中断，使其待资源有效时唤醒，不可由其它进程通过信号唤醒\n    p-&gt;state = TASK_UNINTERRUPTIBLE; \n    copy_flags(clone_flags, p);\n\n    //get_pid（）函数先判断调用它的do_fork()是否进行clone系统调用，\n    //它还进行了与组标识号及区标识号进行区别的判断；\n    p-&gt;pid = get_pid(clone_flags); //设置新建进程的PID\n\n    //由于新产生的进程的状态还是为TASK_UNINTERRUPTIBLE，\n    //因此不将其放入就绪队列，将next_run，prev_run项均置为NULL。\n    //将指向原始父进程、父进程指针项赋值为当前进程Current；\n    p-&gt;run_list.next = NULL;\n    p-&gt;run_list.prev = NULL;\n\n    if((clone_flags &amp; CLONE_VFORK) || !(clone_flags &amp; CLONE_PARENT))\n    {\n        p-&gt;p_opptr = current;\n        if(!(p-&gt;trace &amp; PT_PTRACED))\n            p-&gt;p_pptr = current;\n    }\n\n    p-&gt;p_cptr = NULL;\n    //wait4()与wait3()函数是一个进程等待子进程完成使命后再继续执行，这个队列为此做准备，这里是做初始化\n    init_waitqueue_head(&amp;p-&gt;wait_childexit);\n    p-&gt;vfork_sem = NULL;\n    spin_lock_init(&amp;p-&gt;alloc_lock);\n    //表示新建进程尚未收到任何信号\n    p-&gt;sigpending = 0;\n    init_sigpending(&amp;p-&gt;sigpending); //对子进程待处理信号队列和有关结构成分初始化\n    p-&gt;it_real_value = p-&gt;it_virt_value = p-&gt;it_prof_value = 0;\n    p-&gt;it_real_incr = p-&gt;it_virt_incr = p-&gt;it_prof_incr = 0;\n    //初始化时间数据成员\n    init_timer(&amp;p-&gt;real_timer);\n    p-&gt;real_timer.data = (unsigned long)p;\n    p-&gt;leader = 0;\n    p-&gt;tty_old_pgrp = 0;\n    p-&gt;times.tms_utime = p-&gt;times.tms_stime = 0;\n    //对进程各种记时器的初始化\n    p-&gt;times.tms_curtime = p-&gt;times.tms_cstime = 0;\n\n    #ifdef CONFIG_SMP\n    {\n        int i;\n        p-&gt;has_cpu = 0;\n        p-&gt;processor = current-&gt;processor;\n        for(i = 0; i &lt; smp_num_cpus; i++)\n        p-&gt;per_cpu_utime[i] = p-&gt;per_cpu_stime[i] = 0;\n        spin_lock_init(&amp;p-&gt;sigmask_lock);\n    }\n    #endif //多处理器相关\n\n    p-&gt;lock_death = -1;\n    p-&gt;start_time = jiffies; //对进程初始时间的初始化，jeffies是时钟中断记录的记时器，到这里task_struct基本初始化完毕\n    retval = -ENOMEM;\n    //copy_files是复制已打开文件的控制结构，但只有才clone_flags中CLONE_FILES标志才能进行，否则只是共享\n    if(copy_files(clone_flags,p)) \n        goto bad_fork_cleanup;\n\n    if(copy_fs(clone_flags, p)); \n        goto bad_fork_cleanup_files;\n\n    //和上面一样，这里是对信号的处理方式\n    if(copy_sighand(clone_flags, p))\n        goto bad_fork_cleanpu_fs;\n\n    //内存，copy_mm的代码\n    if(copy_mm(clone_flags, p))\n        goto bad_fork_cleanup_sighand; //到这里所有需要有条件复制的资源全部结束\n\n    //4个资源中，还剩系统堆栈资源没有复制，\n    //copy_thread源代码\n    retval = copy_thread(0, clone_flags, stack_start, stack_size, p, regs);\n\n    if(retval)\n        goto bad_fork_cleanup_sighand;\n\n    p-&gt;semundo = NULL;\n    p-&gt;parent_exec_id = p-&gt;self_exec_id; //parent_exec_id父进程的执行域\n    p-&gt;swappable = 1;//表示本进程的页面可以被换出\n    //将父进程传入的信号SIGCHLD放入exit_signal，用来被强行终止时发送\n    p-&gt;exit_signal = clone_flags &amp; CSIGNAL;\n    p-&gt;pdeath_signal = 0;\n    p-&gt;counter = (current-&gt;counter + 1) &gt;&gt; 1;\n    current-&gt;counter &gt;&gt;= 1;//父进程的分配的时间额被分成2半\n\n    if (!current-&gt;counter)\n        current-&gt;need_resched = 1; //让父子进程各拥有时间的一半\n\n    retval = p-&gt;pid;\n    p-&gt;tgid = retval;\n    INIT_LIST_HEAD(&amp;p-&gt;thread_group);\n    write_lock_irq(&amp;tasklist_lock);\n\n    if (clone_flags &amp; CLONE_THREAD) {\n        p-&gt;tgid = current-&gt;tgid;\n        list_add(&amp;p-&gt;thread_group, ¤t-&gt;thread_group);\n    }\n\n    SET_LINKS(p); //将子进程的PCB放入进程队列，让它可以接受调度\n    hash_pid(p); //将子进程放入hash表中\n    nr_threads++;\n    write_unlock_irq(&amp;tasklist_lock);\n\n    if (p-&gt;ptrace &amp; PT_PTRACED)\n        send_sig(SIGSTOP, p, 1);\n    //唤醒新进程放入就绪队列，等待调度，返回\n    wake_up_process(p);\n    ++total_forks;\n\n    fork_out:\n\n    if ((clone_flags &amp; CLONE_VFORK) &amp;&amp; (retval &gt; 0))\n        down(&amp;sem); //这里就是达到扣留一个进程的目的\n\n    return retval;\n}</code></pre></div><p>从上面的代码可以看出，clone的工作相比于fork少了地址空间、文件句柄、信号量等的拷贝，也就是线程的地址空间、文件句柄、信号量等是共享父进程的，这也是gemfield本文最开始处的背景。</p><p>下面用2个简单的程序来演示下：</p><p>第一个：fork.c，创建进程</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\nint main(int argc,char **argv)\n{\nint gemfield=3;\nint ret = fork();\nprintf(“gemfield do fork…\\n”);\nscanf(“%d”,gemfield);\n}</code></pre></div><p>编译：</p><div class=\"highlight\"><pre><code class=\"language-text\">gcc fork.c -o fork\n./fork &amp;\nps -ef xH</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">UID PID PPID C STIME TTY STAT TIME CMD\n……\ngemfield 21776 21775 0 14:20 pts/2 Ss 0:00 -bash\ngemfield 22015 21533 0 14:42 pts/1 S+ 0:00 ./fork\ngemfield 22016 22015 0 14:42 pts/1 S+ 0:00 ./fork\ngemfield 22018 21776 0 14:42 pts/2 R+ 0:00 ps -ef xH\n……\n</code></pre></div><p>第二个：clone.c ，创建线程</p><div class=\"highlight\"><pre><code class=\"language-text\">#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\nint gemfield =0;\nvoid civilnet_cn(){\n    printf(“gemfield do clone***\\n”);\n    scanf(“%d”,gemfield);\n}\n\nint main(int argc,char **argv)\n{\n    pthread_t tid;\n    int ret = pthread_create(&amp;tid,NULL,civilnet_cn,NULL);\n    printf(“gemfield do clone…\\n”);\n    scanf(“%d”,gemfield);\n}</code></pre></div><p>编译：</p><div class=\"highlight\"><pre><code class=\"language-text\">gcc clone.c -lpthread -o clone\n./clone&amp;\nps -ef xH</code></pre></div><p>输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">UID PID PPID C STIME TTY STAT TIME CMD\n……\ngemfield 21533 21530 0 12:10 pts/1 Ss 0:00 -bash\ngemfield 21952 21533 0 14:30 pts/1 Sl+ 0:00 ./clone\ngemfield 21952 21533 0 14:30 pts/1 Sl+ 0:00 ./clone\ngemfield 21984 21776 0 14:41 pts/2 R+ 0:00 ps -ef xH\n……\n</code></pre></div><p>看出区别了吗？两个线程的父进程都是bash，但自己的pid是一样的。</p><p>最后用一个比喻来总结下：</p><div class=\"highlight\"><pre><code class=\"language-text\">1、一个进程就好比一个房子里有一个人；\n2、clone创建线程就相当于在这个房子里添加一个人；\n3、fork创建进程就相当于再造一个房子，然后在新房子里添加一个人；</code></pre></div><p>有了上面的比喻后，我们就清楚很多了：</p><div class=\"highlight\"><pre><code class=\"language-text\">1、线程之间有很多资源可以共享：比如厨房资源、洗手间资源、热水器资源等；\n2、而对于进程来说，一个概念就是进程间通信（你要和另外一个房子里的人通信要比一个房子里的两个人之间通信复杂）；\n3、线程之间因为共享内存，所以通过一个全局的变量就可以交换数据了；\n4、但与此同时，对于线程来说，又有新的概念产生了：\n   一个人使用洗手间的时候，得锁上以防止另一个人对洗手间的访问；\n   一个人（或几个人）睡觉的时候，另外一个人可以按照之前约定的方式来叫醒他；\n   热水器的电源要一直开着，直到想洗澡的人数减为0；</code></pre></div><p>上面的概念，在gemfield的后文中术语化的时候，你就不会再觉得很深奥或者枯燥了。</p>", 
            "topic": [
                {
                    "tag": "进程", 
                    "tagLink": "https://api.zhihu.com/topics/19634510"
                }, 
                {
                    "tag": "线程", 
                    "tagLink": "https://api.zhihu.com/topics/19619468"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/syszux"
}
