{
    "title": "数学是第三世界(Mathirld)", 
    "description": "点滴生活，不一样的喜乐悲伤；\n些许诗词，相同而又不同的体会；\n多少数学，坚持与奋斗的执着;\n这里有琐事一打，诗词歌赋稍有情怀，数学感念陪同。", 
    "followers": [
        "https://www.zhihu.com/people/dou-jiao-24-70", 
        "https://www.zhihu.com/people/yu-yong-xian-yu", 
        "https://www.zhihu.com/people/chi-ye-zhen-ai-dang", 
        "https://www.zhihu.com/people/chen-yan-95-33-87", 
        "https://www.zhihu.com/people/bu-ya-yong-shi", 
        "https://www.zhihu.com/people/bei-hai-yi-xiao-xia", 
        "https://www.zhihu.com/people/pretty-good", 
        "https://www.zhihu.com/people/cyber007", 
        "https://www.zhihu.com/people/xi-ze-wen", 
        "https://www.zhihu.com/people/dawnhawk", 
        "https://www.zhihu.com/people/gu-gu-91-66-57-93", 
        "https://www.zhihu.com/people/canada", 
        "https://www.zhihu.com/people/sang-sang-55-77", 
        "https://www.zhihu.com/people/lipiisme", 
        "https://www.zhihu.com/people/shinbade", 
        "https://www.zhihu.com/people/huang-lang-wen-73", 
        "https://www.zhihu.com/people/lan-lan-sa-sa", 
        "https://www.zhihu.com/people/liu-chao-15", 
        "https://www.zhihu.com/people/gamemode_3", 
        "https://www.zhihu.com/people/wang-dong-90-96", 
        "https://www.zhihu.com/people/zhong-shan-90-70", 
        "https://www.zhihu.com/people/mugenjin", 
        "https://www.zhihu.com/people/ggcfy-11", 
        "https://www.zhihu.com/people/liao-cao-42-17", 
        "https://www.zhihu.com/people/jiapengzhang", 
        "https://www.zhihu.com/people/blueman", 
        "https://www.zhihu.com/people/kakaroc", 
        "https://www.zhihu.com/people/tiei", 
        "https://www.zhihu.com/people/gao-ding-gan-34", 
        "https://www.zhihu.com/people/chen-ai-lun-37", 
        "https://www.zhihu.com/people/guo-wei-56-3", 
        "https://www.zhihu.com/people/xian-xing-yuan-16", 
        "https://www.zhihu.com/people/han-yu-dong-10", 
        "https://www.zhihu.com/people/luo-guo-dong-56", 
        "https://www.zhihu.com/people/thisisajoke", 
        "https://www.zhihu.com/people/zhang-chang-song-55", 
        "https://www.zhihu.com/people/wu-yan-28-99", 
        "https://www.zhihu.com/people/1234567-7-36-91", 
        "https://www.zhihu.com/people/zhang-lu-yue-62", 
        "https://www.zhihu.com/people/zhang-zi-yi-31-40", 
        "https://www.zhihu.com/people/tswjq", 
        "https://www.zhihu.com/people/zhou-zhi-peng-68-2", 
        "https://www.zhihu.com/people/onlygalois", 
        "https://www.zhihu.com/people/lu-you-zhe-78", 
        "https://www.zhihu.com/people/mqqi-zi", 
        "https://www.zhihu.com/people/wang-fei-70-21-29", 
        "https://www.zhihu.com/people/zhang-xin-fang-94", 
        "https://www.zhihu.com/people/mi-zi-hao-58", 
        "https://www.zhihu.com/people/da-zhu-36-24", 
        "https://www.zhihu.com/people/liu-yang-46-61-46", 
        "https://www.zhihu.com/people/leitao-12-17", 
        "https://www.zhihu.com/people/docement", 
        "https://www.zhihu.com/people/shi-wei-60-46", 
        "https://www.zhihu.com/people/xiong-si-ji-41", 
        "https://www.zhihu.com/people/san-shi-jun-yue"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/64128890", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 0, 
            "title": "公众号mathirld简介", 
            "content": "<p>名字来源</p><p>    鉴于我所能看到的、听到的、闻到的、舔到的、摸 到的和感觉到的、想象到的、猜测到的、忽略到的， 我不加证明地自以为:</p><p>    ▶ 地球是第一世界;</p><p>    ▶ 人类是第二世界;</p><p>    ▶ 数学是第三世界。</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">于是，就有了这个拼凑的名字:\nMATHematica is the THIrd woRLD (MATHIRLD)\n</code></pre></div><p>LOGO</p><p>  制作的来源借助于名字的简写：mathirld，一个点（象征着一个概念，一个定义）、一个圆（自圆其理论，完备性）、证明（proof）、两个数学常数（圆周率pi，自然对数e）</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-e4ab715c7c6028d5e1651a7f88c7edf5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1081\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e4ab715c7c6028d5e1651a7f88c7edf5_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1080&#39; height=&#39;1081&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1081\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e4ab715c7c6028d5e1651a7f88c7edf5_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-e4ab715c7c6028d5e1651a7f88c7edf5_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>服务内容</p><p>数学是利用符号语言研究数量、结构、变化及空 间等概念的思想游戏，从某种角度看属于形式科学 的一种。数学透过抽象化和逻辑推理的使用，由计 数、计算、量度和对物体形状及运动的观察而产 生。于是，Mathirld 提供以下服务内容:</p><p>    ▶ 数学的内容;<br/>    ▶ 数学家的故事;<br/>    ▶ 数学世界里的‘人’，‘事’和‘物’。</p><p>发布方式</p><p>      每一次更新，遵循一生二，二生三的原则，两个与数学有关的人、事、物，最后一个是数学好事者的随笔，也回要求其他的同学、朋友来捉笔，分享他们自己的故事。</p><p>这是一个数学好事者精心设计的自我安慰的世界，希望来此一游的你，也可满足的离开。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3b155b500806d1135503cc8e61533d98_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"258\" class=\"content_image\" width=\"258\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;258&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"258\" class=\"content_image lazy\" width=\"258\" data-actualsrc=\"https://pic1.zhimg.com/v2-3b155b500806d1135503cc8e61533d98_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43493097", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 0, 
            "title": "从事娱乐工作者的等级制度", 
            "content": "<h2><b><i>娱人者，星！</i></b></h2><p class=\"ztext-empty-paragraph\"><br/></p><h2># # 官方网站</h2><p>凡是具有中国国籍的年满25岁以上的人，皆可凭借有效证件注册成为其中一员，在其上的言论都要自己负责。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>## 用途</h2><p>把从事这类人，按照作品的好坏，人品的低劣，素质的高低，公益事业的力度，让注册会员评选给出每一项的分数，然后按照分数，在折合一定的数值，这个数值就叫做娱乐工作者的“星度”，再按照分数高低进行排名，这个排名就是娱乐工作者的标志，他们的酬劳按照这个“星度”给予一定的换算价格。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>星度</h2><p>星度数值是从1到100，每一个星度的基本酬劳是100,000RMB。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>这又是我假象的，而且是根本就不可能的，因为这里是有五千年的历史，从秦淮河上的花魁到现在的“星”，呵呵，历史可是给人一个玩笑啊，也够讽刺的，千年前的因，如今的果，没有是非过错，只不过是一种历史的发展而已！！！！！！！！！！！！！！！！！！！！！</p>", 
            "topic": [
                {
                    "tag": "明星", 
                    "tagLink": "https://api.zhihu.com/topics/19555383"
                }, 
                {
                    "tag": "明星八卦", 
                    "tagLink": "https://api.zhihu.com/topics/19781491"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43492191", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 0, 
            "title": "子庄子律师事务所", 
            "content": "<p>这是一个公共的律师事务所，是我假想的一个为大众服务的法律平台，名字也是我假象的“子庄子律师事务所“，他的运营是这样的，也是我想象的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>##  官方网站</p><p>凡是具有中国国籍的年满25岁以上的人，皆可凭借有效证件注册成为其中一员，在其上的言论都要自己负责。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>## 事物</p><p>把有些大家关注的问题，需要法律援助的问题，在官网上罗列出来详细的各个事情的真实经过，必须经过法律认定的真实，经过注册会员的投票来把这些需要法律解决的问题，按照投票高低，从多到少排列，抽取最高两个，由“子庄子律师事务所”里的工作者提供服务</p><p class=\"ztext-empty-paragraph\"><br/></p><p>## 经营成本</p><p>对于事物中的排列靠前者，请大家给予捐助，或者是众筹，所得钱物一方面用来服务需要的问题，一方面要运营“子庄子律师事务所”，一方面给予员工一定的酬劳。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然了，这是我的一个假象，也不是很完善，而且具体的实施是不可能的！</p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "庄子（人物）", 
                    "tagLink": "https://api.zhihu.com/topics/19599611"
                }, 
                {
                    "tag": "庄子（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20133436"
                }, 
                {
                    "tag": "法律", 
                    "tagLink": "https://api.zhihu.com/topics/19550874"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43427858", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 2, 
            "title": "Julia vs R vs Python: 简单优化对比", 
            "content": "<p>备注：我感觉名字不好，便使用英文原文的名字。这篇短文的原文是：[<a href=\"https://link.zhihu.com/?target=https%3A//www.codementor.io/zhuojiadai/julia-vs-r-vs-python-simple-optimization-gnqi4njro\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia vs R vs Python: simple optimization</a>](</p><a href=\"https://link.zhihu.com/?target=https%3A//www.codementor.io/zhuojiadai/julia-vs-r-vs-python-simple-optimization-gnqi4njro\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia vs R vs Python: simple optimization | Codementor</a><p>)，翻译的是：[优化过程 PK ：Julia 能打败 Python 和 R 笑到最后吗？](</p><a href=\"https://link.zhihu.com/?target=https%3A//www.oschina.net/news/99488/julia-vs-r-vs-python\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化过程 PK ：Julia 能打败 Python 和 R 笑到最后吗？</a><p>)，我原来看的是[<a href=\"https://link.zhihu.com/?target=http%3A//www.linuxeden.com/a/35581\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化过程 PK ：Julia 能打败 Python 和 R 笑到最后吗？</a>](</p><a href=\"https://link.zhihu.com/?target=http%3A//www.linuxeden.com/a/35581\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">优化过程 PK ：Julia 能打败 Python 和 R 笑到最后吗？</a><p>)</p><p>编译自：<a href=\"https://link.zhihu.com/?target=https%3A//www.codementor.io/zhuojiadai/julia-vs-r-vs-python-simple-optimization-gnqi4njro\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia vs R vs Python: simple optimization</a></p><p>作者：ZJ，数据科学家，全栈工程师，信用风险模型团队负责人。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>在这篇文章中，作者通过一个简单的似然函数优化（Maximum Likelihood Optimization）问题来对比 Julia，R 和 Python。这是一个比较小的优化问题，性能上的差异表现可能不太明显，但解决问题的过程能很好地反应三者各自的优劣势。</p><p>作者在撰写本文时，对这三种语言的熟悉程度如下：</p><p>语言实战经验R9 年Julia6 个月Python新手</p><p>Julia 布道者 ChrisRackauckas 曾经说过：</p><blockquote>如果你用 Julia 处理一个 10 秒内的问题，它的优势并不能体现出来。 而一旦处理的问题变复杂，需要花费比较长的时间，这时 Julia 的优势就会慢慢体现了。</blockquote><p>有人用 Python 和 Julia 做过对比实验。以 10⁵ 为界点进行计算，当数值比 10⁵ 更小时 Python 比 Julia 快的。但数值大于 10⁵ 后，Julia 的速度就比 Python 快很多了。</p><h2><b>优化问题</b></h2><p>观察序列 Q1,Q2,…,Qn，我们需要找到优化该似然函数的参数 μ 和 σ：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-bda74d8395f639e6cb22b4a6a01e2e1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"56\" class=\"content_image\" width=\"266\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;266&#39; height=&#39;56&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"266\" data-rawheight=\"56\" class=\"content_image lazy\" width=\"266\" data-actualsrc=\"https://pic4.zhimg.com/v2-bda74d8395f639e6cb22b4a6a01e2e1b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>通常我们会尝试优化对数似然：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6c5e8b565ada764ee93037d262aba03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb\" width=\"483\" data-original=\"https://pic4.zhimg.com/v2-b6c5e8b565ada764ee93037d262aba03_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;483&#39; height=&#39;73&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"483\" data-rawheight=\"73\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"483\" data-original=\"https://pic4.zhimg.com/v2-b6c5e8b565ada764ee93037d262aba03_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6c5e8b565ada764ee93037d262aba03_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>在统计学上，这是截断的正态分布的最大似然估计（MLE）。</p><h2><b>Julia 的测试情况</b></h2><p>以下是作者使用 Julia 进行测试的情况。使用 Julia 中的 Optim.jl，可以直接使用特殊符号（<b>symbols</b>）作为变量名称，按照使用习惯，此处作者使用了希腊字母 μσ。Julia 还有一个 JuMP.jl 包用于优化问题。但 JuMP.jl 更适合用于更高级的优化问题，用在此处有点小题大做。</p><p><b>Julia 第一次优化</b></p><p>Julia 在执行第一次优化用了 7 秒，比 R 和 Python 都慢。对此，ChrisRackauckas 指出：</p><blockquote>如果你需要解决 100 个 10 秒的优化问题，第一次执行需要花费 17 秒，接下来的优化不需要编译，大约只需要 10 秒。因此，总运行时常为 1007 秒。所以，当用 Julia 处理一个 10⁵ 秒的问题时，这 7 秒基本可以忽略不记；但如果用 Julia 处理 5 秒甚至更小的问题时，这 7 秒的差异就特别明显。</blockquote><p>作者在下方硬编码了在 MLE 估计中使用的 Q_t 的值：</p><div class=\"highlight\"><pre><code class=\"language-text\">using Distributions, Optim# hard coded data\\observationsodr=[0.10,0.20,0.15,0.22,0.15,0.10,0.08,0.09,0.12]\nQ_t = quantile.(Normal(0,1), odr)# return a function that accepts `[mu, sigma]` as parameterfunction neglik_tn(Q_t)\n    maxx = maximum(Q_t)\n    f(μσ) = -sum(logpdf.(Truncated(Normal(μσ[1],μσ[2]), -Inf, maxx), Q_t))\n    f\nend\n\nneglikfn = neglik_tn(Q_t)# optimize!# start searching @time res = optimize(neglikfn, [mean(Q_t), std(Q_t)]) # 7.5 seconds@time res = optimize(neglikfn, [mean(Q_t), std(Q_t)]) # 0.000137 seconds# the \\mu and \\sigma estimatesOptim.minimizer(res) # [-1.0733250637041452,0.2537450497038758] # or# use `fieldnames(res)` to see the list of field names that can be referenced via . (dot)res.minimizer # [-1.0733250637041452,0.2537450497038758]</code></pre></div><p>输出效果如下，排版看起来很舒服，也支持数学公示显示：</p><div class=\"highlight\"><pre><code class=\"language-text\">Results of Optimization Algorithm\n * Algorithm: Nelder-Mead\n * Starting Point: [-1.1300664159893685,0.22269345618402703]\n * Minimizer: [-1.0733250637041452,0.2537450497038758]\n * Minimum: -1.893080e+00\n * Iterations: 28\n * Convergence: true\n   *  √(Σ(yᵢ-ȳ)²)/n &lt; 1.0e-08: true\n   * Reached Maximum Number of Iterations: false\n * Objective Calls: 59</code></pre></div><p>由此看出 <b>Julia 的优势</b> ：</p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-11e78e5bb400f8c027607e57be6cfd58_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"62\" data-rawheight=\"34\" class=\"content_image\" width=\"62\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;62&#39; height=&#39;34&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"62\" data-rawheight=\"34\" class=\"content_image lazy\" width=\"62\" data-actualsrc=\"https://pic1.zhimg.com/v2-11e78e5bb400f8c027607e57be6cfd58_b.jpg\"/></figure><p><code>Truncated(DN, lower, upper)</code> 是定义截断分布的非常简单的方法</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a8cf92e23d8f07d4385d4e20bc3c49b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"30\" data-rawheight=\"31\" class=\"content_image\" width=\"30\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;30&#39; height=&#39;31&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"30\" data-rawheight=\"31\" class=\"content_image lazy\" width=\"30\" data-actualsrc=\"https://pic3.zhimg.com/v2-a8cf92e23d8f07d4385d4e20bc3c49b2_b.jpg\"/></figure><p><code>logpdf</code> 函数适用于任何分布式函数</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-a8cf92e23d8f07d4385d4e20bc3c49b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"30\" data-rawheight=\"31\" class=\"content_image\" width=\"30\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;30&#39; height=&#39;31&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"30\" data-rawheight=\"31\" class=\"content_image lazy\" width=\"30\" data-actualsrc=\"https://pic3.zhimg.com/v2-a8cf92e23d8f07d4385d4e20bc3c49b2_b.jpg\"/></figure><p>输出结果条理清晰，可读性强</p><p><b>Julia 的不足：</b></p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-c6dba79a647491e54a1d2fce812c296b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"55\" data-rawheight=\"31\" class=\"content_image\" width=\"55\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;55&#39; height=&#39;31&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"55\" data-rawheight=\"31\" class=\"content_image lazy\" width=\"55\" data-actualsrc=\"https://pic4.zhimg.com/v2-c6dba79a647491e54a1d2fce812c296b_b.jpg\"/></figure><p>如果只是处理 10 秒内的简单问题，7.5 秒的编译时间会很烦人</p><h2><b>R 的测试情况</b></h2><p>R 有一个 truncnorm 用于处理截断正态</p><div class=\"highlight\"><pre><code class=\"language-text\">odr=c(0.10,0.20,0.15,0.22,0.15,0.10,0.08,0.09,0.12)\nx = qnorm(odr)\n\nlibrary(truncnorm)\nneglik_tn = function(x) {\n  maxx = max(x)\n  resfn = function(musigma) {\n    -sum(log(dtruncnorm(x, a = -Inf, b= maxx, musigma[1], musigma[2])))\n  }\n  \n  resfn\n}\n\nneglikfn = neglik_tn(x)\n\nsystem.time(res &lt;- optim(c(mean(x), sd(x)), neglikfn))\nres</code></pre></div><p>结果将输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">$par\n[1] -1.0733354  0.2537339\n\n$value\n[1] -1.89308\n\n$counts\nfunction gradient \n      55       NA \n\n$convergence\n[1] 0\n\n$message\nNULL</code></pre></div><p><b>R 的优势：</b></p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b86055df4ddade893f7a2b51d01b4c93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"32\" data-rawheight=\"28\" class=\"content_image\" width=\"32\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;32&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"32\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"32\" data-actualsrc=\"https://pic4.zhimg.com/v2-b86055df4ddade893f7a2b51d01b4c93_b.jpg\"/></figure><p>又处理截断正态的专用包</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b86055df4ddade893f7a2b51d01b4c93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"32\" data-rawheight=\"28\" class=\"content_image\" width=\"32\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;32&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"32\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"32\" data-actualsrc=\"https://pic4.zhimg.com/v2-b86055df4ddade893f7a2b51d01b4c93_b.jpg\"/></figure><p>马上输出结果，编译比 Julia 快</p><p><b>R 的不足：</b></p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-5be970ed31c566c98d54c9874de01e57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"28\" data-rawheight=\"32\" class=\"content_image\" width=\"28\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;28&#39; height=&#39;32&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"28\" data-rawheight=\"32\" class=\"content_image lazy\" width=\"28\" data-actualsrc=\"https://pic4.zhimg.com/v2-5be970ed31c566c98d54c9874de01e57_b.jpg\"/></figure><p>截断正态没有对数密度; 没有简单的方法来定义任意分布的截断分布; 稀疏输出</p><h2><b>Python 的测试情况</b></h2><p>作者利用已有的 Python 学习经验想出如下方案，输入代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">import numpy as npfrom scipy.optimize import minimizefrom scipy.stats import norm# generate the dataodr=[0.10,0.20,0.15,0.22,0.15,0.10,0.08,0.09,0.12]\nQ_t = norm.ppf(odr)\nmaxQ_t = max(Q_t)# define a function that will return a return to optimize based on the input datadef neglik_trunc_tn(Q_t):\n    maxQ_t = max(Q_t)    def neglik_trunc_fn(musigma):\n        return -sum(norm.logpdf(Q_t, musigma[0], musigma[1])) + len(Q_t)*norm.logcdf(maxQ_t, musigma[0], musigma[1])    return neglik_trunc_fn# the likelihood function to optimizeneglik = neglik_trunc_tn(Q_t)# optimize!res = minimize(neglik, [np.mean(Q_t), np.std(Q_t)])\nres</code></pre></div><p>输出结果：</p><div class=\"highlight\"><pre><code class=\"language-text\">      fun: -1.8930804441641282\n hess_inv: array([[ 0.01759589,  0.00818596],\n       [ 0.00818596,  0.00937868]])\n      jac: array([ -3.87430191e-07,   3.33786011e-06])\n  message: &#39;Optimization terminated successfully.&#39;\n     nfev: 40\n      nit: 6\n     njev: 10\n   status: 0\n  success: True\n        x: array([-1.07334252,  0.25373624])</code></pre></div><p>Python 的优势：</p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-3da441991159c5a31cb84014368bfe42_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"49\" data-rawheight=\"28\" class=\"content_image\" width=\"49\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;49&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"49\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"49\" data-actualsrc=\"https://pic3.zhimg.com/v2-3da441991159c5a31cb84014368bfe42_b.jpg\"/></figure><p>易于学习，各种支持非常好</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d9912f40f2e6f433fb55363600df8ca0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"28\" class=\"content_image\" width=\"24\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;24&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"24\" data-actualsrc=\"https://pic1.zhimg.com/v2-d9912f40f2e6f433fb55363600df8ca0_b.jpg\"/></figure><p>能很快输出结果，比 Julia 编译快</p><p>Python 的不足：</p><p>指数描述</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-d9912f40f2e6f433fb55363600df8ca0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"28\" class=\"content_image\" width=\"24\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;24&#39; height=&#39;28&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"24\" data-rawheight=\"28\" class=\"content_image lazy\" width=\"24\" data-actualsrc=\"https://pic1.zhimg.com/v2-d9912f40f2e6f433fb55363600df8ca0_b.jpg\"/></figure><p>输出的可读性有待提高</p><p>综上所述，三种的综合对比如下：</p><p>语言优势不足Julia易于使用；完美支持截断正态分布；可读性强第一次运行编译时间长R易于使用可读性对比 Julia 较差Python易于使用可读性对比 Julia 较差</p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Julia（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19678370"
                }, 
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "R语言绘图", 
                    "tagLink": "https://api.zhihu.com/topics/20140529"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42569705", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 0, 
            "title": "一款可分离的手机，也许是未来的形态。", 
            "content": "<p>设计如下：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-f3941596f76d932bf4d9e0d45ef79424_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-f3941596f76d932bf4d9e0d45ef79424_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;720&#39; height=&#39;960&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-f3941596f76d932bf4d9e0d45ef79424_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-f3941596f76d932bf4d9e0d45ef79424_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>用我的idea，please pay for me : $1,000,000 ​​​​</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "智能手机", 
                    "tagLink": "https://api.zhihu.com/topics/19552175"
                }, 
                {
                    "tag": "手机", 
                    "tagLink": "https://api.zhihu.com/topics/19551676"
                }, 
                {
                    "tag": "Android 手机", 
                    "tagLink": "https://api.zhihu.com/topics/19556388"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/42193945", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 0, 
            "title": "优化软件 LINGO 实例学习指南（1）", 
            "content": "<h2><b>引言说明</b></h2><p>     有关软件LINGO的介绍，请看[官网说明](<a href=\"https://link.zhihu.com/?target=http%3A//www.lindo.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">lindo.com</span><span class=\"invisible\"></span></a>)，以下例子均是在LINGO 17中运行的。</p><h2><b>例1.</b> </h2><p>        职员时序安排模型  一项工作一周七天都需要有人，每天（周一至周日）所需的最少职员数位20,16,13,19,14和12，并要求每个职员一周连续工作5天，试求每周所需最少的职员数，并给出安排。注意这里我们考虑稳定后的情况。</p><div class=\"highlight\"><pre><code class=\"language-julia\"><span class=\"n\">model</span><span class=\"o\">:</span>\n<span class=\"o\">!</span><span class=\"n\">定义集合</span><span class=\"p\">;</span>\n<span class=\"n\">sets</span><span class=\"o\">:</span>\n\t<span class=\"n\">days</span><span class=\"o\">/</span><span class=\"n\">Mon</span><span class=\"o\">..</span><span class=\"n\">Sun</span><span class=\"o\">/:</span><span class=\"n\">required</span><span class=\"p\">,</span><span class=\"n\">start</span><span class=\"p\">;</span>\n<span class=\"n\">endsets</span>\n<span class=\"o\">!</span><span class=\"n\">输入数据</span><span class=\"p\">;</span>\n<span class=\"n\">data</span><span class=\"o\">:</span>\n <span class=\"o\">!</span><span class=\"n\">每天所需的最少职员数</span><span class=\"p\">;</span>\n  <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"mi\">20</span> <span class=\"mi\">16</span> <span class=\"mi\">13</span> <span class=\"mi\">16</span> <span class=\"mi\">19</span> <span class=\"mi\">14</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n<span class=\"n\">enddata</span>\n <span class=\"o\">!</span><span class=\"n\">最小化每周所需职员数</span><span class=\"p\">;</span> \n  <span class=\"n\">min</span><span class=\"o\">=</span><span class=\"nd\">@sum</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">:</span><span class=\"n\">start</span><span class=\"p\">);</span>\n  \t<span class=\"nd\">@for</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">)</span><span class=\"o\">:</span>\n   \t\t\t <span class=\"nd\">@sum</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"p\">(</span><span class=\"nb\">I</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"nb\">I</span><span class=\"c\">#le#5:</span>\n      \t\t<span class=\"n\">start</span><span class=\"p\">(</span><span class=\"nd\">@wrap</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"o\">+</span><span class=\"nb\">I</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">)))</span><span class=\"o\">&gt;=</span><span class=\"n\">required</span><span class=\"p\">(</span><span class=\"n\">J</span><span class=\"p\">));</span>   \n<span class=\"o\">!</span><span class=\"nd\">@WRAP</span><span class=\"p\">(</span><span class=\"n\">INDEX</span><span class=\"p\">,</span> <span class=\"n\">LIMIT</span><span class=\"p\">)</span><span class=\"n\">返回的是</span> <span class=\"n\">INDEX</span> <span class=\"o\">-</span> <span class=\"n\">K</span> <span class=\"o\">*</span> <span class=\"n\">LIMIT</span> <span class=\"n\">其中K是一个整数，它使得返回值落到</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">LIMIT</span><span class=\"p\">]</span><span class=\"n\">上</span><span class=\"p\">;</span>\n<span class=\"k\">end</span></code></pre></div><p>运行结果如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">  Global optimal solution found.\n  Objective value:                            22.0000000\n  Infeasibilities:                            0.00000000\n  Total solver iterations:                             5\n  Elapsed runtime seconds:                          0.08\n  Objective value:                            22.0000000\n\n  Model Class:                                        LP\n\n  Total variables:                      7\n  Nonlinear variables:                  0\n  Integer variables:                    0\n\n  Total constraints:                    8\n  Nonlinear constraints:                0\n\n  Total nonzeros:                      42\n  Nonlinear nonzeros:                   0\n\n\n\n                            Variable             Value          Reduced Cost\n                      REQUIRED( MON)        20.0000000            0.00000000\n                      REQUIRED( TUE)        16.0000000            0.00000000\n                      REQUIRED( WED)        13.0000000            0.00000000\n                      REQUIRED( THU)        16.0000000            0.00000000\n                      REQUIRED( FRI)        19.0000000            0.00000000\n                      REQUIRED( SAT)        14.0000000            0.00000000\n                      REQUIRED( SUN)        12.0000000            0.00000000\n                         START( MON)        8.00000000            0.00000000\n                         START( TUE)        2.00000000            0.00000000\n                         START( WED)        0.00000000            0.00000000\n                         START( THU)        6.00000000            0.00000000\n                         START( FRI)        3.00000000            0.00000000\n                         START( SAT)        3.00000000            0.00000000\n                         START( SUN)        0.00000000           0.333333333\n\n                                 Row      Slack or Surplus        Dual Price\n                                   1        22.0000000           -1.00000000\n                                   2        0.00000000          -0.333333333\n                                   3        0.00000000            0.00000000\n                                   4        0.00000000          -0.333333333\n                                   5        0.00000000            0.00000000\n                                   6        0.00000000          -0.333333333\n                                   7        0.00000000          -0.333333333\n                                   8        0.00000000            0.00000000</code></pre></div><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Lingo", 
                    "tagLink": "https://api.zhihu.com/topics/19619853"
                }, 
                {
                    "tag": "软件", 
                    "tagLink": "https://api.zhihu.com/topics/19551718"
                }, 
                {
                    "tag": "数学软件", 
                    "tagLink": "https://api.zhihu.com/topics/19558732"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41809544", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 7, 
            "title": "高兴地，Julia 1.0发布", 
            "content": "<p>[Julia](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Language</a>)是一个新的，有野心的编程语言，特别适合科学计算，希望这是你深爱着的。</p><p>*   [Julia语言下载](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/downloads\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Downloads</a>)</p><p>*   [Julia语言文档](<a href=\"https://link.zhihu.com/?target=https%3A//docs.julialang.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.julialang.org/</span><span class=\"invisible\"></span></a>)</p><p>*   [Julia语言Blog](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Blog</a>)</p><p>*   [Julia语言社区](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/community\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">julialang.org/community</span><span class=\"invisible\"></span></a>)</p><p>*   [Julia语言学习](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/learning\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">julialang.org/learning</span><span class=\"invisible\"></span></a>)</p><p>*   [Julia语言研究](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/publications\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Publications</a>)</p><p>*   [Julia语言捐赠](<a href=\"https://link.zhihu.com/?target=https%3A//www.flipcause.com/widget/widget_home/MjI1Nw%3D%3D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SupportJulia</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p># Julia 1.0</p><p>[转载于官方博客论坛](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2018/08/one-point-zero-zh_cn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia 1.0</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>备受期待的[Julia语言](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Language</a>)的1.0版本积累了富有野心的程序员们的十年心血。 在 JuliaCon2018 发布会上，Julia 社区正式将该版本[设置为1.0.0](<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D1jN5wKvN-Uk%23t%3D3850\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">youtube.com/watch?</span><span class=\"invisible\">v=1jN5wKvN-Uk#t=3850</span><span class=\"ellipsis\"></span></a>)。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Julia项目[起初](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2012/02/why-we-created-julia\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Why We Created Julia</a>)是因为这些强烈的需求而公开发起的开源项目：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>&gt; 我们想要的是一个自由开源的语言，并且它同时拥有C的速度和Ruby的动态性；我们想要一个具有同像性（可以将语言的脚本本身当作数据进行处理）的语言， 它有着真正的和lisp一样的宏，但是却像Matlab一样有着显然的，类似于数学表达式的标记；我们想要一个既可以像Python一样作为通用编程语言的工具， 又可以像R那样适用于统计分析，能像Perl那样自然地处理字符串，能像Matlab那样给力地处理矩阵运算，它还要能像shell一样作为胶水将各种程序粘 合在一起；我们想要一个简单易学的语言，同时它还能让最苛刻的魔法师们（hackers）开心。我们希望它是交互式的，但我们也希望它能被编译。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>一个充满活力和繁荣的社区就围绕这种语言成长起来，世界各地的人们都在为了这个目标而不断努力改进和塑造Julia。 超过700人为Julia做出了自己的贡献，更多人创造了成千上万开源的Julia包。总而言之，我们创造了这样一种语言：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   快速：Julia一开始就是为高性能而设计的。Julia可以通过LLVM而跨平台被编译成高效的本地代码。</p><p>*   通用：Julia使用多分派作为编程范式，使其更容易表达面向对象和函数式编程范式。标准库提供了异步I/O，进程控制，日志记录，性能分析，包管理器等等。</p><p>*   动态：Julia是动态类型的，与脚本语言类似，并且对交互式使用具有很好的支持。</p><p>*   数值计算：Julia擅长于数值计算，它的语法适用于数学计算，支持多种数值类型，并且支持并行计算。Julia的多分派自然适合于定义数值和类数组的数据类型。</p><p>*   可选的类型标注：Julia拥有丰富的数据类型描述，类型声明可以使得程序更加可读和健壮。</p><p>*   可组合：Julia的包可以很自然的组合运行。单位数量的矩阵或数据表一列中的货币和颜色可以一起组合使用并且拥有良好的性能。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>现在可以通过[下载Julia 1.0版本](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2018/08/%28https%3A//julialang.org/downloads/%29\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">julialang.org/blog/2018</span><span class=\"invisible\">/08/(https://julialang.org/downloads/)</span><span class=\"ellipsis\"></span></a>)来尝试Julia。 如果你现在从Julia 0.6或者更早的版本开始升级代码，我们建议你先使用过渡性的0.7版本， 其中包括了弃用警告（deprecation warning）来指导你的升级过程。一旦你的代码无警告通过， 那么你可以在没有任何功能变化的情况下将代码更改为1.0版本。 已注册过的包可以利用这个来过渡并发布与1.0版本兼容的更新。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>当然，在Julia 1.0版本中一个最重要的新特性是对语言API稳定性的承诺：你为Julia1.0编写的代码将可以继续在 Julia 1.1, 1.2中运行。这种语言是“足够成熟的”。基于这样的一个坚实的基础， 核心语言的开发者和社区都可以集中于第三方包，工具，和新特性的开发上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>但是Julia 1.0并不意味着稳定，它也带来一些新的，强大的并且创新的语言特性。其中一些新的特性是0.6开始就有的：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   一个全新的内建 [包管理器](<a href=\"https://link.zhihu.com/?target=https%3A//docs.julialang.org/en/latest/stdlib/Pkg/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Language</a>)。它比过去的包管理器性能更好， 也更加简单。它也支持虚拟环境和记录当前工作环境的状态然后将其分享给其它开发者或者是自己。最后重新设计的包管理器也带来了 私有包和包的仓库的无缝衔接。你可以用使用开源生态同样的方式用它来管理自己的私有包。这个 [JuliaCon的幻灯片](<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DGBi__3nF-rM\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">youtube.com/watch?</span><span class=\"invisible\">v=GBi__3nF-rM</span><span class=\"ellipsis\"></span></a>) 展示了新设计的包管理器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   Julia具有新的 [对于缺失值（missing value）的正则表达](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2018/06/missing\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">First-Class Statistical Missing Values Support in Julia 0.7</a>)。处理缺失值的能力对于统计学和数据科学是一项基本能力。 在典型的Julia写法里，这个解决方案是一般性的，可扩展的也是高性能的。任何一般的集合类型（collection type）都可以简单地通过使用 预先定义好的 `missing` 变量来有效支持缺失值。而这样的集合类型的性能在过去的Julia版本里可能会很慢，但是现在编译器已经 可以使得Julia在缺失值的表示上达到类似 C 或者 C++ 的速度，而远比 C 或者 C++ 一般和灵活。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   内建的 `String` 类型可以安全的使用任意的数据类型。你的程序不会因为一个单独的无效Unicode字节而失效好几个小时或者好几天。 所有的字符串数据会保留，同时指出哪些字符是有效的哪些是无效的，这样允许你的应用安全并方便地运行在不可避免会出现缺陷的真实世界的数据中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   尽管广播早已成为一项语言的核心特性并且有着方便的语法支持，而现在它将比过去更加强大。在Julia 1.0里[为自定义类型扩展 广播](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2018/05/extensible-broadcast-fusion\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Extensible broadcast fusion</a>)和实现高效的GPU和向量化硬件上的扩展都 更加容易，为未来实现更高的性能铺平了道路。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   可命名元组是一个新的语言特性，它将是的通过名字直接获取数据变得更加高效和方便。例如，你可以这样表示一列数据 `row = (name=&#34;Julia&#34;, version=v&#34;1.0.0&#34;, releases=8)` 并且通过 `row.version` 访问 `version` 的数据，而这和 `row[2]` 有着相似的性能，但是却更加方便。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   点算符现在可以被重载，并且允许类型使用类似于 `obj.property` 的方式表示某种意义，而不是用来设置和获取合成类型（struct）的 成员。这对于将具有 `class` 的语言例如 `Python` 和 `Java` 翻译到Julia来说更加平滑。性质的访问器重载也将是的获取匹配数据的名 称的一列于可命名元组更加一致：你可以写 `table.version` 来获取表格中的 `version` 这一列就好像 `row.version` 会获取 `version` 这一行的这个元素一样。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   Julia的优化器在诸多方面都更加聪明来，以至于我们无法全部列在这里，但是可以列举一些重要的特点。优化器现在可以在函数 调用之间传播常数变量，这将使得编译器可以比过去更好的消除死代码（dead-code）和进行静态求值。编译器现在也能够对短期存在 的长期对象的封装避免多余的内存分配，这将使得程序员可以使用更方便的高级抽象而不会担心带来性能损失。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   参数类型的构造函数现在将使用和声明同样的语法来调用。这将减少一些对语法小的误解。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   迭代器协议被重新设计。新的迭代器协议更加简单，而不需要定义三个不同的函数：`start`，`next`，`done`。现在只需定义一个变量 和两个变量的 `iterate` 函数即可。这将常常使得我们可以简单地通过定义了一个函数参数默认值的函数来实现迭代器。更加重要的是，这将使得 实现一个只有在尝试返回值失败之后才知道需要结束的迭代器成为可能。这种迭代器在 I/O，网络和生产者/消费者模型中普遍存在；而Julia现在 可以以更加直接和正确的方式表达这样的迭代器。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   作用域的规则被简化了。引入局部作用域的构造将更加一致，而不需要管全局的命名绑定是否已经存在。 这将消除之前存在的 “软/硬 作用域”的区别，也意味着现在Julia可以静态地确定变量是局部的还是全局的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   Julia语言本身变得更加轻量级来，很多部分都不放在来标准库中。这个标准库将和Julia一起发布但是不会作为语言的基础依赖。 如果你需要他们，那么只需导入这些库即可（不需要再安装）但是它们不再强制你使用了。在未来这些标准库将会单独被标记版本和更新 以获取更快的改进和升级。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>我们仔细地审查了Julia的API，并且提高了它的一致性和可用性。很多费解的命名和低效的实现都被重新命名和重构，使得其能够 更优雅地发挥Julia的能力。这将使得使用集合类的方式更加一致和连贯。变量的顺序被确保在整个语言中遵循一个统一的标准，并且 将关键词变量（现在更快了）加入到了API中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   围绕Julia 1.0的新特性，我们特别地创建了一些新的外部包：</p><p>    *   数据处理生态系统通过翻新利用了新的缺失值支持</p><p>    *   [Cassette.jl](<a href=\"https://link.zhihu.com/?target=https%3A//github.com/jrevels/Cassette.jl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jrevels/Cassette.jl</a>)将为Julia带来向编译器中注入代码变换，使得 事后分析（post-hoc analysis）和扩展已有的代码成为可能。在除了提供profiling和debugging这样的工具之外， 这甚至可以用于实现用于机器学习任务的自动微分。</p><p>    *   异构计算的支持被大大提高，并且从Julia编译器中分离了出来。Intel KNL系列硬件可以直接使用Julia。而Nvidia的GPU 也可以通过[CUDANative.jl](<a href=\"https://link.zhihu.com/?target=https%3A//github.com/JuliaGPU/CUDAnative.jl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JuliaGPU/CUDAnative.jl</a>)来直接编程（无须编写CUDA代码），而 支持Google TPU的接口也正在开发中。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>还有很多没有被列举的大大小小的提高。你可以通过 [0.7 NEWS 文件](<a href=\"https://link.zhihu.com/?target=https%3A//docs.julialang.org/en/release-0.7/NEWS/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia v0.7.0 Release Notes</a>)查看 完整的更新。在我们2012年的 [“为什么我们创造来Julia”博文](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/blog/2012/02/why-we-created-julia\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Why We Created Julia</a>)里，我们写到：</p><p class=\"ztext-empty-paragraph\"><br/></p><p>&gt; 它还没有完工——但是已经可以发布一个1.0版本了（其实等了6年才要发布）——我们创造的这个语言叫做Julia。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>虽然对于Julia语言1.0的发布我们放了大家好几次鸽子，但是这一次我们终于正式发布了。 我们真心为所有为这个真正为数值计算和通用编程设计的现代语言的各种形式的贡献的人感到自豪和高兴。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言下载</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [Julia v1.0.0](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/downloads/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Downloads</a>)</p><p>*   [Older](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/downloads/oldreleases.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Downloads (Old releases)</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言文档</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [Stable](<a href=\"https://link.zhihu.com/?target=https%3A//docs.julialang.org/en/stable/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Language</a>)</p><p>*   [Latest](<a href=\"https://link.zhihu.com/?target=https%3A//docs.julialang.org/en/latest/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Julia Language</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言包</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [Julia Observer](<a href=\"https://link.zhihu.com/?target=https%3A//juliaobserver.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Observer</a>)</p><p>*   [Ecosystem Pulse](<a href=\"https://link.zhihu.com/?target=https%3A//pkg.julialang.org/pulse.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Package Listing</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言社区</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [Discourse](<a href=\"https://link.zhihu.com/?target=https%3A//discourse.julialang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JuliaLang</a>)</p><p>*   [Slack](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.slack.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">julialang.slack.com/</span><span class=\"invisible\"></span></a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言学习</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [YouTube Channel](<a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/JuliaLanguage/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">youtube.com/JuliaLangua</span><span class=\"invisible\">ge/</span><span class=\"ellipsis\"></span></a>)</p><p>*   [Other Resources](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/learning/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Learning Julia</a>)</p><p class=\"ztext-empty-paragraph\"><br/></p><p>###### Julia语言研究</p><p class=\"ztext-empty-paragraph\"><br/></p><p>*   [Publications](<a href=\"https://link.zhihu.com/?target=https%3A//julialang.org/publications/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Julia Publications</a>)</p><p>*   [MIT](<a href=\"https://link.zhihu.com/?target=https%3A//julia.mit.edu/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">julia.mit.edu/</span><span class=\"invisible\"></span></a>)</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Julia（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19678370"
                }
            ], 
            "comments": [
                {
                    "userName": "白羽飘", 
                    "userLink": "https://www.zhihu.com/people/437c1ebc3f1797327a96e6ddeb9cc233", 
                    "content": "喜大普奔😂😂", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "穆朗", 
                    "userLink": "https://www.zhihu.com/people/89446fafa93d223503b2d3bb3d493756", 
                    "content": "早点把fortran送进历史坟墓吧", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41268231", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 2, 
            "title": "n!的一个恒等式", 
            "content": "<h2><b>定理 1. </b></h2><p>          对于任意给定的整数 <img src=\"https://www.zhihu.com/equation?tex=n%5Cgeq1\" alt=\"n\\geq1\" eeimg=\"1\"/> ,我们有以下的恒等式成立：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cln%5Cleft%28+n%21+%5Cright%29+%3D+%5Cleft%28+n+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+n+%2B+1+%5Cright%29+-+%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%5Cleft%28+k+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29.\" alt=\"\\ln\\left( n! \\right) = \\left( n + \\frac{1}{2}\\right)\\ln\\left( n + 1 \\right) - \\sum_{k=1}^{n}\\left( k + \\frac{1}{2}\\right)\\ln\\left( 1 + \\frac{1}{k} \\right).\" eeimg=\"1\"/> </p><p><b>证明：</b></p><p>        直接从右到左化简有，</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bsplit%7D+%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%5Cleft%28+k+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29+%26%3D+%5Csum_%7Bk%3D1%7D%5E%7Bn%7Dk+%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29+%2B+%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bk%3D1%7D%5E%7Bn%7D+%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29%5C%5C+%26%3D+%5Csum_%7Bk%3D1%7D%5E%7Bn%7D+%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29%5E%7Bk%7D+%2B+%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bk%3D1%7D%5E%7Bn%7D+%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29+%5C%5C+%26%3D+%5Cln+%5Cleft%5B+%5Cleft%28+%5Cfrac%7B2%7D%7B1%7D+%5Cright%29%5E%7B1%7D+%5Cleft%28+%5Cfrac%7B3%7D%7B2%7D+%5Cright%29%5E%7B2%7D+%5Ccdots+%5Cleft%28+%5Cfrac%7Bk%2B1%7D%7Bk%7D+%5Cright%29%5E%7Bk%7D+%5Ccdots+%5Cleft%28+%5Cfrac%7Bn%2B1%7D%7Bn%7D+%5Cright%29%5E%7Bn%7D+%5Cright%5D+%5C%5C+%26%5Cquad+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cln+%5Cleft%5B+%5Cleft%28+%5Cfrac%7B2%7D%7B1%7D+%5Cright%29+%5Cleft%28+%5Cfrac%7B3%7D%7B2%7D+%5Cright%29%5Ccdots+%5Cleft%28+%5Cfrac%7Bk%2B1%7D%7Bk%7D+%5Cright%29+%5Ccdots+%5Cleft%28+%5Cfrac%7Bn%2B1%7D%7Bn%7D+%5Cright%29+%5Cright%5D+%5C%5C+%26%3D+%5Cln+%5Cleft%28+%5Cfrac%7B+%5Cleft%28+n%2B1+%5Cright%29%5E%7Bn%7D+%7D%7Bn%21%7D+%5Cright%29+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cln+%5Cleft%28+n%2B1+%5Cright%29%5C%5C+%26%3D+%5Cleft%28+n+%2B+%5Cfrac%7B1%7D%7B2%7D+%5Cright%29+%5Cln+%5Cleft%28+n+%2B+1+%5Cright%29+-+%5Cln+%5Cleft%28+n%21+%5Cright%29+%5Cend%7Bsplit%7D+\" alt=\"\\begin{split} \\sum_{k=1}^{n}\\left( k + \\frac{1}{2}\\right)\\ln\\left( 1 + \\frac{1}{k} \\right) &amp;= \\sum_{k=1}^{n}k \\ln\\left( 1 + \\frac{1}{k} \\right) + \\frac{1}{2}\\sum_{k=1}^{n} \\ln\\left( 1 + \\frac{1}{k} \\right)\\\\ &amp;= \\sum_{k=1}^{n} \\ln\\left( 1 + \\frac{1}{k} \\right)^{k} + \\frac{1}{2}\\sum_{k=1}^{n} \\ln\\left( 1 + \\frac{1}{k} \\right) \\\\ &amp;= \\ln \\left[ \\left( \\frac{2}{1} \\right)^{1} \\left( \\frac{3}{2} \\right)^{2} \\cdots \\left( \\frac{k+1}{k} \\right)^{k} \\cdots \\left( \\frac{n+1}{n} \\right)^{n} \\right] \\\\ &amp;\\quad + \\frac{1}{2}\\ln \\left[ \\left( \\frac{2}{1} \\right) \\left( \\frac{3}{2} \\right)\\cdots \\left( \\frac{k+1}{k} \\right) \\cdots \\left( \\frac{n+1}{n} \\right) \\right] \\\\ &amp;= \\ln \\left( \\frac{ \\left( n+1 \\right)^{n} }{n!} \\right) + \\frac{1}{2}\\ln \\left( n+1 \\right)\\\\ &amp;= \\left( n + \\frac{1}{2} \\right) \\ln \\left( n + 1 \\right) - \\ln \\left( n! \\right) \\end{split} \" eeimg=\"1\"/> </p><p>于是结合上述等式，我们有</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cleft%28+n+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+n+%2B+1+%5Cright%29+-+%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%5Cleft%28+k+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29+%3D+%5Cln+%5Cleft%28+n%21+%5Cright%29.\" alt=\"\\left( n + \\frac{1}{2}\\right)\\ln\\left( n + 1 \\right) - \\sum_{k=1}^{n}\\left( k + \\frac{1}{2}\\right)\\ln\\left( 1 + \\frac{1}{k} \\right) = \\ln \\left( n! \\right).\" eeimg=\"1\"/> </p><p>从而，结论得证。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>记</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7Bn%7D+%3D+%5Csum_%7Bk%3D1%7D%5E%7Bn%7D%5Cleft%28+k+%2B+%5Cfrac%7B1%7D%7B2%7D%5Cright%29%5Cln%5Cleft%28+1+%2B+%5Cfrac%7B1%7D%7Bk%7D+%5Cright%29+-+n.\" alt=\"\\omega_{n} = \\sum_{k=1}^{n}\\left( k + \\frac{1}{2}\\right)\\ln\\left( 1 + \\frac{1}{k} \\right) - n.\" eeimg=\"1\"/> </p><p>我们可以得到如下的命题。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>结论 1.</b></h2><p>     数列 <img src=\"https://www.zhihu.com/equation?tex=%5Comega_%7Bn%7D+\" alt=\"\\omega_{n} \" eeimg=\"1\"/> 收敛，且有 <img src=\"https://www.zhihu.com/equation?tex=%5Clim_%7Bn+%5Crightarrow+%5Cinfty%7D~+%5Comega_%7Bn%7D+%3D+1+-+%5Cln+%5Csqrt%7B2%5Cpi%7D.\" alt=\"\\lim_{n \\rightarrow \\infty}~ \\omega_{n} = 1 - \\ln \\sqrt{2\\pi}.\" eeimg=\"1\"/> </p><p><b>证明：</b></p><p>        留给读者证明，只需要用到简单的估计即可。</p>", 
            "topic": [
                {
                    "tag": "数学", 
                    "tagLink": "https://api.zhihu.com/topics/19554091"
                }, 
                {
                    "tag": "自然科学", 
                    "tagLink": "https://api.zhihu.com/topics/19553298"
                }, 
                {
                    "tag": "数论", 
                    "tagLink": "https://api.zhihu.com/topics/19558748"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/41263068", 
            "userName": "涪曌玖霄", 
            "userLink": "https://www.zhihu.com/people/ed00ebc4526b8e00c2e44c331b2b84d5", 
            "upvote": 9, 
            "title": "梯度系统与梯度算法", 
            "content": "<p>         梯度下降算法是最优化方法中非常简单和经典的一个方法，现有的很多算法都是基于它进行的改进。它具有下面的形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=x%5E%7Bk%2B1%7D%3Dx%5Ek-%5Cgamma%5Cnabla+f%28x%5Ek%29\" alt=\"x^{k+1}=x^k-\\gamma\\nabla f(x^k)\" eeimg=\"1\"/>                                                                 (1-1)</p><p>其中  <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma+%3E0\" alt=\"\\gamma &gt;0\" eeimg=\"1\"/>  表示步长， <img src=\"https://www.zhihu.com/equation?tex=%5Cnabla\" alt=\"\\nabla\" eeimg=\"1\"/> 代表梯度算子。梯度下降算法由于形式比较简单，所以在求解无约束优化问题时经常使用。事实上，梯度下降算法可以看作是运用欧拉逼近方法来求解下面的一阶微分方程：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cdot%7Bx%7D%28t%29%2B%5Cnabla+f%28x%28t%29%29%3D0\" alt=\"\\dot{x}(t)+\\nabla f(x(t))=0\" eeimg=\"1\"/>                                                                      (1-2)</p><p>         1973 年， Br\\&#39;{e}zis 讨论了系统 (1-2) 的收敛性。虽然这个梯度系统结构比较简单，但是也存在着一些不足，例如该系统是一个局部的优化系统，得到的优化结果与初始值有关。</p><p>           因此，在这个系统的基础上，很多学者进一步研究了其他类型的梯度系统。</p><p>           1987 年， Polyak研究了一类带有摩擦项的重球系统，用一个二阶梯度系统来描述带有固定摩擦系数的重球的运动。模型如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cddot%7Bx%7D%28t%29%2B%5Cgamma+%5Cdot%7Bx%7D%28t%29+%2B+%5Cnabla+f%28x%28t%29%29%3D0\" alt=\"\\ddot{x}(t)+\\gamma \\dot{x}(t) + \\nabla f(x(t))=0\" eeimg=\"1\"/>                                                          (1-3)</p><p>其中  <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma+%3E+0\" alt=\"\\gamma &gt; 0\" eeimg=\"1\"/> 表示摩擦系数。</p><p>          二阶梯度系统 (1-3)可以在经典的耗散系统的结构下来研究， 当对目标函数 <img src=\"https://www.zhihu.com/equation?tex=f%28x%29\" alt=\"f(x)\" eeimg=\"1\"/> 加一些假设之后，例如当 <img src=\"https://www.zhihu.com/equation?tex=f%28x%29\" alt=\"f(x)\" eeimg=\"1\"/> 是凸函数或者解析函数时，可以得到系统   (1-3)的解轨道收敛到目标函数的最小值点或者平衡点。</p><p>         重球梯度系统 (1-3)是在摩擦系数 <img src=\"https://www.zhihu.com/equation?tex=%5Cgamma\" alt=\"\\gamma\" eeimg=\"1\"/> 保持不变的情形下研究的一个动力系统，然而在很多实际的模型中，摩擦系数是随着时间的推移发生变化的，这样就会变成一个与时间有关系的函数 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%3A%5Cmathbb%7BR%7D_%7B%2B%7D%5Crightarrow+%5Cmathbb%7BR%7D_%7B%2B%7D\" alt=\"a(t):\\mathbb{R}_{+}\\rightarrow \\mathbb{R}_{+}\" eeimg=\"1\"/> , 其中 <img src=\"https://www.zhihu.com/equation?tex=%5Cmathbb%7BR%7D_%7B%2B%7D%3D%5C%7Bx%3A+x%5Cin+%5Cmathbb%7BR%7D%2C+x%5Cge+0%5C%7D\" alt=\"\\mathbb{R}_{+}=\\{x: x\\in \\mathbb{R}, x\\ge 0\\}\" eeimg=\"1\"/> . 当时间 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"/> 逐渐增大时，摩擦系数 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29\" alt=\"a(t)\" eeimg=\"1\"/> 甚至可能会趋于0. 这样重球梯度系统 (1-3)就变成了下面的二阶梯度系统：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cddot%7Bx%7D%28t%29%2Ba%28t%29+%5Cdot%7Bx%7D%28t%29+%2B+%5Cnabla+f%28x%28t%29%29%3D0\" alt=\"\\ddot{x}(t)+a(t) \\dot{x}(t) + \\nabla f(x(t))=0\" eeimg=\"1\"/>                                                     (1-4)</p><p>          我们知道如果对于所有 <img src=\"https://www.zhihu.com/equation?tex=t%5Cge+0\" alt=\"t\\ge 0\" eeimg=\"1\"/> , <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%5Cge+%5Cmu+%3E0\" alt=\"a(t)\\ge \\mu &gt;0\" eeimg=\"1\"/> , 这时系统  (1-4)的长时间行为与重球系统   (1-3)是一样的。但是如果 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%5Crightarrow+0\" alt=\"a(t)\\rightarrow 0\" eeimg=\"1\"/> , <img src=\"https://www.zhihu.com/equation?tex=t+%5Crightarrow+%5Cinfty\" alt=\"t \\rightarrow \\infty\" eeimg=\"1\"/> , 这时系统 (1-4)的稳定性与重球系统 (1-3)完全不同。例如当 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%5Crightarrow+0\" alt=\"a(t)\\rightarrow 0\" eeimg=\"1\"/> 的速度很快， 一种极限情况就是 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%3D0\" alt=\"a(t)=0\" eeimg=\"1\"/> ，这时系统(1-4)变成下面的形式：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cddot%7Bx%7D%28t%29+%2B+%5Cnabla+f%28x%28t%29%29%3D0\" alt=\"\\ddot{x}(t) + \\nabla f(x(t))=0\" eeimg=\"1\"/> </p><p>很明显，解轨道 <img src=\"https://www.zhihu.com/equation?tex=x%28t%29\" alt=\"x(t)\" eeimg=\"1\"/> 是不收敛的，但是如果 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%5Crightarrow+0\" alt=\"a(t)\\rightarrow 0\" eeimg=\"1\"/> 的速度足够慢，这样解轨道是可能收敛的。 </p><p>         Cabot, Engler 和 Gadat在 2009 年研究了这个系统的长时间渐近行为，他们证明了在 <img src=\"https://www.zhihu.com/equation?tex=f\" alt=\"f\" eeimg=\"1\"/> 是凸函数的情况下，当 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29\" alt=\"a(t)\" eeimg=\"1\"/> 满足 <img src=\"https://www.zhihu.com/equation?tex=%5Cint_%7B0%7D%5E%7B%5Cinfty%7Da%28t%29dt%3D%5Cinfty\" alt=\"\\int_{0}^{\\infty}a(t)dt=\\infty\" eeimg=\"1\"/> 时， <img src=\"https://www.zhihu.com/equation?tex=f%28x%29%5Crightarrow+%5Cmin+f\" alt=\"f(x)\\rightarrow \\min f\" eeimg=\"1\"/> . 同时他们讨论了在目标函数满足其他几种情形的条件下，系统(1-4)的长时间行为分析，但是具体解轨道的收敛性还不是十分清楚。</p><p>        2016年，Su, Body 和 Candes [1]给出了Nesterov 加速算法[2]的一个微分方程表示，并且解释了他们之间的等价关系。Nesterov 算法的一种简单形式如下：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Bcases%7D+y%5E%7Bk%7D%3Dx%5E%7Bk%7D%2B%5Cbeta_%7Bk%7D%28x%5E%7Bk%7D-x%5E%7Bk-1%7D%29%2C%5C%5C+x%5E%7Bk%2B1%7D%3Dy%5Ek+-+s%5Cnabla+f%28y%5Ek%29%2C+%5Cend%7Bcases%7D\" alt=\"\\begin{cases} y^{k}=x^{k}+\\beta_{k}(x^{k}-x^{k-1}),\\\\ x^{k+1}=y^k - s\\nabla f(y^k), \\end{cases}\" eeimg=\"1\"/>                                                (1-5)</p><p><img src=\"https://www.zhihu.com/equation?tex=s%3E0\" alt=\"s&gt;0\" eeimg=\"1\"/> 表示步长，研究者解释了这个算法对应的微分方程是一个二阶梯度系统：</p><p><img src=\"https://www.zhihu.com/equation?tex=%5Cddot%7Bx%7D%28t%29%2B%5Cfrac%7B3%7D%7Bt%7D+%5Cdot%7Bx%7D%28t%29+%2B+%5Cnabla+f%28x%28t%29%29%3D0.\" alt=\"\\ddot{x}(t)+\\frac{3}{t} \\dot{x}(t) + \\nabla f(x(t))=0.\" eeimg=\"1\"/>                         (1-6)</p><p>在目标函数是凸函数的情形下，他们从方程的角度，深入分析了Nesterov 算法的收敛速度，证明了当 <img src=\"https://www.zhihu.com/equation?tex=a%28t%29%3D%5Cfrac%7Br%7D%7Bt%7D\" alt=\"a(t)=\\frac{r}{t}\" eeimg=\"1\"/> ，并且<img src=\"https://www.zhihu.com/equation?tex=r%5Cge3\" alt=\"r\\ge3\" eeimg=\"1\"/>时，</p><p><img src=\"https://www.zhihu.com/equation?tex=f%28x%28t%29%29-f%28x%5E%2A%29%5Cle+O%5Cleft%28%5Cfrac%7B1%7D%7Bt%5E2%7D%5Cright%29.\" alt=\"f(x(t))-f(x^*)\\le O\\left(\\frac{1}{t^2}\\right).\" eeimg=\"1\"/> </p><p>同时他们分析了当 <img src=\"https://www.zhihu.com/equation?tex=1%3Cr%3C3\" alt=\"1&lt;r&lt;3\" eeimg=\"1\"/> 时，对于一类特殊的凸函数，也可以得到 <img src=\"https://www.zhihu.com/equation?tex=O%5Cleft%28%5Cfrac%7B1%7D%7Bt%5E2%7D%5Cright%29\" alt=\"O\\left(\\frac{1}{t^2}\\right)\" eeimg=\"1\"/> 的收敛速度。基于上述工作，Attouch 和 Chbani [3]证明了当目标函数是凸函数时，在 <img src=\"https://www.zhihu.com/equation?tex=r%3E3\" alt=\"r&gt;3\" eeimg=\"1\"/> 情形下，系统解轨道 <img src=\"https://www.zhihu.com/equation?tex=x%28t%29\" alt=\"x(t)\" eeimg=\"1\"/> 在 Hilbert 空间弱收敛到目标函数的一个最小值点。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>参考文献</b></h2><p>[1]  W. Su and S. Boyd and E.J. Cand\\`{e}s},  A differential equation for modeling Nesterov&#39;s accelerated gradient method: theory and insights， Journal of Machine Learning Research, 2016, 17:1-43.</p><p>[2] Y. Nesterov, A method of solving a convex programming problem with convergence rate <img src=\"https://www.zhihu.com/equation?tex=%5Ctextit%7BO%7D%28%5Cfrac%7B1%7D%7Bk%5E%7B2%7D%7D%29\" alt=\"\\textit{O}(\\frac{1}{k^{2}})\" eeimg=\"1\"/> .</p><p>[3] H. Attouch and Z. Chbani, Fast inertial dynamics and FISTA algorithms in convex optimization. Perturbation aspects.</p>", 
            "topic": [
                {
                    "tag": "科技", 
                    "tagLink": "https://api.zhihu.com/topics/19556664"
                }, 
                {
                    "tag": "算法（书籍）", 
                    "tagLink": "https://api.zhihu.com/topics/20127780"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }
            ], 
            "comments": [
                {
                    "userName": "木易山水", 
                    "userLink": "https://www.zhihu.com/people/d4c80bb3b407d869549ecf33689ba16b", 
                    "content": "好文", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "木易山水", 
                    "userLink": "https://www.zhihu.com/people/d4c80bb3b407d869549ecf33689ba16b", 
                    "content": "但是如果 ￼ , ￼ , 这时系统 (1-4)的稳定性与重球系统 (1-3)完全不同，但boyd得结论说还是可以收敛但f的极值点？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>对，不过又有其他要求，a(t) = 3/b,f是可微的凸函数</p>", 
                            "likes": 0, 
                            "replyToAuthor": "木易山水"
                        }
                    ]
                }, 
                {
                    "userName": "木易山水", 
                    "userLink": "https://www.zhihu.com/people/d4c80bb3b407d869549ecf33689ba16b", 
                    "content": "用微分方程去看这个问题优点在哪呢？能得到什么新的结论吗？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>能用微分方程的理论处理连续的情况，也说明了离散的优化算法的收敛性问题。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "木易山水"
                        }, 
                        {
                            "userName": "木易山水", 
                            "userLink": "https://www.zhihu.com/people/d4c80bb3b407d869549ecf33689ba16b", 
                            "content": "这个重球法似乎在内点法里也见过啊<br>另外我在想，如果把f只限定于连续凸函数，是不是还可以得到更宽松的结论，可微毕竟太强了", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "请问1973年Brezis的文献是哪篇啊", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/askuyue"
}
