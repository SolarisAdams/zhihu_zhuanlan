{
    "title": "TTalkIM", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/zhang-yun-he-74-79", 
        "https://www.zhihu.com/people/sckdn", 
        "https://www.zhihu.com/people/quan-bo-mian", 
        "https://www.zhihu.com/people/sunnyos", 
        "https://www.zhihu.com/people/su-zhou-he-de-mu-rong-xue", 
        "https://www.zhihu.com/people/bai-ma-ta-qing", 
        "https://www.zhihu.com/people/wang-guang-zhen", 
        "https://www.zhihu.com/people/Zou.yu", 
        "https://www.zhihu.com/people/123456-36-71", 
        "https://www.zhihu.com/people/xu-cheng-tian-26", 
        "https://www.zhihu.com/people/ma-hu-12", 
        "https://www.zhihu.com/people/zebgboyuan", 
        "https://www.zhihu.com/people/ttyuyu", 
        "https://www.zhihu.com/people/lemonsen", 
        "https://www.zhihu.com/people/anart", 
        "https://www.zhihu.com/people/sun-sun-95-97", 
        "https://www.zhihu.com/people/fy-soul", 
        "https://www.zhihu.com/people/huang-he-47-48", 
        "https://www.zhihu.com/people/Retrospective", 
        "https://www.zhihu.com/people/qian-shang-1", 
        "https://www.zhihu.com/people/xiao-zhao-61-56", 
        "https://www.zhihu.com/people/syaka", 
        "https://www.zhihu.com/people/yuyesoup", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/qrscheme", 
        "https://www.zhihu.com/people/rudy_zhang", 
        "https://www.zhihu.com/people/ljb-99-52", 
        "https://www.zhihu.com/people/sailingcai", 
        "https://www.zhihu.com/people/ou-xian-xian-xian-sheng", 
        "https://www.zhihu.com/people/m1911star", 
        "https://www.zhihu.com/people/ljxjava", 
        "https://www.zhihu.com/people/hanjie-zou", 
        "https://www.zhihu.com/people/zhou-xin-42-18", 
        "https://www.zhihu.com/people/zheye-86", 
        "https://www.zhihu.com/people/du-dou-dou-1-44", 
        "https://www.zhihu.com/people/zheng-yong-gang-23", 
        "https://www.zhihu.com/people/samuelshang", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/saviourdog", 
        "https://www.zhihu.com/people/jimmy.li", 
        "https://www.zhihu.com/people/camark", 
        "https://www.zhihu.com/people/xu-feng-58-23", 
        "https://www.zhihu.com/people/obovgood", 
        "https://www.zhihu.com/people/ppp-57-64", 
        "https://www.zhihu.com/people/wang-xiang-zhong-5", 
        "https://www.zhihu.com/people/kong-ling-xing-54-92", 
        "https://www.zhihu.com/people/ybtk", 
        "https://www.zhihu.com/people/leon82", 
        "https://www.zhihu.com/people/onefanta", 
        "https://www.zhihu.com/people/lichuang", 
        "https://www.zhihu.com/people/fan-shuo-97", 
        "https://www.zhihu.com/people/reader2018", 
        "https://www.zhihu.com/people/bu-hui-tou-de-jue-qiang-2", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/zhang-de-wei-52-47", 
        "https://www.zhihu.com/people/lu-xie-38-15", 
        "https://www.zhihu.com/people/mai-huo-chai-de-xiao-lao-shu", 
        "https://www.zhihu.com/people/minghao-hu-15", 
        "https://www.zhihu.com/people/smith-robort", 
        "https://www.zhihu.com/people/ga-zi-44-58", 
        "https://www.zhihu.com/people/xu-ming-ming-78-15", 
        "https://www.zhihu.com/people/san-feng-20-32", 
        "https://www.zhihu.com/people/rockyfire", 
        "https://www.zhihu.com/people/pan-yu-qi-20", 
        "https://www.zhihu.com/people/xiong-ao", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/sdflysha", 
        "https://www.zhihu.com/people/guo-xin-qi-90", 
        "https://www.zhihu.com/people/kexybiscuit", 
        "https://www.zhihu.com/people/jiang-tan-yang", 
        "https://www.zhihu.com/people/ggff-ss", 
        "https://www.zhihu.com/people/metacall", 
        "https://www.zhihu.com/people/mark-hu-54", 
        "https://www.zhihu.com/people/li-chang-qing-83", 
        "https://www.zhihu.com/people/liu-xiao-yao-12", 
        "https://www.zhihu.com/people/beebeeyin-97", 
        "https://www.zhihu.com/people/yct21", 
        "https://www.zhihu.com/people/gu-du-yisheng-7"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/85734735", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 3, 
            "title": "Erlang语言简介", 
            "content": "<a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/161/Erlang%25E8%25AF%25AD%25E8%25A8%2580%25E7%25AE%2580%25E4%25BB%258B.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[杂谈]Erlang语言简介-Tech Talk 让技术发出声音</a><p><br/>什么是Erlang</p><p>Erlang（[&#39;ə:læŋ]）是一种通用的面向并发的编程语言，其创立者是Joe Armstrong，在1987年由瑞典电信设备制造商爱立信于主持开发。Erlang的开发目的是创造一种可以应对大规模并发活动的编程语言和运行环境，从而简化交换机的开发工作，提高电话交换机的稳定性和可扩展性。</p><p>Erlang是一个结构化，动态类型编程语言，内建并行计算支持，非常适合于构建分布式，实时软并行计算系统。使用Erlang编写出的应用运行时通常由成千上万个轻量级进程组成，并通过消息传递相互通讯。Erlang使用用户态抢占式协作线程来完成Erlang进程的调度，这比起C程序的线程切换要高效得多得多了。</p><h2>Erlang的特点</h2><ul><li>并发性：Erlang支持超大量级的并发进程，并且不需要操作系统具有并发机制。</li><li>分布式： 一个分布式Erlang系统是多个Erlang节点组成的网络。</li><li>健壮性：Erlang具有多种基本的错误检测能力，它们能够用于构建容错系统。</li><li>软实时性： Erlang支持可编程的“软”实时系统，使用了用户态抢占式协作线程，同时使用了递增式垃圾收集技术。</li><li>热代码升级：Erlang允许程序代码在运行系统中被修改。旧代码能被逐步淘汰而后被新代码替换。在此过渡期间，新旧代码是共存的。</li><li>递增式代码装载：用户能够控制代码如何被装载的细节。</li><li>函数式编程：尾递归优化，变量不可变，可预知的函数输出，匿名函数，闭包等。</li><li>动态类型：无需声明变量类型，Erlang会根据情况自动确定变量类型。</li></ul><h2>什么是OTP</h2><p>OTP是Open Telecom Platform的缩写，字面上直接的意思就是开放电信平台，这刚接触Erlang/OTP的人感到这玩意好像和一般服务器开发没什么关系。 但是OTP是基于Erlang语言的一个非常强大，且非常通用的平台。</p><p>OTP当中提供了大量的工具模块来帮助我们完成日常开发工作，同时该平台抽象了大量的行为模式，例如常见的状态机，通用服务器，进程监控以及内置的Mnesia数据库等。 这些库不单单加快了我们的开发工作，同时也提高了整个系统的稳定性和可扩展性。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>Erlang适合很多领域，读者所熟知的消息总线领域经能经常看到Erlang的身影。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/166/%25E4%25B8%25BA%25E4%25BB%2580%25E4%25B9%2588Erlang%25E9%2580%2582%25E5%2590%2588%25E5%25BC%2580%25E5%258F%2591%25E6%25B6%2588%25E6%2581%25AF%25E6%2580%25BB%25E7%25BA%25BF.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[杂谈]为什么Erlang适合开发消息总线-Tech Talk 让技术发出声音</a><p>Erlang/OTP作为自带分布式生态的平台，集群和RPC是必不可少的</p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/116/Erlang%25E6%2598%25AF%25E5%25A6%2582%25E4%25BD%2595%25E6%259E%2584%25E5%25BB%25BA%25E9%259B%2586%25E7%25BE%25A4%25E7%259A%2584.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]Erlang是如何构建集群的-Tech Talk 让技术发出声音</a><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/115/Erlang%25E9%259B%2586%25E7%25BE%25A4%25E7%259A%2584%25E5%2594%25AF%25E4%25B8%2580%25E6%25A0%2587%25E8%25AF%2586%25E7%25AE%25A1%25E7%2590%2586.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]Erlang集群的唯一标识管理-Tech Talk 让技术发出声音</a><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/118/Erlang%25E7%259A%2584RPC%2520%25E6%25A8%25A1%25E5%259D%2597%25E4%25BB%25A3%25E7%25A0%2581%25E5%2588%2586%25E6%259E%2590.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]Erlang的RPC 模块代码分析</a><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/172/Erlang%25E7%259A%2584Trap%2520%25E6%259C%25BA%25E5%2588%25B6.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]Erlang的Trap 机制</a><p></p>", 
            "topic": [
                {
                    "tag": "Erlang（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19606610"
                }, 
                {
                    "tag": "计算机语言", 
                    "tagLink": "https://api.zhihu.com/topics/19615452"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85427920", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 3, 
            "title": "Erlang的集群唯一标识管理", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/115/%25E9%259B%2586%25E7%25BE%25A4%25E5%2594%25AF%25E4%25B8%2580%25E6%25A0%2587%25E8%25AF%2586%25E7%25AE%25A1%25E7%2590%2586.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]集群唯一标识管理-Tech Talk 让技术发出声音</a><h2>Erlang中的global和local名字</h2><p>在开发Erlang/OTP程序的时候，看到最多的就是gen_server，在调用gen_server:start_link是，经常会看到{global,?MODULE}或{local,?MODULE}。那么这之间有什么差异呢？</p><h3>Erlang进程的名字</h3><p>Erlang在创建的进程的时候，给予Erlang进程一个PID作为进程的标识。那么经常使用的命名进程是怎么来的呢？是调用erlang:register这个函数将原子和PID进行关联，从而产生了命名的Erlang进程。而erlang:register函数接收的第一个参数可以看到是一个原子，而不是一个元组。难么gen_server为什么会使用一个元组呢？</p><h3>gen_server是如何创建进程</h3><p>先看下gen_server:start_link的代码</p><div class=\"highlight\"><pre><code class=\"language-text\">start_link(Name, Mod, Args, Options) -&gt;\n    gen:start(?MODULE, link, Name, Mod, Args, Options).\n</code></pre></div><p>从这里看到gen_server是调用gen模块进行进程创建的，那么gen模块又是如何创建进程的：</p><div class=\"highlight\"><pre><code class=\"language-text\">-spec start(module(), linkage(), emgr_name(), module(), term(), options()) -&gt;\n    start_ret().\n \nstart(GenMod, LinkP, Name, Mod, Args, Options) -&gt;\n    case where(Name) of\n    undefined -&gt;\n        do_spawn(GenMod, LinkP, Name, Mod, Args, Options);\n    Pid -&gt;\n        {error, {already_started, Pid}}\n    end.\n \n-spec start(module(), linkage(), module(), term(), options()) -&gt; start_ret().\n \nstart(GenMod, LinkP, Mod, Args, Options) -&gt;\n    do_spawn(GenMod, LinkP, Mod, Args, Options).\n \n%%-----------------------------------------------------------------\n%% Spawn the process (and link) maybe at another node.\n%% If spawn without link, set parent to ourselves &#39;self&#39;!!!\n%%-----------------------------------------------------------------\ndo_spawn(GenMod, link, Mod, Args, Options) -&gt;\n    Time = timeout(Options),\n    proc_lib:start_link(?MODULE, init_it,\n            [GenMod, self(), self(), Mod, Args, Options], \n            Time,\n            spawn_opts(Options));\ndo_spawn(GenMod, _, Mod, Args, Options) -&gt;\n    Time = timeout(Options),\n    proc_lib:start(?MODULE, init_it,\n           [GenMod, self(), self, Mod, Args, Options], \n           Time,\n           spawn_opts(Options)).\n \ndo_spawn(GenMod, link, Name, Mod, Args, Options) -&gt;\n    Time = timeout(Options),\n    proc_lib:start_link(?MODULE, init_it,\n            [GenMod, self(), self(), Name, Mod, Args, Options],\n            Time,\n            spawn_opts(Options));\ndo_spawn(GenMod, _, Name, Mod, Args, Options) -&gt;\n    Time = timeout(Options),\n    proc_lib:start(?MODULE, init_it,\n           [GenMod, self(), self, Name, Mod, Args, Options], \n           Time,\n           spawn_opts(Options)).</code></pre></div><p>可以清楚的看到，使用的proc_lib，而proc_lib是对erlang:spawn_link进行封装，以确保初始化函数能正确运行，那么注册名字的秘密就在gen:init_it中。在gen:init_it中可以看到一个内部函数name_register</p><div class=\"highlight\"><pre><code class=\"language-text\">name_register({local, Name} = LN) -&gt;\n    try register(Name, self()) of\n    true -&gt; true\n    catch\n    error:_ -&gt;\n        {false, where(LN)}\n    end;\nname_register({global, Name} = GN) -&gt;\n    case global:register_name(Name, self()) of\n    yes -&gt; true;\n    no -&gt; {false, where(GN)}\n    end;\nname_register({via, Module, Name} = GN) -&gt;\n    case Module:register_name(Name, self()) of\n    yes -&gt;\n        true;\n    no -&gt;\n        {false, where(GN)}\n    end.</code></pre></div><p>此时此刻，可以看到global和local的明显差异。</p><h3>local和global的区别</h3><p>从上面的代码和对Erlang虚拟机的跟踪可以知道，erlang:register管理的名字和进程PID关联表只是调用者本地的Erlang虚拟机内的，不是整个集群中的。而global:register_name是通过global模块对集群中所有Erlang虚拟机进行操作。从这可以看出，Erlang语言本身并没有所谓本地名字或集群名字的概念，而这个概念是OTP当中的（但是Erlang有本地节点进程和远程节点进程的概念）。</p><h2>Global模块分析</h2><h3>global模块功能</h3><ol><li>管理全局名字</li><li>管理全局锁</li><li>维护Erlang集群的互联互通</li></ol><h3>global模块启动</h3><p>该模块是在Erlang节点启动的时候自动被启动的，并且会组册一个名为global_name_server的进程。并且需要注意的是global模块本身就是一个gen_server，不过为了避免死循环，global模块使用gen_server注册的是本地名字。在global进程创建成功后，建立了大量的ets表，其中global_names表，global_pid_names表就是用来管理全局命名的。</p><h3>global名字注册</h3><p>注册名字的时候，就是让所有节点执行{register,Name,Pid,Method}。可以看下面这段代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">register_name(Name, Pid) when is_pid(Pid) -&gt;\n    register_name(Name, Pid, fun random_exit_name/3).\n     \nregister_name(Name, Pid, Method0) when is_pid(Pid) -&gt;\n    Method = allow_tuple_fun(Method0),\n    Fun = fun(Nodes) -&gt;\n        case (where(Name) =:= undefined) andalso check_dupname(Name, Pid) of\n            true -&gt;\n                gen_server:multi_call(Nodes,\n                                      global_name_server,\n                                      {register, Name, Pid, Method}),\n                yes;\n            _ -&gt;\n                no\n        end\n    end,\n    ?trace({register_name, self(), Name, Pid, Method}),\n    gen_server:call(global_name_server, {registrar, Fun}, infinity).\n</code></pre></div><p>当gobal进程收到了{register,Name,Pid,Method}消息后，会向在global进程建立时建立的另一个无名进程发送消息{trans_all_known, Fun, From}，这个无名进程的代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\"> loop_the_registrar() -&gt;\n    receive\n        {trans_all_known, Fun, From} -&gt;\n            ?trace({loop_the_registrar, self(), Fun, From}),\n            gen_server:reply(From, trans_all_known(Fun));\n    Other -&gt;\n            unexpected_message(Other, register)\n    end,\n    loop_the_registrar().\n \nunexpected_message({&#39;EXIT&#39;, _Pid, _Reason}, _What) -&gt;\n    %% global_name_server died\n    ok;\nunexpected_message(Message, What) -&gt; \n    error_logger:warning_msg(&#34;The global_name_server ~w process &#34;\n                             &#34;received an unexpected message:\\n~p\\n&#34;, \n                             [What, Message]).\n</code></pre></div><p>这个进程会使用trans_all_known来执行传入的函数，trans_all_known函数代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">trans_all_known(Fun) -&gt;\n    Id = {?GLOBAL_RID, self()},\n    Nodes = set_lock_known(Id, 0),\n    try\n%当锁住了所有的节点，才执行相关的操作\n%全局的大锁呀，用多了性能还是比较差的\n        Fun(Nodes)\n    after\n        delete_global_lock(Id, Nodes)\n    end.\n \nset_lock_known(Id, Times) -&gt; \n    Known = get_known(),\n    Nodes = [node() | Known],\n%Boss是List中最后的那个元素\n    Boss = the_boss(Nodes),\n    %% Use the  same convention (a boss) as lock_nodes_safely. Optimization.\n%先锁定住Boss\n    case set_lock_on_nodes(Id, [Boss]) of\n        true -&gt;\n%接这锁住剩下的节点\n            case lock_on_known_nodes(Id, Known, Nodes) of\n                true -&gt;\n                    Nodes;\n                false -&gt; \n                    del_lock(Id, [Boss]),\n                    random_sleep(Times),\n                    set_lock_known(Id, Times+1)\n            end;\n        false -&gt;\n            random_sleep(Times),\n            set_lock_known(Id, Times+1)\n    end.\n \nlock_on_known_nodes(Id, Known, Nodes) -&gt;\n    case set_lock_on_nodes(Id, Nodes) of\n        true -&gt;\n            (get_known() -- Known) =:= [];\n        false -&gt;\n            false\n    end.\n \nset_lock_on_nodes(_Id, []) -&gt;\n    true;\nset_lock_on_nodes(Id, Nodes) -&gt;\n    case local_lock_check(Id, Nodes) of\n        true -&gt;\n            Msg = {set_lock, Id},\n            {Replies, _} = \n                gen_server:multi_call(Nodes, global_name_server, Msg),\n            ?trace({set_lock,{me,self()},Id,{nodes,Nodes},{replies,Replies}}),\n            check_replies(Replies, Id, Replies);\n        false=Reply -&gt;\n            Reply\n    end.</code></pre></div><p>可以看出执行流程是这样的，先锁住集群中排序最大的那个节点，如上锁成功，则让所有的其余节点跟着上锁，如果上锁失败，则随机睡眠一段时间再接着尝试。如果当所有节点上都拿到锁，就执行名字注册，并且执行注册后。由于使用try after语句进行包裹，在执行最后一定会释放锁。</p><h3>为什么这样上锁</h3><p>首先全局的锁（GLOBAL_RID）是所有节点共享的，如果从随机的一个节点开始上锁，很容易出现同时好几个节点都在上锁而发生锁冲突，那么大家就约定先上锁某一个节点，这样能快速的发现锁的冲突。 其次，因为要在没给节点上的ets表中添加一个记录，如果不能在所有参与节点上添加记录，会出现数据不一致的问题。 最后，不能只锁定一个约定的节点，考虑到不稳定性，当节点出现异常无法连通的时候，那么这个锁的机制就无效了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>关于Erlang是如何构建集群的，请参考这篇博文，这里就不过多介绍了</p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/116/Erlang%25E6%2598%25AF%25E5%25A6%2582%25E4%25BD%2595%25E6%259E%2584%25E5%25BB%25BA%25E9%259B%2586%25E7%25BE%25A4%25E7%259A%2584.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]Erlang是如何构建集群的-Tech Talk 让技术发出声音</a><p></p>", 
            "topic": [
                {
                    "tag": "Erlang（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19606610"
                }, 
                {
                    "tag": "编程语言", 
                    "tagLink": "https://api.zhihu.com/topics/19552826"
                }, 
                {
                    "tag": "管理", 
                    "tagLink": "https://api.zhihu.com/topics/19553265"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85330540", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 6, 
            "title": "Linux的信号和线程", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/128/%255B%25E6%259D%2582%25E8%25B0%2588%255DLinux%25E7%259A%2584%25E4%25BF%25A1%25E5%258F%25B7%25E5%2592%258C%25E7%25BA%25BF%25E7%25A8%258B.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[杂谈]Linux的信号和线程-Tech Talk 让技术发出声音</a><h2>什么是线程</h2><p>线程，有时被称为轻量级进程(Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成，每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。</p><p>同时线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。</p><p>一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，致使线程在运行中呈现出间断性。因此线程也有就绪、阻塞和运行三种基本状态。就绪状态是指线程具备运行的所有条件，逻辑上可以运行，在等待处理机；运行状态是指线程占有处理机正在运行；阻塞状态是指线程在等待一个事件（如某个信号量），逻辑上不可执行。</p><h2>什么是信号</h2><p>信号是一种IPC通信的形式，一般在Unix，类Unix或POSIX兼容的系统中使用。信号是一种异步通知进程或同进程中某个指定线程的方式。 当信号被发送到进程的时候，操作系统会中断进程的控制流程，并且在执行非原子性的CPU指令时可以中断进程。</p><h3>信号使用的风险（新手坑）</h3><p>信号处理在存在竞态的，因为信号本身是异步的，在处理一个信号的过程中，令一个信号（甚至肯能是同类型的信号）会被直接发送到进程中请求进程处理。 信号是可以打断系统调用的，不谨慎处理会引起程序自身的混乱，所以进程的信号处理过程，尽量做到没有副作用，也不要使用不可重入的函数。</p><h2>Linux的线程</h2><p>LinuxThreads</p><p>在Linux的上古时代，Linux的线程技术和POSIX的标准是不同的，它使用自己的LinuxThreads库。这会为我们带来什么影响呢？</p><p>让我们来回顾一下 LinuxThreads 设计细节的一些基本理念：</p><ol><li>系统必须能够响应终止信号并杀死整个进程。</li><li>以堆栈形式使用的内存回收必须在线程完成之后进行。因此，线程无法自行完成这个过程。</li><li>终止线程必须进行等待，这样它们才不会进入僵尸状态。</li><li>线程本地数据的回收需要对所有线程进行遍历；这必须由管理线程来进行。</li><li>如果主线程需要调用 pthread_exit()，那么这个线程就无法结束。主线程要进入睡眠状态，而管理线程的工作就是在所有线程都被杀死之后来唤醒这个主线程。</li></ol><p>为了维护线程本地数据和内存，LinuxThreads使用了进程地址空间的高位内存（就在堆栈地址之下）。 同步元语是使用信号来实现的。例如，线程会一直阻塞，直到被信号唤醒为止。并且，LinuxThreads将每个线程都是作为一个具有惟一进程ID的进程实现的。LinuxThreads接收到终止信号之后，管理线程就会使用相同的信号杀死所有其他线程（进程）。 由于异步信号是内核以进程为单位分发的，而LinuxThreads的每个线程对内核来说都是一个进程，且没有实现“线程组”，因此，某些语义不符合POSIX标准，比如没有实现向进程中所有线程发送信号。如果核心不提供实时信号，LinuxThreads将使用SIGUSR1和SIGUSR2作为内部使用的restart和cancel信号，这样应用程序就不能使用这两个原本为用户保留的信号了。在Linux kernel 2.1.60以后的版本都支持扩展的实时信号（从_SIGRTMIN到_SIGRTMAX），因此不存在这个问题。根据 LinuxThreads 的设计，如果一个异步信号被发送了，那么管理线程就会将这个信号发送给一个线程，如果这个线程现在阻塞了这个信号，那么这个信号也就会被挂起，因此某些信号的缺省动作难以在现行体系上实现，比如SIGSTOP和SIGCONT，LinuxThreads只能将一个线程挂起，而无法挂起整个进程。</p><h3>LinuxThreads带来了什么问题</h3><p>首先我们说下POSIX是如何定义多线程的：POSIX下一个多线程的进程只有一个PID。 根据上面我们对LinuxThreads的描述，我们可以总结出LinuxThreads有下面这些问题：</p><ol><li>它使用管理线程来创建线程，并对每个进程所拥有的所有线程进行协调。这增加了创建和销毁线程所需要的开销。</li><li>由于它是围绕一个管理线程来设计的，因此会导致很多的上下文切换的开销，这可能会妨碍系统的可伸缩性和性能。</li><li>由于管理线程只能在一个 CPU 上运行，因此所执行的同步操作在 SMP 或 NUMA 系统上可能会产生可伸缩性的问题。</li><li>由于线程的管理方式，以及每个线程都使用了一个不同的进程 ID，因此 LinuxThreads 与其他与 POSIX 相关的线程库并不兼容。</li><li>信号用来实现同步原语，这会影响操作的响应时间。另外，将信号发送到主进程的概念也并不存在。因此，这并不遵守 POSIX 中处理信号的方法。</li></ol><p>我们在这里不关注性能如何只关注POSIX兼容和信号处理问题。</p><h3>NPTL</h3><p>LinuxThreads的问题，特别是兼容性上的问题，严重阻碍了Linux上的跨平台应用（如Apache）采用多线程设计，从而使得Linux上的线程应用一直保持在比较低的水平。在Linux社区中，已经有很多人在为改进线程性能而努力，其中既包括用户级线程库，也包括核心级和用户级配合改进的线程库。目前最为人看好的有两个项目，一个是RedHat公司牵头研发的NPTL（Native Posix Thread Library），另一个则是IBM投资开发的NGPT（Next Generation Posix Threading），二者都是围绕完全兼容POSIX 1003.1c，同时在核内和核外做工作以而实现多对多线程模型。这两种模型都在一定程度上弥补了LinuxThreads的缺点，且都是重起炉灶全新设计的。 NPTL的设计目标归纳可归纳为以下几点：</p><ol><li>POSIX兼容性</li><li>SMP结构的利用</li><li>低启动开销</li><li>低链接开销（即不使用线程的程序不应当受线程库的影响）</li><li>与LinuxThreads应用的二进制兼容性</li><li>软硬件的可扩展能力</li><li>多体系结构支持</li><li>NUMA支持</li></ol><p>在技术实现上，NPTL仍然采用1:1的线程模型，并配合glibc和最新的Linux Kernel2.5.x开发版在信号处理、线程同步、存储管理等多方面进行了优化。和LinuxThreads不同，NPTL没有使用管理线程，核心线程的管理直接放在核内进行，这也带了性能的优化。</p><h3>Linux线程总结</h3><p>比较新的Linux都已经开始使用NPTL了，所以我们可以忽略LinuxThreads的存在了，介绍它主要是为了让诸位读者更深入的了解线程和信号的恩恩怨怨（不要丢鸡蛋）。</p><h2>Linux的信号</h2><h3>Linux是如何处理信号的</h3><p>随着Linux的内核版本不断提升，Linux的信号现在已经可以按照线程级别的触发了，换句话说就是，每个线程可以关注自己的信号了，并且可以区别性对待了。那我们需要注意什么呢？</p><p>在多线程应用中，我们应当使用sigaction来代替singal函数，因为按POSIX的说法singal函数并没有明确定义自己在多线程应用中的行为。</p><p>可以使用pthread_sigmask来为每个线程设置独立的信号掩码。同时在多线程应用中应当避免使用sigprocmask这个函数，原因也是POSIX中该函数并没有明确定义自己在多线程应用中的行为。</p><p>这个时候，有人会产生疑问了，那么多线程下kill发出的进程级别的信号A怎么办？Linux是这样解决的，它会把这个信号交付给任意一个没有屏蔽信号A的线程。如果这信号没有被任何线程设置handler进行处理，就会触发POSIX规定的默认动作。</p><p>接着有人就会问，我怎么向某个线程发消息呢，POSIX为我们准备了pthread_kill函数，我们可以直接向特定的线程发送消息。那么如果一个线程收到信号A，但是自己没有安装handler会发生什么？其实和进程级别的信号处理方法一样，直接触发默认动作，同样会结束整个进程。</p><h3>如何避免新手坑</h3><p>在具有事件循环的应用中，在信号的的handler中，可以将信号直接放入程序的队列中，立刻返回。这样直到线程从程序的队列中取出这个信号为止，整个线程看起来就像没有“中断”。 如果不知道该怎么做，去看看著名的libev吧。</p><h3>信号SIGSEGV</h3><p>这个信号，也许是大家最不想见到，为什么呢？我们看这个信号的定义：</p><p>当当前程序对内存的引用无效时，就会产生当前信号，也就是我们常说的“段违例”。</p><p>以下几种情况会产生该信号：</p><div class=\"highlight\"><pre><code class=\"language-text\">1.进程引用的内存页面不存在（例如，该页面位于堆和栈之间的映射的区域）\n2.进程试图更新只读内存页（例如，程序文本段或已经被标记为只读的内存映射区域）\n3.进程试图在用户态去访问内核部分的内存</code></pre></div><p>好了，我们都知道这个信号引发的结果就是进程退出。不过我们都忽视了一个问题，在现代的Linux上，按照POSIX的定义，这个信号是系统产生的线程级别的信号。换句话说，如果某个线程A出现了内存引用无效，那么产生的信号，会投递到线程A的信号队列中，而不是像进程级别的信号无法确定接受者是谁。</p><h2>JVM的安全区域</h2><p>如果我们想让所有Java线程停下来的时候，在JVM的JavaThread执行到大家所知道的test 特定页面的指令时，就会因为更新不可读页面而触发SIGSEGV信号。那么对于那些正在执行native代码的JavaThread该怎么办，JVM中的注释写的非常清楚，native返回JVM时会检查是否能返回的。</p><p>好了再多说一句，JVM是如果将特定内存保护起来的呢？这个需要看操作系统的API了，在Linux中是mprotect。</p><h2>总结</h2><p>多读读POSIX标准和Intel的CPU体系结构，会让自己在开发变的容易些。</p>", 
            "topic": [
                {
                    "tag": "进程", 
                    "tagLink": "https://api.zhihu.com/topics/19634510"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }, 
                {
                    "tag": "线程", 
                    "tagLink": "https://api.zhihu.com/topics/19619468"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/85067102", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 3, 
            "title": "Tech Talk重新上线了", 
            "content": "<p>作为一个很爱折腾的人，为了写博客而写了博客，并且不断的造了好多小轮子。</p><p>先是用Haskell写了<a href=\"https://link.zhihu.com/?target=https%3A//github.com/MyDataFlow/sblog\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sblog</a>，之后又用Ruby On Rails做了一段时间论坛。</p><p>最终又用Common Lisp写了<a href=\"https://link.zhihu.com/?target=https%3A//github.com/DavidAlphaFox/aiwiki\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">aiwiki</a> 这个Web应用。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tech Talk 让技术发出声音</a><p>在10月1那天完成了<a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tech Talk</a>的回归工作，它依然很简陋，但是从上线起就可以开启的周更计划和完善计划。</p><p>周更计划:</p><ol><li>每周提供一篇翻译或原创的技术，经验类文章</li><li>点评并推荐两篇文章</li><li>保障博客和知乎专栏的同步</li></ol><p>完善计划：</p><ol><li>文章主题</li><li>文章点评和推荐后台，展示页面</li><li>文章标签</li><li>全新的主页。</li></ol>", 
            "topic": [
                {
                    "tag": "博客", 
                    "tagLink": "https://api.zhihu.com/topics/19550419"
                }, 
                {
                    "tag": "程序员", 
                    "tagLink": "https://api.zhihu.com/topics/19552330"
                }, 
                {
                    "tag": "Common Lisp", 
                    "tagLink": "https://api.zhihu.com/topics/19619519"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70506646", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 1, 
            "title": "ReasonML上路", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=http%3A//reasonmlhub.com/exploring-reasonml/ch_getting-started.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Getting started with ReasonML</a><p>本章我们将介绍如何安装ReasonML的环境和工具。</p><h2>安装必要工具</h2><p>我们将安装下面这两个工具：</p><ul><li><i>bs-platform</i>：将在读者的计算机上安装BuckleScript，并且让读者可以将ReasonML编译成JavaScript。如何安装请参考<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/docs/zh-CN/installation\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonML安装</a> 。</li><li><i>reason-cli</i>: 可以让编辑器支持ReasonML，同时也包含了很多很有用的工具，例如<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/docs/zh-CN/extra-goodies%23repl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rtop</a> ，安装方法参考<a href=\"https://link.zhihu.com/?target=https%3A//github.com/reasonml/reason-cli\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">reason-cli</a>。编辑器支持包含了下面两个部分：</li><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/language-server-protocol\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">language server</a> ，提供支持ReasonML代码处理的服务。</li><li>编辑器插件。</li></ul></ul><h2>快速尝试</h2><p><b>ReasonML在线环境</b></p><p>ReasonML网站自身就包含了一个<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/en/try.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在线运行环境</a>。这对那些好奇ReasonML的语法是什么样子的，编译后的JavaScript是什么样子，但是又不想安装ReasonML的读者就非常有用。同时这个运行时环境还能将OCaml转化成ReasonML。</p><p><b>rtop，ReasonML交互式开发环境</b></p><p><i>rtop</i>是ReasonML的交互式开发环境，我们可以在命令行中直接输入<i>rtop</i>来运行，当我们成功运行后，我们会看到下面的界面：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-8d6e13d45d9ab47520c4da2a225a8517_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2870\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"2870\" data-original=\"https://pic4.zhimg.com/v2-8d6e13d45d9ab47520c4da2a225a8517_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2870&#39; height=&#39;760&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2870\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2870\" data-original=\"https://pic4.zhimg.com/v2-8d6e13d45d9ab47520c4da2a225a8517_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-8d6e13d45d9ab47520c4da2a225a8517_b.jpg\"/></figure><p>读者已经知道，所有东西在ReasonML中都具备静态类型。当我们输入代码之后，不要忘记输入分号，因为只有输入分号才能触发代码解析！我们可以通过输入<i>quit;</i>或者直接按住<i>Ctrl-D</i>退出交互环境。</p><h2>工程模版</h2><p>目前，ReasonML只支持两种类型的工程模版，我们可以使用<i>bsb</i>命令来创建他们。</p><ul><li>普通代码：bsb -init my-first-app -theme basic-reason</li><li><a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/docs/en/installation.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonReact</a> ：bsb -init my-react-app -theme react</li></ul><h2>一点提示</h2><p>好多ReasonML相关的资料都是使用OCaml的语法，如果能将OCaml的代码直接转换成ReasonML的语法就好了。但是不要急，这里有两个方法可以完成这件事：</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/en/try.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonML线上环境</a> </li><li><i>refmt</i>工具，它是<i>reason-cli</i>的一部分。可以通过<i>refmt --help</i>来获得更多细节。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>ReasonML现在支持比较好的系统是MacOSX，Linux。其它的操作系统支持还有待提高。同时前面提到的rtop现在被封装到了<a href=\"https://link.zhihu.com/?target=https%3A//sketch.sh/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">sketch.sh/</span><span class=\"invisible\"></span></a> 当中，译者认为这东西很好玩，说不好可以用它做一个和<a href=\"https://link.zhihu.com/?target=https%3A//www.wolframalpha.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wolfram Alpha</a> 类似的界面（后面的系统涉及的太多，包括译者最近比较感兴趣的知识图谱）。</p><p>ReasonML还有一个比较独立的包管理系统<a href=\"https://link.zhihu.com/?target=https%3A//esy.sh/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">esy.sh/</span><span class=\"invisible\"></span></a> ，读者有兴趣可以去尝试下。</p><p>同时就目前而言，ReasonML和React算是整合的最好的了，用ReasonML来写NodeJS不是不可能，但是有点绕，有兴趣的读者可以自己尝试，译者也会在后面的翻译中不断完善相关部分。</p><p>译者翻译水平有限，希望多提出宝贵意见。</p><p></p>", 
            "topic": [
                {
                    "tag": "Reason 语言", 
                    "tagLink": "https://api.zhihu.com/topics/20105060"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "函数式编程", 
                    "tagLink": "https://api.zhihu.com/topics/19585411"
                }
            ], 
            "comments": [
                {
                    "userName": "Yakumo Purple", 
                    "userLink": "https://www.zhihu.com/people/3633a9b74c361f2968e6a34f009893a5", 
                    "content": "之前扫了一眼reason的tutorial，感觉和SML差不多", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>ReaonML毕竟是OCaml的直系，而作者又是SML的深度粉。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "Yakumo Purple"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69786339", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 12, 
            "title": "React的基本理念", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/reactjs/react-basic%23react---basic-theoretical-concepts/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-3f3501f524e4ccc7056779b41a5c68e0_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">reactjs/react-basic</a><p>本文是笔者像诸位读者讲解笔者所理解的React模型。我们的目的是用演绎推理的方式来找出是什么原因引导我们作出此种设计。</p><p>当然笔者所举的例子会存在缺陷和不足，当然这里有一些假设也是存在争议的。本文是为了抛砖引玉，如果读者对怎么能进行更好的说明，请不要吝啬，请随时发送pull请求。</p><p>这只是形式化的开始。 如果您对如何正式定位有更好的想法，请随时发送拉取请求。 从简单 - &gt;复杂的过程应该是有道理的，而不需要太多的图书细节。笔者认为这是一个从简单到逐步完善的过程，重在让读者理解其理念，而不是过多的细节。</p><p>事实上，React.js实现是非常务实的，它是增量开发，算法优化，历史兼容和包含调试工具以及其它有用的工具的工程产物。在React中很多技术只存在了很短的时间，如果某个技术被证明非常有价值且优先级很高，那么它将会随着时间而逐渐发生变化。因此，很多为什么会被这样实现的原因就很难找到。</p><p>因此，笔者更喜欢阐述一个容易理解的理论模型</p><h2>变换</h2><p>React的核心理念之一就是，界面应当是数据的不同形式的简单投影。相同的输入应该产生相同的输出。简单说，它应当是一个简单的纯函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">NameBox</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">fontWeight</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bold&#39;</span><span class=\"p\">,</span> <span class=\"nx\">labelContent</span><span class=\"o\">:</span> <span class=\"nx\">name</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">&#39;Sebastian Markbåge&#39; -&gt;\n{ fontWeight: &#39;bold&#39;, labelContent: &#39;Sebastian Markbåge&#39; };</code></pre></div><h2>抽象</h2><p>尽管，我们无法使用一个函数就填充完复杂界面。但是将界面抽象成包含实现细节的可重用的组件是非常重要的。这样做，就可以从一个函数中调用另外一个函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">FancyUserBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">borderStyle</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1px solid blue&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">childContent</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"s1\">&#39;Name: &#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">NameBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">{ firstName: &#39;Sebastian&#39;, lastName: &#39;Markbåge&#39; } -&gt;\n{\n  borderStyle: &#39;1px solid blue&#39;,\n  childContent: [\n    &#39;Name: &#39;,\n    { fontWeight: &#39;bold&#39;, labelContent: &#39;Sebastian Markbåge&#39; }\n  ]\n};</code></pre></div><h2>组合模式</h2><p>为了能很好的具备可重用特性，就不能简单的将可重用的组件封装到一个容器中。我们还需要能够让包含抽象组件的容器组合其它抽象组件从而构建出新的抽象组件。笔者认为“组合模式“就是将多个抽象组件组合成一个新的抽象组件。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">FancyBox</span><span class=\"p\">(</span><span class=\"nx\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">borderStyle</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1px solid blue&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"nx\">children</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">UserBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">([</span>\n    <span class=\"s1\">&#39;Name: &#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">NameBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">)</span>\n  <span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>状态</h2><p>界面不仅仅是复制服务端或业务状态到自己的状态中。事实上，很多状态的确切的投影方式是依据组件不同而不同的。例如，当我们正在一个文本框中输入文字。它会许会扶着到其它的选项卡中或者我们的移动设备上。同样，位置滚动就是个经典例子，此时我们基本上不希望它影响多处。</p><p>我们更倾向我们的数据是不可变的。我们使用函数单线程的原子性的更新其中的状态。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">FancyNameBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">likes</span><span class=\"p\">,</span> <span class=\"nx\">onClick</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">([</span>\n    <span class=\"s1\">&#39;Name: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">NameBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">),</span>\n    <span class=\"s1\">&#39;Likes: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">LikeBox</span><span class=\"p\">(</span><span class=\"nx\">likes</span><span class=\"p\">),</span>\n    <span class=\"nx\">LikeButton</span><span class=\"p\">(</span><span class=\"nx\">onClick</span><span class=\"p\">)</span>\n  <span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Implementation Details\n</span><span class=\"c1\"></span>\n<span class=\"kd\">var</span> <span class=\"nx\">likes</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">addOneMoreLike</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">likes</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"nx\">rerender</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Init\n</span><span class=\"c1\"></span>\n<span class=\"nx\">FancyNameBox</span><span class=\"p\">(</span>\n  <span class=\"p\">{</span> <span class=\"nx\">firstName</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Sebastian&#39;</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Markbåge&#39;</span> <span class=\"p\">},</span>\n  <span class=\"nx\">likes</span><span class=\"p\">,</span>\n  <span class=\"nx\">addOneMoreLike</span>\n<span class=\"p\">);</span>\n</code></pre></div><p>注意：这些示例使用副作用来更新状态。 笔者实际像表达的式，在“更新”过程中返回下一个版本的状态。虽然这样更容易解释，但是笔者将来可能会更新这个例子。</p><h2>记忆表</h2><p>如果我们知道某函数是纯函数的时候，那么一次次调用同一个函数是一种浪费。我们可以构建一个该函数的带有记忆表的版本，在记忆表中，我们需要记录历史调用的参数和相应的结果。这样我们就可以直接查表，而无需一次次去重复执行。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cachedArg</span><span class=\"p\">;</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">cachedResult</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cachedArg</span> <span class=\"o\">===</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">cachedResult</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">cachedArg</span> <span class=\"o\">=</span> <span class=\"nx\">arg</span><span class=\"p\">;</span>\n    <span class=\"nx\">cachedResult</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">cachedResult</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">MemoizedNameBox</span> <span class=\"o\">=</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">NameBox</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">NameAndAgeBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">currentTime</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">([</span>\n    <span class=\"s1\">&#39;Name: &#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">MemoizedNameBox</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">lastName</span><span class=\"p\">),</span>\n    <span class=\"s1\">&#39;Age in milliseconds: &#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">currentTime</span> <span class=\"o\">-</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">dateOfBirth</span>\n  <span class=\"p\">]);</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2>列表</h2><p>大多数用户界面都是某种形式的列表，然后根据列表中的每个项生成多个不同的值。 这创建了一个自然的层次。这是一种非常自然的层次结构。</p><p>为了管理每个项的状态，我们就需要创建一个Map，为每一个项保存一个状态。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">UserList</span><span class=\"p\">(</span><span class=\"nx\">users</span><span class=\"p\">,</span> <span class=\"nx\">likesPerUser</span><span class=\"p\">,</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">user</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">FancyNameBox</span><span class=\"p\">(</span>\n    <span class=\"nx\">user</span><span class=\"p\">,</span>\n    <span class=\"nx\">likesPerUser</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">),</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">likesPerUser</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">likesPerUser</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">();</span>\n<span class=\"kd\">function</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">likeCount</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">likesPerUser</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"nx\">likeCount</span><span class=\"p\">);</span>\n  <span class=\"nx\">rerender</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">UserList</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">,</span> <span class=\"nx\">likesPerUser</span><span class=\"p\">,</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">);</span>\n</code></pre></div><p>注意：我们现在有多个不同的参数传递给FancyNameBox。这会破坏我们的记忆函数，因为我们一次只能记住一个值。 更多请看下面的内容。</p><h2>延续</h2><p>不幸的是，由于在用户界面中有很多列表，所以需要很清晰地管理这些特别多的列表。</p><p>我们可以通过延迟执行一个函数，将我们关键逻辑中重复的逻辑抽取出来。例如我们可以使用“currying（柯里化）”（JavaScript中的bind的函数）。现在我们可以将状态直接从外部传递到我们的不包含重复逻辑的核心函数中。</p><p>这并没有减少重复逻辑，但至少，我们将它从我们关键逻辑中移除了。<br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">FancyUserList</span><span class=\"p\">(</span><span class=\"nx\">users</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">(</span>\n    <span class=\"nx\">UserList</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">users</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n \n<span class=\"k\">const</span> <span class=\"nx\">box</span> <span class=\"o\">=</span> <span class=\"nx\">FancyUserList</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">resolvedChildren</span> <span class=\"o\">=</span> <span class=\"nx\">box</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">(</span><span class=\"nx\">likesPerUser</span><span class=\"p\">,</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">resolvedBox</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span><span class=\"nx\">box</span><span class=\"p\">,</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"nx\">resolvedChildren</span>\n</code></pre></div><h2>状态映射</h2><p>正如我们前面所述那样，如果我们发现重复的模式，我们就可以使用组合模式来避免重复实现相同的模式。我们可以抽象共有逻辑，并传递状态到可重用的底层函数。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">FancyBoxWithState</span><span class=\"p\">(</span>\n  <span class=\"nx\">children</span><span class=\"p\">,</span>\n  <span class=\"nx\">stateMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">updateState</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">(</span>\n    <span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">continuation</span><span class=\"p\">(</span>\n      <span class=\"nx\">stateMap</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">),</span>\n      <span class=\"nx\">updateState</span>\n    <span class=\"p\">))</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">UserList</span><span class=\"p\">(</span><span class=\"nx\">users</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">users</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">user</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">continuation</span><span class=\"o\">:</span> <span class=\"nx\">FancyNameBox</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">),</span>\n    <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">id</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">FancyUserList</span><span class=\"p\">(</span><span class=\"nx\">users</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBoxWithState</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span>\n    <span class=\"nx\">UserList</span><span class=\"p\">(</span><span class=\"nx\">users</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">continuation</span> <span class=\"o\">=</span> <span class=\"nx\">FancyUserList</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">);</span>\n<span class=\"nx\">continuation</span><span class=\"p\">(</span><span class=\"nx\">likesPerUser</span><span class=\"p\">,</span> <span class=\"nx\">updateUserLikes</span><span class=\"p\">);</span>\n</code></pre></div><h2>记忆表映射</h2><p>一旦我们想在许多记忆表中记忆多个项目时，这就变的非常难。我们就需要搞清楚一些复杂的缓存算法，以平衡内存占用与访问频率。</p><p>幸运的是，相同位置上的用户界面经常是不变的，树中相同位置每次都会获得相同的值。因此这个树就是一个非常有用的记忆表的记忆策略。</p><p>我们可以使用传递状态时技巧，将记忆表缓存传入组合函数中。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">,</span> <span class=\"nx\">memoizationCache</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">memoizationCache</span><span class=\"p\">.</span><span class=\"nx\">arg</span> <span class=\"o\">===</span> <span class=\"nx\">arg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">memoizationCache</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">);</span>\n    <span class=\"nx\">memoizationCache</span><span class=\"p\">.</span><span class=\"nx\">arg</span> <span class=\"o\">=</span> <span class=\"nx\">arg</span><span class=\"p\">;</span>\n    <span class=\"nx\">memoizationCache</span><span class=\"p\">.</span><span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">FancyBoxWithState</span><span class=\"p\">(</span>\n  <span class=\"nx\">children</span><span class=\"p\">,</span>\n  <span class=\"nx\">stateMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">updateState</span><span class=\"p\">,</span>\n  <span class=\"nx\">memoizationCache</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">FancyBox</span><span class=\"p\">(</span>\n    <span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">continuation</span><span class=\"p\">(</span>\n      <span class=\"nx\">stateMap</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">),</span>\n      <span class=\"nx\">updateState</span><span class=\"p\">,</span>\n      <span class=\"nx\">memoizationCache</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">MemoizedFancyNameBox</span> <span class=\"o\">=</span> <span class=\"nx\">memoize</span><span class=\"p\">(</span><span class=\"nx\">FancyNameBox</span><span class=\"p\">);</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>Algebraic Effects</h2><p>事实上，它是一种抽象，它在多个抽象的层中传递最小的值变化。有时在两个抽象不通过中间层传递值时给出一条捷径是非常必要的。在React中，我们称它为“context”。</p><p>有时候，对数据的依赖并不和抽象树完全一致。例如在布局算法中，我们需要先了解一些关于子组件的大小的信息，然后才能完全填充相对应的位置。</p><p>让我们引用一些外部的例子。<a href=\"https://link.zhihu.com/?target=http%3A//math.andrej.com/eff/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Algebraic Effects</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//esdiscuss.org/topic/one-shot-delimited-continuations-with-effect-handlers\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ECMAScript中的提案</a>。如果读者，熟知函数式编程，就会发现他们通过使用Monads避免直接的内存变更。 </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">ThemeBorderColorRequest</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">FancyBox</span><span class=\"p\">(</span><span class=\"nx\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">color</span> <span class=\"o\">=</span> <span class=\"nx\">raise</span> <span class=\"k\">new</span> <span class=\"nx\">ThemeBorderColorRequest</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">borderWidth</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1px&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">borderColor</span><span class=\"o\">:</span> <span class=\"nx\">color</span><span class=\"p\">,</span>\n    <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"nx\">children</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">BlueTheme</span><span class=\"p\">(</span><span class=\"nx\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"nx\">children</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"nx\">effect</span> <span class=\"nx\">ThemeBorderColorRequest</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[,</span> <span class=\"nx\">continuation</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n    <span class=\"nx\">continuation</span><span class=\"p\">(</span><span class=\"s1\">&#39;blue&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">BlueTheme</span><span class=\"p\">(</span>\n    <span class=\"nx\">FancyUserList</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">users</span><span class=\"p\">)</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><p>翻译后记：</p><p>无意中在GitHub上看到这篇文章，笔者更多想阐述React深层次的原理，以及为什么选择相应的方案去实现React。</p><p>从总体来看，React的设计还是很大程度的受到函数式语言的影响，更强调函数的无副作用和可确定性，这也是为什么React很多时候效率很高的原因吧。其中提到了延续，译者认为它是fiber的理论基础。同时Algebraic Effects应该是Hooks的理论基础。</p><p>Algebraic Effects 这个词一直不太清楚该如何翻译比较好。但是对它的理解应该属于某种副作用，从而产生了数据变化。如果哪位读者知道该怎么翻译，请不吝赐教。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>译者水平有限，请多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>最后一整段翻译得都不是很对，尤其最后一句 \" they're avoiding the intermediate ceremony imposed by monads\"，意思是”他们（Algebraic Effects）避免了 Monad 带来的一系列起手式套路代码“。</p><p>我看下来这个Algebraic Effects和Scheme里面的`call/cc`是差不多的，当然原文意思也很明显，这是对continuation的一种抽象，是对控制流的抽象。引入一个新的概念主要是因为JS没有原生支持对continuation的抽象和操作。Monad的问题在于理解起来晦涩，写起来对于新手不直观。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "嗯，感谢修改建议", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69625073", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 1, 
            "title": "Common Lisp变量的一些事情（二）", 
            "content": "<h2>动态作用域</h2><p>如果想让Common Lisp中某个变量具备动态作用域该怎么办呢？那么我们就需要使用<b>special</b>函数。</p><p>它的作用就是</p><blockquote>指定相应的变量名称是动态绑定的，此操作会影响变量绑定同时也会影响变量引用。受影响的所有变量绑定都是动态绑定，受影响的变量引用是指当前的动态绑定。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-common-lisp\"><span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">declare</span> <span class=\"p\">(</span><span class=\"nv\">special</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">declare</span> <span class=\"p\">(</span><span class=\"nv\">special</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"mi\">1</span><span class=\"p\">))</span></code></pre></div><p>我们只需要对前一篇文章提到的代码，稍作修改就可以让他具有动态作用域。</p><h2>混合使用词法和动态作用域</h2><p>有些时候，我们需要混合使用词法作用域和动态作用域。请看下面代码：</p><div class=\"highlight\"><pre><code class=\"language-common-lisp\"><span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">a</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"nv\">if</span> <span class=\"p\">(</span><span class=\"nv\">boundp</span> <span class=\"ss\">&#39;a</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nv\">locally</span> <span class=\"p\">(</span><span class=\"nv\">declare</span> <span class=\"p\">(</span><span class=\"nv\">special</span> <span class=\"nv\">a</span><span class=\"p\">))</span> <span class=\"nv\">a</span><span class=\"p\">)</span>\n        <span class=\"nv\">a</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"nv\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">a</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"nv\">declare</span> <span class=\"p\">(</span><span class=\"nv\">special</span> <span class=\"nv\">a</span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"nv\">foo</span><span class=\"p\">))</span></code></pre></div><p>我们可以清晰的看到，我们声明foo的时候默认值给的是1，当我们声明特殊变量使用动态作用域它就会输出2。</p><p>这里面的细节就涉及到Common Lisp对变量绑定的定义了。</p><p></p>", 
            "topic": [
                {
                    "tag": "Common Lisp", 
                    "tagLink": "https://api.zhihu.com/topics/19619519"
                }, 
                {
                    "tag": "Lisp", 
                    "tagLink": "https://api.zhihu.com/topics/19593326"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69490816", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 1, 
            "title": "Common Lisp变量的一些事情", 
            "content": "<h2>Lisp-1 vs Lisp-2<sup data-text=\"\" data-url=\"https://en.wikipedia.org/wiki/Common_Lisp#The_function_namespace\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup></h2><p>Scheme的求值模型非常简单：只是用一个名字空间，所有表达式中相应位置的值应该是明确的。</p><p>Common Lisp和Scheme最大的不同是，函数名字空间和数据的名字空间是分离的。操作函数名字空间的语句包括，<b>defun</b>，<b>flet</b>，<b>labels</b>，<b>defmethod</b>和<b>defgeneric</b>等方法。要用函数名作为另一个函数的参数来传递函数时，需要使用<b>function</b>特殊操作符或者使用<b>#&#39;</b> 。</p><p>我们称Scheme的变量模型为Lisp-1，Common Lisp的变量模型是Lisp-2.</p><h2>绑定</h2><p>在编程语言中绑定是变量名（变量标识符）和对象（保存于内存中的存储单元，数据或代码）的映射关系。在这个绑定过程中是作用域有密不可分的关系，作用域决定了哪个变量绑定了哪个存储单元。</p><p>为变量建立绑定之后，就可以通过变量名来引用其所绑定的值。绑定的具体含义，可以参考下图</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-1b8f4b45c77aecde51394d1095a65d93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"143\" class=\"content_image\" width=\"304\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;304&#39; height=&#39;143&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"304\" data-rawheight=\"143\" class=\"content_image lazy\" width=\"304\" data-actualsrc=\"https://pic4.zhimg.com/v2-1b8f4b45c77aecde51394d1095a65d93_b.jpg\"/></figure><h2>词法作用域（lexical scoping）</h2><p>词法作用域又叫静态作用域（static scope）。顾名思义，词法变量即是使用词法作用域的变量。在词法作用域里，一个变量的变量名只能在一个函数或一段代码区域（ block ）内存在，此时变量名才会绑定到变量的值。</p><p>词法变量拥有不确定的生存期，即从时间上来讲，一个词法变量可以在任意的时间里持续存在，取决于该变量需要被使用(reference)多久。 词法作用域里，对于函数体中的一个符号，不会逐层检查函数的调用链，而是检查函数定义时的外部环境，即捕捉的是函数定义时该符号的绑定。</p><h2>动态作用域（dynamic scoping）</h2><p>使用动态作用域的变量叫做动态(dynamic)变量，有时也叫做特殊(special)变量。动态作用域里，每个变量名（变量标识符）都拥有一个全局的绑定栈。引入一个与动态变量同名的局部变量会为此变量名创建一个新的变量绑定并将其压入此变量名的全局绑定栈中，一个全局的变量名（变量标识符）总是引用当前其栈顶的绑定，当使用该变量绑定的代码执行完毕（即程序控制流离开了此变量的作用域），该变量绑定就会从此变量名的全局绑定栈中被弹出，该变量绑定就失效。 </p><p>动态作用域表示的范围是不确定的，可从任何位置访问一个动态变量，取决于它们在什么地方被绑定。动态变量拥有动态的生存期。因容易引起误会而需要注意的是，不确定的作用域和动态生存期的组合经常被错误地称为动态作用域（dynamic scope）。 </p><p>动态作用域里，函数执行遇到一个符号，会由内向外逐层检查函数的调用链，并打印第一次遇到的那个绑定的值。最外层的绑定即是全局状态下的那个值。 </p><h2>Common Lisp的例子</h2><p>请看下面的代码</p><div class=\"highlight\"><pre><code class=\"language-common-lisp\"><span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"mi\">1</span><span class=\"p\">))</span></code></pre></div><p>我们通过SLIM执行后，可以得到输出1和7，这说明Common Lisp使用的是词法作用域。在foo中寻找y的绑定时，它检查函数foo的词法上下文。</p><p>再请看下面代码</p><div class=\"highlight\"><pre><code class=\"language-common-lisp\"><span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">defun</span> <span class=\"nv\">foo</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">print</span> <span class=\"nv\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nv\">setq</span> <span class=\"nv\">y</span> <span class=\"p\">(</span><span class=\"nv\">+</span> <span class=\"nv\">y</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"nv\">let</span> <span class=\"p\">((</span><span class=\"nv\">y</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nv\">foo</span> <span class=\"mi\">2</span><span class=\"p\">))</span></code></pre></div><p>我们通过SLIM执行后，我们会看到，1，7，1，9，2和11。在例子中的第一个let表里，定义了一个变量，符号名为y并绑定了值7，那么这个y的作用域就是这个let表区域。 foo函数定义在这个区域内，其内部会使用到一个符号名为y的变量。 那么在词法作用域的情况下，当foo被调用时，其会查找其定义的环境有没有符号名y的变量可以绑定，如果有则把foo中符号y的值绑定，在这里就是7。 并且这里foo中的y和外部let中的y共享一个值，都是对这个值的引用，并不是拷贝了一个新值。</p><p></p>", 
            "topic": [
                {
                    "tag": "Common Lisp", 
                    "tagLink": "https://api.zhihu.com/topics/19619519"
                }, 
                {
                    "tag": "Lisp 方言", 
                    "tagLink": "https://api.zhihu.com/topics/20753672"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/69430017", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 2, 
            "title": "什么是Reason", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=http%3A//reasonmlhub.com/exploring-reasonml/ch_about-reasonml.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">What is ReasonML?</a><h2>什么是Reason</h2><p>本章高屋建瓴的讲解了Facbook的新语言 <a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonML</a>。</p><p>ReaonML是Facebook创建的一个面向函数式的编程语言。本质上，它是一个OCaml的类C语法的实现。使用新语法是为了让JavaScript开发者更容易上手，同时更容易和JavaScript进行交互。并且它放弃了OCaml中那些不太容易让人接受的语法特性。同时ReasonML可以很好的支持JSX（Facebook的react框架所使用的HTML模版语言）。由于ReasonML是基于OCaml的，所以很多人经常交叉使用这两个名字。下面这张图将展示ReasonML是如何和OCaml生态环境结合的。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-db04d74f33fff8841461696772e05432_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1322\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb\" width=\"1322\" data-original=\"https://pic3.zhimg.com/v2-db04d74f33fff8841461696772e05432_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1322&#39; height=&#39;528&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1322\" data-rawheight=\"528\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1322\" data-original=\"https://pic3.zhimg.com/v2-db04d74f33fff8841461696772e05432_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-db04d74f33fff8841461696772e05432_b.jpg\"/></figure><p>目前而言，ReasonML默认会编译到JavaScript（支持浏览器和NodeJS）。</p><p>让我们先看看ReasonML的代码是什么样子：</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"nc\">Red</span> <span class=\"o\">|</span> <span class=\"nc\">Green</span> <span class=\"o\">|</span> <span class=\"nc\">Blue</span><span class=\"o\">;</span>\n\n<span class=\"k\">let</span> <span class=\"n\">stringOfColor</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span>\n  <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Red</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;Red&#34;</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Green</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;Green&#34;</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Blue</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;Blue&#34;</span>\n  <span class=\"o\">};</span></code></pre></div><p>我们需要注意一些事情：</p><ul><li>ReasonML从JavaScript借来了许多语言特性</li><ul><li>关键字switch（OCaml：使用的是match）</li><li>匿名函数使用，(x) =&gt; 箭头函数语法</li><li>分号</li></ul><li>剩下的都是OCaml中函数式编程的特性</li><ul><li><i><a href=\"https://link.zhihu.com/?target=http%3A//reasonmlhub.com/exploring-reasonml/ch_variants.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">variant type</a> </i>的color声明</li><li>switch 可进行模式匹配</li></ul><li>我们并不需要类型声明（stringOfColor的参数c就没有声明）</li></ul><h2>OCaml带来的好处</h2><p>OCaml是ReasonML的基础，它可以为我们的开发带来下面的好处：</p><ul><li>它是一个稳定的发展的语言（1996年创建的），已经有多个项目应用了它。例如Facebook就将OCaml应用到多个项目上（如Flow）。</li><li>它的核心是一个类型完备的函数式语言。同时它也支持面向对象和可变状态。</li><li>它可以编译成字节码，也可以编译成native的应用，当然也可以编译成JavaScript。</li><li>它编译到JavaScript是非常容易的 “<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/community/blog/%23messengercom-now-50-converted-to-reason\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Messenger.com已经有50%代码是使用ReasonML的</a>”：</li></ul><blockquote>完全构建Reason部分的代码（小于几百哥文件）大约只需2s。增量构建平均都是小于<br/>100ms。BuckleScript的作者估计，当前的构建系统可以支持包含几十万文件的系统构建。</blockquote><h2>对OCaml的增强</h2><p>ReasonML的开发团队，并不是简单的将OCaml生态体系带入前端，而是在OCaml的生态体系上做了进一步的强化：</p><ul><li>更好的工具（测试，文档，编辑器支持等等）</li><li>提升ReasonML和JavaScript的互操作性。ReasonML的JavaScript编译器非常高效，并且可以产出高可读性的稳定代码。</li><li>更好的标准库（OCaml当中有相当多的竞争者，但是没有明确的赢家）。</li></ul><h2>总结</h2><p>ReasonML，可以说是那些想让JavaScript更整洁且要逐步迁移到静态类型函数类语言的人的不二之选。我对ReasonML中使用JSX是有一些矛盾的，它既有好处也有缺陷。但是让笔者很开心的是，ReasonML不是从新发明了一个轮子，而是选择了OCaml作为基础。</p><p>OCaml是非常实用的编程语言，这带代表我们不会受到函数类语言中一些奇特的特性影响（例如说Haskell中很多特性），同时它能快速编译，生成高效的代码，友好的错误信息。</p><hr/><p>翻译后记：</p><p>作为一个函数类编程语言使用者，OCaml确实是比较实用的，Haskell给我们带来太多特性和过度的数学化（同时某些人估计让这东西神话了，译者在Haskell上有时还是很赞同王垠的部分观点）。但是不代表Haskell中的一些理念是错的，例如说Monad这个盒子就是非常实用的。</p><p>作为前端开发者，ReasonML也继承了OCaml的一些好的东西（另一个是F#）同时提供了一些更具有生产力的工具。ReasonML是一个可以扩展自己视野的产品。在TypeScript给译者带来一些惊喜之后，更多的是平淡无味，而ReasonML给译者带来的是更多的乐趣。</p><p>译者实用Vue开发过一些小玩具，也使用过TS+React开发过不少小项目和大项目，但是当译者实用ReasonML之后，完全就放弃了Vue，专注的使用React开发了。因为ReasonML给译者带来了更少代码和更好的报错信息。请看参考下面的文章，译者将持续翻译ReasonML相关文章。</p><a href=\"https://zhuanlan.zhihu.com/p/67976595\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-efe21f28d4c46b387f8df1652b4f6147_180x120.jpg\" data-image-width=\"1600\" data-image-height=\"800\" class=\"internal\">David Gao：ReasonReact:使用ReasonML让前端更强大</a><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>译者水平有限，请多提出宝贵意见。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": "Reason 语言", 
                    "tagLink": "https://api.zhihu.com/topics/20105060"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "壮壮", 
                    "userLink": "https://www.zhihu.com/people/e3e48779d1b9c1fbe666236afb09f7e7", 
                    "content": "<p>试试F#的 fable??</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>暂时先不尝试了，F#虽然比OCaml有不少提升，估计是因为要顾虑C#整合的原因，好多东西用起来略不舒适，所以除了Windows平台外就暂不考虑F#了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "壮壮"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68808034", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 7, 
            "title": "ReasonReact，更好的React开发方案", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//www.freecodecamp.org/news/psst-heres-why-reasonreact-is-the-best-way-to-write-react-5088d434d035/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-cf36d27e173f0237710795a3e8527a89_180x120.jpg\" data-image-width=\"800\" data-image-height=\"532\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Psst! Here’s why ReasonReact is the best way to write React</a><p class=\"ztext-empty-paragraph\"><br/></p><p>不知道读者你们是否在使用 <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">React</a> 来构建用户界面。但是笔者是。让我们一起来了解下，为什么要使用<a href=\"https://link.zhihu.com/?target=https%3A//medium.freecodecamp.org/learn-reasonml-by-building-tic-tac-toe-in-react-334203dd513c\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonML</a> 来开发React应用。</p><p>部分读者可能已经充分感受到，用React来编写用户界面是个非常爽且炫酷的。在这个基础之上，我们能否让React的开发更炫酷呢？</p><p>在开始之前，我们需要明确指出我们需要理解的问题，那就是为什么将React只作为JavaScript的一个库来看待是不妥的？</p><h2>React 最初并不是为了 JavaScript 而开发的</h2><p>如果读者曾深入的研究React，就会发现它的开发理念和JavaScript的理念格格不入（译者注：现在而言，这些理念已经影响到了整个JavaScript的社区）。让我们有针对性的讨论下React中的不变性，函数式变成和类型系统。</p><p>不变性可以说是React的核心原则之一。读者在使用React的时候，都希望保持state和props不变，因为很多读者已经经历了改变这些属性产生了一些非预期结果的场景。在JavaScript中，并不存在不变性这个概念。我们只有通过约定来保持不变性，或者使用类似<a href=\"https://link.zhihu.com/?target=https%3A//facebook.github.io/immutable-js/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">immutableJS</a> 这种类库来帮我们达到目的。</p><p>React基于函数式编程的理念是因为React应用是函数的聚合体。尽管JavaScript不是一个函数式编程语言，但是它具备一些函数式编程的特性，例如同等函数。但是我们想编写更优雅的代码，我们就需要使用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/lodash/lodash/wiki/FP-Guide\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Lodash/fp</a> 或者 <a href=\"https://link.zhihu.com/?target=https%3A//ramdajs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ramda</a> 这种函数库来进行辅助。</p><p>那么为什么会有类型系统呢？由于JavaScript并非静态类型语言，因此在React中，我们需要使用 <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/typechecking-with-proptypes.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PropTypes</a> 来进行类型约定。为了更好的利用静态类型的特性，我们需要使用<a href=\"https://link.zhihu.com/?target=https%3A//flow.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flow</a> （译者注：对很多读者来说Flow是一个非常陌生的产品，它是Facebook为了能对JavaScript进行类型检查使用OCaml开发的一个工具）或<a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript</a> 语言来进行静态类型检查。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-b144e40dac7ecbc22e3150b37d0262a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-b144e40dac7ecbc22e3150b37d0262a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-b144e40dac7ecbc22e3150b37d0262a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-b144e40dac7ecbc22e3150b37d0262a8_b.jpg\"/></figure><p>正如读者所看到的一样，JavaScript和React的核心理念是极其不兼容的。</p><p>当然是否存在一个语言能比JavaScript更好的兼容React呢？</p><p>很辛运的是，我们可以使用 <a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonML</a> 。</p><p>由于Reason是基于 <a href=\"https://link.zhihu.com/?target=https%3A//ocaml.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OCaml</a> 这种函数式编程语言开发的，所以Reason天生就具备了不可变性。同时Reason很好的既成的OCaml的衣钵，Reason拥有一个很强大的类型系统。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8dc181204cea2cda2bc02e43e5a8ecfe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-8dc181204cea2cda2bc02e43e5a8ecfe_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-8dc181204cea2cda2bc02e43e5a8ecfe_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8dc181204cea2cda2bc02e43e5a8ecfe_b.jpg\"/></figure><p>我们可以看到，Reason和React是天生绝配。</p><h2>Reason</h2><p>Reason可以说并不是一个新语言，它是OCaml这个存在了将尽20年的函数语言的类JavaScript语法和工具链。Reason是由Facebook的工程师开发的，他们已经在很多项目上使用了OCaml例如 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/flow\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flow</a>，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/infer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Infer</a> 。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-690c7479428168e30ca1729d69dc6d93_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"225\" class=\"content_image\" width=\"225\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;225&#39; height=&#39;225&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"225\" data-rawheight=\"225\" class=\"content_image lazy\" width=\"225\" data-actualsrc=\"https://pic4.zhimg.com/v2-690c7479428168e30ca1729d69dc6d93_b.jpg\"/></figure><p>Reason所使用的类C语法，让OCaml对使用Java或者JavaScript等主流元的研发人员感到更亲切。和OCaml相比，Reason提供更全面的文档和<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/docs/en/community\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不断成长的社区</a> 。此外，它还可以更轻松地与现有的JavaScript代码库集成。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-c9ac140c005648076815463c92ece4fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic1.zhimg.com/v2-c9ac140c005648076815463c92ece4fc_b.jpg\"/></figure><p>Reason 语言基于 OCaml 语言，Reason与OCaml具有相同的语义只是语法上不同。 这意味着读者可以使用Reason这种类JavaScript的语法编写OCaml。 因此，读者可以利用OCaml的强大功能，例如强大的类型系统和模式匹配。</p><p>让我们一起看看Reason的语法。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">fizzbuzz</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span>  \n <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"ow\">mod</span> <span class=\"n\">3</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"ow\">mod</span> <span class=\"n\">5</span><span class=\"o\">)</span> <span class=\"o\">{</span>  \n  <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;FizzBuzz&#34;</span>  \n  <span class=\"o\">|</span> <span class=\"o\">(</span><span class=\"n\">0</span><span class=\"o\">,</span> <span class=\"o\">_)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;Fizz&#34;</span>  \n  <span class=\"o\">|</span> <span class=\"o\">(_,</span> <span class=\"n\">0</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">&#34;Buzz&#34;</span>  \n  <span class=\"o\">|</span> <span class=\"o\">_</span> <span class=\"o\">=&gt;</span> <span class=\"n\">string_of_int</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span>  \n<span class=\"o\">};</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">1</span> <span class=\"k\">to</span> <span class=\"n\">100</span><span class=\"o\">)</span> <span class=\"o\">{</span>  <span class=\"nn\">Js</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"o\">(</span><span class=\"n\">fizzbuzz</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">};</span></code></pre></div><p>虽然我们在这个例子中使用了模式匹配，但它仍然非常类似于JavaScript，对吧？ 但是，浏览器唯一可用的语言仍然是JavaScript，这意味着我们需要编译它。</p><h2>BuckleScript</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-0d818f40bed691269f59e20d6f3956aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"203\" class=\"content_image\" width=\"320\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;320&#39; height=&#39;203&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"203\" class=\"content_image lazy\" width=\"320\" data-actualsrc=\"https://pic3.zhimg.com/v2-0d818f40bed691269f59e20d6f3956aa_b.jpg\"/></figure><p>Reason最强大特性是 <a href=\"https://link.zhihu.com/?target=https%3A//bucklescript.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BuckleScript编译器</a>，它将Reason的代码编译为具有可读性且无效代码的高性能的JavaScript。 如果读者的团队中不是所有人都是Reason的使用者，读者会为Reason能编译出可读性很高的JavaScript而感到欣慰的。</p><p>由于Reson的代码和JavaScript的语法非常相近，因此一些Reason的代码，根本不需要编译器进行编译。所以读者们可以充分利用静态类型带来的好处，而不需要更改太多代码。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">let</span> <span class=\"n\">add</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">;</span>\n<span class=\"n\">add</span><span class=\"o\">(</span><span class=\"n\">6</span><span class=\"o\">,</span> <span class=\"n\">9</span><span class=\"o\">);</span></code></pre></div><p>上边这段代码，不管在Reason还是JavaScript都是有效的。</p><p>BuckleScript默认会包含4个库：一个名为<a href=\"https://link.zhihu.com/?target=https%3A//bucklescript.github.io/bucklescript/api/Belt.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Belt</a> 的标准库（<a href=\"https://link.zhihu.com/?target=https%3A//discuss.ocaml.org/t/what-is-the-preferable-solution-for-the-role-of-standard-library/1092\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OCaml的标准库所包含的功能不能覆盖需求</a>），JavaScript，NodeJS和DOM的API绑定。</p><p>由于 BuckleScript 是基于 OCaml 编译器，因此读者将获得比 Babel 快得多的<a href=\"https://link.zhihu.com/?target=https%3A//bucklescript.github.io/docs/en/build-performance\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">编译速度</a>，同样它比TypeScript快更多。</p><p>让我们编译下FizzBuzz的算法。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-f2a156db4c29e735e86fc004b1e58d26_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-f2a156db4c29e735e86fc004b1e58d26_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-f2a156db4c29e735e86fc004b1e58d26_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-f2a156db4c29e735e86fc004b1e58d26_b.jpg\"/></figure><p>如读者所见，编译器生成了可读性非常高的JavaScript代码。就如同正常JavaScript开发者所编写的一样。</p><p>Reason的编译器不单单可以生成JavaScript，它同样可以生成原生代码和字节码。因此，读者可以使用Reason编译在所有浏览器中都能使用的单一应用。Jared Forsyth 就使用Reason开发了一款名为<a href=\"https://link.zhihu.com/?target=https%3A//github.com/jaredly/gravitron\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Gravitron</a> 的游戏，该款游戏就可以在上面所说的平台上使用。</p><h2>JavaScript互操作性</h2><p>BuckleScript为我们提供了JavaScript互操作方案。这样读者不必将JavaScript的代码放入Reason中，只需要使用Reason和现有的JavaScript进行交互即可。这意味着，我们可非常容易将Reason的代码和JavaScript代码整合。更重要的是，读者可以使用NPM包管理体系中的JavaScript包。例如读者可以在一个项目中同时使用Flow，TypeScript和Reason。</p><p>但是，实际执行起来，也并非像我们前面所描述的那么容易。为了能在Reason中使用JavaScript的代码库，我们首先需要为它增加Reason的绑定。换而言之，我们需要为没有类型的JavaScript代码增加类型描述（译者注：这点和TypeScript很像），这样才能使用Reason的强类型体统。</p><p>当读者需要使用JavaScript的库时，可以去 Reason  Package Index (<a href=\"https://link.zhihu.com/?target=https%3A//redex.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Redex</a>) 中看看，是否已经有相应的绑定了。该网站聚合了，它包含了各方面使用Reason和JavaScript编写的库和工具的Reason绑定。如果读者在该网站发现自己需要的绑定，读者只需要简单的将它作为依赖安装到项目中并使用就可以了。</p><p>但是如果读者没有找到所使用的库的绑定，那么读者就需要自己编写Reason的绑定。如果您读者刚开始使用 Reason ，请记住，编写绑定不是一个Reason入门技能，因为它是 Reason 生态系统中非常具有挑战性的事情之一。</p><p>好在，笔者正在编写一篇关于Reason绑定的文章，敬请期待～</p><p>当读者需要JavaScript库中的某些功能室，读者可以只绑定整个库中读者所需要的函数和组件。</p><h2>ReasonReact</h2><p>本文将讲述如何使用Reason编写React应用，首先让我们感谢下 <a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReasonReact</a> 。</p><p>到目前为止，读者也许可能对“为什么我应该使用Reason编写React应用”这个问题，还没有一个明确的答案。</p><p>正如我们已经提到过这样做的主要原因 - Reason 比 JavaScript 和 React兼容度更高。为什么会有这么高的兼容度？因为React是面向Reason研发的，准确说是OCaml。</p><h2>是时候上车了</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-6b8e42fd5bcc100f3d85bc0b96c1ef92_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-6b8e42fd5bcc100f3d85bc0b96c1ef92_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;383&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-6b8e42fd5bcc100f3d85bc0b96c1ef92_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-6b8e42fd5bcc100f3d85bc0b96c1ef92_b.jpg\"/></figure><p>Facebook在实现React的原型的时候是使用的是和OCaml同语系的SML（<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Standard_ML\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">StandardML</a>）。然后它被迁移到OCaml上，同时将React编译成了JavaScript。</p><p>这是因为Web开发必须使用JavaScript，并且“使用OCaml去构建用户界面“并不是一个明知的方案。并且经过实践检验，我们可以看到JavaScript版本的React被大量的使用。</p><p>因此，我们已经喜欢了将React作为JavaScript的一个库来使用。这让Reacct很容易的和很多语言和库一起只用，例如<a href=\"https://link.zhihu.com/?target=https%3A//elm-lang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Elm</a>， <a href=\"https://link.zhihu.com/?target=https%3A//redux.js.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Redux</a>，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/acdlite/recompose\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Recompose</a>，<a href=\"https://link.zhihu.com/?target=https%3A//ramdajs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ramda</a>，和 <a href=\"https://link.zhihu.com/?target=http%3A//www.purescript.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PureScript</a> ，这让函数式编程在JavaScript中变的流行起来。随着<a href=\"https://link.zhihu.com/?target=https%3A//flow.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Flow</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript</a> 的发展，静态类型检查也变的越来越流行。因此，具有静态类型的函数式编程成为前端世界的主流趋势。</p><p>在2016年 <a href=\"https://link.zhihu.com/?target=https%3A//www.bloomberg.com/company/announcements/open-source-at-bloomberg-introducing-bucklescript/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Bloomberg</a>开源了BuckleScript，他将OCaml编译成了JavaScript。这让他们能使用强类型的OCaml编写前端代码。同时借助了OCaml的编译器的高效和优化，可以将后端适用JavaScript的代码编译成JavaScript。 </p><p>随着函数式开发逐渐被接收，以及BuckleScript的发布，让Facebook想起了最开始的想法，那就是用 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/ML_%28programming_language%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ML类语言</a> 开发React应用。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-c819528a94c814ebbab344290dbe2b6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"270\" data-rawheight=\"240\" class=\"content_image\" width=\"270\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;270&#39; height=&#39;240&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"270\" data-rawheight=\"240\" class=\"content_image lazy\" width=\"270\" data-actualsrc=\"https://pic3.zhimg.com/v2-c819528a94c814ebbab344290dbe2b6a_b.jpg\"/></figure><p>他们使用OCaml的语义和JavaScript的语法创造了Reason。同样他们还创建了ReasonReact这个React的Reason封装库。<a href=\"https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D15209704\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不忘初心</a>，Facebook并不是简单的为React库提供了一个绑定，他们还为这个库增加了很多功能，例如将Redux模式封装到了状态组件中。</p><h2>强大的ReasonReact</h2><p>当我们在JavaScript下面使用React时，我们需要为配合React，需要在JavaScript中引入各种各样的库和工具。这就代表，我们的项目引入了更多的依赖。甚至有些库还处在初期开发阶段，每次发布都会引入重大不兼容的变化。因此，我们就需要小心谨慎的维护我们项目的依赖。</p><p>这为JavaScript的开发又增加了一重复杂性。</p><p>典型的React应用，一般都会包含下面这些依赖：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-2ae7039b2f7fc9399cdc790a72e79868_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-2ae7039b2f7fc9399cdc790a72e79868_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-2ae7039b2f7fc9399cdc790a72e79868_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-2ae7039b2f7fc9399cdc790a72e79868_b.jpg\"/></figure><ul><li>静态类型检查- Flow/TypeScript</li><li>不变性-immutableJS</li><li>路由-ReactRouter</li><li>代码格式化-Prettier</li><li>linting - ESLint</li><li>辅助功能 - Ramda/Lodash</li></ul><p>当我们使用ReasonReact的时候，我们是否还 需要这些依赖？</p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-thumbnail=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;450&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-thumbnail=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c54c339b6df1a2455103b49c9d554f65_b.gif\"/></figure><ul><li>静态类型检查-内置</li><li>不变性-内置</li><li>路由-内置</li><li>代码格式化-内置</li><li>linting - 内置</li><li>辅助功能 - 内置</li></ul><p>读者可以通过笔者<a href=\"https://link.zhihu.com/?target=https%3A//www.codinglawyer.io/posts/why-building-stuff-in-reason\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">其它文章</a>来更进一步的了解这些内置特性。</p><p>在ReasonReact中，我们不在需要这些和更多的依赖，因为核心的特性已经包含在Reason当中。因此我们更容易维护我们的软件，并且不会随着时间的推移而更复杂。</p><p>这要感谢已经具备20年历史的OCaml，它已经非常成熟了，很多核心的理念已经被实践证实了。</p><h2>总结</h2><p>起初，Reason的创造者，又两个选择。使用JavaScript或其它增强语言，并逐步进行优化。但是这样做，就需要去处理巨大的历史负担。</p><p>但是他们决定另辟蹊径，他们采取对成熟且高效的OCaml进行修改的方式，让它具备JavaScript的风格。</p><p>同样，React的核心理念也是参考了OCaml。这就是为什么在我们使用Reason开发React时，我们可以获得更好的开发体验。用Reason编写React组件是一种更安全的方式，因为我们得到了强类型系统的支撑，同时我们无需处理大量JavaScript（陈旧的语法或一些奇怪的语法）的问题。</p><h2>动起来</h2><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-032699e3e22e6be65d67038becb8d6ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-032699e3e22e6be65d67038becb8d6ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;533&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-032699e3e22e6be65d67038becb8d6ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-032699e3e22e6be65d67038becb8d6ce_b.jpg\"/></figure><p>如果读者是一个JavaScript的开发者，那么读者会很快就适应Reason了，因为它们的语法很相似。如果读者已经开发过React应用，那么这会更简单，因为读者已经具备了丰富的React经验，同时ReasonReact和React具备相同基础模型和相似的开发流程。这代表这读者无需从头开始，只需要边学边用。</p><p>在项目中开始使用Reason最好的方式是，先引入然后增量开发。正如前面已经提到我们可以编写Reason代码并在JavaScript中使用它，反之亦然。在ReasonReact中我们同样可以这样做，我们可以编写ReasonReact的组件并在现有的React应用中使用，反之亦然。</p><p>Facebook的研发们已经将这种增量开发模型投入了实际使用中，他们在<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/blog/2017/09/08/messenger-50-reason.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Facebook Messenger</a>    的开发过程中大量的使用Reason。</p><p>如果读者想使用ReasonReact开发应用来学习Reason，请看笔者<a href=\"https://link.zhihu.com/?target=https%3A//medium.freecodecamp.org/learn-reasonml-by-building-tic-tac-toe-in-react-334203dd513c\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这篇文章</a> 。</p><p>如果读者有任何问题，质疑，观点或改进提示，请随时在下面写评论或通过<a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/coding_lawyer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Twitter</a>或笔者的<a href=\"https://link.zhihu.com/?target=https%3A//www.codinglawyer.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">博客</a>与笔者联系。<br/></p><hr/><p>翻译后记：</p><p>对ReasonReact，很多读者都会很陌生，毕竟国内应用比较少。而译者本身是非常强的函数式编程背景，所以使用Reason来进行开发比原生JavaScript更顺畅。</p><p>当然ReasonML还处在一个发展的阶段，很多东西并不完备，甚至某些地方并不如JavaScript好用（例如，Promsie，async/await）。但是ReasonML能大大的降低代码量。</p><p>如果读者对ReasonReact感兴趣的化，可以参考另外一篇<a href=\"https://zhuanlan.zhihu.com/p/67976595\" class=\"internal\">译文-ReasonReact:使用ReasonML让前端更强大</a>。</p><p>未来的2～3个月时间，译者将会恢复<a href=\"https://link.zhihu.com/?target=https%3A//ttalk.im\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">个人网站-TTalkIM</a>，专注的翻译国外的一个ReasonML教程，以及发布一些关于ReasonReact实践等文章。</p><p>翻译水平有限，希望多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "Reason 语言", 
                    "tagLink": "https://api.zhihu.com/topics/20105060"
                }, 
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "函数式编程", 
                    "tagLink": "https://api.zhihu.com/topics/19585411"
                }
            ], 
            "comments": [
                {
                    "userName": "鲨叔", 
                    "userLink": "https://www.zhihu.com/people/a26d68b4f9e1bfbe05732832679e66eb", 
                    "content": "你翻译这篇文章很早就被人翻译了。不过，看样子，你想当布道师了，加油哈。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "没特别注意，这个被人翻译，就是感觉和自己最近做的东西有关系，所以翻译了下。", 
                            "likes": 0, 
                            "replyToAuthor": "鲨叔"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68645909", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 10, 
            "title": "OpenBSD和Linux的不同", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//cfenollosa.com/blog/what-are-the-differences-between-openbsd-and-linux.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-be7c189568e565d7e964325e9abf3f68_ipico.jpg\" data-image-width=\"113\" data-image-height=\"113\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">What are the differences between OpenBSD and Linux?</a><p class=\"ztext-empty-paragraph\"><br/></p><p>也许你已经看到<a href=\"https://link.zhihu.com/?target=https%3A//www.openbsd.org/65.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OpenBSD 6.5发布信息</a>，你也曾想过，OpenBSD和Linux有什么不同呢？然后就没什么然后了。</p><p>笔者也曾想过这个<a href=\"https://link.zhihu.com/?target=https%3A//cfenollosa.com/blog/openbsd-from-a-veteran-linux-user-perspective.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">问题</a>，下面是笔者的总结。</p><p>这些同样适用于其它的BSD系统。同时为了防止口水之争，在本文开始之前，我们需要声明一些事情。</p><p>本文主要针对那些正在使用Linux并对OpenBSD感兴趣的人群。本文主要讲述的是一个Linux用户观点的改变，而不是一个技术立场的改变。</p><p><b>终端依旧还是那个终端</b></p><p>我们需要意识到，从表面上，OpenBSD和Linux的差异是非常小的。它们都是类Unix系统。我们在两个体统上，依然是使用Terminal，X Windows，Firefox和Libreoffice等软件。</p><p>尽管OpenBSD无法安装一些闭源软件，但是绝大部分开源软件可以在OpenBSD上重新编译。我们不要期待任何视觉上的变化。事实上，Linux上的KDE和GNOME的差异，都比两个平台的KDE差异大。</p><p>但是在更核心层面，两个虽然有很大的不同但是对用户影响很小：</p><ul><li>BSD协议 vs GNU协议</li><li>一些基础包被认为和内核同等重要的完整的系统模式 vs 裸内核外加所有东西都是第三方软件的模式</li><li>高质量代码和高质量文档模式 vs Stack Overflow外加邮件列表挖掘模式</li><li>安全和正确性被做为最高优先级的系统 vs 通用，流行和高效的系统</li></ul><p>这些是否让读者们有所认知了？笔者很清楚，一时很难完全理解这些。读者们可以参考“Windows VS Linux”，这两个操作系统在各个方面有更多的差异，就像大象和麻雀的差异。但是在无经验的人眼中，分辨鸽子和斑鸠也是有困难的。</p><p>一些理念上导致的差异，并不那么容易被看到。这些差异也是不那么容易被阐述清楚，只有通过使用才能理解。这就是我们推荐“去尝试OpenBSD用亲眼所见去发现”。</p><h3>实际使用时的差异</h3><p>让我看一些比较实际和标志行的差异怎么样？</p><p>但是这里并没有太多。有一些特性，但是有一些是我们不希望的副作用。每一个决定都需要权衡，让我们看看这些吧。</p><p>不管怎么说， OpenBSD是一个非常简单的系统。对系统管理员来说，非常省心省力。所有的模块都是遵循Unix哲学理念，注重简单易用。如果读者对该理念不是很了解，只需要去想象rc体系和Systemd体系。这是不可低估的力量：好多人选择使用OpenBSD，是因为它比Linux更精简，甚至和同系列的FreeBSD相比也是很精简。</p><p>OpenBSD包含了非常完整的手册，我们可以在手册中找到很多实用的例子。</p><p>在基础系统中，OpenBSD的服务进程和Linux有很大不同。</p><ul><li>apache/nginx: httpd</li><li>postfix/sendmail: opensmtpd</li><li>ntp: openntpd</li><li>bash: ksh</li></ul><p>这些替代品是更好还是更差？好吧，这些替代品涵盖了90％用户功能，同时又强大且易于管理。想一想：“就当前的邮件系统核心问题是，我们如何从头开始编写一个包含任何历史包袱的现代电子邮件系统？”</p><p>让我们来看看OpenSMTPd吧。剩下的也一样，很多项目都是这样子的（openbsd -&gt; libressl)。</p><h3>安全性以及系统可管理性</h3><p>W^X， ipsec， ASLR， kernel relinking， RETGUARD， pledge，unveil等名词和技术。</p><p>是不是听起来很耳熟？绝大部分都是<a href=\"https://link.zhihu.com/?target=https%3A//www.openbsd.org/innovations.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OpenBSD的创新</a>，这些创新不断的被其它Unix系统采用。</p><p>“那么这是否代表OpenBSD比Linux更加安全？“</p><p>我只能说他们之间有不同，但是差不多少，但是随着系统发展，OpenBSD将会更加的安全和稳定。</p><p>在x86体系下，站在系统管理角度，包升级都有一定难度但是相差不多。如果读者想使用不同的应将架构，读者就需要时不时的在OpenBSD上重新编译软件包。</p><p>“但是卡洛斯，你还没有告诉我一个与我日常使用相关的功能！“</p><p>这是因为可能没啥差异。因为很少有，只有OpenBSD能做而Linux不能做的事情。然而，他们做了什么，谁做得更好。这对你很重要吗？</p><h3>理念不同才是最重要的</h3><p>让我们去看一些不是很友好的事实<a href=\"https://link.zhihu.com/?target=https%3A//www.openbsd.org/goals.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OpenBSD的理念</a>。</p><p>绝大部分Linux上闭源软件是无法在OpenBSD上工作的：Skype，Slack等。如果这些软件都是读者日常使用非常重要的一部分，只能选择Web应用或者尝试含有Linux兼容层的FreeBSD。</p><p>同样和Linux相关的软件也是无法在OpenBSD上使用的，例如说Docker。</p><p>同样道理，OpenBSD拥有非常优秀的硬件驱动，但是这些驱动的量实在太有限了。所以读者要使用OpenBSD时，就要谨慎的选择硬件。提示：选Thinkpad。</p><p>包括很多兼容性驱动，支持的都不是很好，如：modern/第三方文件系统（NTFS等）。</p><p>因为它主要精力集中在安全和简单上，所以性能并未得到充分优化，绝大部分软件都会比Linux慢一些。在笔者的实际经验（和一些<a href=\"https://link.zhihu.com/?target=https%3A//www.phoronix.com/scan.php%3Fpage%3Darticle%26item%3D8-linux-bsd%26num%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">性能测试</a>）中OpenBSD的软件运行速度比Linux慢10%到20%。</p><p>笔记本的电池也受到很大影响。我的x230，在使用Linux，它可以使用5个小时，但是使用OpenBSD时，它才能使用3:30。当然更新的笔记本和更大的电池，也许对使用者来说是一个更实际的解决方案。</p><p><b>好了，那么我该怎么选？</b></p><p>“你是想告诉哦，OpenBSD没什么又是，并且它的缺陷是一个缺少软件且很慢的系统？“</p><p>即便这么说在技术上是有风险的，但是站在Linux用户的角度，笔者完全认同。</p><p>但是想一下，最开始是什么吸引读者使用Linux的。它并不是比Windows更快的电脑，更多的驱动或者更多的软件。而是一种自由的精神，Linux为我提供了，更健壮，更安全和更个性化的系统。</p><p>选择OpenBSD也是一样的道理。</p><p>事实上：在当前的时间点上，对读者来说，这些无形的资产是无形的。但是对其他人或者部分读者，正是被OpenBSD这些特性所吸引而去使用OpenBSD。对笔者而言，OpenBSD的架构，理念和系统管理，OpenBSD比Linux强上10倍。</p><p>让笔者换个方式来问问题：如果读者能得到一个更强大，更健壮和更易用的系统，读者是否愿意去忍受它的一些缺点？</p><p>是的，现在也许读者会想：“也许Linux是自由，软件可用性和新手友好之间做了良好平衡的结果“。对绝大部分人来说，这是没有任何问题的。但是笔者也使用Linux，笔者只是想帮读者增加一个选项。</p><h3>如何尝试OpenBSD</h3><p>至此，是否已经激起各位读者的兴趣了呢？或者不打算尝试而直接关掉本文呢？让我们勇往直前吧，使用一个虚拟机或者在一台老旧机器上安装OpenBSD体验下吧。</p><p>生活，从来就不是非黑即白。也许OpenBSD并不能成为读者日常的工作系统，但是完全可以当作玩具系统。认真的说，笔者知道一部分人只使用OpenBSD。</p><p>那么以笔者自身为例子。笔者日常工作系统是Mac OS X，并非Linux，因为笔者需要使用微软的Office和一些只有Windows和Mac OS X才有的软件来完成日常工作。</p><p>但是，当回到家中，笔者就会使用安装在<a href=\"https://link.zhihu.com/?target=https%3A//cfenollosa.com/blog/the-windows-7-experience.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">x230</a> 上的OpenBSD，并且感到OpenBSD比Mac OS X用起来更加舒适。</p><p>读者们，你们还在观望吗？让我们去下载一份 <a href=\"https://link.zhihu.com/?target=https%3A//www.openbsd.org/faq/faq4.html%23Download\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OpenBSD</a> 并且High起来吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>译者是一个长期使用类Unix系统的前端开发，主要使用Mac OS X，FreeBSD和OpenBSD。基本上所管理的服务器都是使用OpenBSD和FreeBSD。笔者曾提到推荐购买ThinkPad来使用OpenBSD，虽然译者目前使用ThinkPad W530来运行OpenBSD，但是译者现在（2019年）更推荐<a href=\"https://link.zhihu.com/?target=https%3A//jcs.org/2017/05/22/xiaomiair\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">小米的air</a> 和 <a href=\"https://link.zhihu.com/?target=https%3A//jcs.org/2017/07/14/matebook\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">华为的MateBook X</a> 。因为就中国市场而言，ThinkPad性价比实在太低了，使用同美国相比2倍的价格都无法买到美国同等配置。</p><p>对于一般的读者，译者并不推荐使用OpenBSD。OpenBSD和FreeBSD在某些特定领域得到了很好的应用，但是作为日常使用对一般读者需要下巨大的决心。</p><p>翻译水平有限，希望各位读者提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "OpenBSD", 
                    "tagLink": "https://api.zhihu.com/topics/19660337"
                }, 
                {
                    "tag": "Linux", 
                    "tagLink": "https://api.zhihu.com/topics/19554300"
                }
            ], 
            "comments": [
                {
                    "userName": "小呵呵", 
                    "userLink": "https://www.zhihu.com/people/9ed00a22715c16470e0dd80f9072f526", 
                    "content": "请问这个怎么做:通过查看和批注/etc/sysconfig/network-scripts/ifcfg-eno16777736文件，设置计算机IP地址为192.168.0.2，网关IP地址为192.168.0.1", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "你这话看起来应该是CentOS或者RHL，你可以去红帽子的文档上查一下。", 
                            "likes": 0, 
                            "replyToAuthor": "小呵呵"
                        }, 
                        {
                            "userName": "刘浩浩", 
                            "userLink": "https://www.zhihu.com/people/ccd426454df0a96198da51c98d70cbe7", 
                            "content": "。。。你是要设成静态，不用dhcp的吧？如果你的电脑不是接的以太网，那么不建议你这么改，因为不同wlan的网关不一样，因此ip也不好定死 我猜你可能是在虚拟机上？这个改的重点是把DHCP改为static", 
                            "likes": 0, 
                            "replyToAuthor": "小呵呵"
                        }
                    ]
                }, 
                {
                    "userName": "zhy", 
                    "userLink": "https://www.zhihu.com/people/6107ee609e7400c4c3d9fa1b4d68dae2", 
                    "content": "感觉<br>用惯mac os的用freebsd舒服，因为是抄袭滴，我玩云主机习惯centos，不过俩着，使用上我感觉centos上命令常用的，都差不多，另外问一句，群晖系统是bsd吗", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "群辉不是，FreeNAS是", 
                            "likes": 0, 
                            "replyToAuthor": "zhy"
                        }, 
                        {
                            "userName": "zhy", 
                            "userLink": "https://www.zhihu.com/people/6107ee609e7400c4c3d9fa1b4d68dae2", 
                            "content": "知乎好多都说是bsd，我感觉像Ubuntu<br>😂", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68533319", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 1, 
            "title": "深入了解ES6的模块", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//ponyfoo.com/articles/es6-modules-in-depth%23strict-mode\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-38d20de39021c0e227f3b2dd0af253e9_180x120.jpg\" data-image-width=\"1500\" data-image-height=\"500\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ES6 Modules in Depth</a><h2><b>ES6的模块体系（Modules）</b></h2><p>在ES6被应用之前，JavaScript开发者想尽各种方法将代码模块化。在<i>Browserify</i>和<i>Webpack</i>等工具的协助下，现有像RequireJS，Angular的依赖注入机制和CommonJS的系统已经可以满足我们的模块化需求了。尽管如此，在2015年，ES6还是标准化了这个JavaScript中被认为长期缺失模块体系。当我们一瞥ES6的模块体系时，会很快发现它的设计大量的参考了CommonJS的设计。我们将看看<i>export</i>和<i>import</i>语句是如何工作的，ES6的模块体系是如何兼容CommonJS的模块体系，它们开始探索吧。</p><p>我们经讨论ES6模块体系中下面的一些领域：</p><ul><li>严格模式（Strict Mode）</li><li>导出（export）</li><ul><li>默认导出</li><li>命名导出</li><li>导出的不仅仅是值，是绑定</li><li>列表导出</li></ul><li>导出的最佳实践</li><li>引入（import）</li><ul><li>引入默认导出</li><li>引入命名导出</li><li>引入所有的东西</li></ul></ul><h2><b>严格模式</b></h2><p>在ES6的模块体系时，ES6会默认使用严格模式。为了防止读者不知道什么是严格模式，我们简单介绍一下严格模式。它可以被认为是一个禁用ES6中容易存在歧义或者不是很严谨语法的一个模式，它让ES6更加严谨。通过禁止用户编写出一些有歧义的代码，帮助编译器生成更好的代码。关于严格模式的介绍我们可以深入的阅读<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">MDN的文档</a>。</p><p>严格模式，有下面这些要求</p><ul><li>变量不能没有声明就使用</li><li>函数的参数名必须唯一 </li><li>禁用<i>with</i>语法</li><li>给只读属性赋值的时候会抛出错误</li><li>不准许像<i>00840</i>这种双0开头的八进制，会被认为是语法错误</li><li>当我们尝试删除不可删除属性时会抛出错误 </li><li>不准许直接删除简单名字，需要通过<i>delete global[prop]</i>这种方式删除</li><li>使用<i>eval</i>不会在外层环境中引入<i>eval</i>内部的变量</li><li><i>eval</i>和<i>arguments</i>是不可以被重新绑定或者赋值</li><li><i>arguments</i>不会因为函数内和参数重名的变量被改变而发生变化，只有直接修改arguments才会引起值的变化。</li><li>不在支持arguments.callee，调用时会抛出TypeError</li><li>不在支持arguments.caller，调用是会抛出TypeError</li><li>不在强制方法调用时this是一个<i>Object</i></li><li>不在准许使用<i>fn.caller</i>和fn.arguments访问JavaScript的栈</li><li>保留字不在能被重新绑定。</li></ul><p>为了让这些要求一眼就被我们看出来，我们应该在所有的地方都使用<i>&#39;use strict&#39;</i>。即便它在ES6中是一个既成事实，但是依然建议在所有的地方都加上<i>&#39;use strict&#39;</i>。我已经坚持这样做很长时间了。</p><p>那么让我们开始对<i>export</i>的探索吧。</p><h2><b>export</b></h2><p>在CommonJS中，导出的值都被放到<i>module.exports</i>中我们可以看下面的代码片段，你可以导出任何值。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kc\">NaN</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;foo&#39;</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bar&#39;</span> <span class=\"p\">}</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">]</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">foo</span> <span class=\"p\">()</span> <span class=\"p\">{}</span>\n</code></pre></div><p>像CommonJS的模块一样，ES6的模块就是导出API的文件。和CommonJS一样，在ES6模块中的声明作用范围就是声明所在的模块。这就代表在一个模块当中声明的变量，在另一个模块中是不可以见的，除非这些变量被声明的模块给导出（并且在其它想使用这些变量的模块中引入）。</p><p><b>默认导出</b></p><p>我们只需要将刚才的CommonJS的代码修改下，将 ‘<i>module.exports =‘</i>修改为 ‘<i>export default‘</i>。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"mi\">1</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kc\">NaN</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"s1\">&#39;foo&#39;</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bar&#39;</span> <span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">]</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">foo</span> <span class=\"p\">()</span> <span class=\"p\">{}</span>\n</code></pre></div><p>和CommonJS不同的是，ES6的<i>export</i>声明只能放在模块的最外层。即便是加载模块时会立即调用的方法也无法在里面使用<i>export</i>声明。大概这个限制可以让编译器更容易处理ES6的模块。同时这是一个非常好的限制，因为没有特别多的场景需要根据方法调用动态定义并导出API的。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">foo</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"s1\">&#39;bar&#39;</span> <span class=\"c1\">// SyntaxError\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n<span class=\"nx\">foo</span><span class=\"p\">()</span>\n</code></pre></div><p>当然这不是唯一可以导出API的方法，让我们继续学习。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><b>命名导出</b></p><p>在CommonJS中，我们没必要先给<i>module.exports</i>赋值一个空对象。我们只需要将我们要导出的内容当作属性赋值就好了。不管<i>module.exports</i>中存的是什么<i>，</i>它仍然会作为一个单一的导出。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">baz</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ponyfoo&#39;</span>\n</code></pre></div><p>我们在ES6的模块中使用命名导出语法来完成这个操作。相对于CommonJS在<i>module.exports</i>添加属性值，ES6中我们直接使用export来声明所有想导出的绑定。请注意下面的代码不能重构成，先声明变量再使用<i>export foo</i>的方式进行导出，这将会产生语法错误。我们可以再次看到，ES6的模块系统更倾限定如何导出模块API的方式来进行静态分析。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span>\n<span class=\"k\">export</span> <span class=\"kd\">var</span> <span class=\"nx\">baz</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ponyfoo&#39;</span>\n</code></pre></div><p>我们需要明确的是，我们导出的是绑定而不是单纯的一个值。</p><p><b>导出的是绑定而不是值</b></p><p>我们需要有个清晰的认知，ES6模块导出的是绑定，而不是值或者引用。这代表我们导出的<i>foo</i>变量是被绑定到模块中的<i>foo</i>变量，对它的值操作会影响模块中的foo变量。即便我们可以在加载后进行修改，但我强烈的建议，模块的接口被加载后，就不要在进行修改了。</p><p>如果我们有一个像下面<i>./a</i>的模块，导出的变量<i>foo</i>将会绑定到‘bar‘，但是在500ms后，这个值将会变为‘baz’。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;bar&#39;</span>\n<span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">)</span>\n</code></pre></div><p>除了“默认”导出和逐个导出，我们也可以直接列表导出。</p><p><b>列表导出</b></p><p>我们可以看下面的代码片段，ES6的模块可以让你使用<i>export lists</i>的方式，直接将顶级命名成员一次行导出。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ponyfoo&#39;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;baz&#39;</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"p\">,</span> <span class=\"nx\">bar</span> <span class=\"p\">}</span>\n</code></pre></div><p>我们还可以使用下面的代码，将我们要导出的绑定重新命名下。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span> <span class=\"nx\">as</span> <span class=\"nx\">ponyfoo</span> <span class=\"p\">}</span>\n</code></pre></div><p>同时我们也可以在列表导出中使用<i>as default</i>，将某个绑定作为默认导出，请看下面的代码</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span> <span class=\"nx\">as</span> <span class=\"k\">default</span><span class=\"p\">,</span> <span class=\"nx\">bar</span> <span class=\"p\">}</span>\n</code></pre></div><p>它会如同下面两条语句的效果</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">foo</span>\n<span class=\"k\">export</span> <span class=\"nx\">bar</span>\n</code></pre></div><p>当然这里只在模块文件最底部使用<i>export default</i>是可以给我们带来很多便利的。</p><h2><b>导出的最佳实践</b></h2><p>我们有了命名导出，列表导出和默认导出等一系列导出方法。导出操作给我们带了一些困惑，并且在绝大部分实践，我都建议读者在模块文件的底部使用<i>export default</i>。当然呢读者可以将自己的API对象称为<i>api</i>或者模块自身的名字<i>。</i></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">api</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">baz</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ponyfoo&#39;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">api</span>\n</code></pre></div><p>让我解释下我强力建议使用<i>export default</i></p><p>首先，被导出的模块接口是可以立刻使用的。我们应当将这些导出放在一起，而不是散落到模块文件中，这样我们只需要滚动鼠标到模块文件的最底端，可以一目了然。在一个约定的地方放置我们所有的api，可以让其它人更容易看到我们的模块导出了什么方法和属性。</p><p>其次，在任何模块中不要引起混淆，不要在一个模块中混合使用默认导出，命名导出和列表导出。最好的方案就是，在所有的地方都使用默认导出（<i>export default</i>）。</p><p>再次，保持一致。在CommonJS中，一个模块值默认只导出一方法。除非我们在列表导出中使用<i>as default</i>进行修饰，否则是无法在使用命名导出时，将会导出的是包含方法的对象。<i>export default</i>是更通用的方法，因为它只准许我们导出一个东西。</p><p>最后，选择这样做，可以大大的降低我们之前说的迷惑感，在模块文件最后使用<i>export default</i>可以让模块的使用者在使用<i>import</i>时非常清晰的知道模块导出了什么API，他们要引入哪些方法。并且我们习惯了在模块文件末尾使用<i>export default</i>来导出API，我们会发现ES6的模块体系是多么的容易上手。</p><p>好了，我们基本上说完了<i>export</i>，让我们继续深入，来了解下<i>import</i>吧。</p><h2><b>import</b></h2><p><i>import</i>的能力正好和<i>export</i>相反，<i>import</i>从一个模块中加载另外一个模块，这是它首要的任务也是它最重要的任务。加载模块的方式是依赖具体实现的，在当前还没有浏览器实现模块加载（译者注：这里指的是作者在写博客的时候，现在主浏览器已经支持了模块加载）。当前，我们可以完全按照ES6规范所说的方案来编写模块代码，是因为有些聪明的人想到了让浏览器能支持模块加载的方法。像Babel这种翻译器，可以在CommonJS这种模块系统的帮助下，将所有的模块关联起来。所以，我们可以猜测，Babel支持的<i>import</i>语义将和CommonJS中的<i>require</i>语义相同。</p><p>目前，让我们先使用<i>lodash</i>做例子。下面的语句非常轻松的将Lodash加载到我们的模块中。它虽然没有创建任何变量，但是这里<b>会执行所有<i>loadsh</i>中最外层的代码</b>。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>在我们深入学习<i>import</i>之前，让我们记住<i>import</i>和<i>export</i>具有相同的性质，他们只能在模块的最外层使用的这个事实。这可以帮助编译器更好的实现模块功能，同样也可以帮助代码分析器分析我们的代码库。</p><p><b>引入默认导出</b></p><p>在CommonJS中，如果我们打算导入什么，我们将使用<i>require</i>语句。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">var</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p>在ES6，当我们导入默认的导出，我们需要为它选一个名字。这个语法和声明一个变量略有不同，因为我们正在导入一个绑定，同样这么做也是为了对静态分析工具友好。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">_</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>当然我们也可以引入命名导出，并给它们个别名。</p><p><b>引入命名导出</b></p><p>此处的语法和我们在声明默认导出时很像，我们只需要在我们需要的方法外面加上大括号就可以了。这个语法和ES6的<a href=\"https://link.zhihu.com/?target=https%3A//ponyfoo.com/articles/es6-destructuring-in-depth\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解构语法</a> 非常像，但是它们还是不同的。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">map</span><span class=\"p\">,</span> <span class=\"nx\">reduce</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>另外它和解构不同的是，我们可以别名来重命名我们的导入。我们可以使用混合使用别名和非别名方式进行导入。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">cloneDeep</span> <span class=\"nx\">as</span> <span class=\"nx\">clone</span><span class=\"p\">,</span> <span class=\"nx\">map</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>我们可以也同时导入命名导出和默认导出，如果我们希望默认导出在大括号内，我们就需要使用<i>default</i>，当然你也可以给这个<i>default</i>一个别名。或者，我们将默认导入放在命名导入的大括号外。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"k\">default</span><span class=\"p\">,</span> <span class=\"nx\">map</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"k\">default</span> <span class=\"nx\">as</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"nx\">map</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n<span class=\"k\">import</span> <span class=\"nx\">_</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">map</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>最后让我们学习下<i>import *</i>这个语法。</p><p><b>引入所有</b></p><p>我们可以从一个模块中引入命名空间对象。它将代替引入命名导出或者默认导出，它引入所有的东西。请注意<i>import *</i>语法必须和别名同时使用。如果模块有默认的导出，它将会被放在<i>alias.default</i>当中。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">_</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span>\n</code></pre></div><p>好了，就是这么简单。</p><p>总结</p><p>通过借助CommonJS的模块系统和Babel编译器，我们现在就可以使用ES6的模块特性。更棒的是，我们完全可以在CommonJS和ES6的模块体系中互相操作。这代表着，我们可以使用<i>import</i>直接引入CommonJS编写的模块。</p><p>ES6模块体系非常棒，它是JavaScript所缺失的最重要的东西之一。我希望模块加载API已经稳定，并尽快能在浏览器中实现。这里我们可以看到从模块中export和import绑定，做到了简单易用，最小代价最大收益了。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>本篇文章有一些老，但是也充分的介绍了ES6的模块体系，让我们看到了现代前端的在EMACScript上作出的努力。同时，我们也知道了为什么除了import语句，还有一个import()函数。</p><p>翻译水平有限，希望多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "ECMAScript 2015", 
                    "tagLink": "https://api.zhihu.com/topics/19651015"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68218860", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 9, 
            "title": "使用React的HOC来完成模块的异步加载", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//medium.com/front-end-weekly/loading-components-asynchronously-in-react-app-with-an-hoc-61ca27c4fda7\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">原文地址</a><p>在单页面应用的时代，你可以使用React来完成几乎所有的Web应用甚至大型的Web引用。你甚至可以使用React开发一个Facebook。</p><p>当前正如你所知，<b>Webpack</b>完成所有的魔法，它将会将你所有的代码放到<b>bundle.js</b>这个文件中，供浏览器使用。这个文件将包含所有组件和所有的依赖。因此，越是庞大的应用，这个文件将会越大。当然，大文件会耗费更多的时间去下载。因此首屏幕加载会非常慢，但是事实上，很多组件都不会出现在用户所浏览的那部分页面上。</p><p>最好的实践方案是将这个单一的<b>bundle.js</b>拆分成多个文件，并按需要进行加载。因此，那些不被用户所浏览的页面所包含的的组件，将不会被加载。</p><p>为了实现按需加载，是有很多的解决方案的。这里我将分享如何使用<b>HOC</b>来完成这件事情。</p><p><b>什么是HOC？</b></p><blockquote>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</blockquote><p>我们可以想象到HOC就是在你的组件外进行一次封装，它会在你的组件创建时注入一些公共状态或者修改一些组件行为。一般一个HOC就是一个非常简单的函数，接收一个组件并返回另一个组件。然后你就能把HOC当成一个非常简单的组件在JSX中应用。我们可以在<a href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/higher-order-components.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高阶组件文档</a> 中详细了解高阶组件。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-252ef7e088435772b4195a101da872fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-252ef7e088435772b4195a101da872fb_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;300&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-252ef7e088435772b4195a101da872fb_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-252ef7e088435772b4195a101da872fb_b.jpg\"/></figure><p>所以，我们要做的就是定义一个HOC，并且在所有需要进行异步加载的组件上应用。</p><p><b>异步组件的HOC</b></p><p>让我们先创建<b>asyncComponent.js</b>这样一个文件来编写我们的HOC代码。同时我比较倾向在工程内建立一个叫“hoc”的目录来存放所有的高阶组件。</p><p>让我们看看它的代码吧：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//hoc/asyncComponent.js\n</span><span class=\"c1\"></span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">Component</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">asyncComponent</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">importComponent</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">class</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n        <span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"nx\">component</span><span class=\"o\">:</span> <span class=\"kc\">null</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">componentDidMount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">importComponent</span><span class=\"p\">()</span>\n                <span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">cmp</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n                    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"nx\">component</span><span class=\"o\">:</span> <span class=\"nx\">cmp</span><span class=\"p\">.</span><span class=\"k\">default</span><span class=\"p\">});</span>\n                <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">const</span> <span class=\"nx\">C</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">component</span><span class=\"p\">;</span>\n            <span class=\"k\">return</span> <span class=\"nx\">C</span> <span class=\"o\">?</span> <span class=\"o\">&lt;</span><span class=\"nx\">C</span> <span class=\"p\">{...</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">}</span><span class=\"o\">/&gt;</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">asyncComponent</span><span class=\"p\">;</span>\n</code></pre></div><p>如你所见，它就是返回一个函数，这个函数接收另外一个函数为参数并返回一个基类是<b>React Component</b>的匿名类。简单说我们的<i>asyncComponent</i>是一个返回组件的函数。</p><p>我们可以看出<b>importComponent</b>是一个函数，它简单的返回我们需要引入的组件，它的代码会像下面这个样子：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">impFn</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s1\">&#39;./components/Card&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>每次<b>importComponent</b>函数被调用的时候，React都会尝试引入这个组件，它将会自动加载一个包含该组件的<b>chunk.js</b>。</p><p><b>使用asyncComponent</b></p><p>让我们来看看，我们该如何使用这个组件和当我们使用该组件时会发生什么。我们的例子中将在一个函数组件中使用这个高阶组件。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//components/Container.js\n</span><span class=\"c1\"></span>\n<span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">asyncComponent</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../../hoc/asyncComponent&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">AsyncButton</span> <span class=\"o\">=</span> <span class=\"nx\">asyncComponent</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s1\">&#39;../Button&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"k\">const</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Here</span> <span class=\"nx\">goes</span> <span class=\"nx\">an</span> <span class=\"kr\">async</span> <span class=\"nx\">loaded</span> <span class=\"nx\">button</span> <span class=\"nx\">component</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">AsyncButton</span><span class=\"o\">/&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">container</span><span class=\"p\">;</span>\n</code></pre></div><p>在这里，我们定义了一个<b>AsyncButton</b>，而非在DOM中直接中&lt;Button/&gt;组件。我们已经知道我们的<b>asyncComponent</b>是如何定义的，我们也可以猜到<b>AsyncButton</b>将被作为React的组件类型来使用。但是，当这个组件被添加DOM的时候，会发生什么呢？我们就需要到<b>asyncComponent</b>中寻找答案。</p><p>很显然，当<b>AsyncButton</b>被挂载到DOM时（参考<i>componentDidMount</i>），它会调用我们的<b>importComponent</b>函数。在这个场景下，它会返回一个<b>Button</b>组件。在import操作完成前，这个地方的DOM将是空的。当缺失的组件完成了下载，它将会作为<b>AsyncButton</b>组件状态添加到<b>AsyncButton</b>组件中，从而触发重新渲染。现在，我们的异步组件将会传递props并渲染Button组件。</p><p>好了，我们已经让我们的Button组件在真正被需要使用的时候才被下载和渲染。</p><p><b>异步组件配合路由使用</b></p><p>当我们的应用拥有很多容器组件（例如页面），那就很有必要一开始只加载首先被访问页面，而剩下的页面则按需加载。我们的<b>asyncComponent</b>可以很好的完成这件事，你只需像我们异步加载Button组件那样去就可以了。</p><p>这里我们来做个简单的例子。假设我们所有的路由被分拆到不同的文件中，在某个路由文件中只有两个简单的路由。Home页面和用户Profile页面，其中Home页面是首屏页面，而用户Profile不一定会被访问。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nx\">Component</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Route</span><span class=\"p\">,</span> <span class=\"nx\">Switch</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-router-dom&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">HomePage</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./containers/HomePage&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">AsyncProfilePage</span>    <span class=\"o\">=</span> <span class=\"nx\">asyncComponent</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"s1\">&#39;./containers/ProfilePage&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Routes</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">Switch</span><span class=\"o\">&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">exact</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/&#39;</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">HomePage</span><span class=\"p\">}</span><span class=\"o\">/&gt;</span>\n                <span class=\"o\">&lt;</span><span class=\"nx\">Route</span> <span class=\"nx\">exact</span> <span class=\"nx\">path</span><span class=\"o\">=</span><span class=\"s1\">&#39;/profile&#39;</span> <span class=\"nx\">component</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">AsyncProfilePage</span><span class=\"p\">}</span><span class=\"o\">/&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"err\">/Switch&gt;</span>\n        <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">Routes</span><span class=\"p\">;</span>\n</code></pre></div><p>因此用户的Profile页面，将在被访问的时候加载。</p><p>希望你能从这篇博文中学到一些好玩的东西，并且让我们开心的编码吧。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>在非SPA的时代，也有很多异步加载JS文件的方案，例如require.js，但是这些都要使用一些小技巧（修改DOM，增加script标签等）。而随着ECMAScript 6的出现，浏览器正全力的将ES6语法和特性直接在浏览器内实现。而import()函数也是ES的modules规范（<a href=\"https://link.zhihu.com/?target=https%3A//developers.google.com/web/updates/2017/11/dynamic-import\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">动态import</a>）的一部分，这大大的简化了浏览器动态加载JS的难度。</p><p>React对大型项目也提出了自己<a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/code-splitting.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">代码分割方案</a> 。这篇文章只是展示下异步加载较为浅显的原理。</p><p>翻译水平有限，希望多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "ECMAScript", 
                    "tagLink": "https://api.zhihu.com/topics/19600610"
                }
            ], 
            "comments": [
                {
                    "userName": "缕缕阳光", 
                    "userLink": "https://www.zhihu.com/people/0f0240d96b8025bb6ffb8701d838d6f6", 
                    "content": "<p>可以参考dva的dynamic函数</p><a class=\"comment_sticker\" href=\"https://pic3.zhimg.com/v2-cb8443f07a41298e45191cef11b90fd2.gif\" data-width=\"\" data-height=\"\">[干杯]</a>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "antd中我觉的最好的组件就是dva", 
                            "likes": 0, 
                            "replyToAuthor": "缕缕阳光"
                        }, 
                        {
                            "userName": "缕缕阳光", 
                            "userLink": "https://www.zhihu.com/people/0f0240d96b8025bb6ffb8701d838d6f6", 
                            "content": "antd 和 dva没啥关系吧[飙泪笑]", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/67976595", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 11, 
            "title": "ReasonReact:使用ReasonML让前端更强大", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//blog.theporter.in/reason-react-component-29fbffd784d6\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">原文地址</a><p>“三思而后行“ 是一个在程序员间非常流行的言语。在这句话的主体思想是，高效的完成工作。并且这句话可以说是人生中的真理。</p><p>在<a href=\"https://link.zhihu.com/?target=https%3A//porter.in/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Porter</a>  ，我们坚持使用最新，最有影响力且最适合我们的技术，来保证我们产品在其生命周期内可靠，好用且高效。这让我们的用户价值最大化。同时，这还促进我们的工程师团队，不断提升自身的技术实力，让我们的工程师的团队走在了技术的前沿上。</p><p>在前端团队中使用ReasonML这个想法，是源自于移动团队已经成功的将<a href=\"https://link.zhihu.com/?target=https%3A//github.com/uber/RIBs\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RIBs</a>这个模块化其极易扩展的移动框架成功应用到产品中了。为了让前端团队和整个技术团队完成技术架构理念统一，我们需要使用一个带有静态类型的语言。因此JavaScript就出局了。Typescript，可以说是一个非常合理的选择，但是ReasonML做的更好。ReasonML可以说是以OCaml社区为后援，完全为了使用React而开发的语言。事实上，<a href=\"https://link.zhihu.com/?target=https%3A//twitter.com/jordwalke\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReaonML之父</a> 也是 <a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReactJS</a> 之父，并且ReasonML的原型并非用OCaml开发的，而是用同为ML系语言的的SML开发的。</p><p>For demonstration purpose, we create a simple application which <i>fetches a list of posts and displays them as a list.</i> Please find a general overview of a typical reason-react application below:-</p><p><a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Reason-React</a> 框架背后的语言ReasonML是非常容易上手的计算机语言。它已经具有非常不错的javascript体系的互操作性，同时通过<a href=\"https://link.zhihu.com/?target=https%3A//discordapp.com/invite/reasonml\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Discord</a> 我们可以得到全球化的社区支持。</p><p>在文章中，我们将探索如何使用<b><a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Reason-React</a></b> 来高效的构建一个现代化的web应用。Reason-React提供了安全且简单的方法使用ReasonML去创建React应用。我建议读者先对React有一个基本的了解，从而能更好的理解这篇博文。</p><p>作为例子，我们创建一个非常简单的应用，这个应用将获取博客列表并将它们显示出来。我们将创建一个像下面列子中的Reason-React应用。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">module</span> <span class=\"o\">&lt;</span><span class=\"nc\">Module</span> <span class=\"nc\">Name</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"n\">action</span> <span class=\"o\">=</span> \n   <span class=\"o\">|</span> <span class=\"o\">&lt;</span><span class=\"n\">use</span> <span class=\"n\">case</span> <span class=\"n\">1</span><span class=\"o\">&gt;</span>\n   <span class=\"o\">|</span> <span class=\"o\">&lt;</span><span class=\"n\">use</span> <span class=\"n\">case</span> <span class=\"n\">2</span><span class=\"o\">&gt;</span>\n\n  <span class=\"k\">type</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"o\">&lt;</span><span class=\"n\">a</span> <span class=\"n\">reason</span> <span class=\"n\">record</span> <span class=\"k\">type</span> <span class=\"n\">defining</span> <span class=\"n\">the</span> <span class=\"n\">application</span> <span class=\"n\">state</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">component</span> <span class=\"o\">=</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">reducerComponent</span><span class=\"o\">(&lt;</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">&gt;);</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">make</span> <span class=\"o\">=</span> <span class=\"o\">(_</span><span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span><span class=\"n\">component</span><span class=\"o\">,</span>\n    <span class=\"n\">initialState</span><span class=\"o\">:</span> <span class=\"bp\">()</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n     <span class=\"o\">&lt;</span><span class=\"n\">initial</span> <span class=\"k\">value</span> <span class=\"k\">of</span> <span class=\"n\">application</span> <span class=\"n\">state</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">didMount</span><span class=\"o\">:</span> <span class=\"n\">self</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"o\">&lt;</span><span class=\"n\">business</span> <span class=\"n\">logic</span> <span class=\"k\">to</span> <span class=\"n\">be</span> <span class=\"n\">implemented</span> <span class=\"n\">just</span> <span class=\"n\">after</span> <span class=\"n\">the</span> <span class=\"n\">component</span> <span class=\"n\">is</span> <span class=\"n\">mounted</span> <span class=\"n\">on</span> <span class=\"nc\">DOM</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">reducer</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"o\">_</span><span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"o\">|</span> <span class=\"o\">&lt;</span><span class=\"n\">use</span> <span class=\"n\">case</span> <span class=\"n\">1</span> <span class=\"n\">implementation</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">|</span> <span class=\"o\">&lt;</span><span class=\"n\">use</span> <span class=\"n\">case</span> <span class=\"n\">2</span> <span class=\"n\">implementation</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">},</span>  \n    <span class=\"n\">render</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">state</span><span class=\"o\">})</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n     <span class=\"o\">&lt;</span><span class=\"nc\">To</span> <span class=\"n\">be</span> <span class=\"n\">rendered</span> <span class=\"n\">on</span> <span class=\"nc\">DOM</span> <span class=\"n\">according</span> <span class=\"k\">to</span> <span class=\"n\">application</span> <span class=\"n\">state</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>好了，现在我们要一步一步的去创建应用了。</p><p><b>组件创建</b>： 第一步我们要创建一个ReasonReact的组件。我们将使用<i>ReasonReact.reducerComponent</i>这个API去创建一个和React状态组件相似的ReasonReact状态组件。</p><p>这个API将会创建一个Reason的<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/docs/en/record%23docsNav\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">record</a> ，其中包含了<i>didMount</i>，<i>state</i>，<i>initialState</i>，<i>render</i>等可被我们重写的成员。这个组件record将是我们<i>make</i>函数（下面的代码例子）的返回值。在这个场景下，<i>make</i>函数将在ReasonReact创建元素时被调用。剩下的，我们就无需担心了，剩下的时间内，我们只需要使用ReasonReact的<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/docs/fr/jsx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JSX</a> 来编写这个组件就好了。</p><div class=\"highlight\"><pre><code class=\"language-text\">let component = ReasonReact.reducerComponent(&#34;PostsComponent&#34;);\n\nlet make = (_children) =&gt; {\n    ...component,\n    render: () {\n    }\n}</code></pre></div><p><b>Props</b>:  这个组件之接收默认的_children作为prop<i>。</i>而下划线（_）是用来告诉Reason的编译器，在这个函数中变量children并未真正的被使用。</p><p><b>State</b>: 好了，我们要定义应用的状态了。应用的state包含了成员posts，它的类型是loadable，该成员将存储我们加载的博文。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n  <span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"n\">loadable</span><span class=\"o\">(</span><span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span>\n<span class=\"o\">}</span></code></pre></div><p>loadable 类型是一个<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/docs/en/variant%23docsNav\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">variant</a>。Variant类型是一种为了特定用户需求的数据类型聚合。举例来说，这里面的loadable就是用来追踪应用加载，就绪等状态的。并且在就绪状态中，它将存储从API获取的数据到varint的payload中。</p><p>loadable类型的定义如下</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">module</span> <span class=\"nc\">Loadable</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">type</span> <span class=\"n\">loadable</span><span class=\"o\">(</span><span class=\"k\">&#39;</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">=</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Init</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Loading</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"k\">&#39;</span><span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">}</span></code></pre></div><p>这里 `t 在ReasonML中代表着其它语言的范型参数。当前这个场景， `t 的值应当是Posts.posts。</p><p>你可以看到，通过组合使用ReasonML的variants和范型，loadable具备了在所有的ReasonReact应用中定义状态的能力。</p><p><b>Initial State</b>:  我们可以将组件的状态中posts域初始化为<i>Init，</i>它是loadable这个variant的一个可能值。在组件被挂载到DOM上时，将设置这个值到组件的状态中。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"n\">initialState</span><span class=\"o\">:</span> <span class=\"bp\">()</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Init</span>\n<span class=\"o\">},</span></code></pre></div><p><b>Actions</b>:</p><p> ReaonReact的<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/docs/en/state-actions-reducer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a> 中对动作是这样定义的</p><blockquote>这是一个 variant 类型，它描述了所有可能的 state 的变化的方式</blockquote><p>我们将定义下面这连个actions来触发我们的状态更新</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"n\">action</span> <span class=\"o\">=</span>\n  <span class=\"o\">|</span> <span class=\"nc\">LoadData</span>\n  <span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span></code></pre></div><p><b>DidMount: </b></p><p>这是一个React生命周期函数，它在应用的生命周期内只调用一次。它会在组件第一次渲染到DOM上之后调用。在这里，非常适合触发LoadData的action。正如我们前面所讨论的，调用Action会让reducer根据用户当前状态<i>Loadable.Init</i>变更到<i>Loadable.Loading</i> 同时调用API来加载博文。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"n\">didMount</span><span class=\"o\">:</span> <span class=\"n\">self</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">LoadData</span><span class=\"o\">)</span>\n<span class=\"o\">},</span></code></pre></div><p><b>Reducer:</b></p><p>ReasonReact的<a href=\"https://link.zhihu.com/?target=https%3A//reasonml.github.io/reason-react/docs/en/state-actions-reducer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a> 是这样定义reducer的</p><blockquote>ReasonReact有状态组件和ReactJS中的有状态组件类似，只是多了原生的&#34;reducer&#34;的概念(like Redux)。 <br/>如果你不了解Reducer，暂且将它理解为一个状态管理系统。<br/><br/>Reducer模式会匹配所有可能的Action，从而根据Action的结果更新State。</blockquote><p>目前，根据前面我们定义的Actions，我们在这里将会拥有两个Reducer。</p><ol><li><i>LoadData</i>：它会更新State到<i>Loadable. Loading</i>并发起有副作用的API调用，去获取数据。因为存在副作用，我们需要使用<i>ReasonReact.UpdateWithSideEffects</i>这个API去处理。当这个API调用成功了，它会返回一个JavaScript的Promise，在这里我们将触发<i>OnLoadedData</i>这个Action。并且这个Action的payload是API的返回值。</li></ol><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"nc\">LoadData</span> <span class=\"o\">=&gt;</span>\n            <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">UpdateWithSideEffects</span><span class=\"o\">(</span>\n            <span class=\"nc\">Loading</span><span class=\"o\">,</span>\n              <span class=\"o\">(</span>\n                <span class=\"n\">self</span> <span class=\"o\">=&gt;</span>\n                <span class=\"nn\">Js</span><span class=\"p\">.</span><span class=\"nn\">Promise</span><span class=\"p\">.</span><span class=\"o\">(</span>\n                  <span class=\"nn\">Network</span><span class=\"p\">.</span><span class=\"n\">fetchPosts</span><span class=\"bp\">()</span>\n                  <span class=\"o\">|&gt;</span> <span class=\"n\">then_</span><span class=\"o\">((</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">resolve</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">))))</span>\n                  <span class=\"o\">|&gt;</span> <span class=\"n\">ignore</span>\n                <span class=\"o\">)</span>\n              <span class=\"o\">)</span>\n            <span class=\"o\">)</span></code></pre></div><p>2. <i>OnLoadedData</i>:  他会将应用的状态更新为L<i>oadable.Success。</i>因为这次我们的更新并没有副作用，我们可以使用<i>ReasonReact.Update</i>这个API完成相应的工作。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">Update</span><span class=\"o\">(</span>\n  <span class=\"o\">{</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)})</span></code></pre></div><p><b>Render</b>:  我们终于可以绘制界面了。在这里，所有ReasonML中独有的特性，如variants，模式匹配和静态类型等都得到应用，我们可以使用这些特性构建小巧且强大的ReasonReact组件。在这里，我们可以使用模式匹配来处理state中的posts域，为每一个可能值编写对应的JSX代码。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"n\">render</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">state</span><span class=\"o\">})</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n  <span class=\"n\">switch</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Init</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Init&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Loading</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Loading&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">|</span> <span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nc\">PostsViewComponent</span> <span class=\"n\">posts</span> <span class=\"o\">/&gt;</span>\n<span class=\"o\">}</span></code></pre></div><p>PostsViewComponent ( as shown below) is a stateless component where  actual rendering of the posts happen. Notice, as contrary to  PostsComponent which is a stateful component, we use <i>ReasonReact.statelessComponent</i> API for creating PostsViewComponent.</p><p>PostsViewComponent（下面所示的代码）真正执行博文的渲染任务，并且它是一个无状态的组件。和PostsComponent这个有状态组件不同，我们需要使用<i>ReasonReact.statelessComponent</i>这个API来创建PostsViewComponent。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">module</span> <span class=\"nc\">PostsViewComponent</span> <span class=\"o\">{</span>\n  <span class=\"k\">let</span> <span class=\"n\">component</span> <span class=\"o\">=</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">statelessComponent</span><span class=\"o\">(</span><span class=\"s2\">&#34;PostsViewComponent&#34;</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">make</span> <span class=\"o\">=</span> <span class=\"o\">(~</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">,</span> <span class=\"o\">_</span><span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span><span class=\"n\">component</span><span class=\"o\">,</span>\n    <span class=\"n\">render</span><span class=\"o\">:</span> <span class=\"o\">(_</span><span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"o\">&lt;</span><span class=\"n\">li</span><span class=\"o\">&gt;(</span>\n          <span class=\"n\">posts</span>\n          <span class=\"o\">|&gt;</span> <span class=\"nn\">List</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"o\">((</span><span class=\"n\">post</span><span class=\"o\">:</span> <span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">post</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n            <span class=\"o\">&lt;</span><span class=\"n\">ul</span> <span class=\"n\">key</span><span class=\"o\">=(</span><span class=\"n\">string_of_int</span><span class=\"o\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">))&gt;</span>\n              <span class=\"o\">&lt;</span><span class=\"n\">h1</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"o\">))&lt;/</span><span class=\"n\">h1</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;/</span><span class=\"n\">ul</span><span class=\"o\">&gt;</span>\n          <span class=\"o\">})</span>\n          <span class=\"o\">|&gt;</span> <span class=\"nn\">Array</span><span class=\"p\">.</span><span class=\"n\">of_list</span>\n          <span class=\"o\">|&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">array</span>\n        <span class=\"o\">)</span>\n      <span class=\"o\">&lt;/</span><span class=\"n\">li</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>现在我们已经成功的创建了一个ReasonReact应用，它能获取博文并显示出来。</p><p>这里是完整的代码。</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">module</span> <span class=\"nc\">PostsComponent</span> <span class=\"o\">{</span>\n  <span class=\"k\">type</span> <span class=\"n\">action</span> <span class=\"o\">=</span> \n    <span class=\"o\">|</span> <span class=\"nc\">LoadData</span>\n    <span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span>\n\n  <span class=\"k\">type</span> <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n    <span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"n\">loadable</span><span class=\"o\">(</span><span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">component</span> <span class=\"o\">=</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">reducerComponent</span><span class=\"o\">(</span><span class=\"s2\">&#34;PostsComponent&#34;</span><span class=\"o\">);</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">make</span> <span class=\"o\">=</span> <span class=\"o\">(_</span><span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"o\">...</span><span class=\"n\">component</span><span class=\"o\">,</span>\n    <span class=\"n\">initialState</span><span class=\"o\">:</span> <span class=\"bp\">()</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Init</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">didMount</span><span class=\"o\">:</span> <span class=\"n\">self</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">LoadData</span><span class=\"o\">)</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">reducer</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">,</span> <span class=\"o\">_</span><span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">switch</span><span class=\"o\">(</span><span class=\"n\">action</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">|</span> <span class=\"nc\">LoadData</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">UpdateWithSideEffects</span><span class=\"o\">(</span>\n            <span class=\"o\">{</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Loading</span><span class=\"o\">},</span>\n            <span class=\"n\">self</span> <span class=\"o\">=&gt;</span> \n              <span class=\"nn\">Js</span><span class=\"p\">.</span><span class=\"nn\">Promise</span><span class=\"p\">.</span><span class=\"o\">(</span>\n                <span class=\"n\">fetchPosts</span><span class=\"bp\">()</span>\n                <span class=\"o\">|&gt;</span> <span class=\"n\">then_</span><span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">=&gt;</span> <span class=\"n\">resolve</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">))))</span>\n                <span class=\"o\">|&gt;</span> <span class=\"n\">ignore</span>\n              <span class=\"o\">)</span> \n          <span class=\"o\">)</span>\n        <span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">Update</span><span class=\"o\">({</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)})</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">},</span>  \n    <span class=\"n\">render</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">state</span><span class=\"o\">})</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">switch</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Init</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Init&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Loading</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Loading&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nc\">PostsViewComponent</span> <span class=\"n\">posts</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p><b>Handing Errors</b>:<br/>如果你仔细观察上面的代码，你可能会发现，我们假设我们获取数据的API永远都不会失败。但是我们都知道，在现实的世界中，这将是一个巨大的风险，因为存在各种因素可以导致API失败。不过我们可以通过使用Error非常容易的处理各种异常。让我们看看在我们的ReasonReact应用中添加错误处理是否容易。</p><p>让我们在Loadable这个variant上，增加新的类型Error</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">module</span> <span class=\"nc\">Loadable</span> <span class=\"o\">=</span> <span class=\"o\">{</span>\n\n  <span class=\"k\">type</span> <span class=\"n\">loadable</span><span class=\"o\">(</span><span class=\"k\">&#39;</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">=</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Init</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Loading</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"k\">&#39;</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n    <span class=\"o\">|</span>  <span class=\"nc\">Error</span>\n<span class=\"o\">}</span></code></pre></div><p>当我们再次编译我们的ReasonReact应用，编译器会丢出一些警告给我们。</p><div class=\"highlight\"><pre><code class=\"language-text\">Warning number 8\n  /Users/prateek/Dev/myGit/loader-component/src/PostsComponent.re 58:26-64:5\n  \n  56 │       }\n  57 │     },  \n  58 │     render: ({state}) =&gt; {\n  59 │       switch(state.posts) {\n   . │ ...\n  63 │       }\n  64 │     }\n  65 │   }\n  66 │ }\n  \n  You forgot to handle a possible value here, for example: \nError</code></pre></div><p>这里提示我们，并没有提供状态是<i>Loadable.Error</i>的界面渲染处理。所以，我们需要添加相应的渲染代码</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"n\">render</span><span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">state</span><span class=\"o\">})</span> <span class=\"o\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">switch</span><span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Init</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Init&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Loading</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Loading&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">posts</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nc\">PostsViewComponent</span> <span class=\"n\">posts</span> <span class=\"o\">/&gt;</span>\n        <span class=\"o\">|</span> <span class=\"nc\">Error</span> <span class=\"o\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"n\">div</span><span class=\"o\">&gt;(</span><span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"n\">string</span><span class=\"o\">(</span><span class=\"s2\">&#34;Error...&#34;</span><span class=\"o\">))&lt;/</span><span class=\"n\">div</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span></code></pre></div><p>好了，我们还需要增加相应的Action和Reducer去处理<i>Loadable.Error</i>的状态转移。让我们添加一个新的Action吧</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"k\">type</span> <span class=\"n\">action</span> <span class=\"o\">=</span>\n    <span class=\"o\">|</span> <span class=\"nc\">LoadData</span>\n    <span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"nn\">Posts</span><span class=\"p\">.</span><span class=\"n\">posts</span><span class=\"o\">)</span>\n    <span class=\"o\">|</span> <span class=\"nc\">OnError</span></code></pre></div><p>当我们认为已经可以再次编译的时候，编译器又给出了我们一些警告</p><div class=\"highlight\"><pre><code class=\"language-text\">Warning number 8\n  /Users/prateek/Dev/myGit/loader-component/src/PostsComponent.re 44:34-58:5\n  \n  42 ┆   self.send(LoadData)\n  43 ┆ },\n  44 ┆ reducer: (action, _state) =&gt; {\n  45 ┆   switch(action) {\n   . ┆ ...\n  57 ┆   }\n  58 ┆ },  \n  59 ┆ render: ({state}) =&gt; {\n  60 ┆   switch(state.posts) {</code></pre></div><p>这次，编译器告诉我们，我们并没有提供相应的reducer去处理Error这个Action。即便我们忘记了定义Action对应的Reducer，但编译器是不会忘记的。这是不是很强大？好了，让我们把缺失的代码补上吧</p><div class=\"highlight\"><pre><code class=\"language-ocaml\"><span class=\"o\">|</span> <span class=\"nc\">LoadData</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">UpdateWithSideEffects</span><span class=\"o\">(</span>\n            <span class=\"o\">{</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Loading</span><span class=\"o\">},</span>\n            <span class=\"n\">self</span> <span class=\"o\">=&gt;</span> \n              <span class=\"nn\">Js</span><span class=\"p\">.</span><span class=\"nn\">Promise</span><span class=\"p\">.</span><span class=\"o\">(</span>\n                <span class=\"nn\">Network</span><span class=\"p\">.</span><span class=\"n\">fetchPosts</span><span class=\"bp\">()</span>\n                <span class=\"o\">|&gt;</span> <span class=\"n\">then_</span><span class=\"o\">(</span><span class=\"n\">result</span> <span class=\"o\">=&gt;</span> <span class=\"n\">resolve</span><span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"o\">(</span><span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">))))</span>\n                <span class=\"o\">|&gt;</span> <span class=\"n\">ignore</span>\n              <span class=\"o\">)</span> \n          <span class=\"o\">)</span>\n<span class=\"o\">|</span> <span class=\"nc\">OnLoadedData</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">Update</span><span class=\"o\">(</span>\n   <span class=\"o\">{</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Live</span><span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">)})</span>\n<span class=\"o\">|</span> <span class=\"nc\">OnError</span> <span class=\"o\">=&gt;</span> <span class=\"nn\">ReasonReact</span><span class=\"p\">.</span><span class=\"nc\">Update</span><span class=\"o\">({</span><span class=\"n\">posts</span><span class=\"o\">:</span> <span class=\"nn\">Loadable</span><span class=\"p\">.</span><span class=\"nc\">Error</span><span class=\"o\">})</span></code></pre></div><p>同时，我们需要增加触发<i>OnError</i>这个Action的代码。这些代码应当放到API失败处理的流程中，所以我们需要添加catch代码到API发生异常的地方，然后我们触发<i>OnError</i>。让我们完成这些吧</p><div class=\"highlight\"><pre><code class=\"language-text\">| LoadData =&gt; ReasonReact.UpdateWithSideEffects(\n            {posts: Loadable.Loading},\n            self =&gt; \n              Js.Promise.(\n                Network.fetchPosts()\n                |&gt; then_(result =&gt; resolve(self.send(OnLoadedData(result))))\n                |&gt; catch(_error =&gt; {\n                      resolve(self.send(OnError))\n                 })\n                |&gt; ignore\n              ) \n          )</code></pre></div><p>至此，我们完成了整个应用。你可以看到，新增用户场景是非常容易的添加到既有应用中的。并且通过ResaonML的静态类型安全体系，我们可以100%保障在添加新的用户场景时不会因类型问题而引入新的问题。</p><p><b>总结</b>：</p><p>ReasonML为我们带来了强大的ReasonReact，它结合了ReasonML和React生态的优点，可以帮助开发者开发具备可扩展且高容错的web应用。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>ReasonML，相对比较小众，但是在国内外的一些公司已经有人吃螃蟹了。在ReasonReact出现后，我在业余时间研究花费了一定时间去研究相关的东西，深切感受到能让机器来做的事情，尽量别让人来做。尤其在使用React+Redux时，大型项目经常会忘记配对，而ReasonML很好的帮助我们做了这个检查。</p><p>相比TypeScript来说，ReasonML完全是另一个体系，虽然它们都会被编译到Javascript上，非常适合闲不住的小伙伴去尝试下。</p><p>翻译水平有限，希望多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "Reason 语言", 
                    "tagLink": "https://api.zhihu.com/topics/20105060"
                }, 
                {
                    "tag": "前端架构", 
                    "tagLink": "https://api.zhihu.com/topics/19710481"
                }
            ], 
            "comments": [
                {
                    "userName": "鲨叔", 
                    "userLink": "https://www.zhihu.com/people/a26d68b4f9e1bfbe05732832679e66eb", 
                    "content": "我也挺看好ReasonML，但是国内是布道情况不太好。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "国内好像没啥公司在使用", 
                            "likes": 0, 
                            "replyToAuthor": "鲨叔"
                        }
                    ]
                }, 
                {
                    "userName": "刘子殊", 
                    "userLink": "https://www.zhihu.com/people/d61ff703b72722f139c3c64624ba0ec0", 
                    "content": "<p>锅内少数公司在使用 我本人了解到的不超过一手数 前端就是娱乐圈</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>娱乐其实挺好，我自己很多东西都打算用这玩意写了，玩玩也挺开心的。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "刘子殊"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/67901757", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 22, 
            "title": "使用Hooks代替Redux", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=https%3A//medium.com/better-programming/using-hooks-to-replace-redux-392f98ca61b7\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">原文地址</a><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p>作为一个从Vue转向React的开发者，我发现我自己为了做到简单的状态管理在Redux和各种模版上不断尝试。如果你想在React中使用Redux，你就必须安装和学习另外一个包React-Redux。当你完成这些，你需要一些异步的Actions是，你就得编写自己的Redux中间件或者安装Redux-Thunk包。</p><p>但是现在React中有了Hooks！Hooks是一个小而神奇的技术，它可以让你更容易使用基于Class的组件特性，如生命周期Hooks和函数组件中的状态管理。</p><p><b>useReducer</b>就是这些Hooks中的一员，正如官方文档所描述的：</p><div class=\"highlight\"><pre><code class=\"language-text\">它接收一个形如 (state, action) =&gt; newState 的 reducer，\n并返回当前的 state 以及与其配套的 dispatch 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。）</code></pre></div><p>所以我在想，在这里提及Redux也许是有原因的，也许我可以使用这个Hook像Redux那样完成状态集中管理。那么为什么不使用<b>useState</b> ? 它使用完全不同方式来完成相同的事情。React的文档中是这样描述<b>useState</b>，当我们调<b>用useState</b>时它会返回一个state和一个更新state的函数。</p><p>当我们在讨论状态集中管理时，我认为这里有一个十分重要的差异，让<b>useReducer</b>比<b>useState</b>更适合。当我们使用<b>useState</b>时，和state相关的业务逻辑将会被所有的需要更新该state的组件所包含。而使用<b>useReducer</b>时，我们可以将所有的业务逻辑集中在一个地方，这样让我们更容易维护，并且可以组件专注的实现自己的核心设计目标。同时，使用<b>useReducer</b>可以让我们像Flux，Redux，Vuex或者其它状态管理方案那样保持“调度action来完成状态更新“这种模式。</p><p>至此，我们已经有了一个好用的解决方案。但是怎么处理状态集中呢？为此我们要使用很久以前就在在React中存在的在所有组件中共享单一状态的解决方案：那就是Context。根据文档：</p><div class=\"highlight\"><pre><code class=\"language-text\">Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据。</code></pre></div><p><br/> 它是一种单向，共享且集中的状态，当它发生变化时所有的组件都会作出相应的变化。并且当前，我们可以使用useContext hook。我们似乎已经找到了所有最适合该任务的工具，让我们把他们整合起来。</p><p>我们将使用“无聊且万年不变的”计数器应用。我们将使用一个高阶组件（App组件）包装3个组件。其中一个只是为了显示计数器的值，另外两个分别用来修改计数器。请看下面的代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span><span class=\"p\">,</span> <span class=\"nx\">Fragment</span><span class=\"p\">,</span> <span class=\"nx\">useContext</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span> \n<span class=\"k\">const</span> <span class=\"nx\">Display</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Counter</span> <span class=\"nx\">value</span> <span class=\"o\">:</span> <span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">counter</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;;</span>\n<span class=\"k\">const</span> <span class=\"nx\">Increment</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>  \n  <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">addToCounter</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"nx\">Increment</span><span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n<span class=\"p\">);</span> \n<span class=\"k\">const</span> <span class=\"nx\">Decrement</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span>  \n  <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">addToCounter</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"nx\">Decrement</span><span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n<span class=\"p\">);</span> \n<span class=\"k\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>  \n  <span class=\"k\">const</span> <span class=\"p\">[</span><span class=\"nx\">counter</span><span class=\"p\">,</span> <span class=\"nx\">setCounter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>  \n  <span class=\"k\">const</span> <span class=\"nx\">addToCounter</span> <span class=\"o\">=</span> <span class=\"nx\">value</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">setCounter</span><span class=\"p\">(</span><span class=\"nx\">counter</span> <span class=\"o\">+</span> <span class=\"nx\">value</span><span class=\"p\">);</span>  \n  <span class=\"k\">return</span> <span class=\"p\">(</span>    \n    <span class=\"o\">&lt;</span><span class=\"nx\">Fragment</span><span class=\"o\">&gt;</span>      \n      <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Teste</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;      </span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Display</span> <span class=\"nx\">counter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">counter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>      \n      <span class=\"o\">&lt;</span><span class=\"nx\">Increment</span> <span class=\"nx\">addToCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">addToCounter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>      \n      <span class=\"o\">&lt;</span><span class=\"nx\">Decrement</span> <span class=\"nx\">addToCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">addToCounter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>    \n    <span class=\"o\">&lt;</span><span class=\"err\">/Fragment&gt;  </span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span> \n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s2\">&#34;#app&#34;</span><span class=\"p\">));</span>\n</code></pre></div><p>我为了更简单的给大家展示这个例子，我将所有的组件都包含在了一个文件中。但是在真正的开发时，我们应该将这个组件分别放置在不同的文件中。</p><p>我们当前的工作是将<b>App</b>组件中逐层传递的props替换掉，让整个应用更加函数化。</p><p>首先，我们要使用<b>useContext</b>来替换<b>Display</b>组件中的props：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">createContext</span><span class=\"p\">,</span> <span class=\"nx\">useContext</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">CounterContext</span> <span class=\"o\">=</span> <span class=\"nx\">createContext</span><span class=\"p\">({</span>\n  <span class=\"nx\">counter</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n<span class=\"p\">})</span>\n<span class=\"k\">const</span> <span class=\"nx\">Display</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"k\">const</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n <span class=\"k\">return</span>  <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">counter</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Increment</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">addToCounter</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"nx\">Increment</span><span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n<span class=\"k\">const</span> <span class=\"nx\">Decrement</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">addToCounter</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"nx\">Decrement</span><span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n<span class=\"k\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">addToCounter</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">CounterContext</span><span class=\"p\">.</span><span class=\"nx\">Provider</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Display</span> <span class=\"nx\">counter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">counter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Increment</span> <span class=\"nx\">addToCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">addToCounter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Decrement</span> <span class=\"nx\">addToCounter</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">addToCounter</span><span class=\"p\">}</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/CounterContext.Provider&gt;  </span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>但是当我们执行代码的时候，我们会发现我们并无法完成增减功能，因为<b>Context</b>并没有被修改。</p><p>此处，我们将使用<b>useReducer</b>。正如我前面所说的<b>useReducer</b>的功能是返回state和调度函数，这个调度函数将被我们用来调度actions去更新state。</p><p>收到hooks返回可以解构的含有两个完全独立值的数组，我们将在<b>Context</b>中共享实际的state和调度函数。</p><p>我们将编写reducer去代替<b>App</b>组件中的<b>addToCounter</b>方法。</p><p>最后，因为Hooks只能在组件中调用，我们需要在高阶组件中使用<b>useReducer</b>这个Hook，并将state和调度函数作为<b>Context</b>的值：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">createContext</span><span class=\"p\">,</span> <span class=\"nx\">useContext</span><span class=\"p\">,</span> <span class=\"nx\">useReducer</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">CounterContext</span> <span class=\"o\">=</span> <span class=\"nx\">createContext</span><span class=\"p\">()</span>\n<span class=\"k\">const</span> <span class=\"nx\">CounterContextProvider</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">initialState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">counter</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">case</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> \n          <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> \n          <span class=\"nx\">counter</span><span class=\"o\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">counter</span> <span class=\"o\">+</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">return</span> <span class=\"nx\">state</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"nx\">initialState</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">CounterContext</span><span class=\"p\">.</span><span class=\"nx\">Provider</span> <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>\n      <span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/CounterContext.Provider&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Display</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">state</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n <span class=\"k\">return</span>  <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">counter</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Increment</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">dispatch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">button</span> \n      <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dispatch</span><span class=\"p\">({</span> \n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"p\">,</span> \n        <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">})}</span><span class=\"o\">&gt;</span>\n      <span class=\"nx\">Increment</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Decrement</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">dispatch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">button</span> \n      <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dispatch</span><span class=\"p\">({</span> \n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"p\">,</span> \n        <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})}</span><span class=\"o\">&gt;</span>\n      <span class=\"nx\">Decrement</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">CounterContextProvider</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Display</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Increment</span>  <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Decrement</span>  <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/CounterContextProvider&gt;  </span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>可以看到，我们的例子又可以正常工作了。</p><p>但是，当我们碰到异步函数该怎么做呢？在设计的时候，我们都假设Reducers是纯函数，因此我们无法使用async/await语法或者等待一个Promise被回调并根据回到结果去更新状态。</p><p>因此我们需要一个类似redux-thunk的机制。我们需要为useReducer编写一个封装函数，去检查被调度的action的payload是否是Promise，如果payload是Promise，这个函数将会处理它并再次调度。因此我们需要修改CounterContextProvider组件，并实现我们的“中间件”。我们将实现一个在按钮点击后异步操作的计数器。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">createContext</span><span class=\"p\">,</span> <span class=\"nx\">useContext</span><span class=\"p\">,</span> <span class=\"nx\">useReducer</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDOM</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">CounterContext</span> <span class=\"o\">=</span> <span class=\"nx\">createContext</span><span class=\"p\">()</span>\n<span class=\"k\">const</span> <span class=\"nx\">CounterContextProvider</span> <span class=\"o\">=</span> <span class=\"nx\">props</span> <span class=\"p\">=&gt;{</span>\n \n  <span class=\"k\">const</span> <span class=\"nx\">initialState</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">counter</span><span class=\"o\">:</span> <span class=\"mi\">0</span>\n  <span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">reducer</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">case</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">counter</span><span class=\"o\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">counter</span> <span class=\"o\">+</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">default</span><span class=\"o\">:</span> <span class=\"k\">return</span> <span class=\"nx\">state</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"p\">[</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useReducer</span><span class=\"p\">(</span><span class=\"nx\">reducer</span><span class=\"p\">,</span> <span class=\"nx\">initialState</span><span class=\"p\">)</span>\n \n<span class=\"k\">const</span> <span class=\"nx\">isPromise</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">!!</span><span class=\"nx\">obj</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">obj</span> <span class=\"o\">===</span> <span class=\"s2\">&#34;object&#34;</span> <span class=\"o\">||</span> <span class=\"k\">typeof</span> <span class=\"nx\">obj</span> <span class=\"o\">===</span> <span class=\"s2\">&#34;function&#34;</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n    <span class=\"k\">typeof</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">then</span> <span class=\"o\">===</span> <span class=\"s2\">&#34;function&#34;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">middleware</span> <span class=\"o\">=</span> <span class=\"nx\">dispatch</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">action</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isPromise</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">payload</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">v</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"nx\">v</span> <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">CounterContext</span><span class=\"p\">.</span><span class=\"nx\">Provider</span> <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"nx\">state</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span> <span class=\"o\">:</span> <span class=\"nx\">middleware</span><span class=\"p\">(</span><span class=\"nx\">dispatch</span><span class=\"p\">)}}</span><span class=\"o\">&gt;</span>\n      <span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/CounterContext.Provider&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Display</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">state</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n <span class=\"k\">return</span>  <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">counter</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Increment</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">dispatch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n<span class=\"k\">const</span> <span class=\"nx\">asyncCounterInc</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">()</span>  <span class=\"p\">=&gt;</span>  <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">resolve</span><span class=\"p\">({</span> <span class=\"nx\">value</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n      <span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n  \n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">button</span> \n      <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"nx\">asyncCounterInc</span><span class=\"p\">()</span> <span class=\"p\">})}</span><span class=\"o\">&gt;</span>\n      <span class=\"nx\">Increment</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Decrement</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">dispatch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useContext</span><span class=\"p\">(</span><span class=\"nx\">CounterContext</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">button</span> \n      <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dispatch</span><span class=\"p\">({</span> <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ADD_TO_COUNTER&#39;</span><span class=\"p\">,</span> <span class=\"nx\">payload</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"p\">}})}</span><span class=\"o\">&gt;</span>\n      <span class=\"nx\">Decrement</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/button&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">CounterContextProvider</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Display</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Increment</span>  <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Decrement</span>  <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/CounterContextProvider&gt;  </span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">ReactDOM</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">App</span> <span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;root&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>One  last note: this example is not meant to be the powerhouse that Redux  is, nor a replacement for Redux on all projects. There are very real and  deliberate limitations. For a large project that requires strong  features, you should use Redux. If you have a smaller project or a team  of junior developers, maybe this example would fit.</p><p>大功告成！我们现在拥有了一个可以处理同步和异步的动作函数，并根据动作函数更新状态的集中状态管理器。</p><p>也许你会认为这个工程的代码太多了，并且这只是一个例子工程，而使用props则是更贴近实际项目的。当然，在这种项目中，并没有体现出这么做的必要性。但是当你的项目变得更加复杂并且不想安装和学习3个新包（redux，react-redux和redux-thunk）来管理你应用的状态时，这将是一个很好的关注点。</p><p>最后提醒下：</p><p>这个例子并不没有体现出Redux的强大指出，并且Hooks并不是银弹。使用Hooks，仍需仔细思考它的限制。对于大型项目，你仍应选择Redux，它提供更多的特性和扩展。如果你的团度和项目都很小，或者你只是想玩玩，那么Hooks是不错的尝试。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p>翻译后记：</p><p>入坑Reason ML，看到ReactReason直接绑定是新版本的React。Reason本身就是一个很函数化的语言，配合React Hooks感觉是非常舒爽的。但是在全局状态管理上，Redux和ReactReason整合并不让人舒服。因此才找到了这偏文章，去研究下如何只使用React的Hooks完成状态集中管理，同时看到Redux的官方文档称，React-Redux将在未来的版本中支持Hooks，那么就让这篇文章当作我们研究Hooks版本的React-Redux的参考吧。</p><p>翻译水平有限，希望多提出宝贵意见。</p>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "Redux", 
                    "tagLink": "https://api.zhihu.com/topics/20030680"
                }, 
                {
                    "tag": "Reason 语言", 
                    "tagLink": "https://api.zhihu.com/topics/20105060"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/28221167", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 2, 
            "title": "Erlang的RPC模块代码分析", 
            "content": "<a href=\"https://link.zhihu.com/?target=https%3A//www.ttalk.im/pages/118/RPC%2520%25E6%25A8%25A1%25E5%259D%2597%25E4%25BB%25A3%25E7%25A0%2581%25E5%2588%2586%25E6%259E%2590.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[Erlang]RPC 模块代码分析</a><h2><b>进程创建</b></h2><p>RPC模块本身是一个gen_server会随着kernel模块启动，也就是说，在Erlang/OTP启动后我们就免费获得了一个RPC进程。 RPC进程启动的时候，会在Erts中通过local注册一个名字rex的进程，这样没有经过修改的Erlang/OTP都会有这个名字在它的名字列表上。</p><h2><b>RPC调用逻辑</b></h2><p>不管是同步调用还是广播调用，在RPC模块中的调用都是依赖gen_server的相关方和erlang:send方法来完成。这样尽最大可能的重用代码，保证了整个OTP中对远程调用的表现的一致性。 并且RPC模块不单单可以调用远程节点的方法或进程，也可以调用本地节点的方法或进程，这样保证了整个RPC的系统位置透明性，并且RPC模块针对本地节点作了相关优化。</p><p>例如说call方法针对本地节点就采用了下面的方法：</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">local_call</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_atom</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">),</span> <span class=\"nb\">is_atom</span><span class=\"p\">(</span><span class=\"nv\">F</span><span class=\"p\">),</span> <span class=\"nb\">is_list</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\"></span><span class=\"ni\">case</span> <span class=\"k\">catch</span> <span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"nv\">M</span><span class=\"p\">,</span> <span class=\"nv\">F</span><span class=\"p\">,</span> <span class=\"nv\">A</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">&#39;EXIT&#39;</span><span class=\"p\">,_}</span> <span class=\"o\">=</span> <span class=\"nv\">V</span> <span class=\"p\">-</span><span class=\"err\">&gt; {</span><span class=\"ni\">badrpc</span><span class=\"p\">,</span> <span class=\"nv\">V</span><span class=\"p\">};</span>\n        <span class=\"nv\">Other</span> <span class=\"p\">-</span><span class=\"err\">&gt; O</span><span class=\"ni\">ther</span>\n<span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><h2><b>call和block_call方法</b></h2><p>这两个方法都是同步的调用，但是实现的细节非常不同，对rex进程的影响也是不同的。当然使用两个方法在并发执行的情况下，得到的结果是完全不同的。 不管是call也好，block_call也好，都会在执行阶段暂时的将被调用者进程的console输出重定向到调用者进程所在节点的group leader上。</p><h2><b>call方法</b></h2><p>在调用发起者一侧，RPC模块会立刻建立一个监控下的Erlang进程，并在该进程内通过gen_server:call方法来调用远程节点。</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">do_call</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">,</span> <span class=\"n\">infinity</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    </span><span class=\"ni\">rpc_check</span><span class=\"p\">(</span><span class=\"k\">catch</span> <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">call</span><span class=\"p\">({</span><span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span><span class=\"nv\">Node</span><span class=\"p\">},</span> <span class=\"nv\">Request</span><span class=\"p\">,</span> <span class=\"n\">infinity</span><span class=\"p\">));</span>\n<span class=\"nf\">do_call</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">,</span> <span class=\"nv\">Request</span><span class=\"p\">,</span> <span class=\"nv\">Timeout</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    T</span><span class=\"ni\">ag</span> <span class=\"o\">=</span> <span class=\"nf\">make_ref</span><span class=\"p\">(),</span>\n    <span class=\"p\">{</span><span class=\"nv\">Receiver</span><span class=\"p\">,</span><span class=\"nv\">Mref</span><span class=\"p\">}</span> <span class=\"o\">=</span>\n<span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">spawn_monitor</span><span class=\"p\">(</span>\n<span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">          </span><span class=\"ni\">process_flag</span><span class=\"p\">(</span><span class=\"n\">trap_exit</span><span class=\"p\">,</span> <span class=\"n\">true</span><span class=\"p\">),</span>\n          <span class=\"nv\">Result</span> <span class=\"o\">=</span> <span class=\"nn\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">call</span><span class=\"p\">({</span><span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span><span class=\"nv\">Node</span><span class=\"p\">},</span> <span class=\"nv\">Request</span><span class=\"p\">,</span> <span class=\"nv\">Timeout</span><span class=\"p\">),</span>\n          <span class=\"nb\">exit</span><span class=\"p\">({</span><span class=\"nf\">self</span><span class=\"p\">(),</span><span class=\"nv\">Tag</span><span class=\"p\">,</span><span class=\"nv\">Result</span><span class=\"p\">})</span>\n<span class=\"k\">end</span><span class=\"p\">),</span>\n<span class=\"k\">receive</span>\n    <span class=\"p\">{</span><span class=\"n\">&#39;DOWN&#39;</span><span class=\"p\">,</span><span class=\"nv\">Mref</span><span class=\"p\">,_,_,{</span><span class=\"nv\">Receiver</span><span class=\"p\">,</span><span class=\"nv\">Tag</span><span class=\"p\">,</span><span class=\"nv\">Result</span><span class=\"p\">}}</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">        </span><span class=\"ni\">rpc_check</span><span class=\"p\">(</span><span class=\"nv\">Result</span><span class=\"p\">);</span>\n    <span class=\"p\">{</span><span class=\"n\">&#39;DOWN&#39;</span><span class=\"p\">,</span><span class=\"nv\">Mref</span><span class=\"p\">,_,_,</span><span class=\"nv\">Reason</span><span class=\"p\">}</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">        </span><span class=\"ni\">rpc_check_t</span><span class=\"p\">({</span><span class=\"n\">&#39;EXIT&#39;</span><span class=\"p\">,</span><span class=\"nv\">Reason</span><span class=\"p\">})</span>\n<span class=\"k\">end</span><span class=\"p\">.</span>\n</code></pre></div><p>RPC模块会将超时或对方节点失去连接的情况处理为bad_rpc，让顶层逻辑发现并非业务本身引起的远程调用问题。</p><p>在被调用者一些，RPC模块也会立刻创建一个监控下的Erlang进程，并在该进程内处理调用者的call消息，同时会将相关信息保存在rex进程的进程上下文中。当新的进程完成了业务处理，就会把处理结果返回给被调用者节点的rex进程，然后再将结果返回给调用发起者。 我们可以仔细观察它的代码：</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">handle_call_call</span><span class=\"p\">(</span><span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">,</span> <span class=\"nv\">Gleader</span><span class=\"p\">,</span> <span class=\"nv\">To</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    R</span><span class=\"ni\">pcServer</span> <span class=\"o\">=</span> <span class=\"nf\">self</span><span class=\"p\">(),</span>\n<span class=\"c\">%% Spawn not to block the rpc server.\n</span><span class=\"c\"></span>    <span class=\"p\">{</span><span class=\"nv\">Caller</span><span class=\"p\">,_}</span> <span class=\"o\">=</span>\n<span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">spawn_monitor</span><span class=\"p\">(</span>\n<span class=\"k\">fun</span> <span class=\"p\">()</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">          </span><span class=\"ni\">set_group_leader</span><span class=\"p\">(</span><span class=\"nv\">Gleader</span><span class=\"p\">),</span>\n          <span class=\"nv\">Reply</span> <span class=\"o\">=</span> \n<span class=\"k\">case</span> <span class=\"k\">catch</span> <span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n              <span class=\"p\">{</span><span class=\"n\">&#39;EXIT&#39;</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">=</span> <span class=\"nv\">Exit</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">                  {</span><span class=\"ni\">badrpc</span><span class=\"p\">,</span> <span class=\"nv\">Exit</span><span class=\"p\">};</span>\n              <span class=\"nv\">Result</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">                  R</span><span class=\"ni\">esult</span>\n<span class=\"k\">end</span><span class=\"p\">,</span>\n          <span class=\"nv\">RpcServer</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"nf\">self</span><span class=\"p\">(),</span> <span class=\"p\">{</span><span class=\"n\">reply</span><span class=\"p\">,</span> <span class=\"nv\">Reply</span><span class=\"p\">}}</span>\n<span class=\"k\">end</span><span class=\"p\">),</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nn\">gb_trees</span><span class=\"p\">:</span><span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"nv\">Caller</span><span class=\"p\">,</span> <span class=\"nv\">To</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)}.</span>\n</code></pre></div><h2><b>block_call方法</b></h2><p>于call方法一样，在调用发起者一侧，RPC模块会立刻建立一个监控下的Erlang进程，并在该进程内通过gen_server:call方法来调用远程节点。</p><p>但是在被调用者一些，RPC模块会选择使用被调用者所在节点的rex直接执行相关代码</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">handle_call</span><span class=\"p\">({</span><span class=\"n\">block_call</span><span class=\"p\">,</span> <span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">,</span> <span class=\"nv\">Gleader</span><span class=\"p\">},</span> <span class=\"p\">_</span><span class=\"nv\">To</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    M</span><span class=\"ni\">yGL</span> <span class=\"o\">=</span> <span class=\"nb\">group_leader</span><span class=\"p\">(),</span>\n    <span class=\"nf\">set_group_leader</span><span class=\"p\">(</span><span class=\"nv\">Gleader</span><span class=\"p\">),</span>\n    <span class=\"nv\">Reply</span> <span class=\"o\">=</span> \n<span class=\"k\">case</span> <span class=\"k\">catch</span> <span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"nv\">Mod</span><span class=\"p\">,</span><span class=\"nv\">Fun</span><span class=\"p\">,</span><span class=\"nv\">Args</span><span class=\"p\">)</span> <span class=\"k\">of</span>\n        <span class=\"p\">{</span><span class=\"n\">&#39;EXIT&#39;</span><span class=\"p\">,</span> <span class=\"p\">_}</span> <span class=\"o\">=</span> <span class=\"nv\">Exit</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">        {</span><span class=\"ni\">badrpc</span><span class=\"p\">,</span> <span class=\"nv\">Exit</span><span class=\"p\">};</span>\n        <span class=\"nv\">Other</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">        O</span><span class=\"ni\">ther</span>\n<span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"nb\">group_leader</span><span class=\"p\">(</span><span class=\"nv\">MyGL</span><span class=\"p\">,</span> <span class=\"nf\">self</span><span class=\"p\">()),</span> <span class=\"c\">% restore\n</span><span class=\"c\"></span>    <span class=\"p\">{</span><span class=\"n\">reply</span><span class=\"p\">,</span> <span class=\"nv\">Reply</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">};</span>\n</code></pre></div><h2><b>同步调用总结</b></h2><p>call方法可以保证，同一调用者的远程请求按序列执行，但是不保证多个调用者的远程请求按序列执行。 block_call方法保证，多个调用者的远程请求按序列执行。 不管是call还是block_call的方法都会给调用者带来大量的进程创建的压力（Erlang创建进程很快，但不代表没有代价）。 call方法还会给被调用者节点带来大量的进程创建压力。</p><h2><b>cast方法</b></h2><p>RPC模块的cast方法直接依赖于gen_sever:cast，并没有做更多的事情。</p><p>针对本地节点，cast方法会在调用者节点内创建一个进程来执行相关代码：</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">,</span> <span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nv\">Node</span> <span class=\"o\">=:=</span> <span class=\"nb\">node</span><span class=\"p\">()</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\"></span><span class=\"ni\">catch</span> <span class=\"nb\">spawn</span><span class=\"p\">(</span><span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">),</span>\n    <span class=\"n\">true</span><span class=\"p\">;</span>\n<span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">,</span> <span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\"></span><span class=\"ni\">gen_server</span><span class=\"p\">:</span><span class=\"nf\">cast</span><span class=\"p\">({</span><span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span><span class=\"nv\">Node</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"n\">cast</span><span class=\"p\">,</span><span class=\"nv\">Mod</span><span class=\"p\">,</span><span class=\"nv\">Fun</span><span class=\"p\">,</span><span class=\"nv\">Args</span><span class=\"p\">,</span><span class=\"nb\">group_leader</span><span class=\"p\">()}),</span>\n    <span class=\"n\">true</span><span class=\"p\">.</span>\n</code></pre></div><p>被调用者接收到消息后会立刻创建进程执行相关代码：</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">handle_cast</span><span class=\"p\">({</span><span class=\"n\">cast</span><span class=\"p\">,</span> <span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">,</span> <span class=\"nv\">Gleader</span><span class=\"p\">},</span> <span class=\"nv\">S</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    </span><span class=\"ni\">spawn</span><span class=\"p\">(</span><span class=\"k\">fun</span><span class=\"p\">()</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">          </span><span class=\"ni\">set_group_leader</span><span class=\"p\">(</span><span class=\"nv\">Gleader</span><span class=\"p\">),</span>\n          <span class=\"nb\">apply</span><span class=\"p\">(</span><span class=\"nv\">Mod</span><span class=\"p\">,</span> <span class=\"nv\">Fun</span><span class=\"p\">,</span> <span class=\"nv\">Args</span><span class=\"p\">)</span>\n<span class=\"k\">end</span><span class=\"p\">),</span>\n    <span class=\"p\">{</span><span class=\"n\">noreply</span><span class=\"p\">,</span> <span class=\"nv\">S</span><span class=\"p\">};</span>\n</code></pre></div><h2><b>cast方法总结</b></h2><p>cast方法是非常简单的。和call方法一样，会给被调用者节点带来大量的进程创建压力。 同样不要忘记了，cast方法也会将新创建的进程的console输出重新定向调用者所在节点的group leader上。</p><h2><b>abcast和sbcast</b></h2><p>这两个方法都是通过erlang:send将调用者的消息发送到被调用者节点上。</p><h2><b>abcast</b></h2><p>abcast采用的是纯异步，发出去就不管了，直接将消息不经过rex进程直接发送到目标进程上</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">abcast</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    </span><span class=\"ni\">abcast</span><span class=\"p\">([</span><span class=\"nb\">node</span><span class=\"p\">()</span> <span class=\"p\">|</span> <span class=\"nb\">nodes</span><span class=\"p\">()],</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">).</span>\n\n<span class=\"nf\">abcast</span><span class=\"p\">([</span><span class=\"nv\">Node</span><span class=\"p\">|</span><span class=\"nv\">Tail</span><span class=\"p\">],</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    D</span><span class=\"ni\">est</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nv\">Name</span><span class=\"p\">,</span><span class=\"nv\">Node</span><span class=\"p\">},</span>\n<span class=\"c\">%这么做的好处是不会让进程被trap\n</span><span class=\"c\"></span>    <span class=\"c\">%从而保证了异步性\n</span><span class=\"c\"></span>    <span class=\"k\">case</span> <span class=\"k\">catch</span> <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">send</span><span class=\"p\">(</span><span class=\"nv\">Dest</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">noconnect</span><span class=\"p\">])</span> <span class=\"k\">of</span>\n    <span class=\"n\">noconnect</span> <span class=\"p\">-</span><span class=\"err\">&gt; </span><span class=\"ni\">spawn</span><span class=\"p\">(</span><span class=\"n\">erlang</span><span class=\"p\">,</span> <span class=\"nb\">send</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Dest</span><span class=\"p\">,</span><span class=\"nv\">Mess</span><span class=\"p\">]),</span> <span class=\"n\">ok</span><span class=\"p\">;</span>\n    <span class=\"p\">_</span> <span class=\"p\">-</span><span class=\"err\">&gt; </span><span class=\"ni\">ok</span>\n<span class=\"k\">end</span><span class=\"p\">,</span>\n    <span class=\"nf\">abcast</span><span class=\"p\">(</span><span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">);</span>\n<span class=\"nf\">abcast</span><span class=\"p\">([],</span> <span class=\"p\">_,_)</span> <span class=\"p\">-</span><span class=\"err\">&gt; </span><span class=\"ni\">abcast</span><span class=\"p\">.</span>\n</code></pre></div><p>此处abcast完全是异步的，如果发现了目标节点是没有连接的时候，直接创建一个新的进程来进行消息发送，完全不会进入Trap状态等待节点连接。</p><h2><b>sbcast</b></h2><p>sbcast算是同步的广播方式，发送后会回收广播结果，并且当节点没有完成连接的时候，会进入Trap状态等待节点连接完成</p><div class=\"highlight\"><pre><code class=\"language-erlang\"><span class=\"nf\">sbcast</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    </span><span class=\"ni\">sbcast</span><span class=\"p\">([</span><span class=\"nb\">node</span><span class=\"p\">()</span> <span class=\"p\">|</span> <span class=\"nb\">nodes</span><span class=\"p\">()],</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">).</span>\n\n<span class=\"nf\">sbcast</span><span class=\"p\">(</span><span class=\"nv\">Nodes</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    M</span><span class=\"ni\">onitors</span> <span class=\"o\">=</span> <span class=\"nf\">send_nodes</span><span class=\"p\">(</span><span class=\"nv\">Nodes</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">sbcast</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Mess</span><span class=\"p\">},</span> <span class=\"p\">[]),</span>\n    <span class=\"nf\">rec_nodes</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span> <span class=\"nv\">Monitors</span><span class=\"p\">).</span>\n\n<span class=\"nf\">send_nodes</span><span class=\"p\">([</span><span class=\"nv\">Node</span><span class=\"p\">|</span><span class=\"nv\">Tail</span><span class=\"p\">],</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"nv\">Monitors</span><span class=\"p\">)</span> <span class=\"k\">when</span> <span class=\"nb\">is_atom</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    M</span><span class=\"ni\">onitor</span> <span class=\"o\">=</span> <span class=\"nf\">start_monitor</span><span class=\"p\">(</span><span class=\"nv\">Node</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">),</span>\n<span class=\"c\">%% Handle non-existing names in rec_nodes.\n</span><span class=\"c\"></span>    <span class=\"k\">catch</span> <span class=\"p\">{</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Node</span><span class=\"p\">}</span> <span class=\"o\">!</span> <span class=\"p\">{</span><span class=\"nf\">self</span><span class=\"p\">(),</span> <span class=\"nv\">Msg</span><span class=\"p\">},</span>\n    <span class=\"nf\">send_nodes</span><span class=\"p\">(</span><span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Monitor</span> <span class=\"p\">|</span> <span class=\"nv\">Monitors</span><span class=\"p\">]);</span>\n<span class=\"nf\">send_nodes</span><span class=\"p\">([_</span><span class=\"nv\">Node</span><span class=\"p\">|</span><span class=\"nv\">Tail</span><span class=\"p\">],</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"nv\">Monitors</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">%% S</span><span class=\"ni\">kip</span> <span class=\"n\">non</span><span class=\"p\">-</span><span class=\"ni\">atom</span> <span class=\"p\">_</span><span class=\"nv\">Node</span>\n    <span class=\"nf\">send_nodes</span><span class=\"p\">(</span><span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Msg</span><span class=\"p\">,</span> <span class=\"nv\">Monitors</span><span class=\"p\">);</span>\n<span class=\"nf\">send_nodes</span><span class=\"p\">([],</span> <span class=\"p\">_</span><span class=\"nv\">Name</span><span class=\"p\">,</span>  <span class=\"p\">_</span><span class=\"nv\">Req</span><span class=\"p\">,</span> <span class=\"nv\">Monitors</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt; \n</span><span class=\"err\">    M</span><span class=\"ni\">onitors</span><span class=\"p\">.</span>\n\n<span class=\"nf\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Nodes</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt; \n</span><span class=\"err\">    </span><span class=\"ni\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Nodes</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"p\">[]).</span>\n\n<span class=\"nf\">rec_nodes</span><span class=\"p\">(_</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"p\">[],</span>  <span class=\"nv\">Badnodes</span><span class=\"p\">,</span> <span class=\"nv\">Replies</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">    {R</span><span class=\"ni\">eplies</span><span class=\"p\">,</span> <span class=\"nv\">Badnodes</span><span class=\"p\">};</span>\n<span class=\"nf\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"nv\">N</span><span class=\"p\">,</span><span class=\"nv\">R</span><span class=\"p\">}</span> <span class=\"p\">|</span> <span class=\"nv\">Tail</span><span class=\"p\">],</span> <span class=\"nv\">Badnodes</span><span class=\"p\">,</span> <span class=\"nv\">Replies</span><span class=\"p\">)</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\"></span><span class=\"ni\">receive</span>\n    <span class=\"p\">{</span><span class=\"n\">&#39;DOWN&#39;</span><span class=\"p\">,</span> <span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"p\">_,</span> <span class=\"p\">_,</span> <span class=\"p\">_}</span> <span class=\"p\">-</span><span class=\"err\">&gt;\n</span><span class=\"err\">        </span><span class=\"ni\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">N</span><span class=\"p\">|</span><span class=\"nv\">Badnodes</span><span class=\"p\">],</span> <span class=\"nv\">Replies</span><span class=\"p\">);</span>\n    <span class=\"p\">{</span><span class=\"o\">?</span><span class=\"nv\">NAME</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"n\">nonexisting_name</span><span class=\"p\">,</span> <span class=\"p\">_}}</span> <span class=\"p\">-</span><span class=\"err\">&gt;  \n</span><span class=\"err\">%% </span><span class=\"ni\">used</span> <span class=\"n\">by</span> <span class=\"nf\">sbcast</span><span class=\"p\">()</span>\n        <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">demonitor</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">flush</span><span class=\"p\">]),</span>\n        <span class=\"nf\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">N</span><span class=\"p\">|</span><span class=\"nv\">Badnodes</span><span class=\"p\">],</span> <span class=\"nv\">Replies</span><span class=\"p\">);</span>\n    <span class=\"p\">{</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">N</span><span class=\"p\">,</span> <span class=\"nv\">Reply</span><span class=\"p\">}</span> <span class=\"p\">-</span><span class=\"err\">&gt;  %% N</span><span class=\"ni\">ame</span> <span class=\"n\">is</span> <span class=\"n\">bound</span> <span class=\"o\">!!!</span>\n        <span class=\"nn\">erlang</span><span class=\"p\">:</span><span class=\"nb\">demonitor</span><span class=\"p\">(</span><span class=\"nv\">R</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">flush</span><span class=\"p\">]),</span>\n        <span class=\"nf\">rec_nodes</span><span class=\"p\">(</span><span class=\"nv\">Name</span><span class=\"p\">,</span> <span class=\"nv\">Tail</span><span class=\"p\">,</span> <span class=\"nv\">Badnodes</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nv\">Reply</span><span class=\"p\">|</span><span class=\"nv\">Replies</span><span class=\"p\">])</span>\n<span class=\"k\">end</span><span class=\"p\">.</span></code></pre></div><p></p>", 
            "topic": [
                {
                    "tag": "Erlang（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/19606610"
                }, 
                {
                    "tag": "Elixir（编程语言）", 
                    "tagLink": "https://api.zhihu.com/topics/20010974"
                }, 
                {
                    "tag": "远程过程调用协议RPC（Remote Procedure Call Protocol)", 
                    "tagLink": "https://api.zhihu.com/topics/19876846"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59124784", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 60, 
            "title": "开始使用.net", 
            "content": "<p>作为一个多年的微软黑，这次必须为微软点赞。2019年核心目标是去Linux（除了手机），.net平台上手。</p><p><b>为什么会转变</b></p><p>长期以来，我一直是一个微软的反对者，但是从使用Windows 10开始，发现了微软很多地方是可圈可点的。同时发现固步自封的微软推出了Visual Studio for Mac，以及收购了Xamarin等一系列动作，开始重新审视微软的一系列产品。</p><p>作为一个怠惰的软件开发工程师，寻求高效率解决问题的心从来没有变过。包括使用Linux，使用多语言，以及现在开始重新审视.net并开始使用。</p><p>那么什么导致这次转变</p><ol><li>Windows 10 体验大幅度提升（几百元的价格很合理）</li><li>移动平台的多端开发</li><li>复杂的客户端需求（Electron无法完全满足）</li><li>OCaml，Common Lisp以及Erlang在Windows平台上表现不理想，开始使用F#</li><li>Xamarin微软官方化，Mono和.net Framework团队合并开发.net Core</li><li>Windows 部署非常快捷方便</li></ol><p>为了保障个人及团队所开发的软件的稳定性，核心开发平台已经从Linux，全面迁移到Mac OS X，FreeBSD（个人偶尔会用OpenBSD）以及Windows上。</p><p><b>.net平台优势</b></p><p>相比较Flutter，Mono以及Xamarin在移动领域上进行多端开发已经有了数年的经验积累和实践。同时Xamarin是支持Windows Phone（市场小，但是不排除我公司客户会使用）的。</p><p>F#，C#互操作非常容易，规范非常好，代码相对美观（Clojure和Java互操作，代码不是特别美观）。</p><p>C#上手度比较高，适合团队快速入门，并能及时的投入项目使用。F#作为OCaml的变种，部分基础业务组件可以进行函数式编程，团队分工明确。</p><p>Visual Studio 2017 对Mac OS X和Windows 10支持非常好，两个平台上工具安装搭建非常迅捷，不需要过多的操心。</p><p></p>", 
            "topic": [
                {
                    "tag": ".NET", 
                    "tagLink": "https://api.zhihu.com/topics/19563832"
                }, 
                {
                    "tag": "Mono", 
                    "tagLink": "https://api.zhihu.com/topics/19741151"
                }, 
                {
                    "tag": "FreeBSD", 
                    "tagLink": "https://api.zhihu.com/topics/19559237"
                }
            ], 
            "comments": [
                {
                    "userName": "ggff ss", 
                    "userLink": "https://www.zhihu.com/people/4d172d7cd482cb3c97d2a3d2dfd9e76a", 
                    "content": "<p>Flutter 有个优势是 听说控件是自绘的，因此这可以避免一些平台差异，尽量让不同平台的App体验一致。当然我觉得为此去学Dart有些不值得。但是介于微软已经将Xamarin开源免费 我觉得可以去github上提Issue 讨论支持自绘组件库的问题了。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>赞同你的看法，可以提issue去帮助Xamarin增加控件自绘。</p><p>Flutter有Flutter的优势，Flutter也在我们的评估范围之内。控件自绘对很多项目很重要，但是对我们这种项目，并不是特比重要。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "ggff ss"
                        }
                    ]
                }, 
                {
                    "userName": "灵魂对撞机", 
                    "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                    "content": "除了互联网，几乎都是.net的主场", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>也不完全吧，我以前在某银行，内部用的是C++，Java和Haskell</p>", 
                            "likes": 0, 
                            "replyToAuthor": "灵魂对撞机"
                        }, 
                        {
                            "userName": "灵魂对撞机", 
                            "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                            "content": "应用型的多。有时我也c++，性能和怕反编译", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "海淀游民", 
                    "userLink": "https://www.zhihu.com/people/0392ffb3559ca47bf749f1df688753d7", 
                    "content": "容器时代，Windows可以彻底靠边站了", 
                    "likes": 2, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>不能这么说，Windows现在还是很有用的，客户端需求不低。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "海淀游民"
                        }, 
                        {
                            "userName": "ggff ss", 
                            "userLink": "https://www.zhihu.com/people/4d172d7cd482cb3c97d2a3d2dfd9e76a", 
                            "content": "<p>容器玩来玩去还不是吃的linux自己的服务端份额，Windows表示：你自家人搞自己人关我P事，😀</p>", 
                            "likes": 0, 
                            "replyToAuthor": "海淀游民"
                        }
                    ]
                }, 
                {
                    "userName": "无所谓", 
                    "userLink": "https://www.zhihu.com/people/e9f8c774025914c7642ddcc4a0c44a91", 
                    "content": ".net永远敢不上java,总是差人一等，工资差几十倍", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>虽然普遍，但是无法完全认同吧，见过一个月4W的.net，也讲过月薪几k的Java。编程语言只要用的好，生态做的好，都可以获取一个高薪职位。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "无所谓"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>中低阶的差距不大，毕竟虽然.net岗位不如java多，.net开发人数也明显少于java。      </p>", 
                            "likes": 0, 
                            "replyToAuthor": "无所谓"
                        }
                    ]
                }, 
                {
                    "userName": "igfxDTCM", 
                    "userLink": "https://www.zhihu.com/people/549161dd3a7c34d808b105da71738187", 
                    "content": "在linux稍微用了下.net core 确实很不错，微软很多东西都帮我们弄好了。吹爆", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "是的，用了之后感觉还是很方便，比Java方便好用多了", 
                            "likes": 0, 
                            "replyToAuthor": "igfxDTCM"
                        }, 
                        {
                            "userName": "igfxDTCM", 
                            "userLink": "https://www.zhihu.com/people/549161dd3a7c34d808b105da71738187", 
                            "content": "特别是那部署，和go一样方便。", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "zed xp", 
                    "userLink": "https://www.zhihu.com/people/b661426e00d2c350fa3ea7bd95cced3f", 
                    "content": "微软已经无数次地证明自己是个靠不住的队友，没想到还有韭菜送上门..", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>微软也在改变，不能一帮子打死，如果靠不住的还有一个公司叫做RedHat。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "zed xp"
                        }
                    ]
                }, 
                {
                    "userName": "范建中", 
                    "userLink": "https://www.zhihu.com/people/16eab3f6cab08317172f488ae278a5d3", 
                    "content": "flutter真的不太行，准确来说是dart不太行。 dart这么多年了感觉还是个玩具。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>Flutter坑不少，但是淘宝已经试水了，可以考虑上了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "范建中"
                        }
                    ]
                }, 
                {
                    "userName": "残风", 
                    "userLink": "https://www.zhihu.com/people/03ed98c1673c4002382eda975b4212f4", 
                    "content": "用FreeBSD为啥还要用.net？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>用户是Windows，需要客户端。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "残风"
                        }, 
                        {
                            "userName": "残风", 
                            "userLink": "https://www.zhihu.com/people/03ed98c1673c4002382eda975b4212f4", 
                            "content": "现在都用Web了…", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "桌面好像一向都是微软的优势", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>可以这么说，Windows在办公领域一直比较强。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "补佳林", 
                    "userLink": "https://www.zhihu.com/people/e5b6b65f8254d0e51df1e4528f055702", 
                    "content": "vs2019,了解下", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>已经看了，不过目前还是先用vs2017，等正式版本出来再换来得及。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "补佳林"
                        }
                    ]
                }, 
                {
                    "userName": "罗源居士", 
                    "userLink": "https://www.zhihu.com/people/25502284da2ee19ecc23e1222ee96266", 
                    "content": "<p>你用VS开发什么呢？桌面应用？手机app？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>都有了</p>", 
                            "likes": 0, 
                            "replyToAuthor": "罗源居士"
                        }
                    ]
                }, 
                {
                    "userName": "z weijar", 
                    "userLink": "https://www.zhihu.com/people/915239bc4582e1f973d008df55f22f80", 
                    "content": "<p>看来是之前黑的不彻底，或者说是为黑而黑，MS的槽点从来没变过</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "vs早年问题很多，不行就是不行，dotnet改变可观，必须点赞", 
                            "likes": 0, 
                            "replyToAuthor": "z weijar"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "现在的.NET岗位越来越少，求职人数也少，连培训班都懒得开相关课程", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "我觉得编程不太需要培训，除非为了拿认证，自己撸几个项目，自然就会了。", 
                            "likes": 4, 
                            "replyToAuthor": "吏小加"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "最近有个项目需求，我现在也得边学边用。但是.NET平台太庞大了，不知从何下手", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "直接上手撸，然后再重构", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "<p>开发dotNET用哪种语言好？C#还是<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a> ？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>我建议用C#，不是特别推荐<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a>虽然它上手快，但是<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a>表现力不足，跨平台也不是很好。</p><p>我现在用的是C# + F#，F#主要用来写核心业务逻辑，C#写界面相关的。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢回复", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "<p>.NET平台哪种GUI框架比较好？</p><p>\"WinForm\"和\"WPF\"还有\"UWP\"</p><p>这三种GUI框架对比有什么优缺点？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>这个暂时还没研究，但是基本上感觉差别不大，针对的.net版本兼容性不一样。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢你的耐心解答", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "井蛙", 
                    "userLink": "https://www.zhihu.com/people/c3d378babbf921475ff47911ba3ae44c", 
                    "content": "U", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "sky快跑", 
                    "userLink": "https://www.zhihu.com/people/ec306186a98648002b7b01247918b151", 
                    "content": "f#用的人少，新特性上得也慢…", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>是的特性少，不过语法清晰，写业务也很规范。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "sky快跑"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>自从由.net转到java后，再也不想转回.net了，java开源世界的强大，单凭微软一家是刚不过的。为啥.net开源了依然只会是只弱鸡？因为程序员都不爱用微软的技术写开源项目啊。为啥不爱用微软的技术写开源项目呢？因为微软就是开源之敌，微软几十年如一日的努力，成功塑造了它的这个形象。一句话，微软现在想拥抱开源了？没用的。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>.net在开源占的席位很弱，不代表.net在商业和某些特殊场景很弱。就像我现在的需求场景，5个平台客户端的逻辑需要一致，3个手机平台的客户端界面需要求，2个PC平台的界面需求，不去研究Xamarin，也没有太好的办法（不要告诉我web什么，客户强制的需求）。Java再强，也无法很好的解决我的问题。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "Core", 
                            "userLink": "https://www.zhihu.com/people/a2acadee968b7da8ad8044945296dcc9", 
                            "content": "你只是关注少而已，去github看看，开源并不少，虽然比不上java和js，但是和其它语言比并不少于它们。", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "国外有个.net core的开源跨平台框架，叫avalonia（好像是这么拼），能解决平台差异的问题。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>可以考虑，现在主要研究的是Xamarin这个微软的官方框架</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "ggff ss", 
                    "userLink": "https://www.zhihu.com/people/4d172d7cd482cb3c97d2a3d2dfd9e76a", 
                    "content": "<p>Flutter 有个优势是 听说控件是自绘的，因此这可以避免一些平台差异，尽量让不同平台的App体验一致。当然我觉得为此去学Dart有些不值得。但是介于微软已经将Xamarin开源免费 我觉得可以去github上提Issue 讨论支持自绘组件库的问题了。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>赞同你的看法，可以提issue去帮助Xamarin增加控件自绘。</p><p>Flutter有Flutter的优势，Flutter也在我们的评估范围之内。控件自绘对很多项目很重要，但是对我们这种项目，并不是特比重要。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "ggff ss"
                        }
                    ]
                }, 
                {
                    "userName": "灵魂对撞机", 
                    "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                    "content": "除了互联网，几乎都是.net的主场", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>也不完全吧，我以前在某银行，内部用的是C++，Java和Haskell</p>", 
                            "likes": 0, 
                            "replyToAuthor": "灵魂对撞机"
                        }, 
                        {
                            "userName": "灵魂对撞机", 
                            "userLink": "https://www.zhihu.com/people/f4ca959f981c310af429ca25b3b4721d", 
                            "content": "应用型的多。有时我也c++，性能和怕反编译", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "海淀游民", 
                    "userLink": "https://www.zhihu.com/people/0392ffb3559ca47bf749f1df688753d7", 
                    "content": "容器时代，Windows可以彻底靠边站了", 
                    "likes": 2, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>不能这么说，Windows现在还是很有用的，客户端需求不低。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "海淀游民"
                        }, 
                        {
                            "userName": "ggff ss", 
                            "userLink": "https://www.zhihu.com/people/4d172d7cd482cb3c97d2a3d2dfd9e76a", 
                            "content": "<p>容器玩来玩去还不是吃的linux自己的服务端份额，Windows表示：你自家人搞自己人关我P事，😀</p>", 
                            "likes": 0, 
                            "replyToAuthor": "海淀游民"
                        }
                    ]
                }, 
                {
                    "userName": "无所谓", 
                    "userLink": "https://www.zhihu.com/people/e9f8c774025914c7642ddcc4a0c44a91", 
                    "content": ".net永远敢不上java,总是差人一等，工资差几十倍", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>虽然普遍，但是无法完全认同吧，见过一个月4W的.net，也讲过月薪几k的Java。编程语言只要用的好，生态做的好，都可以获取一个高薪职位。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "无所谓"
                        }, 
                        {
                            "userName": "知乎用户", 
                            "userLink": "https://www.zhihu.com/people/0", 
                            "content": "<p>中低阶的差距不大，毕竟虽然.net岗位不如java多，.net开发人数也明显少于java。      </p>", 
                            "likes": 0, 
                            "replyToAuthor": "无所谓"
                        }
                    ]
                }, 
                {
                    "userName": "igfxDTCM", 
                    "userLink": "https://www.zhihu.com/people/549161dd3a7c34d808b105da71738187", 
                    "content": "在linux稍微用了下.net core 确实很不错，微软很多东西都帮我们弄好了。吹爆", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "是的，用了之后感觉还是很方便，比Java方便好用多了", 
                            "likes": 0, 
                            "replyToAuthor": "igfxDTCM"
                        }, 
                        {
                            "userName": "igfxDTCM", 
                            "userLink": "https://www.zhihu.com/people/549161dd3a7c34d808b105da71738187", 
                            "content": "特别是那部署，和go一样方便。", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "zed xp", 
                    "userLink": "https://www.zhihu.com/people/b661426e00d2c350fa3ea7bd95cced3f", 
                    "content": "微软已经无数次地证明自己是个靠不住的队友，没想到还有韭菜送上门..", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>微软也在改变，不能一帮子打死，如果靠不住的还有一个公司叫做RedHat。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "zed xp"
                        }
                    ]
                }, 
                {
                    "userName": "范建中", 
                    "userLink": "https://www.zhihu.com/people/16eab3f6cab08317172f488ae278a5d3", 
                    "content": "flutter真的不太行，准确来说是dart不太行。 dart这么多年了感觉还是个玩具。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>Flutter坑不少，但是淘宝已经试水了，可以考虑上了。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "范建中"
                        }
                    ]
                }, 
                {
                    "userName": "残风", 
                    "userLink": "https://www.zhihu.com/people/03ed98c1673c4002382eda975b4212f4", 
                    "content": "用FreeBSD为啥还要用.net？", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>用户是Windows，需要客户端。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "残风"
                        }, 
                        {
                            "userName": "残风", 
                            "userLink": "https://www.zhihu.com/people/03ed98c1673c4002382eda975b4212f4", 
                            "content": "现在都用Web了…", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "桌面好像一向都是微软的优势", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>可以这么说，Windows在办公领域一直比较强。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "补佳林", 
                    "userLink": "https://www.zhihu.com/people/e5b6b65f8254d0e51df1e4528f055702", 
                    "content": "vs2019,了解下", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>已经看了，不过目前还是先用vs2017，等正式版本出来再换来得及。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "补佳林"
                        }
                    ]
                }, 
                {
                    "userName": "罗源居士", 
                    "userLink": "https://www.zhihu.com/people/25502284da2ee19ecc23e1222ee96266", 
                    "content": "<p>你用VS开发什么呢？桌面应用？手机app？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>都有了</p>", 
                            "likes": 0, 
                            "replyToAuthor": "罗源居士"
                        }
                    ]
                }, 
                {
                    "userName": "z weijar", 
                    "userLink": "https://www.zhihu.com/people/915239bc4582e1f973d008df55f22f80", 
                    "content": "<p>看来是之前黑的不彻底，或者说是为黑而黑，MS的槽点从来没变过</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "vs早年问题很多，不行就是不行，dotnet改变可观，必须点赞", 
                            "likes": 0, 
                            "replyToAuthor": "z weijar"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "现在的.NET岗位越来越少，求职人数也少，连培训班都懒得开相关课程", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "我觉得编程不太需要培训，除非为了拿认证，自己撸几个项目，自然就会了。", 
                            "likes": 4, 
                            "replyToAuthor": "吏小加"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "最近有个项目需求，我现在也得边学边用。但是.NET平台太庞大了，不知从何下手", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "直接上手撸，然后再重构", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "<p>开发dotNET用哪种语言好？C#还是<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a> ？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>我建议用C#，不是特别推荐<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a>虽然它上手快，但是<a href=\"http://link.zhihu.com/?target=http%3A//VB.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">VB.NET</span><span class=\"invisible\"></span></a>表现力不足，跨平台也不是很好。</p><p>我现在用的是C# + F#，F#主要用来写核心业务逻辑，C#写界面相关的。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢回复", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "吏小加", 
                    "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                    "content": "<p>.NET平台哪种GUI框架比较好？</p><p>\"WinForm\"和\"WPF\"还有\"UWP\"</p><p>这三种GUI框架对比有什么优缺点？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>这个暂时还没研究，但是基本上感觉差别不大，针对的.net版本兼容性不一样。</p>", 
                            "likes": 1, 
                            "replyToAuthor": "吏小加"
                        }, 
                        {
                            "userName": "吏小加", 
                            "userLink": "https://www.zhihu.com/people/db6e47e83e83201bc6df2ea0bad50897", 
                            "content": "谢谢你的耐心解答", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "井蛙", 
                    "userLink": "https://www.zhihu.com/people/c3d378babbf921475ff47911ba3ae44c", 
                    "content": "U", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "sky快跑", 
                    "userLink": "https://www.zhihu.com/people/ec306186a98648002b7b01247918b151", 
                    "content": "f#用的人少，新特性上得也慢…", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>是的特性少，不过语法清晰，写业务也很规范。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "sky快跑"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>自从由.net转到java后，再也不想转回.net了，java开源世界的强大，单凭微软一家是刚不过的。为啥.net开源了依然只会是只弱鸡？因为程序员都不爱用微软的技术写开源项目啊。为啥不爱用微软的技术写开源项目呢？因为微软就是开源之敌，微软几十年如一日的努力，成功塑造了它的这个形象。一句话，微软现在想拥抱开源了？没用的。</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>.net在开源占的席位很弱，不代表.net在商业和某些特殊场景很弱。就像我现在的需求场景，5个平台客户端的逻辑需要一致，3个手机平台的客户端界面需要求，2个PC平台的界面需求，不去研究Xamarin，也没有太好的办法（不要告诉我web什么，客户强制的需求）。Java再强，也无法很好的解决我的问题。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }, 
                        {
                            "userName": "Core", 
                            "userLink": "https://www.zhihu.com/people/a2acadee968b7da8ad8044945296dcc9", 
                            "content": "你只是关注少而已，去github看看，开源并不少，虽然比不上java和js，但是和其它语言比并不少于它们。", 
                            "likes": 0, 
                            "replyToAuthor": "David Gao"
                        }
                    ]
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "国外有个.net core的开源跨平台框架，叫avalonia（好像是这么拼），能解决平台差异的问题。", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>可以考虑，现在主要研究的是Xamarin这个微软的官方框架</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59349866", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 0, 
            "title": "Xamarin一日使用记录", 
            "content": "<p><b>目标是什么</b></p><p>在公司开发很多东西和Redis都有关系，但是在MacOSX，我一直找不到一个好用（复合自己需求）的Redis可视化查询工具。</p><p>因此边学习Xamarin，边将开发该工具作为练手。</p><p><b>为什么C#和F#混合</b></p><p>最开始的计划，是使用纯F#进行开发，但是发现F#和Xamarin开发界面有一些不方便（刚使用，希望多指导），而C#和Xamarin整合的更好，可以支持storyboard。但是对于一个常年写函数语言的人不能就此放弃，但是经过1小时的分析后，放弃了F#开发界面的想法，采用C#开发界面，F#开发核心逻辑（这样我就能直接拿到Windows上继续用）。</p><p><b>初步的感想</b></p><p>即便使用Xamarin进行Mac开发，依然需要开发者对Mac开发和ObjC有一些简单的了解。但是相比已经有C#开发经验的人，入门ObjC和Mac开发，比重新学习ObjC或Swift和Mac开发要快很多，但是对我个人来说，我只是想用F#（ObjC，我已经很强悍了，但是不会Swfit，比起Swfit我对F#更感兴趣）。</p><p>为什么要知道一定ObjC和Mac的知识呢。因为VS 2017 for Mac 并不支持Xib文件的直接修改，需要使用XCode进行想用的修改，并关联相关动作（可以通过纯代码实现，但storyboard太好用了）。其次，Xamarin在Mac上的开发实际上还是Bind Cocoa的Class，并没有提供自己的更高层次封装，因此不得不去了解Mac开发，也许未来Xamarin会推出xaml直接生成跨平台界面的方案。</p><p>相比较下F#的namespace和module设计比OCaml要好一些，但是let语法让我少有一些不太适应。</p><p>希望能在这个过程中，逐步完善自己的知识体系，并用F#开发出自己想开发的玩具。</p><p></p><p></p>", 
            "topic": [
                {
                    "tag": ".NET Core", 
                    "tagLink": "https://api.zhihu.com/topics/20050967"
                }, 
                {
                    "tag": "Xamarin", 
                    "tagLink": "https://api.zhihu.com/topics/20041591"
                }, 
                {
                    "tag": "OS X 开发", 
                    "tagLink": "https://api.zhihu.com/topics/19561636"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>已阅，不知道你在写什么</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "<p>就是扯扯蛋，说明Xamarin可以开发MacOSX应用了，但是F#支持的不好。</p>", 
                            "likes": 0, 
                            "replyToAuthor": "知乎用户"
                        }
                    ]
                }, 
                {
                    "userName": "刘金城", 
                    "userLink": "https://www.zhihu.com/people/80e29d52cb544729f2592b19bb0cde89", 
                    "content": "<p>Xamarin forms开发ios和android是不是开发效率很高？性能的话怎么样？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "David Gao", 
                            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
                            "content": "就是写一套，可以两面用，性能上主力机型无问题，剩下的没有测试过", 
                            "likes": 1, 
                            "replyToAuthor": "刘金城"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59743730", 
            "userName": "David Gao", 
            "userLink": "https://www.zhihu.com/people/279045eb0cbf71d362d880a9d1d62566", 
            "upvote": 0, 
            "title": "跨平台自执行的netcore应用", 
            "content": "<p>直接先上仓库</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/DavidAlphaFox/calculator\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/DavidAlphaFo</span><span class=\"invisible\">x/calculator</span><span class=\"ellipsis\"></span></a><p class=\"ztext-empty-paragraph\"><br/></p><p><b>起因</b></p><p>近期一直在研究 netcore 上的跨平台技术，无意中发现VS 2017在Mac OS X上生成的netcore应用是.DLL结尾的，必须使用dotnet run 才能执行。作为一个经常作死的程序员，当然要研究下为什么，于是就在VS 2017中各种寻找参数，然而是各种未果。</p><p><b>经过</b></p><p>在一顿强力搜索后，在M$的网站上找到了dotnet 命令行操作方案。</p><p>首先要打开对应的.fsproj或者.csproj，使用Emacs或者Vim等文本编辑器打开。</p><p>接着在&lt;PropertyGroup&gt;标签下添加&lt;RuntimeIdentifiers&gt;标签</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-db6ca22d8e1e9248aba9d5f0aa482896_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1766\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"1766\" data-original=\"https://pic3.zhimg.com/v2-db6ca22d8e1e9248aba9d5f0aa482896_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1766&#39; height=&#39;1000&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1766\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1766\" data-original=\"https://pic3.zhimg.com/v2-db6ca22d8e1e9248aba9d5f0aa482896_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-db6ca22d8e1e9248aba9d5f0aa482896_b.jpg\"/></figure><p>指定需要发布的平台。</p><p>最后通过命令行，进入解决方案所在目录执行dotnet publish -c release -r osx.10.11-x64来完成发布，然后就可以在项目目录下的 bin/Release/netcoreapp2.1/osx.10.11-x64/publish/找到我们的可执行应用了。但是需要注意的是，它并未打包成mac的app形式，所以在mac上运行应用的时候，需要复制整个publish目录。</p><p><b>总结</b></p><p>需要进一步找出在Mac打包成.app的方法（已经有了基本的想法）。M$的东西，确实比Java的方便很多，并且文档完善和整洁度远高于Java。</p><p></p>", 
            "topic": [
                {
                    "tag": "Mac", 
                    "tagLink": "https://api.zhihu.com/topics/19550264"
                }, 
                {
                    "tag": "dotnet core", 
                    "tagLink": "https://api.zhihu.com/topics/20105818"
                }, 
                {
                    "tag": "Visual F#", 
                    "tagLink": "https://api.zhihu.com/topics/20006203"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/TTalkIM"
}
