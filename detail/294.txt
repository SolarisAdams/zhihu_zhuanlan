{
    "title": "机器学习开发", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/laiyongqin-4", 
        "https://www.zhihu.com/people/eric-123", 
        "https://www.zhihu.com/people/xiaojidan", 
        "https://www.zhihu.com/people/fei-shou-shou-45", 
        "https://www.zhihu.com/people/wu-qi-mo-50", 
        "https://www.zhihu.com/people/hu-jian-20-36", 
        "https://www.zhihu.com/people/lan-lan-lan-lan-96-82", 
        "https://www.zhihu.com/people/he-ye-52", 
        "https://www.zhihu.com/people/qi-sheng-76-3", 
        "https://www.zhihu.com/people/ming-82-18-62", 
        "https://www.zhihu.com/people/lin-yu-54-51-41", 
        "https://www.zhihu.com/people/reed-lau", 
        "https://www.zhihu.com/people/shen-tong-xue-74", 
        "https://www.zhihu.com/people/jun-chen-73", 
        "https://www.zhihu.com/people/feichai-liau", 
        "https://www.zhihu.com/people/riddle-49", 
        "https://www.zhihu.com/people/anlao-30", 
        "https://www.zhihu.com/people/chen-long-56-23", 
        "https://www.zhihu.com/people/jiang-chao-45-97", 
        "https://www.zhihu.com/people/lu-xue-tao", 
        "https://www.zhihu.com/people/homer-wong-33", 
        "https://www.zhihu.com/people/zhoulicun", 
        "https://www.zhihu.com/people/neuron", 
        "https://www.zhihu.com/people/che-che-33-74", 
        "https://www.zhihu.com/people/jiu-ye-20-63", 
        "https://www.zhihu.com/people/long-gang-62-42", 
        "https://www.zhihu.com/people/bu-ru-gui-qu-22-63", 
        "https://www.zhihu.com/people/master75", 
        "https://www.zhihu.com/people/wang-chen-pku", 
        "https://www.zhihu.com/people/liang-zi-80-91", 
        "https://www.zhihu.com/people/gao-shan-72-16", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/xueming-36", 
        "https://www.zhihu.com/people/kenneth_zhou", 
        "https://www.zhihu.com/people/zhang-xiao-tian-40-31", 
        "https://www.zhihu.com/people/tsingke", 
        "https://www.zhihu.com/people/sodom-28", 
        "https://www.zhihu.com/people/tao-hao-ge", 
        "https://www.zhihu.com/people/tang-hua-xin", 
        "https://www.zhihu.com/people/gabbar-wang", 
        "https://www.zhihu.com/people/qiao-hai-jun", 
        "https://www.zhihu.com/people/liu-xing-xing-59-50", 
        "https://www.zhihu.com/people/tian-si-47-12", 
        "https://www.zhihu.com/people/heathckliff", 
        "https://www.zhihu.com/people/fan-fan-47-36-32", 
        "https://www.zhihu.com/people/zzzzzsad", 
        "https://www.zhihu.com/people/zhang-li-82-47", 
        "https://www.zhihu.com/people/he-he-yi-lian-29", 
        "https://www.zhihu.com/people/kiwi-45-93", 
        "https://www.zhihu.com/people/yyq90", 
        "https://www.zhihu.com/people/li-yi-xing-29", 
        "https://www.zhihu.com/people/tianxing-70-4", 
        "https://www.zhihu.com/people/qichao-tang", 
        "https://www.zhihu.com/people/zhang-jin-long-53-93", 
        "https://www.zhihu.com/people/talentmonkey", 
        "https://www.zhihu.com/people/hong-yi-93", 
        "https://www.zhihu.com/people/fang-fang-61-57", 
        "https://www.zhihu.com/people/zhang-sheng-78-68"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/82223210", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "mac如何深度学习", 
            "content": "<figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-149d1dd639517eb84c028dfabee93df0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-149d1dd639517eb84c028dfabee93df0_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1920&#39; height=&#39;1080&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-149d1dd639517eb84c028dfabee93df0_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-149d1dd639517eb84c028dfabee93df0_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Mac", 
                    "tagLink": "https://api.zhihu.com/topics/19550264"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": [
                {
                    "userName": "liushengls", 
                    "userLink": "https://www.zhihu.com/people/a91b10164eb011b46e92d2ac7338004a", 
                    "content": "<p>看一下就懂了，旷世之作！！</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82035087", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 2, 
            "title": "单机多卡并行训练的程序编写", 
            "content": "<p>本文采用的方法为作者独自设计，未参考其他框架的思路。如有雷同纯属巧合。</p><h2>注意事项</h2><p>神经网络的多卡并行训练通常有两个思路，一是数据并行，二是网络并行。数据并行即多张显卡上使用的是同一个网络和权重，将训练集拆分为两个部分，各自计算之后，将权重变化取平均值并同时更新。网络并行即考虑网络本身规模很大，因此需要将网络分成多个部分存在多张显卡上。因为这个并行设计与网络结构相关，需要针对具体问题，通用性不高，本文只分析数据并行的情况。</p><p>本文也不讨论多机并行，因为多机并行通常延迟较高，提速效果有限。</p><p>线程的分配来说，按Nvidia的推荐，一个线程控制一个显卡比较适合。因此线程设计采取1+N的模式，即主线程+N个副线程，其中N为显卡的个数。主线程负责调度和处理数据集，每个副线程对应一个显卡，控制GPU的运行。</p><p>多显卡的程序在调试过程中相对比较困难，因为一旦跨显卡调用错误，可能导致整个系统卡死，后续的调试异常困难。因此，有几个cuda设备相关的函数在这里非常关键，例如：cudaSetDevice，cudaMemcpyPeer等。它们用于设置本线程使用的显卡和跨显卡复制数据，使用时必须非常谨慎！</p><p>Nvidia旧版的驱动还存在一个诡异的问题。驱动附带的nvml可以得到显卡的更多信息，但是nvml的编号与cuda的编号竟然是不同的。新版驱动已经改为相同了。</p><p>深度学习中，cublas和cudnn库的使用会相当频繁，这两个库的函数调用时都会首先传入一个预先初始化的handler。此处需注意，如有多个显卡，必须在每张卡上都初始化。如果传入计算函数的handler与显存不在同一显卡，会导致系统立刻崩溃。</p><p>因此每一块在显卡上分配的显存，都应该同时记录下所使用的设备编号，以及cublas和cudnn的handler的位置（直接或间接记录），应使用类或者结构体来包装。此处不具体讨论类的设计。</p><h2>流程和代码</h2><p>在计算过程中，为了提高速度，所有降低速度的因素应尽量避免。在计算开始后，除了将处理过的数据从内存复制到显存，所有操作应在显存中进行。在数据并行中，每个显卡中保存的网络是相同的，而一个网络中的权重可能包含多个矩阵和偏置值，如将这些值合成到同一块内存中，则可以降低跨显卡复制的次数。</p><p>训练过程中，在每次分别训练之后，应收集所有显卡上的权重，取平均值并再次分发到各个显卡，因此线程的同步至关重要。此处使用原子变量来进行同步，而不是通常使用API的方式。</p><p>副线程的部分c++代码如下。此处nets是一个网络的vector，0号为主网络，负责收集权重、计算平均值和分发。train_info结构体中的变量均为原子变量。需注意几个计数相关的部分。把这些代码进行必要的处理之后，使用std::thread运行就可以了。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#define WAIT_UNTIL(condition) { while(!(condition)) { std::this_thread::sleep_for(std::chrono::nanoseconds(100)); } }\n</span><span class=\"cp\"></span>    <span class=\"k\">auto</span> <span class=\"n\">net</span> <span class=\"o\">=</span> <span class=\"n\">nets_</span><span class=\"p\">[</span><span class=\"n\">net_id</span><span class=\"p\">];</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">epoch_count</span> <span class=\"o\">&lt;</span> <span class=\"n\">epoch0</span> <span class=\"o\">+</span> <span class=\"n\">epoches</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">epoch_count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"c1\">//等待数据准备完成\n</span><span class=\"c1\"></span>        <span class=\"n\">WAIT_UNTIL</span><span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">data_prepared</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">train_data_gpu</span><span class=\"p\">.</span><span class=\"n\">copyPartFrom</span><span class=\"p\">(</span><span class=\"n\">train_data_cpu_</span><span class=\"p\">,</span> <span class=\"n\">net_id</span> <span class=\"o\">*</span> <span class=\"n\">max_batch_</span> <span class=\"o\">/</span> <span class=\"n\">MP_count_</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">max_batch_</span> <span class=\"o\">/</span> <span class=\"n\">MP_count_</span><span class=\"p\">);</span>\n        <span class=\"c1\">//发出拷贝数据结束信号\n</span><span class=\"c1\"></span>        <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">data_distributed</span><span class=\"o\">++</span><span class=\"p\">;</span>    <span class=\"c1\">//该变量表示已复制完的设备的个数\n</span><span class=\"c1\"></span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">iter</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">iter</span> <span class=\"o\">&lt;</span> <span class=\"n\">train_data_gpu</span><span class=\"p\">.</span><span class=\"n\">getNumber</span><span class=\"p\">()</span> <span class=\"o\">/</span> <span class=\"n\">train_data_sub</span><span class=\"p\">.</span><span class=\"n\">getNumber</span><span class=\"p\">();</span> <span class=\"n\">iter</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">iter_count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"n\">train_data_sub</span><span class=\"p\">.</span><span class=\"n\">shareData</span><span class=\"p\">(</span><span class=\"n\">train_data_gpu</span><span class=\"p\">,</span> <span class=\"n\">iter</span> <span class=\"o\">*</span> <span class=\"n\">train_data_sub</span><span class=\"p\">.</span><span class=\"n\">getNumber</span><span class=\"p\">());</span>\n            <span class=\"c1\">//同步未完成\n</span><span class=\"c1\"></span>            <span class=\"n\">WAIT_UNTIL</span><span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">parameters_collected</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"c1\">//训练各自网络\n</span><span class=\"c1\"></span>            <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">train_data_sub</span><span class=\"p\">.</span><span class=\"n\">X</span><span class=\"p\">(),</span> <span class=\"n\">train_data_sub</span><span class=\"p\">.</span><span class=\"n\">Y</span><span class=\"p\">());</span>\n            <span class=\"c1\">//发出网络训练结束信号\n</span><span class=\"c1\"></span>            <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">trained</span><span class=\"o\">++</span><span class=\"p\">;</span>    <span class=\"c1\">//该变量表示已训练完的设备的个数\n</span><span class=\"c1\"></span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">net_id</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"c1\">//主网络等待所有网络训练完成\n</span><span class=\"c1\"></span>                <span class=\"n\">WAIT_UNTIL</span><span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">trained</span> <span class=\"o\">==</span> <span class=\"n\">MP_count_</span> <span class=\"o\">||</span> <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">trained</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n                <span class=\"c1\">//同步\n</span><span class=\"c1\"></span>                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">MP_count_</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">nets</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"n\">Matrix</span><span class=\"o\">::</span><span class=\"n\">copyDataAcrossDevice</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">(),</span> <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getWorkspace</span><span class=\"p\">());</span>\n                        <span class=\"n\">Matrix</span><span class=\"o\">::</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">(),</span> <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getWorkspace</span><span class=\"p\">(),</span> <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">());</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">()</span><span class=\"o\">-&gt;</span><span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"n\">MP_count_</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n                <span class=\"c1\">//发布同步完成信号\n</span><span class=\"c1\"></span>                <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">parameters_collected</span> <span class=\"o\">=</span> <span class=\"n\">MP_count_</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>    <span class=\"c1\">//主网络权值已更新，因此此处减一\n</span><span class=\"c1\"></span>            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"c1\">//非主网络等待同步结束\n</span><span class=\"c1\"></span>                <span class=\"n\">WAIT_UNTIL</span><span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">parameters_collected</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n                <span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">parameters_collected</span><span class=\"o\">--</span><span class=\"p\">;</span>    <span class=\"c1\">//该变量表示未收集完权重的设备的个数\n</span><span class=\"c1\"></span>                <span class=\"c1\">//分发到各个网络\n</span><span class=\"c1\"></span>                <span class=\"n\">Matrix</span><span class=\"o\">::</span><span class=\"n\">copyDataAcrossDevice</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">(),</span> <span class=\"n\">net</span><span class=\"o\">-&gt;</span><span class=\"n\">getParameters</span><span class=\"p\">());</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"o\">-&gt;</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n</code></pre></div><p>主线程的部分代码如下：</p><div class=\"highlight\"><pre><code class=\"language-cpp\">    <span class=\"c1\">//创建训练进程\n</span><span class=\"c1\"></span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">thread</span><span class=\"o\">*&gt;</span> <span class=\"n\">net_threads</span><span class=\"p\">(</span><span class=\"n\">nets</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">());</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">net_threads</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">net_threads</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"kr\">thread</span><span class=\"p\">{</span> <span class=\"o\">&amp;</span><span class=\"n\">Brain</span><span class=\"o\">::</span><span class=\"n\">trainOneNet</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"n\">nets</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">train_info</span><span class=\"p\">,</span> <span class=\"n\">epoch_count_</span><span class=\"p\">,</span> <span class=\"n\">epoches</span> <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">epoch0</span> <span class=\"o\">=</span> <span class=\"n\">epoch_count_</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">epoch_count</span> <span class=\"o\">=</span> <span class=\"n\">epoch0</span><span class=\"p\">;</span> <span class=\"n\">epoch_count</span> <span class=\"o\">&lt;</span> <span class=\"n\">epoch0</span> <span class=\"o\">+</span> <span class=\"n\">epoches</span><span class=\"p\">;</span> <span class=\"n\">epoch_count</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">data_preparer</span><span class=\"o\">-&gt;</span><span class=\"n\">prepareData</span><span class=\"p\">(</span><span class=\"n\">epoch_count</span><span class=\"p\">,</span> <span class=\"n\">train_data_origin_</span><span class=\"p\">,</span> <span class=\"n\">train_data_cpu_</span><span class=\"p\">);</span>    <span class=\"c1\">//处理数据\n</span><span class=\"c1\"></span>        <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">data_prepared</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"n\">WAIT_UNTIL</span><span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">data_distributed</span> <span class=\"o\">==</span> <span class=\"n\">MP_count_</span> <span class=\"o\">||</span> <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n        <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">data_prepared</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">data_distributed</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">iter_count_</span> <span class=\"o\">+=</span> <span class=\"n\">iter_per_epoch</span><span class=\"p\">;</span>\n        <span class=\"n\">epoch_count_</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">stop</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">break</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">train_info</span><span class=\"p\">.</span><span class=\"n\">stop</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">net_threads</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">net_threads</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">-&gt;</span><span class=\"n\">join</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">safe_delete</span><span class=\"p\">(</span><span class=\"n\">net_threads</span><span class=\"p\">);</span>\n</code></pre></div><p>代码的解说待更新。</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/44009791", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "neural accumulator的性质", 
            "content": "<p>近期有论文提出新的激活方法neural accumulator，简称NAC，以及变化的NALU，外推效果较好。</p><p>不过其一开始的测试数据，看起来测试集与训练集可以认为在某种意义上不属于同一数据分布，测试的效果必定不可靠。</p><p>而这个激活的设计，似乎也有从结果反推过程的迹象。假使需要拟合的函数的大概形式已经知道，那拟合的结果必定很好。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>以上是本人的想法，其中可能有些错误，本人不对此负责。</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/36437247", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "围棋AI爆炸式增长", 
            "content": "<p>围棋AI呈现了爆炸式增长。</p><p>两年前还有很多人说短期内能与职业抗衡的AI不会出现，转眼就被啪啪打脸。</p><p>现在来看，大量棋谱训练出的神经网络提供了绝对棋感，而蒙特卡洛剪枝算法又提供了绝对算力，二者的结合获得了巨大的成功。</p><p>而最近腾讯的AI“绝艺”则比较令人失望。被自家的小弟击败，被迫临场更换权重，场面一度比较尴尬。OpenGo的发布很可能让民用级的电脑也能运行很强的AI。相比之下，即便考虑了Zero和Master方法的不同，拥有巨大财力和技术力的“绝艺”也不应当是这个水平。</p><p>这样来看，虽然目前的AI都很强，但是很难说能接近Alpha Zero的水平。</p><p>以上只是我个人的想法，请不要对号入座。</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "围棋", 
                    "tagLink": "https://api.zhihu.com/topics/19555495"
                }, 
                {
                    "tag": "腾讯", 
                    "tagLink": "https://api.zhihu.com/topics/19550757"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/35630854", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "PYTHON从SWIG指针读取数据到numpy", 
            "content": "<p>搜了很多，其中废话不少。经过实测，仅以下两种有效：</p><p>以下均假设adr是SWIG接口返回的一个float指针：</p><p>&lt;Swig Object of type &#39;float *&#39; at 0x00000XXXXXXXXXXX&gt;</p><p>size是要读取的数据个数。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>1.  int_asbuffer</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">frombuffer</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">multiarray</span><span class=\"o\">.</span><span class=\"n\">int_asbuffer</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">adr</span><span class=\"p\">)),</span> <span class=\"n\">size</span><span class=\"o\">*</span><span class=\"mi\">8</span><span class=\"p\">)</span></code></pre></div><p>int_asbuffer在python3的新版中好像是被删掉了，参考此页面：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cheshire/numpy/blob/master/doc/Py3K.txt\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cheshire/num</span><span class=\"invisible\">py/blob/master/doc/Py3K.txt</span><span class=\"ellipsis\"></span></a>。</p><div class=\"highlight\"><pre><code class=\"language-text\">multiarray.int_asbuffer\nConverts an integer to a void* pointer -- in Python.\nShould we just remove this for Py3? It doesn&#39;t seem like it is used anywhere, and it doesn&#39;t sound very useful.</code></pre></div><p>问题是真的没人用吗？</p><p>而且在numpy的c代码中有这么一段：</p><div class=\"highlight\"><pre><code class=\"language-c\"><span class=\"cp\">#if defined(NPY_PY3K)\n</span><span class=\"cp\"></span>    <span class=\"n\">PyErr_SetString</span><span class=\"p\">(</span><span class=\"n\">PyExc_RuntimeError</span><span class=\"p\">,</span>\n            <span class=\"s\">&#34;XXX -- not implemented!&#34;</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nb\">NULL</span><span class=\"p\">;</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">ro</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">PyBuffer_FromMemory</span><span class=\"p\">(</span><span class=\"n\">memptr</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">PyBuffer_FromReadWriteMemory</span><span class=\"p\">(</span><span class=\"n\">memptr</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"cp\">#endif</span></code></pre></div><p>出错提示非常有性格。作者希望大家不用Python3么？</p><p class=\"ztext-empty-paragraph\"><br/></p><p>2. ctypes</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"kn\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">frombuffer</span><span class=\"p\">((</span><span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_float</span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">from_address</span><span class=\"p\">(</span><span class=\"n\">adr</span><span class=\"p\">),</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span></code></pre></div><p>所以就用这个比较简单。</p>", 
            "topic": [
                {
                    "tag": "Python", 
                    "tagLink": "https://api.zhihu.com/topics/19552832"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/33480626", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "矩阵元素除的注意事项", 
            "content": "<p>计算中，有可能会出现矩阵元素除的计算，这个在cudnn中并没有提供函数，而是需要自己写一个cuda函数实现。但是需要注意，这里有可能出现分母为零的情况，导致训练立刻失败。</p><p>一般来说，这里都会先把分母统一加上一个很小的数（例如1e-5），来避免这个问题。</p><p>其实目前常用的几个激活函数是不会遇到这种情况的，近期新出现的胶囊网络的反向传播可能会存在这个问题。</p>", 
            "topic": [
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }, 
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/30970863", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "卷积计算的两个假设", 
            "content": "<p>在深度学习任务中，如果使用卷积计算，需要注意，数据应满足（或者大致满足）以下两个假设：</p><p>1 特征实际上仅被最近邻的数据决定（稀疏化）。</p><p>2 特征在各个不同位置的表现相同（权值共享）。</p><p>用略为专业的话来说，就是特征的局域性和平移不变性。</p><p>实际上围棋，图像均大致满足这两个假设。</p><p>例如围棋中，两个子离得很远，就基本没关系了；而一个棋型位于棋盘不同位置，判断的方法基本相近。图像也有类似的性质。</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }, 
                {
                    "tag": "深度学习（Deep Learning）", 
                    "tagLink": "https://api.zhihu.com/topics/19813032"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/25710746", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 0, 
            "title": "神经网程式中的一些具体问题", 
            "content": "<p><b>多GPU</b></p>如果系统上装有多张GPU卡，在多卡训练中，应注意以下问题：<p>需要在所有使用到的GPU设备上初始化cublas和cudnn。在计算的时候，选择的设备，数据所在的位置，以及cudnn或者cublas的handle必须一致，否则会出现十分奇怪的问题，甚至导致系统崩溃，非常难调试。</p><p>cuda的计算是线程安全的，启动线程的时候必须立刻设定计算设备。</p><p>一般来说，SGD算法比较适合并行。需要控制网络的数据同步等。</p><p><b>更新W</b></p><p>在更新权重的时候，有两种方式：一是立即更新W，并用更新后的W回传误差；二是在回传误差之后再更新W。</p><p>前者看似比较符合数值中的迭代思想，但是实际上是不准确的。</p><p><b>约束</b></p><p>一般来说设计一个简单的全连接网络，是可以做到一个较高水平的分类器的。在具体实践中，依据问题增加一些约束，往往会使效果变好。例如卷积网络强调了局部特征，延时网络强调了顺序等等。</p><p>神经网络是用一个非常复杂的模型去拟合一个实际问题，并没有太多神秘的地方。</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/24993012", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 20, 
            "title": "BLAS简介", 
            "content": "<p>对于机器学习来说，线性代数库是必不可少的功能，通常使用的都是实际上的标准blas库来完成矩阵运算。</p><p>blas库包含四类数据的计算：单精度实数s，双精度实数d，单精度复数c，双精度复数z。在机器学习中，最常用的是单精度实数。nvidia现在搞出来了半精度计算，但是现在用的并不多。</p><p>计算速度来说，自然是越快越好，在机器学习中大量依赖的是gemm（矩阵乘）和gemv（矩阵乘向量）。这里不建议使用blas网站上的fortran示例，这个库的实现很慢。现在计算速度比较快的blas库是intel的mkl，非商业的实现可以用openblas，后者最好自己编译一遍，以适合自己电脑的cpu。在gpu上计算一般使用cublas，号称速度是mkl的20倍左右。pascal架构的显卡计算双精度的速度远远慢于单精度（Tesla除外），所以使用双精度时gpu速度一般会反而慢于cpu。</p><p>如果想让你的库同时适应单精度和双精度，那么就要对接口做一番设计。blas中每个相同的功能都针对4种数据类型做了4遍，在c++里面则可以自己将其改为重载。示例代码在本文结尾，将cblas和cublas都调整为完全相同的接口。</p><p>当然先做一个基类，再用虚继承也是可以的，这样在实际编写的时候代码会很简化。但是无法在编译期做inline，所以一般我并不这样做。而且，即使全部使用gpu计算，仍然难免需要进行少量的cpu计算（例如在验证期），所以虚继承可能并不是一个好办法。</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"n\">blas_types</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"cp\">#pragma once\n</span><span class=\"cp\"></span>\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">MATRIX_NO_TRANS</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">MATRIX_TRANS</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"n\">MatrixTransType</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">MATRIX_LOWER</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">MATRIX_UPPER</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span> <span class=\"n\">MatrixFillType</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">MATRIX_NON_UNIT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">MATRIX_UNIT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span> <span class=\"n\">MatrixDiagType</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">MATRIX_LEFT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">MATRIX_RIGHT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span> <span class=\"n\">MatrixSideType</span><span class=\"p\">;</span>\n\n\n<span class=\"n\">cblas_real</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"cp\">#pragma once\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;cblas.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;blas_types.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"c1\">//Class of blas, overload functions with the same name for float and double.\n</span><span class=\"c1\"></span><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">Cblas</span> <span class=\"o\">:</span> <span class=\"n\">Blas</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#ifdef VIRTUAL_BLAS\n</span><span class=\"cp\"></span><span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span><span class=\"k\">private</span><span class=\"o\">:</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">Cblas</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"o\">~</span><span class=\"n\">Cblas</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"k\">private</span><span class=\"o\">:</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">CBLAS_TRANSPOSE</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">MatrixTransType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_NO_TRANS</span> <span class=\"o\">?</span> <span class=\"nl\">CblasNoTrans</span> <span class=\"p\">:</span> <span class=\"n\">CblasTrans</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">CBLAS_UPLO</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">MatrixFillType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_UPPER</span> <span class=\"o\">?</span> <span class=\"nl\">CblasUpper</span> <span class=\"p\">:</span> <span class=\"n\">CblasLower</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">CBLAS_DIAG</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">MatrixDiagType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_NON_UNIT</span> <span class=\"o\">?</span> <span class=\"nl\">CblasNonUnit</span> <span class=\"p\">:</span> <span class=\"n\">CblasUnit</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">CBLAS_SIDE</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">MatrixSideType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_LEFT</span> <span class=\"o\">?</span> <span class=\"nl\">CblasLeft</span> <span class=\"p\">:</span> <span class=\"n\">CblasRight</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_sdot</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_ddot</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">nrm2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_snrm2</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">asum</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_sasum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">nrm2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_dnrm2</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">asum</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cblas_dasum</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">int</span> <span class=\"n\">iamax</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"n\">cblas_isamax</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">));</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">int</span> <span class=\"n\">iamax</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"kt\">int</span><span class=\"p\">(</span><span class=\"n\">cblas_idamax</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">));</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sswap</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_scopy</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">axpy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_saxpy</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dswap</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dcopy</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">axpy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_daxpy</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotg</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_srotg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotmg</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_srotmg</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_srot</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_srotm</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotg</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_drotg</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotmg</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_drotmg</span><span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_drot</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_drotm</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">scal</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sscal</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">scal</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dscal</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sgemv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sgbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_strmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_stbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_stpmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_strsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_stbsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_stpsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dgemv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dgbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtrmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtpmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtrsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtbsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtpsv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssymv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">sbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sspmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">ger</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sger</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssyr</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sspr</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssyr2</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sspr2</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsymv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">sbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsbmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dspmv</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">ger</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dger</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsyr</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dspr</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsyr2</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dspr2</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_sgemm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssymm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syrk</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssyrk</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2k</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_ssyr2k</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_strmm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_strsm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dgemm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsymm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syrk</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsyrk</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2k</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dsyr2k</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtrmm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cblas_dtrsm</span><span class=\"p\">(</span><span class=\"n\">CblasColMajor</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">cublas_real</span><span class=\"p\">.</span><span class=\"n\">h</span>\n<span class=\"cp\">#pragma once\n</span><span class=\"cp\">#ifndef _NO_CUDA\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;cublas_v2.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\">#include</span> <span class=\"cpf\">&#34;blas_types.h&#34;</span><span class=\"cp\">\n</span><span class=\"cp\"></span>\n<span class=\"c1\">//Class of cublas, overload functions with the same name for float and double.\n</span><span class=\"c1\"></span><span class=\"k\">class</span><span class=\"err\"> </span><span class=\"nc\">Cublas</span> <span class=\"o\">:</span> <span class=\"n\">Blas</span>\n<span class=\"p\">{</span>\n<span class=\"cp\">#ifdef VIRTUAL_BLAS\n</span><span class=\"cp\"></span><span class=\"k\">public</span><span class=\"o\">:</span>\n<span class=\"cp\">#else\n</span><span class=\"cp\"></span><span class=\"k\">private</span><span class=\"o\">:</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">Cublas</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n    <span class=\"o\">~</span><span class=\"n\">Cublas</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n<span class=\"k\">private</span><span class=\"o\">:</span>\n<span class=\"cp\">#ifndef VIRTUAL_BLAS\n</span><span class=\"cp\"></span>    <span class=\"k\">static</span>\n<span class=\"cp\">#endif\n</span><span class=\"cp\"></span>    <span class=\"n\">cublasHandle_t</span> <span class=\"n\">handle_</span><span class=\"p\">;</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">cublasOperation_t</span> <span class=\"nf\">get_trans</span><span class=\"p\">(</span><span class=\"n\">MatrixTransType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_NO_TRANS</span> <span class=\"o\">?</span> <span class=\"nl\">CUBLAS_OP_N</span> <span class=\"p\">:</span> <span class=\"n\">CUBLAS_OP_T</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">cublasFillMode_t</span> <span class=\"nf\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">MatrixFillType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_UPPER</span> <span class=\"o\">?</span> <span class=\"nl\">CUBLAS_FILL_MODE_UPPER</span> <span class=\"p\">:</span> <span class=\"n\">CUBLAS_FILL_MODE_LOWER</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">cublasDiagType_t</span> <span class=\"nf\">get_diag</span><span class=\"p\">(</span><span class=\"n\">MatrixDiagType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_NON_UNIT</span> <span class=\"o\">?</span> <span class=\"nl\">CUBLAS_DIAG_NON_UNIT</span> <span class=\"p\">:</span> <span class=\"n\">CUBLAS_DIAG_UNIT</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"n\">cublasSideMode_t</span> <span class=\"nf\">get_side</span><span class=\"p\">(</span><span class=\"n\">MatrixSideType</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">t</span> <span class=\"o\">==</span> <span class=\"n\">MATRIX_LEFT</span> <span class=\"o\">?</span> <span class=\"nl\">CUBLAS_SIDE_LEFT</span> <span class=\"p\">:</span> <span class=\"n\">CUBLAS_SIDE_RIGHT</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"k\">static</span> <span class=\"n\">cublasStatus_t</span> <span class=\"n\">init</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">cublasCreate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">handle_</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"k\">static</span> <span class=\"kt\">void</span> <span class=\"n\">destroy</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDestroy</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"kt\">void</span> <span class=\"n\">set_handle</span><span class=\"p\">(</span><span class=\"n\">cublasHandle_t</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">handle_</span> <span class=\"o\">=</span> <span class=\"n\">h</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n<span class=\"k\">public</span><span class=\"o\">:</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">float</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasSdot</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">double</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasDdot</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">nrm2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">float</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasSnrm2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">float</span> <span class=\"n\">asum</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">float</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasSasum</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">nrm2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">double</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasDnrm2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">double</span> <span class=\"n\">asum</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">double</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasDasum</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">int</span> <span class=\"n\">iamax</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasIsamax</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">int</span> <span class=\"n\">iamax</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"kt\">int</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">cublasIdamax</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">r</span><span class=\"p\">);</span> <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSswap</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasScopy</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">axpy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSaxpy</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDswap</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDcopy</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">axpy</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDaxpy</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotg</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSrotg</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotmg</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSrotmg</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSrot</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSrotm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotg</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDrotg</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotmg</span><span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDrotmg</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"p\">,</span> <span class=\"n\">b1</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">b2</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rot</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDrot</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">s</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">rotm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">P</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDrotm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">P</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">scal</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSscal</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">scal</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDscal</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSgemv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSgbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStrmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStpmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStrsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStbsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStpsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDgemv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDgbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">KL</span><span class=\"p\">,</span> <span class=\"n\">KU</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtrmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtpmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtrsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tbsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtbsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">tpsv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtpsv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsymv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">sbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSspmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">ger</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSger</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsyr</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSspr</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsyr2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSspr2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsymv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">sbmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsbmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spmv</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDspmv</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">ger</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDger</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsyr</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Ap</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDspr</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Ap</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsyr2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">spr2</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDspr2</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">incX</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">incY</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSgemm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsymm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syrk</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsyrk</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2k</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSsyr2k</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStrmm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasStrsm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">gemm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDgemm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">symm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsymm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syrk</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsyrk</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">syr2k</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">Trans</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDsyr2k</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">Trans</span><span class=\"p\">),</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trmm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtrmm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">trsm</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixFillType</span> <span class=\"n\">Uplo</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixDiagType</span> <span class=\"n\">Diag</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDtrsm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">get_uplo</span><span class=\"p\">(</span><span class=\"n\">Uplo</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_diag</span><span class=\"p\">(</span><span class=\"n\">Diag</span><span class=\"p\">),</span> <span class=\"n\">M</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">ldb</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n\n    <span class=\"c1\">//extensions of cublas\n</span><span class=\"c1\"></span>    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">geam</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSgeam</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">geam</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransA</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">MatrixTransType</span> <span class=\"n\">TransB</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span> <span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldb</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDgeam</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransA</span><span class=\"p\">),</span> <span class=\"n\">get_trans</span><span class=\"p\">(</span><span class=\"n\">TransB</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">dgem</span><span class=\"p\">(</span><span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">incx</span><span class=\"p\">,</span> <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasSdgmm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">incx</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n    <span class=\"n\">BLAS_FUNC</span> <span class=\"kt\">void</span> <span class=\"n\">dgem</span><span class=\"p\">(</span><span class=\"n\">MatrixSideType</span> <span class=\"n\">Side</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">incx</span><span class=\"p\">,</span> <span class=\"kt\">double</span><span class=\"o\">*</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">ldc</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span> <span class=\"n\">cublasDdgmm</span><span class=\"p\">(</span><span class=\"n\">handle_</span><span class=\"p\">,</span> <span class=\"n\">get_side</span><span class=\"p\">(</span><span class=\"n\">Side</span><span class=\"p\">),</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">lda</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">incx</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">ldc</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"cp\">#endif\n</span></code></pre></div>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/24537035", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 1, 
            "title": "如何玩TK1", 
            "content": "TK1是nvidia出的一个开发板，可以尝试做嵌入式开发。目前来看，深度学习基本都是用nvidia的东西。<p>TK1里面预装了ubuntu 14.04。最好不要做任何升级操作。如果把里面的软件弄坏了，需要重新刷机，最好是从nvidia的网站（猛击<a href=\"https://link.zhihu.com/?target=https%3A//developer.nvidia.com/embedded-computing\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Embedded Computing</a>）上下载刷机包，找一台装有ubuntu14.04的电脑（找不到的话用虚拟机也行），将TK1转成恢复模式连接到电脑上并执行刷机程序。这个是有图形界面的，按照提示操作就可以了，会自动选择最合适的软件下载。不要相信网上找到的那些命令行刷机教程，不好操作，而且也容易出错。</p><p>可以从源里面安装cuda 6.5，包含了常用的包。如果需要用cudnn，就从nvidia的网站上下载cudnn 2.0的arm版来用。</p><p>cudnn 2.0仅包含卷积，池化，和几个基本的激活函数。如果代码已经用5.0来开发，就会比较尴尬了。但是能通过一些手段将为5.0写的功能转成2.0的可以接受的形式，下面是一些例子。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#define CUDNN_NOT_PROPAGATE_NAN 0\n</span><span class=\"cp\">#define CUDNN_ACTIVATION_CLIPPED_RELU cudnnActivationMode_t(CUDNN_ACTIVATION_TANH + 1)\n</span><span class=\"cp\">#define CUDNN_LRN_CROSS_CHANNEL_DIM1 0\n</span><span class=\"cp\">#define CUDNN_SAMPLER_BILINEAR 0\n</span><span class=\"cp\">#define CUDNN_DIVNORM_PRECOMPUTED_MEANS 0\n</span><span class=\"cp\">#define CUDNN_SOFTMAX_LOG CUDNN_SOFTMAX_FAST\n</span><span class=\"cp\"></span>\n<span class=\"c1\">//复制自cudnn5，只是为了使代码可以通过\n</span><span class=\"c1\"></span><span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">CUDNN_BATCHNORM_PER_ACTIVATION</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_BATCHNORM_SPATIAL</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnBatchNormMode_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">CUDNN_RNN_RELU</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_RNN_TANH</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_LSTM</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_GRU</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnRNNMode_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">CUDNN_UNIDIRECTIONAL</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_BIDIRECTIONAL</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnDirectionMode_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">CUDNN_LINEAR_INPUT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_SKIP_INPUT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnRNNInputMode_t</span><span class=\"p\">;</span>\n\n\n<span class=\"k\">typedef</span> <span class=\"k\">enum</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">CUDNN_OP_TENSOR_ADD</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_OP_TENSOR_MUL</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_OP_TENSOR_MIN</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">CUDNN_OP_TENSOR_MAX</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnOpTensorOp_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">cudnnConvolutionFwdAlgo_t</span> <span class=\"n\">algo</span> <span class=\"o\">=</span> <span class=\"n\">CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM</span><span class=\"p\">;</span>\n    <span class=\"n\">cudnnStatus_t</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">time</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span> <span class=\"n\">memory</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnConvolutionFwdAlgoPerf_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">cudnnConvolutionBwdFilterAlgo_t</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">cudnnConvolutionBwdFilterAlgo_t</span> <span class=\"n\">algo</span><span class=\"p\">;</span>\n    <span class=\"n\">cudnnStatus_t</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">time</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span> <span class=\"n\">memory</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnConvolutionBwdFilterAlgoPerf_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"kt\">int</span> <span class=\"n\">cudnnConvolutionBwdDataAlgo_t</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"n\">cudnnConvolutionBwdDataAlgo_t</span> <span class=\"n\">algo</span><span class=\"p\">;</span>\n    <span class=\"n\">cudnnStatus_t</span> <span class=\"n\">status</span><span class=\"p\">;</span>\n    <span class=\"kt\">float</span> <span class=\"n\">time</span><span class=\"p\">;</span>\n    <span class=\"n\">size_t</span> <span class=\"n\">memory</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">cudnnConvolutionBwdDataAlgoPerf_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">typedef</span> <span class=\"n\">cudnnOpTensorOp_t</span><span class=\"o\">*</span> <span class=\"n\">cudnnOpTensorDescriptor_t</span><span class=\"p\">;</span>\n<span class=\"k\">typedef</span> <span class=\"n\">cudnnActivationMode_t</span><span class=\"o\">*</span> <span class=\"n\">cudnnActivationDescriptor_t</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#define cudnnActivationForward(x1, x2, x3, x4, x5, x6, x7, x8) cudnnActivationForward(x1, *x2, x3, x4, x5, x6, x7, x8)\n</span><span class=\"cp\">#define cudnnActivationBackward(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12) cudnnActivationBackward(x1, *x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#define cudnnSetPooling2dDescriptor(x1, x2, x3, x4, x5, x6, x7, x8, x9) cudnnSetPooling2dDescriptor(x1, x2, x4, x5, x6, x7, x8, x9)\n</span><span class=\"cp\"></span>\n<span class=\"cp\">#define cudnnSetFilter4dDescriptor(x1, x2, x3, x4, x5, x6, x7) cudnnSetFilter4dDescriptor(x1, x2, x4, x5, x6, x7)\n</span><span class=\"cp\">#define cudnnConvolutionBackwardFilter(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) cudnnConvolutionBackwardFilter(x1, x2, x3, x4, x5, x6, x7, x11, x12, x13)\n</span><span class=\"cp\">#define cudnnConvolutionBackwardData(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13) cudnnConvolutionBackwardData(x1, x2, x3, x4, x5, x6, x7, x11, x12, x13)\n</span><span class=\"cp\"></span>\n</code></pre></div><p>这时，全连接和卷积之外的功能就基本不能用了，也不用考虑用CPU算卷积，实在太慢了。</p><p>此外nvml也不能用，要想办法用宏来屏蔽掉。</p><p>如果需要一些高级点的C++功能，看起来只能安装clang 3.4了。</p>", 
            "topic": [
                {
                    "tag": "机器学习", 
                    "tagLink": "https://api.zhihu.com/topics/19559450"
                }
            ], 
            "comments": []
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/23749164", 
            "userName": "TY Sun", 
            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
            "upvote": 1, 
            "title": "QT中使用OpenCV在控件中显示图片", 
            "content": "本文与QImage和QPixmap无关。<p>一般来说将OpenCV的图片显示在QT控件上，需要转成QImage和QPixmap，但是在图片尺寸较大时，转换的过程可能比较慢。下面是不通过QT的图片类，直接在控件上显示cv::Mat的方法。</p><p>title是std::string，可以认为是一个自定义的窗口名字。</p><div class=\"highlight\"><pre><code class=\"language-cpp\">        <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">namedWindow</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">WINDOW_AUTOSIZE</span><span class=\"p\">);</span>\n        <span class=\"n\">HWND</span> <span class=\"n\">hWnd</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">HWND</span><span class=\"p\">)</span><span class=\"n\">cvGetWindowHandle</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">.</span><span class=\"n\">c_str</span><span class=\"p\">());</span>\n        <span class=\"n\">HWND</span> <span class=\"n\">hParent</span> <span class=\"o\">=</span> <span class=\"n\">GetParent</span><span class=\"p\">(</span><span class=\"n\">hWnd</span><span class=\"p\">);</span>\n        <span class=\"n\">SetParent</span><span class=\"p\">(</span><span class=\"n\">hWnd</span><span class=\"p\">,</span> <span class=\"n\">new_hParent</span><span class=\"p\">);</span>\n        <span class=\"n\">ShowWindow</span><span class=\"p\">(</span><span class=\"n\">hParent</span><span class=\"p\">,</span> <span class=\"n\">SW_HIDE</span><span class=\"p\">);</span>\n</code></pre></div><p>上面的代码是创建一个标题是title的窗口，并更换这个窗口的父对象为HWND new_hParent代表的对象，同时隐藏原来的父对象。之后只要记住这个title，用cv::imshow(title, mat)就可以在其上显示图片了。</p><p>那么如何获得一个QT控件的HWND呢？只要用(HWND)widget-&gt;winId()就可以了。</p>", 
            "topic": [
                {
                    "tag": "OpenCV", 
                    "tagLink": "https://api.zhihu.com/topics/19587715"
                }, 
                {
                    "tag": "Qt（C++ 开发框架）", 
                    "tagLink": "https://api.zhihu.com/topics/19557800"
                }
            ], 
            "comments": [
                {
                    "userName": "水石", 
                    "userLink": "https://www.zhihu.com/people/ae800a97c9de40d06a8c695d2fe00897", 
                    "content": "<p>请问GetParent、SetParent、ShowWindow这几个函数是哪个库的？</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "TY Sun", 
                            "userLink": "https://www.zhihu.com/people/d03d300b967a42a3139de94910480aab", 
                            "content": "<p>Winuser.h</p>", 
                            "likes": 0, 
                            "replyToAuthor": "水石"
                        }, 
                        {
                            "userName": "水石", 
                            "userLink": "https://www.zhihu.com/people/ae800a97c9de40d06a8c695d2fe00897", 
                            "content": "<p>好的，多谢</p>", 
                            "likes": 0, 
                            "replyToAuthor": "TY Sun"
                        }
                    ]
                }, 
                {
                    "userName": "吴者也", 
                    "userLink": "https://www.zhihu.com/people/ac2379ff2a12599a44014c1ccb8457e4", 
                    "content": "<p>您好，请问有具体点的代码吗？如果是在Linux上使用，应该没有winuser.h库的，应该用什么来解决呢</p><p>谢谢</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/c_61786941"
}
