{
    "title": "Scala技术栈", 
    "description": "", 
    "followers": [
        "https://www.zhihu.com/people/angle-10-71-39", 
        "https://www.zhihu.com/people/yang-yu-xiang-15-78", 
        "https://www.zhihu.com/people/lao-li-82-53", 
        "https://www.zhihu.com/people/fu-sheng-ruo-meng-57-5", 
        "https://www.zhihu.com/people/yu-ming-lei-99", 
        "https://www.zhihu.com/people/pang-lu-lu-69", 
        "https://www.zhihu.com/people/jiang-ye-15", 
        "https://www.zhihu.com/people/131520", 
        "https://www.zhihu.com/people/du-chao-qun-38", 
        "https://www.zhihu.com/people/dan-xu-56-51", 
        "https://www.zhihu.com/people/bai-hu-li-xu", 
        "https://www.zhihu.com/people/zhu-ying-72-62", 
        "https://www.zhihu.com/people/SecondaryMarquis", 
        "https://www.zhihu.com/people/xie-chu-rong-80", 
        "https://www.zhihu.com/people/megabyte875", 
        "https://www.zhihu.com/people/vmew", 
        "https://www.zhihu.com/people/dior-37", 
        "https://www.zhihu.com/people/zuo-cang-mu-zi", 
        "https://www.zhihu.com/people/qixin-12", 
        "https://www.zhihu.com/people/yang-chao-44-66", 
        "https://www.zhihu.com/people/wu-hao-14-28", 
        "https://www.zhihu.com/people/zhaqiang", 
        "https://www.zhihu.com/people/gu-dao-95-79", 
        "https://www.zhihu.com/people/granguo", 
        "https://www.zhihu.com/people/galiano", 
        "https://www.zhihu.com/people/jin-mu-46-47", 
        "https://www.zhihu.com/people/wang-lin-jie", 
        "https://www.zhihu.com/people/leng-mo-de-sha-zi", 
        "https://www.zhihu.com/people/gameending", 
        "https://www.zhihu.com/people/icemanyu", 
        "https://www.zhihu.com/people/mili-71", 
        "https://www.zhihu.com/people/her0kings1ey", 
        "https://www.zhihu.com/people/ziqi-wan", 
        "https://www.zhihu.com/people/wang-yiren-77", 
        "https://www.zhihu.com/people/shui-shui-59-67", 
        "https://www.zhihu.com/people/tian-gao-yun-dan-54-94-78", 
        "https://www.zhihu.com/people/rickfang666", 
        "https://www.zhihu.com/people/sun-shi-jie-52", 
        "https://www.zhihu.com/people/liu-xiao-sheng-27", 
        "https://www.zhihu.com/people/xiao-jie-32", 
        "https://www.zhihu.com/people/jayci", 
        "https://www.zhihu.com/people/zhang-yan-15-25-75", 
        "https://www.zhihu.com/people/chen-rui-31-53", 
        "https://www.zhihu.com/people/er-xian-sheng-38", 
        "https://www.zhihu.com/people/chen-qi-14-72", 
        "https://www.zhihu.com/people/li-xuan-85-67", 
        "https://www.zhihu.com/people/zengyi.com", 
        "https://www.zhihu.com/people/xu-xian-xian-sheng-25", 
        "https://www.zhihu.com/people/yu-da-bao-24", 
        "https://www.zhihu.com/people/zengpingjiang", 
        "https://www.zhihu.com/people/zhyx-", 
        "https://www.zhihu.com/people/manee-39", 
        "https://www.zhihu.com/people/zhao-peng-69-79", 
        "https://www.zhihu.com/people/bryan-42-44", 
        "https://www.zhihu.com/people/qiuserudan", 
        "https://www.zhihu.com/people/0-0-39-6", 
        "https://www.zhihu.com/people/joseph295", 
        "https://www.zhihu.com/people/qing-shang-37-46", 
        "https://www.zhihu.com/people/xing-he-39-88", 
        "https://www.zhihu.com/people/wang-bin-39-30", 
        "https://www.zhihu.com/people/mei-guan-xi-wo-lai-la", 
        "https://www.zhihu.com/people/da-shou-qian-xiao-shou-qaq", 
        "https://www.zhihu.com/people/dai-jian-kun-84", 
        "https://www.zhihu.com/people/jacquelin-47", 
        "https://www.zhihu.com/people/zhi-zhi-37-22", 
        "https://www.zhihu.com/people/feng-38-19", 
        "https://www.zhihu.com/people/harlan-huang", 
        "https://www.zhihu.com/people/nan-xi-xi-22", 
        "https://www.zhihu.com/people/supercocoa", 
        "https://www.zhihu.com/people/ji-ran-11-69", 
        "https://www.zhihu.com/people/apple-love", 
        "https://www.zhihu.com/people/dong-fang-du-44", 
        "https://www.zhihu.com/people/qu-bing-98", 
        "https://www.zhihu.com/people/jiangzha", 
        "https://www.zhihu.com/people/ning-rain", 
        "https://www.zhihu.com/people/qi-zhao-jia-fei-mao-zhao-ha-shi-qi", 
        "https://www.zhihu.com/people/nemo-60-14-88", 
        "https://www.zhihu.com/people/qlijin", 
        "https://www.zhihu.com/people/li-han-67-22", 
        "https://www.zhihu.com/people/ni-ma-wang-80", 
        "https://www.zhihu.com/people/er-shuo-de-mi-li", 
        "https://www.zhihu.com/people/feng-liang-9-88", 
        "https://www.zhihu.com/people/zhang-dong-min-11", 
        "https://www.zhihu.com/people/chen-peter-41", 
        "https://www.zhihu.com/people/li-pei-26", 
        "https://www.zhihu.com/people/leomii", 
        "https://www.zhihu.com/people/ma-li-jian-86-65", 
        "https://www.zhihu.com/people/ji-ji-59-6", 
        "https://www.zhihu.com/people/BruceWDZ", 
        "https://www.zhihu.com/people/jasondliu", 
        "https://www.zhihu.com/people/rei-hawking", 
        "https://www.zhihu.com/people/xia-hou-tian-ge", 
        "https://www.zhihu.com/people/xu-qing-jia-yi", 
        "https://www.zhihu.com/people/liu-dong-liang-40", 
        "https://www.zhihu.com/people/abcd-13", 
        "https://www.zhihu.com/people/luo-wei-bin-35", 
        "https://www.zhihu.com/people/xiao-bo-bo-86-60", 
        "https://www.zhihu.com/people/gan-cao-70", 
        "https://www.zhihu.com/people/zhu-maggie-89", 
        "https://www.zhihu.com/people/devdasfun", 
        "https://www.zhihu.com/people/chromogenic", 
        "https://www.zhihu.com/people/wjl-adobe", 
        "https://www.zhihu.com/people/li-yuan-mei", 
        "https://www.zhihu.com/people/zhang-jie-79-46", 
        "https://www.zhihu.com/people/xiao-cheng-zi-19-72", 
        "https://www.zhihu.com/people/lin-xi-87-20", 
        "https://www.zhihu.com/people/pein-81", 
        "https://www.zhihu.com/people/gao-shu-60", 
        "https://www.zhihu.com/people/sphinx-myst", 
        "https://www.zhihu.com/people/dong-de-huo-zhao", 
        "https://www.zhihu.com/people/shao-bin-81", 
        "https://www.zhihu.com/people/mryang-5-7", 
        "https://www.zhihu.com/people/fan-ma-78", 
        "https://www.zhihu.com/people/guan-ren-26-55", 
        "https://www.zhihu.com/people/zhi-neng-huo-yi-ci-a", 
        "https://www.zhihu.com/people/aaron-98-71", 
        "https://www.zhihu.com/people/xlows1227", 
        "https://www.zhihu.com/people/xie-zhao-66-94", 
        "https://www.zhihu.com/people/ke-liu-4", 
        "https://www.zhihu.com/people/sunshengkai27", 
        "https://www.zhihu.com/people/wang-xiao-fei-92", 
        "https://www.zhihu.com/people/xu-hua-qing-6", 
        "https://www.zhihu.com/people/hewenning", 
        "https://www.zhihu.com/people/feng-da-peng-29", 
        "https://www.zhihu.com/people/wang-kun-89-95-44", 
        "https://www.zhihu.com/people/feng-yan-bin", 
        "https://www.zhihu.com/people/whjxnyzh", 
        "https://www.zhihu.com/people/ai-ai-shao-nian", 
        "https://www.zhihu.com/people/chen-lin-kun-83", 
        "https://www.zhihu.com/people/macronus", 
        "https://www.zhihu.com/people/yildhd-wang", 
        "https://www.zhihu.com/people/lin-yu-jun-93", 
        "https://www.zhihu.com/people/chain-xu", 
        "https://www.zhihu.com/people/liangddkk", 
        "https://www.zhihu.com/people/shan-dian-37-94", 
        "https://www.zhihu.com/people/liu-qi-55-99", 
        "https://www.zhihu.com/people/kermit-26", 
        "https://www.zhihu.com/people/ChrisGui", 
        "https://www.zhihu.com/people/ke-ke-23-12", 
        "https://www.zhihu.com/people/akelio", 
        "https://www.zhihu.com/people/syang", 
        "https://www.zhihu.com/people/liang-cai-55", 
        "https://www.zhihu.com/people/gaomingyang", 
        "https://www.zhihu.com/people/bruce-64-86", 
        "https://www.zhihu.com/people/li-pei-xuan-39", 
        "https://www.zhihu.com/people/jun-liu-11", 
        "https://www.zhihu.com/people/zhou-xiang-33-57", 
        "https://www.zhihu.com/people/bai-shen", 
        "https://www.zhihu.com/people/tuo-niao-bu-hui-fei-64", 
        "https://www.zhihu.com/people/wang-yong-8-33", 
        "https://www.zhihu.com/people/meng-de-bian-yuan-90", 
        "https://www.zhihu.com/people/reed-84-49", 
        "https://www.zhihu.com/people/525li", 
        "https://www.zhihu.com/people/jiejiebaba", 
        "https://www.zhihu.com/people/shakirachow", 
        "https://www.zhihu.com/people/Brian_Wang", 
        "https://www.zhihu.com/people/jowood-13", 
        "https://www.zhihu.com/people/benjamin-15-82", 
        "https://www.zhihu.com/people/pai-da-xiong", 
        "https://www.zhihu.com/people/xue-shun-yuan", 
        "https://www.zhihu.com/people/liang-li-87-55", 
        "https://www.zhihu.com/people/123456-36-71", 
        "https://www.zhihu.com/people/reader2018", 
        "https://www.zhihu.com/people/cyberland", 
        "https://www.zhihu.com/people/andrew-wang-67-85", 
        "https://www.zhihu.com/people/zhang-jia-min-80", 
        "https://www.zhihu.com/people/zhang-wei-3-49-41", 
        "https://www.zhihu.com/people/razertory", 
        "https://www.zhihu.com/people/xiong-hong-han", 
        "https://www.zhihu.com/people/xiong-ao", 
        "https://www.zhihu.com/people/stone-72", 
        "https://www.zhihu.com/people/di-la-ke-zhi-hai-73", 
        "https://www.zhihu.com/people/ryan_ryan", 
        "https://www.zhihu.com/people/wilsonliu", 
        "https://www.zhihu.com/people/chobits-63", 
        "https://www.zhihu.com/people/zhang-ming-feng-91", 
        "https://www.zhihu.com/people/moyerock", 
        "https://www.zhihu.com/people/gao-ming-73-20", 
        "https://www.zhihu.com/people/niceejuice", 
        "https://www.zhihu.com/people/ticktock-47", 
        "https://www.zhihu.com/people/cheng-yong-qiao", 
        "https://www.zhihu.com/people/divis-7", 
        "https://www.zhihu.com/people/xu-fu-28", 
        "https://www.zhihu.com/people/xin-ba-33-19", 
        "https://www.zhihu.com/people/er-jin-zhi-43", 
        "https://www.zhihu.com/people/li-cheng-12-57-49", 
        "https://www.zhihu.com/people/woodboy456", 
        "https://www.zhihu.com/people/zhao-xin-32-20", 
        "https://www.zhihu.com/people/monotseng", 
        "https://www.zhihu.com/people/junhong-84", 
        "https://www.zhihu.com/people/lei-zi-hai", 
        "https://www.zhihu.com/people/peng-jin-yi", 
        "https://www.zhihu.com/people/chen-hong-45-16", 
        "https://www.zhihu.com/people/xxt-44", 
        "https://www.zhihu.com/people/eta-100a", 
        "https://www.zhihu.com/people/zhulongyun", 
        "https://www.zhihu.com/people/zhihu-cning12", 
        "https://www.zhihu.com/people/lu-yun-fan-52", 
        "https://www.zhihu.com/people/hjforever", 
        "https://www.zhihu.com/people/chen-yi-liang-64-71", 
        "https://www.zhihu.com/people/TAT_hanxiao", 
        "https://www.zhihu.com/people/pattern", 
        "https://www.zhihu.com/people/qing-tian-14-44-7", 
        "https://www.zhihu.com/people/jason-zhang-74-30", 
        "https://www.zhihu.com/people/lovefishs", 
        "https://www.zhihu.com/people/seven-cool", 
        "https://www.zhihu.com/people/xue-xiao-han", 
        "https://www.zhihu.com/people/sofn-le", 
        "https://www.zhihu.com/people/whoamienen", 
        "https://www.zhihu.com/people/zhang-yh-54", 
        "https://www.zhihu.com/people/john-8-48", 
        "https://www.zhihu.com/people/YukiSou", 
        "https://www.zhihu.com/people/mokena", 
        "https://www.zhihu.com/people/he-xiao-tang-68", 
        "https://www.zhihu.com/people/mou-mo-mo-33", 
        "https://www.zhihu.com/people/liu-zi-ling-83", 
        "https://www.zhihu.com/people/pitopi2010", 
        "https://www.zhihu.com/people/guiji101", 
        "https://www.zhihu.com/people/gu-du-huan-zhe-39-13-89", 
        "https://www.zhihu.com/people/weiwen", 
        "https://www.zhihu.com/people/fuguechin", 
        "https://www.zhihu.com/people/chen-chen-51-24", 
        "https://www.zhihu.com/people/wang-yitian-59-29", 
        "https://www.zhihu.com/people/ravna-nuwen", 
        "https://www.zhihu.com/people/liu-guan-shi-9", 
        "https://www.zhihu.com/people/Linuxea", 
        "https://www.zhihu.com/people/ji-qiu-jia", 
        "https://www.zhihu.com/people/xizengfei", 
        "https://www.zhihu.com/people/xie-tao-47-50", 
        "https://www.zhihu.com/people/hui-xi-74", 
        "https://www.zhihu.com/people/zui-xia-4-19", 
        "https://www.zhihu.com/people/zheng-tuo-hong", 
        "https://www.zhihu.com/people/ATXON", 
        "https://www.zhihu.com/people/yige-qi-gai", 
        "https://www.zhihu.com/people/wook9615", 
        "https://www.zhihu.com/people/dou-bi-48-50", 
        "https://www.zhihu.com/people/kevin-song-19", 
        "https://www.zhihu.com/people/xun1", 
        "https://www.zhihu.com/people/johnsmith22", 
        "https://www.zhihu.com/people/a-chou-34-10", 
        "https://www.zhihu.com/people/world-hello-76-67", 
        "https://www.zhihu.com/people/ni-wei-wei-65", 
        "https://www.zhihu.com/people/bi-ge-91", 
        "https://www.zhihu.com/people/dsc-debian", 
        "https://www.zhihu.com/people/muufeng", 
        "https://www.zhihu.com/people/barry-zhong-99", 
        "https://www.zhihu.com/people/msowb-93", 
        "https://www.zhihu.com/people/kaizener-74", 
        "https://www.zhihu.com/people/skywind2006", 
        "https://www.zhihu.com/people/Nicekingwei", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/chen-xiao-ge-35", 
        "https://www.zhihu.com/people/wang-shuai-96-51", 
        "https://www.zhihu.com/people/wen-zhi-hong", 
        "https://www.zhihu.com/people/kurisu-ti-na", 
        "https://www.zhihu.com/people/lovecraft", 
        "https://www.zhihu.com/people/lolicon", 
        "https://www.zhihu.com/people/yi-lu-huan-ge-59", 
        "https://www.zhihu.com/people/wu-zhong-sheng-you-70-57"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/74763832", 
            "userName": "Wang Wayne", 
            "userLink": "https://www.zhihu.com/people/f0e494a134c4b2c85140f3aa85361120", 
            "upvote": 7, 
            "title": "第五届阿里中间件比赛初赛攻略", 
            "content": "<p>今天中间件初赛终于结束了。第二次参赛感觉整个人都轻松了很多，所以心态很放松。比赛中间正好在换工作，新公司大小周，中间有一周做了个手术，然后有一个周末因为耳鸣得难受所以摊在家里啥都没干。后来算了下，总体算下来其实也就开始第一周和最后一周两个完整周末加上数个零散的晚上在参与比赛。说实话，这种节奏比之前的感觉好多了，但是最终成绩上来也蛮惊险的。过去的那一个周末确实很认真地在探索方案，幸好最终结果还不错，最后如果去掉用了点小技巧被判定为作弊的第一名，这次是以初赛第六的成绩进入的复赛。</p><p>稍微讲一下我是怎么做的。</p><h3>回压为主</h3><p>就好像去年参与中间件的目的一样，今年其实也是要宣传一下反应式的解决方案。所以在开始的第一周周末，我就实现了一版本的带回压的方案。具体大致描述如下：</p><ol><li>Gateway维护一个<code>ConcurrentLinkedQueue[WorkRequest]</code>，其中WorkRequest里面记录Provider的唯一标志。之后LoadBalance从这个队列里面一直Poll工作请求。如果有则选择对应的Provider打过去，如果没有则循环等待(此时称Provider端对Gateway产生了回压);</li><li>Provider端注册Listener的时候，告知Gateway其最大线程数能力maxThreads；然后Gateway那端的Listener接收到信息后，发送maxThreads数量大小的WorkRequest到 1 中的队列；</li><li>每次请求完成之后，将WorkRequest还给队列。</li></ol><p>如此，整个系统就围绕队列开展开了。其实在最早我加了一个队列来排队外部的request。但是因为外部request最多也就1024，不需要做超限降级的工作，所以后来我把这个Queue给去掉了。</p><p>相关整体的实现可以直接看《反应式设计模式》的16章。最早的版本我实现了拉取模式和托管队列模式。后续去掉了托管队列，只留下了拉取模式带来的回压效果。所以，在初期版本，请求一个都不会出错。因为不会打超过Provider负载能力的请求过去。</p><p>在初赛开始的第一天，我短暂地登上了榜首。然后后面就专心准备工作交接和手术，基本就没花多少时间上去了。</p><h3>最大剩余能力路由</h3><p>手术之后回来，稍微看了一下。评测程序变动很快，在第一天的第一之后，没过几天我就连前两百都进不去了。最简单的拉取模式其实对于同质化的Worker效果挺好的，只不过这次比赛的响应时间比较奇特，无法通过响应时间判定Worker的能力大小，所以一直才126W左右的成绩。我想着不管怎样，不能连复赛都进不去吧。所以在周日的那天仔细撸了一个版本的按照权重路由。具体思路是根据Little&#39;s Law来的。</p><p>Little&#39;s Law讲的是这样的一件事情。如果一个处理者处理一件事情的耗费的时间是W，假设其处理的速率为R, 那么在他面前排队的工作的数量Q可以如下表示：</p><div class=\"highlight\"><pre><code class=\"language-text\">Q = R * W</code></pre></div><p>然后，我们可以根据Q的大小和Provider的耗时，判断出处理速率可能最高的Provider，然后将请求打过去。而每个Provider的Q的初始大小，就是其最大线程数maxThreads。</p><p>这个时候，因为统计W的代码写起来比较麻烦。所以习惯性偷懒的我先写了一版本的直接假定所有Provider的W是一样的，然后按照剩余最大Q发送过去的代码，逻辑如下：</p><ol><li>对每个Provider在Gateway端维护一个ProviderStatus。其中各自都有一个类型为<code>LinkedBlockingQueue[WorkRequest]</code>的workRequestQueue。仍然按照前面说的，注册的时候每个队列都发maxThreads数量的WorkRequest，直到完成初始化。</li><li>LoadBalancer选择的时候，比较每个Provider的workRequestQueue的大小，size最大的把请求发过去。</li><li>请求处理完成后，发还workRequest给对应的ProviderStatus的workRequestQueue.</li></ol><p>之后提交，虽然成绩变动比较大，但是最高分到了128.3W。我瞅了一眼，发现好像够进复赛了。后续就专心适应新公司的995.5生活了。</p><h3>改善回压</h3><p>因为基本上可以确定能进复赛了，所以后续我的精力都放在了改善回压上了。思考了一下为什么回压的性能不太行，主要在于Provider端的响应时间随机性太大。虽然平均值是确定的，但是相邻两个请求，可能一个是1ms，另外一个就100ms了。所以没有办法按照同质化的worker那样较好地路由过去。所以我就想能不能根据RTT在队列的数据结构上做文章。</p><p>我做的第一个尝试是用多个队列来接收WorkRequest。每个队列的优先级不一样，优先级最高的队列只接受上一次请求的延迟在40ms之内的WorkRequest。然后一个队列是40到 60ms之间，最后一个是大于60ms的。但是实践测试下来效果并不明显。因为Rtt响应时间比较久的WorkRequest会到队列后面去，所以一旦一个Provider出现了较大的延迟，则其参与到整个过程的权重就会减少。而出现大请求的可能性还是比较高的，所以一旦出现大的延迟，这个Provider的权重就会永久性下降。因为前面的workRequest根本就用不完。所以这个方案的成绩比纯粹的回压更差。</p><p>然后我想到了优先队列。每次都取响应时间最小的Provider发过去，这样只要Provider的响应更快，则其拿到的请求就会更多。但是这么做还是会遇到和前面相同的问题。一旦一个Provider出现了一个大的请求，则其权重可能就永久性下降了，而且无法恢复。因为优先队列无法把最后面的workRequest拿出来。</p><p>之后就考察了一下双端队列。既可以拿前面，也可以拿后面。但是这个时候应该按照什么样的规律把后面的拿出来呢？又应该按照什么样的规律把workRequest送到前面去呢？想了又想，发现这个判断要写下来逻辑蛮复杂的。不如找个又像优先队列，又能从前、从后拿workRequest请求的数据结构好了。</p><p>于是<code>ConcurrentSkipListSet[WorkRequest]</code>进入了眼帘。</p><h3>基于跳跃表的回压解决方案</h3><p>跳表有这样的一个特性，它可以按照元素的Comparator对象来排序元素。也就是说我可以按照请求延迟的大小，对workRequest做一个排序。而其插入和删除的复杂度都是O(logN)。所以其构建和获取的性能都很好，并且可以自动排序延迟。当我们觉得延迟偶然较大的WorkRequest饥饿很久的时候，我们可以从最后将其取出，并重新放入队列进行排序。</p><p>在Java中直接就有<code>ConcurrentSkipListSet</code>拿来用。只不过用的时候需要注意一下，其是一个Set。也就是说，如果有两个请求，其延迟相同，Provider标志相同，则在Set内部就会被合并成一个。</p><p>在开始的时候，我的WorkRequest的设置是这样的：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">WorkRequest</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"o\">;</span>\n    <span class=\"kd\">final</span> <span class=\"n\">Long</span> <span class=\"n\">latency</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">WorkRequest</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">latency</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">latency</span> <span class=\"o\">=</span> <span class=\"n\">latency</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Compartor</span> <span class=\"kd\">implements</span> <span class=\"n\">Comparator</span><span class=\"o\">&lt;</span><span class=\"n\">WorkRequest</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"o\">(</span><span class=\"n\">WorkRequest</span> <span class=\"n\">o1</span><span class=\"o\">,</span> <span class=\"n\">WorkRequest</span> <span class=\"n\">o2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">o1</span><span class=\"o\">.</span><span class=\"na\">latency</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">o2</span><span class=\"o\">.</span><span class=\"na\">latency</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p>这就导致WorkRequest在latency冲突的情况下越变越少，最后性能竟然比直接一个队列都还差。</p><p>后续发现了原因所在，就将WorkRequest的定义改成这样的了：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">WorkRequest</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"o\">;</span>\n    <span class=\"kd\">final</span> <span class=\"n\">Double</span> <span class=\"n\">latency</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">WorkRequest</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">port</span><span class=\"o\">,</span> <span class=\"kt\">long</span> <span class=\"n\">latency</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">latency</span> <span class=\"o\">=</span> <span class=\"n\">latency</span> <span class=\"o\">+</span> <span class=\"n\">ThreadLocalRandom</span><span class=\"o\">.</span><span class=\"na\">current</span><span class=\"o\">().</span><span class=\"na\">nextDouble</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">Compartor</span> <span class=\"kd\">implements</span> <span class=\"n\">Comparator</span><span class=\"o\">&lt;</span><span class=\"n\">WorkRequest</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">compare</span><span class=\"o\">(</span><span class=\"n\">WorkRequest</span> <span class=\"n\">o1</span><span class=\"o\">,</span> <span class=\"n\">WorkRequest</span> <span class=\"n\">o2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">o1</span><span class=\"o\">.</span><span class=\"na\">latency</span><span class=\"o\">.</span><span class=\"na\">compareTo</span><span class=\"o\">(</span><span class=\"n\">o2</span><span class=\"o\">.</span><span class=\"na\">latency</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p>因为后面的<code>ThreadLocalRandom.current().nextDouble()</code>基本不会冲突，所以WorkRequest的数量和初始数量会大致保持一致。</p><p>这时候，跳表就成为了一个智能的回压队列。我们一直<code>pollFirst</code>，也就是选择最小响应延迟的provider发出去。这个时候就是完全优先Rtt的过程了。</p><p>当然，如果不做特殊处理的话，它还是会出现我前面说的，大请求的饥饿问题。大请求一直得不到调度，provider端的加权情况就一直没有变化。这个时候在负载变化的时候，后端的加权也不是稳定变化，而是根据Provider的随机响应情况而变化。于是就得想办法解决这个问题。</p><p>那么，如何解决呢？</p><p>TCP的拥塞探测机制。</p><p>TCP在探测发送窗口的时候，会有一个慢启动的过程。在启动的过程中，它会发送探测包到接收方。如果接收方很快地响应了这个包，说明接收方并未排队，于是发送方逐渐扩大发送窗口；如果接收方没有很快响应这个包，则发送方就逐渐减小发送窗口。所以，如果我们能和Provider端建立这样的探测机制的话，那么，我们也可以逐渐扩大发送给Provider的容量。</p><p>但是我们没有办法在题目限制的基础上完成这个事情。因为我们没有办法在Provider端建立一个快速连接。然后我想到的办法是，根据Provider端的随机响应性。因为其范围比较大，只要不排队，在一定时间内，肯定会出现响应时间小于3ms的请求。一旦碰到这个请求的时候，我们就从跳表队列的最后位置拉出来workRequest，并将其重新设置为该Provider的workRequest(实际上应该选一个不是该Provider的来替换。但是这点我偷懒了没有做)。</p><p>于是，在探测到latency的时候，将workRequest写回去的代码就变成了这样：</p><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">recordLatency</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">latency</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">latency</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"n\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">latency</span> <span class=\"o\">&lt;</span> <span class=\"n\">3</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">requestQueue</span><span class=\"o\">.</span><span class=\"na\">pollLast</span><span class=\"o\">();</span>\n                    <span class=\"n\">requestQueue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">WorkRequest</span><span class=\"o\">(</span><span class=\"n\">port</span><span class=\"o\">,</span> <span class=\"n\">latency</span><span class=\"o\">));</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">request</span><span class=\"o\">(</span><span class=\"n\">50</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span></code></pre></div><p>注意最后的<code>request(50)</code>。该函数的定义如下：</p><div class=\"highlight\"><pre><code class=\"language-java\">    <span class=\"kt\">void</span> <span class=\"nf\">request</span><span class=\"o\">(</span><span class=\"kt\">long</span> <span class=\"n\">latency</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">requestQueue</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">WorkRequest</span><span class=\"o\">(</span><span class=\"n\">port</span><span class=\"o\">,</span> <span class=\"n\">latency</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span></code></pre></div><p>一定要注意这一点。我其实不是有意写成request(50)的。完全就是手误，因为本身最正常的思维应该是<code>request(latency)</code>。但是就是这一神奇的手误，就让代码的本地成绩直接提高了三万多，我本地测试的结果达到了132W！为什么呢？！</p><p>因为如果是按照当次响应时间来进行的话，provider端的提权操作就并不明显了。其权重还是按照上一周期的响应时间来排列的。而因为比赛场景时间变化很快，所以在场景变更的时候，变化相对来说慢很多。</p><p>但是<code>request(50)</code>就不一样了。初始化的过程中，就是<code>request(50)</code>。也就是说，一旦出现了一个1ms的快速响应，则该Provider的workRequest大概率会多一个并且迅速顶到前面去，而回来之后，就都变成了50.xxx放入跳表队列。而这个时候跳表队列呈现的是一个加权随机的效果。因为所有的都是按照50.xxx后面的xxx加权随机排列的。权重则是每个Provider的workRequest的数量。所以权重一直稳定地保持变化，不受Rtt的干扰。而Rtt则精准地设置了不同的Provider的权重。于是，整个系统就表现成智能的、动态变更权重的效果。然后在第一次提交上去的时候，系统就跑到了130.15的成绩，最终获得初赛的第六名。</p><h3>经验总结</h3><p>所以，在开发的过程中，对各种数据结构有一定的了解是非常有好处的。反应式回压是个很好的解决方案，但是在实现的过程中，也要按照实际场景灵活调整。这次初赛的攻略我大致就写这么多。希望对大家能有所帮助。</p><p>至于复赛的解析，如果这篇点在看的人数足够多，那周末的时候咱看看能不能写下复赛的解析。如果不够的话，那大家就自己好好努力吧！复赛加油哟！</p><p>P.S. 不做广告不舒服斯基。我们这边大量招人，有兴趣的请直接发送简历到wangshichong.wayne@bytedance.com哟。</p><p class=\"ztext-empty-paragraph\"><br/></p><p>顺便欢迎关注我的公众号，写Scala的老王。</p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-cdbda941102c0108309d1b0ce44cedd8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"258\" class=\"content_image\" width=\"258\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;258&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"258\" class=\"content_image lazy\" width=\"258\" data-actualsrc=\"https://pic1.zhimg.com/v2-cdbda941102c0108309d1b0ce44cedd8_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "中间件", 
                    "tagLink": "https://api.zhihu.com/topics/19599657"
                }, 
                {
                    "tag": "阿里云", 
                    "tagLink": "https://api.zhihu.com/topics/19560108"
                }, 
                {
                    "tag": "编程", 
                    "tagLink": "https://api.zhihu.com/topics/19554298"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/scalaStack"
}
