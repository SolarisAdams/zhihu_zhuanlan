{
    "title": "简单易懂的现代魔法", 
    "description": "麻瓜的世界", 
    "followers": [
        "https://www.zhihu.com/people/yan-jing-65-26", 
        "https://www.zhihu.com/people/mr03", 
        "https://www.zhihu.com/people/prideofu", 
        "https://www.zhihu.com/people/zhang-xiao-er-40", 
        "https://www.zhihu.com/people/fei007", 
        "https://www.zhihu.com/people/luo-jia-78-17", 
        "https://www.zhihu.com/people/EXHades", 
        "https://www.zhihu.com/people/Hashimoto_Makico", 
        "https://www.zhihu.com/people/zhang-nai-ge-33", 
        "https://www.zhihu.com/people/daraw", 
        "https://www.zhihu.com/people/zhao-chi-31-10", 
        "https://www.zhihu.com/people/Himself65", 
        "https://www.zhihu.com/people/li-zheng-cao-94", 
        "https://www.zhihu.com/people/ni-a-shi-ni", 
        "https://www.zhihu.com/people/meiko-73", 
        "https://www.zhihu.com/people/yinyun957", 
        "https://www.zhihu.com/people/mao-wei-yu-31", 
        "https://www.zhihu.com/people/nyarlathotep-58", 
        "https://www.zhihu.com/people/thewinged", 
        "https://www.zhihu.com/people/gaobo-92", 
        "https://www.zhihu.com/people/lxyPJ", 
        "https://www.zhihu.com/people/long-ze-7-35", 
        "https://www.zhihu.com/people/nuaalht", 
        "https://www.zhihu.com/people/yang-yang-yang-57-16", 
        "https://www.zhihu.com/people/zhang-wei-38-55", 
        "https://www.zhihu.com/people/wasd-20-22", 
        "https://www.zhihu.com/people/sakz", 
        "https://www.zhihu.com/people/stephen-52-29", 
        "https://www.zhihu.com/people/wang-00012", 
        "https://www.zhihu.com/people/fan-shuo-97", 
        "https://www.zhihu.com/people/wang-xin-21-61", 
        "https://www.zhihu.com/people/ttyuyu", 
        "https://www.zhihu.com/people/gao-xi-yu-44", 
        "https://www.zhihu.com/people/yd-guo", 
        "https://www.zhihu.com/people/li-xiao-zhi-90", 
        "https://www.zhihu.com/people/wu-yan-91", 
        "https://www.zhihu.com/people/bao-zi-96", 
        "https://www.zhihu.com/people/chen-zhang-xuan", 
        "https://www.zhihu.com/people/hua-luo-wu-sheng-62-16", 
        "https://www.zhihu.com/people/xuan-yuan-wu-si", 
        "https://www.zhihu.com/people/jamin-11-94", 
        "https://www.zhihu.com/people/szanlin", 
        "https://www.zhihu.com/people/lin-chao-95", 
        "https://www.zhihu.com/people/yincong", 
        "https://www.zhihu.com/people/dong-dong-46-64", 
        "https://www.zhihu.com/people/zhao-da-da-43", 
        "https://www.zhihu.com/people/bi-da-lian", 
        "https://www.zhihu.com/people/Neo_H", 
        "https://www.zhihu.com/people/kulkevan", 
        "https://www.zhihu.com/people/qiao-lei-19-29", 
        "https://www.zhihu.com/people/dian-wen-zi-xun-yan", 
        "https://www.zhihu.com/people/sgt-mr", 
        "https://www.zhihu.com/people/wuciren17", 
        "https://www.zhihu.com/people/zhao-jun-hao-5", 
        "https://www.zhihu.com/people/chasel-29-89", 
        "https://www.zhihu.com/people/love_spongebob", 
        "https://www.zhihu.com/people/shi-yi-nian-49", 
        "https://www.zhihu.com/people/wang-lang-96-64", 
        "https://www.zhihu.com/people/diamond007", 
        "https://www.zhihu.com/people/zhao-yu-73-75", 
        "https://www.zhihu.com/people/yan-jian-76-38", 
        "https://www.zhihu.com/people/fanshuzero", 
        "https://www.zhihu.com/people/xi-lan-de", 
        "https://www.zhihu.com/people/camark", 
        "https://www.zhihu.com/people/firstfu", 
        "https://www.zhihu.com/people/FuFaJuShi", 
        "https://www.zhihu.com/people/igeek", 
        "https://www.zhihu.com/people/po-xiao-68-17", 
        "https://www.zhihu.com/people/chen-jun-kun", 
        "https://www.zhihu.com/people/kang.ning", 
        "https://www.zhihu.com/people/tianzhen-66", 
        "https://www.zhihu.com/people/da-luo-tuo-97", 
        "https://www.zhihu.com/people/huang-ming-yu-72", 
        "https://www.zhihu.com/people/xie-ding-e-de-lao-hu", 
        "https://www.zhihu.com/people/mr-lin-82-68", 
        "https://www.zhihu.com/people/1024-10-45", 
        "https://www.zhihu.com/people/mou-dian-95", 
        "https://www.zhihu.com/people/lin-shao-wei-36", 
        "https://www.zhihu.com/people/gaozhongguoliu", 
        "https://www.zhihu.com/people/wang-lin-27-28", 
        "https://www.zhihu.com/people/sashay", 
        "https://www.zhihu.com/people/chen-shang-35", 
        "https://www.zhihu.com/people/ge-yao-76", 
        "https://www.zhihu.com/people/julytian", 
        "https://www.zhihu.com/people/greg-75", 
        "https://www.zhihu.com/people/li-lin-wei-36", 
        "https://www.zhihu.com/people/zhang-qiao-74-14-2", 
        "https://www.zhihu.com/people/xioxin", 
        "https://www.zhihu.com/people/30lao-diao", 
        "https://www.zhihu.com/people/samurai3701", 
        "https://www.zhihu.com/people/lailin", 
        "https://www.zhihu.com/people/ran-nuo-huang", 
        "https://www.zhihu.com/people/zhong-da-lao-hao-qiang-a", 
        "https://www.zhihu.com/people/zhao-qing-90-84", 
        "https://www.zhihu.com/people/sparks-46-32", 
        "https://www.zhihu.com/people/bewater-8", 
        "https://www.zhihu.com/people/obby-60", 
        "https://www.zhihu.com/people/isting321", 
        "https://www.zhihu.com/people/giant750-18", 
        "https://www.zhihu.com/people/ma-gong-tong", 
        "https://www.zhihu.com/people/wu-yue-xuan-qi", 
        "https://www.zhihu.com/people/ye-yue-92-27", 
        "https://www.zhihu.com/people/le-yi-90-69", 
        "https://www.zhihu.com/people/likelxl", 
        "https://www.zhihu.com/people/yu-sheng-hong-qiu-zao", 
        "https://www.zhihu.com/people/li-yan-liang-99", 
        "https://www.zhihu.com/people/li-cen-54-52", 
        "https://www.zhihu.com/people/wanglar-47", 
        "https://www.zhihu.com/people/zhihang-liu", 
        "https://www.zhihu.com/people/harry-fish", 
        "https://www.zhihu.com/people/hua-li-shu-bao", 
        "https://www.zhihu.com/people/jambalaya-63", 
        "https://www.zhihu.com/people/yh-ding", 
        "https://www.zhihu.com/people/zhu-yun-li-7", 
        "https://www.zhihu.com/people/lilijialiang", 
        "https://www.zhihu.com/people/ceng-yan-ying", 
        "https://www.zhihu.com/people/liang-yuan-36", 
        "https://www.zhihu.com/people/ticktock-47", 
        "https://www.zhihu.com/people/zhou-wen-bo-65", 
        "https://www.zhihu.com/people/lg-dong", 
        "https://www.zhihu.com/people/chen-guang-61-55", 
        "https://www.zhihu.com/people/wang-xiang-zhong-5", 
        "https://www.zhihu.com/people/liqiong", 
        "https://www.zhihu.com/people/linuxcpp", 
        "https://www.zhihu.com/people/laco", 
        "https://www.zhihu.com/people/ye-bu-yu-47", 
        "https://www.zhihu.com/people/yicat-80", 
        "https://www.zhihu.com/people/coco-yu-4-6", 
        "https://www.zhihu.com/people/xia-hou-xin-rong-16", 
        "https://www.zhihu.com/people/shan-hai-99-79", 
        "https://www.zhihu.com/people/jin-ai-zhu", 
        "https://www.zhihu.com/people/wu-se-hua", 
        "https://www.zhihu.com/people/akitomoya-4", 
        "https://www.zhihu.com/people/wu-jian-ye-78", 
        "https://www.zhihu.com/people/shifeichao", 
        "https://www.zhihu.com/people/xiang-xue-zhang", 
        "https://www.zhihu.com/people/bai-kai-shui-62-82", 
        "https://www.zhihu.com/people/ou-xian-xian-xian-sheng", 
        "https://www.zhihu.com/people/tifayq", 
        "https://www.zhihu.com/people/jorden-chang", 
        "https://www.zhihu.com/people/shuidf", 
        "https://www.zhihu.com/people/kee-yang-82", 
        "https://www.zhihu.com/people/onefanta", 
        "https://www.zhihu.com/people/fangmen", 
        "https://www.zhihu.com/people/zhang-xiong-46-98", 
        "https://www.zhihu.com/people/xu-yi-hang", 
        "https://www.zhihu.com/people/ming-ming-23-15"
    ], 
    "article": [
        {
            "url": "https://zhuanlan.zhihu.com/p/89679565", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 10, 
            "title": "一次环境变量引发的血案", 
            "content": "<p>公司最近一直在迁移项目部署到阿里云的k8s，某天一早来到公司后，熟练的克隆了一个Node项目的部署配置，准备开始迁移老项目。测试环境(qa环境)发布正常后，满心欢喜的开始部署到预发布环境(yz环境)，然而发布才过了几分钟，就发现pm2报错: </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-177e0fb48072f577441a12f917245b7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic4.zhimg.com/v2-177e0fb48072f577441a12f917245b7b_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;314&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic4.zhimg.com/v2-177e0fb48072f577441a12f917245b7b_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-177e0fb48072f577441a12f917245b7b_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><code>PM2 error: Trace: { Error: spawn E2BIG</code> 这个报错以前从来没有见过，网上搜索以后，发现大多数<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Unitech/pm2/issues/3271\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">回答</a>都在说环境变量过多导致的。然而qa环境和yz环境是一样的dockerfile启动配置，为啥qa环境却可以正常启动？</p><p>为了排除是自己配置写错的原因，我重启了一个已经成功迁移的项目，然而预发布环境同样开始报错，这下炸了锅，所有以前迁移的项目，yz环境都发布不了！</p><p>发现事情的严重性后，迅速问了运维部门的人是否更改过yz环境，然而回答是没动过环境。</p><h3>问题排查</h3><p>既然网上说是环境变量过多导致，于是想登入yz环境的容器内部看看。但是因为pm2无法启动成功，所以docker一直在尝试重启容器，没办法直接进入容器。</p><p>于是决定先去qa环境的容器里看看。进入容器后，输入<code>printenv | wc -l</code>，发现环境变量的确非常多，竟然有1300多个环境变量！</p><p><code>printenv</code>打印出详细信息:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-2dd01ec91257137f0454535f387ba513_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1604\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb\" width=\"1604\" data-original=\"https://pic4.zhimg.com/v2-2dd01ec91257137f0454535f387ba513_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1604&#39; height=&#39;586&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1604\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1604\" data-original=\"https://pic4.zhimg.com/v2-2dd01ec91257137f0454535f387ba513_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-2dd01ec91257137f0454535f387ba513_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>这些变量看得我一脸懵逼，都是些部门的Java项目名称。问了下运维部门的同学，因为公司用的是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Qihoo360/wayne\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wayne</a>这个开源的k8s管理平台，它会把某个命名空间下所有项目的k8s配置，以环境变量的形式注入到容器里。</p><p>也就是说，我的node项目和java项目因为放在了一个命名空间下，所以90多个java项目的配置也被注入到了我的容器里，随着java项目部署的越来越多，我容器里的环境变量也越变越大，直到今天，终于引发了pm2的报错。</p><p>然而为啥qa环境下pm2没有报错呢？仔细对比了下qa和yz环境下pm2的启动脚本，发现是因为：</p><p>yz环境下使用的是pm2的cluster模式，<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Unitech/pm2/blob/master/lib/God/ClusterMode.js%23L48\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码</a>里这句:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">clu</span> <span class=\"o\">=</span> <span class=\"nx\">cluster</span><span class=\"p\">.</span><span class=\"nx\">fork</span><span class=\"p\">({</span><span class=\"nx\">pm2_env</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">env_copy</span><span class=\"p\">),</span> <span class=\"nx\">windowsHide</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">});</span>\n</code></pre></div><p>会把当前的环境变量复制一份给子进程，然而环境变量太大，于是报错！</p><h3>解决方案</h3><p>1.要求运维同学优化部署方式，不要注入项目以外的其他环境变量。不过运维同学说是k8s的机制，咋也不懂，也不敢问。</p><p>2.不使用pm2的cluster模式，只用fork模式。如果仍要坚持使用cluster模式，则先运行一段shell脚本，剔除不需要的环境变量。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 遍历所有环境变量，删除匹配正则的环境变量</span>\n<span class=\"k\">for</span> i in <span class=\"sb\">`</span>env <span class=\"p\">|</span> grep -E -i <span class=\"s1\">&#39;ECM_QA_|ECM_YZ_|ECM_PROD_&#39;</span> <span class=\"p\">|</span> sed <span class=\"s1\">&#39;s/=.*//&#39;</span><span class=\"sb\">`</span> <span class=\"p\">;</span> <span class=\"k\">do</span>\n    <span class=\"nb\">unset</span> <span class=\"nv\">$i</span>\n<span class=\"k\">done</span>\n\n<span class=\"c1\"># Docker中使用pm2-runtime命令</span>\npm2-runtime start app.json</code></pre></div><p>在这里，我把环境变量包含<code>ECM_QA_ ECM_YZ_ ECM_PPOD_</code>的全部删除。当然你也可以选择修改pm2的源码，比如这个<a href=\"https://link.zhihu.com/?target=https%3A//github.com/Unitech/pm2/issues/3271%23issuecomment-512224470\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解决方法</a>，不过并不推荐。</p><p>3.<b>也许你并不需要PM2!</b></p><h3>k8s下的Node部署</h3><p>老项目当时选择PM2的启动方式，是因为PM2可以后台运行Node项目，并且cluster模式可以很方便的利用多核性能。然而这次迁移使用了k8s方案，其实可以完全抛弃之前的启动方式。</p><p>在Docker中，我们需要保证pid为1的进程一直运行，因此使用PM2时，需要使用<code>pm2-runtime</code>命令，保证不会自动退出。如果使用原生方式，直接<code>node app.js</code>，反而更加简单。</p><p>Node是单线程的，为了充分利用多核cpu性能，才使用了cluster模式创建子进程。然而Docker的理念是一个容器一个进程，我们可以创建多个pod，把集群的调度交给k8s来管理。</p><p>因此，使用k8s的方案下，我们完全可以直接<code>node app.js</code>启动。重启应用和集群调度，全都交给k8s来做。</p><h3>总结</h3><p>在这次事故中，发现自己对于Linux，Docker的部署知识相当匮乏，Linux的一些常用命令也十分陌生。虽然前端工程师平时接触到这些方面有限，但是如果完全不懂，遇到线上事故，真的只能干瞪眼了。</p><h3>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/74056339\" class=\"internal\">记一次NodeJS测试集群全线瘫痪的解决思路</a></p><p><a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/51191378/what-is-the-point-of-using-pm2-and-docker-together\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">what is the point of using pm2 and docker together?</a></p>", 
            "topic": [
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "Kubernetes", 
                    "tagLink": "https://api.zhihu.com/topics/20018384"
                }
            ], 
            "comments": [
                {
                    "userName": "eureka", 
                    "userLink": "https://www.zhihu.com/people/9d19637ce0639753886be28435b265db", 
                    "content": "鼻血案么", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "月迷津渡", 
                    "userLink": "https://www.zhihu.com/people/116bfae99bd7adc086b920a55ab6647a", 
                    "content": "我们这边就是直接裸跑 node index.js，把它注册成 system service，交给 systemd 来管理。", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "tmomy", 
                    "userLink": "https://www.zhihu.com/people/5c5cf25dc7c8d1d2d490ea65849ff01c", 
                    "content": "谦虚了大佬", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "老哥，图片交出来[发呆]", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84894157", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 56, 
            "title": "写给前端工程师看的Docker教程-实战篇", 
            "content": "<p>在<a href=\"https://zhuanlan.zhihu.com/p/84891860\" class=\"internal\">上一篇文章</a>里，我们学习了Docker常用的命令和基本操作，现在可以开始实战了。</p><h3>单页应用</h3><p>前端工作中最常见的就是单页应用了。我们首先用<code>create-react-app</code>快速创建一个应用</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm i create-react-app -g\ncreate-react-app react-app\n<span class=\"nb\">cd</span> react-app\nnpm run start</code></pre></div><p>可以看见正常启动的页面。</p><p>打包试一下</p><div class=\"highlight\"><pre><code class=\"language-text\">npm run build</code></pre></div><p>可以看到本地生成了一个build目录，这就是最后线上运行的代码。</p><p>我们先在本地运行下build目录看看</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm i http-server -g\nhttp-server -p <span class=\"m\">4444</span> ./build</code></pre></div><p>访问 http://localhost:4444 即可看到打包后的页面</p><h3>单页应用Docker化</h3><p>在<code>react-app</code>目录下新建<code>Dockerfile</code> <code>.dockerignore</code>和<code>nginx.conf</code></p><p><code>.dockerignore</code></p><div class=\"highlight\"><pre><code class=\"language-text\">node_modules\nbuild</code></pre></div><p><code>dockerignore</code>指定了哪些文件不需要被拷贝进镜像里，类似<code>.gitignore</code>。</p><p>我们知道单页应用的路由一般都被js托管，所以对于nginx需要特别配置 </p><p><code>nginx.conf</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">server <span class=\"o\">{</span>\n    listen       <span class=\"m\">80</span><span class=\"p\">;</span>\n    server_name  localhost<span class=\"p\">;</span>\n\n    location / <span class=\"o\">{</span>\n        root   /app/build<span class=\"p\">;</span> <span class=\"c1\"># 打包的路径</span>\n        index  index.html index.htm<span class=\"p\">;</span>\n        try_files <span class=\"nv\">$uri</span> <span class=\"nv\">$uri</span>/ /index.html<span class=\"p\">;</span> <span class=\"c1\"># 防止重刷新返回404</span>\n    <span class=\"o\">}</span>\n\n    error_page   <span class=\"m\">500</span> <span class=\"m\">502</span> <span class=\"m\">503</span> <span class=\"m\">504</span>  /50x.html<span class=\"p\">;</span>\n    <span class=\"nv\">location</span> <span class=\"o\">=</span> /50x.html <span class=\"o\">{</span>\n        root   /usr/share/nginx/html<span class=\"p\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p><code>Dockerfile</code></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 基于node11</span>\nFROM node:11\n\n<span class=\"c1\"># 设置环境变量</span>\nENV PROJECT_ENV production\nENV NODE_ENV production\n\n<span class=\"c1\"># 安装nginx</span>\nRUN apt-get update <span class=\"o\">&amp;&amp;</span> apt-get install -y nginx\n\n<span class=\"c1\"># 把 package.json package-lock.json 复制到/app目录下</span>\n<span class=\"c1\"># 为了npm install可以缓存</span>\nCOPY package*.json /app/\n\n<span class=\"c1\"># 切换到app目录</span>\nWORKDIR /app\n\n<span class=\"c1\"># 安装依赖</span>\nRUN npm install --registry<span class=\"o\">=</span>https://registry.npm.taobao.org\n\n<span class=\"c1\"># 把所有源代码拷贝到/app</span>\nCOPY . /app\n\n<span class=\"c1\"># 打包构建</span>\nRUN npm run build\n\n<span class=\"c1\"># 拷贝配置文件到nginx</span>\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nEXPOSE <span class=\"m\">80</span>\n\n<span class=\"c1\"># 启动nginx，关闭守护式运行，否则容器启动后会立刻关闭</span>\nCMD <span class=\"o\">[</span><span class=\"s2\">&#34;nginx&#34;</span>, <span class=\"s2\">&#34;-g&#34;</span>, <span class=\"s2\">&#34;daemon off;&#34;</span><span class=\"o\">]</span></code></pre></div><p>需要特别注意的是:</p><div class=\"highlight\"><pre><code class=\"language-bash\">COPY package*.json /app/\nRUN npm install\nCOPY . /app</code></pre></div><p>我们单独把<code>package.json</code>文件先拷贝到<code>app</code>，安装完依赖，然后才把所有的文件拷贝到<code>app</code>，这是为什么？</p><p>这是为了充分利用docker缓存</p><div class=\"highlight\"><pre><code class=\"language-text\">COPY . /app\nRUN npm install</code></pre></div><p>如果这么写，那么每一次重新构建镜像，都需要下载一次npm包，这是非常浪费时间的！而把<code>package.json</code>与源文件分隔开写入镜像，这样只有当<code>package.json</code>发生改变了，才会重新下载npm包。</p><p>当然缓存有时候也会造成一些麻烦，比如在进行一些shell操作输出内容时，由于缓存的存在，导致新构建的镜像里的内容还是旧版本的。</p><p>我们可以指定构建镜像时不使用缓存</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker build --no-cache -t deepred5/react-app .</code></pre></div><p>最佳实践是在文件顶部指定一个环境变量，如果希望不用缓存，则更新这个环境变量即可，因为缓存失效是从第一条发生变化的指令开始。</p><p><b>打包镜像</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker build -t deepred5/react-app .</code></pre></div><p><b>启动容器</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -d --name my-react-app  -p <span class=\"m\">8888</span>:80 deepred5/react-app</code></pre></div><p>访问 http://localhost:8888 即可看到页面</p><p>访问 http://localhost:8888/deepred5, 也可以看见页面，说明nginx防刷新配置生效了！</p><h3>多层构建</h3><p>我们之前写的<code>Dockerfile</code>其实是有些问题的: 镜像基于node11，但是整个镜像用到node环境的地方只是为了前端打包，真正启动的是Nginx。镜像里的项目源代码以及<code>node_modules</code>其实根本没有用，这些冗余文件造成了镜像的体积变得非常庞大。</p><p>而我们仅仅需要打包出来的静态文件以及启动一个静态服务器Nginx即可。</p><p>这时就可以使用<a href=\"https://link.zhihu.com/?target=https%3A//docs.docker.com/develop/develop-images/multistage-build/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">multi-stage</a>多层构建。</p><p>新建一个<code>Dockerfile.multi</code></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># node镜像仅仅是用来打包文件</span>\nFROM node:alpine as builder\n\nENV PROJECT_ENV production\nENV NODE_ENV production\n\nCOPY package*.json /app/\n\nWORKDIR /app\n\nRUN npm install --registry<span class=\"o\">=</span>https://registry.npm.taobao.org\n\nCOPY . /app\n\nRUN npm run build\n\n<span class=\"c1\"># 选择更小体积的基础镜像</span>\nFROM nginx:alpine\n\nCOPY nginx.conf /etc/nginx/conf.d/default.conf\n\nCOPY --from<span class=\"o\">=</span>builder /app/build /app/build</code></pre></div><p>这个文件里，我们使用了两个<code>FROM</code>基础镜像，第一个<code>node:alpine</code>仅仅作为打包环境，真正的基础镜像是<code>nginx:alpine</code></p><p><b>打包镜像</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># -f 指定使用Dockerfile.multi进行构建</span>\ndocker build -t deepred5/react-app-multi .  -f Dockerfile.multi</code></pre></div><p><b>启动容器</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -d --name my-react-app-multi  -p <span class=\"m\">8889</span>:80 deepred5/react-app-multi</code></pre></div><p>访问 http://localhost:8889 即可看到页面</p><p><b>查看镜像大小</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker images deepred5/react-app-multi\ndocker images deepred5/react-app</code></pre></div><p>可以发现，两者的大小相差巨大。</p><p><code>deepred5/react-app</code>镜像有1G多，而<code>deepred5/react-app-multi</code>只有20多M</p><p>主要原因是：<code>deepred5/react-app</code>的基础镜像<code>node:11</code>就有900M，而<code>deepred5/react-app-multi</code>的基础镜像<code>nginx:alpine</code>只有20M。由此可见多层构建对于减少镜像大小是非常有帮助的。</p><h3>Node应用</h3><p>前端有时也会参与到Node BFF层的开发。我们来创建一个Node结合Redis的简单项目</p><div class=\"highlight\"><pre><code class=\"language-text\">mkdir node-redis\ncd node-redis\nnpm init -y\nnpm i koa koa-router ioredis\ntouch index.js</code></pre></div><p><code>node-redis/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Koa</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;koa&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;koa-router&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">Redis</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&#34;ioredis&#34;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Koa</span><span class=\"p\">();</span>\n<span class=\"k\">const</span> <span class=\"nx\">router</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n<span class=\"k\">const</span> <span class=\"nx\">redis</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Redis</span><span class=\"p\">({</span>\n  <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>\n  <span class=\"nx\">host</span><span class=\"o\">:</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hello world.&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/json/get&#39;</span><span class=\"p\">,</span> <span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">redis</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/json/set&#39;</span><span class=\"p\">,</span> <span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">redis</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;age&#39;</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">age</span><span class=\"p\">);</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">status</span><span class=\"o\">:</span> <span class=\"nx\">result</span><span class=\"p\">,</span>\n    <span class=\"nx\">age</span><span class=\"o\">:</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">.</span><span class=\"nx\">age</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span>\n  <span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">())</span>\n  <span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">router</span><span class=\"p\">.</span><span class=\"nx\">allowedMethods</span><span class=\"p\">());</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at localhost:3000&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>我们首先需要本地安装Redis，然后启动redis</p><div class=\"highlight\"><pre><code class=\"language-text\">redis-server</code></pre></div><p>启动Node项目</p><div class=\"highlight\"><pre><code class=\"language-text\">node index.js</code></pre></div><p>访问 http://localhost:3000/ 即可看到页面</p><p>访问 http://localhost:3000/api/json/set?age=2 ，我们就向Redis里设置<code>age</code>的值为2</p><p>访问 http://localhost:3000/api/json/get ，我们就取得Redis里<code>age</code>的值</p><h3>Node应用Docker化</h3><p>首先我们来思考下，这个后端应用涉及Node和Redis。如果我们要部署到Docker里，应该怎么构建镜像？</p><ol><li>方案一：基于一个最基础的<code>ubuntu</code>镜像，然后我们在其中安装Node和Redis，这样Node和Redis之间就可以进行通信了。这种方案只需要启动一个容器，因为Node和Redis已经在这个容器里了。</li><li>方案二：我们基于<code>Redis</code>镜像启动一个容器，专门用来跑Redis。基于<code>Node</code>镜像再启动一个容器，专门用来跑Node。</li></ol><p>Docker的理念更倾向于方案二。我们希望一个镜像专注于做一件事，现在流行的微服务，微前端也是这种思想。</p><p>我们之前说过每个容器都是相互隔离的，通过映射端口才能访问容器里的网络应用。但是容器和容器之间怎么进行通信呢？</p><p>Docker里使用<code>Networking</code>进行容器间的通信</p><h3>Networking</h3><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 创建一个app-test网络</span>\ndocker network create app-test</code></pre></div><p>我们只需要把需要通信的容器都加入到<code>app-test</code>网络里，之后容器间就可以互相访问了。</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -d --name redis-app --network app-test  -p <span class=\"m\">6389</span>:6379 redis \ndocker run -it --name node-app --network app-test node:11 /bin/bash</code></pre></div><p>我们创建了两个容器，这两个容器都在<code>app-test</code>网络里。</p><p>我们进入<code>node-app</code>容器里，然后<code>ping redis-app</code>，发现可以访ping通，说明容器间可以通信了！</p><p>我们修改之前的代码:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">redis</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Redis</span><span class=\"p\">({</span>\n  <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"mi\">6379</span><span class=\"p\">,</span>\n  <span class=\"nx\">host</span><span class=\"o\">:</span> <span class=\"s1\">&#39;db&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>redis的<code>host</code>改为<code>db</code></p><p>新建一个<code>Dockerfile</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">FROM node:11\nCOPY package*.json /app/ \nWORKDIR /app\nRUN npm install\nCOPY . /app\nEXPOSE <span class=\"m\">3000</span>\nCMD <span class=\"o\">[</span><span class=\"s2\">&#34;node&#34;</span>,<span class=\"s2\">&#34;index.js&#34;</span><span class=\"o\">]</span></code></pre></div><p><b>构建镜像</b></p><div class=\"highlight\"><pre><code class=\"language-text\">docker build -t deepred5/node-redis-app .</code></pre></div><p><b>启动容器</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 创建网络</span>\ndocker network create app-test\n<span class=\"c1\"># 启动redis容器</span>\ndocker run -d --name db --network app-test  -p <span class=\"m\">6389</span>:6379 redis \n<span class=\"c1\"># 启动node容器</span>\ndocker run --name node-redis-app -p <span class=\"m\">4444</span>:3000 --network app-test -d deepred5/node-redis-app</code></pre></div><p>访问 http://localhost:4444/ 即可看到页面</p><p>还记得我们之前做的<code>react-app</code>单页应用吗？我们可以把这个应用加入到<code>app-test</code>网络里来，这样前端应用也能访问后端了！</p><p>修改<code>react-app</code>目录下的<code>nginx.conf</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">server <span class=\"o\">{</span>\n    listen       <span class=\"m\">80</span><span class=\"p\">;</span>\n    server_name  localhost<span class=\"p\">;</span>\n\n    location / <span class=\"o\">{</span>\n        root   /app/build<span class=\"p\">;</span> <span class=\"c1\"># 打包的路径</span>\n        index  index.html index.htm<span class=\"p\">;</span>\n        try_files <span class=\"nv\">$uri</span> <span class=\"nv\">$uri</span>/ /index.html<span class=\"p\">;</span> <span class=\"c1\"># 防止重刷新返回404</span>\n    <span class=\"o\">}</span>\n\n    location /api <span class=\"o\">{</span>\n        proxy_pass http://node-redis-app:3000<span class=\"p\">;</span> <span class=\"c1\">#后台转发地址</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span></code></pre></div><p>重新构建镜像</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker build -t deepred5/react-app-multi .  -f Dockerfile.multi</code></pre></div><p>启动容器</p><div class=\"highlight\"><pre><code class=\"language-text\">docker run -d --name my-react-app-multi --network app-test  -p 9999:80 deepred5/react-app-multi</code></pre></div><p>访问 http://localhost:9999/api/json/set?age=55 成功返回数据</p><h3>Docker compose</h3><p>我们现在这个项目有3个启动镜像:  </p><p><code><i>deepred5/react-app-multi</i></code><i> 前端单页应用 </i> </p><p><code>redis</code> 数据缓存 </p><p><code>deepred5/node-redis-app</code> 后端服务，访问redis，同时给前端提供接口</p><p>如果要把这个项目完整的启动起来，按照顺序需要这样启动：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 启动redis容器</span>\ndocker run -d --name db --network app-test  -p <span class=\"m\">6389</span>:6379 redis \n<span class=\"c1\"># 启动node容器</span>\ndocker run --name node-redis-app -p <span class=\"m\">4444</span>:3000 --network app-test -d deepred5/node-redis-app\n<span class=\"c1\"># 启动前端容器</span>\ndocker run -d --name my-react-app-multi --network app-test  -p <span class=\"m\">9999</span>:80 deepred5/react-app-multi</code></pre></div><p>这还仅仅只是3个容器的项目，如果容器再多，启动就变得非常复杂了！</p><p>这时，就需要<code>docker compose</code>出场了。</p><p>首先需要安装<a href=\"https://link.zhihu.com/?target=https%3A//docs.docker.com/compose/install/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">docker compose</a>，安装完成之后</p><p>我们新建一个<code>my-all-app</code>目录，然后新建<code>docker-compose.yml</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir my-all-app\n<span class=\"nb\">cd</span> my-all-app\ntouch docker-compose.yml</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-bash\">version: <span class=\"s1\">&#39;3.7&#39;</span>\n\nservices:\n  db:\n    image: redis\n    restart: always\n    ports:\n      - <span class=\"m\">6389</span>:6379\n    networks:\n      - app-test\n\n  node-redis-app:\n    image: deepred5/node-redis-app\n    restart: always\n    depends_on:\n      - db\n    ports:\n      - <span class=\"m\">4444</span>:3000\n    networks:\n      - app-test\n\n  react-app-multi:\n    image: deepred5/react-app-multi\n    restart: always\n    depends_on:\n      - node-redis-app\n    ports:\n      - <span class=\"m\">9999</span>:80\n    networks:\n      - app-test\n\nnetworks:\n  app-test:\n    driver: bridge</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\"># 启动所有容器\ndocker-compose up -d\n\n# 停止所有容器\ndocker-compose stop</code></pre></div><p>访问 http://localhost:9999 查看前端页面</p><p>访问 http://localhost:4444 查看后端接口</p><p>可以看见，使用<code>docker-compose.yml</code>配置完启动步骤后，启动多个容器就变得十分简单了。</p><h3>参考</h3><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5c83cbaa6fb9a04a0f65fdaa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何使用docker部署前端应用</a></li><li><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26780404/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">第一本Docker书 修订版</a></li></ul>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }, 
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }
            ], 
            "comments": [
                {
                    "userName": "城管大队长", 
                    "userLink": "https://www.zhihu.com/people/b8b80d47e7e977a4aa19f59d3a99cb18", 
                    "content": "简单易懂[爱]", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "chao", 
                    "userLink": "https://www.zhihu.com/people/d0a16a671b2a362115248e44ca5301c6", 
                    "content": "<p>nginx 不独立docker?</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "nginx和前端静态资源打包在一个镜像里了。如果nginx独立部署，那前端用docker仅仅为了打个包?", 
                            "likes": 0, 
                            "replyToAuthor": "chao"
                        }
                    ]
                }, 
                {
                    "userName": "AlexnL", 
                    "userLink": "https://www.zhihu.com/people/c75c901906f2ddf737841994a596da7a", 
                    "content": "<p>你把你图给我交了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "李小志", 
                    "userLink": "https://www.zhihu.com/people/e31119836b33876b011a571a631a0d97", 
                    "content": "<p>写的简单易懂，赞👍</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/84891860", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 179, 
            "title": "写给前端工程师看的Docker教程-基础篇", 
            "content": "<p>最近公司在推进容器化和k8s，项目都要改成Docker部署。负责的工程里有几个node项目，只能从零开始学习Docker了。</p><h3>安装</h3><p>Docker支持window, Mac, Linux, 教程参考 <a href=\"https://link.zhihu.com/?target=https%3A//www.runoob.com/docker/ubuntu-docker-install.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Docker安装教程</a> </p><p>建议在Mac和Linux系统里使用Docker。</p><p>日常开发，我使用的是vscode编辑器，可以顺便安装docker插件。在插件商店搜索<code>docker</code>，安装完成后，我们可以很方便的管理Docker镜像和容器。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><noscript><img src=\"https://pic4.zhimg.com/v2-0f01cc619a5436399700ffe01f0a12bf_b.jpg\" data-size=\"small\" data-rawwidth=\"714\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-0f01cc619a5436399700ffe01f0a12bf_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;714&#39; height=&#39;784&#39;&gt;&lt;/svg&gt;\" data-size=\"small\" data-rawwidth=\"714\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"714\" data-original=\"https://pic4.zhimg.com/v2-0f01cc619a5436399700ffe01f0a12bf_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-0f01cc619a5436399700ffe01f0a12bf_b.jpg\"/><figcaption>vscode docker插件</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>快速使用</h3><p>首先我们来体验一下Docker。</p><p>平时工作中，如果我们电脑的开发环境是Windows, 有一天希望在Linux环境做一些事情，那该怎么办？(没有云服务器的情况下)大多数人这时会选择去用虚拟机安装一个ubuntu系统。不过安装虚拟机前，你得先去下载几个G的镜像，然后在VMware里配置一些参数，最后还要等待最少十几分钟的系统安装。等你安装完一个ubuntu系统，估计已经浪费了几个小时。</p><p>然而使用Docker，你只需要几分钟！</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 拉取ubuntu镜像</span>\ndocker pull ubuntu\n<span class=\"c1\"># 创建一个ubuntu容器并且使用终端进行交互</span>\ndocker run -it --name my-ubuntu --rm ubuntu /bin/bash</code></pre></div><p>创建成功后，你就进入一个ubuntu系统里，现在你可以在其中进行任意的操作了。</p><p><b>注意：虽然当前容器里是ubuntu系统，但是你只能把它想象成一个精简版的ubuntu，因此有很多常用命令，需要自己去安装。</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">curl -v bilibili.com</code></pre></div><p>直接运行<code>curl</code>命令会提示命令不存在</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 安装curl</span>\napt-get update\napt-get install -y curl</code></pre></div><p>安装完成后，才能使用<code>curl</code>命令</p><p>退出容器</p><div class=\"highlight\"><pre><code class=\"language-bash\">exit</code></pre></div><h3>基本概念</h3><ol><li>镜像（Image）：类似于虚拟机中的镜像。镜像有两种：基础镜像和个人镜像。基础镜像由各大厂商提供，比如<code>ubuntu</code>镜像，<code>node</code>镜像。个人镜像则是由个人开发者构建上传。</li><li>容器（Container）：类似于一个轻量级的沙盒。容器是基于镜像来创建的，<code>ubuntu</code>镜像并不能和我们进行各种交互，我们希望有个环境能运行<code>ubuntu</code>，于是基于<code>ubuntu</code>镜像创建了一个容器。</li><li>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。</li></ol><p>我们可以这样类比：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 下载源代码</span>\ngit clone deepred5/app\n<span class=\"c1\"># 启动app</span>\nnpm run start</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\"># 拉取镜像\ndocker pull deepred5/app\n# 创建容器\ndocker run deepred5/app</code></pre></div><p>Docker是基于c/s架构：我们在Client中执行Docker命令，最后创建的Container和Image则会在Server中运行</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 可以查看server和client信息</span>\ndocker info</code></pre></div><h3>镜像(Image)</h3><p><b>常用命令</b></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 查找镜像</span>\ndocker search ubuntu\n\n<span class=\"c1\"># 拉取特定tag版本的镜像(默认是latest)</span>\ndocker pull ubuntu:18.0.4\n\n<span class=\"c1\"># 查看下载的所有本地镜像</span>\ndocker images\n\n<span class=\"c1\"># 删除镜像</span>\ndocker rmi ubuntu:18.0.4</code></pre></div><p><b>构建镜像</b></p><p>我们一般都是基于基础镜像来构建个人镜像。镜像是由一条条指令构建出来(Dockerfile)</p><p>我们来构建一个<code>node-pm2</code>镜像，这个镜像自带node和pm2:</p><p>创建一个<code>node-pm2</code>目录，并新建一个<code>Dockerfile</code>文件</p><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir node-pm2\n<span class=\"nb\">cd</span> node-pm2\ntouch Dockerfile</code></pre></div><p>编辑<code>Dockerfile</code></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 基于node11基础镜像</span>\nFROM node:11\n\n<span class=\"c1\"># 一些元数据,比如作者信息</span>\nLABEL <span class=\"nv\">maintainer</span><span class=\"o\">=</span><span class=\"s2\">&#34;deepred5 &lt;deepred5@gamil.com&gt;&#34;</span>\n\n<span class=\"c1\"># 安装pm2</span>\nRUN npm install pm2 -g --registry<span class=\"o\">=</span>https://registry.npm.taobao.org\n\n<span class=\"c1\"># 暴露容器的端口</span>\nEXPOSE <span class=\"m\">80</span> <span class=\"m\">443</span></code></pre></div><p>基于这个<code>Dockerfile</code>创建我们自己的镜像<code>deepred5/node-pm2</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker build -t deepred5/node-pm2:1.0 .</code></pre></div><p>注意最后有一个<code>.</code></p><p>查看我们自己的镜像</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 可以看到deepred5/node-pm2镜像了</span>\ndocker images</code></pre></div><p>基于<code>deepred5/node-pm2</code>镜像启动一个容器</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -it deepred5/node-pm2:1.0 /bin/bash</code></pre></div><p>进入容器后，我们运行<code>pm2 -v</code>，可以看见pm2已经安装成功了</p><p><b>上传镜像</b></p><p>我们本地构建的镜像如果希望可以被其他人使用，就需要把镜像上传到仓库。登录<a href=\"https://link.zhihu.com/?target=http%3A//dockerhub.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dockerhub</a>，注册一个账户。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 登入账户，输入用户名和密码</span>\ndocker login\n\n<span class=\"c1\"># 上传镜像</span>\ndocker push deepred5/node-pm2:1.0</code></pre></div><p>注意：<code>deepred5/node-pm2</code>改成<code>你的用户名/node-pm2</code>，你需要重新构建一个<code>你的用户名/node-pm2</code>的镜像，然后才能上传到dockerhub</p><h3>容器(Container)</h3><p>我们平时基本都是在和容器打交道。</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 基于ubuntu镜像创建my-ubuntu容器。如果本地没有ubuntu镜像，会先去docker pull下载</span>\ndocker run -it ubuntu:latest --name my-ubuntu /bin/bash</code></pre></div><p>参数解释:</p><p><code>-i</code>: 允许你对容器内的标准输入 (STDIN) 进行交互</p><p><code>-t</code>: 在新容器内指定一个伪终端或终端。</p><p><code>--name</code>: 容器的名字，默认是随机的名字</p><p><code>/bin/bash</code>: 启动容器后立即执行的命令</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 停止容器</span>\ndocker stop my-ubuntu\n\n<span class=\"c1\"># 启动容器</span>\ndocker start my-ubuntu\n\n<span class=\"c1\"># 删除容器</span>\ndocker rm my-ubuntu\n\n<span class=\"c1\"># 删除所有容器</span>\ndocker rm <span class=\"sb\">`</span>docker ps -aq<span class=\"sb\">`</span>\n<span class=\"c1\"># 查看正在运行的容器</span>\ndocker ps\n\n<span class=\"c1\"># 查看所有创建过的容器(运行或者关闭)</span>\ndocker ps -a</code></pre></div><p><code>docker start my-ubuntu</code>启动的容器，虽然容器运行着，但是我们无法进入到容器里。</p><p>如何再次进入到容器里？</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker <span class=\"nb\">exec</span> -it my-ubuntu /bin/bash</code></pre></div><p><b>容器运行的两种方式</b> </p><ul><li>交互式运行 ( -it )</li><li> 守护式运行(没有交互式会话，长期运行，适合运行应用程序和服务) ( -d )</li></ul><p>可以这样类比:</p><p><code>node index.js</code>: 交互式运行 </p><p><code>pm2 start index.js</code>: 守护式运行</p><p>大部分情况都是运行守护式容器(daemonized container)</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 启动了容器，然后容器立即关闭</span>\ndocker run ubuntu /bin/bash\n\n<span class=\"c1\"># 启动了容器，并开启了交互式的终端，只有输入exit才退出终端，退出终端后，容器仍然在后台运行</span>\ndocker run -it ubuntu /bin/bash\n\n<span class=\"c1\"># 启动了容器，并且在后台一直运行，每隔1s输出hello world</span>\ndocker run -d ubuntu /bin/sh -c <span class=\"s2\">&#34;while true; do echo hello world; sleep 1; done&#34;</span></code></pre></div><p><b>查看容器日志</b></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -d --name my_container ubuntu /bin/sh -c <span class=\"s2\">&#34;while true; do echo hello world; sleep 1; done&#34;</span>\n<span class=\"c1\"># 查看后台运行的日志</span>\ndocker logs my_container\n\n<span class=\"c1\"># 实时监控(类似tail -f)</span>\ndocker logs -f my_container\n\n<span class=\"c1\"># 获取最后10行</span>\ndocker logs --tail <span class=\"m\">10</span> my_container\n\n<span class=\"c1\"># 实时查看最近的日志</span>\ndocker logs --tail <span class=\"m\">0</span> -f my_container\n\n<span class=\"c1\"># 加上时间戳</span>\ndocker logs -t my_container</code></pre></div><h3>Nginx</h3><p>前端最常使用的静态服务器就是Nginx了。</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run -d --name my-nginx -p <span class=\"m\">8888</span>:80 nginx</code></pre></div><p>访问 http://localhost:8888/ 即可看到熟悉的欢迎页面</p><p>参数解释: </p><p><code>-d</code>: 前面已经解释过了，守护运行方式 </p><p><code>-p</code>: 端口映射。<code>8888:80</code>表示把本地的8888端口映射到容器的80端口</p><p>为什么要映射端口？因为Docker里每个容器都是相对独立的，拥有自己的内部ip。容器里运行的一些网络应用，要让外部也可以访问，就需要将端口映射到宿主机上。</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker port my-nginx</code></pre></div><p><code>80/tcp -&gt; 0.0.0.0:8888</code>即可看到映射的端口了</p><p>如果我们希望修改Nginx欢迎页的内容，怎么办？</p><p>最容易想到的方法是：</p><p>我们进入到容器里，然后修改<code>/usr/share/nginx/html</code>目录里的<code>index.html</code></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 进入nginx容器里</span>\ndocker <span class=\"nb\">exec</span> -it my-nginx /bin/bash</code></pre></div><p>不过这种方法拓展性不高，假如有多个Nginx容器，难道我们需要一个个的进入容器去修改？</p><p>这时就要引出数据卷(Volume)的概念了。</p><h3>数据卷(Volume)</h3><p>类似端口映射，我们可以把容器内部的目录映射到宿主机的目录，实现容器之间实现共享和重用。</p><p>新建<code>my-nginx</code>目录，新建<code>index.html</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir my-nginx\n<span class=\"nb\">cd</span> my-nginx\ntouch index.html</code></pre></div><p><code>index.html</code></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Document<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>hello world<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-bash\">docker run --name nginx-test <span class=\"se\">\\\n</span><span class=\"se\"></span>--rm -p <span class=\"m\">8888</span>:80 <span class=\"se\">\\\n</span><span class=\"se\"></span>-v <span class=\"nv\">$PWD</span>:/usr/share/nginx/html <span class=\"se\">\\\n</span><span class=\"se\"></span>-d nginx</code></pre></div><p><b>小技巧：如果命令行过长，可以使用\\符号多行书写</b></p><p>访问 http://localhost:8888/ 已经发生变化了！</p><p>参数解释：</p><p><code>-v</code>: <code>$PWD:/usr/share/nginx/html</code>表示把容器内的<code>/usr/share/nginx/html</code>映射到当前目录，也就是<code>my-nginx</code>目录。于是nginx返回的<code>index.html</code>也就变成了我们本地的<code>index.html</code>了。</p><p>我们可以试着在本地新建一个<code>1.html</code>，然后访问 http://localhost:8888/1.html 也可以看到输出了内容。</p><p>同理，如果我们希望修改容器里Nginx的配置，也可以把容器的<code>/etc/nginx/conf.d/</code>映射到本地，然后在本地新建配置<code>mydefault.conf</code></p><p>为了复习一下前面的内容，我们希望构建一个本地的镜像，这个镜像基于Nginx，默认的欢迎页面内容就是我们刚刚新建的index.html</p><p>在<code>my-nginx</code>目录，新建<code>Dockerfile</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">FROM nginx\n<span class=\"c1\"># 将当前的index.html拷贝到容器的/usr/share/nginx/html/index.html</span>\nCOPY ./index.html /usr/share/nginx/html/index.html\nEXPOSE <span class=\"m\">80</span></code></pre></div><p><code>docker build -t my-nginx .</code>构建镜像</p><p><code>docker run -d  --rm -p 4445:80 my-nginx</code> 创建容器，访问 http://localhost:4445 可以看到效果了。</p><h3>Redis</h3><p>我们也可以在Docker里运行Redis。</p><div class=\"highlight\"><pre><code class=\"language-bash\">docker pull redis\ndocker run -d --name my-redis -p <span class=\"m\">6389</span>:6379 redis</code></pre></div><p>进入容器并且连接到redis</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 进入my-redis容器里，并且在容器里执行redis-cli命令</span>\ndocker <span class=\"nb\">exec</span> -it my-redis redis-cli</code></pre></div><p>于是我们就连接到redis里了，并且可以执行相应的redis命令</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 设置name</span>\n<span class=\"nb\">set</span> name tc\n<span class=\"c1\"># 获取name</span>\nget name</code></pre></div><p>因为我们把容器的6379端口映射到了本机的6389，所以我们也可以直接在本地连接容器里的redis</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"c1\"># 需要你本地安装了redis-cli</span>\nredis-cli -h <span class=\"m\">127</span>.0.0.1 -p <span class=\"m\">6389</span>\n\n<span class=\"c1\"># 返回tc</span>\nget name</code></pre></div><h3>总结</h3><p>我们主要学习了Docker里镜像和容器的基本概念，掌握了端口映射(-p)和目录映射(-v)的用法，同时学习了如何在Docker里使用Nginx和Redis。在<a href=\"https://zhuanlan.zhihu.com/p/84894157\" class=\"internal\">下一篇文章</a>里，会继续介绍Docker实战。</p><h3>参考</h3><ul><li><a href=\"https://zhuanlan.zhihu.com/p/23599229\" class=\"internal\">只要一小时，零基础入门Docker</a></li><li><a href=\"https://zhuanlan.zhihu.com/p/53260098\" class=\"internal\">10分钟看懂Docker和K8S</a></li></ul>", 
            "topic": [
                {
                    "tag": "Docker", 
                    "tagLink": "https://api.zhihu.com/topics/19950993"
                }, 
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>偷完高雄姐妹的色图就走，不看一眼文章内容</p>", 
                    "likes": 18, 
                    "childComments": []
                }, 
                {
                    "userName": "handsomeman", 
                    "userLink": "https://www.zhihu.com/people/a1e8154663042eddab334ad7ae660628", 
                    "content": "讲前端放涩图哦喜欢", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "羊洋烊", 
                    "userLink": "https://www.zhihu.com/people/7a74b392bff29982e8cd068f4b941c1c", 
                    "content": "请问什么是docker，萌新[害羞]", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这个配图认真的嘛？</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>偷完高雄姐妹的色图就走，不看一眼文章内容</p>", 
                    "likes": 18, 
                    "childComments": []
                }, 
                {
                    "userName": "handsomeman", 
                    "userLink": "https://www.zhihu.com/people/a1e8154663042eddab334ad7ae660628", 
                    "content": "讲前端放涩图哦喜欢", 
                    "likes": 1, 
                    "childComments": []
                }, 
                {
                    "userName": "羊洋烊", 
                    "userLink": "https://www.zhihu.com/people/7a74b392bff29982e8cd068f4b941c1c", 
                    "content": "请问什么是docker，萌新[害羞]", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>这个配图认真的嘛？</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/82020042", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 14, 
            "title": "使用Web Worker优化代码", 
            "content": "<p>前段时间有个需求，需要前端导出excel。一般来说，对于导出大量数据的功能，最好还是交给后端来做，然而后端老哥并不想做(撕B失败)，只能自力更生。</p><p>前端导出excel本身已经有很成熟的库了，比如<a href=\"https://link.zhihu.com/?target=https%3A//github.com/SheetJS/js-xlsx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">js-xlsx</a>, <a href=\"https://link.zhihu.com/?target=https%3A//github.com/cuikangjie/js-export-excel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">js-export-excel</a>，所以实现起来并不难。但是，当导出的数据达到几万条时，就会发现页面产生了明显的卡顿。原因也很简单: 一般我们都是基于后端返回的json数据来生成excel，但是后端返回的数据一般都不能直接用来导出数据，我们还需要进行一些格式化：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/getExcelData&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">format</span> <span class=\"o\">=</span> <span class=\"nx\">list</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 对返回的json数据进行格式化\n</span><span class=\"c1\"></span>  <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">moment</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;YYYY-MM-DD HH:mm&#39;</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ... 省略其他各种操作\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n\n<span class=\"c1\">// 根据json生成excel\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">toExcel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExportJsonExcel</span><span class=\"p\">(</span><span class=\"nx\">format</span><span class=\"p\">).</span><span class=\"nx\">saveExcel</span><span class=\"p\">();</span>\n</code></pre></div><p>卡顿就发生在对大量数据进行<code>map</code>操作。由于JS是单线程的，所以在进行大量复杂运算时会独占主线程，导致页面的其他事件无法及时响应，造成页面假死的现象。</p><p>那我们能不能把复杂的循环操作单独放在一个线程里呢？这时就要请出<a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">web worker</a>了</p><h3>Web Worker</h3><p>首先看个简单的例子</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;btn1&#34;</span><span class=\"p\">&gt;</span>js<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">button</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;btn2&#34;</span><span class=\"p\">&gt;</span>worker<span class=\"p\">&lt;/</span><span class=\"nt\">button</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text&#34;</span><span class=\"p\">&gt;</span></code></pre></div><p><code>index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">btn1</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;btn1&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">btn1</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5000000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">total</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">total</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>点击btn1时，js会进行大量计算，你会发现页面卡死了，点击input不会有任何反应</p><p>我们使用web worker优化代码:</p><p><code>worker.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;total&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5000000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">total</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"nx\">total</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">Worker</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">myWorker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Worker</span><span class=\"p\">(</span><span class=\"s1\">&#39;worker.js&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">myWorker</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;total&#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">btn1</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;btn1&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">btn2</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;btn2&#39;</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">btn1</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">total</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5000000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">total</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;total&#39;</span><span class=\"p\">,</span> <span class=\"nx\">total</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">btn2</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">myWorker</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"s1\">&#39;total&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">}</span>\n</code></pre></div><p>点击btn2时，页面并不会卡死，你可以正常的对input进行输入操作</p><p>我们开启了一个单独的worker线程来进行复杂操作，通过<code>postMessage</code>和<code>onmessage</code>来进行两个线程间的通信。</p><h3>优化导出excel表格</h3><p>看过前面的例子，我们可以同理使用web worker进行复杂的map操作</p><p><code>worker.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">format</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 对返回的json数据进行格式化\n</span><span class=\"c1\"></span>  <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">moment</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;YYYY-MM-DD HH:mm&#39;</span><span class=\"p\">);</span>\n  <span class=\"c1\">// ... 省略其他各种操作\n</span><span class=\"c1\"></span><span class=\"p\">});</span>\n\n<span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"nx\">format</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">myWorker</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Worker</span><span class=\"p\">(</span><span class=\"s1\">&#39;worker.js&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">myWorker</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 根据json生成excel\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">toExcel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExportJsonExcel</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">).</span><span class=\"nx\">saveExcel</span><span class=\"p\">();</span>\n<span class=\"p\">};</span>\n<span class=\"k\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;/api/getExcelData&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">myWorker</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n</code></pre></div><p>当然实际项目，我们一般都是用webpack打包的，这时就要进行一些特别处理，需要使用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/webpack-contrib/worker-loader\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">worker-loader</a>,可以参考<a href=\"https://link.zhihu.com/?target=https%3A//juejin.im/post/5acf348151882579ef4f5a77\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《怎么在 ES6+Webpack 下使用 Web Worker》</a>文章学习。</p><h3>进一步优化</h3><p>在上面的代码修改中，我们只是优化了业务逻辑里面的map操作。因为我使用的js库是<code>js-export-excel</code>,从它的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cuikangjie/js-export-excel/blob/master/src/js-export-excel.js%23L123\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码</a>里可以看见，对于我们传进来的数据，它还会再一次forEach循环操作，进行数据的二进制转换。因此，这一步的forEach循环，理论上也可以在web worker里面进行操作。</p><p>最简单想到的方法是: </p><p><code>worker.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">format</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 对返回的json数据进行格式化\n</span><span class=\"c1\"></span>    <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">moment</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;YYYY-MM-DD HH:mm&#39;</span><span class=\"p\">);</span>\n    <span class=\"c1\">// ... 省略其他各种操作\n</span><span class=\"c1\"></span>  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// 直接在worker里面生成excel\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">toExcel</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExportJsonExcel</span><span class=\"p\">(</span><span class=\"nx\">format</span><span class=\"p\">).</span><span class=\"nx\">saveExcel</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>直接在<code>worker.js</code>里面生成excel。然而，<code>saveExcel</code>这个方法需要用到<code>document</code>对象，但是在worker里，我们不能访问类似<code>window</code> <code>document</code>的全局对象。</p><p>因此，只能魔改源码了。。。</p><p>真正用到<code>document</code>对象的是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/cuikangjie/js-export-excel/blob/master/src/js-export-excel.js%23L151\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码</a>这一句:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// saveAs和Blob用到了document\n</span><span class=\"c1\"></span><span class=\"nx\">saveAs</span><span class=\"p\">(</span>\n  <span class=\"k\">new</span> <span class=\"nx\">Blob</span><span class=\"p\">([</span><span class=\"nx\">s2ab</span><span class=\"p\">(</span><span class=\"nx\">wbout</span><span class=\"p\">)],</span> <span class=\"p\">{</span>\n    <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">&#34;application/octet-stream&#34;</span>\n  <span class=\"p\">}),</span>\n  <span class=\"nx\">_options</span><span class=\"p\">.</span><span class=\"nx\">fileName</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;.xlsx&#34;</span>\n<span class=\"p\">);</span>\n</code></pre></div><p><code>saveExcel</code>方法只需改成:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 不生成excel，只返回数据\n</span><span class=\"c1\"></span><span class=\"k\">return</span> <span class=\"nx\">s2ab</span><span class=\"p\">(</span><span class=\"nx\">wbout</span><span class=\"p\">);</span>\n</code></pre></div><p><code>worker.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">format</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 对返回的json数据进行格式化\n</span><span class=\"c1\"></span>    <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span> <span class=\"o\">=</span> <span class=\"nx\">moment</span><span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">time</span><span class=\"p\">).</span><span class=\"nx\">format</span><span class=\"p\">(</span><span class=\"s1\">&#39;YYYY-MM-DD HH:mm&#39;</span><span class=\"p\">);</span>\n    <span class=\"c1\">// ... 省略其他各种操作\n</span><span class=\"c1\"></span>  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// saveExcel只返回blob数据\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">blob</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExportJsonExcel</span><span class=\"p\">(</span><span class=\"nx\">format</span><span class=\"p\">).</span><span class=\"nx\">saveExcel</span><span class=\"p\">();</span>\n  <span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"nx\">blob</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">myWorker</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 在主线程生成excel\n</span><span class=\"c1\"></span>  <span class=\"nx\">saveAs</span><span class=\"p\">(</span>\n    <span class=\"k\">new</span> <span class=\"nx\">Blob</span><span class=\"p\">([</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">],</span> <span class=\"p\">{</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">&#34;application/octet-stream&#34;</span>\n    <span class=\"p\">}),</span>\n   <span class=\"s2\">&#34;test.xlsx&#34;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>原理就是：我们只把数据转换放在worker里，最后生成excel仍然在主线程里完成。</p><p>至此，优化完成了！</p><h3>总结</h3><p>我们可以把一些耗性能的操作放在worker线程里(比如大文件上传)，这样主线程就能及时响应用户操作而不会造成卡顿现象。需要注意的是，在worker里进行的复杂计算，运行时间并不会变短，有时耗费时间甚至更长，毕竟开启worker也需要消耗一定的性能。</p>", 
            "topic": [
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": [
                {
                    "userName": "天谴丶之月", 
                    "userLink": "https://www.zhihu.com/people/4278e9c9bb071219f2025b4e19cf9193", 
                    "content": "<p>老哥不容易</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "吴浩亮", 
                    "userLink": "https://www.zhihu.com/people/cabd61eff8b9fb95c072826ec3e10523", 
                    "content": "<p>所以这其实是你们后端大哥的锅，是有多懒多忙，导出个 excel 的接口都不给整。</p><a class=\"comment_sticker\" href=\"https://pic4.zhimg.com/v2-ba306425d0a7aee2c7260381f1bf7b97.gif\" data-width=\"\" data-height=\"\">[欢呼]</a>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/72727979", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 12, 
            "title": "lerna管理package", 
            "content": "<p>最近发现公司一个项目的目录组织挺奇怪的，所有的子项目都放在了<code>packages</code>目录里，还有这种骚操作？特意查了下资料，发现是一种比较流行的<code>monorepo</code>项目管理模式。近几年比较火的React,Vue,Babel都是用的这种模式:</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-ac287e793c275d58e7962b2b9a2b0581_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2112\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb\" width=\"2112\" data-original=\"https://pic2.zhimg.com/v2-ac287e793c275d58e7962b2b9a2b0581_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2112&#39; height=&#39;1182&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2112\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2112\" data-original=\"https://pic2.zhimg.com/v2-ac287e793c275d58e7962b2b9a2b0581_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-ac287e793c275d58e7962b2b9a2b0581_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们平常一般采用的都是<code>multiple repositories</code>的项目管理模式：把一个大项目拆分成若干个小项目，每个小项目都独立的放在gitlab上。这种模式其实也没啥不好，但是某些情况下，子项目A依赖子项目B，如果子项目B经常改动，那么每次B改动了，都要修改A，这时就非常麻烦。在开发一个前端框架或者UI库时，就经常会遇到上述情况，这时我们就可以考虑下<code>monorepo</code>。</p><p><code>monorepo</code>说到底也只是一个理念，那么怎么才能实现这种代码组织呢？</p><ul><li><a href=\"https://link.zhihu.com/?target=https%3A//lerna.js.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lerna</a></li><li>yarn中的<a href=\"https://link.zhihu.com/?target=https%3A//yarnpkg.com/lang/zh-hans/docs/workspaces/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Workspace</a></li></ul><p>本文主要介绍下lerna的使用</p><p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-lerna\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码参考</a></p><h3>lerna</h3><p>全局安装<a href=\"https://link.zhihu.com/?target=https%3A//lerna.js.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lerna</a></p><div class=\"highlight\"><pre><code class=\"language-text\">npm i lerna -g</code></pre></div><p>lerna是基于git的，在github上新建一个项目<code>learn-lerna</code></p><div class=\"highlight\"><pre><code class=\"language-text\">git clone git@github.com:deepred5/learn-lerna.git\ncd learn-lerna</code></pre></div><p>初始化项目:</p><div class=\"highlight\"><pre><code class=\"language-text\">lerna init</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-811ffb3753ddb61f7cf6d476855cba9c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"133\" class=\"content_image\" width=\"240\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;240&#39; height=&#39;133&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"133\" class=\"content_image lazy\" width=\"240\" data-actualsrc=\"https://pic1.zhimg.com/v2-811ffb3753ddb61f7cf6d476855cba9c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>lerna会自动创建一个<code>packages</code>目录夹，我们以后的项目都新建在这里面。同时还会在根目录新建一个<code>lerna.json</code>配置文件</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"s2\">&#34;packages&#34;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;packages/*&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"s2\">&#34;version&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0.0.0&#34;</span> <span class=\"c1\">// 共用的版本，由lerna管理\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><h3>创建package</h3><p>我们创建两个package:</p><div class=\"highlight\"><pre><code class=\"language-text\">cd packages\nmkdir prpr-lerna-core\ncd prpr-lerna-core\nnpm init -y\ncd packages\nmkdir prpr-lerna-popular\ncd prpr-lerna-popular\nnpm init -y</code></pre></div><p><b>注意：这两个package我们最后都是要发布到npm上的，所以名字请取特殊些，不能被人用过</b></p><h3>添加依赖</h3><p><code>prpr-lerna-popular</code>依赖<code>prpr-lerna-core</code>，这时有两种方法添加依赖：</p><p>第一种方法是修改<code>prpr-lerna-popular/package.json</code>，添加</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"s2\">&#34;dependencies&#34;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&#34;prpr-lerna-core&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;^1.0.0&#34;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>然后运行<code>lerna bootstrap</code></p><p>第二种方法是直接使用命令<code>add</code></p><div class=\"highlight\"><pre><code class=\"language-text\">lerna add prpr-lerna-core --scope=prpr-lerna-popular</code></pre></div><p>运行之后，我们发现<code>prpr-lerna-popular</code>生成了<code>node_modules</code>，而<code>node_modules</code>里生成了指向<code>prpr-lerna-core</code>的<b>软链</b>，类似<code>npm link</code>的效果: </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-0d35dff7eb9ff446627495bc681d8575_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb\" width=\"695\" data-original=\"https://pic2.zhimg.com/v2-0d35dff7eb9ff446627495bc681d8575_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;695&#39; height=&#39;112&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"112\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"695\" data-original=\"https://pic2.zhimg.com/v2-0d35dff7eb9ff446627495bc681d8575_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-0d35dff7eb9ff446627495bc681d8575_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>新建<code>prpr-lerna-core/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">API</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://yande.re/post/popular_recent.json&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">API</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>prpr-lerna-popular</code>除了依赖<code>prpr-lerna-core</code>，还可以依赖其他开源的库，比如我们使用<code>axios</code></p><div class=\"highlight\"><pre><code class=\"language-text\">lerna add axios --scope=prpr-lerna-popular</code></pre></div><p>新建<code>prpr-lerna-popular/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">API</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;prpr-lerna-core&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">axios</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;axios&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">getPopularImg</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">API</span><span class=\"p\">)</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">getPopularImg</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 测试代码，发布时删除\n</span><span class=\"c1\"></span><span class=\"nx\">getPopularImg</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">));</span>\n</code></pre></div><p>测试一下: <code>node packages/prpr-lerna-popular/index.js</code> 正常情况下可以输出结果</p><h3>发布到npm</h3><p>首先把所有的代码提交</p><div class=\"highlight\"><pre><code class=\"language-text\">cd learn-lerna\ngit add .\ngit commit -m &#34;test publish&#34;</code></pre></div><p>注册一个<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">npmjs</a>账户</p><div class=\"highlight\"><pre><code class=\"language-text\">npm login</code></pre></div><p>登入你的账户，如果本地npm是淘宝镜像，一定要换回<code>https://registry.npmjs.org/</code>地址！！！</p><div class=\"highlight\"><pre><code class=\"language-text\">lerna publish</code></pre></div><p>运行<code>publish</code>，选择发布的版本号 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-e38cbf464a99637e10eb819cfd81f7ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https://pic3.zhimg.com/v2-e38cbf464a99637e10eb819cfd81f7ce_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;994&#39; height=&#39;496&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"994\" data-original=\"https://pic3.zhimg.com/v2-e38cbf464a99637e10eb819cfd81f7ce_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-e38cbf464a99637e10eb819cfd81f7ce_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>lerna可以帮我们管理版本号，非常方便!</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-5ad091e339404f302e4363f0d0db6f74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb\" width=\"882\" data-original=\"https://pic1.zhimg.com/v2-5ad091e339404f302e4363f0d0db6f74_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;882&#39; height=&#39;512&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"882\" data-rawheight=\"512\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"882\" data-original=\"https://pic1.zhimg.com/v2-5ad091e339404f302e4363f0d0db6f74_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-5ad091e339404f302e4363f0d0db6f74_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>常用命令</h3><div class=\"highlight\"><pre><code class=\"language-text\">lerna init #初始化\nlerna bootstrap #下载依赖包或者生成本地软连接\nlerna add axios #所有包都添加axios\nlerna add prpr-lerna-core --scope=prpr-lerna-popular #给包prpr-lerna-popularx添加prpr-lerna-core依赖\nlerna list\nlerna clean</code></pre></div><h3>其他事项</h3><ul><li> lerna默认使用的是集中版本，所有的package共用一个version。如果希望不同的package拥有自己的版本，可以使用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/lerna/lerna/%23independent-mode\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Independent</a>模式<br/> </li><li> 发布package的名字如果是以<code>@</code>开头的，例如<code>@deepred/core</code>，npm默认以为是私人发布，需要使用<code>npm publish --access public</code>发布。但是<code>lerna publish</code>不支持该参数，解决方法参考: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/lerna/lerna/issues/914\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">issues</a><br/> </li></ul><h3>参考</h3><p><a href=\"https://link.zhihu.com/?target=http%3A//www.sohu.com/a/165037119_575744\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈monorepo</a></p>", 
            "topic": [
                {
                    "tag": "npm", 
                    "tagLink": "https://api.zhihu.com/topics/19625829"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "扩散性百万咸面包", 
                    "userLink": "https://www.zhihu.com/people/9a4a1828b8fef55614661e5a6ac4ea2d", 
                    "content": "我喜欢你的文章 特别是封面[酷]", 
                    "likes": 2, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>要是头图放个真人就更好了！</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "谢谢谢妖", 
                    "userLink": "https://www.zhihu.com/people/b03b701848270a513609327a76abc329", 
                    "content": "emmmmmmmmmmm", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/70985017", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 33, 
            "title": "Koa源码浅析", 
            "content": "<p>Koa源码十分精简，只有不到2k行的代码，总共由4个模块文件组成，非常适合我们来学习。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-983d07e6357913e42cf75d67ec3af507_b.jpg\" data-size=\"normal\" data-rawwidth=\"259\" data-rawheight=\"227\" class=\"content_image\" width=\"259\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;259&#39; height=&#39;227&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"259\" data-rawheight=\"227\" class=\"content_image lazy\" width=\"259\" data-actualsrc=\"https://pic4.zhimg.com/v2-983d07e6357913e42cf75d67ec3af507_b.jpg\"/><figcaption>4个文件</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>参考代码: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">learn-koa2</a> </p><p>我们先来看段原生Node实现Server服务器的代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">((</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3000&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>非常简单的几行代码，就实现了一个服务器Server。<code>createServer</code>方法接收的<code>callback</code>回调函数，可以对每次请求的<code>req</code> <code>res</code>对象进行各种操作，最后返回结果。不过弊端也很明显，<code>callback</code>函数非常容易随着业务逻辑的复杂也变得臃肿，即使把<code>callback</code>函数拆分成各个小函数，也会在繁杂的异步回调中渐渐失去对整个流程的把控。</p><p>另外，Node原生提供的一些API，有时也会让开发者疑惑:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n</code></pre></div><p>修改<code>res</code>的属性或者调用<code>res</code>的方法都可以改变<code>http</code>状态码，这在多人协作的项目中，很容易产生不同的代码风格。</p><p>我们再来看段Koa实现Server:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Koa</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;koa&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Koa</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"kr\">await</span> <span class=\"nx\">next</span><span class=\"p\">();</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 最后输出内容：\n</span><span class=\"c1\">// 1-start\n</span><span class=\"c1\">// 2-start\n</span><span class=\"c1\">// 2-end\n</span><span class=\"c1\">// 1-end\n</span></code></pre></div><p>Koa使用了中间件的概念来完成对一个http请求的处理，同时，Koa采用了async和await的语法使得异步流程可以更好的控制。<code>ctx</code>执行上下文代理了原生的<code>res</code>和<code>req</code>，这让开发者避免接触底层，而是通过代理访问和设置属性。</p><p>看完两者的对比后，我们应该会有几个疑惑：  </p><ol><li><i><code>ctx.status</code>为什么就可以直接设置状态码了，不是根本没看到<code>res</code>对象吗？ </i> </li><li>中间件中的<code>next</code>到底是啥？为什么执行<code>next</code>就进入了下一个中间件？</li><li>所有中间件执行完成后，为什么可以再次返回原来的中间件(洋葱模型)？</li></ol><p>现在让我们带着疑惑，进行源码解读，同时自己实现一个简易版的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2/tree/master/kao\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Koa</a>吧！</p><h3>封装http Server</h3><p>参考代码: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2/tree/master/step-1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">step-1</a></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// Koa的使用方法\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">Koa</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;koa&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Koa</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"nx\">ctx</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n</code></pre></div><p>我们首先模仿koa的使用方法，搭建一个最简易的骨架：</p><p>新建<code>kao/application.js</code>(特意使用了<b>Kao</b>，区别<code>Koa</code>，并非笔误!!!)</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Application</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">callback</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callback</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Application</span><span class=\"p\">;</span>\n</code></pre></div><p>新建测试文件<code>kao/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Kao</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./application&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Kao</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello world&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3001&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>我们已经初步封装好http server：通过<code>new</code>实例一个对象，<code>use</code>注册回调函数，<code>listen</code>启动server并传入回调。</p><p>注意的是：调用<code>new</code>时，其实没有开启server服务器，真正开启是在<code>listen</code>调用时。</p><p>不过这段代码有明显的不足: </p><p><i>use传入的回调函数，接收的参数依旧是原生的<code>req</code>和<code>res</code></i> </p><p>多次调用use，会覆盖上一个中间件，并不是依次执行多个中间件</p><p>我们先来解决第一个问题</p><h3>封装req和res对象，构造context</h3><p>参考代码: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2/tree/master/step-2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">step-2</a></p><p>先来介绍下ES6中的get和set <a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000009029639\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参考</a></p><p>基于普通对象的get和set</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">demo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">_name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">get</span> <span class=\"nx\">name</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">name</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deepred&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div><p>基于<code>Class</code>的get和set</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Demo</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">get</span> <span class=\"nx\">name</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">name</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">demo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Demo</span><span class=\"p\">();</span>\n<span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deepred&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n</code></pre></div><p>基于Object.defineProperty的get和set</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">demo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">_name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">defineProperty</span><span class=\"p\">(</span><span class=\"nx\">demo</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">get</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>基于Proxy的get和set</p><div class=\"highlight\"><pre><code class=\"language-text\">const demo = {\n  _name: &#39;&#39;\n}\n\nconst proxy = new Proxy(demo, {\n  get: function(target, name) {\n    return name === &#39;name&#39; ? target[&#39;_name&#39;] : undefined;\n  },\n\n  set function(target, name, val) {\n    name === &#39;name&#39; &amp;&amp; (target[&#39;_name&#39;] = val)\n  }\n});\n</code></pre></div><p>还有<code>__defineSetter__</code>和<code>__defineGetter__</code>的实现，不过现已废弃。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">demo</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">_name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">__defineGetter__</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">demo</span><span class=\"p\">.</span><span class=\"nx\">__defineSetter__</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_name</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>主要区别是，<code>Object.defineProperty  Proxy</code> <code>__defineSetter__</code>可以动态设置属性，而其他方式只能在定义时设置。</p><p>Koa源码中 <code>request.js</code>和<code>response.js</code>就使用了大量的<code>get</code>和<code>set</code>来代理</p><p>新建<code>kao/request.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">get</span> <span class=\"nx\">header</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">header</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">get</span> <span class=\"nx\">url</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">url</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>当访问<code>request.url</code>时，其实就是在访问原生的<code>req.url</code>。需要注意的是，<code>this.req</code>原生对象此时还没有注入！</p><p>同理新建<code>kao/response.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">get</span> <span class=\"nx\">status</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">=</span> <span class=\"nx\">code</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">get</span> <span class=\"nx\">body</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_body</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n\n  <span class=\"nx\">set</span> <span class=\"nx\">body</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 源码里有对val类型的各种判断，这里省略\n</span><span class=\"c1\"></span>    <span class=\"cm\">/* 可能的类型\n</span><span class=\"cm\">    1. string\n</span><span class=\"cm\">    2. Buffer\n</span><span class=\"cm\">    3. Stream\n</span><span class=\"cm\">    4. Object\n</span><span class=\"cm\">    */</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">_body</span> <span class=\"o\">=</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这里对body进行操作并没有使用原生的this.res.end，因为在我们编写koa代码的时候，会对body进行多次的读取和修改，所以真正返回浏览器信息的操作是在<code>application.js</code>里进行封装和操作</p><p>同样需要注意的是，<code>this.res</code>原生对象此时还没有注入！</p><p>新建<code>kao/context.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">delegate</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;delegates&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">proto</span> <span class=\"o\">=</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// context自身的方法\n</span><span class=\"c1\"></span>  <span class=\"nx\">toJSON</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"nx\">request</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">toJSON</span><span class=\"p\">(),</span>\n      <span class=\"nx\">response</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">toJSON</span><span class=\"p\">(),</span>\n      <span class=\"nx\">app</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">toJSON</span><span class=\"p\">(),</span>\n      <span class=\"nx\">originalUrl</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">originalUrl</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;original node req&gt;&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;original node res&gt;&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">socket</span><span class=\"o\">:</span> <span class=\"s1\">&#39;&lt;original node socket&gt;&#39;</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// delegates 原理就是__defineGetter__和__defineSetter__\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// method是委托方法，getter委托getter,access委托getter和setter。\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// proto.status =&gt; proto.response.status\n</span><span class=\"c1\"></span><span class=\"nx\">delegate</span><span class=\"p\">(</span><span class=\"nx\">proto</span><span class=\"p\">,</span> <span class=\"s1\">&#39;response&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">access</span><span class=\"p\">(</span><span class=\"s1\">&#39;status&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">access</span><span class=\"p\">(</span><span class=\"s1\">&#39;body&#39;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">// proto.url = proto.request.url\n</span><span class=\"c1\"></span><span class=\"nx\">delegate</span><span class=\"p\">(</span><span class=\"nx\">proto</span><span class=\"p\">,</span> <span class=\"s1\">&#39;request&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">access</span><span class=\"p\">(</span><span class=\"s1\">&#39;url&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">getter</span><span class=\"p\">(</span><span class=\"s1\">&#39;header&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p><code>context.js</code>代理了<code>request</code>和<code>response</code>。<code>ctx.body</code>指向<code>ctx.response.body</code>。但是此时<code>ctx.response</code> <code>ctx.request</code>还没注入！</p><p>可能会有疑问，为什么<code>response.js</code>和<code>request.js</code>使用<code>get set</code>代理，而<code>context.js</code>使用<code>delegate</code>代理? 原因主要是: <code>set</code>和<code>get</code>方法里面还可以加入一些自己的逻辑处理。而<code>delegate</code>就比较纯粹了，只代理属性。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"nx\">get</span> <span class=\"nx\">length</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 自己的逻辑\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;Content-Length&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">len</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"o\">~~</span><span class=\"nx\">len</span><span class=\"p\">;</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 仅仅代理属性\n</span><span class=\"c1\"></span><span class=\"nx\">delegate</span><span class=\"p\">(</span><span class=\"nx\">proto</span><span class=\"p\">,</span> <span class=\"s1\">&#39;response&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">access</span><span class=\"p\">(</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p>因此<code>context.js</code>比较适合使用<code>delegate</code>，仅仅是代理<code>request</code>和<code>response</code>的属性和方法。</p><p>真正注入原生对象，是在<code>application.js</code>里的<code>createContext</code>方法中注入的！！！</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./context&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./request&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./response&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Application</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 每个Kao实例的context request respones\n</span><span class=\"c1\"></span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">callback</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">handleRequest</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createContext</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">handleRequest</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">handleResponse</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">);</span>\n    <span class=\"c1\">// callbackFn是个async函数，最后返回promise对象\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callbackFn</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResponse</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">createContext</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 针对每个请求，都要创建ctx对象\n</span><span class=\"c1\"></span>    <span class=\"c1\">// 每个请求的ctx request response\n</span><span class=\"c1\"></span>    <span class=\"c1\">// ctx代理原生的req res就是在这里代理的\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">req</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">req</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">;</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">;</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ctx</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callback</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 根据ctx.body的类型，返回最后的数据\n</span><span class=\"c1\"></span>  <span class=\"cm\">/* 可能的类型，代码删减了部分判断\n</span><span class=\"cm\">  1. string\n</span><span class=\"cm\">  2. Buffer\n</span><span class=\"cm\">  3. Stream\n</span><span class=\"cm\">  4. Object\n</span><span class=\"cm\">  */</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">content</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">content</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">content</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;object&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>代码中使用了<code>Object.create</code>的方法创建一个全新的对象，通过原型链继承原来的属性。这样可以有效的防止污染原来的对象。</p><p><code>createContext</code>在每次http请求时都会调用，每次调用都新生成一个<code>ctx</code>对象，并且代理了这次http请求的原生的对象。</p><p><code>respond</code>才是最后返回http响应的方法。根据执行完所有中间件后<code>ctx.body</code>的类型，调用<code>res.end</code>结束此次http请求。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-24e47e1e537b4b3aeb9846ae0764b239_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1435\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb\" width=\"1435\" data-original=\"https://pic2.zhimg.com/v2-24e47e1e537b4b3aeb9846ae0764b239_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1435&#39; height=&#39;926&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1435\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1435\" data-original=\"https://pic2.zhimg.com/v2-24e47e1e537b4b3aeb9846ae0764b239_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-24e47e1e537b4b3aeb9846ae0764b239_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在我们再来测试一下: <code>kao/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Kao</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./application&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Kao</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 使用ctx修改状态码和响应内容\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">200</span><span class=\"p\">;</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">code</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;ok&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">url</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3001&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><h3>中间件机制</h3><p>参考代码: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2/tree/master/step-3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">step-3</a></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">greeting</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">firstName</span><span class=\"p\">,</span> <span class=\"nx\">lastName</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">firstName</span> <span class=\"o\">+</span> <span class=\"s1\">&#39; &#39;</span> <span class=\"o\">+</span> <span class=\"nx\">lastName</span>\n<span class=\"k\">const</span> <span class=\"nx\">toUpper</span> <span class=\"o\">=</span> <span class=\"nx\">str</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">toUpperCase</span><span class=\"p\">()</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">compose</span><span class=\"p\">([</span><span class=\"nx\">toUpper</span><span class=\"p\">,</span> <span class=\"nx\">greeting</span><span class=\"p\">]);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"s1\">&#39;jack&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;smith&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n</code></pre></div><p>函数式编程有个<code>compose</code>的概念。比如把<code>greeting</code>和<code>toUpper</code>组合成一个复合函数。调用这个复合函数，会先调用<code>greeting</code>，然后把返回值传给<code>toUpper</code>继续执行。</p><p>实现方式:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 命令式编程（面向过程）\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">compose</span><span class=\"p\">(</span><span class=\"nx\">fns</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">length</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"nx\">length</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"nx\">fn1</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">fns</span><span class=\"p\">[</span><span class=\"nx\">count</span><span class=\"p\">].</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">count</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">result</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">count</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">fn1</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 声明式编程(函数式)\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">compose</span><span class=\"p\">(</span><span class=\"nx\">funcs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">funcs</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">a</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)))</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>Koa的中间件机制类似上面的<code>compose</code>，同样是把多个函数包装成一个，但是koa的中间件类似洋葱模型，也就是从A中间件执行到B中间件，B中间件执行完成以后，仍然可以再次回到A中间件。 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-6a397981bcfa921e3399dbe94dd95b19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb\" width=\"478\" data-original=\"https://pic2.zhimg.com/v2-6a397981bcfa921e3399dbe94dd95b19_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;478&#39; height=&#39;435&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"435\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"478\" data-original=\"https://pic2.zhimg.com/v2-6a397981bcfa921e3399dbe94dd95b19_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-6a397981bcfa921e3399dbe94dd95b19_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>Koa使用了<code>koa-compose</code>实现了中间件机制，源码非常精简，但是有点难懂。建议先看下我之前关于递归的文章：</p><a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2018/07/30/%25E7%25AE%2580%25E5%258D%2595%25E6%2598%2593%25E6%2587%2582%25E7%259A%2584%25E7%258E%25B0%25E4%25BB%25A3%25E9%25AD%2594%25E6%25B3%2595-%25E9%2580%2592%25E5%25BD%2592/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">简单易懂的现代魔法-递归</a><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">compose</span> <span class=\"p\">(</span><span class=\"nx\">middleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">middleware</span><span class=\"p\">))</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Middleware stack must be an array!&#39;</span><span class=\"p\">)</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"k\">of</span> <span class=\"nx\">middleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">fn</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;function&#39;</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Middleware must be composed of functions!&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/**\n</span><span class=\"cm\">   * @param {Object} context\n</span><span class=\"cm\">   * @return {Promise}\n</span><span class=\"cm\">   * @api public\n</span><span class=\"cm\">   */</span>\n\n  <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// last called middleware #\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">dispatch</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 一个中间件里多次调用next\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;next() called multiple times&#39;</span><span class=\"p\">))</span>\n      <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">i</span>\n      <span class=\"c1\">// fn就是当前的中间件\n</span><span class=\"c1\"></span>      <span class=\"kd\">let</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">middleware</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">===</span> <span class=\"nx\">middleware</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">next</span> <span class=\"c1\">// 最后一个中间件如果也next时进入(一般最后一个中间件是直接操作ctx.body，并不需要next了)\n</span><span class=\"c1\"></span>      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">()</span> <span class=\"c1\">// 没有中间件，直接返回成功\n</span><span class=\"c1\"></span>      <span class=\"k\">try</span> <span class=\"p\">{</span>\n\n        <span class=\"cm\">/* \n</span><span class=\"cm\">          * 使用了bind函数返回新的函数，类似下面的代码\n</span><span class=\"cm\">          return Promise.resolve(fn(context, function next () {\n</span><span class=\"cm\">            return dispatch(i + 1)\n</span><span class=\"cm\">          }))\n</span><span class=\"cm\">        */</span>\n        <span class=\"c1\">// dispatch.bind(null, i + 1)就是中间件里的next参数，调用它就可以进入下一个中间件\n</span><span class=\"c1\"></span>\n        <span class=\"c1\">// fn如果返回的是Promise对象，Promise.resolve直接把这个对象返回\n</span><span class=\"c1\"></span>        <span class=\"c1\">// fn如果返回的是普通对象，Promise.resovle把它Promise化\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)));</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 中间件是async的函数，报错不会走这里，直接在fnMiddleware的catch中捕获\n</span><span class=\"c1\"></span>        <span class=\"c1\">// 捕获中间件是普通函数时的报错,Promise化，这样才能走到fnMiddleware的catch方法\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">sleep</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">time</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(</span><span class=\"nx\">resolve</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"nx\">resolve</span><span class=\"p\">,</span> <span class=\"nx\">time</span><span class=\"p\">));</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">test1</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"p\">;</span>\n  <span class=\"kr\">await</span> <span class=\"nx\">next</span><span class=\"p\">();</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">test2</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">context</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;deepred&#39;</span><span class=\"p\">;</span>\n  <span class=\"kr\">await</span> <span class=\"nx\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2000</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">compose</span><span class=\"p\">([</span><span class=\"nx\">test1</span><span class=\"p\">,</span> <span class=\"nx\">test2</span><span class=\"p\">]);</span>\n\n<span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>递归调用栈的执行情况： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-06a8d59cfe2de9566712b9268bcfde91_b.gif\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"466\" data-thumbnail=\"https://pic2.zhimg.com/v2-06a8d59cfe2de9566712b9268bcfde91_b.jpg\" class=\"content_image\" width=\"312\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;312&#39; height=&#39;466&#39;&gt;&lt;/svg&gt;\" data-size=\"normal\" data-rawwidth=\"312\" data-rawheight=\"466\" data-thumbnail=\"https://pic2.zhimg.com/v2-06a8d59cfe2de9566712b9268bcfde91_b.jpg\" class=\"content_image lazy\" width=\"312\" data-actualsrc=\"https://pic2.zhimg.com/v2-06a8d59cfe2de9566712b9268bcfde91_b.gif\"/><figcaption>调用栈顺序</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>弄懂了中间件机制，我们应该可以回答之前的问题：</p><blockquote><code>next</code>到底是啥？洋葱模型是怎么实现的？</blockquote><p>next就是一个包裹了dispatch的函数</p><p>在第n个中间件中执行next，就是执行dispatch(n+1)，也就是进入第n+1个中间件</p><p>因为dispatch返回的都是Promise，所以在第n个中间件await next(); 进入第n+1个中间件。当第n+1个中间件执行完成后，可以返回第n个中间件</p><p>如果在某个中间件中不再调用next，那么它之后的所有中间件都不会再调用了</p><p>修改<code>kao/application.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Application</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span> <span class=\"o\">=</span> <span class=\"p\">[];</span> <span class=\"c1\">// 存储中间件\n</span><span class=\"c1\"></span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">);</span> <span class=\"c1\">// 存储中间件\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n\n  <span class=\"nx\">compose</span> <span class=\"p\">(</span><span class=\"nx\">middleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">isArray</span><span class=\"p\">(</span><span class=\"nx\">middleware</span><span class=\"p\">))</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Middleware stack must be an array!&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"k\">of</span> <span class=\"nx\">middleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">fn</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;function&#39;</span><span class=\"p\">)</span> <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nx\">TypeError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Middleware must be composed of functions!&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * @param {Object} context\n</span><span class=\"cm\">     * @return {Promise}\n</span><span class=\"cm\">     * @api public\n</span><span class=\"cm\">     */</span>\n\n    <span class=\"k\">return</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// last called middleware #\n</span><span class=\"c1\"></span>      <span class=\"kd\">let</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n      <span class=\"k\">return</span> <span class=\"nx\">dispatch</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"kd\">function</span> <span class=\"nx\">dispatch</span> <span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">&#39;next() called multiple times&#39;</span><span class=\"p\">))</span>\n        <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nx\">i</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">middleware</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">===</span> <span class=\"nx\">middleware</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">next</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">fn</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">,</span> <span class=\"nx\">dispatch</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)));</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">reject</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n\n  <span class=\"nx\">callback</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 合成所有中间件\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">compose</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">);</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">handleRequest</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createContext</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">);</span>\n      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">fn</span><span class=\"p\">)</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">handleRequest</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">fnMiddleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">handleResponse</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">);</span>\n    <span class=\"c1\">// 执行中间件并把最后的结果交给respond\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nx\">fnMiddleware</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResponse</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">createContext</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 针对每个请求，都要创建ctx对象\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">ctx</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">req</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">req</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">;</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">;</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ctx</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">callback</span><span class=\"p\">());</span>\n    <span class=\"k\">return</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">content</span> <span class=\"o\">=</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">content</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">content</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;object&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">content</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>测试一下</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Kao</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./application&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Kao</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"kr\">await</span> <span class=\"nx\">next</span><span class=\"p\">();</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;1-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-start&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hello tc&#39;</span><span class=\"p\">;</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;2-end&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3001&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 1-start 2-start 2-end 1-end\n</span></code></pre></div><h3>错误处理机制</h3><p>参考代码: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-koa2/tree/master/step-4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">step-4</a></p><p>因为<code>compose</code>组合之后的函数返回的仍然是Promise对象，所以我们可以在<code>catch</code>捕获异常</p><p><code>kao/application.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">handleRequest</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">fnMiddleware</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">handleResponse</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">respond</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">onerror</span> <span class=\"o\">=</span> <span class=\"nx\">err</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">onerror</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n  <span class=\"c1\">// catch捕获，触发ctx的onerror方法\n</span><span class=\"c1\"></span>  <span class=\"k\">return</span> <span class=\"nx\">fnMiddleware</span><span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"nx\">handleResponse</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">onerror</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>kao/context.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">proto</span> <span class=\"o\">=</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// context自身的方法\n</span><span class=\"c1\"></span>  <span class=\"nx\">onerror</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 中间件报错捕获\n</span><span class=\"c1\"></span>    <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">res</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s1\">&#39;ENOENT&#39;</span> <span class=\"o\">==</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">;</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;Internal error&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Kao</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./application&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Kao</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 报错可以捕获\n</span><span class=\"c1\"></span>  <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hello tc&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3001&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>现在我们已经实现了中间件的错误异常捕获，但是我们还缺少框架层发生错误的捕获机制。我们可以让<code>Application</code>继承原生的<code>Emitter</code>，从而实现<code>error</code>监听</p><p><code>kao/application.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Emitter</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;events&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 继承Emitter\n</span><span class=\"c1\"></span><span class=\"k\">class</span> <span class=\"nx\">Application</span> <span class=\"k\">extends</span> <span class=\"nx\">Emitter</span> <span class=\"p\">{</span>\n  <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 调用super\n</span><span class=\"c1\"></span>    <span class=\"k\">super</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">context</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">context</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">);</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>kao/context.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">proto</span> <span class=\"o\">=</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">onerror</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">res</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"s1\">&#39;ENOENT&#39;</span> <span class=\"o\">==</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">404</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"mi\">500</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">=</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 触发error事件\n</span><span class=\"c1\"></span>    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"k\">this</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">||</span> <span class=\"s1\">&#39;Internal error&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">Kao</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./application&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Kao</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 报错可以捕获\n</span><span class=\"c1\"></span>  <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hello tc&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;server start at 3001&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 监听error事件\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">stack</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>至此我们可以了解到Koa异常捕获的两种方式： </p><ul><li><i>中间件捕获(Promise catch) </i> </li><li>框架捕获(Emitter error)</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 捕获全局异常的中间件\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">(</span><span class=\"nx\">ctx</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kr\">await</span> <span class=\"nx\">next</span><span class=\"p\">()</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;error&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\">// 事件监听\n</span><span class=\"c1\"></span><span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"nx\">err</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;error happends: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">stack</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><h3>总结</h3><p>Koa整个流程可以分成三步:</p><p><b>初始化阶段:</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">Koa</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;koa&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Koa</span><span class=\"p\">();</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"nx\">ctx</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ctx</span><span class=\"p\">.</span><span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">);</span>\n</code></pre></div><p><code>new</code>初始化一个实例，<code>use</code>搜集中间件到middleware数组，<code>listen</code> 合成中间件<code>fnMiddleware</code>，返回一个callback函数给<code>http.createServer</code>，开启服务器，等待http请求。</p><p><b>请求阶段:</b></p><p>每次请求，<code>createContext</code>生成一个新的<code>ctx</code>，传给<code>fnMiddleware</code>，触发中间件的整个流程</p><p><b>响应阶段:</b></p><p>整个中间件完成后，调用<code>respond</code>方法，对请求做最后的处理，返回响应给客户端。</p><p>参考下面的流程图: </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-c386db23fa78521f0570e90efca1ed51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb\" width=\"1106\" data-original=\"https://pic2.zhimg.com/v2-c386db23fa78521f0570e90efca1ed51_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1106&#39; height=&#39;712&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"712\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1106\" data-original=\"https://pic2.zhimg.com/v2-c386db23fa78521f0570e90efca1ed51_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-c386db23fa78521f0570e90efca1ed51_b.jpg\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Node.js", 
                    "tagLink": "https://api.zhihu.com/topics/19569535"
                }, 
                {
                    "tag": "koa2", 
                    "tagLink": "https://api.zhihu.com/topics/20219631"
                }
            ], 
            "comments": [
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>感谢~是我看到的解析koa最好的文章了</p>", 
                    "likes": 1, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/68136798", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 6, 
            "title": "傻傻分不清的Manifest", 
            "content": "<p>在前端，说到<code>manifest</code>，其实是有歧义的，就我了解的情况来说，<code>manifest</code>可以指代下列含义：</p><ol><li><code>html</code>标签的<code>manifest</code>属性: <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">离线缓存</a>（目前已被废弃）</li><li><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/Manifest\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PWA</a>: 将Web应用程序安装到设备的主屏幕</li><li>webpack中<a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/webpack-manifest-plugin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">webpack-manifest-plugin</a>插件打包出来的<code>manifest.json</code>文件，用来生成一份资源清单，为后端渲染服务 </li><li>webpack中<a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/plugins/dll-plugin/%23root\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DLL</a>打包时,输出的<code>manifest.json</code>文件，用来分析已经打包过的文件，优化打包速度和大小</li></ol><p>下面我们来一一介绍下 </p><h3>html属性</h3><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span> <span class=\"na\">manifest</span><span class=\"o\">=</span><span class=\"s\">&#34;/tc.mymanifest&#34;</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Document<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;/theme.css&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;/main.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;/main2.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>浏览器解析这段html标签时，就会去访问<code>tc.mymanifest</code>这个文件，这是一个缓存清单文件</p><p><code>tc.mymanifest</code></p><div class=\"highlight\"><pre><code class=\"language-text\"># v1 这是注释\nCACHE MANIFEST\n/theme.css\n/main.js\n\nNETWORK:\n*\n\nFALLBACK:\n/html5/ /404.html</code></pre></div><p><code>CACHE MANIFEST</code>指定需要缓存的文件，第一次下载完成以后，文件都不会再从网络请求了，即使用户不是离线状态，除非<code>tc.mymanifest</code>更新了，缓存清单更新之后，才会再次下载。标记了manifest的html本身也被缓存</p><p><code>NETWORK</code>指定非缓存文件，所有类似资源的请求都会绕过缓存，即使用户处于离线状态，也不会读缓存</p><p><code>FALLBACK</code>指定了一个后备页面，当资源无法访问时，浏览器会使用该页面。 比如离线访问/html5/目录时，就会用本地的/404.html页面</p><p>缓存清单可以是任意后缀名，不过必须指定<code>content-type</code>属性为<code>text/cache-manifest</code></p><p>那如何更新缓存？一般有以下几种方式：</p><ul><li>用户清空浏览器缓存</li><li>manifest 文件被修改(即使注释被修改)</li><li>由程序来更新应用缓存</li></ul><p>需要特别注意：用户第一次访问该网页，缓存文件之后，第二次进入该页面，发现<code>tc.mymanifest</code>缓存清单更新了，于是会重新下载缓存文件，但是，<b>第二次进入显示的页面仍然执行的是旧文件，下载的新文件，只会在第三次进入该页面后执行！！！</b></p><p>如果希望用户立即看到新内容，需要js监听更新事件，重新加载页面</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;load&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">applicationCache</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;updateready&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">applicationCache</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">==</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">applicationCache</span><span class=\"p\">.</span><span class=\"nx\">UPDATEREADY</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 更新缓存\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 重新加载\n</span><span class=\"c1\"></span>      <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">applicationCache</span><span class=\"p\">.</span><span class=\"nx\">swapCache</span><span class=\"p\">();</span>\n      <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">reload</span><span class=\"p\">();</span>\n\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n\n    <span class=\"p\">}</span>\n\n  <span class=\"p\">},</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n\n<span class=\"p\">},</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n</code></pre></div><p>建议对<code>tc.mymanifest</code>缓存清单设置永不缓存</p><p>不过，manifest也有很多<a href=\"https://www.zhihu.com/question/29876535\" class=\"internal\">缺点</a>，比如需要手动一个个填写缓存的文件，更新文件之后需要二次刷新，如果更新的资源中有一个资源更新失败了，将导致全部更新失败，将用回上一版本的缓存</p><p>HTML5规范也废弃了这个属性，因此不建议使用</p><h3>PWA</h3><p>为了实现PWA应用添加至桌面的功能，除了要求站点支持HTTPS之外，还需要准备 <code>manifest.json</code>文件去配置应用的图标、名称等信息</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;manifest&#34;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;/manifest.json&#34;</span><span class=\"p\">&gt;</span>\n</code></pre></div><p><i>manifest.json</i></p><div class=\"highlight\"><pre><code class=\"language-text\">{ \n&#34;name&#34; : &#34;Minimal PWA&#34; , \n&#34;short_name&#34; : &#34;PWA Demo&#34; , \n&#34;display&#34; : &#34;standalone&#34; , \n&#34;start_url&#34; : &#34;/&#34; , \n&#34;theme_color&#34; : &#34;#313131&#34; , \n&#34;background_color&#34; : &#34;#313131&#34; , \n&#34;icons&#34; : [ \n  {\n    &#34;src&#34;: &#34;images/touch/homescreen48.png&#34;,\n    &#34;sizes&#34;: &#34;48x48&#34;,\n    &#34;type&#34;: &#34;image/png&#34;\n  }\n ] \n}</code></pre></div><p>通过一系列配置，就可以把一个PWA像APP一样，添加一个图标到手机屏幕上，点击图标即可打开站点</p><h3>基于webpack的react开发环境</h3><p>本文默认你已经了解最基本的webpack配置，如果完全不会，建议看下这篇<a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2018/01/08/%25E4%25BB%258E%25E9%259B%25B6%25E5%25BC%2580%25E5%25A7%258B%25E6%2590%25AD%25E5%25BB%25BA%25E4%25B8%2580%25E4%25B8%25AA%25E7%25AE%2580%25E5%258D%2595%25E7%259A%2584%25E5%259F%25BA%25E4%25BA%258Ewebpack%25E7%259A%2584vue%25E5%25BC%2580%25E5%258F%2591%25E7%258E%25AF%25E5%25A2%2583/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文章</a></p><p>我们首先搭建一个最简单的基于webpack的react开发环境</p><p><b>源代码地址</b>：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/learn-dll\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/deepred5/lea</span><span class=\"invisible\">rn-dll</span><span class=\"ellipsis\"></span></a></p><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir learn-dll\n<span class=\"nb\">cd</span> learn-dll</code></pre></div><p>安装依赖</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm init -y\nnpm install @babel/polyfill react react-dom --save\nnpm install webpack webpack-cli webpack-dev-server @babel/core @babel/preset-env @babel/preset-react add-asset-html-webpack-plugin autoprefixer babel-loader clean-webpack-plugin css-loader html-webpack-plugin mini-css-extract-plugin node-sass postcss-loader sass-loader style-loader --save-dev</code></pre></div><p>新建<code>.bablerc</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"s2\">&#34;presets&#34;</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n      <span class=\"s2\">&#34;@babel/preset-env&#34;</span><span class=\"p\">,</span>\n      <span class=\"p\">{</span>\n        <span class=\"s2\">&#34;useBuiltIns&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;usage&#34;</span><span class=\"p\">,</span> <span class=\"c1\">// 根据browserslis填写的浏览器，自动添加polyfill\n</span><span class=\"c1\"></span>        <span class=\"s2\">&#34;corejs&#34;</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">&#34;@babel/preset-react&#34;</span> <span class=\"c1\">// 编译react\n</span><span class=\"c1\"></span>  <span class=\"p\">],</span>\n  <span class=\"s2\">&#34;plugins&#34;</span><span class=\"o\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>新建<code>postcss.config.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;autoprefixer&#39;</span><span class=\"p\">)</span> <span class=\"c1\">// 根据browserslis填写的浏览器，自动添加css前缀\n</span><span class=\"c1\"></span>  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>新建<code>.browserslistrc</code></p><div class=\"highlight\"><pre><code class=\"language-text\">last 10 versions\nie &gt;= 11\nios &gt;= 9\nandroid &gt;= 6</code></pre></div><p>新建<code>webpack.dev.js</code>(基本配置不再详细介绍)</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;development&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">devtool</span><span class=\"o\">:</span> <span class=\"s1\">&#39;cheap-module-eval-source-map&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">main</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.js&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dist&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].chunk.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">devServer</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">historyApiFallback</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">overlay</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">port</span><span class=\"o\">:</span> <span class=\"mi\">9001</span><span class=\"p\">,</span>\n    <span class=\"nx\">open</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">hot</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s2\">&#34;babel-loader&#34;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;style-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;style-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"p\">{</span>\n            <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n              <span class=\"nx\">modules</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n              <span class=\"nx\">importLoaders</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n            <span class=\"p\">}</span>\n          <span class=\"p\">},</span>\n          <span class=\"s1\">&#39;sass-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span> <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.html&#39;</span> <span class=\"p\">}),</span> <span class=\"c1\">// index打包模板\n</span><span class=\"c1\"></span>  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>新建<code>src</code>目录，并新建<code>src/index.html</code></p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>learn dll<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>新建<code>src/Home.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">&#39;./Home.scss&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">&#34;home&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">home</span><span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n</code></pre></div><p>新建<code>src/Home.scss</code></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">home</span> <span class=\"p\">{</span>\n  <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p>新建<code>src/index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">ReactDom</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Home</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Home&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Demo</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Home</span> <span class=\"o\">/&gt;</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">ReactDom</span><span class=\"p\">.</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">Demo</span><span class=\"o\">/&gt;</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;app&#39;</span><span class=\"p\">));</span>\n</code></pre></div><p>修改<code>package.json</code></p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"s2\">&#34;scripts&#34;</span>: <span class=\"o\">{</span>\n  <span class=\"s2\">&#34;dev&#34;</span>: <span class=\"s2\">&#34;webpack-dev-server --config webpack.dev.js&#34;</span>\n<span class=\"o\">}</span>,</code></pre></div><p>最后，运行<code>npm run dev</code>，应该可以看见效果</p><p>新建<code>webpack.prod.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">CleanWebpackPlugin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;clean-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mini-css-extract-plugin&#39;</span><span class=\"p\">);</span>\n\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">main</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.js&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dist&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].chunk.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s2\">&#34;babel-loader&#34;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span> <span class=\"c1\">// 单独提取css文件\n</span><span class=\"c1\"></span>          <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">modules</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">importLoaders</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n          <span class=\"s1\">&#39;sass-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span> <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.html&#39;</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[id].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">CleanWebpackPlugin</span><span class=\"p\">(),</span> <span class=\"c1\">// 打包前先删除之前的dist目录\n</span><span class=\"c1\"></span>  <span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>修改<code>package.json</code>，添加一句<code>&#34;build&#34;: &#34;webpack --config webpack.prod.js&#34;</code></p><p>运行<code>npm run build</code>，可以看见打包出来的<code>dist</code>目录</p><p>html,js,css都单独分离出来了</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-e865054d25a81838113f4c6e3dfdab0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"282\" data-rawheight=\"86\" class=\"content_image\" width=\"282\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;282&#39; height=&#39;86&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"282\" data-rawheight=\"86\" class=\"content_image lazy\" width=\"282\" data-actualsrc=\"https://pic1.zhimg.com/v2-e865054d25a81838113f4c6e3dfdab0c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>至此，一个基于webpack的react环境搭建完成</p><h3>webpack-manifest-plugin</h3><p>通常情况下，我们打包出来的js,css都是带上版本号的，通过<code>HtmlWebpackPlugin</code>可以自动帮我们在<code>index.html</code>里面加上带版本号的js和css</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>learn dll<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;main.198b3634.css&#34;</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;main.d312f172.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p>但是在某些情况，<code>index.html</code>模板由后端渲染，那么我们就需要一份打包清单，知道打包后的文件对应的真正路径</p><p>安装插件<code>webpack-manifest-plugin</code></p><p><code>npm i webpack-manifest-plugin -D</code></p><p>修改<code>webpack.prod.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">ManifestPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-manifest-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">ManifestPlugin</span><span class=\"p\">()</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>重新打包，可以看见<code>dist</code>目录新生成了一个<code>manifest.json</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">{</span>\n  <span class=\"s2\">&#34;main.css&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;main.198b3634.css&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;main.js&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;main.d312f172.js&#34;</span><span class=\"p\">,</span>\n  <span class=\"s2\">&#34;index.html&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;index.html&#34;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>比如在SSR开发时，前端打包后，node后端就可以通过这个json数据，返回正确资源路径的html模板</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">buildPath</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./dist/manifest.json&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"sb\">`\n</span><span class=\"sb\">  &lt;!DOCTYPE html&gt;\n</span><span class=\"sb\">&lt;html lang=&#34;en&#34;&gt;\n</span><span class=\"sb\">&lt;head&gt;\n</span><span class=\"sb\">  &lt;meta charset=&#34;UTF-8&#34;&gt;\n</span><span class=\"sb\">  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;\n</span><span class=\"sb\">  &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;ie=edge&#34;&gt;\n</span><span class=\"sb\">  &lt;title&gt;ssr&lt;/title&gt;\n</span><span class=\"sb\">&lt;link href=&#34;</span><span class=\"si\">${</span><span class=\"nx\">buildPath</span><span class=\"p\">[</span><span class=\"s1\">&#39;main.css&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sb\">&#34; rel=&#34;stylesheet&#34;&gt;&lt;/head&gt;\n</span><span class=\"sb\">&lt;body&gt;\n</span><span class=\"sb\">  &lt;div id=&#34;app&#34;&gt;&lt;/div&gt;\n</span><span class=\"sb\">&lt;script type=&#34;text/javascript&#34; src=&#34;</span><span class=\"si\">${</span><span class=\"nx\">buildPath</span><span class=\"p\">[</span><span class=\"s1\">&#39;main.js&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sb\">&#34;&gt;&lt;/script&gt;&lt;/body&gt;\n</span><span class=\"sb\">&lt;/html&gt;\n</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n</code></pre></div><h3>代码分割</h3><p>我们之前的打包方式，有一个缺点，就是把业务代码和库代码都统统打到了一个<code>main.js</code>里面。每次业务代码改动后，<code>main.js</code>的hash值就变了，导致客户端又要重新下载一遍<code>main.js</code>，但是里面的库代码其实是没改变的！</p><p>通常情况下，<code>react</code> <code>react-dom</code>之类的库，都是不经常改动的。我们希望单独把这些库代码提取出来，生成一个<code>vendor.js</code>，这样每次改动代码，只是下载<code>main.js</code>，<code>vendor.js</code>可以充分缓存(也就是所谓的代码分割code splitting)</p><p>webpack4自带<a href=\"https://link.zhihu.com/?target=https%3A//webpack.js.org/guides/code-splitting/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">代码分割</a>功能，只要配置:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n  <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">chunks</span><span class=\"o\">:</span> <span class=\"s1\">&#39;all&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p><code>webpack.prod.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">CleanWebpackPlugin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;clean-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mini-css-extract-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">ManifestPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-manifest-plugin&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">main</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.js&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dist&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].chunk.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s2\">&#34;babel-loader&#34;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">modules</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">importLoaders</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n          <span class=\"s1\">&#39;sass-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span> <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.html&#39;</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[id].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">CleanWebpackPlugin</span><span class=\"p\">(),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">ManifestPlugin</span><span class=\"p\">()</span>\n  <span class=\"p\">],</span>\n  <span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">chunks</span><span class=\"o\">:</span> <span class=\"s1\">&#39;all&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>重新打包，发现新生成了一个<code>vendor.js</code>文件，公用的一些代码就被打包进去了</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-0ef81504bdfdfa58c129c7b5aad1f2b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"136\" class=\"content_image\" width=\"299\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;299&#39; height=&#39;136&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"299\" data-rawheight=\"136\" class=\"content_image lazy\" width=\"299\" data-actualsrc=\"https://pic1.zhimg.com/v2-0ef81504bdfdfa58c129c7b5aad1f2b0_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>重新修改<code>src/Home.js</code>,然后打包，你会发现<code>vendor.js</code>的hash没有改变，这也是我们希望的</p><h3>DLL打包</h3><p>上面的打包方式，随着项目的复杂度上升后，打包速度会开始变慢。原因是，每次打包，webpack都要分析哪些是公用库，然后把他打包到<code>vendor.js</code>里</p><p>我们可不可以在第一次构建<code>vendor.js</code>以后，下次打包，就直接跳过那些被打包到<code>vendor.js</code>里的代码呢？这样打包速度可以明显提升</p><p>这就需要<code>DllPlugin</code>结合<code>DllRefrencePlugin</code>插件的运用</p><p>dll打包原理就是： </p><p>1. 把指定的库代码打包到一个<code>dll.js</code>,同时生成一份对应的<code>manifest.json</code>文件 </p><p>2. webpack打包时，读取<code>manifest.json</code>,知道哪些代码可以直接忽略，从而提高构建速度</p><p>我们新建一个<code>webpack.dll.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">CleanWebpackPlugin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;clean-webpack-plugin&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">vendors</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;react&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;react-dom&#39;</span><span class=\"p\">]</span> <span class=\"c1\">// 手动指定打包哪些库\n</span><span class=\"c1\"></span>  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[hash:8].dll.js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dll&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">library</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name]&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">CleanWebpackPlugin</span><span class=\"p\">(),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">DllPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dll/[name].manifest.json&#39;</span><span class=\"p\">),</span> <span class=\"c1\">// 生成对应的manifest.json，给webpack打包用\n</span><span class=\"c1\"></span>      <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name]&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n  <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>添加一条命令:</p><p><code>&#34;build:dll&#34;: &#34;webpack --config webpack.dll.js&#34;</code></p><p>运行dll打包</p><p><code>npm run build:dll</code></p><p>发现生成一个<code>dll</code>目录</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-b6f40e950e939c759f79486ecad82f43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"72\" class=\"content_image\" width=\"293\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;293&#39; height=&#39;72&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"293\" data-rawheight=\"72\" class=\"content_image lazy\" width=\"293\" data-actualsrc=\"https://pic4.zhimg.com/v2-b6f40e950e939c759f79486ecad82f43_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>修改<code>webpack.prod.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">CleanWebpackPlugin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;clean-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mini-css-extract-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">ManifestPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-manifest-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">main</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.js&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dist&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].chunk.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s2\">&#34;babel-loader&#34;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">modules</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">importLoaders</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n          <span class=\"s1\">&#39;sass-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span> <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.html&#39;</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[id].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">DllReferencePlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">manifest</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dll/vendors.manifest.json&#39;</span><span class=\"p\">)</span> <span class=\"c1\">// 读取dll打包后的manifest.json，分析哪些代码跳过\n</span><span class=\"c1\"></span>    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">CleanWebpackPlugin</span><span class=\"p\">(),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">ManifestPlugin</span><span class=\"p\">()</span>\n  <span class=\"p\">],</span>\n  <span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">chunks</span><span class=\"o\">:</span> <span class=\"s1\">&#39;all&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>重新<code>npm run build</code>，发现<code>dist</code>目录里，<code>vendor.js</code>没有了</p><p>这是因为<code>react</code>,<code>react-dom</code>已经打包到<code>dll.js</code>里了，<code>webpack</code>读取<code>manifest.json</code>之后，知道可以忽略这些代码，于是就没有再打包了</p><p>但这里还有个问题，打包后的<code>index.html</code>还需要添加<code>dll.js</code>文件，这就需要<code>add-asset-html-webpack-plugin</code>插件</p><p><code>npm i add-asset-html-webpack-plugin -D</code></p><p>修改<code>webpack.prod.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">CleanWebpackPlugin</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;clean-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">MiniCssExtractPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mini-css-extract-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">ManifestPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack-manifest-plugin&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">webpack</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;webpack&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">AddAssetHtmlPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;add-asset-html-webpack-plugin&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">mode</span><span class=\"o\">:</span> <span class=\"s1\">&#39;production&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">entry</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">main</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.js&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">output</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">path</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dist&#39;</span><span class=\"p\">),</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].js&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].chunk.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">module</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">rules</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.js$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">exclude</span><span class=\"o\">:</span> <span class=\"sr\">/node_modules/</span><span class=\"p\">,</span>\n        <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s2\">&#34;babel-loader&#34;</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.css$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n      <span class=\"p\">{</span>\n        <span class=\"nx\">test</span><span class=\"o\">:</span> <span class=\"sr\">/\\.scss$/</span><span class=\"p\">,</span>\n        <span class=\"nx\">use</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">.</span><span class=\"nx\">loader</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n          <span class=\"nx\">loader</span><span class=\"o\">:</span> <span class=\"s1\">&#39;css-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"nx\">options</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"nx\">modules</span><span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n            <span class=\"nx\">importLoaders</span><span class=\"o\">:</span> <span class=\"mi\">2</span>\n          <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n          <span class=\"s1\">&#39;sass-loader&#39;</span><span class=\"p\">,</span>\n          <span class=\"s1\">&#39;postcss-loader&#39;</span>\n        <span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">plugins</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span> <span class=\"nx\">template</span><span class=\"o\">:</span> <span class=\"s1\">&#39;./src/index.html&#39;</span> <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">AddAssetHtmlPlugin</span><span class=\"p\">({</span> <span class=\"nx\">filepath</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dll/*.dll.js&#39;</span><span class=\"p\">)</span> <span class=\"p\">}),</span> <span class=\"c1\">// 把dll.js加进index.html里，并且拷贝文件到dist目录\n</span><span class=\"c1\"></span>    <span class=\"k\">new</span> <span class=\"nx\">MiniCssExtractPlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[name].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">chunkFilename</span><span class=\"o\">:</span> <span class=\"s1\">&#39;[id].[contenthash:8].css&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">webpack</span><span class=\"p\">.</span><span class=\"nx\">DllReferencePlugin</span><span class=\"p\">({</span>\n      <span class=\"nx\">manifest</span><span class=\"o\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;./dll/vendors.manifest.json&#39;</span><span class=\"p\">)</span> <span class=\"c1\">// 读取dll打包后的manifest.json，分析哪些代码跳过\n</span><span class=\"c1\"></span>    <span class=\"p\">}),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">CleanWebpackPlugin</span><span class=\"p\">(),</span>\n    <span class=\"k\">new</span> <span class=\"nx\">ManifestPlugin</span><span class=\"p\">()</span>\n  <span class=\"p\">],</span>\n  <span class=\"nx\">optimization</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">splitChunks</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">chunks</span><span class=\"o\">:</span> <span class=\"s1\">&#39;all&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p>重新<code>npm run build</code>，可以看见<code>dll.js</code>也被打包进<code>dist</code>目录了，同时<code>index.html</code>也正确引用</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;en&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#34;UTF-8&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;viewport&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;width=device-width, initial-scale=1.0&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#34;X-UA-Compatible&#34;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#34;ie=edge&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>learn dll<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;main.198b3634.css&#34;</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;app&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;vendors.8ec3d1ea.dll.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;text/javascript&#34;</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;main.0bc9c924.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-9bdcb82bc60bbd2f94434f940c94c4ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"289\" data-rawheight=\"201\" class=\"content_image\" width=\"289\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;289&#39; height=&#39;201&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"289\" data-rawheight=\"201\" class=\"content_image lazy\" width=\"289\" data-actualsrc=\"https://pic3.zhimg.com/v2-9bdcb82bc60bbd2f94434f940c94c4ea_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>小结</h3><p>我们介绍了4种<code>manifest</code>相关的前端技术。<code>manifest</code>的英文含义是<b>名单</b>, 4种技术的确都是把<code>manifest</code>当做清单使用： </p><p>1. 缓存清单</p><p>2. PWA清单 </p><p>3. 打包资源路径清单 </p><p>4. dll打包清单</p><p>只不过是在不同的场景中使用特定的清单来完成某些功能</p><p>所以，学好英文是多么重要，这样才不会傻傻分不清<code>manifest</code>到底是干啥的！</p>", 
            "topic": [
                {
                    "tag": "webpack", 
                    "tagLink": "https://api.zhihu.com/topics/20032877"
                }, 
                {
                    "tag": "渐进式网络应用程序（PWA）", 
                    "tagLink": "https://api.zhihu.com/topics/20073560"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "刘亮", 
                    "userLink": "https://www.zhihu.com/people/7ab8a0ee81d6f4a2d6aa7984c18e8f05", 
                    "content": "<p>「wbbpack中webpack-manifest-plugin插件打包出来的manifest.json文件，用来生成一份资源清单，为后端渲染服务」这句话的第一个单词 wbbpack 写错啦</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "<p>已改</p>", 
                            "likes": 0, 
                            "replyToAuthor": "刘亮"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/60933824", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 12, 
            "title": "从零开始写一个Telegram Bot", 
            "content": "<p>原文地址：</p><a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2019/03/30/%25E4%25BB%258E%25E9%259B%25B6%25E5%25BC%2580%25E5%25A7%258B%25E5%2586%2599%25E4%25B8%2580%25E4%25B8%25AATelegram-Bot/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-7c06370bfdeedbf519fcb0aa1610f820_ipico.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从零开始写一个Telegram Bot</a><p>Telegram(电报) 提供了丰富的<a href=\"https://link.zhihu.com/?target=https%3A//core.telegram.org/bots/api\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">API</a>，让我们可以非常方便的开发一个bot机器人。同时，<a href=\"https://link.zhihu.com/?target=https%3A//core.telegram.org/bots/samples\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">社区</a>也已经对底层API进行了各种语言的封装，因此，本文采用<a href=\"https://link.zhihu.com/?target=https%3A//github.com/yagop/node-telegram-bot-api\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">node-telegram-bot-api</a>来快速实现bot</p><h3>创建一个新Bot</h3><p>在Telegram客户端搜索<a href=\"https://link.zhihu.com/?target=https%3A//telegram.me/BotFather\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@BotFather</a>，然后按照步骤创建一个属于自己的bot。创建成功后，BotFather会返回给你一个Token：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-acafacc98568116d63d64a6f43ed0c0c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"258\" class=\"content_image\" width=\"413\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;413&#39; height=&#39;258&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"413\" data-rawheight=\"258\" class=\"content_image lazy\" width=\"413\" data-actualsrc=\"https://pic1.zhimg.com/v2-acafacc98568116d63d64a6f43ed0c0c_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>比如我创建了一个叫<code>hetai5_bot</code>的bot，现在在客户端，我们<code>@hetai5_bot</code>进行任何对话，bot并不会进行响应： </p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-33d60a89875fafa98e3ede0b2c1239a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-33d60a89875fafa98e3ede0b2c1239a8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;500&#39; height=&#39;524&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"524\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic1.zhimg.com/v2-33d60a89875fafa98e3ede0b2c1239a8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-33d60a89875fafa98e3ede0b2c1239a8_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>我们需要在本地编写逻辑，才能响应用户的各种输入</p><h3>实现交互</h3><p>新建一个项目文件夹<code>mkdir bot</code>，<code>npm init -y</code> 然后安装依赖<code>npm i node-telegram-bot-api</code></p><p>新建一个<code>index.js</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">TelegramBot</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-telegram-bot-api&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;填入你的token&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">bot</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TelegramBot</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">polling</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">});</span>\n\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/hentai/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Are you a hetai?&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/echo (.+)/</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>然后<code>node index.js</code>启动文件，这样就成功了吗？</p><p>很可惜，我们需要在代码里手动加上代理(比如ss)</p><p><code>npm i socks5-https-client</code></p><p>修改代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">TelegramBot</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-telegram-bot-api&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">Agent</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;socks5-https-client/lib/Agent&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;填入你的token&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">bot</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TelegramBot</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">polling</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nx\">request</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"c1\">// 设置代理\n</span><span class=\"c1\"></span>    <span class=\"nx\">agentClass</span><span class=\"o\">:</span> <span class=\"nx\">Agent</span><span class=\"p\">,</span>\n    <span class=\"nx\">agentOptions</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">socksPassword</span><span class=\"o\">:</span> <span class=\"s1\">&#39;填入你代理的密码&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// 匹配/hentai\n</span><span class=\"c1\"></span><span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/hentai/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Are you a hetai?&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 匹配/echo\n</span><span class=\"c1\"></span><span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/echo (.+)/</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>这次再和bot对话，就实现了对话功能了！ </p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-071dac7462c9dd2816eb5e02873fd321_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb\" width=\"503\" data-original=\"https://pic2.zhimg.com/v2-071dac7462c9dd2816eb5e02873fd321_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;503&#39; height=&#39;471&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"471\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"503\" data-original=\"https://pic2.zhimg.com/v2-071dac7462c9dd2816eb5e02873fd321_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-071dac7462c9dd2816eb5e02873fd321_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>当然我们可以再加点功能，比如用户输入<code>/prpr</code>，就从网上找一张图片发给用户</p><p><code>npm i request</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">TelegramBot</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-telegram-bot-api&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">Agent</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;socks5-https-client/lib/Agent&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;request&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;填入你的token&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">bot</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TelegramBot</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">polling</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"nx\">request</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"c1\">// 设置代理\n</span><span class=\"c1\"></span>    <span class=\"nx\">agentClass</span><span class=\"o\">:</span> <span class=\"nx\">Agent</span><span class=\"p\">,</span>\n    <span class=\"nx\">agentOptions</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"nx\">socksPassword</span><span class=\"o\">:</span> <span class=\"s1\">&#39;填入你登梯子时的密码&#39;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/hentai/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Are you a hetai?&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/prpr/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://konachan.com/post.json?tags=ass&amp;limit=50&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">error</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[];</span>\n      <span class=\"k\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendPhoto</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">].</span><span class=\"nx\">file_url</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">caption</span><span class=\"o\">:</span> <span class=\"s1\">&#39;手冲一时爽，一直手冲一直爽&#39;</span> <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/echo (.+)/</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-3482fd5f3f77414d9b540485123f80b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic1.zhimg.com/v2-3482fd5f3f77414d9b540485123f80b8_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;501&#39; height=&#39;389&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"389\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"501\" data-original=\"https://pic1.zhimg.com/v2-3482fd5f3f77414d9b540485123f80b8_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/v2-3482fd5f3f77414d9b540485123f80b8_b.jpg\"/></figure><h3>polling VS webhook</h3><p>我们开发的bot是怎么知道用户发送了哪些命令？</p><p>Telegram bot有两种获取用户发送命令的方式，一种是<code>polling</code>模式，也就是轮询。我们的bot需要每隔一段时间，就向Telegram服务器发送请求，询问最近用户发过来了哪些命令。这种方式的好处就是便于在本地调试，我们刚才的代码使用的就是这种模式。坏处就是每隔一段时间就要主动发送请求，即使最近可能没有任何用户发送命令。</p><p>另外一种模式就是<code>webhook</code>，我们需要给bot设置一个webhook地址，比如说<code>https://hentai.com/bot123</code>。这样，每次当用户向bot输入命令时，Telegram就会把这次的命令转发到<code>https://hentai.com/bot123</code>，因此，我们需要在<code>https://hentai.com/bot123</code>部署我们的bot。这种模式的好处就是可以及时响应用户的命令，坏处就是本地调试麻烦，可能需要<code>ngrock</code>这种内网穿透工具。同时在线上部署时，我们还需要有自己的域名并且要支持https!!!</p><h3>线上部署</h3><p>首先，我们需要有一台<b>国外服务器，</b>你还需要有一些简单的linux基础知识，如果你完全不会，推荐你看下我之前写过的一篇文章</p><a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2018/05/09/%25E5%2586%2599%25E7%25BB%2599%25E5%2589%258D%25E7%25AB%25AF%25E5%25B0%258F%25E7%2599%25BD%25E7%259C%258B%25E7%259A%2584linux%25E9%2583%25A8%25E7%25BD%25B2%25E5%259F%25BA%25E7%25A1%2580%25E7%259F%25A5%25E8%25AF%2586/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-51ae83bc59bbddc82faf75390ec33b30_180x120.jpg\" data-image-width=\"1514\" data-image-height=\"151\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">写给前端小白看的linux部署基础知识</a><p>我这里安装的操作系统是centos 7 X64</p><p>因为我们使用了国外的服务器，所以代码里面的http代理可以去掉了:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">TelegramBot</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-telegram-bot-api&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;request&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">token</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;你的token&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">bot</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TelegramBot</span><span class=\"p\">(</span><span class=\"nx\">token</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">polling</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/hentai/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Are you a hetai?&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/prpr/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://konachan.com/post.json?tags=ass&amp;limit=50&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">error</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[];</span>\n      <span class=\"k\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendPhoto</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">].</span><span class=\"nx\">file_url</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">caption</span><span class=\"o\">:</span> <span class=\"s1\">&#39;手冲一时爽，一直手冲一直爽&#39;</span> <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/echo (.+)/</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>安装基础组件,nvm,node,pm2</p><div class=\"highlight\"><pre><code class=\"language-bash\">yum -y install gcc gcc-c++ autoconf pcre-devel make automake\nyum -y install wget httpd-tools vim\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh <span class=\"p\">|</span> bash\nnvm install <span class=\"m\">11</span>.0.0\nnpm i pm2 -g</code></pre></div><p>把本地项目上传到服务器后，直接运行<code>pm2 start index.js --name bot</code>即可</p><h3>域名支持https</h3><p>前面我们说过了，<code>polling</code>模式的坏处就是浪费资源，而且不能及时响应用户请求</p><p><code>webhook</code>模式下，部署比较麻烦，如果不希望使用这种方法，可以忽略下文</p><p>使用<code>webhook</code>的前提是我们有一个自定义域名，同时需要把域名指向我们的vps</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-7a10ea587a01d6ac33ad2e121df28915_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-7a10ea587a01d6ac33ad2e121df28915_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;636&#39; height=&#39;457&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"457\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"636\" data-original=\"https://pic2.zhimg.com/v2-7a10ea587a01d6ac33ad2e121df28915_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-7a10ea587a01d6ac33ad2e121df28915_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>如图，我把一个子域名<code>hentai.urusai.site</code>指向我当前的vps IP地址</p><p>安装<code>nginx</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">vim /etc/yum.repos.d/nginx.repo</code></pre></div><p>写入：</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"o\">[</span>nginx<span class=\"o\">]</span>\n<span class=\"nv\">name</span><span class=\"o\">=</span>nginx repo\n<span class=\"nv\">baseurl</span><span class=\"o\">=</span>http://nginx.org/packages/centos/7/<span class=\"nv\">$basearch</span>/\n<span class=\"nv\">gpgcheck</span><span class=\"o\">=</span><span class=\"m\">0</span>\n<span class=\"nv\">enabled</span><span class=\"o\">=</span><span class=\"m\">1</span></code></pre></div><p><code>:wq!</code>保存退出</p><div class=\"highlight\"><pre><code class=\"language-bash\">yum install nginx</code></pre></div><p>这样就安装了最新版本的nginx</p><p>设置防火墙规则：</p><div class=\"highlight\"><pre><code class=\"language-bash\">firewall-cmd --add-service<span class=\"o\">=</span>http\nfirewall-cmd --add-service<span class=\"o\">=</span>https\nfirewall-cmd --runtime-to-permanent</code></pre></div><p>修改nginx配置：</p><div class=\"highlight\"><pre><code class=\"language-bash\">vim /etc/nginx/conf.d/default.conf</code></pre></div><p>把<code>server_name localhost;</code>修改成域名<code>hentai.urusai.site</code>即可</p><p>完成后，开启nginx:</p><div class=\"highlight\"><pre><code class=\"language-text\">nginx -s reload</code></pre></div><p>浏览器输入<code>http://hentai.urusai.site</code>，就应该有nginx欢迎页面了</p><p>现在我们需要支持https:</p><p>安装<code>certbot</code></p><div class=\"highlight\"><pre><code class=\"language-bash\">yum install epel-release\nyum install certbot-nginx</code></pre></div><p>获取SSL证书</p><div class=\"highlight\"><pre><code class=\"language-bash\">certbot --nginx</code></pre></div><p>成功完成之后，我们访问<code>https://hentai.urusai.site</code>就可以正常请求了！</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-11cbd054380246629956f9e28e34b56d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1254\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb\" width=\"1254\" data-original=\"https://pic2.zhimg.com/v2-11cbd054380246629956f9e28e34b56d_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1254&#39; height=&#39;373&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1254\" data-rawheight=\"373\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1254\" data-original=\"https://pic2.zhimg.com/v2-11cbd054380246629956f9e28e34b56d_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-11cbd054380246629956f9e28e34b56d_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>设置证书自动续期 certbot颁发的证书，默认只有3个月有效期，因此我们可以设置自动续期 每天早上5:15执行任务</p><div class=\"highlight\"><pre><code class=\"language-bash\">crontab -e</code></pre></div><p>输入</p><div class=\"highlight\"><pre><code class=\"language-bash\"><span class=\"m\">15</span> <span class=\"m\">5</span> * * * certbot renew --quiet</code></pre></div><h3>nginx配置webhook</h3><p>Telegram bot使用<code>webhook</code>模式时，我们需要修改现有的代码:</p><div class=\"highlight\"><pre><code class=\"language-text\">npm i express body-parser</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">TelegramBot</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-telegram-bot-api&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;express&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">bodyParser</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;body-parser&#39;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;request&#39;</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">TOKEN</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;你的token&#39;</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://hentai.urusai.site&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 你自己的域名\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">9000</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">bot</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TelegramBot</span><span class=\"p\">(</span><span class=\"nx\">TOKEN</span><span class=\"p\">);</span>\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">setWebHook</span><span class=\"p\">(</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">url</span><span class=\"si\">}</span><span class=\"sb\">/bot</span><span class=\"si\">${</span><span class=\"nx\">TOKEN</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">send</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!&#39;</span><span class=\"p\">));</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"sb\">`/bot</span><span class=\"si\">${</span><span class=\"nx\">TOKEN</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">processUpdate</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">);</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendStatus</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`Express server is listening on </span><span class=\"si\">${</span><span class=\"nx\">port</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/hentai/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Are you a hetai?&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/prpr/</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"nx\">onLoveText</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://konachan.com/post.json?tags=ass&amp;limit=50&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">error</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">[];</span>\n      <span class=\"k\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">()</span> <span class=\"o\">*</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendPhoto</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">[</span><span class=\"nx\">index</span><span class=\"p\">].</span><span class=\"nx\">file_url</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">caption</span><span class=\"o\">:</span> <span class=\"s1\">&#39;手冲一时爽，一直手冲一直爽&#39;</span> <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n      <span class=\"p\">})</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"s1\">&#39;手冲失败&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n\n<span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">onText</span><span class=\"p\">(</span><span class=\"sr\">/\\/echo (.+)/</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">,</span> <span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n\n  <span class=\"k\">const</span> <span class=\"nx\">chatId</span> <span class=\"o\">=</span> <span class=\"nx\">msg</span><span class=\"p\">.</span><span class=\"nx\">chat</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">;</span>\n  <span class=\"k\">const</span> <span class=\"nx\">resp</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n  <span class=\"nx\">bot</span><span class=\"p\">.</span><span class=\"nx\">sendMessage</span><span class=\"p\">(</span><span class=\"nx\">chatId</span><span class=\"p\">,</span> <span class=\"nx\">resp</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><p>然后重新启动pm2 </p><div class=\"highlight\"><pre><code class=\"language-text\">pm2 restart bot</code></pre></div><p>修改nginx配置</p><div class=\"highlight\"><pre><code class=\"language-text\">vim /etc/nginx/conf.d/default.conf</code></pre></div><p>把<code>https://hentai.urusai.site</code>转发到我们刚才express启动的服务器上</p><div class=\"highlight\"><pre><code class=\"language-text\">location / {\n    proxy_pass http://127.0.0.1:9000;\n    proxy_http_version 1.1;\n    proxy_set_header X_FORWARDED_PROTO https;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $host;\n\n}</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">nginx -s reload</code></pre></div><p>重启nginx成功后，访问<code>https://hentai.urusai.site/</code>应该就展示express服务器返回的<code>hello world</code></p><p>同时，我们Telegram bot的<code>webhook</code>模式也设置成功了</p><p>再次访问bot，输入<code>/prpr</code>，依然可以手冲了</p><h3>bot定时发送消息</h3><p>bot除了当用户输入命令时，我们做出相应的操作，我们也可以定时让bot向特定的渠道发送消息</p><p>比如我们可以创建一个channel，然后邀请bot成为管理员，让bot每天10点发送一条天气预报，这样所有订阅了这个channel的用户，都可以收到消息了！</p><h3>最后</h3><p>最近我也做了一个<a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/yande-telegram-bot\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Telegram Bot</a>，用于抓取<a href=\"https://link.zhihu.com/?target=https%3A//yande.re/post\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">yande.re</a>上面的图片</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic4.zhimg.com/v2-088023a20325339aec412d0df2a84e2f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"75\" class=\"origin_image zh-lightbox-thumb\" width=\"484\" data-original=\"https://pic4.zhimg.com/v2-088023a20325339aec412d0df2a84e2f_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;484&#39; height=&#39;75&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"484\" data-rawheight=\"75\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"484\" data-original=\"https://pic4.zhimg.com/v2-088023a20325339aec412d0df2a84e2f_r.jpg\" data-actualsrc=\"https://pic4.zhimg.com/v2-088023a20325339aec412d0df2a84e2f_b.png\"/></figure><p></p>", 
            "topic": [
                {
                    "tag": "Telegram", 
                    "tagLink": "https://api.zhihu.com/topics/19924266"
                }, 
                {
                    "tag": "chatbot", 
                    "tagLink": "https://api.zhihu.com/topics/20062496"
                }
            ], 
            "comments": [
                {
                    "userName": "扩散性百万甜面包", 
                    "userLink": "https://www.zhihu.com/people/c5f581c2e6cac28fe4ee1cacf9f82c44", 
                    "content": "<p>好图</p>", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "<p>色图虽好，可不要手冲。刚被人举报了，只能把图片全撤了。。。。</p>", 
                            "likes": 2, 
                            "replyToAuthor": "扩散性百万甜面包"
                        }
                    ]
                }, 
                {
                    "userName": "地瓜", 
                    "userLink": "https://www.zhihu.com/people/7b68a9fc1a5d081a77342cf6251eb208", 
                    "content": "<p>收藏了</p>", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "<p>一早起来，发现文章被举报，忧伤</p>", 
                            "likes": 0, 
                            "replyToAuthor": "地瓜"
                        }, 
                        {
                            "userName": "地瓜", 
                            "userLink": "https://www.zhihu.com/people/7b68a9fc1a5d081a77342cf6251eb208", 
                            "content": "哭了，图还没保存", 
                            "likes": 0, 
                            "replyToAuthor": "深红"
                        }
                    ]
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/59770940", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 6, 
            "title": "重拾JSX", 
            "content": "<p><b>React.createElement语法糖</b></p><p><a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/introducing-jsx.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JSX</a>是一种JavaScript的语法拓展，可以使用它来进行UI的展示：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"o\">!&lt;</span><span class=\"err\">/h1&gt;;</span>\n</code></pre></div><p>我们一般会在组件的<code>render</code>方法里使用JSX进行布局和事件绑定:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Home</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"o\">!&lt;</span><span class=\"err\">/h1&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Blog</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"s2\">&#34;deepred&#34;</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>React的核心机制之一就是可以创建虚拟的DOM元素，利用虚拟DOM来减少对实际DOM的操作从而提升性能，JSX正是为了虚拟DOM而存在的语法糖</p><p>我们在平时的组件编写中，通常都这么写:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nx\">Demo</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"o\">!&lt;</span><span class=\"err\">/h1&gt;</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>然而代码里面并没有用到React，为什么要引入这个变量呢？</p><p>因为JSX是<code>React.createElement</code>这个方法的语法糖：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;container&#34;</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">&#34;home&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;;</span>\n\n<span class=\"c1\">// 等价于\n</span><span class=\"c1\"></span><span class=\"k\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;h1&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&#34;container&#34;</span><span class=\"p\">,</span>\n  <span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s2\">&#34;home&#34;</span>\n<span class=\"p\">},</span> <span class=\"s2\">&#34;Hello&#34;</span><span class=\"p\">);</span>\n</code></pre></div><p>推荐大家在<a href=\"https://link.zhihu.com/?target=https%3A//babeljs.io/repl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">babeljs.io</a>上看下JSX编译后的实际效果 </p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-2293b675a872cdec9c7f9cc5423afb22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1183\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"1183\" data-original=\"https://pic3.zhimg.com/v2-2293b675a872cdec9c7f9cc5423afb22_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1183&#39; height=&#39;207&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1183\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1183\" data-original=\"https://pic3.zhimg.com/v2-2293b675a872cdec9c7f9cc5423afb22_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-2293b675a872cdec9c7f9cc5423afb22_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/react-api.html%23createelement\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">React.createElement</a>有三个参数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span>\n  <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"c1\">// dom类型，比如div，h1\n</span><span class=\"c1\"></span>  <span class=\"p\">[</span><span class=\"nx\">props</span><span class=\"p\">],</span> <span class=\"c1\">// dom属性，比如id，class，事件\n</span><span class=\"c1\"></span>  <span class=\"p\">[...</span><span class=\"nx\">children</span><span class=\"p\">]</span> <span class=\"c1\">// 子节点，字符串或者React.createElement生成的一个对象\n</span><span class=\"c1\"></span><span class=\"p\">)</span>\n</code></pre></div><p>JSX用一种类似HTML的语法替代了比较繁琐的<code>React.createElement</code>纯JS方法，而<code>@babel/preset-react</code>插件就起到了最关键的一步：负责在webpack编译时，把所有的JSX都改成<code>React.createElement</code>:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Home</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"p\">,</span> <span class=\"nx\">world</span><span class=\"o\">!&lt;</span><span class=\"err\">/h1&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">Blog</span> <span class=\"nx\">title</span><span class=\"o\">=</span><span class=\"s2\">&#34;deepred&#34;</span> <span class=\"o\">/&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>编译后：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Home</span> <span class=\"k\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">onClick</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">},</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;h1&#34;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"s2\">&#34;Hello, world!&#34;</span><span class=\"p\">),</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">Blog</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s2\">&#34;deepred&#34;</span>\n    <span class=\"p\">}));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>在开发中，有了JSX后我们基本不怎么需要用到<code>createElement</code>方法，但如果我们需要实现这样一个组件：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 根据传入的type属性，渲染成相应的html元素\n</span><span class=\"c1\"></span><span class=\"o\">&lt;</span><span class=\"nx\">Tag</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">&#34;h1&#34;</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;hello&#34;</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"k\">this</span> <span class=\"nx\">is</span> <span class=\"nx\">a</span> <span class=\"nx\">h1</span><span class=\"o\">&lt;</span><span class=\"err\">/Tag&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nx\">Tag</span> <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">&#34;p&#34;</span><span class=\"o\">&gt;</span><span class=\"k\">this</span> <span class=\"nx\">is</span> <span class=\"nx\">a</span> <span class=\"nx\">p</span><span class=\"o\">&lt;</span><span class=\"err\">/Tag&gt;</span>\n</code></pre></div><p>我们不太可能根据type的属性，一个个<code>if else</code>去判断对应的标签：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">Tag</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">other</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;h1&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"p\">{...</span><span class=\"nx\">other</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">type</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">p</span> <span class=\"p\">{...</span><span class=\"nx\">other</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/p&gt;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>这时，就需要用到底层的api了：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">Tag</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">other</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">other</span><span class=\"p\">,</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div><h2><b>自己实现一个JSX渲染器</b></h2><p>虚拟dom本质就是一个js对象：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s1\">&#39;div&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">attrs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"nx\">className</span><span class=\"o\">:</span> <span class=\"s1\">&#39;container&#39;</span>\n  <span class=\"p\">},</span>\n  <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s1\">&#39;img&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">attrs</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n          <span class=\"nx\">src</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1.png&#39;</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">tag</span><span class=\"o\">:</span> <span class=\"s1\">&#39;h3&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">attrs</span><span class=\"o\">:</span> <span class=\"p\">{},</span>\n        <span class=\"nx\">children</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>可以通过在每个文件的上方添加<code>/** @jsx h */</code>来告诉<code>@babel/preset-react</code>用<code>h</code>方法名代替JSX（默认方法是React.createElement）</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/** @jsx h */</span>\n\n<span class=\"k\">const</span> <span class=\"nx\">element</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">h1</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;container&#34;</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"s2\">&#34;home&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"o\">&lt;</span><span class=\"err\">/h1&gt;;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">/** @jsx h */\nconst element = h(&#34;h1&#34;, {\n  id: &#34;container&#34;,\n  className: &#34;home&#34;\n}, &#34;Hello&#34;);</code></pre></div><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-a96556a39e588106253cbb99ee9289dd_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1113\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"1113\" data-original=\"https://pic2.zhimg.com/v2-a96556a39e588106253cbb99ee9289dd_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1113&#39; height=&#39;148&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1113\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1113\" data-original=\"https://pic2.zhimg.com/v2-a96556a39e588106253cbb99ee9289dd_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/v2-a96556a39e588106253cbb99ee9289dd_b.png\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>现在让我们开始创建自己的<code>h</code>函数吧！</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"nx\">nodeName</span><span class=\"p\">,</span> <span class=\"nx\">attributes</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 使用concat是为了扁平化args，因为args数组里面的元素可能也是数组\n</span><span class=\"c1\"></span>  <span class=\"c1\">// h(&#39;div&#39;, {}, [1, 2, 3])  h(&#39;d&#39;, {}, 1, 2, 3) 都是合法的调用\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">children</span> <span class=\"o\">=</span> <span class=\"nx\">args</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">?</span> <span class=\"p\">[].</span><span class=\"nx\">concat</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">nodeName</span><span class=\"p\">,</span> <span class=\"nx\">attributes</span><span class=\"p\">,</span> <span class=\"nx\">children</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n<span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&#34;urusai&#34;</span>\n<span class=\"p\">},</span> <span class=\"s2\">&#34;Hello!&#34;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 返回\n</span><span class=\"c1\">// {\n</span><span class=\"c1\">//  &#34;nodeName&#34;: &#34;div&#34;,\n</span><span class=\"c1\">//  &#34;attributes&#34;: {\n</span><span class=\"c1\">//   &#34;id&#34;: &#34;urusai&#34;\n</span><span class=\"c1\">//  },\n</span><span class=\"c1\">//  &#34;children&#34;: [\n</span><span class=\"c1\">//   &#34;Hello!&#34;\n</span><span class=\"c1\">//  ]\n</span><span class=\"c1\">// }\n</span></code></pre></div><p><code>h</code>的作用就是返回一个vnode，有了vnode，我们还需要把vnode转成真实的dom:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">vnode</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 生成文本节点\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createTextNode</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// 生成元素节点并设置属性\n</span><span class=\"c1\"></span>  <span class=\"k\">const</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">.</span><span class=\"nx\">nodeName</span><span class=\"p\">);</span>\n  <span class=\"k\">const</span> <span class=\"nx\">attributes</span> <span class=\"o\">=</span> <span class=\"nx\">vnode</span><span class=\"p\">.</span><span class=\"nx\">attributes</span> <span class=\"o\">||</span> <span class=\"p\">{};</span>\n  <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"nx\">attributes</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">key</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">setAttribute</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">attributes</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]));</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 递归调用render生成子节点\n</span><span class=\"c1\"></span>    <span class=\"nx\">vnode</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">child</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">child</span><span class=\"p\">)));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">node</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>现在让我们使用这两个方法吧：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/** @jsx h */</span>\n<span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;urusai&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">Hello</span><span class=\"o\">!&lt;</span><span class=\"err\">/div&gt;;</span>\n<span class=\"k\">const</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">);</span>\n</code></pre></div><p>编译转码后：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/** @jsx h */</span>\n<span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"s2\">&#34;div&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s2\">&#34;urusai&#34;</span>\n<span class=\"p\">},</span> <span class=\"s2\">&#34;Hello!&#34;</span><span class=\"p\">);</span>\n<span class=\"k\">const</span> <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">);</span>\n</code></pre></div><p>我们还可以遍历数组：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/** @jsx h */</span>\n<span class=\"k\">const</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;baga&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hentai&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;urusai&#39;</span><span class=\"p\">];</span>\n<span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">ul</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"o\">&lt;</span><span class=\"nx\">li</span> <span class=\"nx\">key</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">index</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">item</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/li&gt;)}&lt;/ul&gt;;</span>\n<span class=\"k\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n</code></pre></div><p>编译转码后：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"cm\">/** @jsx h */</span>\n<span class=\"k\">const</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;baga&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hentai&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;urusai&#39;</span><span class=\"p\">];</span>\n<span class=\"k\">const</span> <span class=\"nx\">vnode</span> <span class=\"o\">=</span> <span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"s2\">&#34;ul&#34;</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">item</span><span class=\"p\">,</span> <span class=\"nx\">index</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"s2\">&#34;li&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">key</span><span class=\"o\">:</span> <span class=\"nx\">index</span>\n<span class=\"p\">},</span> <span class=\"nx\">item</span><span class=\"p\">)));</span>\n<span class=\"k\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">vnode</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n</code></pre></div><p>通过<code>h</code> <code>render</code>两个函数，我们就实现了一个很简单的JSX渲染器！！！</p><h2><b>参考</b></h2><a href=\"https://link.zhihu.com/?target=https%3A//jasonformat.com/wtf-is-jsx/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">WTF is JSX</a><p class=\"ztext-empty-paragraph\"><br/></p><a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/jsx-in-depth.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-cba0b89d2bf2d96a1ed26edb5849f804_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"630\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JSX In Depth – React</a><a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/react-without-jsx.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-cba0b89d2bf2d96a1ed26edb5849f804_180x120.jpg\" data-image-width=\"1200\" data-image-height=\"630\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">React Without JSX – React</a><p></p>", 
            "topic": [
                {
                    "tag": "React", 
                    "tagLink": "https://api.zhihu.com/topics/20013159"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "扩散性百万甜面包", 
                    "userLink": "https://www.zhihu.com/people/c5f581c2e6cac28fe4ee1cacf9f82c44", 
                    "content": "封面好评", 
                    "likes": 1, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "我只是来发色图的，顺便写下教程", 
                            "likes": 0, 
                            "replyToAuthor": "扩散性百万甜面包"
                        }
                    ]
                }, 
                {
                    "userName": "「已注销」", 
                    "userLink": "https://www.zhihu.com/people/b5ceab718732992d82c6d0819f1d003e", 
                    "content": "h函数有时候得判断一下nodeName吧，比如遇到函数组件", 
                    "likes": 0, 
                    "childComments": [
                        {
                            "userName": "深红", 
                            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
                            "content": "嗯，还要判断是不是用户自定义的组件，而且事件绑定也没实现，文章里的h函数只是很简单的实现", 
                            "likes": 0, 
                            "replyToAuthor": "「已注销」"
                        }
                    ]
                }, 
                {
                    "userName": "鲁小夫", 
                    "userLink": "https://www.zhihu.com/people/37b16179eb39f5f21ecf6a6416350639", 
                    "content": "<p>你把你封面给我交了</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "大江山岚", 
                    "userLink": "https://www.zhihu.com/people/36ddf904e3fcc0c5204532632326d63b", 
                    "content": "天狗唯一指定前端框架", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/43767228", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 11, 
            "title": "由一次重构代码所想到的", 
            "content": "<p></p><a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2018/09/04/%25E7%2594%25B1%25E4%25B8%2580%25E6%25AC%25A1%25E9%2587%258D%25E6%259E%2584%25E4%25BB%25A3%25E7%25A0%2581%25E6%2589%2580%25E6%2583%25B3%25E5%2588%25B0%25E7%259A%2584/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-510588b68ddc2b0bffa8ccadbbe99ffa_ipico.jpg\" data-image-width=\"640\" data-image-height=\"640\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">由一次重构代码所想到的</a><p>事件的起因源于我大三时写过的一个chrome插件：<a href=\"https://link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/%25E7%2581%25B5%25E6%25A2%25A6%25E5%25BE%25A1%25E6%2589%2580/fpiljkfgljdkhlgogfbanafflmibdloc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">老司机的工具箱</a>，当时因为某XX御所开启了老司机模式，导致资源下载链接被隐藏，再加上那时无意间看了一篇教程<a href=\"https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/book/1421\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Chrome扩展及应用开发</a>，于是性致勃勃的花了几天时间，写出了这个插件：用来显示被隐藏的下载地址和自动填写百度网盘密码。之后插件也陆陆续续迭代了几个版本，不过最后不了了之。</p><p>插件发布到如今，两年时间里，也有几千用户了，这点倒是让我挺意外的，看来世上还是绅士多。。。</p><p>前几天在家无事，于是就review了代码(<a href=\"https://link.zhihu.com/?target=https%3A//github.com/deepred5/reimu-extension\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目地址</a>): <b>两年前的代码看懂是不可能看懂的，这辈子都不能看懂，只能重构下代码这样子。</b> 不过在重构的过程中，也不禁感叹两年的时间，前端还真的是风云变幻，当年的自己菜的抠脚。</p><h2><b>前端工程化</b></h2><p>重构时最大的区别就是工程化了。</p><p>两年前的代码，我还是停留在html页面直接引入js，css，写代码就是jQuery一把梭子的层面。</p><p>而如今，在真正写代码前，我可能需要花些时间，来配置一些诸如webpack，babel的构建、编译工具。配置的繁琐带来的是开发时的便捷，2年前没有模块化的js和css是我现在不敢想象的。</p><h2><b>代码风格</b></h2><p>两年前的代码到处充斥着各种全局变量和函数，随意的DOM操作和callback调用，使得面条代码让人看得更加凌乱。</p><p>而如今，我更加倾向于面向对象和函数式编程。</p><p>两年前我应该会毫不犹豫写出这样的代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;DOMContentLoaded&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderContainer</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 对数据进行一些加工\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"nx\">newData</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">ajax</span><span class=\"p\">({</span>\n        <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">api</span><span class=\"p\">,</span>\n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">dataType</span><span class=\"o\">:</span> <span class=\"s1\">&#39;json&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">success</span><span class=\"o\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">const</span> <span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#container&#39;</span><span class=\"p\">);</span>\n            <span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"nx\">renderContainer</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">const</span> <span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#btn&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 处理事件\n</span><span class=\"c1\"></span>    <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>现在我会这样写：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">class</span> <span class=\"nx\">Demo</span> <span class=\"p\">{</span>\n    <span class=\"nx\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">container</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#container&#39;</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">btn</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#btn&#39;</span><span class=\"p\">);</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">init</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">renderTemplate</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 对数据进行一些加工\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"nx\">newData</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderContainer</span><span class=\"p\">();</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">bindHandler</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">async</span> <span class=\"nx\">renderContainer</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"kr\">await</span> <span class=\"nx\">ajax</span><span class=\"p\">({</span>\n            <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"nx\">api</span><span class=\"p\">,</span>\n            <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;GET&#39;</span><span class=\"p\">,</span>\n            <span class=\"nx\">dataType</span><span class=\"o\">:</span> <span class=\"s1\">&#39;json&#39;</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">container</span><span class=\"p\">.</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">renderTemplate</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">bindHandler</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">btn</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;click&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// 处理事件\n</span><span class=\"c1\"></span>        <span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;DOMContentLoaded&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"nx\">demo</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Demo</span><span class=\"p\">();</span>\n<span class=\"p\">})</span>\n</code></pre></div><p>其实这种写法已经类似于React和Vue了。MVVM框架除了带来数据驱动的理念，其实也在一定程度上推动了面向对象和函数式编程的思想。</p><h2><b>解决问题</b></h2><p>两年前我写这个插件的时候，遇到了一个很费解的bug：就是进入网站首页，点击文章标题进入详情页面后，并不能显示隐藏的下载地址，每次都需要我手动刷新一遍页面才能成功。</p><p>当时水平有限，想了半天也不明白为啥会这样，拖着拖着就忘了。这次重构，想起了这个bug，分析了一下，其实很简单：网站采用了pjax技术，进入首页后，插件注入的js就被触发，寻找被隐藏的下载地址dom，然而这时并没有这个dom。点击标题进入详情页，这时我们需要的dom被插入了，但是由于使用了pjax，整个页面其实并没有重新加载，插件注入的js已经被执行过一次了，所以这时就无法把dom展示出来，而需要我们手动刷新，重新执行一遍注入的js。</p><p>解决方法是，利用<code>MutationObserver</code>监听pjax更新的dom元素，如果发现更新了dom，就再次执行js方法</p><p>还遇到了一个问题:</p><div class=\"highlight\"><pre><code class=\"language-text\">var str = `【磁力链接】\nmagnet:?xt=urn:btih:404d1cf190660dfd301e289411cfc3185fcb2c92\n\n【百度云】\n传送门 提取码：lmys\n`</code></pre></div><p>如何在把lmys提取出来？</p><p>当时很拙劣的使用了字符串截取：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">getPwd</span><span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">index1</span> <span class=\"o\">=</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"s1\">&#39;提取码&#39;</span><span class=\"p\">);</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">index2</span> <span class=\"o\">=</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">indexOf</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">,</span> <span class=\"nx\">index1</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">index1</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">index2</span> <span class=\"o\">!==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"nx\">index1</span> <span class=\"o\">+</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"nx\">index2</span><span class=\"p\">).</span><span class=\"nx\">trim</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p>现在看来，一行正则就搞定的事情：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">regPassword</span> <span class=\"o\">=</span> <span class=\"sr\">/提取码.*([a-zA-Z0-9]{4})/</span><span class=\"p\">;</span>\n</code></pre></div><h2>总结</h2><p>废话了那么多，其实就是想说，每个人在每个阶段都会受限于当时的技术水平和眼界格局，而写出在当时自认为是最好的代码。</p><p>如果你最近觉得自己水平一直上不去，技术遇到了瓶颈，这时不妨---</p><p>拔掉网线，关上电脑，读几页《Angular从入门到放弃》，出门去漫展走走，要么去女装，天黑了约几个好久不见的肥宅找个地方喝点快乐水、聊聊里番，随便做些什么。一天下来，你就会发现，还是jQuery写的爽！</p><p>PS: 文章里的磁力链接送你了</p>", 
            "topic": [
                {
                    "tag": "代码重构", 
                    "tagLink": "https://api.zhihu.com/topics/19574586"
                }, 
                {
                    "tag": "JavaScript", 
                    "tagLink": "https://api.zhihu.com/topics/19552521"
                }
            ], 
            "comments": [
                {
                    "userName": "aug", 
                    "userLink": "https://www.zhihu.com/people/854b2bdf10ab30ca4fa5142c46f74ba3", 
                    "content": "送磁力链，(ಡωಡ)hiahiahia", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "知乎用户", 
                    "userLink": "https://www.zhihu.com/people/0", 
                    "content": "<p>性致勃勃</p><p></p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "小夜勃", 
                    "userLink": "https://www.zhihu.com/people/b9257942d93b19dc12beed885dba52c8", 
                    "content": "<p>谢谢 很有启发</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "tmomy", 
                    "userLink": "https://www.zhihu.com/people/5c5cf25dc7c8d1d2d490ea65849ff01c", 
                    "content": "朋友，你最近怎么了", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "那小伙子是个码农", 
                    "userLink": "https://www.zhihu.com/people/d2baffbe0884f60ef1909fa29f4d5356", 
                    "content": "<p>jquery用的爽吧</p>", 
                    "likes": 0, 
                    "childComments": []
                }, 
                {
                    "userName": "冰凌", 
                    "userLink": "https://www.zhihu.com/people/8cb3b34ac846afd811bfc0a7ead7d8a2", 
                    "content": "<p>天哪，居然发现了作者</p>", 
                    "likes": 0, 
                    "childComments": []
                }
            ]
        }, 
        {
            "url": "https://zhuanlan.zhihu.com/p/40917358", 
            "userName": "深红", 
            "userLink": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5", 
            "upvote": 3, 
            "title": "简单易懂的现代魔法-递归", 
            "content": "<p>平时在前端开发中，好像也没啥用到递归的地方。不过这并不代表递归不重要，如果你看过一些框架的源码，就会经常见到它的影子：比如渲染虚拟DOM的render函数，webpack中require依赖分析，Koa2洋葱式的中间件模型，其实都运用到了递归算法。</p><p class=\"ztext-empty-paragraph\"><br/></p><p><a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2018/07/30/%25E7%25AE%2580%25E5%258D%2595%25E6%2598%2593%25E6%2587%2582%25E7%259A%2584%25E7%258E%25B0%25E4%25BB%25A3%25E9%25AD%2594%25E6%25B3%2595-%25E9%2580%2592%25E5%25BD%2592/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">博客原文</a></p><h2>递归概念</h2><p>那么递归到底是啥？先上两张图：</p><p>图1：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"540\" data-thumbnail=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"427\" data-original=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;427&#39; height=&#39;540&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"540\" data-thumbnail=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"427\" data-original=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-15e0aaf1d3ed17c62d67783b021861a6_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>图2：</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-179d5334f7891d73dd668e02831887f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic3.zhimg.com/v2-179d5334f7891d73dd668e02831887f2_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;960&#39; height=&#39;600&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"960\" data-original=\"https://pic3.zhimg.com/v2-179d5334f7891d73dd668e02831887f2_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-179d5334f7891d73dd668e02831887f2_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><blockquote><b>递归，就是在运行的过程中调用自己</b></blockquote><p>我们来看个最简单的阶乘函数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"mi\">5</span><span class=\"o\">!</span> <span class=\"o\">=</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"mi\">4</span> <span class=\"o\">*</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"mi\">1</span>\n<span class=\"kd\">function</span> <span class=\"nx\">factorial</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 基线条件\n</span><span class=\"c1\"></span>        <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 递归条件\n</span><span class=\"c1\"></span>    <span class=\"k\">return</span> <span class=\"nx\">num</span> <span class=\"o\">*</span> <span class=\"nx\">factorial</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">factorial</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">);</span>\n</code></pre></div><p>一个常规的递归函数都有两部分：<br/>1. 基线条件(<code>if (num === 1)</code>)：保证函数不再调用自己，避免无限循环<br/>2. 递归条件(<code>num * factorial(num-1)</code>)：保证函数能够调用自己</p><h2>调用栈</h2><p>栈是一种先进后出的数据结构，它只有两种操作，出栈和入栈</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">const</span> <span class=\"nx\">nekopara</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;chocolat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Coconut&#39;</span><span class=\"p\">];</span>\n<span class=\"nx\">nekopara</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">&#39;vanilla&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// 入栈\n</span><span class=\"c1\"></span><span class=\"nx\">nekopara</span><span class=\"p\">.</span><span class=\"nx\">pop</span><span class=\"p\">();</span> <span class=\"c1\">// 出栈\n</span></code></pre></div><p>代码在运行过程中，会有一个叫做调用栈(call stack)的概念。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`hello, </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">!`</span><span class=\"p\">)</span>\n    <span class=\"nx\">greet2</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`getting ready to say bye`</span><span class=\"p\">);</span>\n    <span class=\"nx\">bye</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">greet2</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`how are you, </span><span class=\"si\">${</span><span class=\"nx\">name</span><span class=\"si\">}</span><span class=\"sb\">?`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">bye</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`bye`</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">greet</span><span class=\"p\">(</span><span class=\"s1\">&#39;deepred&#39;</span><span class=\"p\">);</span>\n</code></pre></div><p>调用<code>greet(&#39;deepred&#39;)</code>时，计算机会首先给该函数分配一块内存，并将变量名<code>name</code>设置为<code>deepred</code></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic2.zhimg.com/v2-8b67de652c00e765f107beccebaceab1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"129\" class=\"content_image\" width=\"290\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;290&#39; height=&#39;129&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"129\" class=\"content_image lazy\" width=\"290\" data-actualsrc=\"https://pic2.zhimg.com/v2-8b67de652c00e765f107beccebaceab1_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>每当调用函数时，都会分配一个内存块并将涉及到的变量值存储到内存中。</p><p>打印<code>hello, deepred</code>后，调用了<code>greet2(&#39;deepred&#39;)</code>。同样，计算机再次分配了一块内存，并且该内存块位于第一个内存块上面。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-8c157b0f035630e0b8d93acf6787fd7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb\" width=\"571\" data-original=\"https://pic3.zhimg.com/v2-8c157b0f035630e0b8d93acf6787fd7a_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;571&#39; height=&#39;352&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"571\" data-rawheight=\"352\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"571\" data-original=\"https://pic3.zhimg.com/v2-8c157b0f035630e0b8d93acf6787fd7a_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-8c157b0f035630e0b8d93acf6787fd7a_b.jpg\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p>调用栈的最上面表示当前运行的函数，如图所示，现在正在运行的是greet2函数，打印输出<code>how are you, deepred?</code>后，函数greet2执行完毕，栈顶的内存块被弹出。</p><p>现在栈顶的内存块又变回greet，这意味着我们从greet2的函数中跳出，再次返回到了greet。</p><p>我们在greet中调用了greet2时，greet只执行了一部分。</p><p>特别注意：<b>调用另外一个函数时，当前函数暂停并且处于未完成状态，暂停函数的所有变量的值仍然在内存中</b>。</p><p>执行完greet2后，我们回到了greet，并从离开的地方开始接着往下执行：首先打印<code>getting ready to say bye</code>，然后调用bye函数。</p><p>在栈顶添加了bye函数的内存块后，开始执行bye函数，打印<code>bye</code>，然后函数返回，内存块被弹出。</p><p>我们又再次回到了greet中，这次没有其他要运行的代码了，于是从greet函数中返回，内存块被弹出，调用栈最后为空。</p><p><b>完整的一次调用流程</b>：</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><noscript><img src=\"https://pic1.zhimg.com/v2-52128c893759e90ab052f4a9f5db13cc_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"354\" data-thumbnail=\"https://pic1.zhimg.com/v2-52128c893759e90ab052f4a9f5db13cc_b.jpg\" class=\"content_image\" width=\"309\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;309&#39; height=&#39;354&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"309\" data-rawheight=\"354\" data-thumbnail=\"https://pic1.zhimg.com/v2-52128c893759e90ab052f4a9f5db13cc_b.jpg\" class=\"content_image lazy\" width=\"309\" data-actualsrc=\"https://pic1.zhimg.com/v2-52128c893759e90ab052f4a9f5db13cc_b.gif\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>递归调用栈</h2><p><br/>递归同样使用调用栈</p><div class=\"highlight\"><pre><code class=\"language-text\">我们来分析下阶乘fact(3)的调用栈\nfunction fact(num) {\n    if (num === 1) { \n        return 1;\n    }\n    return num * fact(num-1);\n}\nfact(3);\n</code></pre></div><p>直接看图:</p><figure data-size=\"normal\"><noscript><img src=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"399\" data-thumbnail=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_r.jpg\"/></noscript><img src=\"data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;697&#39; height=&#39;399&#39;&gt;&lt;/svg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"697\" data-rawheight=\"399\" data-thumbnail=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_b.jpg\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"697\" data-original=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/v2-033f87bdbf9734e59ffb2e4803f993da_b.gif\"/></figure><h2>递归注意事项</h2><p>递归会导致程序的性能变低</p><p>如果递归嵌套很深，那么调用栈会很长，这将占用大量内存，可能会导致栈溢出</p>", 
            "topic": [
                {
                    "tag": "递归", 
                    "tagLink": "https://api.zhihu.com/topics/19631498"
                }, 
                {
                    "tag": "算法", 
                    "tagLink": "https://api.zhihu.com/topics/19553510"
                }, 
                {
                    "tag": "前端开发", 
                    "tagLink": "https://api.zhihu.com/topics/19550901"
                }
            ], 
            "comments": []
        }
    ], 
    "url": "https://zhuanlan.zhihu.com/mahou"
}
